{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages stdlib assert backpressure buffered builtin bureaucracy capsicum cli collections collections/persistent debug encode/base64 files format ini itertools json logger math net options ponybench ponytest process promises random serialise signals strings term time","title":"stdlib"},{"location":"assert--index/","text":"Assert package \u00b6 Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the debug flag, check out Assert . For assertions that are always enabled, check out Fact . Public Types \u00b6 primitive Assert primitive Fact","title":"Package"},{"location":"assert--index/#assert-package","text":"Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the debug flag, check out Assert . For assertions that are always enabled, check out Fact .","title":"Assert package"},{"location":"assert--index/#public-types","text":"primitive Assert primitive Fact","title":"Public Types"},{"location":"assert-Assert/","text":"Assert \u00b6 [Source] This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Assert Constructors \u00b6 create \u00b6 [Source] new val create() : Assert val^ Returns \u00b6 Assert val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( test: Bool val, msg: String val = \"\") : None val ? Parameters \u00b6 test: Bool val msg: String val = \"\" Returns \u00b6 None val ? eq \u00b6 [Source] fun box eq( that: Assert val) : Bool val Parameters \u00b6 that: Assert val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Assert val) : Bool val Parameters \u00b6 that: Assert val Returns \u00b6 Bool val","title":"primitive Assert"},{"location":"assert-Assert/#assert","text":"[Source] This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Assert","title":"Assert"},{"location":"assert-Assert/#constructors","text":"","title":"Constructors"},{"location":"assert-Assert/#create","text":"[Source] new val create() : Assert val^","title":"create"},{"location":"assert-Assert/#returns","text":"Assert val^","title":"Returns"},{"location":"assert-Assert/#public-functions","text":"","title":"Public Functions"},{"location":"assert-Assert/#apply","text":"[Source] fun box apply( test: Bool val, msg: String val = \"\") : None val ?","title":"apply"},{"location":"assert-Assert/#parameters","text":"test: Bool val msg: String val = \"\"","title":"Parameters"},{"location":"assert-Assert/#returns_1","text":"None val ?","title":"Returns"},{"location":"assert-Assert/#eq","text":"[Source] fun box eq( that: Assert val) : Bool val","title":"eq"},{"location":"assert-Assert/#parameters_1","text":"that: Assert val","title":"Parameters"},{"location":"assert-Assert/#returns_2","text":"Bool val","title":"Returns"},{"location":"assert-Assert/#ne","text":"[Source] fun box ne( that: Assert val) : Bool val","title":"ne"},{"location":"assert-Assert/#parameters_2","text":"that: Assert val","title":"Parameters"},{"location":"assert-Assert/#returns_3","text":"Bool val","title":"Returns"},{"location":"assert-Fact/","text":"Fact \u00b6 [Source] This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Fact Constructors \u00b6 create \u00b6 [Source] new val create() : Fact val^ Returns \u00b6 Fact val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( test: Bool val, msg: String val = \"\") : None val ? Parameters \u00b6 test: Bool val msg: String val = \"\" Returns \u00b6 None val ? eq \u00b6 [Source] fun box eq( that: Fact val) : Bool val Parameters \u00b6 that: Fact val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Fact val) : Bool val Parameters \u00b6 that: Fact val Returns \u00b6 Bool val","title":"primitive Fact"},{"location":"assert-Fact/#fact","text":"[Source] This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error. primitive val Fact","title":"Fact"},{"location":"assert-Fact/#constructors","text":"","title":"Constructors"},{"location":"assert-Fact/#create","text":"[Source] new val create() : Fact val^","title":"create"},{"location":"assert-Fact/#returns","text":"Fact val^","title":"Returns"},{"location":"assert-Fact/#public-functions","text":"","title":"Public Functions"},{"location":"assert-Fact/#apply","text":"[Source] fun box apply( test: Bool val, msg: String val = \"\") : None val ?","title":"apply"},{"location":"assert-Fact/#parameters","text":"test: Bool val msg: String val = \"\"","title":"Parameters"},{"location":"assert-Fact/#returns_1","text":"None val ?","title":"Returns"},{"location":"assert-Fact/#eq","text":"[Source] fun box eq( that: Fact val) : Bool val","title":"eq"},{"location":"assert-Fact/#parameters_1","text":"that: Fact val","title":"Parameters"},{"location":"assert-Fact/#returns_2","text":"Bool val","title":"Returns"},{"location":"assert-Fact/#ne","text":"[Source] fun box ne( that: Fact val) : Bool val","title":"ne"},{"location":"assert-Fact/#parameters_2","text":"that: Fact val","title":"Parameters"},{"location":"assert-Fact/#returns_3","text":"Bool val","title":"Returns"},{"location":"backpressure--index/","text":"Backpressure Package \u00b6 The Backpressure package allows Pony programmers to participate in Pony's runtime backpressure system. The goal of the backpressure system is to prevent an actor's mailbox from growing at an unbounded rate. At a high level, the runtime backpressure system works by adjusting the scheduling of actors. When an actor becomes overloaded, the Pony runtime will deprioritize scheduling the actors that are sending to it. This change in scheduling allows the overloaded actor to catch up. The Pony runtime can detect overloading based on message queue size. However, the overloading of some types of actors is harder to detect. Let's take the case of actors like TCPConnection . TCPConnection manages a socket for sending data to and receiving data from another process. TCP connections can experience backpressure from outside our Pony program that prevents them from sending. There's no way for the Pony runtime to detect this, so intervention by the programmer is needed. TCPConnection is a single example. This Backpressure package exists to allow a programmer to indicate to the runtime that a given actor is experiencing pressure and sending messages to it should be adjusted accordingly. Any actor that needs to be able to tell the runtime to \"send me messages slower\" due to external conditions can do so via this package. Additionally, actors that maintain their own internal queues of any sort, say for buffering, are also prime candidates for using this package. If an actor's internal queue grows too large, it can call Backpressure.apply to let the runtime know it is under pressure. Example program \u00b6 // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use \"backpressure\" use \"collections\" use \"net\" class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) => _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) => _out.print(\"Experiencing backpressure!\") Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) => _out.print(\"Releasing backpressure!\") Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, \"\", \"7669\") end Caveat \u00b6 The runtime backpressure is a powerful system. By intervening, programmers can create deadlocks. Any call to Backpressure.apply should be matched by a corresponding call to Backpressure.release . Authorization via the ApplyReleaseBackpressureAuth capability is required to apply or release backpressure. By requiring that the caller have a token to apply or release a backpressure, rouge 3rd party library code can't run wild and unknowingly interfere with the runtime. Public Types \u00b6 type BackpressureAuth primitive Backpressure primitive ApplyReleaseBackpressureAuth","title":"Package"},{"location":"backpressure--index/#backpressure-package","text":"The Backpressure package allows Pony programmers to participate in Pony's runtime backpressure system. The goal of the backpressure system is to prevent an actor's mailbox from growing at an unbounded rate. At a high level, the runtime backpressure system works by adjusting the scheduling of actors. When an actor becomes overloaded, the Pony runtime will deprioritize scheduling the actors that are sending to it. This change in scheduling allows the overloaded actor to catch up. The Pony runtime can detect overloading based on message queue size. However, the overloading of some types of actors is harder to detect. Let's take the case of actors like TCPConnection . TCPConnection manages a socket for sending data to and receiving data from another process. TCP connections can experience backpressure from outside our Pony program that prevents them from sending. There's no way for the Pony runtime to detect this, so intervention by the programmer is needed. TCPConnection is a single example. This Backpressure package exists to allow a programmer to indicate to the runtime that a given actor is experiencing pressure and sending messages to it should be adjusted accordingly. Any actor that needs to be able to tell the runtime to \"send me messages slower\" due to external conditions can do so via this package. Additionally, actors that maintain their own internal queues of any sort, say for buffering, are also prime candidates for using this package. If an actor's internal queue grows too large, it can call Backpressure.apply to let the runtime know it is under pressure.","title":"Backpressure Package"},{"location":"backpressure--index/#example-program","text":"// Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use \"backpressure\" use \"collections\" use \"net\" class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) => _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) => _out.print(\"Experiencing backpressure!\") Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) => _out.print(\"Releasing backpressure!\") Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, \"\", \"7669\") end","title":"Example program"},{"location":"backpressure--index/#caveat","text":"The runtime backpressure is a powerful system. By intervening, programmers can create deadlocks. Any call to Backpressure.apply should be matched by a corresponding call to Backpressure.release . Authorization via the ApplyReleaseBackpressureAuth capability is required to apply or release backpressure. By requiring that the caller have a token to apply or release a backpressure, rouge 3rd party library code can't run wild and unknowingly interfere with the runtime.","title":"Caveat"},{"location":"backpressure--index/#public-types","text":"type BackpressureAuth primitive Backpressure primitive ApplyReleaseBackpressureAuth","title":"Public Types"},{"location":"backpressure-ApplyReleaseBackpressureAuth/","text":"ApplyReleaseBackpressureAuth \u00b6 [Source] primitive val ApplyReleaseBackpressureAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: AmbientAuth val) : ApplyReleaseBackpressureAuth val^ Parameters \u00b6 from: AmbientAuth val Returns \u00b6 ApplyReleaseBackpressureAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ApplyReleaseBackpressureAuth val) : Bool val Parameters \u00b6 that: ApplyReleaseBackpressureAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ApplyReleaseBackpressureAuth val) : Bool val Parameters \u00b6 that: ApplyReleaseBackpressureAuth val Returns \u00b6 Bool val","title":"primitive ApplyReleaseBackpressureAuth"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#applyreleasebackpressureauth","text":"[Source] primitive val ApplyReleaseBackpressureAuth","title":"ApplyReleaseBackpressureAuth"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#constructors","text":"","title":"Constructors"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#create","text":"[Source] new val create( from: AmbientAuth val) : ApplyReleaseBackpressureAuth val^","title":"create"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#parameters","text":"from: AmbientAuth val","title":"Parameters"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#returns","text":"ApplyReleaseBackpressureAuth val^","title":"Returns"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#public-functions","text":"","title":"Public Functions"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#eq","text":"[Source] fun box eq( that: ApplyReleaseBackpressureAuth val) : Bool val","title":"eq"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#parameters_1","text":"that: ApplyReleaseBackpressureAuth val","title":"Parameters"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#ne","text":"[Source] fun box ne( that: ApplyReleaseBackpressureAuth val) : Bool val","title":"ne"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#parameters_2","text":"that: ApplyReleaseBackpressureAuth val","title":"Parameters"},{"location":"backpressure-ApplyReleaseBackpressureAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"backpressure-Backpressure/","text":"Backpressure \u00b6 [Source] primitive val Backpressure Constructors \u00b6 create \u00b6 [Source] new val create() : Backpressure val^ Returns \u00b6 Backpressure val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val)) : None val Parameters \u00b6 auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val) Returns \u00b6 None val release \u00b6 [Source] fun box release( auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val)) : None val Parameters \u00b6 auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val) Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: Backpressure val) : Bool val Parameters \u00b6 that: Backpressure val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Backpressure val) : Bool val Parameters \u00b6 that: Backpressure val Returns \u00b6 Bool val","title":"primitive Backpressure"},{"location":"backpressure-Backpressure/#backpressure","text":"[Source] primitive val Backpressure","title":"Backpressure"},{"location":"backpressure-Backpressure/#constructors","text":"","title":"Constructors"},{"location":"backpressure-Backpressure/#create","text":"[Source] new val create() : Backpressure val^","title":"create"},{"location":"backpressure-Backpressure/#returns","text":"Backpressure val^","title":"Returns"},{"location":"backpressure-Backpressure/#public-functions","text":"","title":"Public Functions"},{"location":"backpressure-Backpressure/#apply","text":"[Source] fun box apply( auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val)) : None val","title":"apply"},{"location":"backpressure-Backpressure/#parameters","text":"auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val)","title":"Parameters"},{"location":"backpressure-Backpressure/#returns_1","text":"None val","title":"Returns"},{"location":"backpressure-Backpressure/#release","text":"[Source] fun box release( auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val)) : None val","title":"release"},{"location":"backpressure-Backpressure/#parameters_1","text":"auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val)","title":"Parameters"},{"location":"backpressure-Backpressure/#returns_2","text":"None val","title":"Returns"},{"location":"backpressure-Backpressure/#eq","text":"[Source] fun box eq( that: Backpressure val) : Bool val","title":"eq"},{"location":"backpressure-Backpressure/#parameters_2","text":"that: Backpressure val","title":"Parameters"},{"location":"backpressure-Backpressure/#returns_3","text":"Bool val","title":"Returns"},{"location":"backpressure-Backpressure/#ne","text":"[Source] fun box ne( that: Backpressure val) : Bool val","title":"ne"},{"location":"backpressure-Backpressure/#parameters_3","text":"that: Backpressure val","title":"Parameters"},{"location":"backpressure-Backpressure/#returns_4","text":"Bool val","title":"Returns"},{"location":"backpressure-BackpressureAuth/","text":"BackpressureAuth \u00b6 [Source] type BackpressureAuth is (AmbientAuth val | ApplyReleaseBackpressureAuth val) Type Alias For \u00b6 ( AmbientAuth val | ApplyReleaseBackpressureAuth val)","title":"type BackpressureAuth"},{"location":"backpressure-BackpressureAuth/#backpressureauth","text":"[Source] type BackpressureAuth is (AmbientAuth val | ApplyReleaseBackpressureAuth val)","title":"BackpressureAuth"},{"location":"backpressure-BackpressureAuth/#type-alias-for","text":"( AmbientAuth val | ApplyReleaseBackpressureAuth val)","title":"Type Alias For"},{"location":"buffered--index/","text":"Buffered Package \u00b6 The Buffered package provides two classes, Writer and Reader , for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats. Example program \u00b6 use \"buffered\" actor Main new create(env: Env) => let reader = Reader let writer = Writer writer.u32_be(42) writer.f32_be(3.14) let b = recover iso Array[U8] end for chunk in writer.done().values() do b.append(chunk) end reader.append(consume b) try env.out.print(reader.u32_be()?.string()) // prints 42 env.out.print(reader.f32_be()?.string()) // prints 3.14 end Public Types \u00b6 class Writer class Reader","title":"Package"},{"location":"buffered--index/#buffered-package","text":"The Buffered package provides two classes, Writer and Reader , for writing and reading messages using common encodings. These classes are useful when dealing with things like network data and binary file formats.","title":"Buffered Package"},{"location":"buffered--index/#example-program","text":"use \"buffered\" actor Main new create(env: Env) => let reader = Reader let writer = Writer writer.u32_be(42) writer.f32_be(3.14) let b = recover iso Array[U8] end for chunk in writer.done().values() do b.append(chunk) end reader.append(consume b) try env.out.print(reader.u32_be()?.string()) // prints 42 env.out.print(reader.f32_be()?.string()) // prints 3.14 end","title":"Example program"},{"location":"buffered--index/#public-types","text":"class Writer class Reader","title":"Public Types"},{"location":"buffered-Reader/","text":"Reader \u00b6 [Source] Store network data and provide a parsing interface. Reader provides a way to extract typed data from a sequence of bytes. The Reader manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the Reader using the append method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a Reader to decode a message of this type and print them: use \"buffered\" use \"collections\" class Notify is InputNotify let _env: Env new create(env: Env) => _env = env fun ref apply(data: Array[U8] iso) => let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\") end end end actor Main new create(env: Env) => env.input(recover Notify(env) end, 1024) class ref Reader Constructors \u00b6 create \u00b6 [Source] new iso create() : Reader iso^ Returns \u00b6 Reader iso^ Public Functions \u00b6 size \u00b6 [Source] Return the number of available bytes. fun box size() : USize val Returns \u00b6 USize val clear \u00b6 [Source] Discard all pending data. fun ref clear() : None val Returns \u00b6 None val append \u00b6 [Source] Add a chunk of data. fun ref append( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val skip \u00b6 [Source] Skip n bytes. fun ref skip( n: USize val) : None val ? Parameters \u00b6 n: USize val Returns \u00b6 None val ? block \u00b6 [Source] Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the Reader . fun ref block( len: USize val) : Array[U8 val] iso^ ? Parameters \u00b6 len: USize val Returns \u00b6 Array [ U8 val] iso^ ? read_until \u00b6 [Source] Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. fun ref read_until( separator: U8 val) : Array[U8 val] iso^ ? Parameters \u00b6 separator: U8 val Returns \u00b6 Array [ U8 val] iso^ ? line \u00b6 [Source] Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set keep_line_breaks to true to keep the line breaks in the returned line. fun ref line( keep_line_breaks: Bool val = false) : String iso^ ? Parameters \u00b6 keep_line_breaks: Bool val = false Returns \u00b6 String iso^ ? u8 \u00b6 [Source] Get a U8. Raise an error if there isn't enough data. fun ref u8() : U8 val ? Returns \u00b6 U8 val ? i8 \u00b6 [Source] Get an I8. fun ref i8() : I8 val ? Returns \u00b6 I8 val ? u16_be \u00b6 [Source] Get a big-endian U16. fun ref u16_be() : U16 val ? Returns \u00b6 U16 val ? u16_le \u00b6 [Source] Get a little-endian U16. fun ref u16_le() : U16 val ? Returns \u00b6 U16 val ? i16_be \u00b6 [Source] Get a big-endian I16. fun ref i16_be() : I16 val ? Returns \u00b6 I16 val ? i16_le \u00b6 [Source] Get a little-endian I16. fun ref i16_le() : I16 val ? Returns \u00b6 I16 val ? u32_be \u00b6 [Source] Get a big-endian U32. fun ref u32_be() : U32 val ? Returns \u00b6 U32 val ? u32_le \u00b6 [Source] Get a little-endian U32. fun ref u32_le() : U32 val ? Returns \u00b6 U32 val ? i32_be \u00b6 [Source] Get a big-endian I32. fun ref i32_be() : I32 val ? Returns \u00b6 I32 val ? i32_le \u00b6 [Source] Get a little-endian I32. fun ref i32_le() : I32 val ? Returns \u00b6 I32 val ? u64_be \u00b6 [Source] Get a big-endian U64. fun ref u64_be() : U64 val ? Returns \u00b6 U64 val ? u64_le \u00b6 [Source] Get a little-endian U64. fun ref u64_le() : U64 val ? Returns \u00b6 U64 val ? i64_be \u00b6 [Source] Get a big-endian I64. fun ref i64_be() : I64 val ? Returns \u00b6 I64 val ? i64_le \u00b6 [Source] Get a little-endian I64. fun ref i64_le() : I64 val ? Returns \u00b6 I64 val ? u128_be \u00b6 [Source] Get a big-endian U128. fun ref u128_be() : U128 val ? Returns \u00b6 U128 val ? u128_le \u00b6 [Source] Get a little-endian U128. fun ref u128_le() : U128 val ? Returns \u00b6 U128 val ? i128_be \u00b6 [Source] Get a big-endian I129. fun ref i128_be() : I128 val ? Returns \u00b6 I128 val ? i128_le \u00b6 [Source] Get a little-endian I128. fun ref i128_le() : I128 val ? Returns \u00b6 I128 val ? f32_be \u00b6 [Source] Get a big-endian F32. fun ref f32_be() : F32 val ? Returns \u00b6 F32 val ? f32_le \u00b6 [Source] Get a little-endian F32. fun ref f32_le() : F32 val ? Returns \u00b6 F32 val ? f64_be \u00b6 [Source] Get a big-endian F64. fun ref f64_be() : F64 val ? Returns \u00b6 F64 val ? f64_le \u00b6 [Source] Get a little-endian F64. fun ref f64_le() : F64 val ? Returns \u00b6 F64 val ? peek_u8 \u00b6 [Source] Peek at a U8 at the given offset. Raise an error if there isn't enough data. fun box peek_u8( offset: USize val = 0) : U8 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U8 val ? peek_i8 \u00b6 [Source] Peek at an I8. fun box peek_i8( offset: USize val = 0) : I8 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I8 val ? peek_u16_be \u00b6 [Source] Peek at a big-endian U16. fun box peek_u16_be( offset: USize val = 0) : U16 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U16 val ? peek_u16_le \u00b6 [Source] Peek at a little-endian U16. fun box peek_u16_le( offset: USize val = 0) : U16 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U16 val ? peek_i16_be \u00b6 [Source] Peek at a big-endian I16. fun box peek_i16_be( offset: USize val = 0) : I16 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I16 val ? peek_i16_le \u00b6 [Source] Peek at a little-endian I16. fun box peek_i16_le( offset: USize val = 0) : I16 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I16 val ? peek_u32_be \u00b6 [Source] Peek at a big-endian U32. fun box peek_u32_be( offset: USize val = 0) : U32 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U32 val ? peek_u32_le \u00b6 [Source] Peek at a little-endian U32. fun box peek_u32_le( offset: USize val = 0) : U32 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U32 val ? peek_i32_be \u00b6 [Source] Peek at a big-endian I32. fun box peek_i32_be( offset: USize val = 0) : I32 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I32 val ? peek_i32_le \u00b6 [Source] Peek at a little-endian I32. fun box peek_i32_le( offset: USize val = 0) : I32 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I32 val ? peek_u64_be \u00b6 [Source] Peek at a big-endian U64. fun box peek_u64_be( offset: USize val = 0) : U64 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U64 val ? peek_u64_le \u00b6 [Source] Peek at a little-endian U64. fun box peek_u64_le( offset: USize val = 0) : U64 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U64 val ? peek_i64_be \u00b6 [Source] Peek at a big-endian I64. fun box peek_i64_be( offset: USize val = 0) : I64 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I64 val ? peek_i64_le \u00b6 [Source] Peek at a little-endian I64. fun box peek_i64_le( offset: USize val = 0) : I64 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I64 val ? peek_u128_be \u00b6 [Source] Peek at a big-endian U128. fun box peek_u128_be( offset: USize val = 0) : U128 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U128 val ? peek_u128_le \u00b6 [Source] Peek at a little-endian U128. fun box peek_u128_le( offset: USize val = 0) : U128 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U128 val ? peek_i128_be \u00b6 [Source] Peek at a big-endian I129. fun box peek_i128_be( offset: USize val = 0) : I128 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I128 val ? peek_i128_le \u00b6 [Source] Peek at a little-endian I128. fun box peek_i128_le( offset: USize val = 0) : I128 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 I128 val ? peek_f32_be \u00b6 [Source] Peek at a big-endian F32. fun box peek_f32_be( offset: USize val = 0) : F32 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 F32 val ? peek_f32_le \u00b6 [Source] Peek at a little-endian F32. fun box peek_f32_le( offset: USize val = 0) : F32 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 F32 val ? peek_f64_be \u00b6 [Source] Peek at a big-endian F64. fun box peek_f64_be( offset: USize val = 0) : F64 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 F64 val ? peek_f64_le \u00b6 [Source] Peek at a little-endian F64. fun box peek_f64_le( offset: USize val = 0) : F64 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 F64 val ? Private Functions \u00b6 _byte \u00b6 [Source] Get a single byte. fun ref _byte() : U8 val ? Returns \u00b6 U8 val ? _peek_byte \u00b6 [Source] Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. fun box _peek_byte( offset: USize val = 0) : U8 val ? Parameters \u00b6 offset: USize val = 0 Returns \u00b6 U8 val ? _distance_of \u00b6 [Source] Get the distance to the first occurrence of the given byte fun ref _distance_of( byte: U8 val) : USize val ? Parameters \u00b6 byte: U8 val Returns \u00b6 USize val ? _search_length \u00b6 [Source] Get the length of a pending line. Raise an error if there is no pending line. fun ref _search_length() : USize val ? Returns \u00b6 USize val ?","title":"class Reader"},{"location":"buffered-Reader/#reader","text":"[Source] Store network data and provide a parsing interface. Reader provides a way to extract typed data from a sequence of bytes. The Reader manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the Reader using the append method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a Reader to decode a message of this type and print them: use \"buffered\" use \"collections\" class Notify is InputNotify let _env: Env new create(env: Env) => _env = env fun ref apply(data: Array[U8] iso) => let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\") end end end actor Main new create(env: Env) => env.input(recover Notify(env) end, 1024) class ref Reader","title":"Reader"},{"location":"buffered-Reader/#constructors","text":"","title":"Constructors"},{"location":"buffered-Reader/#create","text":"[Source] new iso create() : Reader iso^","title":"create"},{"location":"buffered-Reader/#returns","text":"Reader iso^","title":"Returns"},{"location":"buffered-Reader/#public-functions","text":"","title":"Public Functions"},{"location":"buffered-Reader/#size","text":"[Source] Return the number of available bytes. fun box size() : USize val","title":"size"},{"location":"buffered-Reader/#returns_1","text":"USize val","title":"Returns"},{"location":"buffered-Reader/#clear","text":"[Source] Discard all pending data. fun ref clear() : None val","title":"clear"},{"location":"buffered-Reader/#returns_2","text":"None val","title":"Returns"},{"location":"buffered-Reader/#append","text":"[Source] Add a chunk of data. fun ref append( data: (String val | Array[U8 val] val)) : None val","title":"append"},{"location":"buffered-Reader/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"buffered-Reader/#returns_3","text":"None val","title":"Returns"},{"location":"buffered-Reader/#skip","text":"[Source] Skip n bytes. fun ref skip( n: USize val) : None val ?","title":"skip"},{"location":"buffered-Reader/#parameters_1","text":"n: USize val","title":"Parameters"},{"location":"buffered-Reader/#returns_4","text":"None val ?","title":"Returns"},{"location":"buffered-Reader/#block","text":"[Source] Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the Reader . fun ref block( len: USize val) : Array[U8 val] iso^ ?","title":"block"},{"location":"buffered-Reader/#parameters_2","text":"len: USize val","title":"Parameters"},{"location":"buffered-Reader/#returns_5","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"buffered-Reader/#read_until","text":"[Source] Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. fun ref read_until( separator: U8 val) : Array[U8 val] iso^ ?","title":"read_until"},{"location":"buffered-Reader/#parameters_3","text":"separator: U8 val","title":"Parameters"},{"location":"buffered-Reader/#returns_6","text":"Array [ U8 val] iso^ ?","title":"Returns"},{"location":"buffered-Reader/#line","text":"[Source] Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set keep_line_breaks to true to keep the line breaks in the returned line. fun ref line( keep_line_breaks: Bool val = false) : String iso^ ?","title":"line"},{"location":"buffered-Reader/#parameters_4","text":"keep_line_breaks: Bool val = false","title":"Parameters"},{"location":"buffered-Reader/#returns_7","text":"String iso^ ?","title":"Returns"},{"location":"buffered-Reader/#u8","text":"[Source] Get a U8. Raise an error if there isn't enough data. fun ref u8() : U8 val ?","title":"u8"},{"location":"buffered-Reader/#returns_8","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#i8","text":"[Source] Get an I8. fun ref i8() : I8 val ?","title":"i8"},{"location":"buffered-Reader/#returns_9","text":"I8 val ?","title":"Returns"},{"location":"buffered-Reader/#u16_be","text":"[Source] Get a big-endian U16. fun ref u16_be() : U16 val ?","title":"u16_be"},{"location":"buffered-Reader/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#u16_le","text":"[Source] Get a little-endian U16. fun ref u16_le() : U16 val ?","title":"u16_le"},{"location":"buffered-Reader/#returns_11","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#i16_be","text":"[Source] Get a big-endian I16. fun ref i16_be() : I16 val ?","title":"i16_be"},{"location":"buffered-Reader/#returns_12","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#i16_le","text":"[Source] Get a little-endian I16. fun ref i16_le() : I16 val ?","title":"i16_le"},{"location":"buffered-Reader/#returns_13","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#u32_be","text":"[Source] Get a big-endian U32. fun ref u32_be() : U32 val ?","title":"u32_be"},{"location":"buffered-Reader/#returns_14","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#u32_le","text":"[Source] Get a little-endian U32. fun ref u32_le() : U32 val ?","title":"u32_le"},{"location":"buffered-Reader/#returns_15","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#i32_be","text":"[Source] Get a big-endian I32. fun ref i32_be() : I32 val ?","title":"i32_be"},{"location":"buffered-Reader/#returns_16","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#i32_le","text":"[Source] Get a little-endian I32. fun ref i32_le() : I32 val ?","title":"i32_le"},{"location":"buffered-Reader/#returns_17","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#u64_be","text":"[Source] Get a big-endian U64. fun ref u64_be() : U64 val ?","title":"u64_be"},{"location":"buffered-Reader/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#u64_le","text":"[Source] Get a little-endian U64. fun ref u64_le() : U64 val ?","title":"u64_le"},{"location":"buffered-Reader/#returns_19","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#i64_be","text":"[Source] Get a big-endian I64. fun ref i64_be() : I64 val ?","title":"i64_be"},{"location":"buffered-Reader/#returns_20","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#i64_le","text":"[Source] Get a little-endian I64. fun ref i64_le() : I64 val ?","title":"i64_le"},{"location":"buffered-Reader/#returns_21","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#u128_be","text":"[Source] Get a big-endian U128. fun ref u128_be() : U128 val ?","title":"u128_be"},{"location":"buffered-Reader/#returns_22","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#u128_le","text":"[Source] Get a little-endian U128. fun ref u128_le() : U128 val ?","title":"u128_le"},{"location":"buffered-Reader/#returns_23","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#i128_be","text":"[Source] Get a big-endian I129. fun ref i128_be() : I128 val ?","title":"i128_be"},{"location":"buffered-Reader/#returns_24","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#i128_le","text":"[Source] Get a little-endian I128. fun ref i128_le() : I128 val ?","title":"i128_le"},{"location":"buffered-Reader/#returns_25","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#f32_be","text":"[Source] Get a big-endian F32. fun ref f32_be() : F32 val ?","title":"f32_be"},{"location":"buffered-Reader/#returns_26","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#f32_le","text":"[Source] Get a little-endian F32. fun ref f32_le() : F32 val ?","title":"f32_le"},{"location":"buffered-Reader/#returns_27","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#f64_be","text":"[Source] Get a big-endian F64. fun ref f64_be() : F64 val ?","title":"f64_be"},{"location":"buffered-Reader/#returns_28","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#f64_le","text":"[Source] Get a little-endian F64. fun ref f64_le() : F64 val ?","title":"f64_le"},{"location":"buffered-Reader/#returns_29","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u8","text":"[Source] Peek at a U8 at the given offset. Raise an error if there isn't enough data. fun box peek_u8( offset: USize val = 0) : U8 val ?","title":"peek_u8"},{"location":"buffered-Reader/#parameters_5","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_30","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i8","text":"[Source] Peek at an I8. fun box peek_i8( offset: USize val = 0) : I8 val ?","title":"peek_i8"},{"location":"buffered-Reader/#parameters_6","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_31","text":"I8 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u16_be","text":"[Source] Peek at a big-endian U16. fun box peek_u16_be( offset: USize val = 0) : U16 val ?","title":"peek_u16_be"},{"location":"buffered-Reader/#parameters_7","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_32","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u16_le","text":"[Source] Peek at a little-endian U16. fun box peek_u16_le( offset: USize val = 0) : U16 val ?","title":"peek_u16_le"},{"location":"buffered-Reader/#parameters_8","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_33","text":"U16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i16_be","text":"[Source] Peek at a big-endian I16. fun box peek_i16_be( offset: USize val = 0) : I16 val ?","title":"peek_i16_be"},{"location":"buffered-Reader/#parameters_9","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_34","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i16_le","text":"[Source] Peek at a little-endian I16. fun box peek_i16_le( offset: USize val = 0) : I16 val ?","title":"peek_i16_le"},{"location":"buffered-Reader/#parameters_10","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_35","text":"I16 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u32_be","text":"[Source] Peek at a big-endian U32. fun box peek_u32_be( offset: USize val = 0) : U32 val ?","title":"peek_u32_be"},{"location":"buffered-Reader/#parameters_11","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_36","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u32_le","text":"[Source] Peek at a little-endian U32. fun box peek_u32_le( offset: USize val = 0) : U32 val ?","title":"peek_u32_le"},{"location":"buffered-Reader/#parameters_12","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_37","text":"U32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i32_be","text":"[Source] Peek at a big-endian I32. fun box peek_i32_be( offset: USize val = 0) : I32 val ?","title":"peek_i32_be"},{"location":"buffered-Reader/#parameters_13","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_38","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i32_le","text":"[Source] Peek at a little-endian I32. fun box peek_i32_le( offset: USize val = 0) : I32 val ?","title":"peek_i32_le"},{"location":"buffered-Reader/#parameters_14","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_39","text":"I32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u64_be","text":"[Source] Peek at a big-endian U64. fun box peek_u64_be( offset: USize val = 0) : U64 val ?","title":"peek_u64_be"},{"location":"buffered-Reader/#parameters_15","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_40","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u64_le","text":"[Source] Peek at a little-endian U64. fun box peek_u64_le( offset: USize val = 0) : U64 val ?","title":"peek_u64_le"},{"location":"buffered-Reader/#parameters_16","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_41","text":"U64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i64_be","text":"[Source] Peek at a big-endian I64. fun box peek_i64_be( offset: USize val = 0) : I64 val ?","title":"peek_i64_be"},{"location":"buffered-Reader/#parameters_17","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_42","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i64_le","text":"[Source] Peek at a little-endian I64. fun box peek_i64_le( offset: USize val = 0) : I64 val ?","title":"peek_i64_le"},{"location":"buffered-Reader/#parameters_18","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_43","text":"I64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u128_be","text":"[Source] Peek at a big-endian U128. fun box peek_u128_be( offset: USize val = 0) : U128 val ?","title":"peek_u128_be"},{"location":"buffered-Reader/#parameters_19","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_44","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_u128_le","text":"[Source] Peek at a little-endian U128. fun box peek_u128_le( offset: USize val = 0) : U128 val ?","title":"peek_u128_le"},{"location":"buffered-Reader/#parameters_20","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_45","text":"U128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i128_be","text":"[Source] Peek at a big-endian I129. fun box peek_i128_be( offset: USize val = 0) : I128 val ?","title":"peek_i128_be"},{"location":"buffered-Reader/#parameters_21","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_46","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_i128_le","text":"[Source] Peek at a little-endian I128. fun box peek_i128_le( offset: USize val = 0) : I128 val ?","title":"peek_i128_le"},{"location":"buffered-Reader/#parameters_22","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_47","text":"I128 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f32_be","text":"[Source] Peek at a big-endian F32. fun box peek_f32_be( offset: USize val = 0) : F32 val ?","title":"peek_f32_be"},{"location":"buffered-Reader/#parameters_23","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_48","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f32_le","text":"[Source] Peek at a little-endian F32. fun box peek_f32_le( offset: USize val = 0) : F32 val ?","title":"peek_f32_le"},{"location":"buffered-Reader/#parameters_24","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_49","text":"F32 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f64_be","text":"[Source] Peek at a big-endian F64. fun box peek_f64_be( offset: USize val = 0) : F64 val ?","title":"peek_f64_be"},{"location":"buffered-Reader/#parameters_25","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_50","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#peek_f64_le","text":"[Source] Peek at a little-endian F64. fun box peek_f64_le( offset: USize val = 0) : F64 val ?","title":"peek_f64_le"},{"location":"buffered-Reader/#parameters_26","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_51","text":"F64 val ?","title":"Returns"},{"location":"buffered-Reader/#private-functions","text":"","title":"Private Functions"},{"location":"buffered-Reader/#_byte","text":"[Source] Get a single byte. fun ref _byte() : U8 val ?","title":"_byte"},{"location":"buffered-Reader/#returns_52","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#_peek_byte","text":"[Source] Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. fun box _peek_byte( offset: USize val = 0) : U8 val ?","title":"_peek_byte"},{"location":"buffered-Reader/#parameters_27","text":"offset: USize val = 0","title":"Parameters"},{"location":"buffered-Reader/#returns_53","text":"U8 val ?","title":"Returns"},{"location":"buffered-Reader/#_distance_of","text":"[Source] Get the distance to the first occurrence of the given byte fun ref _distance_of( byte: U8 val) : USize val ?","title":"_distance_of"},{"location":"buffered-Reader/#parameters_28","text":"byte: U8 val","title":"Parameters"},{"location":"buffered-Reader/#returns_54","text":"USize val ?","title":"Returns"},{"location":"buffered-Reader/#_search_length","text":"[Source] Get the length of a pending line. Raise an error if there is no pending line. fun ref _search_length() : USize val ?","title":"_search_length"},{"location":"buffered-Reader/#returns_55","text":"USize val ?","title":"Returns"},{"location":"buffered-Writer/","text":"Writer \u00b6 [Source] A buffer for building messages. Writer provides an way to create byte sequences using common data encodings. The Writer manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call done() to get the message's ByteSeq s, and you can then reuse the Writer for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: message_length - the number of bytes in the message as a big-endian 32-bit integer list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a write buffer to encode an array of tuples as a message of this type: use \"buffered\" actor Main new create(env: Env) => let wb = Writer let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")] [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end class ref Writer Constructors \u00b6 create \u00b6 [Source] new iso create() : Writer iso^ Returns \u00b6 Writer iso^ Public Functions \u00b6 reserve_chunks \u00b6 [Source] Reserve space for size' chunks. This needs to be recalled after every call to done as done resets the chunks. fun ref reserve_chunks( size': USize val) : None val Parameters \u00b6 size': USize val Returns \u00b6 None val reserve_current \u00b6 [Source] Reserve space for size bytes in _current . fun ref reserve_current( size': USize val) : None val Parameters \u00b6 size': USize val Returns \u00b6 None val size \u00b6 [Source] fun box size() : USize val Returns \u00b6 USize val u8 \u00b6 [Source] Write a byte to the buffer. fun ref u8( data: U8 val) : None val Parameters \u00b6 data: U8 val Returns \u00b6 None val u16_le \u00b6 [Source] Write a U16 to the buffer in little-endian byte order. fun ref u16_le( data: U16 val) : None val Parameters \u00b6 data: U16 val Returns \u00b6 None val u16_be \u00b6 [Source] Write a U16 to the buffer in big-endian byte order. fun ref u16_be( data: U16 val) : None val Parameters \u00b6 data: U16 val Returns \u00b6 None val i16_le \u00b6 [Source] Write an I16 to the buffer in little-endian byte order. fun ref i16_le( data: I16 val) : None val Parameters \u00b6 data: I16 val Returns \u00b6 None val i16_be \u00b6 [Source] Write an I16 to the buffer in big-endian byte order. fun ref i16_be( data: I16 val) : None val Parameters \u00b6 data: I16 val Returns \u00b6 None val u32_le \u00b6 [Source] Write a U32 to the buffer in little-endian byte order. fun ref u32_le( data: U32 val) : None val Parameters \u00b6 data: U32 val Returns \u00b6 None val u32_be \u00b6 [Source] Write a U32 to the buffer in big-endian byte order. fun ref u32_be( data: U32 val) : None val Parameters \u00b6 data: U32 val Returns \u00b6 None val i32_le \u00b6 [Source] Write an I32 to the buffer in little-endian byte order. fun ref i32_le( data: I32 val) : None val Parameters \u00b6 data: I32 val Returns \u00b6 None val i32_be \u00b6 [Source] Write an I32 to the buffer in big-endian byte order. fun ref i32_be( data: I32 val) : None val Parameters \u00b6 data: I32 val Returns \u00b6 None val f32_le \u00b6 [Source] Write an F32 to the buffer in little-endian byte order. fun ref f32_le( data: F32 val) : None val Parameters \u00b6 data: F32 val Returns \u00b6 None val f32_be \u00b6 [Source] Write an F32 to the buffer in big-endian byte order. fun ref f32_be( data: F32 val) : None val Parameters \u00b6 data: F32 val Returns \u00b6 None val u64_le \u00b6 [Source] Write a U64 to the buffer in little-endian byte order. fun ref u64_le( data: U64 val) : None val Parameters \u00b6 data: U64 val Returns \u00b6 None val u64_be \u00b6 [Source] Write a U64 to the buffer in big-endian byte order. fun ref u64_be( data: U64 val) : None val Parameters \u00b6 data: U64 val Returns \u00b6 None val i64_le \u00b6 [Source] Write an I64 to the buffer in little-endian byte order. fun ref i64_le( data: I64 val) : None val Parameters \u00b6 data: I64 val Returns \u00b6 None val i64_be \u00b6 [Source] Write an I64 to the buffer in big-endian byte order. fun ref i64_be( data: I64 val) : None val Parameters \u00b6 data: I64 val Returns \u00b6 None val f64_le \u00b6 [Source] Write an F64 to the buffer in little-endian byte order. fun ref f64_le( data: F64 val) : None val Parameters \u00b6 data: F64 val Returns \u00b6 None val f64_be \u00b6 [Source] Write an F64 to the buffer in big-endian byte order. fun ref f64_be( data: F64 val) : None val Parameters \u00b6 data: F64 val Returns \u00b6 None val u128_le \u00b6 [Source] Write a U128 to the buffer in little-endian byte order. fun ref u128_le( data: U128 val) : None val Parameters \u00b6 data: U128 val Returns \u00b6 None val u128_be \u00b6 [Source] Write a U128 to the buffer in big-endian byte order. fun ref u128_be( data: U128 val) : None val Parameters \u00b6 data: U128 val Returns \u00b6 None val i128_le \u00b6 [Source] Write an I128 to the buffer in little-endian byte order. fun ref i128_le( data: I128 val) : None val Parameters \u00b6 data: I128 val Returns \u00b6 None val i128_be \u00b6 [Source] Write an I128 to the buffer in big-endian byte order. fun ref i128_be( data: I128 val) : None val Parameters \u00b6 data: I128 val Returns \u00b6 None val write \u00b6 [Source] Write a ByteSeq to the buffer. fun ref write( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val writev \u00b6 [Source] Write ByteSeqs to the buffer. fun ref writev( data: ByteSeqIter val) : None val Parameters \u00b6 data: ByteSeqIter val Returns \u00b6 None val done \u00b6 [Source] Return an array of buffered ByteSeqs and reset the Writer's buffer. fun ref done() : Array[(String val | Array[U8 val] val)] iso^ Returns \u00b6 Array [( String val | Array [ U8 val] val)] iso^ Private Functions \u00b6 _append_current \u00b6 [Source] fun ref _append_current() : None val Returns \u00b6 None val","title":"class Writer"},{"location":"buffered-Writer/#writer","text":"[Source] A buffer for building messages. Writer provides an way to create byte sequences using common data encodings. The Writer manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call done() to get the message's ByteSeq s, and you can then reuse the Writer for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: message_length - the number of bytes in the message as a big-endian 32-bit integer list_size - the number of items in the following list of items as a big-endian 32-bit integer zero or more items of the following data: a big-endian 64-bit floating point number a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: [message_length][list_size][float1][string1][float2][string2]... The following program uses a write buffer to encode an array of tuples as a message of this type: use \"buffered\" actor Main new create(env: Env) => let wb = Writer let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")] [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end class ref Writer","title":"Writer"},{"location":"buffered-Writer/#constructors","text":"","title":"Constructors"},{"location":"buffered-Writer/#create","text":"[Source] new iso create() : Writer iso^","title":"create"},{"location":"buffered-Writer/#returns","text":"Writer iso^","title":"Returns"},{"location":"buffered-Writer/#public-functions","text":"","title":"Public Functions"},{"location":"buffered-Writer/#reserve_chunks","text":"[Source] Reserve space for size' chunks. This needs to be recalled after every call to done as done resets the chunks. fun ref reserve_chunks( size': USize val) : None val","title":"reserve_chunks"},{"location":"buffered-Writer/#parameters","text":"size': USize val","title":"Parameters"},{"location":"buffered-Writer/#returns_1","text":"None val","title":"Returns"},{"location":"buffered-Writer/#reserve_current","text":"[Source] Reserve space for size bytes in _current . fun ref reserve_current( size': USize val) : None val","title":"reserve_current"},{"location":"buffered-Writer/#parameters_1","text":"size': USize val","title":"Parameters"},{"location":"buffered-Writer/#returns_2","text":"None val","title":"Returns"},{"location":"buffered-Writer/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"buffered-Writer/#returns_3","text":"USize val","title":"Returns"},{"location":"buffered-Writer/#u8","text":"[Source] Write a byte to the buffer. fun ref u8( data: U8 val) : None val","title":"u8"},{"location":"buffered-Writer/#parameters_2","text":"data: U8 val","title":"Parameters"},{"location":"buffered-Writer/#returns_4","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u16_le","text":"[Source] Write a U16 to the buffer in little-endian byte order. fun ref u16_le( data: U16 val) : None val","title":"u16_le"},{"location":"buffered-Writer/#parameters_3","text":"data: U16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_5","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u16_be","text":"[Source] Write a U16 to the buffer in big-endian byte order. fun ref u16_be( data: U16 val) : None val","title":"u16_be"},{"location":"buffered-Writer/#parameters_4","text":"data: U16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_6","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i16_le","text":"[Source] Write an I16 to the buffer in little-endian byte order. fun ref i16_le( data: I16 val) : None val","title":"i16_le"},{"location":"buffered-Writer/#parameters_5","text":"data: I16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_7","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i16_be","text":"[Source] Write an I16 to the buffer in big-endian byte order. fun ref i16_be( data: I16 val) : None val","title":"i16_be"},{"location":"buffered-Writer/#parameters_6","text":"data: I16 val","title":"Parameters"},{"location":"buffered-Writer/#returns_8","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u32_le","text":"[Source] Write a U32 to the buffer in little-endian byte order. fun ref u32_le( data: U32 val) : None val","title":"u32_le"},{"location":"buffered-Writer/#parameters_7","text":"data: U32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_9","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u32_be","text":"[Source] Write a U32 to the buffer in big-endian byte order. fun ref u32_be( data: U32 val) : None val","title":"u32_be"},{"location":"buffered-Writer/#parameters_8","text":"data: U32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_10","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i32_le","text":"[Source] Write an I32 to the buffer in little-endian byte order. fun ref i32_le( data: I32 val) : None val","title":"i32_le"},{"location":"buffered-Writer/#parameters_9","text":"data: I32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_11","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i32_be","text":"[Source] Write an I32 to the buffer in big-endian byte order. fun ref i32_be( data: I32 val) : None val","title":"i32_be"},{"location":"buffered-Writer/#parameters_10","text":"data: I32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_12","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f32_le","text":"[Source] Write an F32 to the buffer in little-endian byte order. fun ref f32_le( data: F32 val) : None val","title":"f32_le"},{"location":"buffered-Writer/#parameters_11","text":"data: F32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_13","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f32_be","text":"[Source] Write an F32 to the buffer in big-endian byte order. fun ref f32_be( data: F32 val) : None val","title":"f32_be"},{"location":"buffered-Writer/#parameters_12","text":"data: F32 val","title":"Parameters"},{"location":"buffered-Writer/#returns_14","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u64_le","text":"[Source] Write a U64 to the buffer in little-endian byte order. fun ref u64_le( data: U64 val) : None val","title":"u64_le"},{"location":"buffered-Writer/#parameters_13","text":"data: U64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_15","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u64_be","text":"[Source] Write a U64 to the buffer in big-endian byte order. fun ref u64_be( data: U64 val) : None val","title":"u64_be"},{"location":"buffered-Writer/#parameters_14","text":"data: U64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_16","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i64_le","text":"[Source] Write an I64 to the buffer in little-endian byte order. fun ref i64_le( data: I64 val) : None val","title":"i64_le"},{"location":"buffered-Writer/#parameters_15","text":"data: I64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_17","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i64_be","text":"[Source] Write an I64 to the buffer in big-endian byte order. fun ref i64_be( data: I64 val) : None val","title":"i64_be"},{"location":"buffered-Writer/#parameters_16","text":"data: I64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_18","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f64_le","text":"[Source] Write an F64 to the buffer in little-endian byte order. fun ref f64_le( data: F64 val) : None val","title":"f64_le"},{"location":"buffered-Writer/#parameters_17","text":"data: F64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_19","text":"None val","title":"Returns"},{"location":"buffered-Writer/#f64_be","text":"[Source] Write an F64 to the buffer in big-endian byte order. fun ref f64_be( data: F64 val) : None val","title":"f64_be"},{"location":"buffered-Writer/#parameters_18","text":"data: F64 val","title":"Parameters"},{"location":"buffered-Writer/#returns_20","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u128_le","text":"[Source] Write a U128 to the buffer in little-endian byte order. fun ref u128_le( data: U128 val) : None val","title":"u128_le"},{"location":"buffered-Writer/#parameters_19","text":"data: U128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_21","text":"None val","title":"Returns"},{"location":"buffered-Writer/#u128_be","text":"[Source] Write a U128 to the buffer in big-endian byte order. fun ref u128_be( data: U128 val) : None val","title":"u128_be"},{"location":"buffered-Writer/#parameters_20","text":"data: U128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_22","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i128_le","text":"[Source] Write an I128 to the buffer in little-endian byte order. fun ref i128_le( data: I128 val) : None val","title":"i128_le"},{"location":"buffered-Writer/#parameters_21","text":"data: I128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_23","text":"None val","title":"Returns"},{"location":"buffered-Writer/#i128_be","text":"[Source] Write an I128 to the buffer in big-endian byte order. fun ref i128_be( data: I128 val) : None val","title":"i128_be"},{"location":"buffered-Writer/#parameters_22","text":"data: I128 val","title":"Parameters"},{"location":"buffered-Writer/#returns_24","text":"None val","title":"Returns"},{"location":"buffered-Writer/#write","text":"[Source] Write a ByteSeq to the buffer. fun ref write( data: (String val | Array[U8 val] val)) : None val","title":"write"},{"location":"buffered-Writer/#parameters_23","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"buffered-Writer/#returns_25","text":"None val","title":"Returns"},{"location":"buffered-Writer/#writev","text":"[Source] Write ByteSeqs to the buffer. fun ref writev( data: ByteSeqIter val) : None val","title":"writev"},{"location":"buffered-Writer/#parameters_24","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"buffered-Writer/#returns_26","text":"None val","title":"Returns"},{"location":"buffered-Writer/#done","text":"[Source] Return an array of buffered ByteSeqs and reset the Writer's buffer. fun ref done() : Array[(String val | Array[U8 val] val)] iso^","title":"done"},{"location":"buffered-Writer/#returns_27","text":"Array [( String val | Array [ U8 val] val)] iso^","title":"Returns"},{"location":"buffered-Writer/#private-functions","text":"","title":"Private Functions"},{"location":"buffered-Writer/#_append_current","text":"[Source] fun ref _append_current() : None val","title":"_append_current"},{"location":"buffered-Writer/#returns_28","text":"None val","title":"Returns"},{"location":"builtin--index/","text":"Builtin package \u00b6 The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries. Public Types \u00b6 primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq trait Real trait Integer trait SignedInteger trait UnsignedInteger trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform struct NullablePointer primitive None interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise interface DisposableActor primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth Private Types \u00b6 primitive _UTF32Encoder trait _ArithmeticConvertible primitive _ToString primitive _SignedArithmetic primitive _SignedUnsafeArithmetic primitive _UnsignedCheckedArithmetic primitive _SignedCheckedArithmetic trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Package"},{"location":"builtin--index/#builtin-package","text":"The builtin package is home to the following standard library members: Types the compiler needs to know exist, such as None. Types with \"magic\" internal workings that must be supplied directly by the compiler, such as U32. Any types needed by others in builtin. The public types that are defined in this package will always be in scope for every Pony source file. For details on specific packages, see their individual entity entries.","title":"Builtin package"},{"location":"builtin--index/#public-types","text":"primitive U8 primitive U16 primitive U32 primitive U64 primitive ULong primitive USize primitive U128 type Unsigned interface Stringable class String class StringBytes class StringRunes interface InputNotify interface InputStream actor Stdin type ByteSeq interface ByteSeqIter interface OutStream actor StdStream interface SourceLoc primitive I8 primitive I16 primitive I32 primitive I64 primitive ILong primitive ISize primitive I128 type Signed interface Seq trait Real trait Integer trait SignedInteger trait UnsignedInteger trait FloatingPoint type Number type Int interface ReadSeq interface ReadElement struct Pointer primitive Platform struct NullablePointer primitive None interface Iterator primitive F32 primitive F64 type Float class Env primitive DoNotOptimise interface DisposableActor primitive Less primitive Equal primitive Greater type Compare interface HasEq interface Equatable interface Comparable primitive Bool type AsioEventID interface AsioEventNotify primitive AsioEvent class Array class ArrayKeys class ArrayValues class ArrayPairs interface Any primitive AmbientAuth","title":"Public Types"},{"location":"builtin--index/#private-types","text":"primitive _UTF32Encoder trait _ArithmeticConvertible primitive _ToString primitive _SignedArithmetic primitive _SignedUnsafeArithmetic primitive _UnsignedCheckedArithmetic primitive _SignedCheckedArithmetic trait _PartialArithmetic primitive _UnsignedPartialArithmetic primitive _SignedPartialArithmetic","title":"Private Types"},{"location":"builtin-AmbientAuth/","text":"AmbientAuth \u00b6 [Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth Constructors \u00b6 _create \u00b6 [Source] new val _create() : AmbientAuth val^ Returns \u00b6 AmbientAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AmbientAuth val) : Bool val Parameters \u00b6 that: AmbientAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AmbientAuth val) : Bool val Parameters \u00b6 that: AmbientAuth val Returns \u00b6 Bool val","title":"primitive AmbientAuth"},{"location":"builtin-AmbientAuth/#ambientauth","text":"[Source] This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. primitive val AmbientAuth","title":"AmbientAuth"},{"location":"builtin-AmbientAuth/#constructors","text":"","title":"Constructors"},{"location":"builtin-AmbientAuth/#_create","text":"[Source] new val _create() : AmbientAuth val^","title":"_create"},{"location":"builtin-AmbientAuth/#returns","text":"AmbientAuth val^","title":"Returns"},{"location":"builtin-AmbientAuth/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AmbientAuth/#eq","text":"[Source] fun box eq( that: AmbientAuth val) : Bool val","title":"eq"},{"location":"builtin-AmbientAuth/#parameters","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-AmbientAuth/#ne","text":"[Source] fun box ne( that: AmbientAuth val) : Bool val","title":"ne"},{"location":"builtin-AmbientAuth/#parameters_1","text":"that: AmbientAuth val","title":"Parameters"},{"location":"builtin-AmbientAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Any/","text":"Any \u00b6 [Source] interface tag Any","title":"interface Any"},{"location":"builtin-Any/#any","text":"[Source] interface tag Any","title":"Any"},{"location":"builtin-Array/","text":"Array[A: A] \u00b6 [Source] Contiguous, resizable memory to store elements of type A. Usage \u00b6 Creating an Array of String: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space: let array = Array[String](10) // array.size() == 0 // array.space() >= 10 Accessing elements can be done via the apply(i: USize): this->A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a LIFO stack using those methods: while (array.size() > 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method: for element in array.values() do // do something with element end Memory allocation \u00b6 Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref Implements \u00b6 Seq [A] ref Constructors \u00b6 create \u00b6 [Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : Array[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 Array [A] ref^ init \u00b6 [Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^ Parameters \u00b6 from: A^ len: USize val Returns \u00b6 Array [A] ref^ from_cpointer \u00b6 [Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = 0) : Array[A] ref^ Parameters \u00b6 ptr: Pointer [A] ref len: USize val alloc: USize val = 0 Returns \u00b6 Array [A] ref^ Public Functions \u00b6 cpointer \u00b6 [Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = 0) : Pointer[A] tag Parameters \u00b6 offset: USize val = 0 Returns \u00b6 Pointer [A] tag size \u00b6 [Source] The number of elements in the array. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the array. fun box space() : USize val Returns \u00b6 USize val reserve \u00b6 [Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val compact \u00b6 [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val Returns \u00b6 None val undefined[optional B: (A & Real [B] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val read_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U8 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U8 val ? read_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U16 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U16 val ? read_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U32 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U32 val ? read_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U64 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U64 val ? read_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U128 val ? Parameters \u00b6 offset: USize val Returns \u00b6 U128 val ? apply \u00b6 [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? update_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U8 val) : U8 val ? Parameters \u00b6 offset: USize val value: U8 val Returns \u00b6 U8 val ? update_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U16 val) : U16 val ? Parameters \u00b6 offset: USize val value: U16 val Returns \u00b6 U16 val ? update_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U32 val) : U32 val ? Parameters \u00b6 offset: USize val value: U32 val Returns \u00b6 U32 val ? update_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U64 val) : U64 val ? Parameters \u00b6 offset: USize val value: U64 val Returns \u00b6 U64 val ? update_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U128 val) : U128 val ? Parameters \u00b6 offset: USize val value: U128 val Returns \u00b6 U128 val ? update \u00b6 [Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? insert \u00b6 [Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. fun ref insert( i: USize val, value: A) : None val ? Parameters \u00b6 i: USize val value: A Returns \u00b6 None val ? delete \u00b6 [Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ? Parameters \u00b6 i: USize val Returns \u00b6 A^ ? truncate \u00b6 [Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val trim_in_place \u00b6 [Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 None val trim \u00b6 [Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : Array[A] val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 Array [A] val chop \u00b6 [Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. fun iso chop( split_point: USize val) : (Array[A] iso^ , Array[A] iso^) Parameters \u00b6 split_point: USize val Returns \u00b6 ( Array [A] iso^ , Array [A] iso^) unchop \u00b6 [Source] Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. fun iso unchop( b: Array[A] iso) : ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^) Parameters \u00b6 b: Array [A] iso Returns \u00b6 (( Array [A] iso^ , Array [A] iso^) | Array [A] iso^) copy_from[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A & Real[B] val & U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters \u00b6 src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val Returns \u00b6 None val copy_to \u00b6 [Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this->A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val Parameters \u00b6 dst: Array [this->A!] ref src_idx: USize val dst_idx: USize val len: USize val Returns \u00b6 None val remove \u00b6 [Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val Parameters \u00b6 i: USize val n: USize val Returns \u00b6 None val clear \u00b6 [Source] Remove all elements from the array. fun ref clear() : None val Returns \u00b6 None val push_u8[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A & Real[B] val & U8 val)]( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val push_u16[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A & Real[B] val & U8 val)]( value: U16 val) : None val Parameters \u00b6 value: U16 val Returns \u00b6 None val push_u32[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A & Real[B] val & U8 val)]( value: U32 val) : None val Parameters \u00b6 value: U32 val Returns \u00b6 None val push_u64[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A & Real[B] val & U8 val)]( value: U64 val) : None val Parameters \u00b6 value: U64 val Returns \u00b6 None val push_u128[optional B: (A & Real [B] val & U8 val)] \u00b6 [Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A & Real[B] val & U8 val)]( value: U128 val) : None val Parameters \u00b6 value: U128 val Returns \u00b6 None val push \u00b6 [Source] Add an element to the end of the array. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val shift \u00b6 [Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val find \u00b6 [Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = 0, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: A! offset: USize val = 0 nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 USize val ? contains \u00b6 [Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) => l == r} . fun box contains( value: A!, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : Bool val Parameters \u00b6 value: A! predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 Bool val rfind \u00b6 [Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = call, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: A! offset: USize val = call nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda Returns \u00b6 USize val ? clone \u00b6 [Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this->A!] ref^ Returns \u00b6 Array [this->A!] ref^ slice \u00b6 [Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Array[this->A!] ref^ Parameters \u00b6 from: USize val = 0 to: USize val = call step: USize val = 1 Returns \u00b6 Array [this->A!] ref^ permute \u00b6 [Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this->A!] ref^ ? Parameters \u00b6 indices: Iterator [ USize val] ref Returns \u00b6 Array [this->A!] ref^ ? reverse \u00b6 [Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this->A!] ref^ Returns \u00b6 Array [this->A!] ref^ reverse_in_place \u00b6 [Source] Reverse the array in place. fun ref reverse_in_place() : None val Returns \u00b6 None val swap_elements \u00b6 [Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ? Parameters \u00b6 i: USize val j: USize val Returns \u00b6 None val ? keys \u00b6 [Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayKeys [A, this-> Array [A] ref] ref^ values \u00b6 [Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayValues [A, this-> Array [A] ref] ref^ pairs \u00b6 [Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayPairs [A, this-> Array [A] ref] ref^ Private Functions \u00b6 _copy_to \u00b6 [Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this->A!] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val Parameters \u00b6 ptr: Pointer [this->A!] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0 Returns \u00b6 None val _element_size \u00b6 [Source] Element size in bytes for an element. fun box _element_size() : USize val Returns \u00b6 USize val","title":"class Array"},{"location":"builtin-Array/#array91a-a93","text":"[Source] Contiguous, resizable memory to store elements of type A.","title":"Array[A: A]"},{"location":"builtin-Array/#usage","text":"Creating an Array of String: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 Creating an empty Array of String, which may hold at least 10 elements before requesting more space: let array = Array[String](10) // array.size() == 0 // array.space() >= 10 Accessing elements can be done via the apply(i: USize): this->A ? method. The provided index might be out of bounds so apply is partial and has to be called within a try-catch block or inside another partial method: let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end Adding and removing elements to and from the end of the Array can be done via push and pop methods. You could treat the array as a LIFO stack using those methods: while (array.size() > 0) do let elem = array.pop()? // do something with element end Modifying the Array can be done via update , insert and delete methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the values method: for element in array.values() do // do something with element end","title":"Usage"},{"location":"builtin-Array/#memory-allocation","text":"Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The space() method returns the number of elements an Array can hold. The size() method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: size space 0 0 1 8 8 8 9 16 16 16 17 32 Call the compact() method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. class ref Array[A: A] is Seq[A] ref","title":"Memory allocation"},{"location":"builtin-Array/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"builtin-Array/#constructors","text":"","title":"Constructors"},{"location":"builtin-Array/#create","text":"[Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : Array[A] ref^","title":"create"},{"location":"builtin-Array/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#init","text":"[Source] Create an array of len elements, all initialised to the given value. new ref init( from: A^, len: USize val) : Array[A] ref^","title":"init"},{"location":"builtin-Array/#parameters_1","text":"from: A^ len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_1","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#from_cpointer","text":"[Source] Create an array from a C-style pointer and length. The contents are not copied. new ref from_cpointer( ptr: Pointer[A] ref, len: USize val, alloc: USize val = 0) : Array[A] ref^","title":"from_cpointer"},{"location":"builtin-Array/#parameters_2","text":"ptr: Pointer [A] ref len: USize val alloc: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_2","text":"Array [A] ref^","title":"Returns"},{"location":"builtin-Array/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Array/#cpointer","text":"[Source] Return the underlying C-style pointer. fun box cpointer( offset: USize val = 0) : Pointer[A] tag","title":"cpointer"},{"location":"builtin-Array/#parameters_3","text":"offset: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_3","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Array/#size","text":"[Source] The number of elements in the array. fun box size() : USize val","title":"size"},{"location":"builtin-Array/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-Array/#space","text":"[Source] The available space in the array. fun box space() : USize val","title":"space"},{"location":"builtin-Array/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-Array/#reserve","text":"[Source] Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Array/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Array/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. fun ref compact() : None val","title":"compact"},{"location":"builtin-Array/#returns_7","text":"None val","title":"Returns"},{"location":"builtin-Array/#undefined91optional-b-a-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. fun ref undefined[optional B: (A & Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]( len: USize val) : None val","title":"undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"builtin-Array/#parameters_5","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Array/#read_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U8 from offset. This is only allowed for an array of U8s. fun box read_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U8 val ?","title":"read_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_6","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#read_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U16 from offset. This is only allowed for an array of U8s. fun box read_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U16 val ?","title":"read_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_7","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_10","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#read_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U32 from offset. This is only allowed for an array of U8s. fun box read_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U32 val ?","title":"read_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_8","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_11","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#read_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U64 from offset. This is only allowed for an array of U8s. fun box read_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U64 val ?","title":"read_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_9","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_12","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#read_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Reads a U128 from offset. This is only allowed for an array of U8s. fun box read_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val) : U128 val ?","title":"read_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_10","text":"offset: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_13","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-Array/#parameters_11","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_14","text":"this->A ?","title":"Returns"},{"location":"builtin-Array/#update_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U8 at offset. This is only allowed for an array of U8s. fun ref update_u8[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U8 val) : U8 val ?","title":"update_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_12","text":"offset: USize val value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_15","text":"U8 val ?","title":"Returns"},{"location":"builtin-Array/#update_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U16 at offset. This is only allowed for an array of U8s. fun ref update_u16[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U16 val) : U16 val ?","title":"update_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_13","text":"offset: USize val value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_16","text":"U16 val ?","title":"Returns"},{"location":"builtin-Array/#update_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U32 at offset. This is only allowed for an array of U8s. fun ref update_u32[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U32 val) : U32 val ?","title":"update_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_14","text":"offset: USize val value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_17","text":"U32 val ?","title":"Returns"},{"location":"builtin-Array/#update_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U64 at offset. This is only allowed for an array of U8s. fun ref update_u64[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U64 val) : U64 val ?","title":"update_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_15","text":"offset: USize val value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_18","text":"U64 val ?","title":"Returns"},{"location":"builtin-Array/#update_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Write a U128 at offset. This is only allowed for an array of U8s. fun ref update_u128[optional B: (A & Real[B] val & U8 val)]( offset: USize val, value: U128 val) : U128 val ?","title":"update_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_16","text":"offset: USize val value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_19","text":"U128 val ?","title":"Returns"},{"location":"builtin-Array/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Array/#parameters_17","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_20","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#insert","text":"[Source] Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. fun ref insert( i: USize val, value: A) : None val ?","title":"insert"},{"location":"builtin-Array/#parameters_18","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Array/#returns_21","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#delete","text":"[Source] Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. fun ref delete( i: USize val) : A^ ?","title":"delete"},{"location":"builtin-Array/#parameters_19","text":"i: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_22","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#truncate","text":"[Source] Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Array/#parameters_20","text":"len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_23","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim_in_place","text":"[Source] Trim the array to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new array nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val","title":"trim_in_place"},{"location":"builtin-Array/#parameters_21","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_24","text":"None val","title":"Returns"},{"location":"builtin-Array/#trim","text":"[Source] Return a shared portion of this array, covering from until to . Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : Array[A] val","title":"trim"},{"location":"builtin-Array/#parameters_22","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_25","text":"Array [A] val","title":"Returns"},{"location":"builtin-Array/#chop","text":"[Source] Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. fun iso chop( split_point: USize val) : (Array[A] iso^ , Array[A] iso^)","title":"chop"},{"location":"builtin-Array/#parameters_23","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_26","text":"( Array [A] iso^ , Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#unchop","text":"[Source] Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. fun iso unchop( b: Array[A] iso) : ((Array[A] iso^ , Array[A] iso^) | Array[A] iso^)","title":"unchop"},{"location":"builtin-Array/#parameters_24","text":"b: Array [A] iso","title":"Parameters"},{"location":"builtin-Array/#returns_27","text":"(( Array [A] iso^ , Array [A] iso^) | Array [A] iso^)","title":"Returns"},{"location":"builtin-Array/#copy_from91optional-b-a-real91b93-val-u8-val93","text":"[Source] Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. fun ref copy_from[optional B: (A & Real[B] val & U8 val)]( src: Array[U8 val] box, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_from[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_25","text":"src: Array [ U8 val] box src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_28","text":"None val","title":"Returns"},{"location":"builtin-Array/#copy_to","text":"[Source] Copy len elements from this(src_idx) to dst(dst_idx). fun box copy_to( dst: Array[this->A!] ref, src_idx: USize val, dst_idx: USize val, len: USize val) : None val","title":"copy_to"},{"location":"builtin-Array/#parameters_26","text":"dst: Array [this->A!] ref src_idx: USize val dst_idx: USize val len: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_29","text":"None val","title":"Returns"},{"location":"builtin-Array/#remove","text":"[Source] Remove n elements from the array, beginning at index i. fun ref remove( i: USize val, n: USize val) : None val","title":"remove"},{"location":"builtin-Array/#parameters_27","text":"i: USize val n: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_30","text":"None val","title":"Returns"},{"location":"builtin-Array/#clear","text":"[Source] Remove all elements from the array. fun ref clear() : None val","title":"clear"},{"location":"builtin-Array/#returns_31","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u891optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U8 to the end of the array. This is only allowed for an array of U8s. fun ref push_u8[optional B: (A & Real[B] val & U8 val)]( value: U8 val) : None val","title":"push_u8[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_28","text":"value: U8 val","title":"Parameters"},{"location":"builtin-Array/#returns_32","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u1691optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U16 to the end of the array. This is only allowed for an array of U8s. fun ref push_u16[optional B: (A & Real[B] val & U8 val)]( value: U16 val) : None val","title":"push_u16[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_29","text":"value: U16 val","title":"Parameters"},{"location":"builtin-Array/#returns_33","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u3291optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U32 to the end of the array. This is only allowed for an array of U8s. fun ref push_u32[optional B: (A & Real[B] val & U8 val)]( value: U32 val) : None val","title":"push_u32[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_30","text":"value: U32 val","title":"Parameters"},{"location":"builtin-Array/#returns_34","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u6491optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U64 to the end of the array. This is only allowed for an array of U8s. fun ref push_u64[optional B: (A & Real[B] val & U8 val)]( value: U64 val) : None val","title":"push_u64[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_31","text":"value: U64 val","title":"Parameters"},{"location":"builtin-Array/#returns_35","text":"None val","title":"Returns"},{"location":"builtin-Array/#push_u12891optional-b-a-real91b93-val-u8-val93","text":"[Source] Add a U128 to the end of the array. This is only allowed for an array of U8s. fun ref push_u128[optional B: (A & Real[B] val & U8 val)]( value: U128 val) : None val","title":"push_u128[optional B: (A &amp; Real[B] val &amp; U8 val)]"},{"location":"builtin-Array/#parameters_32","text":"value: U128 val","title":"Parameters"},{"location":"builtin-Array/#returns_36","text":"None val","title":"Returns"},{"location":"builtin-Array/#push","text":"[Source] Add an element to the end of the array. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Array/#parameters_33","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_37","text":"None val","title":"Returns"},{"location":"builtin-Array/#pop","text":"[Source] Remove an element from the end of the array. The removed element is returned. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Array/#returns_38","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#unshift","text":"[Source] Add an element to the beginning of the array. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Array/#parameters_34","text":"value: A","title":"Parameters"},{"location":"builtin-Array/#returns_39","text":"None val","title":"Returns"},{"location":"builtin-Array/#shift","text":"[Source] Remove an element from the beginning of the array. The removed element is returned. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Array/#returns_40","text":"A^ ?","title":"Returns"},{"location":"builtin-Array/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-Array/#parameters_35","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-Array/#concat","text":"[Source] Add len iterated elements to the end of the array, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-Array/#parameters_36","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Array/#returns_42","text":"None val","title":"Returns"},{"location":"builtin-Array/#find","text":"[Source] Find the nth appearance of value from the beginning of the array, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of value found, and uses object identity for comparison. fun box find( value: A!, offset: USize val = 0, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ?","title":"find"},{"location":"builtin-Array/#parameters_37","text":"value: A! offset: USize val = 0 nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_43","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#contains","text":"[Source] Returns true if the array contains value , false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as {(l, r) => l == r} . fun box contains( value: A!, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : Bool val","title":"contains"},{"location":"builtin-Array/#parameters_38","text":"value: A! predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_44","text":"Bool val","title":"Returns"},{"location":"builtin-Array/#rfind","text":"[Source] Find the nth appearance of value from the end of the array, starting at offset and examining lower indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of value found, and uses object identity for comparison. fun box rfind( value: A!, offset: USize val = call, nth: USize val = 0, predicate: {(box->A!, box->A!): Bool}[A] val = lambda) : USize val ?","title":"rfind"},{"location":"builtin-Array/#parameters_39","text":"value: A! offset: USize val = call nth: USize val = 0 predicate: {(box->A!, box->A!): Bool}[A] val = lambda","title":"Parameters"},{"location":"builtin-Array/#returns_45","text":"USize val ?","title":"Returns"},{"location":"builtin-Array/#clone","text":"[Source] Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box clone() : Array[this->A!] ref^","title":"clone"},{"location":"builtin-Array/#returns_46","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#slice","text":"[Source] Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. fun box slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Array[this->A!] ref^","title":"slice"},{"location":"builtin-Array/#parameters_40","text":"from: USize val = 0 to: USize val = call step: USize val = 1","title":"Parameters"},{"location":"builtin-Array/#returns_47","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#permute","text":"[Source] Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box permute( indices: Iterator[USize val] ref) : Array[this->A!] ref^ ?","title":"permute"},{"location":"builtin-Array/#parameters_41","text":"indices: Iterator [ USize val] ref","title":"Parameters"},{"location":"builtin-Array/#returns_48","text":"Array [this->A!] ref^ ?","title":"Returns"},{"location":"builtin-Array/#reverse","text":"[Source] Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. fun box reverse() : Array[this->A!] ref^","title":"reverse"},{"location":"builtin-Array/#returns_49","text":"Array [this->A!] ref^","title":"Returns"},{"location":"builtin-Array/#reverse_in_place","text":"[Source] Reverse the array in place. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-Array/#returns_50","text":"None val","title":"Returns"},{"location":"builtin-Array/#swap_elements","text":"[Source] Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. fun ref swap_elements( i: USize val, j: USize val) : None val ?","title":"swap_elements"},{"location":"builtin-Array/#parameters_42","text":"i: USize val j: USize val","title":"Parameters"},{"location":"builtin-Array/#returns_51","text":"None val ?","title":"Returns"},{"location":"builtin-Array/#keys","text":"[Source] Return an iterator over the indices in the array. fun box keys() : ArrayKeys[A, this->Array[A] ref] ref^","title":"keys"},{"location":"builtin-Array/#returns_52","text":"ArrayKeys [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#values","text":"[Source] Return an iterator over the values in the array. fun box values() : ArrayValues[A, this->Array[A] ref] ref^","title":"values"},{"location":"builtin-Array/#returns_53","text":"ArrayValues [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#pairs","text":"[Source] Return an iterator over the (index, value) pairs in the array. fun box pairs() : ArrayPairs[A, this->Array[A] ref] ref^","title":"pairs"},{"location":"builtin-Array/#returns_54","text":"ArrayPairs [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"builtin-Array/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Array/#_copy_to","text":"[Source] Copy copy_len elements from this to that at specified offsets. fun box _copy_to( ptr: Pointer[this->A!] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val","title":"_copy_to"},{"location":"builtin-Array/#parameters_43","text":"ptr: Pointer [this->A!] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0","title":"Parameters"},{"location":"builtin-Array/#returns_55","text":"None val","title":"Returns"},{"location":"builtin-Array/#_element_size","text":"[Source] Element size in bytes for an element. fun box _element_size() : USize val","title":"_element_size"},{"location":"builtin-Array/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-ArrayKeys/","text":"ArrayKeys[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref Implements \u00b6 Iterator [ USize val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayKeys[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayKeys [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : USize val Returns \u00b6 USize val","title":"class ArrayKeys"},{"location":"builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93","text":"[Source] class ref ArrayKeys[A: A, B: Array[A] #read] is Iterator[USize val] ref","title":"ArrayKeys[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayKeys/#implements","text":"Iterator [ USize val] ref","title":"Implements"},{"location":"builtin-ArrayKeys/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayKeys/#create","text":"[Source] new ref create( array: B) : ArrayKeys[A, B] ref^","title":"create"},{"location":"builtin-ArrayKeys/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayKeys/#returns","text":"ArrayKeys [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayKeys/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayKeys/#next","text":"[Source] fun ref next() : USize val","title":"next"},{"location":"builtin-ArrayKeys/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-ArrayPairs/","text":"ArrayPairs[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B->A)] ref Implements \u00b6 Iterator [( USize val , B->A)] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayPairs[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayPairs [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (USize val , B->A) ? Returns \u00b6 ( USize val , B->A) ?","title":"class ArrayPairs"},{"location":"builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93","text":"[Source] class ref ArrayPairs[A: A, B: Array[A] #read] is Iterator[(USize val , B->A)] ref","title":"ArrayPairs[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayPairs/#implements","text":"Iterator [( USize val , B->A)] ref","title":"Implements"},{"location":"builtin-ArrayPairs/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayPairs/#create","text":"[Source] new ref create( array: B) : ArrayPairs[A, B] ref^","title":"create"},{"location":"builtin-ArrayPairs/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayPairs/#returns","text":"ArrayPairs [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayPairs/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayPairs/#next","text":"[Source] fun ref next() : (USize val , B->A) ?","title":"next"},{"location":"builtin-ArrayPairs/#returns_2","text":"( USize val , B->A) ?","title":"Returns"},{"location":"builtin-ArrayValues/","text":"ArrayValues[A: A, B: Array [A] #read] \u00b6 [Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B->A] ref Implements \u00b6 Iterator [B->A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( array: B) : ArrayValues[A, B] ref^ Parameters \u00b6 array: B Returns \u00b6 ArrayValues [A, B] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : B->A ? Returns \u00b6 B->A ? rewind \u00b6 [Source] fun ref rewind() : ArrayValues[A, B] ref Returns \u00b6 ArrayValues [A, B] ref","title":"class ArrayValues"},{"location":"builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93","text":"[Source] class ref ArrayValues[A: A, B: Array[A] #read] is Iterator[B->A] ref","title":"ArrayValues[A: A, B: Array[A] #read]"},{"location":"builtin-ArrayValues/#implements","text":"Iterator [B->A] ref","title":"Implements"},{"location":"builtin-ArrayValues/#constructors","text":"","title":"Constructors"},{"location":"builtin-ArrayValues/#create","text":"[Source] new ref create( array: B) : ArrayValues[A, B] ref^","title":"create"},{"location":"builtin-ArrayValues/#parameters","text":"array: B","title":"Parameters"},{"location":"builtin-ArrayValues/#returns","text":"ArrayValues [A, B] ref^","title":"Returns"},{"location":"builtin-ArrayValues/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ArrayValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-ArrayValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-ArrayValues/#next","text":"[Source] fun ref next() : B->A ?","title":"next"},{"location":"builtin-ArrayValues/#returns_2","text":"B->A ?","title":"Returns"},{"location":"builtin-ArrayValues/#rewind","text":"[Source] fun ref rewind() : ArrayValues[A, B] ref","title":"rewind"},{"location":"builtin-ArrayValues/#returns_3","text":"ArrayValues [A, B] ref","title":"Returns"},{"location":"builtin-AsioEvent/","text":"AsioEvent \u00b6 [Source] Functions for asynchronous event notification. primitive val AsioEvent Constructors \u00b6 create \u00b6 [Source] new val create() : AsioEvent val^ Returns \u00b6 AsioEvent val^ Public Functions \u00b6 none \u00b6 [Source] An empty event. fun box none() : Pointer[AsioEvent val] tag Returns \u00b6 Pointer [ AsioEvent val] tag readable \u00b6 [Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val writeable \u00b6 [Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val disposable \u00b6 [Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val oneshotable \u00b6 [Source] Returns true if the flags contain the oneshot flag. fun box oneshotable( flags: U32 val) : Bool val Parameters \u00b6 flags: U32 val Returns \u00b6 Bool val dispose \u00b6 [Source] fun box dispose() : U32 val Returns \u00b6 U32 val read \u00b6 [Source] fun box read() : U32 val Returns \u00b6 U32 val write \u00b6 [Source] fun box write() : U32 val Returns \u00b6 U32 val timer \u00b6 [Source] fun box timer() : U32 val Returns \u00b6 U32 val signal \u00b6 [Source] fun box signal() : U32 val Returns \u00b6 U32 val read_write \u00b6 [Source] fun box read_write() : U32 val Returns \u00b6 U32 val oneshot \u00b6 [Source] fun box oneshot() : U32 val Returns \u00b6 U32 val read_write_oneshot \u00b6 [Source] fun box read_write_oneshot() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: AsioEvent val) : Bool val Parameters \u00b6 that: AsioEvent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AsioEvent val) : Bool val Parameters \u00b6 that: AsioEvent val Returns \u00b6 Bool val","title":"primitive AsioEvent"},{"location":"builtin-AsioEvent/#asioevent","text":"[Source] Functions for asynchronous event notification. primitive val AsioEvent","title":"AsioEvent"},{"location":"builtin-AsioEvent/#constructors","text":"","title":"Constructors"},{"location":"builtin-AsioEvent/#create","text":"[Source] new val create() : AsioEvent val^","title":"create"},{"location":"builtin-AsioEvent/#returns","text":"AsioEvent val^","title":"Returns"},{"location":"builtin-AsioEvent/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-AsioEvent/#none","text":"[Source] An empty event. fun box none() : Pointer[AsioEvent val] tag","title":"none"},{"location":"builtin-AsioEvent/#returns_1","text":"Pointer [ AsioEvent val] tag","title":"Returns"},{"location":"builtin-AsioEvent/#readable","text":"[Source] Returns true if the flags contain the readable flag. fun box readable( flags: U32 val) : Bool val","title":"readable"},{"location":"builtin-AsioEvent/#parameters","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#writeable","text":"[Source] Returns true if the flags contain the writeable flag. fun box writeable( flags: U32 val) : Bool val","title":"writeable"},{"location":"builtin-AsioEvent/#parameters_1","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#disposable","text":"[Source] Returns true if the event should be disposed of. fun box disposable( flags: U32 val) : Bool val","title":"disposable"},{"location":"builtin-AsioEvent/#parameters_2","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshotable","text":"[Source] Returns true if the flags contain the oneshot flag. fun box oneshotable( flags: U32 val) : Bool val","title":"oneshotable"},{"location":"builtin-AsioEvent/#parameters_3","text":"flags: U32 val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#dispose","text":"[Source] fun box dispose() : U32 val","title":"dispose"},{"location":"builtin-AsioEvent/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read","text":"[Source] fun box read() : U32 val","title":"read"},{"location":"builtin-AsioEvent/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#write","text":"[Source] fun box write() : U32 val","title":"write"},{"location":"builtin-AsioEvent/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#timer","text":"[Source] fun box timer() : U32 val","title":"timer"},{"location":"builtin-AsioEvent/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#signal","text":"[Source] fun box signal() : U32 val","title":"signal"},{"location":"builtin-AsioEvent/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write","text":"[Source] fun box read_write() : U32 val","title":"read_write"},{"location":"builtin-AsioEvent/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#oneshot","text":"[Source] fun box oneshot() : U32 val","title":"oneshot"},{"location":"builtin-AsioEvent/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#read_write_oneshot","text":"[Source] fun box read_write_oneshot() : U32 val","title":"read_write_oneshot"},{"location":"builtin-AsioEvent/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-AsioEvent/#eq","text":"[Source] fun box eq( that: AsioEvent val) : Bool val","title":"eq"},{"location":"builtin-AsioEvent/#parameters_4","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEvent/#ne","text":"[Source] fun box ne( that: AsioEvent val) : Bool val","title":"ne"},{"location":"builtin-AsioEvent/#parameters_5","text":"that: AsioEvent val","title":"Parameters"},{"location":"builtin-AsioEvent/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-AsioEventID/","text":"AsioEventID \u00b6 [Source] type AsioEventID is Pointer[AsioEvent val] tag Type Alias For \u00b6 Pointer [ AsioEvent val] tag","title":"type AsioEventID"},{"location":"builtin-AsioEventID/#asioeventid","text":"[Source] type AsioEventID is Pointer[AsioEvent val] tag","title":"AsioEventID"},{"location":"builtin-AsioEventID/#type-alias-for","text":"Pointer [ AsioEvent val] tag","title":"Type Alias For"},{"location":"builtin-AsioEventNotify/","text":"AsioEventNotify \u00b6 [Source] interface tag AsioEventNotify Private Behaviours \u00b6 _event_notify \u00b6 [Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"interface AsioEventNotify"},{"location":"builtin-AsioEventNotify/#asioeventnotify","text":"[Source] interface tag AsioEventNotify","title":"AsioEventNotify"},{"location":"builtin-AsioEventNotify/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-AsioEventNotify/#_event_notify","text":"[Source] be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-AsioEventNotify/#parameters","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Bool/","text":"Bool \u00b6 [Source] primitive val Bool is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create( from: Bool val) : Bool val^ Parameters \u00b6 from: Bool val Returns \u00b6 Bool val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_and \u00b6 [Source] fun box op_and( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_or \u00b6 [Source] fun box op_or( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_xor \u00b6 [Source] fun box op_xor( y: Bool val) : Bool val Parameters \u00b6 y: Bool val Returns \u00b6 Bool val op_not \u00b6 [Source] fun box op_not() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^","title":"primitive Bool"},{"location":"builtin-Bool/#bool","text":"[Source] primitive val Bool is Stringable box","title":"Bool"},{"location":"builtin-Bool/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-Bool/#constructors","text":"","title":"Constructors"},{"location":"builtin-Bool/#create","text":"[Source] new val create( from: Bool val) : Bool val^","title":"create"},{"location":"builtin-Bool/#parameters","text":"from: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns","text":"Bool val^","title":"Returns"},{"location":"builtin-Bool/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Bool/#eq","text":"[Source] fun box eq( y: Bool val) : Bool val","title":"eq"},{"location":"builtin-Bool/#parameters_1","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#ne","text":"[Source] fun box ne( y: Bool val) : Bool val","title":"ne"},{"location":"builtin-Bool/#parameters_2","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_and","text":"[Source] fun box op_and( y: Bool val) : Bool val","title":"op_and"},{"location":"builtin-Bool/#parameters_3","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_or","text":"[Source] fun box op_or( y: Bool val) : Bool val","title":"op_or"},{"location":"builtin-Bool/#parameters_4","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_xor","text":"[Source] fun box op_xor( y: Bool val) : Bool val","title":"op_xor"},{"location":"builtin-Bool/#parameters_5","text":"y: Bool val","title":"Parameters"},{"location":"builtin-Bool/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#op_not","text":"[Source] fun box op_not() : Bool val","title":"op_not"},{"location":"builtin-Bool/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Bool/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Bool/#returns_7","text":"String iso^","title":"Returns"},{"location":"builtin-ByteSeq/","text":"ByteSeq \u00b6 [Source] type ByteSeq is (String val | Array[U8 val] val) Type Alias For \u00b6 ( String val | Array [ U8 val] val)","title":"type ByteSeq"},{"location":"builtin-ByteSeq/#byteseq","text":"[Source] type ByteSeq is (String val | Array[U8 val] val)","title":"ByteSeq"},{"location":"builtin-ByteSeq/#type-alias-for","text":"( String val | Array [ U8 val] val)","title":"Type Alias For"},{"location":"builtin-ByteSeqIter/","text":"ByteSeqIter \u00b6 [Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter Public Functions \u00b6 values \u00b6 [Source] fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref Returns \u00b6 Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"interface ByteSeqIter"},{"location":"builtin-ByteSeqIter/#byteseqiter","text":"[Source] Accept an iterable collection of String or Array[U8] val. interface val ByteSeqIter","title":"ByteSeqIter"},{"location":"builtin-ByteSeqIter/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ByteSeqIter/#values","text":"[Source] fun box values() : Iterator[(this->String box | this->Array[U8 val] box)] ref","title":"values"},{"location":"builtin-ByteSeqIter/#returns","text":"Iterator [(this-> String box | this-> Array [ U8 val] box)] ref","title":"Returns"},{"location":"builtin-Comparable/","text":"Comparable[A: Comparable [A] #read] \u00b6 [Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref Implements \u00b6 Equatable [A] ref Public Functions \u00b6 lt \u00b6 [Source] fun box lt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val compare \u00b6 [Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface Comparable"},{"location":"builtin-Comparable/#comparable91a-comparable91a93-read93","text":"[Source] interface ref Comparable[A: Comparable[A] #read] is Equatable[A] ref","title":"Comparable[A: Comparable[A] #read]"},{"location":"builtin-Comparable/#implements","text":"Equatable [A] ref","title":"Implements"},{"location":"builtin-Comparable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Comparable/#lt","text":"[Source] fun box lt( that: box->A) : Bool val","title":"lt"},{"location":"builtin-Comparable/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#le","text":"[Source] fun box le( that: box->A) : Bool val","title":"le"},{"location":"builtin-Comparable/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ge","text":"[Source] fun box ge( that: box->A) : Bool val","title":"ge"},{"location":"builtin-Comparable/#parameters_2","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#gt","text":"[Source] fun box gt( that: box->A) : Bool val","title":"gt"},{"location":"builtin-Comparable/#parameters_3","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#compare","text":"[Source] fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Comparable/#parameters_4","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_4","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Comparable/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-Comparable/#parameters_5","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Comparable/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"builtin-Comparable/#parameters_6","text":"that: box->A","title":"Parameters"},{"location":"builtin-Comparable/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Compare/","text":"Compare \u00b6 [Source] type Compare is (Less val | Equal val | Greater val) Type Alias For \u00b6 ( Less val | Equal val | Greater val)","title":"type Compare"},{"location":"builtin-Compare/#compare","text":"[Source] type Compare is (Less val | Equal val | Greater val)","title":"Compare"},{"location":"builtin-Compare/#type-alias-for","text":"( Less val | Equal val | Greater val)","title":"Type Alias For"},{"location":"builtin-DisposableActor/","text":"DisposableActor \u00b6 [Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor Public Behaviours \u00b6 dispose \u00b6 [Source] be dispose()","title":"interface DisposableActor"},{"location":"builtin-DisposableActor/#disposableactor","text":"[Source] An interface used to asynchronously dispose of an actor. interface tag DisposableActor","title":"DisposableActor"},{"location":"builtin-DisposableActor/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-DisposableActor/#dispose","text":"[Source] be dispose()","title":"dispose"},{"location":"builtin-DoNotOptimise/","text":"DoNotOptimise \u00b6 [Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise Constructors \u00b6 create \u00b6 [Source] new val create() : DoNotOptimise val^ Returns \u00b6 DoNotOptimise val^ Public Functions \u00b6 apply[A: A] \u00b6 [Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val Parameters \u00b6 obj: A Returns \u00b6 None val observe \u00b6 [Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: DoNotOptimise val) : Bool val Parameters \u00b6 that: DoNotOptimise val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DoNotOptimise val) : Bool val Parameters \u00b6 that: DoNotOptimise val Returns \u00b6 Bool val","title":"primitive DoNotOptimise"},{"location":"builtin-DoNotOptimise/#donotoptimise","text":"[Source] Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. primitive val DoNotOptimise","title":"DoNotOptimise"},{"location":"builtin-DoNotOptimise/#constructors","text":"","title":"Constructors"},{"location":"builtin-DoNotOptimise/#create","text":"[Source] new val create() : DoNotOptimise val^","title":"create"},{"location":"builtin-DoNotOptimise/#returns","text":"DoNotOptimise val^","title":"Returns"},{"location":"builtin-DoNotOptimise/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-DoNotOptimise/#apply91a-a93","text":"[Source] Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. fun box apply[A: A]( obj: A) : None val","title":"apply[A: A]"},{"location":"builtin-DoNotOptimise/#parameters","text":"obj: A","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#observe","text":"[Source] Prevent the compiler from optimising out writes to an object marked by the apply function. fun box observe() : None val","title":"observe"},{"location":"builtin-DoNotOptimise/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-DoNotOptimise/#eq","text":"[Source] fun box eq( that: DoNotOptimise val) : Bool val","title":"eq"},{"location":"builtin-DoNotOptimise/#parameters_1","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-DoNotOptimise/#ne","text":"[Source] fun box ne( that: DoNotOptimise val) : Bool val","title":"ne"},{"location":"builtin-DoNotOptimise/#parameters_2","text":"that: DoNotOptimise val","title":"Parameters"},{"location":"builtin-DoNotOptimise/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Env/","text":"Env \u00b6 [Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env Constructors \u00b6 _create \u00b6 [Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^ Parameters \u00b6 argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val Returns \u00b6 Env ref^ create \u00b6 [Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^ Parameters \u00b6 root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val Returns \u00b6 Env val^ Public fields \u00b6 let root: ( AmbientAuth val | None val) \u00b6 [Source] The root capability. Can be None for artificially constructed Env instances. let input: InputStream tag \u00b6 [Source] Stdin represented as an actor. let out: OutStream tag \u00b6 [Source] Stdout let err: OutStream tag \u00b6 [Source] Stderr let args: Array [ String val] val \u00b6 [Source] The command line used to start the program. let vars: Array [ String val] val \u00b6 [Source] The program's environment variables. let exitcode: {(I32)} val \u00b6 [Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. Private Functions \u00b6 _count_strings \u00b6 [Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val Parameters \u00b6 data: Pointer [ Pointer [ U8 val] ref] val Returns \u00b6 USize val _strings_from_pointers \u00b6 [Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^ Parameters \u00b6 data: Pointer [ Pointer [ U8 val] ref] val len: USize val Returns \u00b6 Array [ String val] iso^","title":"class Env"},{"location":"builtin-Env/#env","text":"[Source] An environment holds the command line and other values injected into the program by default by the runtime. class val Env","title":"Env"},{"location":"builtin-Env/#constructors","text":"","title":"Constructors"},{"location":"builtin-Env/#_create","text":"[Source] Builds an environment from the command line. This is done before the Main actor is created. new ref _create( argc: U32 val, argv: Pointer[Pointer[U8 val] ref] val, envp: Pointer[Pointer[U8 val] ref] val) : Env ref^","title":"_create"},{"location":"builtin-Env/#parameters","text":"argc: U32 val argv: Pointer [ Pointer [ U8 val] ref] val envp: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns","text":"Env ref^","title":"Returns"},{"location":"builtin-Env/#create","text":"[Source] Build an artificial environment. A root capability may be supplied. new val create( root': (AmbientAuth val | None val), input': InputStream tag, out': OutStream tag, err': OutStream tag, args': Array[String val] val, vars': Array[String val] val, exitcode': {(I32)} val) : Env val^","title":"create"},{"location":"builtin-Env/#parameters_1","text":"root': ( AmbientAuth val | None val) input': InputStream tag out': OutStream tag err': OutStream tag args': Array [ String val] val vars': Array [ String val] val exitcode': {(I32)} val","title":"Parameters"},{"location":"builtin-Env/#returns_1","text":"Env val^","title":"Returns"},{"location":"builtin-Env/#public-fields","text":"","title":"Public fields"},{"location":"builtin-Env/#let-root-ambientauth-val-none-val","text":"[Source] The root capability. Can be None for artificially constructed Env instances.","title":"let root: (AmbientAuth val | None val)"},{"location":"builtin-Env/#let-input-inputstream-tag","text":"[Source] Stdin represented as an actor.","title":"let input: InputStream tag"},{"location":"builtin-Env/#let-out-outstream-tag","text":"[Source] Stdout","title":"let out: OutStream tag"},{"location":"builtin-Env/#let-err-outstream-tag","text":"[Source] Stderr","title":"let err: OutStream tag"},{"location":"builtin-Env/#let-args-array91string-val93-val","text":"[Source] The command line used to start the program.","title":"let args: Array[String val] val"},{"location":"builtin-Env/#let-vars-array91string-val93-val","text":"[Source] The program's environment variables.","title":"let vars: Array[String val] val"},{"location":"builtin-Env/#let-exitcode-i32-val","text":"[Source] Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0.","title":"let exitcode: {(I32)} val"},{"location":"builtin-Env/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Env/#_count_strings","text":"[Source] fun tag _count_strings( data: Pointer[Pointer[U8 val] ref] val) : USize val","title":"_count_strings"},{"location":"builtin-Env/#parameters_2","text":"data: Pointer [ Pointer [ U8 val] ref] val","title":"Parameters"},{"location":"builtin-Env/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Env/#_strings_from_pointers","text":"[Source] fun tag _strings_from_pointers( data: Pointer[Pointer[U8 val] ref] val, len: USize val) : Array[String val] iso^","title":"_strings_from_pointers"},{"location":"builtin-Env/#parameters_3","text":"data: Pointer [ Pointer [ U8 val] ref] val len: USize val","title":"Parameters"},{"location":"builtin-Env/#returns_3","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-Equal/","text":"Equal \u00b6 [Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Equal val^ Returns \u00b6 Equal val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Equal"},{"location":"builtin-Equal/#equal","text":"[Source] primitive val Equal is Equatable[(Less val | Equal val | Greater val)] ref","title":"Equal"},{"location":"builtin-Equal/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Equal/#constructors","text":"","title":"Constructors"},{"location":"builtin-Equal/#create","text":"[Source] new val create() : Equal val^","title":"create"},{"location":"builtin-Equal/#returns","text":"Equal val^","title":"Returns"},{"location":"builtin-Equal/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equal/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Equal/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Equal/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Equal/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Equal/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Equal/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Equal/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/","text":"Equatable[A: Equatable [A] #read] \u00b6 [Source] interface ref Equatable[A: Equatable[A] #read] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface Equatable"},{"location":"builtin-Equatable/#equatable91a-equatable91a93-read93","text":"[Source] interface ref Equatable[A: Equatable[A] #read]","title":"Equatable[A: Equatable[A] #read]"},{"location":"builtin-Equatable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Equatable/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-Equatable/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-Equatable/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Equatable/#ne","text":"[Source] fun box ne( that: box->A) : Bool val","title":"ne"},{"location":"builtin-Equatable/#parameters_1","text":"that: box->A","title":"Parameters"},{"location":"builtin-Equatable/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-F32/","text":"F32 \u00b6 [Source] primitive val F32 is FloatingPoint[F32 val] val Implements \u00b6 FloatingPoint [ F32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: F32 val = 0) : F32 val^ Parameters \u00b6 value: F32 val = 0 Returns \u00b6 F32 val^ pi \u00b6 [Source] new val pi() : F32 val^ Returns \u00b6 F32 val^ e \u00b6 [Source] new val e() : F32 val^ Returns \u00b6 F32 val^ _nan \u00b6 [Source] new val _nan() : F32 val^ Returns \u00b6 F32 val^ _inf \u00b6 [Source] new val _inf( negative: Bool val) : F32 val^ Parameters \u00b6 negative: Bool val Returns \u00b6 F32 val^ from_bits \u00b6 [Source] new val from_bits( i: U32 val) : F32 val^ Parameters \u00b6 i: U32 val Returns \u00b6 F32 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F32 val^ Parameters \u00b6 a: B Returns \u00b6 F32 val^ min_value \u00b6 [Source] Minimum negative value representable. new val min_value() : F32 val^ Returns \u00b6 F32 val^ max_value \u00b6 [Source] Maximum positive value representable. new val max_value() : F32 val^ Returns \u00b6 F32 val^ min_normalised \u00b6 [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^ Returns \u00b6 F32 val^ epsilon \u00b6 [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^ Returns \u00b6 F32 val^ Public Functions \u00b6 bits \u00b6 [Source] fun box bits() : U32 val Returns \u00b6 U32 val radix \u00b6 [Source] Exponent radix. fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns \u00b6 I16 val abs \u00b6 [Source] fun box abs() : F32 val Returns \u00b6 F32 val ceil \u00b6 [Source] fun box ceil() : F32 val Returns \u00b6 F32 val floor \u00b6 [Source] fun box floor() : F32 val Returns \u00b6 F32 val round \u00b6 [Source] fun box round() : F32 val Returns \u00b6 F32 val trunc \u00b6 [Source] fun box trunc() : F32 val Returns \u00b6 F32 val min \u00b6 [Source] fun box min( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val max \u00b6 [Source] fun box max( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val fld \u00b6 [Source] fun box fld( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mod \u00b6 [Source] fun box mod( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val finite \u00b6 [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] Check whether this number is NaN. fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val Parameters \u00b6 x: F32 val exponent: I32 val Returns \u00b6 F32 val frexp \u00b6 [Source] fun box frexp() : (F32 val , U32 val) Returns \u00b6 ( F32 val , U32 val) log \u00b6 [Source] fun box log() : F32 val Returns \u00b6 F32 val log2 \u00b6 [Source] fun box log2() : F32 val Returns \u00b6 F32 val log10 \u00b6 [Source] fun box log10() : F32 val Returns \u00b6 F32 val logb \u00b6 [Source] fun box logb() : F32 val Returns \u00b6 F32 val pow \u00b6 [Source] fun box pow( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val powi \u00b6 [Source] fun box powi( y: I32 val) : F32 val Parameters \u00b6 y: I32 val Returns \u00b6 F32 val sqrt \u00b6 [Source] fun box sqrt() : F32 val Returns \u00b6 F32 val sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val Returns \u00b6 F32 val cbrt \u00b6 [Source] fun box cbrt() : F32 val Returns \u00b6 F32 val exp \u00b6 [Source] fun box exp() : F32 val Returns \u00b6 F32 val exp2 \u00b6 [Source] fun box exp2() : F32 val Returns \u00b6 F32 val cos \u00b6 [Source] fun box cos() : F32 val Returns \u00b6 F32 val sin \u00b6 [Source] fun box sin() : F32 val Returns \u00b6 F32 val tan \u00b6 [Source] fun box tan() : F32 val Returns \u00b6 F32 val cosh \u00b6 [Source] fun box cosh() : F32 val Returns \u00b6 F32 val sinh \u00b6 [Source] fun box sinh() : F32 val Returns \u00b6 F32 val tanh \u00b6 [Source] fun box tanh() : F32 val Returns \u00b6 F32 val acos \u00b6 [Source] fun box acos() : F32 val Returns \u00b6 F32 val asin \u00b6 [Source] fun box asin() : F32 val Returns \u00b6 F32 val atan \u00b6 [Source] fun box atan() : F32 val Returns \u00b6 F32 val atan2 \u00b6 [Source] fun box atan2( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val acosh \u00b6 [Source] fun box acosh() : F32 val Returns \u00b6 F32 val asinh \u00b6 [Source] fun box asinh() : F32 val Returns \u00b6 F32 val atanh \u00b6 [Source] fun box atanh() : F32 val Returns \u00b6 F32 val copysign \u00b6 [Source] fun box copysign( sign: F32 val) : F32 val Parameters \u00b6 sign: F32 val Returns \u00b6 F32 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val add_unsafe \u00b6 [Source] fun box add_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val div_unsafe \u00b6 [Source] fun box div_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val) Parameters \u00b6 y: F32 val Returns \u00b6 ( F32 val , F32 val) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val neg_unsafe \u00b6 [Source] fun box neg_unsafe() : F32 val Returns \u00b6 F32 val eq_unsafe \u00b6 [Source] fun box eq_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] fun box ne_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] fun box lt_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val le_unsafe \u00b6 [Source] fun box le_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] fun box ge_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] fun box gt_unsafe( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val sub \u00b6 [Source] fun box sub( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val mul \u00b6 [Source] fun box mul( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val div \u00b6 [Source] fun box div( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val divrem \u00b6 [Source] fun box divrem( y: F32 val) : (F32 val , F32 val) Parameters \u00b6 y: F32 val Returns \u00b6 ( F32 val , F32 val) rem \u00b6 [Source] fun box rem( y: F32 val) : F32 val Parameters \u00b6 y: F32 val Returns \u00b6 F32 val neg \u00b6 [Source] fun box neg() : F32 val Returns \u00b6 F32 val eq \u00b6 [Source] fun box eq( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: F32 val) : Bool val Parameters \u00b6 y: F32 val Returns \u00b6 Bool val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: F32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: F32 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : F32 val Returns \u00b6 F32 val","title":"primitive F32"},{"location":"builtin-F32/#f32","text":"[Source] primitive val F32 is FloatingPoint[F32 val] val","title":"F32"},{"location":"builtin-F32/#implements","text":"FloatingPoint [ F32 val] val","title":"Implements"},{"location":"builtin-F32/#constructors","text":"","title":"Constructors"},{"location":"builtin-F32/#create","text":"[Source] new val create( value: F32 val = 0) : F32 val^","title":"create"},{"location":"builtin-F32/#parameters","text":"value: F32 val = 0","title":"Parameters"},{"location":"builtin-F32/#returns","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#pi","text":"[Source] new val pi() : F32 val^","title":"pi"},{"location":"builtin-F32/#returns_1","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#e","text":"[Source] new val e() : F32 val^","title":"e"},{"location":"builtin-F32/#returns_2","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_nan","text":"[Source] new val _nan() : F32 val^","title":"_nan"},{"location":"builtin-F32/#returns_3","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#_inf","text":"[Source] new val _inf( negative: Bool val) : F32 val^","title":"_inf"},{"location":"builtin-F32/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F32/#returns_4","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from_bits","text":"[Source] new val from_bits( i: U32 val) : F32 val^","title":"from_bits"},{"location":"builtin-F32/#parameters_2","text":"i: U32 val","title":"Parameters"},{"location":"builtin-F32/#returns_5","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F32 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F32/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F32/#returns_6","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F32 val^","title":"min_value"},{"location":"builtin-F32/#returns_7","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F32 val^","title":"max_value"},{"location":"builtin-F32/#returns_8","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F32 val^","title":"min_normalised"},{"location":"builtin-F32/#returns_9","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F32 val^","title":"epsilon"},{"location":"builtin-F32/#returns_10","text":"F32 val^","title":"Returns"},{"location":"builtin-F32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F32/#bits","text":"[Source] fun box bits() : U32 val","title":"bits"},{"location":"builtin-F32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F32/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F32/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F32/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F32/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F32/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F32/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F32/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#abs","text":"[Source] fun box abs() : F32 val","title":"abs"},{"location":"builtin-F32/#returns_19","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#ceil","text":"[Source] fun box ceil() : F32 val","title":"ceil"},{"location":"builtin-F32/#returns_20","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#floor","text":"[Source] fun box floor() : F32 val","title":"floor"},{"location":"builtin-F32/#returns_21","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#round","text":"[Source] fun box round() : F32 val","title":"round"},{"location":"builtin-F32/#returns_22","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#trunc","text":"[Source] fun box trunc() : F32 val","title":"trunc"},{"location":"builtin-F32/#returns_23","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#min","text":"[Source] fun box min( y: F32 val) : F32 val","title":"min"},{"location":"builtin-F32/#parameters_4","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_24","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#max","text":"[Source] fun box max( y: F32 val) : F32 val","title":"max"},{"location":"builtin-F32/#parameters_5","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_25","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#fld","text":"[Source] fun box fld( y: F32 val) : F32 val","title":"fld"},{"location":"builtin-F32/#parameters_6","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_26","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: F32 val) : F32 val","title":"fld_unsafe"},{"location":"builtin-F32/#parameters_7","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_27","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mod","text":"[Source] fun box mod( y: F32 val) : F32 val","title":"mod"},{"location":"builtin-F32/#parameters_8","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: F32 val) : F32 val","title":"mod_unsafe"},{"location":"builtin-F32/#parameters_9","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_29","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F32/#returns_30","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F32/#returns_31","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F32/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ldexp","text":"[Source] fun box ldexp( x: F32 val, exponent: I32 val) : F32 val","title":"ldexp"},{"location":"builtin-F32/#parameters_10","text":"x: F32 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#frexp","text":"[Source] fun box frexp() : (F32 val , U32 val)","title":"frexp"},{"location":"builtin-F32/#returns_34","text":"( F32 val , U32 val)","title":"Returns"},{"location":"builtin-F32/#log","text":"[Source] fun box log() : F32 val","title":"log"},{"location":"builtin-F32/#returns_35","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log2","text":"[Source] fun box log2() : F32 val","title":"log2"},{"location":"builtin-F32/#returns_36","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#log10","text":"[Source] fun box log10() : F32 val","title":"log10"},{"location":"builtin-F32/#returns_37","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#logb","text":"[Source] fun box logb() : F32 val","title":"logb"},{"location":"builtin-F32/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#pow","text":"[Source] fun box pow( y: F32 val) : F32 val","title":"pow"},{"location":"builtin-F32/#parameters_11","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_39","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#powi","text":"[Source] fun box powi( y: I32 val) : F32 val","title":"powi"},{"location":"builtin-F32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F32/#returns_40","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt","text":"[Source] fun box sqrt() : F32 val","title":"sqrt"},{"location":"builtin-F32/#returns_41","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F32 val","title":"sqrt_unsafe"},{"location":"builtin-F32/#returns_42","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cbrt","text":"[Source] fun box cbrt() : F32 val","title":"cbrt"},{"location":"builtin-F32/#returns_43","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp","text":"[Source] fun box exp() : F32 val","title":"exp"},{"location":"builtin-F32/#returns_44","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#exp2","text":"[Source] fun box exp2() : F32 val","title":"exp2"},{"location":"builtin-F32/#returns_45","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cos","text":"[Source] fun box cos() : F32 val","title":"cos"},{"location":"builtin-F32/#returns_46","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sin","text":"[Source] fun box sin() : F32 val","title":"sin"},{"location":"builtin-F32/#returns_47","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tan","text":"[Source] fun box tan() : F32 val","title":"tan"},{"location":"builtin-F32/#returns_48","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#cosh","text":"[Source] fun box cosh() : F32 val","title":"cosh"},{"location":"builtin-F32/#returns_49","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sinh","text":"[Source] fun box sinh() : F32 val","title":"sinh"},{"location":"builtin-F32/#returns_50","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#tanh","text":"[Source] fun box tanh() : F32 val","title":"tanh"},{"location":"builtin-F32/#returns_51","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acos","text":"[Source] fun box acos() : F32 val","title":"acos"},{"location":"builtin-F32/#returns_52","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asin","text":"[Source] fun box asin() : F32 val","title":"asin"},{"location":"builtin-F32/#returns_53","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan","text":"[Source] fun box atan() : F32 val","title":"atan"},{"location":"builtin-F32/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atan2","text":"[Source] fun box atan2( y: F32 val) : F32 val","title":"atan2"},{"location":"builtin-F32/#parameters_13","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_55","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#acosh","text":"[Source] fun box acosh() : F32 val","title":"acosh"},{"location":"builtin-F32/#returns_56","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#asinh","text":"[Source] fun box asinh() : F32 val","title":"asinh"},{"location":"builtin-F32/#returns_57","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#atanh","text":"[Source] fun box atanh() : F32 val","title":"atanh"},{"location":"builtin-F32/#returns_58","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#copysign","text":"[Source] fun box copysign( sign: F32 val) : F32 val","title":"copysign"},{"location":"builtin-F32/#parameters_14","text":"sign: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_59","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F32/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-F32/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F32/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F32/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F32/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F32/#returns_64","text":"I128 val","title":"Returns"},{"location":"builtin-F32/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F32/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-F32/#add_unsafe","text":"[Source] fun box add_unsafe( y: F32 val) : F32 val","title":"add_unsafe"},{"location":"builtin-F32/#parameters_15","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_66","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F32 val) : F32 val","title":"sub_unsafe"},{"location":"builtin-F32/#parameters_16","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_67","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F32 val) : F32 val","title":"mul_unsafe"},{"location":"builtin-F32/#parameters_17","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div_unsafe","text":"[Source] fun box div_unsafe( y: F32 val) : F32 val","title":"div_unsafe"},{"location":"builtin-F32/#parameters_18","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_69","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F32 val) : (F32 val , F32 val)","title":"divrem_unsafe"},{"location":"builtin-F32/#parameters_19","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_70","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F32 val) : F32 val","title":"rem_unsafe"},{"location":"builtin-F32/#parameters_20","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_71","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F32 val","title":"neg_unsafe"},{"location":"builtin-F32/#returns_72","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F32 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F32/#parameters_21","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F32 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F32/#parameters_22","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F32 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F32/#parameters_23","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le_unsafe","text":"[Source] fun box le_unsafe( y: F32 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F32/#parameters_24","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F32 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F32/#parameters_25","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F32 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F32/#parameters_26","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F32/#returns_79","text":"String iso^","title":"Returns"},{"location":"builtin-F32/#add","text":"[Source] fun box add( y: F32 val) : F32 val","title":"add"},{"location":"builtin-F32/#parameters_27","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#sub","text":"[Source] fun box sub( y: F32 val) : F32 val","title":"sub"},{"location":"builtin-F32/#parameters_28","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_81","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#mul","text":"[Source] fun box mul( y: F32 val) : F32 val","title":"mul"},{"location":"builtin-F32/#parameters_29","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#div","text":"[Source] fun box div( y: F32 val) : F32 val","title":"div"},{"location":"builtin-F32/#parameters_30","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#divrem","text":"[Source] fun box divrem( y: F32 val) : (F32 val , F32 val)","title":"divrem"},{"location":"builtin-F32/#parameters_31","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_84","text":"( F32 val , F32 val)","title":"Returns"},{"location":"builtin-F32/#rem","text":"[Source] fun box rem( y: F32 val) : F32 val","title":"rem"},{"location":"builtin-F32/#parameters_32","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_85","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#neg","text":"[Source] fun box neg() : F32 val","title":"neg"},{"location":"builtin-F32/#returns_86","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#eq","text":"[Source] fun box eq( y: F32 val) : Bool val","title":"eq"},{"location":"builtin-F32/#parameters_33","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ne","text":"[Source] fun box ne( y: F32 val) : Bool val","title":"ne"},{"location":"builtin-F32/#parameters_34","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#lt","text":"[Source] fun box lt( y: F32 val) : Bool val","title":"lt"},{"location":"builtin-F32/#parameters_35","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_89","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#le","text":"[Source] fun box le( y: F32 val) : Bool val","title":"le"},{"location":"builtin-F32/#parameters_36","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_90","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#ge","text":"[Source] fun box ge( y: F32 val) : Bool val","title":"ge"},{"location":"builtin-F32/#parameters_37","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_91","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#gt","text":"[Source] fun box gt( y: F32 val) : Bool val","title":"gt"},{"location":"builtin-F32/#parameters_38","text":"y: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_92","text":"Bool val","title":"Returns"},{"location":"builtin-F32/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F32/#returns_93","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F32/#returns_94","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F32/#returns_95","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F32/#returns_96","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F32/#returns_97","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F32/#returns_98","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F32/#returns_99","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F32/#returns_100","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F32/#returns_101","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F32/#returns_102","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F32/#returns_103","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F32/#returns_104","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_1","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F32/#returns_105","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F32/#returns_106","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F32/#returns_107","text":"I8 val","title":"Returns"},{"location":"builtin-F32/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F32/#returns_108","text":"I16 val","title":"Returns"},{"location":"builtin-F32/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F32/#returns_109","text":"I32 val","title":"Returns"},{"location":"builtin-F32/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F32/#returns_110","text":"I64 val","title":"Returns"},{"location":"builtin-F32/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F32/#returns_111","text":"ILong val","title":"Returns"},{"location":"builtin-F32/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F32/#returns_112","text":"ISize val","title":"Returns"},{"location":"builtin-F32/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F32/#returns_113","text":"U8 val","title":"Returns"},{"location":"builtin-F32/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F32/#returns_114","text":"U16 val","title":"Returns"},{"location":"builtin-F32/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F32/#returns_115","text":"U32 val","title":"Returns"},{"location":"builtin-F32/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F32/#returns_116","text":"U64 val","title":"Returns"},{"location":"builtin-F32/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F32/#returns_117","text":"ULong val","title":"Returns"},{"location":"builtin-F32/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F32/#returns_118","text":"USize val","title":"Returns"},{"location":"builtin-F32/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F32/#returns_119","text":"F32 val","title":"Returns"},{"location":"builtin-F32/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F32/#returns_120","text":"F64 val","title":"Returns"},{"location":"builtin-F32/#compare","text":"fun box compare( that: F32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F32/#parameters_39","text":"that: F32 val","title":"Parameters"},{"location":"builtin-F32/#returns_121","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F32/#_value","text":"[Source] fun box _value() : F32 val","title":"_value"},{"location":"builtin-F32/#returns_122","text":"F32 val","title":"Returns"},{"location":"builtin-F64/","text":"F64 \u00b6 [Source] primitive val F64 is FloatingPoint[F64 val] val Implements \u00b6 FloatingPoint [ F64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: F64 val = 0) : F64 val^ Parameters \u00b6 value: F64 val = 0 Returns \u00b6 F64 val^ pi \u00b6 [Source] new val pi() : F64 val^ Returns \u00b6 F64 val^ e \u00b6 [Source] new val e() : F64 val^ Returns \u00b6 F64 val^ _nan \u00b6 [Source] new val _nan() : F64 val^ Returns \u00b6 F64 val^ _inf \u00b6 [Source] new val _inf( negative: Bool val) : F64 val^ Parameters \u00b6 negative: Bool val Returns \u00b6 F64 val^ from_bits \u00b6 [Source] new val from_bits( i: U64 val) : F64 val^ Parameters \u00b6 i: U64 val Returns \u00b6 F64 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F64 val^ Parameters \u00b6 a: B Returns \u00b6 F64 val^ min_value \u00b6 [Source] Minimum negative value representable. new val min_value() : F64 val^ Returns \u00b6 F64 val^ max_value \u00b6 [Source] Maximum positive value representable. new val max_value() : F64 val^ Returns \u00b6 F64 val^ min_normalised \u00b6 [Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^ Returns \u00b6 F64 val^ epsilon \u00b6 [Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^ Returns \u00b6 F64 val^ Public Functions \u00b6 bits \u00b6 [Source] fun box bits() : U64 val Returns \u00b6 U64 val radix \u00b6 [Source] Exponent radix. fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] Mantissa precision in bits. fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val Returns \u00b6 I16 val abs \u00b6 [Source] fun box abs() : F64 val Returns \u00b6 F64 val ceil \u00b6 [Source] fun box ceil() : F64 val Returns \u00b6 F64 val floor \u00b6 [Source] fun box floor() : F64 val Returns \u00b6 F64 val round \u00b6 [Source] fun box round() : F64 val Returns \u00b6 F64 val trunc \u00b6 [Source] fun box trunc() : F64 val Returns \u00b6 F64 val min \u00b6 [Source] fun box min( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val max \u00b6 [Source] fun box max( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val fld \u00b6 [Source] fun box fld( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mod \u00b6 [Source] fun box mod( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val finite \u00b6 [Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] Check whether this number is +/-infinity fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] Check whether this number is NaN. fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val Parameters \u00b6 x: F64 val exponent: I32 val Returns \u00b6 F64 val frexp \u00b6 [Source] fun box frexp() : (F64 val , U32 val) Returns \u00b6 ( F64 val , U32 val) log \u00b6 [Source] fun box log() : F64 val Returns \u00b6 F64 val log2 \u00b6 [Source] fun box log2() : F64 val Returns \u00b6 F64 val log10 \u00b6 [Source] fun box log10() : F64 val Returns \u00b6 F64 val logb \u00b6 [Source] fun box logb() : F64 val Returns \u00b6 F64 val pow \u00b6 [Source] fun box pow( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val powi \u00b6 [Source] fun box powi( y: I32 val) : F64 val Parameters \u00b6 y: I32 val Returns \u00b6 F64 val sqrt \u00b6 [Source] fun box sqrt() : F64 val Returns \u00b6 F64 val sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val Returns \u00b6 F64 val cbrt \u00b6 [Source] fun box cbrt() : F64 val Returns \u00b6 F64 val exp \u00b6 [Source] fun box exp() : F64 val Returns \u00b6 F64 val exp2 \u00b6 [Source] fun box exp2() : F64 val Returns \u00b6 F64 val cos \u00b6 [Source] fun box cos() : F64 val Returns \u00b6 F64 val sin \u00b6 [Source] fun box sin() : F64 val Returns \u00b6 F64 val tan \u00b6 [Source] fun box tan() : F64 val Returns \u00b6 F64 val cosh \u00b6 [Source] fun box cosh() : F64 val Returns \u00b6 F64 val sinh \u00b6 [Source] fun box sinh() : F64 val Returns \u00b6 F64 val tanh \u00b6 [Source] fun box tanh() : F64 val Returns \u00b6 F64 val acos \u00b6 [Source] fun box acos() : F64 val Returns \u00b6 F64 val asin \u00b6 [Source] fun box asin() : F64 val Returns \u00b6 F64 val atan \u00b6 [Source] fun box atan() : F64 val Returns \u00b6 F64 val atan2 \u00b6 [Source] fun box atan2( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val acosh \u00b6 [Source] fun box acosh() : F64 val Returns \u00b6 F64 val asinh \u00b6 [Source] fun box asinh() : F64 val Returns \u00b6 F64 val atanh \u00b6 [Source] fun box atanh() : F64 val Returns \u00b6 F64 val copysign \u00b6 [Source] fun box copysign( sign: F64 val) : F64 val Parameters \u00b6 sign: F64 val Returns \u00b6 F64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val add_unsafe \u00b6 [Source] fun box add_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val div_unsafe \u00b6 [Source] fun box div_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val) Parameters \u00b6 y: F64 val Returns \u00b6 ( F64 val , F64 val) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val neg_unsafe \u00b6 [Source] fun box neg_unsafe() : F64 val Returns \u00b6 F64 val eq_unsafe \u00b6 [Source] fun box eq_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] fun box ne_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] fun box lt_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val le_unsafe \u00b6 [Source] fun box le_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] fun box ge_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] fun box gt_unsafe( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val sub \u00b6 [Source] fun box sub( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val mul \u00b6 [Source] fun box mul( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val div \u00b6 [Source] fun box div( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val divrem \u00b6 [Source] fun box divrem( y: F64 val) : (F64 val , F64 val) Parameters \u00b6 y: F64 val Returns \u00b6 ( F64 val , F64 val) rem \u00b6 [Source] fun box rem( y: F64 val) : F64 val Parameters \u00b6 y: F64 val Returns \u00b6 F64 val neg \u00b6 [Source] fun box neg() : F64 val Returns \u00b6 F64 val eq \u00b6 [Source] fun box eq( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: F64 val) : Bool val Parameters \u00b6 y: F64 val Returns \u00b6 Bool val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: F64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: F64 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : F64 val Returns \u00b6 F64 val","title":"primitive F64"},{"location":"builtin-F64/#f64","text":"[Source] primitive val F64 is FloatingPoint[F64 val] val","title":"F64"},{"location":"builtin-F64/#implements","text":"FloatingPoint [ F64 val] val","title":"Implements"},{"location":"builtin-F64/#constructors","text":"","title":"Constructors"},{"location":"builtin-F64/#create","text":"[Source] new val create( value: F64 val = 0) : F64 val^","title":"create"},{"location":"builtin-F64/#parameters","text":"value: F64 val = 0","title":"Parameters"},{"location":"builtin-F64/#returns","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#pi","text":"[Source] new val pi() : F64 val^","title":"pi"},{"location":"builtin-F64/#returns_1","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#e","text":"[Source] new val e() : F64 val^","title":"e"},{"location":"builtin-F64/#returns_2","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_nan","text":"[Source] new val _nan() : F64 val^","title":"_nan"},{"location":"builtin-F64/#returns_3","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#_inf","text":"[Source] new val _inf( negative: Bool val) : F64 val^","title":"_inf"},{"location":"builtin-F64/#parameters_1","text":"negative: Bool val","title":"Parameters"},{"location":"builtin-F64/#returns_4","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from_bits","text":"[Source] new val from_bits( i: U64 val) : F64 val^","title":"from_bits"},{"location":"builtin-F64/#parameters_2","text":"i: U64 val","title":"Parameters"},{"location":"builtin-F64/#returns_5","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : F64 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-F64/#parameters_3","text":"a: B","title":"Parameters"},{"location":"builtin-F64/#returns_6","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_value","text":"[Source] Minimum negative value representable. new val min_value() : F64 val^","title":"min_value"},{"location":"builtin-F64/#returns_7","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#max_value","text":"[Source] Maximum positive value representable. new val max_value() : F64 val^","title":"max_value"},{"location":"builtin-F64/#returns_8","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#min_normalised","text":"[Source] Minimum positive value representable at full precision (ie a normalised number). new val min_normalised() : F64 val^","title":"min_normalised"},{"location":"builtin-F64/#returns_9","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#epsilon","text":"[Source] Minimum positive value such that (1 + epsilon) != 1. new val epsilon() : F64 val^","title":"epsilon"},{"location":"builtin-F64/#returns_10","text":"F64 val^","title":"Returns"},{"location":"builtin-F64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-F64/#bits","text":"[Source] fun box bits() : U64 val","title":"bits"},{"location":"builtin-F64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#radix","text":"[Source] Exponent radix. fun tag radix() : U8 val","title":"radix"},{"location":"builtin-F64/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision2","text":"[Source] Mantissa precision in bits. fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-F64/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#precision10","text":"[Source] Mantissa precision in decimal digits. fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-F64/#returns_14","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#min_exp2","text":"[Source] Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-F64/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#min_exp10","text":"[Source] Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-F64/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp2","text":"[Source] Maximum exponent value such that (2^exponent) - 1 is representable. fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-F64/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#max_exp10","text":"[Source] Maximum exponent value such that (10^exponent) - 1 is representable. fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-F64/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#abs","text":"[Source] fun box abs() : F64 val","title":"abs"},{"location":"builtin-F64/#returns_19","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#ceil","text":"[Source] fun box ceil() : F64 val","title":"ceil"},{"location":"builtin-F64/#returns_20","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#floor","text":"[Source] fun box floor() : F64 val","title":"floor"},{"location":"builtin-F64/#returns_21","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#round","text":"[Source] fun box round() : F64 val","title":"round"},{"location":"builtin-F64/#returns_22","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#trunc","text":"[Source] fun box trunc() : F64 val","title":"trunc"},{"location":"builtin-F64/#returns_23","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#min","text":"[Source] fun box min( y: F64 val) : F64 val","title":"min"},{"location":"builtin-F64/#parameters_4","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_24","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#max","text":"[Source] fun box max( y: F64 val) : F64 val","title":"max"},{"location":"builtin-F64/#parameters_5","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_25","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#fld","text":"[Source] fun box fld( y: F64 val) : F64 val","title":"fld"},{"location":"builtin-F64/#parameters_6","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_26","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: F64 val) : F64 val","title":"fld_unsafe"},{"location":"builtin-F64/#parameters_7","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_27","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mod","text":"[Source] fun box mod( y: F64 val) : F64 val","title":"mod"},{"location":"builtin-F64/#parameters_8","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_28","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: F64 val) : F64 val","title":"mod_unsafe"},{"location":"builtin-F64/#parameters_9","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#finite","text":"[Source] Check whether this number is finite, ie not +/-infinity and not NaN. fun box finite() : Bool val","title":"finite"},{"location":"builtin-F64/#returns_30","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#infinite","text":"[Source] Check whether this number is +/-infinity fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-F64/#returns_31","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#nan","text":"[Source] Check whether this number is NaN. fun box nan() : Bool val","title":"nan"},{"location":"builtin-F64/#returns_32","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ldexp","text":"[Source] fun box ldexp( x: F64 val, exponent: I32 val) : F64 val","title":"ldexp"},{"location":"builtin-F64/#parameters_10","text":"x: F64 val exponent: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_33","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#frexp","text":"[Source] fun box frexp() : (F64 val , U32 val)","title":"frexp"},{"location":"builtin-F64/#returns_34","text":"( F64 val , U32 val)","title":"Returns"},{"location":"builtin-F64/#log","text":"[Source] fun box log() : F64 val","title":"log"},{"location":"builtin-F64/#returns_35","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log2","text":"[Source] fun box log2() : F64 val","title":"log2"},{"location":"builtin-F64/#returns_36","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#log10","text":"[Source] fun box log10() : F64 val","title":"log10"},{"location":"builtin-F64/#returns_37","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#logb","text":"[Source] fun box logb() : F64 val","title":"logb"},{"location":"builtin-F64/#returns_38","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#pow","text":"[Source] fun box pow( y: F64 val) : F64 val","title":"pow"},{"location":"builtin-F64/#parameters_11","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#powi","text":"[Source] fun box powi( y: I32 val) : F64 val","title":"powi"},{"location":"builtin-F64/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-F64/#returns_40","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt","text":"[Source] fun box sqrt() : F64 val","title":"sqrt"},{"location":"builtin-F64/#returns_41","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : F64 val","title":"sqrt_unsafe"},{"location":"builtin-F64/#returns_42","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cbrt","text":"[Source] fun box cbrt() : F64 val","title":"cbrt"},{"location":"builtin-F64/#returns_43","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp","text":"[Source] fun box exp() : F64 val","title":"exp"},{"location":"builtin-F64/#returns_44","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#exp2","text":"[Source] fun box exp2() : F64 val","title":"exp2"},{"location":"builtin-F64/#returns_45","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cos","text":"[Source] fun box cos() : F64 val","title":"cos"},{"location":"builtin-F64/#returns_46","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sin","text":"[Source] fun box sin() : F64 val","title":"sin"},{"location":"builtin-F64/#returns_47","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tan","text":"[Source] fun box tan() : F64 val","title":"tan"},{"location":"builtin-F64/#returns_48","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#cosh","text":"[Source] fun box cosh() : F64 val","title":"cosh"},{"location":"builtin-F64/#returns_49","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sinh","text":"[Source] fun box sinh() : F64 val","title":"sinh"},{"location":"builtin-F64/#returns_50","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#tanh","text":"[Source] fun box tanh() : F64 val","title":"tanh"},{"location":"builtin-F64/#returns_51","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acos","text":"[Source] fun box acos() : F64 val","title":"acos"},{"location":"builtin-F64/#returns_52","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asin","text":"[Source] fun box asin() : F64 val","title":"asin"},{"location":"builtin-F64/#returns_53","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan","text":"[Source] fun box atan() : F64 val","title":"atan"},{"location":"builtin-F64/#returns_54","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atan2","text":"[Source] fun box atan2( y: F64 val) : F64 val","title":"atan2"},{"location":"builtin-F64/#parameters_13","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#acosh","text":"[Source] fun box acosh() : F64 val","title":"acosh"},{"location":"builtin-F64/#returns_56","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#asinh","text":"[Source] fun box asinh() : F64 val","title":"asinh"},{"location":"builtin-F64/#returns_57","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#atanh","text":"[Source] fun box atanh() : F64 val","title":"atanh"},{"location":"builtin-F64/#returns_58","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#copysign","text":"[Source] fun box copysign( sign: F64 val) : F64 val","title":"copysign"},{"location":"builtin-F64/#parameters_14","text":"sign: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_59","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-F64/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-F64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-F64/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-F64/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-F64/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-F64/#returns_64","text":"I128 val","title":"Returns"},{"location":"builtin-F64/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-F64/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-F64/#add_unsafe","text":"[Source] fun box add_unsafe( y: F64 val) : F64 val","title":"add_unsafe"},{"location":"builtin-F64/#parameters_15","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_66","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: F64 val) : F64 val","title":"sub_unsafe"},{"location":"builtin-F64/#parameters_16","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_67","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: F64 val) : F64 val","title":"mul_unsafe"},{"location":"builtin-F64/#parameters_17","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_68","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div_unsafe","text":"[Source] fun box div_unsafe( y: F64 val) : F64 val","title":"div_unsafe"},{"location":"builtin-F64/#parameters_18","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_69","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: F64 val) : (F64 val , F64 val)","title":"divrem_unsafe"},{"location":"builtin-F64/#parameters_19","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_70","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: F64 val) : F64 val","title":"rem_unsafe"},{"location":"builtin-F64/#parameters_20","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_71","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg_unsafe","text":"[Source] fun box neg_unsafe() : F64 val","title":"neg_unsafe"},{"location":"builtin-F64/#returns_72","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq_unsafe","text":"[Source] fun box eq_unsafe( y: F64 val) : Bool val","title":"eq_unsafe"},{"location":"builtin-F64/#parameters_21","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne_unsafe","text":"[Source] fun box ne_unsafe( y: F64 val) : Bool val","title":"ne_unsafe"},{"location":"builtin-F64/#parameters_22","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt_unsafe","text":"[Source] fun box lt_unsafe( y: F64 val) : Bool val","title":"lt_unsafe"},{"location":"builtin-F64/#parameters_23","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le_unsafe","text":"[Source] fun box le_unsafe( y: F64 val) : Bool val","title":"le_unsafe"},{"location":"builtin-F64/#parameters_24","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge_unsafe","text":"[Source] fun box ge_unsafe( y: F64 val) : Bool val","title":"ge_unsafe"},{"location":"builtin-F64/#parameters_25","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt_unsafe","text":"[Source] fun box gt_unsafe( y: F64 val) : Bool val","title":"gt_unsafe"},{"location":"builtin-F64/#parameters_26","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-F64/#returns_79","text":"String iso^","title":"Returns"},{"location":"builtin-F64/#add","text":"[Source] fun box add( y: F64 val) : F64 val","title":"add"},{"location":"builtin-F64/#parameters_27","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_80","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#sub","text":"[Source] fun box sub( y: F64 val) : F64 val","title":"sub"},{"location":"builtin-F64/#parameters_28","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#mul","text":"[Source] fun box mul( y: F64 val) : F64 val","title":"mul"},{"location":"builtin-F64/#parameters_29","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_82","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#div","text":"[Source] fun box div( y: F64 val) : F64 val","title":"div"},{"location":"builtin-F64/#parameters_30","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_83","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#divrem","text":"[Source] fun box divrem( y: F64 val) : (F64 val , F64 val)","title":"divrem"},{"location":"builtin-F64/#parameters_31","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_84","text":"( F64 val , F64 val)","title":"Returns"},{"location":"builtin-F64/#rem","text":"[Source] fun box rem( y: F64 val) : F64 val","title":"rem"},{"location":"builtin-F64/#parameters_32","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_85","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#neg","text":"[Source] fun box neg() : F64 val","title":"neg"},{"location":"builtin-F64/#returns_86","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#eq","text":"[Source] fun box eq( y: F64 val) : Bool val","title":"eq"},{"location":"builtin-F64/#parameters_33","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_87","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ne","text":"[Source] fun box ne( y: F64 val) : Bool val","title":"ne"},{"location":"builtin-F64/#parameters_34","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_88","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#lt","text":"[Source] fun box lt( y: F64 val) : Bool val","title":"lt"},{"location":"builtin-F64/#parameters_35","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_89","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#le","text":"[Source] fun box le( y: F64 val) : Bool val","title":"le"},{"location":"builtin-F64/#parameters_36","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_90","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#ge","text":"[Source] fun box ge( y: F64 val) : Bool val","title":"ge"},{"location":"builtin-F64/#parameters_37","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_91","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#gt","text":"[Source] fun box gt( y: F64 val) : Bool val","title":"gt"},{"location":"builtin-F64/#parameters_38","text":"y: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_92","text":"Bool val","title":"Returns"},{"location":"builtin-F64/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-F64/#returns_93","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-F64/#returns_94","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-F64/#returns_95","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-F64/#returns_96","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-F64/#returns_97","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-F64/#returns_98","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-F64/#returns_99","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-F64/#returns_100","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-F64/#returns_101","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-F64/#returns_102","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-F64/#returns_103","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-F64/#returns_104","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-F64/#returns_105","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_1","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-F64/#returns_106","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-F64/#returns_107","text":"I8 val","title":"Returns"},{"location":"builtin-F64/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-F64/#returns_108","text":"I16 val","title":"Returns"},{"location":"builtin-F64/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-F64/#returns_109","text":"I32 val","title":"Returns"},{"location":"builtin-F64/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-F64/#returns_110","text":"I64 val","title":"Returns"},{"location":"builtin-F64/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-F64/#returns_111","text":"ILong val","title":"Returns"},{"location":"builtin-F64/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-F64/#returns_112","text":"ISize val","title":"Returns"},{"location":"builtin-F64/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-F64/#returns_113","text":"U8 val","title":"Returns"},{"location":"builtin-F64/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-F64/#returns_114","text":"U16 val","title":"Returns"},{"location":"builtin-F64/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-F64/#returns_115","text":"U32 val","title":"Returns"},{"location":"builtin-F64/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-F64/#returns_116","text":"U64 val","title":"Returns"},{"location":"builtin-F64/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-F64/#returns_117","text":"ULong val","title":"Returns"},{"location":"builtin-F64/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-F64/#returns_118","text":"USize val","title":"Returns"},{"location":"builtin-F64/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-F64/#returns_119","text":"F32 val","title":"Returns"},{"location":"builtin-F64/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-F64/#returns_120","text":"F64 val","title":"Returns"},{"location":"builtin-F64/#compare","text":"fun box compare( that: F64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-F64/#parameters_39","text":"that: F64 val","title":"Parameters"},{"location":"builtin-F64/#returns_121","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-F64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-F64/#_value","text":"[Source] fun box _value() : F64 val","title":"_value"},{"location":"builtin-F64/#returns_122","text":"F64 val","title":"Returns"},{"location":"builtin-Float/","text":"Float \u00b6 [Source] type Float is (F32 val | F64 val) Type Alias For \u00b6 ( F32 val | F64 val)","title":"type Float"},{"location":"builtin-Float/#float","text":"[Source] type Float is (F32 val | F64 val)","title":"Float"},{"location":"builtin-Float/#type-alias-for","text":"( F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-FloatingPoint/","text":"FloatingPoint[A: FloatingPoint [A] val] \u00b6 [Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val Implements \u00b6 Real [A] val Constructors \u00b6 min_normalised \u00b6 [Source] new val min_normalised() : FloatingPoint[A] val^ Returns \u00b6 FloatingPoint [A] val^ epsilon \u00b6 [Source] new val epsilon() : FloatingPoint[A] val^ Returns \u00b6 FloatingPoint [A] val^ create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 radix \u00b6 [Source] fun tag radix() : U8 val Returns \u00b6 U8 val precision2 \u00b6 [Source] fun tag precision2() : U8 val Returns \u00b6 U8 val precision10 \u00b6 [Source] fun tag precision10() : U8 val Returns \u00b6 U8 val min_exp2 \u00b6 [Source] fun tag min_exp2() : I16 val Returns \u00b6 I16 val min_exp10 \u00b6 [Source] fun tag min_exp10() : I16 val Returns \u00b6 I16 val max_exp2 \u00b6 [Source] fun tag max_exp2() : I16 val Returns \u00b6 I16 val max_exp10 \u00b6 [Source] fun tag max_exp10() : I16 val Returns \u00b6 I16 val add_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg_unsafe \u00b6 [Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A Returns \u00b6 A eq_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt_unsafe \u00b6 [Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val abs \u00b6 [Source] fun box abs() : A Returns \u00b6 A ceil \u00b6 [Source] fun box ceil() : A Returns \u00b6 A floor \u00b6 [Source] fun box floor() : A Returns \u00b6 A round \u00b6 [Source] fun box round() : A Returns \u00b6 A trunc \u00b6 [Source] fun box trunc() : A Returns \u00b6 A finite \u00b6 [Source] fun box finite() : Bool val Returns \u00b6 Bool val infinite \u00b6 [Source] fun box infinite() : Bool val Returns \u00b6 Bool val nan \u00b6 [Source] fun box nan() : Bool val Returns \u00b6 Bool val ldexp \u00b6 [Source] fun box ldexp( x: A, exponent: I32 val) : A Parameters \u00b6 x: A exponent: I32 val Returns \u00b6 A frexp \u00b6 [Source] fun box frexp() : (A , U32 val) Returns \u00b6 (A , U32 val) log \u00b6 [Source] fun box log() : A Returns \u00b6 A log2 \u00b6 [Source] fun box log2() : A Returns \u00b6 A log10 \u00b6 [Source] fun box log10() : A Returns \u00b6 A logb \u00b6 [Source] fun box logb() : A Returns \u00b6 A pow \u00b6 [Source] fun box pow( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A powi \u00b6 [Source] fun box powi( y: I32 val) : A Parameters \u00b6 y: I32 val Returns \u00b6 A sqrt \u00b6 [Source] fun box sqrt() : A Returns \u00b6 A sqrt_unsafe \u00b6 [Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A Returns \u00b6 A cbrt \u00b6 [Source] fun box cbrt() : A Returns \u00b6 A exp \u00b6 [Source] fun box exp() : A Returns \u00b6 A exp2 \u00b6 [Source] fun box exp2() : A Returns \u00b6 A cos \u00b6 [Source] fun box cos() : A Returns \u00b6 A sin \u00b6 [Source] fun box sin() : A Returns \u00b6 A tan \u00b6 [Source] fun box tan() : A Returns \u00b6 A cosh \u00b6 [Source] fun box cosh() : A Returns \u00b6 A sinh \u00b6 [Source] fun box sinh() : A Returns \u00b6 A tanh \u00b6 [Source] fun box tanh() : A Returns \u00b6 A acos \u00b6 [Source] fun box acos() : A Returns \u00b6 A asin \u00b6 [Source] fun box asin() : A Returns \u00b6 A atan \u00b6 [Source] fun box atan() : A Returns \u00b6 A atan2 \u00b6 [Source] fun box atan2( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A acosh \u00b6 [Source] fun box acosh() : A Returns \u00b6 A asinh \u00b6 [Source] fun box asinh() : A Returns \u00b6 A atanh \u00b6 [Source] fun box atanh() : A Returns \u00b6 A copysign \u00b6 [Source] fun box copysign( sign: A) : A Parameters \u00b6 sign: A Returns \u00b6 A string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait FloatingPoint"},{"location":"builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a93-val93","text":"[Source] trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] val","title":"FloatingPoint[A: FloatingPoint[A] val]"},{"location":"builtin-FloatingPoint/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-FloatingPoint/#constructors","text":"","title":"Constructors"},{"location":"builtin-FloatingPoint/#min_normalised","text":"[Source] new val min_normalised() : FloatingPoint[A] val^","title":"min_normalised"},{"location":"builtin-FloatingPoint/#returns","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#epsilon","text":"[Source] new val epsilon() : FloatingPoint[A] val^","title":"epsilon"},{"location":"builtin-FloatingPoint/#returns_1","text":"FloatingPoint [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-FloatingPoint/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-FloatingPoint/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-FloatingPoint/#returns_4","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-FloatingPoint/#returns_5","text":"Real [A] val^","title":"Returns"},{"location":"builtin-FloatingPoint/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-FloatingPoint/#radix","text":"[Source] fun tag radix() : U8 val","title":"radix"},{"location":"builtin-FloatingPoint/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision2","text":"[Source] fun tag precision2() : U8 val","title":"precision2"},{"location":"builtin-FloatingPoint/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#precision10","text":"[Source] fun tag precision10() : U8 val","title":"precision10"},{"location":"builtin-FloatingPoint/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp2","text":"[Source] fun tag min_exp2() : I16 val","title":"min_exp2"},{"location":"builtin-FloatingPoint/#returns_9","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#min_exp10","text":"[Source] fun tag min_exp10() : I16 val","title":"min_exp10"},{"location":"builtin-FloatingPoint/#returns_10","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp2","text":"[Source] fun tag max_exp2() : I16 val","title":"max_exp2"},{"location":"builtin-FloatingPoint/#returns_11","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#max_exp10","text":"[Source] fun tag max_exp10() : I16 val","title":"max_exp10"},{"location":"builtin-FloatingPoint/#returns_12","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#add_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-FloatingPoint/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_13","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-FloatingPoint/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_14","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-FloatingPoint/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_15","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-FloatingPoint/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_16","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#fld_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-FloatingPoint/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_17","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_18","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-FloatingPoint/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_19","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mod_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-FloatingPoint/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_20","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg_unsafe","text":"[Source] Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-FloatingPoint/#returns_21","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box eq_unsafe( y: box->A) : Bool val","title":"eq_unsafe"},{"location":"builtin-FloatingPoint/#parameters_10","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_22","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ne_unsafe( y: box->A) : Bool val","title":"ne_unsafe"},{"location":"builtin-FloatingPoint/#parameters_11","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_23","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box lt_unsafe( y: box->A) : Bool val","title":"lt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_12","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box le_unsafe( y: box->A) : Bool val","title":"le_unsafe"},{"location":"builtin-FloatingPoint/#parameters_13","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_25","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box ge_unsafe( y: box->A) : Bool val","title":"ge_unsafe"},{"location":"builtin-FloatingPoint/#parameters_14","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_26","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt_unsafe","text":"[Source] Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. fun box gt_unsafe( y: box->A) : Bool val","title":"gt_unsafe"},{"location":"builtin-FloatingPoint/#parameters_15","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_27","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-FloatingPoint/#returns_28","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#ceil","text":"[Source] fun box ceil() : A","title":"ceil"},{"location":"builtin-FloatingPoint/#returns_29","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#floor","text":"[Source] fun box floor() : A","title":"floor"},{"location":"builtin-FloatingPoint/#returns_30","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#round","text":"[Source] fun box round() : A","title":"round"},{"location":"builtin-FloatingPoint/#returns_31","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#trunc","text":"[Source] fun box trunc() : A","title":"trunc"},{"location":"builtin-FloatingPoint/#returns_32","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#finite","text":"[Source] fun box finite() : Bool val","title":"finite"},{"location":"builtin-FloatingPoint/#returns_33","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#infinite","text":"[Source] fun box infinite() : Bool val","title":"infinite"},{"location":"builtin-FloatingPoint/#returns_34","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#nan","text":"[Source] fun box nan() : Bool val","title":"nan"},{"location":"builtin-FloatingPoint/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ldexp","text":"[Source] fun box ldexp( x: A, exponent: I32 val) : A","title":"ldexp"},{"location":"builtin-FloatingPoint/#parameters_16","text":"x: A exponent: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_36","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#frexp","text":"[Source] fun box frexp() : (A , U32 val)","title":"frexp"},{"location":"builtin-FloatingPoint/#returns_37","text":"(A , U32 val)","title":"Returns"},{"location":"builtin-FloatingPoint/#log","text":"[Source] fun box log() : A","title":"log"},{"location":"builtin-FloatingPoint/#returns_38","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log2","text":"[Source] fun box log2() : A","title":"log2"},{"location":"builtin-FloatingPoint/#returns_39","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#log10","text":"[Source] fun box log10() : A","title":"log10"},{"location":"builtin-FloatingPoint/#returns_40","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#logb","text":"[Source] fun box logb() : A","title":"logb"},{"location":"builtin-FloatingPoint/#returns_41","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#pow","text":"[Source] fun box pow( y: A) : A","title":"pow"},{"location":"builtin-FloatingPoint/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_42","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#powi","text":"[Source] fun box powi( y: I32 val) : A","title":"powi"},{"location":"builtin-FloatingPoint/#parameters_18","text":"y: I32 val","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_43","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt","text":"[Source] fun box sqrt() : A","title":"sqrt"},{"location":"builtin-FloatingPoint/#returns_44","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sqrt_unsafe","text":"[Source] Unsafe operation. If this is negative, the result is undefined. fun box sqrt_unsafe() : A","title":"sqrt_unsafe"},{"location":"builtin-FloatingPoint/#returns_45","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cbrt","text":"[Source] fun box cbrt() : A","title":"cbrt"},{"location":"builtin-FloatingPoint/#returns_46","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp","text":"[Source] fun box exp() : A","title":"exp"},{"location":"builtin-FloatingPoint/#returns_47","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#exp2","text":"[Source] fun box exp2() : A","title":"exp2"},{"location":"builtin-FloatingPoint/#returns_48","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cos","text":"[Source] fun box cos() : A","title":"cos"},{"location":"builtin-FloatingPoint/#returns_49","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sin","text":"[Source] fun box sin() : A","title":"sin"},{"location":"builtin-FloatingPoint/#returns_50","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tan","text":"[Source] fun box tan() : A","title":"tan"},{"location":"builtin-FloatingPoint/#returns_51","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#cosh","text":"[Source] fun box cosh() : A","title":"cosh"},{"location":"builtin-FloatingPoint/#returns_52","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sinh","text":"[Source] fun box sinh() : A","title":"sinh"},{"location":"builtin-FloatingPoint/#returns_53","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#tanh","text":"[Source] fun box tanh() : A","title":"tanh"},{"location":"builtin-FloatingPoint/#returns_54","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acos","text":"[Source] fun box acos() : A","title":"acos"},{"location":"builtin-FloatingPoint/#returns_55","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asin","text":"[Source] fun box asin() : A","title":"asin"},{"location":"builtin-FloatingPoint/#returns_56","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan","text":"[Source] fun box atan() : A","title":"atan"},{"location":"builtin-FloatingPoint/#returns_57","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atan2","text":"[Source] fun box atan2( y: A) : A","title":"atan2"},{"location":"builtin-FloatingPoint/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_58","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#acosh","text":"[Source] fun box acosh() : A","title":"acosh"},{"location":"builtin-FloatingPoint/#returns_59","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#asinh","text":"[Source] fun box asinh() : A","title":"asinh"},{"location":"builtin-FloatingPoint/#returns_60","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#atanh","text":"[Source] fun box atanh() : A","title":"atanh"},{"location":"builtin-FloatingPoint/#returns_61","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#copysign","text":"[Source] fun box copysign( sign: A) : A","title":"copysign"},{"location":"builtin-FloatingPoint/#parameters_20","text":"sign: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_62","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-FloatingPoint/#returns_63","text":"String iso^","title":"Returns"},{"location":"builtin-FloatingPoint/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-FloatingPoint/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_64","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-FloatingPoint/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_65","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-FloatingPoint/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_66","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-FloatingPoint/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_67","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-FloatingPoint/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_68","text":"(A , A)","title":"Returns"},{"location":"builtin-FloatingPoint/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-FloatingPoint/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_69","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-FloatingPoint/#returns_70","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-FloatingPoint/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_71","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-FloatingPoint/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_72","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-FloatingPoint/#parameters_29","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_73","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-FloatingPoint/#parameters_30","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_74","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-FloatingPoint/#parameters_31","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_75","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-FloatingPoint/#parameters_32","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_76","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-FloatingPoint/#parameters_33","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_77","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-FloatingPoint/#parameters_34","text":"y: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_78","text":"Bool val","title":"Returns"},{"location":"builtin-FloatingPoint/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-FloatingPoint/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_79","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-FloatingPoint/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_80","text":"A","title":"Returns"},{"location":"builtin-FloatingPoint/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-FloatingPoint/#returns_81","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-FloatingPoint/#returns_82","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-FloatingPoint/#returns_83","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-FloatingPoint/#returns_84","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-FloatingPoint/#returns_85","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-FloatingPoint/#returns_86","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-FloatingPoint/#returns_87","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-FloatingPoint/#returns_88","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-FloatingPoint/#returns_89","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-FloatingPoint/#returns_90","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-FloatingPoint/#returns_91","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-FloatingPoint/#returns_92","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-FloatingPoint/#returns_93","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-FloatingPoint/#returns_94","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-FloatingPoint/#returns_95","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-FloatingPoint/#returns_96","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-FloatingPoint/#returns_97","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-FloatingPoint/#returns_98","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-FloatingPoint/#returns_99","text":"I8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-FloatingPoint/#returns_100","text":"I16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-FloatingPoint/#returns_101","text":"I32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-FloatingPoint/#returns_102","text":"I64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-FloatingPoint/#returns_103","text":"I128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-FloatingPoint/#returns_104","text":"ILong val","title":"Returns"},{"location":"builtin-FloatingPoint/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-FloatingPoint/#returns_105","text":"ISize val","title":"Returns"},{"location":"builtin-FloatingPoint/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-FloatingPoint/#returns_106","text":"U8 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-FloatingPoint/#returns_107","text":"U16 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-FloatingPoint/#returns_108","text":"U32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-FloatingPoint/#returns_109","text":"U64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-FloatingPoint/#returns_110","text":"U128 val","title":"Returns"},{"location":"builtin-FloatingPoint/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-FloatingPoint/#returns_111","text":"ULong val","title":"Returns"},{"location":"builtin-FloatingPoint/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-FloatingPoint/#returns_112","text":"USize val","title":"Returns"},{"location":"builtin-FloatingPoint/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-FloatingPoint/#returns_113","text":"F32 val","title":"Returns"},{"location":"builtin-FloatingPoint/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-FloatingPoint/#returns_114","text":"F64 val","title":"Returns"},{"location":"builtin-FloatingPoint/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-FloatingPoint/#parameters_37","text":"that: box->A","title":"Parameters"},{"location":"builtin-FloatingPoint/#returns_115","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-FloatingPoint/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-FloatingPoint/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-FloatingPoint/#returns_116","text":"A","title":"Returns"},{"location":"builtin-Greater/","text":"Greater \u00b6 [Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Greater val^ Returns \u00b6 Greater val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Greater"},{"location":"builtin-Greater/#greater","text":"[Source] primitive val Greater is Equatable[(Less val | Equal val | Greater val)] ref","title":"Greater"},{"location":"builtin-Greater/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Greater/#constructors","text":"","title":"Constructors"},{"location":"builtin-Greater/#create","text":"[Source] new val create() : Greater val^","title":"create"},{"location":"builtin-Greater/#returns","text":"Greater val^","title":"Returns"},{"location":"builtin-Greater/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Greater/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Greater/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Greater/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Greater/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Greater/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Greater/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Greater/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-HasEq/","text":"HasEq[A: A] \u00b6 [Source] interface ref HasEq[A: A] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: box->A) : Bool val Parameters \u00b6 that: box->A Returns \u00b6 Bool val","title":"interface HasEq"},{"location":"builtin-HasEq/#haseq91a-a93","text":"[Source] interface ref HasEq[A: A]","title":"HasEq[A: A]"},{"location":"builtin-HasEq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-HasEq/#eq","text":"[Source] fun box eq( that: box->A) : Bool val","title":"eq"},{"location":"builtin-HasEq/#parameters","text":"that: box->A","title":"Parameters"},{"location":"builtin-HasEq/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-I128/","text":"I128 \u00b6 [Source] primitive val I128 is SignedInteger[I128 val, U128 val] val Implements \u00b6 SignedInteger [ I128 val, U128 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I128 val) : I128 val^ Parameters \u00b6 value: I128 val Returns \u00b6 I128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I128 val^ Parameters \u00b6 a: A Returns \u00b6 I128 val^ min_value \u00b6 [Source] new val min_value() : I128 val^ Returns \u00b6 I128 val^ max_value \u00b6 [Source] new val max_value() : I128 val^ Returns \u00b6 I128 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U128 val Returns \u00b6 U128 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I128 val Returns \u00b6 I128 val bswap \u00b6 [Source] fun box bswap() : I128 val Returns \u00b6 I128 val popcount \u00b6 [Source] fun box popcount() : U128 val Returns \u00b6 U128 val clz \u00b6 [Source] fun box clz() : U128 val Returns \u00b6 U128 val ctz \u00b6 [Source] fun box ctz() : U128 val Returns \u00b6 U128 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns \u00b6 U128 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns \u00b6 U128 val bitwidth \u00b6 [Source] fun box bitwidth() : U128 val Returns \u00b6 U128 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val max \u00b6 [Source] fun box max( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val fld \u00b6 [Source] fun box fld( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mod \u00b6 [Source] fun box mod( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ mul \u00b6 [Source] fun box mul( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val divrem \u00b6 [Source] fun box divrem( y: I128 val) : (I128 val , I128 val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) div \u00b6 [Source] fun box div( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val rem \u00b6 [Source] fun box rem( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val divrem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) div_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val rem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val addc \u00b6 [Source] fun box addc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) subc \u00b6 [Source] fun box subc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) divc \u00b6 [Source] fun box divc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) remc \u00b6 [Source] fun box remc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) modc \u00b6 [Source] fun box modc( y: I128 val) : (I128 val , Bool val) Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? div_partial \u00b6 [Source] fun box div_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ? Parameters \u00b6 y: I128 val Returns \u00b6 ( I128 val , I128 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I128 val) : I128 val ? Parameters \u00b6 y: I128 val Returns \u00b6 I128 val ? shl \u00b6 fun box shl( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shr \u00b6 fun box shr( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shl_unsafe \u00b6 fun box shl_unsafe( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val shr_unsafe \u00b6 fun box shr_unsafe( y: U128 val) : I128 val Parameters \u00b6 y: U128 val Returns \u00b6 I128 val add_unsafe \u00b6 fun box add_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val sub_unsafe \u00b6 fun box sub_unsafe( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val neg_unsafe \u00b6 fun box neg_unsafe() : I128 val Returns \u00b6 I128 val op_and \u00b6 fun box op_and( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_or \u00b6 fun box op_or( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_xor \u00b6 fun box op_xor( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val op_not \u00b6 fun box op_not() : I128 val Returns \u00b6 I128 val add \u00b6 fun box add( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val sub \u00b6 fun box sub( y: I128 val) : I128 val Parameters \u00b6 y: I128 val Returns \u00b6 I128 val neg \u00b6 fun box neg() : I128 val Returns \u00b6 I128 val eq \u00b6 fun box eq( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I128 val) : Bool val Parameters \u00b6 y: I128 val Returns \u00b6 Bool val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val compare \u00b6 fun box compare( that: I128 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I128 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I128 val Returns \u00b6 I128 val","title":"primitive I128"},{"location":"builtin-I128/#i128","text":"[Source] primitive val I128 is SignedInteger[I128 val, U128 val] val","title":"I128"},{"location":"builtin-I128/#implements","text":"SignedInteger [ I128 val, U128 val] val","title":"Implements"},{"location":"builtin-I128/#constructors","text":"","title":"Constructors"},{"location":"builtin-I128/#create","text":"[Source] new val create( value: I128 val) : I128 val^","title":"create"},{"location":"builtin-I128/#parameters","text":"value: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I128/#returns_1","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#min_value","text":"[Source] new val min_value() : I128 val^","title":"min_value"},{"location":"builtin-I128/#returns_2","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#max_value","text":"[Source] new val max_value() : I128 val^","title":"max_value"},{"location":"builtin-I128/#returns_3","text":"I128 val^","title":"Returns"},{"location":"builtin-I128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-I128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bit_reverse","text":"[Source] fun box bit_reverse() : I128 val","title":"bit_reverse"},{"location":"builtin-I128/#returns_5","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#bswap","text":"[Source] fun box bswap() : I128 val","title":"bswap"},{"location":"builtin-I128/#returns_6","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-I128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-I128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-I128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-I128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-I128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-I128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I128/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I128/#min","text":"[Source] fun box min( y: I128 val) : I128 val","title":"min"},{"location":"builtin-I128/#parameters_2","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_14","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#max","text":"[Source] fun box max( y: I128 val) : I128 val","title":"max"},{"location":"builtin-I128/#parameters_3","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_15","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#fld","text":"[Source] fun box fld( y: I128 val) : I128 val","title":"fld"},{"location":"builtin-I128/#parameters_4","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_16","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I128 val) : I128 val","title":"fld_unsafe"},{"location":"builtin-I128/#parameters_5","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_17","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mod","text":"[Source] fun box mod( y: I128 val) : I128 val","title":"mod"},{"location":"builtin-I128/#parameters_6","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_18","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I128 val) : I128 val","title":"mod_unsafe"},{"location":"builtin-I128/#parameters_7","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_19","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I128/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-I128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I128/#returns_21","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-I128/#returns_22","text":"String iso^","title":"Returns"},{"location":"builtin-I128/#mul","text":"[Source] fun box mul( y: I128 val) : I128 val","title":"mul"},{"location":"builtin-I128/#parameters_8","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_23","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem","text":"[Source] fun box divrem( y: I128 val) : (I128 val , I128 val)","title":"divrem"},{"location":"builtin-I128/#parameters_9","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_24","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div","text":"[Source] fun box div( y: I128 val) : I128 val","title":"div"},{"location":"builtin-I128/#parameters_10","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_25","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem","text":"[Source] fun box rem( y: I128 val) : I128 val","title":"rem"},{"location":"builtin-I128/#parameters_11","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_26","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: I128 val) : I128 val","title":"mul_unsafe"},{"location":"builtin-I128/#parameters_12","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_27","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: I128 val) : (I128 val , I128 val)","title":"divrem_unsafe"},{"location":"builtin-I128/#parameters_13","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_28","text":"( I128 val , I128 val)","title":"Returns"},{"location":"builtin-I128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: I128 val) : I128 val","title":"div_unsafe"},{"location":"builtin-I128/#parameters_14","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_29","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: I128 val) : I128 val","title":"rem_unsafe"},{"location":"builtin-I128/#parameters_15","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_30","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-I128/#returns_31","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-I128/#returns_32","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I128/#returns_33","text":"F32 val","title":"Returns"},{"location":"builtin-I128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I128/#returns_34","text":"F64 val","title":"Returns"},{"location":"builtin-I128/#addc","text":"[Source] fun box addc( y: I128 val) : (I128 val , Bool val)","title":"addc"},{"location":"builtin-I128/#parameters_16","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_35","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#subc","text":"[Source] fun box subc( y: I128 val) : (I128 val , Bool val)","title":"subc"},{"location":"builtin-I128/#parameters_17","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_36","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#mulc","text":"[Source] fun box mulc( y: I128 val) : (I128 val , Bool val)","title":"mulc"},{"location":"builtin-I128/#parameters_18","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_37","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#divc","text":"[Source] fun box divc( y: I128 val) : (I128 val , Bool val)","title":"divc"},{"location":"builtin-I128/#parameters_19","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_38","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#remc","text":"[Source] fun box remc( y: I128 val) : (I128 val , Bool val)","title":"remc"},{"location":"builtin-I128/#parameters_20","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_39","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#fldc","text":"[Source] fun box fldc( y: I128 val) : (I128 val , Bool val)","title":"fldc"},{"location":"builtin-I128/#parameters_21","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_40","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#modc","text":"[Source] fun box modc( y: I128 val) : (I128 val , Bool val)","title":"modc"},{"location":"builtin-I128/#parameters_22","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_41","text":"( I128 val , Bool val)","title":"Returns"},{"location":"builtin-I128/#add_partial","text":"[Source] fun box add_partial( y: I128 val) : I128 val ?","title":"add_partial"},{"location":"builtin-I128/#parameters_23","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_42","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#sub_partial","text":"[Source] fun box sub_partial( y: I128 val) : I128 val ?","title":"sub_partial"},{"location":"builtin-I128/#parameters_24","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_43","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mul_partial","text":"[Source] fun box mul_partial( y: I128 val) : I128 val ?","title":"mul_partial"},{"location":"builtin-I128/#parameters_25","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_44","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#div_partial","text":"[Source] fun box div_partial( y: I128 val) : I128 val ?","title":"div_partial"},{"location":"builtin-I128/#parameters_26","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_45","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#rem_partial","text":"[Source] fun box rem_partial( y: I128 val) : I128 val ?","title":"rem_partial"},{"location":"builtin-I128/#parameters_27","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_46","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#divrem_partial","text":"[Source] fun box divrem_partial( y: I128 val) : (I128 val , I128 val) ?","title":"divrem_partial"},{"location":"builtin-I128/#parameters_28","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_47","text":"( I128 val , I128 val) ?","title":"Returns"},{"location":"builtin-I128/#fld_partial","text":"[Source] fun box fld_partial( y: I128 val) : I128 val ?","title":"fld_partial"},{"location":"builtin-I128/#parameters_29","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_48","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#mod_partial","text":"[Source] fun box mod_partial( y: I128 val) : I128 val ?","title":"mod_partial"},{"location":"builtin-I128/#parameters_30","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_49","text":"I128 val ?","title":"Returns"},{"location":"builtin-I128/#shl","text":"fun box shl( y: U128 val) : I128 val","title":"shl"},{"location":"builtin-I128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_50","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr","text":"fun box shr( y: U128 val) : I128 val","title":"shr"},{"location":"builtin-I128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_51","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : I128 val","title":"shl_unsafe"},{"location":"builtin-I128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_52","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : I128 val","title":"shr_unsafe"},{"location":"builtin-I128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-I128/#returns_53","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add_unsafe","text":"fun box add_unsafe( y: I128 val) : I128 val","title":"add_unsafe"},{"location":"builtin-I128/#parameters_35","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_54","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub_unsafe","text":"fun box sub_unsafe( y: I128 val) : I128 val","title":"sub_unsafe"},{"location":"builtin-I128/#parameters_36","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_55","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg_unsafe","text":"fun box neg_unsafe() : I128 val","title":"neg_unsafe"},{"location":"builtin-I128/#returns_56","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_and","text":"fun box op_and( y: I128 val) : I128 val","title":"op_and"},{"location":"builtin-I128/#parameters_37","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_57","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_or","text":"fun box op_or( y: I128 val) : I128 val","title":"op_or"},{"location":"builtin-I128/#parameters_38","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_xor","text":"fun box op_xor( y: I128 val) : I128 val","title":"op_xor"},{"location":"builtin-I128/#parameters_39","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_59","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#op_not","text":"fun box op_not() : I128 val","title":"op_not"},{"location":"builtin-I128/#returns_60","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#add","text":"fun box add( y: I128 val) : I128 val","title":"add"},{"location":"builtin-I128/#parameters_40","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_61","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#sub","text":"fun box sub( y: I128 val) : I128 val","title":"sub"},{"location":"builtin-I128/#parameters_41","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_62","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#neg","text":"fun box neg() : I128 val","title":"neg"},{"location":"builtin-I128/#returns_63","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#eq","text":"fun box eq( y: I128 val) : Bool val","title":"eq"},{"location":"builtin-I128/#parameters_42","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ne","text":"fun box ne( y: I128 val) : Bool val","title":"ne"},{"location":"builtin-I128/#parameters_43","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#lt","text":"fun box lt( y: I128 val) : Bool val","title":"lt"},{"location":"builtin-I128/#parameters_44","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#le","text":"fun box le( y: I128 val) : Bool val","title":"le"},{"location":"builtin-I128/#parameters_45","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#ge","text":"fun box ge( y: I128 val) : Bool val","title":"ge"},{"location":"builtin-I128/#parameters_46","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#gt","text":"fun box gt( y: I128 val) : Bool val","title":"gt"},{"location":"builtin-I128/#parameters_47","text":"y: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-I128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I128/#returns_70","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I128/#returns_71","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I128/#returns_72","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I128/#returns_73","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_1","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I128/#returns_74","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I128/#returns_75","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I128/#returns_76","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I128/#returns_77","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I128/#returns_78","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I128/#returns_79","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I128/#returns_80","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I128/#returns_81","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I128/#returns_82","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I128/#returns_83","text":"USize val","title":"Returns"},{"location":"builtin-I128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I128/#returns_84","text":"I8 val","title":"Returns"},{"location":"builtin-I128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I128/#returns_85","text":"I16 val","title":"Returns"},{"location":"builtin-I128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I128/#returns_86","text":"I32 val","title":"Returns"},{"location":"builtin-I128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I128/#returns_87","text":"I64 val","title":"Returns"},{"location":"builtin-I128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I128/#returns_88","text":"I128 val","title":"Returns"},{"location":"builtin-I128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I128/#returns_89","text":"ILong val","title":"Returns"},{"location":"builtin-I128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I128/#returns_90","text":"ISize val","title":"Returns"},{"location":"builtin-I128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I128/#returns_91","text":"U8 val","title":"Returns"},{"location":"builtin-I128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I128/#returns_92","text":"U16 val","title":"Returns"},{"location":"builtin-I128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I128/#returns_93","text":"U32 val","title":"Returns"},{"location":"builtin-I128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I128/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-I128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I128/#returns_95","text":"U128 val","title":"Returns"},{"location":"builtin-I128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I128/#returns_96","text":"ULong val","title":"Returns"},{"location":"builtin-I128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I128/#returns_97","text":"USize val","title":"Returns"},{"location":"builtin-I128/#compare","text":"fun box compare( that: I128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I128/#parameters_48","text":"that: I128 val","title":"Parameters"},{"location":"builtin-I128/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I128/#_value","text":"fun box _value() : I128 val","title":"_value"},{"location":"builtin-I128/#returns_99","text":"I128 val","title":"Returns"},{"location":"builtin-I16/","text":"I16 \u00b6 [Source] primitive val I16 is SignedInteger[I16 val, U16 val] val Implements \u00b6 SignedInteger [ I16 val, U16 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I16 val) : I16 val^ Parameters \u00b6 value: I16 val Returns \u00b6 I16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I16 val^ Parameters \u00b6 a: A Returns \u00b6 I16 val^ min_value \u00b6 [Source] new val min_value() : I16 val^ Returns \u00b6 I16 val^ max_value \u00b6 [Source] new val max_value() : I16 val^ Returns \u00b6 I16 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U16 val Returns \u00b6 U16 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I16 val Returns \u00b6 I16 val bswap \u00b6 [Source] fun box bswap() : I16 val Returns \u00b6 I16 val popcount \u00b6 [Source] fun box popcount() : U16 val Returns \u00b6 U16 val clz \u00b6 [Source] fun box clz() : U16 val Returns \u00b6 U16 val ctz \u00b6 [Source] fun box ctz() : U16 val Returns \u00b6 U16 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns \u00b6 U16 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns \u00b6 U16 val bitwidth \u00b6 [Source] fun box bitwidth() : U16 val Returns \u00b6 U16 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val max \u00b6 [Source] fun box max( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val fld \u00b6 [Source] fun box fld( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mod \u00b6 [Source] fun box mod( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val addc \u00b6 [Source] fun box addc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) subc \u00b6 [Source] fun box subc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) divc \u00b6 [Source] fun box divc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) remc \u00b6 [Source] fun box remc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) modc \u00b6 [Source] fun box modc( y: I16 val) : (I16 val , Bool val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? div_partial \u00b6 [Source] fun box div_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ? Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I16 val) : I16 val ? Parameters \u00b6 y: I16 val Returns \u00b6 I16 val ? shl \u00b6 fun box shl( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shr \u00b6 fun box shr( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shl_unsafe \u00b6 fun box shl_unsafe( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val shr_unsafe \u00b6 fun box shr_unsafe( y: U16 val) : I16 val Parameters \u00b6 y: U16 val Returns \u00b6 I16 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val sub_unsafe \u00b6 fun box sub_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mul_unsafe \u00b6 fun box mul_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val div_unsafe \u00b6 fun box div_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val neg_unsafe \u00b6 fun box neg_unsafe() : I16 val Returns \u00b6 I16 val op_and \u00b6 fun box op_and( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_or \u00b6 fun box op_or( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_xor \u00b6 fun box op_xor( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val op_not \u00b6 fun box op_not() : I16 val Returns \u00b6 I16 val add \u00b6 fun box add( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val sub \u00b6 fun box sub( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val mul \u00b6 fun box mul( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val div \u00b6 fun box div( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val divrem \u00b6 fun box divrem( y: I16 val) : (I16 val , I16 val) Parameters \u00b6 y: I16 val Returns \u00b6 ( I16 val , I16 val) rem \u00b6 fun box rem( y: I16 val) : I16 val Parameters \u00b6 y: I16 val Returns \u00b6 I16 val neg \u00b6 fun box neg() : I16 val Returns \u00b6 I16 val eq \u00b6 fun box eq( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I16 val) : Bool val Parameters \u00b6 y: I16 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I16 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I16 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I16 val Returns \u00b6 I16 val","title":"primitive I16"},{"location":"builtin-I16/#i16","text":"[Source] primitive val I16 is SignedInteger[I16 val, U16 val] val","title":"I16"},{"location":"builtin-I16/#implements","text":"SignedInteger [ I16 val, U16 val] val","title":"Implements"},{"location":"builtin-I16/#constructors","text":"","title":"Constructors"},{"location":"builtin-I16/#create","text":"[Source] new val create( value: I16 val) : I16 val^","title":"create"},{"location":"builtin-I16/#parameters","text":"value: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I16/#returns_1","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#min_value","text":"[Source] new val min_value() : I16 val^","title":"min_value"},{"location":"builtin-I16/#returns_2","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#max_value","text":"[Source] new val max_value() : I16 val^","title":"max_value"},{"location":"builtin-I16/#returns_3","text":"I16 val^","title":"Returns"},{"location":"builtin-I16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-I16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bit_reverse","text":"[Source] fun box bit_reverse() : I16 val","title":"bit_reverse"},{"location":"builtin-I16/#returns_5","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#bswap","text":"[Source] fun box bswap() : I16 val","title":"bswap"},{"location":"builtin-I16/#returns_6","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-I16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-I16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-I16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-I16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-I16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-I16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I16/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I16/#min","text":"[Source] fun box min( y: I16 val) : I16 val","title":"min"},{"location":"builtin-I16/#parameters_2","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_14","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#max","text":"[Source] fun box max( y: I16 val) : I16 val","title":"max"},{"location":"builtin-I16/#parameters_3","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_15","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#fld","text":"[Source] fun box fld( y: I16 val) : I16 val","title":"fld"},{"location":"builtin-I16/#parameters_4","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_16","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I16 val) : I16 val","title":"fld_unsafe"},{"location":"builtin-I16/#parameters_5","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mod","text":"[Source] fun box mod( y: I16 val) : I16 val","title":"mod"},{"location":"builtin-I16/#parameters_6","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_18","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I16 val) : I16 val","title":"mod_unsafe"},{"location":"builtin-I16/#parameters_7","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_19","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#addc","text":"[Source] fun box addc( y: I16 val) : (I16 val , Bool val)","title":"addc"},{"location":"builtin-I16/#parameters_8","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_20","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#subc","text":"[Source] fun box subc( y: I16 val) : (I16 val , Bool val)","title":"subc"},{"location":"builtin-I16/#parameters_9","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_21","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#mulc","text":"[Source] fun box mulc( y: I16 val) : (I16 val , Bool val)","title":"mulc"},{"location":"builtin-I16/#parameters_10","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_22","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#divc","text":"[Source] fun box divc( y: I16 val) : (I16 val , Bool val)","title":"divc"},{"location":"builtin-I16/#parameters_11","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_23","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#remc","text":"[Source] fun box remc( y: I16 val) : (I16 val , Bool val)","title":"remc"},{"location":"builtin-I16/#parameters_12","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_24","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#fldc","text":"[Source] fun box fldc( y: I16 val) : (I16 val , Bool val)","title":"fldc"},{"location":"builtin-I16/#parameters_13","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_25","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#modc","text":"[Source] fun box modc( y: I16 val) : (I16 val , Bool val)","title":"modc"},{"location":"builtin-I16/#parameters_14","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_26","text":"( I16 val , Bool val)","title":"Returns"},{"location":"builtin-I16/#add_partial","text":"[Source] fun box add_partial( y: I16 val) : I16 val ?","title":"add_partial"},{"location":"builtin-I16/#parameters_15","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_27","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#sub_partial","text":"[Source] fun box sub_partial( y: I16 val) : I16 val ?","title":"sub_partial"},{"location":"builtin-I16/#parameters_16","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_28","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mul_partial","text":"[Source] fun box mul_partial( y: I16 val) : I16 val ?","title":"mul_partial"},{"location":"builtin-I16/#parameters_17","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_29","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#div_partial","text":"[Source] fun box div_partial( y: I16 val) : I16 val ?","title":"div_partial"},{"location":"builtin-I16/#parameters_18","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_30","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#rem_partial","text":"[Source] fun box rem_partial( y: I16 val) : I16 val ?","title":"rem_partial"},{"location":"builtin-I16/#parameters_19","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_31","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#divrem_partial","text":"[Source] fun box divrem_partial( y: I16 val) : (I16 val , I16 val) ?","title":"divrem_partial"},{"location":"builtin-I16/#parameters_20","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_32","text":"( I16 val , I16 val) ?","title":"Returns"},{"location":"builtin-I16/#fld_partial","text":"[Source] fun box fld_partial( y: I16 val) : I16 val ?","title":"fld_partial"},{"location":"builtin-I16/#parameters_21","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_33","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#mod_partial","text":"[Source] fun box mod_partial( y: I16 val) : I16 val ?","title":"mod_partial"},{"location":"builtin-I16/#parameters_22","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_34","text":"I16 val ?","title":"Returns"},{"location":"builtin-I16/#shl","text":"fun box shl( y: U16 val) : I16 val","title":"shl"},{"location":"builtin-I16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_35","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr","text":"fun box shr( y: U16 val) : I16 val","title":"shr"},{"location":"builtin-I16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_36","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : I16 val","title":"shl_unsafe"},{"location":"builtin-I16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_37","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : I16 val","title":"shr_unsafe"},{"location":"builtin-I16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-I16/#returns_38","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I16/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I16/#add_unsafe","text":"fun box add_unsafe( y: I16 val) : I16 val","title":"add_unsafe"},{"location":"builtin-I16/#parameters_27","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_40","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub_unsafe","text":"fun box sub_unsafe( y: I16 val) : I16 val","title":"sub_unsafe"},{"location":"builtin-I16/#parameters_28","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul_unsafe","text":"fun box mul_unsafe( y: I16 val) : I16 val","title":"mul_unsafe"},{"location":"builtin-I16/#parameters_29","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_42","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div_unsafe","text":"fun box div_unsafe( y: I16 val) : I16 val","title":"div_unsafe"},{"location":"builtin-I16/#parameters_30","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_43","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem_unsafe","text":"fun box divrem_unsafe( y: I16 val) : (I16 val , I16 val)","title":"divrem_unsafe"},{"location":"builtin-I16/#parameters_31","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_44","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem_unsafe","text":"fun box rem_unsafe( y: I16 val) : I16 val","title":"rem_unsafe"},{"location":"builtin-I16/#parameters_32","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_45","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg_unsafe","text":"fun box neg_unsafe() : I16 val","title":"neg_unsafe"},{"location":"builtin-I16/#returns_46","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_and","text":"fun box op_and( y: I16 val) : I16 val","title":"op_and"},{"location":"builtin-I16/#parameters_33","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_47","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_or","text":"fun box op_or( y: I16 val) : I16 val","title":"op_or"},{"location":"builtin-I16/#parameters_34","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_48","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_xor","text":"fun box op_xor( y: I16 val) : I16 val","title":"op_xor"},{"location":"builtin-I16/#parameters_35","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_49","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#op_not","text":"fun box op_not() : I16 val","title":"op_not"},{"location":"builtin-I16/#returns_50","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#add","text":"fun box add( y: I16 val) : I16 val","title":"add"},{"location":"builtin-I16/#parameters_36","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_51","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#sub","text":"fun box sub( y: I16 val) : I16 val","title":"sub"},{"location":"builtin-I16/#parameters_37","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_52","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#mul","text":"fun box mul( y: I16 val) : I16 val","title":"mul"},{"location":"builtin-I16/#parameters_38","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_53","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#div","text":"fun box div( y: I16 val) : I16 val","title":"div"},{"location":"builtin-I16/#parameters_39","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_54","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#divrem","text":"fun box divrem( y: I16 val) : (I16 val , I16 val)","title":"divrem"},{"location":"builtin-I16/#parameters_40","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_55","text":"( I16 val , I16 val)","title":"Returns"},{"location":"builtin-I16/#rem","text":"fun box rem( y: I16 val) : I16 val","title":"rem"},{"location":"builtin-I16/#parameters_41","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_56","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#neg","text":"fun box neg() : I16 val","title":"neg"},{"location":"builtin-I16/#returns_57","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#eq","text":"fun box eq( y: I16 val) : Bool val","title":"eq"},{"location":"builtin-I16/#parameters_42","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ne","text":"fun box ne( y: I16 val) : Bool val","title":"ne"},{"location":"builtin-I16/#parameters_43","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#lt","text":"fun box lt( y: I16 val) : Bool val","title":"lt"},{"location":"builtin-I16/#parameters_44","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#le","text":"fun box le( y: I16 val) : Bool val","title":"le"},{"location":"builtin-I16/#parameters_45","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#ge","text":"fun box ge( y: I16 val) : Bool val","title":"ge"},{"location":"builtin-I16/#parameters_46","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#gt","text":"fun box gt( y: I16 val) : Bool val","title":"gt"},{"location":"builtin-I16/#parameters_47","text":"y: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I16/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I16/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I16/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_1","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I16/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I16/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I16/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I16/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I16/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I16/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I16/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I16/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I16/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I16/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I16/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I16/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I16/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I16/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I16/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I16/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I16/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I16/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I16/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I16/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I16/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I16/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I16/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I16/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I16/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I16/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I16/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I16/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I16/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I16/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I16/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I16/#compare","text":"fun box compare( that: I16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I16/#parameters_48","text":"that: I16 val","title":"Parameters"},{"location":"builtin-I16/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I16/#_value","text":"fun box _value() : I16 val","title":"_value"},{"location":"builtin-I16/#returns_99","text":"I16 val","title":"Returns"},{"location":"builtin-I32/","text":"I32 \u00b6 [Source] primitive val I32 is SignedInteger[I32 val, U32 val] val Implements \u00b6 SignedInteger [ I32 val, U32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I32 val) : I32 val^ Parameters \u00b6 value: I32 val Returns \u00b6 I32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I32 val^ Parameters \u00b6 a: A Returns \u00b6 I32 val^ min_value \u00b6 [Source] new val min_value() : I32 val^ Returns \u00b6 I32 val^ max_value \u00b6 [Source] new val max_value() : I32 val^ Returns \u00b6 I32 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U32 val Returns \u00b6 U32 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I32 val Returns \u00b6 I32 val bswap \u00b6 [Source] fun box bswap() : I32 val Returns \u00b6 I32 val popcount \u00b6 [Source] fun box popcount() : U32 val Returns \u00b6 U32 val clz \u00b6 [Source] fun box clz() : U32 val Returns \u00b6 U32 val ctz \u00b6 [Source] fun box ctz() : U32 val Returns \u00b6 U32 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns \u00b6 U32 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns \u00b6 U32 val bitwidth \u00b6 [Source] fun box bitwidth() : U32 val Returns \u00b6 U32 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val max \u00b6 [Source] fun box max( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val fld \u00b6 [Source] fun box fld( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mod \u00b6 [Source] fun box mod( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val addc \u00b6 [Source] fun box addc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) subc \u00b6 [Source] fun box subc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) divc \u00b6 [Source] fun box divc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) remc \u00b6 [Source] fun box remc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) modc \u00b6 [Source] fun box modc( y: I32 val) : (I32 val , Bool val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? div_partial \u00b6 [Source] fun box div_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ? Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I32 val) : I32 val ? Parameters \u00b6 y: I32 val Returns \u00b6 I32 val ? shl \u00b6 fun box shl( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shr \u00b6 fun box shr( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shl_unsafe \u00b6 fun box shl_unsafe( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val shr_unsafe \u00b6 fun box shr_unsafe( y: U32 val) : I32 val Parameters \u00b6 y: U32 val Returns \u00b6 I32 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val sub_unsafe \u00b6 fun box sub_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mul_unsafe \u00b6 fun box mul_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val div_unsafe \u00b6 fun box div_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val neg_unsafe \u00b6 fun box neg_unsafe() : I32 val Returns \u00b6 I32 val op_and \u00b6 fun box op_and( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_or \u00b6 fun box op_or( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_xor \u00b6 fun box op_xor( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val op_not \u00b6 fun box op_not() : I32 val Returns \u00b6 I32 val add \u00b6 fun box add( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val sub \u00b6 fun box sub( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val mul \u00b6 fun box mul( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val div \u00b6 fun box div( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val divrem \u00b6 fun box divrem( y: I32 val) : (I32 val , I32 val) Parameters \u00b6 y: I32 val Returns \u00b6 ( I32 val , I32 val) rem \u00b6 fun box rem( y: I32 val) : I32 val Parameters \u00b6 y: I32 val Returns \u00b6 I32 val neg \u00b6 fun box neg() : I32 val Returns \u00b6 I32 val eq \u00b6 fun box eq( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I32 val) : Bool val Parameters \u00b6 y: I32 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I32 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I32 val Returns \u00b6 I32 val","title":"primitive I32"},{"location":"builtin-I32/#i32","text":"[Source] primitive val I32 is SignedInteger[I32 val, U32 val] val","title":"I32"},{"location":"builtin-I32/#implements","text":"SignedInteger [ I32 val, U32 val] val","title":"Implements"},{"location":"builtin-I32/#constructors","text":"","title":"Constructors"},{"location":"builtin-I32/#create","text":"[Source] new val create( value: I32 val) : I32 val^","title":"create"},{"location":"builtin-I32/#parameters","text":"value: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I32/#returns_1","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#min_value","text":"[Source] new val min_value() : I32 val^","title":"min_value"},{"location":"builtin-I32/#returns_2","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#max_value","text":"[Source] new val max_value() : I32 val^","title":"max_value"},{"location":"builtin-I32/#returns_3","text":"I32 val^","title":"Returns"},{"location":"builtin-I32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-I32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bit_reverse","text":"[Source] fun box bit_reverse() : I32 val","title":"bit_reverse"},{"location":"builtin-I32/#returns_5","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#bswap","text":"[Source] fun box bswap() : I32 val","title":"bswap"},{"location":"builtin-I32/#returns_6","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-I32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-I32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-I32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-I32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-I32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-I32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I32/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I32/#min","text":"[Source] fun box min( y: I32 val) : I32 val","title":"min"},{"location":"builtin-I32/#parameters_2","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_14","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#max","text":"[Source] fun box max( y: I32 val) : I32 val","title":"max"},{"location":"builtin-I32/#parameters_3","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_15","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#fld","text":"[Source] fun box fld( y: I32 val) : I32 val","title":"fld"},{"location":"builtin-I32/#parameters_4","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_16","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I32 val) : I32 val","title":"fld_unsafe"},{"location":"builtin-I32/#parameters_5","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_17","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mod","text":"[Source] fun box mod( y: I32 val) : I32 val","title":"mod"},{"location":"builtin-I32/#parameters_6","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I32 val) : I32 val","title":"mod_unsafe"},{"location":"builtin-I32/#parameters_7","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_19","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#addc","text":"[Source] fun box addc( y: I32 val) : (I32 val , Bool val)","title":"addc"},{"location":"builtin-I32/#parameters_8","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_20","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#subc","text":"[Source] fun box subc( y: I32 val) : (I32 val , Bool val)","title":"subc"},{"location":"builtin-I32/#parameters_9","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_21","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#mulc","text":"[Source] fun box mulc( y: I32 val) : (I32 val , Bool val)","title":"mulc"},{"location":"builtin-I32/#parameters_10","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_22","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#divc","text":"[Source] fun box divc( y: I32 val) : (I32 val , Bool val)","title":"divc"},{"location":"builtin-I32/#parameters_11","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_23","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#remc","text":"[Source] fun box remc( y: I32 val) : (I32 val , Bool val)","title":"remc"},{"location":"builtin-I32/#parameters_12","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_24","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#fldc","text":"[Source] fun box fldc( y: I32 val) : (I32 val , Bool val)","title":"fldc"},{"location":"builtin-I32/#parameters_13","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_25","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#modc","text":"[Source] fun box modc( y: I32 val) : (I32 val , Bool val)","title":"modc"},{"location":"builtin-I32/#parameters_14","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_26","text":"( I32 val , Bool val)","title":"Returns"},{"location":"builtin-I32/#add_partial","text":"[Source] fun box add_partial( y: I32 val) : I32 val ?","title":"add_partial"},{"location":"builtin-I32/#parameters_15","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_27","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#sub_partial","text":"[Source] fun box sub_partial( y: I32 val) : I32 val ?","title":"sub_partial"},{"location":"builtin-I32/#parameters_16","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_28","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mul_partial","text":"[Source] fun box mul_partial( y: I32 val) : I32 val ?","title":"mul_partial"},{"location":"builtin-I32/#parameters_17","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_29","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#div_partial","text":"[Source] fun box div_partial( y: I32 val) : I32 val ?","title":"div_partial"},{"location":"builtin-I32/#parameters_18","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_30","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#rem_partial","text":"[Source] fun box rem_partial( y: I32 val) : I32 val ?","title":"rem_partial"},{"location":"builtin-I32/#parameters_19","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_31","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#divrem_partial","text":"[Source] fun box divrem_partial( y: I32 val) : (I32 val , I32 val) ?","title":"divrem_partial"},{"location":"builtin-I32/#parameters_20","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_32","text":"( I32 val , I32 val) ?","title":"Returns"},{"location":"builtin-I32/#fld_partial","text":"[Source] fun box fld_partial( y: I32 val) : I32 val ?","title":"fld_partial"},{"location":"builtin-I32/#parameters_21","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_33","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#mod_partial","text":"[Source] fun box mod_partial( y: I32 val) : I32 val ?","title":"mod_partial"},{"location":"builtin-I32/#parameters_22","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_34","text":"I32 val ?","title":"Returns"},{"location":"builtin-I32/#shl","text":"fun box shl( y: U32 val) : I32 val","title":"shl"},{"location":"builtin-I32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_35","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr","text":"fun box shr( y: U32 val) : I32 val","title":"shr"},{"location":"builtin-I32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_36","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : I32 val","title":"shl_unsafe"},{"location":"builtin-I32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_37","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : I32 val","title":"shr_unsafe"},{"location":"builtin-I32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-I32/#returns_38","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I32/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I32/#add_unsafe","text":"fun box add_unsafe( y: I32 val) : I32 val","title":"add_unsafe"},{"location":"builtin-I32/#parameters_27","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_40","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub_unsafe","text":"fun box sub_unsafe( y: I32 val) : I32 val","title":"sub_unsafe"},{"location":"builtin-I32/#parameters_28","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_41","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul_unsafe","text":"fun box mul_unsafe( y: I32 val) : I32 val","title":"mul_unsafe"},{"location":"builtin-I32/#parameters_29","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div_unsafe","text":"fun box div_unsafe( y: I32 val) : I32 val","title":"div_unsafe"},{"location":"builtin-I32/#parameters_30","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_43","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem_unsafe","text":"fun box divrem_unsafe( y: I32 val) : (I32 val , I32 val)","title":"divrem_unsafe"},{"location":"builtin-I32/#parameters_31","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_44","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem_unsafe","text":"fun box rem_unsafe( y: I32 val) : I32 val","title":"rem_unsafe"},{"location":"builtin-I32/#parameters_32","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_45","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg_unsafe","text":"fun box neg_unsafe() : I32 val","title":"neg_unsafe"},{"location":"builtin-I32/#returns_46","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_and","text":"fun box op_and( y: I32 val) : I32 val","title":"op_and"},{"location":"builtin-I32/#parameters_33","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_47","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_or","text":"fun box op_or( y: I32 val) : I32 val","title":"op_or"},{"location":"builtin-I32/#parameters_34","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_48","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_xor","text":"fun box op_xor( y: I32 val) : I32 val","title":"op_xor"},{"location":"builtin-I32/#parameters_35","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_49","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#op_not","text":"fun box op_not() : I32 val","title":"op_not"},{"location":"builtin-I32/#returns_50","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#add","text":"fun box add( y: I32 val) : I32 val","title":"add"},{"location":"builtin-I32/#parameters_36","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_51","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#sub","text":"fun box sub( y: I32 val) : I32 val","title":"sub"},{"location":"builtin-I32/#parameters_37","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_52","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#mul","text":"fun box mul( y: I32 val) : I32 val","title":"mul"},{"location":"builtin-I32/#parameters_38","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_53","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#div","text":"fun box div( y: I32 val) : I32 val","title":"div"},{"location":"builtin-I32/#parameters_39","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_54","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#divrem","text":"fun box divrem( y: I32 val) : (I32 val , I32 val)","title":"divrem"},{"location":"builtin-I32/#parameters_40","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_55","text":"( I32 val , I32 val)","title":"Returns"},{"location":"builtin-I32/#rem","text":"fun box rem( y: I32 val) : I32 val","title":"rem"},{"location":"builtin-I32/#parameters_41","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_56","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#neg","text":"fun box neg() : I32 val","title":"neg"},{"location":"builtin-I32/#returns_57","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#eq","text":"fun box eq( y: I32 val) : Bool val","title":"eq"},{"location":"builtin-I32/#parameters_42","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ne","text":"fun box ne( y: I32 val) : Bool val","title":"ne"},{"location":"builtin-I32/#parameters_43","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#lt","text":"fun box lt( y: I32 val) : Bool val","title":"lt"},{"location":"builtin-I32/#parameters_44","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#le","text":"fun box le( y: I32 val) : Bool val","title":"le"},{"location":"builtin-I32/#parameters_45","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#ge","text":"fun box ge( y: I32 val) : Bool val","title":"ge"},{"location":"builtin-I32/#parameters_46","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#gt","text":"fun box gt( y: I32 val) : Bool val","title":"gt"},{"location":"builtin-I32/#parameters_47","text":"y: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I32/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I32/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I32/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I32/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_1","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I32/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I32/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I32/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I32/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I32/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I32/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I32/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I32/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I32/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I32/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I32/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I32/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I32/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I32/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I32/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I32/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I32/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I32/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I32/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I32/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I32/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I32/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I32/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I32/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I32/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I32/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I32/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I32/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I32/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I32/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I32/#compare","text":"fun box compare( that: I32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I32/#parameters_48","text":"that: I32 val","title":"Parameters"},{"location":"builtin-I32/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I32/#_value","text":"fun box _value() : I32 val","title":"_value"},{"location":"builtin-I32/#returns_99","text":"I32 val","title":"Returns"},{"location":"builtin-I64/","text":"I64 \u00b6 [Source] primitive val I64 is SignedInteger[I64 val, U64 val] val Implements \u00b6 SignedInteger [ I64 val, U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I64 val) : I64 val^ Parameters \u00b6 value: I64 val Returns \u00b6 I64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I64 val^ Parameters \u00b6 a: A Returns \u00b6 I64 val^ min_value \u00b6 [Source] new val min_value() : I64 val^ Returns \u00b6 I64 val^ max_value \u00b6 [Source] new val max_value() : I64 val^ Returns \u00b6 I64 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U64 val Returns \u00b6 U64 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I64 val Returns \u00b6 I64 val bswap \u00b6 [Source] fun box bswap() : I64 val Returns \u00b6 I64 val popcount \u00b6 [Source] fun box popcount() : U64 val Returns \u00b6 U64 val clz \u00b6 [Source] fun box clz() : U64 val Returns \u00b6 U64 val ctz \u00b6 [Source] fun box ctz() : U64 val Returns \u00b6 U64 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns \u00b6 U64 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns \u00b6 U64 val bitwidth \u00b6 [Source] fun box bitwidth() : U64 val Returns \u00b6 U64 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val max \u00b6 [Source] fun box max( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val fld \u00b6 [Source] fun box fld( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mod \u00b6 [Source] fun box mod( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) subc \u00b6 [Source] fun box subc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) divc \u00b6 [Source] fun box divc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) remc \u00b6 [Source] fun box remc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) modc \u00b6 [Source] fun box modc( y: I64 val) : (I64 val , Bool val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? div_partial \u00b6 [Source] fun box div_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ? Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I64 val) : I64 val ? Parameters \u00b6 y: I64 val Returns \u00b6 I64 val ? shl \u00b6 fun box shl( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shr \u00b6 fun box shr( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shl_unsafe \u00b6 fun box shl_unsafe( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val shr_unsafe \u00b6 fun box shr_unsafe( y: U64 val) : I64 val Parameters \u00b6 y: U64 val Returns \u00b6 I64 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val sub_unsafe \u00b6 fun box sub_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mul_unsafe \u00b6 fun box mul_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val div_unsafe \u00b6 fun box div_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val neg_unsafe \u00b6 fun box neg_unsafe() : I64 val Returns \u00b6 I64 val op_and \u00b6 fun box op_and( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_or \u00b6 fun box op_or( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_xor \u00b6 fun box op_xor( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val op_not \u00b6 fun box op_not() : I64 val Returns \u00b6 I64 val add \u00b6 fun box add( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val sub \u00b6 fun box sub( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val mul \u00b6 fun box mul( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val div \u00b6 fun box div( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val divrem \u00b6 fun box divrem( y: I64 val) : (I64 val , I64 val) Parameters \u00b6 y: I64 val Returns \u00b6 ( I64 val , I64 val) rem \u00b6 fun box rem( y: I64 val) : I64 val Parameters \u00b6 y: I64 val Returns \u00b6 I64 val neg \u00b6 fun box neg() : I64 val Returns \u00b6 I64 val eq \u00b6 fun box eq( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I64 val) : Bool val Parameters \u00b6 y: I64 val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I64 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I64 val Returns \u00b6 I64 val","title":"primitive I64"},{"location":"builtin-I64/#i64","text":"[Source] primitive val I64 is SignedInteger[I64 val, U64 val] val","title":"I64"},{"location":"builtin-I64/#implements","text":"SignedInteger [ I64 val, U64 val] val","title":"Implements"},{"location":"builtin-I64/#constructors","text":"","title":"Constructors"},{"location":"builtin-I64/#create","text":"[Source] new val create( value: I64 val) : I64 val^","title":"create"},{"location":"builtin-I64/#parameters","text":"value: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I64/#returns_1","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#min_value","text":"[Source] new val min_value() : I64 val^","title":"min_value"},{"location":"builtin-I64/#returns_2","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#max_value","text":"[Source] new val max_value() : I64 val^","title":"max_value"},{"location":"builtin-I64/#returns_3","text":"I64 val^","title":"Returns"},{"location":"builtin-I64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-I64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bit_reverse","text":"[Source] fun box bit_reverse() : I64 val","title":"bit_reverse"},{"location":"builtin-I64/#returns_5","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#bswap","text":"[Source] fun box bswap() : I64 val","title":"bswap"},{"location":"builtin-I64/#returns_6","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-I64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-I64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-I64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-I64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-I64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-I64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I64/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I64/#min","text":"[Source] fun box min( y: I64 val) : I64 val","title":"min"},{"location":"builtin-I64/#parameters_2","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_14","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#max","text":"[Source] fun box max( y: I64 val) : I64 val","title":"max"},{"location":"builtin-I64/#parameters_3","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_15","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#fld","text":"[Source] fun box fld( y: I64 val) : I64 val","title":"fld"},{"location":"builtin-I64/#parameters_4","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_16","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I64 val) : I64 val","title":"fld_unsafe"},{"location":"builtin-I64/#parameters_5","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_17","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mod","text":"[Source] fun box mod( y: I64 val) : I64 val","title":"mod"},{"location":"builtin-I64/#parameters_6","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_18","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I64 val) : I64 val","title":"mod_unsafe"},{"location":"builtin-I64/#parameters_7","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-I64/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-I64/#addc","text":"[Source] fun box addc( y: I64 val) : (I64 val , Bool val)","title":"addc"},{"location":"builtin-I64/#parameters_8","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_21","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#subc","text":"[Source] fun box subc( y: I64 val) : (I64 val , Bool val)","title":"subc"},{"location":"builtin-I64/#parameters_9","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_22","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#mulc","text":"[Source] fun box mulc( y: I64 val) : (I64 val , Bool val)","title":"mulc"},{"location":"builtin-I64/#parameters_10","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_23","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#divc","text":"[Source] fun box divc( y: I64 val) : (I64 val , Bool val)","title":"divc"},{"location":"builtin-I64/#parameters_11","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_24","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#remc","text":"[Source] fun box remc( y: I64 val) : (I64 val , Bool val)","title":"remc"},{"location":"builtin-I64/#parameters_12","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_25","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#fldc","text":"[Source] fun box fldc( y: I64 val) : (I64 val , Bool val)","title":"fldc"},{"location":"builtin-I64/#parameters_13","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_26","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#modc","text":"[Source] fun box modc( y: I64 val) : (I64 val , Bool val)","title":"modc"},{"location":"builtin-I64/#parameters_14","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_27","text":"( I64 val , Bool val)","title":"Returns"},{"location":"builtin-I64/#add_partial","text":"[Source] fun box add_partial( y: I64 val) : I64 val ?","title":"add_partial"},{"location":"builtin-I64/#parameters_15","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_28","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#sub_partial","text":"[Source] fun box sub_partial( y: I64 val) : I64 val ?","title":"sub_partial"},{"location":"builtin-I64/#parameters_16","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_29","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mul_partial","text":"[Source] fun box mul_partial( y: I64 val) : I64 val ?","title":"mul_partial"},{"location":"builtin-I64/#parameters_17","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_30","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#div_partial","text":"[Source] fun box div_partial( y: I64 val) : I64 val ?","title":"div_partial"},{"location":"builtin-I64/#parameters_18","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_31","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#rem_partial","text":"[Source] fun box rem_partial( y: I64 val) : I64 val ?","title":"rem_partial"},{"location":"builtin-I64/#parameters_19","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_32","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#divrem_partial","text":"[Source] fun box divrem_partial( y: I64 val) : (I64 val , I64 val) ?","title":"divrem_partial"},{"location":"builtin-I64/#parameters_20","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_33","text":"( I64 val , I64 val) ?","title":"Returns"},{"location":"builtin-I64/#fld_partial","text":"[Source] fun box fld_partial( y: I64 val) : I64 val ?","title":"fld_partial"},{"location":"builtin-I64/#parameters_21","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_34","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#mod_partial","text":"[Source] fun box mod_partial( y: I64 val) : I64 val ?","title":"mod_partial"},{"location":"builtin-I64/#parameters_22","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_35","text":"I64 val ?","title":"Returns"},{"location":"builtin-I64/#shl","text":"fun box shl( y: U64 val) : I64 val","title":"shl"},{"location":"builtin-I64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_36","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr","text":"fun box shr( y: U64 val) : I64 val","title":"shr"},{"location":"builtin-I64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_37","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : I64 val","title":"shl_unsafe"},{"location":"builtin-I64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_38","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : I64 val","title":"shr_unsafe"},{"location":"builtin-I64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-I64/#returns_39","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I64/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-I64/#add_unsafe","text":"fun box add_unsafe( y: I64 val) : I64 val","title":"add_unsafe"},{"location":"builtin-I64/#parameters_27","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_41","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub_unsafe","text":"fun box sub_unsafe( y: I64 val) : I64 val","title":"sub_unsafe"},{"location":"builtin-I64/#parameters_28","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_42","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul_unsafe","text":"fun box mul_unsafe( y: I64 val) : I64 val","title":"mul_unsafe"},{"location":"builtin-I64/#parameters_29","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div_unsafe","text":"fun box div_unsafe( y: I64 val) : I64 val","title":"div_unsafe"},{"location":"builtin-I64/#parameters_30","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_44","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem_unsafe","text":"fun box divrem_unsafe( y: I64 val) : (I64 val , I64 val)","title":"divrem_unsafe"},{"location":"builtin-I64/#parameters_31","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_45","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem_unsafe","text":"fun box rem_unsafe( y: I64 val) : I64 val","title":"rem_unsafe"},{"location":"builtin-I64/#parameters_32","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_46","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg_unsafe","text":"fun box neg_unsafe() : I64 val","title":"neg_unsafe"},{"location":"builtin-I64/#returns_47","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_and","text":"fun box op_and( y: I64 val) : I64 val","title":"op_and"},{"location":"builtin-I64/#parameters_33","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_48","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_or","text":"fun box op_or( y: I64 val) : I64 val","title":"op_or"},{"location":"builtin-I64/#parameters_34","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_49","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_xor","text":"fun box op_xor( y: I64 val) : I64 val","title":"op_xor"},{"location":"builtin-I64/#parameters_35","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_50","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#op_not","text":"fun box op_not() : I64 val","title":"op_not"},{"location":"builtin-I64/#returns_51","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#add","text":"fun box add( y: I64 val) : I64 val","title":"add"},{"location":"builtin-I64/#parameters_36","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_52","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#sub","text":"fun box sub( y: I64 val) : I64 val","title":"sub"},{"location":"builtin-I64/#parameters_37","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_53","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#mul","text":"fun box mul( y: I64 val) : I64 val","title":"mul"},{"location":"builtin-I64/#parameters_38","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_54","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#div","text":"fun box div( y: I64 val) : I64 val","title":"div"},{"location":"builtin-I64/#parameters_39","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_55","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#divrem","text":"fun box divrem( y: I64 val) : (I64 val , I64 val)","title":"divrem"},{"location":"builtin-I64/#parameters_40","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_56","text":"( I64 val , I64 val)","title":"Returns"},{"location":"builtin-I64/#rem","text":"fun box rem( y: I64 val) : I64 val","title":"rem"},{"location":"builtin-I64/#parameters_41","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_57","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#neg","text":"fun box neg() : I64 val","title":"neg"},{"location":"builtin-I64/#returns_58","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#eq","text":"fun box eq( y: I64 val) : Bool val","title":"eq"},{"location":"builtin-I64/#parameters_42","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ne","text":"fun box ne( y: I64 val) : Bool val","title":"ne"},{"location":"builtin-I64/#parameters_43","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#lt","text":"fun box lt( y: I64 val) : Bool val","title":"lt"},{"location":"builtin-I64/#parameters_44","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#le","text":"fun box le( y: I64 val) : Bool val","title":"le"},{"location":"builtin-I64/#parameters_45","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#ge","text":"fun box ge( y: I64 val) : Bool val","title":"ge"},{"location":"builtin-I64/#parameters_46","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#gt","text":"fun box gt( y: I64 val) : Bool val","title":"gt"},{"location":"builtin-I64/#parameters_47","text":"y: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-I64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I64/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I64/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I64/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I64/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_1","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I64/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I64/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I64/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I64/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I64/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I64/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I64/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I64/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I64/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I64/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I64/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I64/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I64/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I64/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I64/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I64/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I64/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I64/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I64/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I64/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I64/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I64/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I64/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I64/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I64/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I64/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I64/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I64/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I64/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I64/#compare","text":"fun box compare( that: I64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I64/#parameters_48","text":"that: I64 val","title":"Parameters"},{"location":"builtin-I64/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I64/#_value","text":"fun box _value() : I64 val","title":"_value"},{"location":"builtin-I64/#returns_99","text":"I64 val","title":"Returns"},{"location":"builtin-I8/","text":"I8 \u00b6 [Source] primitive val I8 is SignedInteger[I8 val, U8 val] val Implements \u00b6 SignedInteger [ I8 val, U8 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: I8 val) : I8 val^ Parameters \u00b6 value: I8 val Returns \u00b6 I8 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I8 val^ Parameters \u00b6 a: A Returns \u00b6 I8 val^ min_value \u00b6 [Source] new val min_value() : I8 val^ Returns \u00b6 I8 val^ max_value \u00b6 [Source] new val max_value() : I8 val^ Returns \u00b6 I8 val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : U8 val Returns \u00b6 U8 val bit_reverse \u00b6 [Source] fun box bit_reverse() : I8 val Returns \u00b6 I8 val bswap \u00b6 [Source] fun box bswap() : I8 val Returns \u00b6 I8 val popcount \u00b6 [Source] fun box popcount() : U8 val Returns \u00b6 U8 val clz \u00b6 [Source] fun box clz() : U8 val Returns \u00b6 U8 val ctz \u00b6 [Source] fun box ctz() : U8 val Returns \u00b6 U8 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns \u00b6 U8 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns \u00b6 U8 val bitwidth \u00b6 [Source] fun box bitwidth() : U8 val Returns \u00b6 U8 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val max \u00b6 [Source] fun box max( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val fld \u00b6 [Source] fun box fld( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mod \u00b6 [Source] fun box mod( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val addc \u00b6 [Source] fun box addc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) subc \u00b6 [Source] fun box subc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) divc \u00b6 [Source] fun box divc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) remc \u00b6 [Source] fun box remc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) fldc \u00b6 [Source] fun box fldc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) modc \u00b6 [Source] fun box modc( y: I8 val) : (I8 val , Bool val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? div_partial \u00b6 [Source] fun box div_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ? Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? mod_partial \u00b6 [Source] fun box mod_partial( y: I8 val) : I8 val ? Parameters \u00b6 y: I8 val Returns \u00b6 I8 val ? shl \u00b6 fun box shl( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shr \u00b6 fun box shr( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shl_unsafe \u00b6 fun box shl_unsafe( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val shr_unsafe \u00b6 fun box shr_unsafe( y: U8 val) : I8 val Parameters \u00b6 y: U8 val Returns \u00b6 I8 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val sub_unsafe \u00b6 fun box sub_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mul_unsafe \u00b6 fun box mul_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val div_unsafe \u00b6 fun box div_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) rem_unsafe \u00b6 fun box rem_unsafe( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val neg_unsafe \u00b6 fun box neg_unsafe() : I8 val Returns \u00b6 I8 val op_and \u00b6 fun box op_and( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_or \u00b6 fun box op_or( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_xor \u00b6 fun box op_xor( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val op_not \u00b6 fun box op_not() : I8 val Returns \u00b6 I8 val add \u00b6 fun box add( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val sub \u00b6 fun box sub( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val mul \u00b6 fun box mul( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val div \u00b6 fun box div( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val divrem \u00b6 fun box divrem( y: I8 val) : (I8 val , I8 val) Parameters \u00b6 y: I8 val Returns \u00b6 ( I8 val , I8 val) rem \u00b6 fun box rem( y: I8 val) : I8 val Parameters \u00b6 y: I8 val Returns \u00b6 I8 val neg \u00b6 fun box neg() : I8 val Returns \u00b6 I8 val eq \u00b6 fun box eq( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val le \u00b6 fun box le( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: I8 val) : Bool val Parameters \u00b6 y: I8 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: I8 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: I8 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : I8 val Returns \u00b6 I8 val","title":"primitive I8"},{"location":"builtin-I8/#i8","text":"[Source] primitive val I8 is SignedInteger[I8 val, U8 val] val","title":"I8"},{"location":"builtin-I8/#implements","text":"SignedInteger [ I8 val, U8 val] val","title":"Implements"},{"location":"builtin-I8/#constructors","text":"","title":"Constructors"},{"location":"builtin-I8/#create","text":"[Source] new val create( value: I8 val) : I8 val^","title":"create"},{"location":"builtin-I8/#parameters","text":"value: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : I8 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-I8/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-I8/#returns_1","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#min_value","text":"[Source] new val min_value() : I8 val^","title":"min_value"},{"location":"builtin-I8/#returns_2","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#max_value","text":"[Source] new val max_value() : I8 val^","title":"max_value"},{"location":"builtin-I8/#returns_3","text":"I8 val^","title":"Returns"},{"location":"builtin-I8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-I8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-I8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bit_reverse","text":"[Source] fun box bit_reverse() : I8 val","title":"bit_reverse"},{"location":"builtin-I8/#returns_5","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#bswap","text":"[Source] fun box bswap() : I8 val","title":"bswap"},{"location":"builtin-I8/#returns_6","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-I8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-I8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-I8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-I8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-I8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-I8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-I8/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-I8/#min","text":"[Source] fun box min( y: I8 val) : I8 val","title":"min"},{"location":"builtin-I8/#parameters_2","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_14","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#max","text":"[Source] fun box max( y: I8 val) : I8 val","title":"max"},{"location":"builtin-I8/#parameters_3","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_15","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#fld","text":"[Source] fun box fld( y: I8 val) : I8 val","title":"fld"},{"location":"builtin-I8/#parameters_4","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: I8 val) : I8 val","title":"fld_unsafe"},{"location":"builtin-I8/#parameters_5","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_17","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mod","text":"[Source] fun box mod( y: I8 val) : I8 val","title":"mod"},{"location":"builtin-I8/#parameters_6","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_18","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: I8 val) : I8 val","title":"mod_unsafe"},{"location":"builtin-I8/#parameters_7","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_19","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#addc","text":"[Source] fun box addc( y: I8 val) : (I8 val , Bool val)","title":"addc"},{"location":"builtin-I8/#parameters_8","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_20","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#subc","text":"[Source] fun box subc( y: I8 val) : (I8 val , Bool val)","title":"subc"},{"location":"builtin-I8/#parameters_9","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_21","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#mulc","text":"[Source] fun box mulc( y: I8 val) : (I8 val , Bool val)","title":"mulc"},{"location":"builtin-I8/#parameters_10","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_22","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#divc","text":"[Source] fun box divc( y: I8 val) : (I8 val , Bool val)","title":"divc"},{"location":"builtin-I8/#parameters_11","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_23","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#remc","text":"[Source] fun box remc( y: I8 val) : (I8 val , Bool val)","title":"remc"},{"location":"builtin-I8/#parameters_12","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_24","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#fldc","text":"[Source] fun box fldc( y: I8 val) : (I8 val , Bool val)","title":"fldc"},{"location":"builtin-I8/#parameters_13","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_25","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#modc","text":"[Source] fun box modc( y: I8 val) : (I8 val , Bool val)","title":"modc"},{"location":"builtin-I8/#parameters_14","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_26","text":"( I8 val , Bool val)","title":"Returns"},{"location":"builtin-I8/#add_partial","text":"[Source] fun box add_partial( y: I8 val) : I8 val ?","title":"add_partial"},{"location":"builtin-I8/#parameters_15","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_27","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#sub_partial","text":"[Source] fun box sub_partial( y: I8 val) : I8 val ?","title":"sub_partial"},{"location":"builtin-I8/#parameters_16","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_28","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mul_partial","text":"[Source] fun box mul_partial( y: I8 val) : I8 val ?","title":"mul_partial"},{"location":"builtin-I8/#parameters_17","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_29","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#div_partial","text":"[Source] fun box div_partial( y: I8 val) : I8 val ?","title":"div_partial"},{"location":"builtin-I8/#parameters_18","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_30","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#rem_partial","text":"[Source] fun box rem_partial( y: I8 val) : I8 val ?","title":"rem_partial"},{"location":"builtin-I8/#parameters_19","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_31","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#divrem_partial","text":"[Source] fun box divrem_partial( y: I8 val) : (I8 val , I8 val) ?","title":"divrem_partial"},{"location":"builtin-I8/#parameters_20","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_32","text":"( I8 val , I8 val) ?","title":"Returns"},{"location":"builtin-I8/#fld_partial","text":"[Source] fun box fld_partial( y: I8 val) : I8 val ?","title":"fld_partial"},{"location":"builtin-I8/#parameters_21","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_33","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#mod_partial","text":"[Source] fun box mod_partial( y: I8 val) : I8 val ?","title":"mod_partial"},{"location":"builtin-I8/#parameters_22","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_34","text":"I8 val ?","title":"Returns"},{"location":"builtin-I8/#shl","text":"fun box shl( y: U8 val) : I8 val","title":"shl"},{"location":"builtin-I8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_35","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr","text":"fun box shr( y: U8 val) : I8 val","title":"shr"},{"location":"builtin-I8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_36","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : I8 val","title":"shl_unsafe"},{"location":"builtin-I8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_37","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : I8 val","title":"shr_unsafe"},{"location":"builtin-I8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-I8/#returns_38","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-I8/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-I8/#add_unsafe","text":"fun box add_unsafe( y: I8 val) : I8 val","title":"add_unsafe"},{"location":"builtin-I8/#parameters_27","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub_unsafe","text":"fun box sub_unsafe( y: I8 val) : I8 val","title":"sub_unsafe"},{"location":"builtin-I8/#parameters_28","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_41","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul_unsafe","text":"fun box mul_unsafe( y: I8 val) : I8 val","title":"mul_unsafe"},{"location":"builtin-I8/#parameters_29","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_42","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div_unsafe","text":"fun box div_unsafe( y: I8 val) : I8 val","title":"div_unsafe"},{"location":"builtin-I8/#parameters_30","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_43","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem_unsafe","text":"fun box divrem_unsafe( y: I8 val) : (I8 val , I8 val)","title":"divrem_unsafe"},{"location":"builtin-I8/#parameters_31","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_44","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem_unsafe","text":"fun box rem_unsafe( y: I8 val) : I8 val","title":"rem_unsafe"},{"location":"builtin-I8/#parameters_32","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_45","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg_unsafe","text":"fun box neg_unsafe() : I8 val","title":"neg_unsafe"},{"location":"builtin-I8/#returns_46","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_and","text":"fun box op_and( y: I8 val) : I8 val","title":"op_and"},{"location":"builtin-I8/#parameters_33","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_47","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_or","text":"fun box op_or( y: I8 val) : I8 val","title":"op_or"},{"location":"builtin-I8/#parameters_34","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_48","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_xor","text":"fun box op_xor( y: I8 val) : I8 val","title":"op_xor"},{"location":"builtin-I8/#parameters_35","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_49","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#op_not","text":"fun box op_not() : I8 val","title":"op_not"},{"location":"builtin-I8/#returns_50","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#add","text":"fun box add( y: I8 val) : I8 val","title":"add"},{"location":"builtin-I8/#parameters_36","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_51","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#sub","text":"fun box sub( y: I8 val) : I8 val","title":"sub"},{"location":"builtin-I8/#parameters_37","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_52","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#mul","text":"fun box mul( y: I8 val) : I8 val","title":"mul"},{"location":"builtin-I8/#parameters_38","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_53","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#div","text":"fun box div( y: I8 val) : I8 val","title":"div"},{"location":"builtin-I8/#parameters_39","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_54","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#divrem","text":"fun box divrem( y: I8 val) : (I8 val , I8 val)","title":"divrem"},{"location":"builtin-I8/#parameters_40","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_55","text":"( I8 val , I8 val)","title":"Returns"},{"location":"builtin-I8/#rem","text":"fun box rem( y: I8 val) : I8 val","title":"rem"},{"location":"builtin-I8/#parameters_41","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_56","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#neg","text":"fun box neg() : I8 val","title":"neg"},{"location":"builtin-I8/#returns_57","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#eq","text":"fun box eq( y: I8 val) : Bool val","title":"eq"},{"location":"builtin-I8/#parameters_42","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ne","text":"fun box ne( y: I8 val) : Bool val","title":"ne"},{"location":"builtin-I8/#parameters_43","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#lt","text":"fun box lt( y: I8 val) : Bool val","title":"lt"},{"location":"builtin-I8/#parameters_44","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#le","text":"fun box le( y: I8 val) : Bool val","title":"le"},{"location":"builtin-I8/#parameters_45","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#ge","text":"fun box ge( y: I8 val) : Bool val","title":"ge"},{"location":"builtin-I8/#parameters_46","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#gt","text":"fun box gt( y: I8 val) : Bool val","title":"gt"},{"location":"builtin-I8/#parameters_47","text":"y: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-I8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-I8/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-I8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-I8/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#i8_1","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-I8/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-I8/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-I8/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-I8/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-I8/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-I8/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-I8/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-I8/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-I8/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-I8/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-I8/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-I8/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-I8/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-I8/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-I8/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-I8/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-I8/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-I8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-I8/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-I8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-I8/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-I8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-I8/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-I8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-I8/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-I8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-I8/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-I8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-I8/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-I8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-I8/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-I8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-I8/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-I8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-I8/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-I8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-I8/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-I8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-I8/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-I8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-I8/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-I8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-I8/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-I8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-I8/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-I8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-I8/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-I8/#compare","text":"fun box compare( that: I8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-I8/#parameters_48","text":"that: I8 val","title":"Parameters"},{"location":"builtin-I8/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-I8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-I8/#_value","text":"fun box _value() : I8 val","title":"_value"},{"location":"builtin-I8/#returns_99","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/","text":"ILong \u00b6 [Source] primitive val ILong is SignedInteger[ILong val, ULong val] val Implements \u00b6 SignedInteger [ ILong val, ULong val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ILong val) : ILong val^ Parameters \u00b6 value: ILong val Returns \u00b6 ILong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ILong val^ Parameters \u00b6 a: A Returns \u00b6 ILong val^ min_value \u00b6 [Source] new val min_value() : ILong val^ Returns \u00b6 ILong val^ max_value \u00b6 [Source] new val max_value() : ILong val^ Returns \u00b6 ILong val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : ULong val Returns \u00b6 ULong val bit_reverse \u00b6 [Source] fun box bit_reverse() : ILong val Returns \u00b6 ILong val bswap \u00b6 [Source] fun box bswap() : ILong val Returns \u00b6 ILong val popcount \u00b6 [Source] fun box popcount() : ULong val Returns \u00b6 ULong val clz \u00b6 [Source] fun box clz() : ULong val Returns \u00b6 ULong val ctz \u00b6 [Source] fun box ctz() : ULong val Returns \u00b6 ULong val clz_unsafe \u00b6 [Source] fun box clz_unsafe() : ULong val Returns \u00b6 ULong val ctz_unsafe \u00b6 [Source] fun box ctz_unsafe() : ULong val Returns \u00b6 ULong val bitwidth \u00b6 [Source] fun box bitwidth() : ULong val Returns \u00b6 ULong val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val max \u00b6 [Source] fun box max( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val fld \u00b6 [Source] fun box fld( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mod \u00b6 [Source] fun box mod( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) subc \u00b6 [Source] fun box subc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) divc \u00b6 [Source] fun box divc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) remc \u00b6 [Source] fun box remc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) fldc \u00b6 [Source] fun box fldc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) modc \u00b6 [Source] fun box modc( y: ILong val) : (ILong val , Bool val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? div_partial \u00b6 [Source] fun box div_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ? Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? mod_partial \u00b6 [Source] fun box mod_partial( y: ILong val) : ILong val ? Parameters \u00b6 y: ILong val Returns \u00b6 ILong val ? shl \u00b6 fun box shl( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shr \u00b6 fun box shr( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shl_unsafe \u00b6 fun box shl_unsafe( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val shr_unsafe \u00b6 fun box shr_unsafe( y: ULong val) : ILong val Parameters \u00b6 y: ULong val Returns \u00b6 ILong val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val sub_unsafe \u00b6 fun box sub_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mul_unsafe \u00b6 fun box mul_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val div_unsafe \u00b6 fun box div_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) rem_unsafe \u00b6 fun box rem_unsafe( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val neg_unsafe \u00b6 fun box neg_unsafe() : ILong val Returns \u00b6 ILong val op_and \u00b6 fun box op_and( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_or \u00b6 fun box op_or( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_xor \u00b6 fun box op_xor( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val op_not \u00b6 fun box op_not() : ILong val Returns \u00b6 ILong val add \u00b6 fun box add( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val sub \u00b6 fun box sub( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val mul \u00b6 fun box mul( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val div \u00b6 fun box div( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val divrem \u00b6 fun box divrem( y: ILong val) : (ILong val , ILong val) Parameters \u00b6 y: ILong val Returns \u00b6 ( ILong val , ILong val) rem \u00b6 fun box rem( y: ILong val) : ILong val Parameters \u00b6 y: ILong val Returns \u00b6 ILong val neg \u00b6 fun box neg() : ILong val Returns \u00b6 ILong val eq \u00b6 fun box eq( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val le \u00b6 fun box le( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ILong val) : Bool val Parameters \u00b6 y: ILong val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ILong val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ILong val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : ILong val Returns \u00b6 ILong val","title":"primitive ILong"},{"location":"builtin-ILong/#ilong","text":"[Source] primitive val ILong is SignedInteger[ILong val, ULong val] val","title":"ILong"},{"location":"builtin-ILong/#implements","text":"SignedInteger [ ILong val, ULong val] val","title":"Implements"},{"location":"builtin-ILong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ILong/#create","text":"[Source] new val create( value: ILong val) : ILong val^","title":"create"},{"location":"builtin-ILong/#parameters","text":"value: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ILong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ILong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ILong/#returns_1","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#min_value","text":"[Source] new val min_value() : ILong val^","title":"min_value"},{"location":"builtin-ILong/#returns_2","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#max_value","text":"[Source] new val max_value() : ILong val^","title":"max_value"},{"location":"builtin-ILong/#returns_3","text":"ILong val^","title":"Returns"},{"location":"builtin-ILong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ILong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ILong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bit_reverse","text":"[Source] fun box bit_reverse() : ILong val","title":"bit_reverse"},{"location":"builtin-ILong/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#bswap","text":"[Source] fun box bswap() : ILong val","title":"bswap"},{"location":"builtin-ILong/#returns_6","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ILong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ILong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ILong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#clz_unsafe","text":"[Source] fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ILong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ILong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ILong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ILong/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#min","text":"[Source] fun box min( y: ILong val) : ILong val","title":"min"},{"location":"builtin-ILong/#parameters_2","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_14","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#max","text":"[Source] fun box max( y: ILong val) : ILong val","title":"max"},{"location":"builtin-ILong/#parameters_3","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_15","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#fld","text":"[Source] fun box fld( y: ILong val) : ILong val","title":"fld"},{"location":"builtin-ILong/#parameters_4","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_16","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: ILong val) : ILong val","title":"fld_unsafe"},{"location":"builtin-ILong/#parameters_5","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_17","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mod","text":"[Source] fun box mod( y: ILong val) : ILong val","title":"mod"},{"location":"builtin-ILong/#parameters_6","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_18","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: ILong val) : ILong val","title":"mod_unsafe"},{"location":"builtin-ILong/#parameters_7","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_19","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ILong/#returns_20","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#addc","text":"[Source] fun box addc( y: ILong val) : (ILong val , Bool val)","title":"addc"},{"location":"builtin-ILong/#parameters_8","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_21","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#subc","text":"[Source] fun box subc( y: ILong val) : (ILong val , Bool val)","title":"subc"},{"location":"builtin-ILong/#parameters_9","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_22","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#mulc","text":"[Source] fun box mulc( y: ILong val) : (ILong val , Bool val)","title":"mulc"},{"location":"builtin-ILong/#parameters_10","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_23","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#divc","text":"[Source] fun box divc( y: ILong val) : (ILong val , Bool val)","title":"divc"},{"location":"builtin-ILong/#parameters_11","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_24","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#remc","text":"[Source] fun box remc( y: ILong val) : (ILong val , Bool val)","title":"remc"},{"location":"builtin-ILong/#parameters_12","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_25","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#fldc","text":"[Source] fun box fldc( y: ILong val) : (ILong val , Bool val)","title":"fldc"},{"location":"builtin-ILong/#parameters_13","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_26","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#modc","text":"[Source] fun box modc( y: ILong val) : (ILong val , Bool val)","title":"modc"},{"location":"builtin-ILong/#parameters_14","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_27","text":"( ILong val , Bool val)","title":"Returns"},{"location":"builtin-ILong/#add_partial","text":"[Source] fun box add_partial( y: ILong val) : ILong val ?","title":"add_partial"},{"location":"builtin-ILong/#parameters_15","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_28","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#sub_partial","text":"[Source] fun box sub_partial( y: ILong val) : ILong val ?","title":"sub_partial"},{"location":"builtin-ILong/#parameters_16","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_29","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mul_partial","text":"[Source] fun box mul_partial( y: ILong val) : ILong val ?","title":"mul_partial"},{"location":"builtin-ILong/#parameters_17","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_30","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#div_partial","text":"[Source] fun box div_partial( y: ILong val) : ILong val ?","title":"div_partial"},{"location":"builtin-ILong/#parameters_18","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_31","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#rem_partial","text":"[Source] fun box rem_partial( y: ILong val) : ILong val ?","title":"rem_partial"},{"location":"builtin-ILong/#parameters_19","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_32","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ILong val) : (ILong val , ILong val) ?","title":"divrem_partial"},{"location":"builtin-ILong/#parameters_20","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_33","text":"( ILong val , ILong val) ?","title":"Returns"},{"location":"builtin-ILong/#fld_partial","text":"[Source] fun box fld_partial( y: ILong val) : ILong val ?","title":"fld_partial"},{"location":"builtin-ILong/#parameters_21","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_34","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#mod_partial","text":"[Source] fun box mod_partial( y: ILong val) : ILong val ?","title":"mod_partial"},{"location":"builtin-ILong/#parameters_22","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_35","text":"ILong val ?","title":"Returns"},{"location":"builtin-ILong/#shl","text":"fun box shl( y: ULong val) : ILong val","title":"shl"},{"location":"builtin-ILong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_36","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr","text":"fun box shr( y: ULong val) : ILong val","title":"shr"},{"location":"builtin-ILong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_37","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ILong val","title":"shl_unsafe"},{"location":"builtin-ILong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_38","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ILong val","title":"shr_unsafe"},{"location":"builtin-ILong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ILong/#returns_39","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ILong/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-ILong/#add_unsafe","text":"fun box add_unsafe( y: ILong val) : ILong val","title":"add_unsafe"},{"location":"builtin-ILong/#parameters_27","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_41","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub_unsafe","text":"fun box sub_unsafe( y: ILong val) : ILong val","title":"sub_unsafe"},{"location":"builtin-ILong/#parameters_28","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_42","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul_unsafe","text":"fun box mul_unsafe( y: ILong val) : ILong val","title":"mul_unsafe"},{"location":"builtin-ILong/#parameters_29","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_43","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div_unsafe","text":"fun box div_unsafe( y: ILong val) : ILong val","title":"div_unsafe"},{"location":"builtin-ILong/#parameters_30","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_44","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ILong val) : (ILong val , ILong val)","title":"divrem_unsafe"},{"location":"builtin-ILong/#parameters_31","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_45","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem_unsafe","text":"fun box rem_unsafe( y: ILong val) : ILong val","title":"rem_unsafe"},{"location":"builtin-ILong/#parameters_32","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_46","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg_unsafe","text":"fun box neg_unsafe() : ILong val","title":"neg_unsafe"},{"location":"builtin-ILong/#returns_47","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_and","text":"fun box op_and( y: ILong val) : ILong val","title":"op_and"},{"location":"builtin-ILong/#parameters_33","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_48","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_or","text":"fun box op_or( y: ILong val) : ILong val","title":"op_or"},{"location":"builtin-ILong/#parameters_34","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_49","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_xor","text":"fun box op_xor( y: ILong val) : ILong val","title":"op_xor"},{"location":"builtin-ILong/#parameters_35","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_50","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#op_not","text":"fun box op_not() : ILong val","title":"op_not"},{"location":"builtin-ILong/#returns_51","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#add","text":"fun box add( y: ILong val) : ILong val","title":"add"},{"location":"builtin-ILong/#parameters_36","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_52","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#sub","text":"fun box sub( y: ILong val) : ILong val","title":"sub"},{"location":"builtin-ILong/#parameters_37","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_53","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#mul","text":"fun box mul( y: ILong val) : ILong val","title":"mul"},{"location":"builtin-ILong/#parameters_38","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_54","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#div","text":"fun box div( y: ILong val) : ILong val","title":"div"},{"location":"builtin-ILong/#parameters_39","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_55","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#divrem","text":"fun box divrem( y: ILong val) : (ILong val , ILong val)","title":"divrem"},{"location":"builtin-ILong/#parameters_40","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_56","text":"( ILong val , ILong val)","title":"Returns"},{"location":"builtin-ILong/#rem","text":"fun box rem( y: ILong val) : ILong val","title":"rem"},{"location":"builtin-ILong/#parameters_41","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_57","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#neg","text":"fun box neg() : ILong val","title":"neg"},{"location":"builtin-ILong/#returns_58","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#eq","text":"fun box eq( y: ILong val) : Bool val","title":"eq"},{"location":"builtin-ILong/#parameters_42","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ne","text":"fun box ne( y: ILong val) : Bool val","title":"ne"},{"location":"builtin-ILong/#parameters_43","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#lt","text":"fun box lt( y: ILong val) : Bool val","title":"lt"},{"location":"builtin-ILong/#parameters_44","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#le","text":"fun box le( y: ILong val) : Bool val","title":"le"},{"location":"builtin-ILong/#parameters_45","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#ge","text":"fun box ge( y: ILong val) : Bool val","title":"ge"},{"location":"builtin-ILong/#parameters_46","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#gt","text":"fun box gt( y: ILong val) : Bool val","title":"gt"},{"location":"builtin-ILong/#parameters_47","text":"y: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-ILong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ILong/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ILong/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ILong/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ILong/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ILong/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ILong/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_1","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ILong/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ILong/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ILong/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ILong/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ILong/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ILong/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ILong/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ILong/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ILong/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ILong/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ILong/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ILong/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-ILong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ILong/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-ILong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ILong/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-ILong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ILong/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-ILong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ILong/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-ILong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ILong/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-ILong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ILong/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-ILong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ILong/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-ILong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ILong/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-ILong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ILong/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-ILong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ILong/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-ILong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ILong/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-ILong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ILong/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-ILong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ILong/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-ILong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ILong/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-ILong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ILong/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-ILong/#compare","text":"fun box compare( that: ILong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ILong/#parameters_48","text":"that: ILong val","title":"Parameters"},{"location":"builtin-ILong/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ILong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ILong/#_value","text":"fun box _value() : ILong val","title":"_value"},{"location":"builtin-ILong/#returns_99","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/","text":"ISize \u00b6 [Source] primitive val ISize is SignedInteger[ISize val, USize val] val Implements \u00b6 SignedInteger [ ISize val, USize val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ISize val) : ISize val^ Parameters \u00b6 value: ISize val Returns \u00b6 ISize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ISize val^ Parameters \u00b6 a: A Returns \u00b6 ISize val^ min_value \u00b6 [Source] new val min_value() : ISize val^ Returns \u00b6 ISize val^ max_value \u00b6 [Source] new val max_value() : ISize val^ Returns \u00b6 ISize val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : USize val Returns \u00b6 USize val bit_reverse \u00b6 [Source] fun box bit_reverse() : ISize val Returns \u00b6 ISize val bswap \u00b6 [Source] fun box bswap() : ISize val Returns \u00b6 ISize val popcount \u00b6 [Source] fun box popcount() : USize val Returns \u00b6 USize val clz \u00b6 [Source] fun box clz() : USize val Returns \u00b6 USize val ctz \u00b6 [Source] fun box ctz() : USize val Returns \u00b6 USize val clz_unsafe \u00b6 [Source] fun box clz_unsafe() : USize val Returns \u00b6 USize val ctz_unsafe \u00b6 [Source] fun box ctz_unsafe() : USize val Returns \u00b6 USize val bitwidth \u00b6 [Source] fun box bitwidth() : USize val Returns \u00b6 USize val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val max \u00b6 [Source] fun box max( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val fld \u00b6 [Source] fun box fld( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mod \u00b6 [Source] fun box mod( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val addc \u00b6 [Source] fun box addc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) subc \u00b6 [Source] fun box subc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) divc \u00b6 [Source] fun box divc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) remc \u00b6 [Source] fun box remc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) fldc \u00b6 [Source] fun box fldc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) modc \u00b6 [Source] fun box modc( y: ISize val) : (ISize val , Bool val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? div_partial \u00b6 [Source] fun box div_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ? Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) ? fld_partial \u00b6 [Source] fun box fld_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? mod_partial \u00b6 [Source] fun box mod_partial( y: ISize val) : ISize val ? Parameters \u00b6 y: ISize val Returns \u00b6 ISize val ? shl \u00b6 fun box shl( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shr \u00b6 fun box shr( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shl_unsafe \u00b6 fun box shl_unsafe( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val shr_unsafe \u00b6 fun box shr_unsafe( y: USize val) : ISize val Parameters \u00b6 y: USize val Returns \u00b6 ISize val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val sub_unsafe \u00b6 fun box sub_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mul_unsafe \u00b6 fun box mul_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val div_unsafe \u00b6 fun box div_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) rem_unsafe \u00b6 fun box rem_unsafe( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val neg_unsafe \u00b6 fun box neg_unsafe() : ISize val Returns \u00b6 ISize val op_and \u00b6 fun box op_and( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_or \u00b6 fun box op_or( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_xor \u00b6 fun box op_xor( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val op_not \u00b6 fun box op_not() : ISize val Returns \u00b6 ISize val add \u00b6 fun box add( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val sub \u00b6 fun box sub( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val mul \u00b6 fun box mul( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val div \u00b6 fun box div( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val divrem \u00b6 fun box divrem( y: ISize val) : (ISize val , ISize val) Parameters \u00b6 y: ISize val Returns \u00b6 ( ISize val , ISize val) rem \u00b6 fun box rem( y: ISize val) : ISize val Parameters \u00b6 y: ISize val Returns \u00b6 ISize val neg \u00b6 fun box neg() : ISize val Returns \u00b6 ISize val eq \u00b6 fun box eq( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val le \u00b6 fun box le( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ISize val) : Bool val Parameters \u00b6 y: ISize val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ISize val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ISize val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : ISize val Returns \u00b6 ISize val","title":"primitive ISize"},{"location":"builtin-ISize/#isize","text":"[Source] primitive val ISize is SignedInteger[ISize val, USize val] val","title":"ISize"},{"location":"builtin-ISize/#implements","text":"SignedInteger [ ISize val, USize val] val","title":"Implements"},{"location":"builtin-ISize/#constructors","text":"","title":"Constructors"},{"location":"builtin-ISize/#create","text":"[Source] new val create( value: ISize val) : ISize val^","title":"create"},{"location":"builtin-ISize/#parameters","text":"value: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ISize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ISize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ISize/#returns_1","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#min_value","text":"[Source] new val min_value() : ISize val^","title":"min_value"},{"location":"builtin-ISize/#returns_2","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#max_value","text":"[Source] new val max_value() : ISize val^","title":"max_value"},{"location":"builtin-ISize/#returns_3","text":"ISize val^","title":"Returns"},{"location":"builtin-ISize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ISize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-ISize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bit_reverse","text":"[Source] fun box bit_reverse() : ISize val","title":"bit_reverse"},{"location":"builtin-ISize/#returns_5","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#bswap","text":"[Source] fun box bswap() : ISize val","title":"bswap"},{"location":"builtin-ISize/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-ISize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-ISize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-ISize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#clz_unsafe","text":"[Source] fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-ISize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#ctz_unsafe","text":"[Source] fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-ISize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-ISize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ISize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#min","text":"[Source] fun box min( y: ISize val) : ISize val","title":"min"},{"location":"builtin-ISize/#parameters_2","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_14","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#max","text":"[Source] fun box max( y: ISize val) : ISize val","title":"max"},{"location":"builtin-ISize/#parameters_3","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_15","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#fld","text":"[Source] fun box fld( y: ISize val) : ISize val","title":"fld"},{"location":"builtin-ISize/#parameters_4","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_16","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: ISize val) : ISize val","title":"fld_unsafe"},{"location":"builtin-ISize/#parameters_5","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_17","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mod","text":"[Source] fun box mod( y: ISize val) : ISize val","title":"mod"},{"location":"builtin-ISize/#parameters_6","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_18","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: ISize val) : ISize val","title":"mod_unsafe"},{"location":"builtin-ISize/#parameters_7","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_19","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#addc","text":"[Source] fun box addc( y: ISize val) : (ISize val , Bool val)","title":"addc"},{"location":"builtin-ISize/#parameters_8","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_20","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#subc","text":"[Source] fun box subc( y: ISize val) : (ISize val , Bool val)","title":"subc"},{"location":"builtin-ISize/#parameters_9","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_21","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#mulc","text":"[Source] fun box mulc( y: ISize val) : (ISize val , Bool val)","title":"mulc"},{"location":"builtin-ISize/#parameters_10","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_22","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#divc","text":"[Source] fun box divc( y: ISize val) : (ISize val , Bool val)","title":"divc"},{"location":"builtin-ISize/#parameters_11","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_23","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#remc","text":"[Source] fun box remc( y: ISize val) : (ISize val , Bool val)","title":"remc"},{"location":"builtin-ISize/#parameters_12","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_24","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#fldc","text":"[Source] fun box fldc( y: ISize val) : (ISize val , Bool val)","title":"fldc"},{"location":"builtin-ISize/#parameters_13","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_25","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#modc","text":"[Source] fun box modc( y: ISize val) : (ISize val , Bool val)","title":"modc"},{"location":"builtin-ISize/#parameters_14","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_26","text":"( ISize val , Bool val)","title":"Returns"},{"location":"builtin-ISize/#add_partial","text":"[Source] fun box add_partial( y: ISize val) : ISize val ?","title":"add_partial"},{"location":"builtin-ISize/#parameters_15","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_27","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#sub_partial","text":"[Source] fun box sub_partial( y: ISize val) : ISize val ?","title":"sub_partial"},{"location":"builtin-ISize/#parameters_16","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_28","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mul_partial","text":"[Source] fun box mul_partial( y: ISize val) : ISize val ?","title":"mul_partial"},{"location":"builtin-ISize/#parameters_17","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_29","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#div_partial","text":"[Source] fun box div_partial( y: ISize val) : ISize val ?","title":"div_partial"},{"location":"builtin-ISize/#parameters_18","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_30","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#rem_partial","text":"[Source] fun box rem_partial( y: ISize val) : ISize val ?","title":"rem_partial"},{"location":"builtin-ISize/#parameters_19","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_31","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#divrem_partial","text":"[Source] fun box divrem_partial( y: ISize val) : (ISize val , ISize val) ?","title":"divrem_partial"},{"location":"builtin-ISize/#parameters_20","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_32","text":"( ISize val , ISize val) ?","title":"Returns"},{"location":"builtin-ISize/#fld_partial","text":"[Source] fun box fld_partial( y: ISize val) : ISize val ?","title":"fld_partial"},{"location":"builtin-ISize/#parameters_21","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_33","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#mod_partial","text":"[Source] fun box mod_partial( y: ISize val) : ISize val ?","title":"mod_partial"},{"location":"builtin-ISize/#parameters_22","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_34","text":"ISize val ?","title":"Returns"},{"location":"builtin-ISize/#shl","text":"fun box shl( y: USize val) : ISize val","title":"shl"},{"location":"builtin-ISize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_35","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr","text":"fun box shr( y: USize val) : ISize val","title":"shr"},{"location":"builtin-ISize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_36","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : ISize val","title":"shl_unsafe"},{"location":"builtin-ISize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_37","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : ISize val","title":"shr_unsafe"},{"location":"builtin-ISize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-ISize/#returns_38","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ISize/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-ISize/#add_unsafe","text":"fun box add_unsafe( y: ISize val) : ISize val","title":"add_unsafe"},{"location":"builtin-ISize/#parameters_27","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_40","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub_unsafe","text":"fun box sub_unsafe( y: ISize val) : ISize val","title":"sub_unsafe"},{"location":"builtin-ISize/#parameters_28","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_41","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul_unsafe","text":"fun box mul_unsafe( y: ISize val) : ISize val","title":"mul_unsafe"},{"location":"builtin-ISize/#parameters_29","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_42","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div_unsafe","text":"fun box div_unsafe( y: ISize val) : ISize val","title":"div_unsafe"},{"location":"builtin-ISize/#parameters_30","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_43","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem_unsafe","text":"fun box divrem_unsafe( y: ISize val) : (ISize val , ISize val)","title":"divrem_unsafe"},{"location":"builtin-ISize/#parameters_31","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_44","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem_unsafe","text":"fun box rem_unsafe( y: ISize val) : ISize val","title":"rem_unsafe"},{"location":"builtin-ISize/#parameters_32","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_45","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg_unsafe","text":"fun box neg_unsafe() : ISize val","title":"neg_unsafe"},{"location":"builtin-ISize/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_and","text":"fun box op_and( y: ISize val) : ISize val","title":"op_and"},{"location":"builtin-ISize/#parameters_33","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_47","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_or","text":"fun box op_or( y: ISize val) : ISize val","title":"op_or"},{"location":"builtin-ISize/#parameters_34","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_48","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_xor","text":"fun box op_xor( y: ISize val) : ISize val","title":"op_xor"},{"location":"builtin-ISize/#parameters_35","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_49","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#op_not","text":"fun box op_not() : ISize val","title":"op_not"},{"location":"builtin-ISize/#returns_50","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#add","text":"fun box add( y: ISize val) : ISize val","title":"add"},{"location":"builtin-ISize/#parameters_36","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_51","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#sub","text":"fun box sub( y: ISize val) : ISize val","title":"sub"},{"location":"builtin-ISize/#parameters_37","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_52","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#mul","text":"fun box mul( y: ISize val) : ISize val","title":"mul"},{"location":"builtin-ISize/#parameters_38","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_53","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#div","text":"fun box div( y: ISize val) : ISize val","title":"div"},{"location":"builtin-ISize/#parameters_39","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_54","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#divrem","text":"fun box divrem( y: ISize val) : (ISize val , ISize val)","title":"divrem"},{"location":"builtin-ISize/#parameters_40","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_55","text":"( ISize val , ISize val)","title":"Returns"},{"location":"builtin-ISize/#rem","text":"fun box rem( y: ISize val) : ISize val","title":"rem"},{"location":"builtin-ISize/#parameters_41","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_56","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#neg","text":"fun box neg() : ISize val","title":"neg"},{"location":"builtin-ISize/#returns_57","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#eq","text":"fun box eq( y: ISize val) : Bool val","title":"eq"},{"location":"builtin-ISize/#parameters_42","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ne","text":"fun box ne( y: ISize val) : Bool val","title":"ne"},{"location":"builtin-ISize/#parameters_43","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#lt","text":"fun box lt( y: ISize val) : Bool val","title":"lt"},{"location":"builtin-ISize/#parameters_44","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#le","text":"fun box le( y: ISize val) : Bool val","title":"le"},{"location":"builtin-ISize/#parameters_45","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#ge","text":"fun box ge( y: ISize val) : Bool val","title":"ge"},{"location":"builtin-ISize/#parameters_46","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#gt","text":"fun box gt( y: ISize val) : Bool val","title":"gt"},{"location":"builtin-ISize/#parameters_47","text":"y: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ISize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-ISize/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ISize/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ISize/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ISize/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ISize/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ISize/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ISize/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ISize/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_1","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ISize/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ISize/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ISize/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ISize/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ISize/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ISize/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ISize/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ISize/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ISize/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ISize/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ISize/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-ISize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ISize/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-ISize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ISize/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-ISize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ISize/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-ISize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ISize/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-ISize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ISize/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-ISize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ISize/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-ISize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ISize/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-ISize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ISize/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-ISize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ISize/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-ISize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ISize/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-ISize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ISize/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-ISize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ISize/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-ISize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ISize/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-ISize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ISize/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-ISize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ISize/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-ISize/#compare","text":"fun box compare( that: ISize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ISize/#parameters_48","text":"that: ISize val","title":"Parameters"},{"location":"builtin-ISize/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ISize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ISize/#_value","text":"fun box _value() : ISize val","title":"_value"},{"location":"builtin-ISize/#returns_99","text":"ISize val","title":"Returns"},{"location":"builtin-InputNotify/","text":"InputNotify \u00b6 [Source] Notification for data arriving via an input stream. interface ref InputNotify Public Functions \u00b6 apply \u00b6 [Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val Parameters \u00b6 data: Array [ U8 val] iso Returns \u00b6 None val dispose \u00b6 [Source] Called when no more data will arrive on the stream. fun ref dispose() : None val Returns \u00b6 None val","title":"interface InputNotify"},{"location":"builtin-InputNotify/#inputnotify","text":"[Source] Notification for data arriving via an input stream. interface ref InputNotify","title":"InputNotify"},{"location":"builtin-InputNotify/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-InputNotify/#apply","text":"[Source] Called when data is available on the stream. fun ref apply( data: Array[U8 val] iso) : None val","title":"apply"},{"location":"builtin-InputNotify/#parameters","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-InputNotify/#returns","text":"None val","title":"Returns"},{"location":"builtin-InputNotify/#dispose","text":"[Source] Called when no more data will arrive on the stream. fun ref dispose() : None val","title":"dispose"},{"location":"builtin-InputNotify/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-InputStream/","text":"InputStream \u00b6 [Source] Asynchronous access to some input stream. interface tag InputStream Public Behaviours \u00b6 apply \u00b6 [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32) Parameters \u00b6 notify: ( InputNotify iso | None val) chunk_size: USize val = 32 dispose \u00b6 [Source] Clear the notifier in order to shut down input. be dispose()","title":"interface InputStream"},{"location":"builtin-InputStream/#inputstream","text":"[Source] Asynchronous access to some input stream. interface tag InputStream","title":"InputStream"},{"location":"builtin-InputStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-InputStream/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32)","title":"apply"},{"location":"builtin-InputStream/#parameters","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = 32","title":"Parameters"},{"location":"builtin-InputStream/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Int/","text":"Int \u00b6 [Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Int"},{"location":"builtin-Int/#int","text":"[Source] type Int is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Int"},{"location":"builtin-Int/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-Integer/","text":"Integer[A: Integer [A] val] \u00b6 [Source] trait val Integer[A: Integer[A] val] is Real[A] val Implements \u00b6 Real [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 add_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] Floored division, rounded towards negative infinity, as opposed to div which rounds towards zero. Unsafe Operation If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] Calculates the modulo of this number after floored division by y . Unsafe Operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] Divides this number by y , rounds the result towards zero. If y is 0 or the operation overflows, this function errors. fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is 0 or the operation overflows, this function errors. fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] Divides this number by y and calculates the remainder of the operation. If y is 0 or the operation overflows, this function errors. fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? fld_partial \u00b6 [Source] Floored integer division, rounded towards negative infinity. If y is 0 or the operation overflows, this function errors fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_partial \u00b6 [Source] Calculates the modulo of this number and y after floored division ( fld ). The result has the sign of the divisor. If y is 0 or the operation overflows, this function errors. fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? neg_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] Calculate the remainder of this number divided by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fldc \u00b6 [Source] Divide this integer by y and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) modc \u00b6 [Source] Calculate the modulo of this number after floored division by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait Integer"},{"location":"builtin-Integer/#integer91a-integer91a93-val93","text":"[Source] trait val Integer[A: Integer[A] val] is Real[A] val","title":"Integer[A: Integer[A] val]"},{"location":"builtin-Integer/#implements","text":"Real [A] val","title":"Implements"},{"location":"builtin-Integer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Integer/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Integer/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Integer/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Integer/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Integer/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Integer/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Integer/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Integer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Integer/#add_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-Integer/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-Integer/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-Integer/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Integer/#div_unsafe","text":"[Source] Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-Integer/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem_unsafe","text":"[Source] Calculates the quotient of this number and y and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-Integer/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem_unsafe","text":"[Source] Calculates the remainder of this number divided by y . Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-Integer/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Integer/#fld_unsafe","text":"[Source] Floored division, rounded towards negative infinity, as opposed to div which rounds towards zero. Unsafe Operation If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-Integer/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Integer/#mod_unsafe","text":"[Source] Calculates the modulo of this number after floored division by y . Unsafe Operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-Integer/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_11","text":"A","title":"Returns"},{"location":"builtin-Integer/#add_partial","text":"[Source] Add y to this number. If the operation overflows this function errors. fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-Integer/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_12","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#sub_partial","text":"[Source] Subtract y from this number. If the operation overflows/underflows this function errors. fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-Integer/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mul_partial","text":"[Source] Multiply y with this number. If the operation overflows this function errors. fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-Integer/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_14","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#div_partial","text":"[Source] Divides this number by y , rounds the result towards zero. If y is 0 or the operation overflows, this function errors. fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-Integer/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_15","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#rem_partial","text":"[Source] Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is 0 or the operation overflows, this function errors. fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-Integer/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_16","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#divrem_partial","text":"[Source] Divides this number by y and calculates the remainder of the operation. If y is 0 or the operation overflows, this function errors. fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-Integer/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_17","text":"(A , A) ?","title":"Returns"},{"location":"builtin-Integer/#fld_partial","text":"[Source] Floored integer division, rounded towards negative infinity. If y is 0 or the operation overflows, this function errors fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-Integer/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_18","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#mod_partial","text":"[Source] Calculates the modulo of this number and y after floored division ( fld ). The result has the sign of the divisor. If y is 0 or the operation overflows, this function errors. fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-Integer/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_19","text":"A ?","title":"Returns"},{"location":"builtin-Integer/#neg_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-Integer/#returns_20","text":"A","title":"Returns"},{"location":"builtin-Integer/#addc","text":"[Source] Add y to this integer and return the result and a flag indicating overflow. fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-Integer/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_21","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#subc","text":"[Source] Subtract y from this integer and return the result and a flag indicating overflow. fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-Integer/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_22","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#mulc","text":"[Source] Multiply y with this integer and return the result and a flag indicating overflow. fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-Integer/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_23","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#divc","text":"[Source] Divide this integer by y and return the result and a flag indicating overflow or division by zero. fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-Integer/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_24","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#remc","text":"[Source] Calculate the remainder of this number divided by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-Integer/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_25","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#fldc","text":"[Source] Divide this integer by y and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-Integer/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_26","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#modc","text":"[Source] Calculate the modulo of this number after floored division by y and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-Integer/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_27","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-Integer/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-Integer/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_28","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-Integer/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_29","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-Integer/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_30","text":"A","title":"Returns"},{"location":"builtin-Integer/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-Integer/#returns_31","text":"A","title":"Returns"},{"location":"builtin-Integer/#bit_reverse","text":"[Source] Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-Integer/#returns_32","text":"A","title":"Returns"},{"location":"builtin-Integer/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-Integer/#returns_33","text":"A","title":"Returns"},{"location":"builtin-Integer/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Integer/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_34","text":"A","title":"Returns"},{"location":"builtin-Integer/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Integer/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_35","text":"A","title":"Returns"},{"location":"builtin-Integer/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Integer/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_36","text":"A","title":"Returns"},{"location":"builtin-Integer/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-Integer/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_37","text":"A","title":"Returns"},{"location":"builtin-Integer/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Integer/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_38","text":"(A , A)","title":"Returns"},{"location":"builtin-Integer/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Integer/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_39","text":"A","title":"Returns"},{"location":"builtin-Integer/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Integer/#returns_40","text":"A","title":"Returns"},{"location":"builtin-Integer/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-Integer/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_41","text":"A","title":"Returns"},{"location":"builtin-Integer/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-Integer/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_42","text":"A","title":"Returns"},{"location":"builtin-Integer/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-Integer/#parameters_36","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_43","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-Integer/#parameters_37","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_44","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-Integer/#parameters_38","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_45","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-Integer/#parameters_39","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_46","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-Integer/#parameters_40","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_47","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-Integer/#parameters_41","text":"y: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_48","text":"Bool val","title":"Returns"},{"location":"builtin-Integer/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Integer/#parameters_42","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_49","text":"A","title":"Returns"},{"location":"builtin-Integer/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Integer/#parameters_43","text":"y: A","title":"Parameters"},{"location":"builtin-Integer/#returns_50","text":"A","title":"Returns"},{"location":"builtin-Integer/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Integer/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Integer/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Integer/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-Integer/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Integer/#returns_54","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Integer/#returns_55","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Integer/#returns_56","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Integer/#returns_57","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Integer/#returns_58","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Integer/#returns_59","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Integer/#returns_60","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Integer/#returns_61","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Integer/#returns_62","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Integer/#returns_63","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Integer/#returns_64","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Integer/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Integer/#returns_66","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Integer/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Integer/#returns_68","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Integer/#returns_69","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Integer/#returns_70","text":"I8 val","title":"Returns"},{"location":"builtin-Integer/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Integer/#returns_71","text":"I16 val","title":"Returns"},{"location":"builtin-Integer/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Integer/#returns_72","text":"I32 val","title":"Returns"},{"location":"builtin-Integer/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Integer/#returns_73","text":"I64 val","title":"Returns"},{"location":"builtin-Integer/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Integer/#returns_74","text":"I128 val","title":"Returns"},{"location":"builtin-Integer/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Integer/#returns_75","text":"ILong val","title":"Returns"},{"location":"builtin-Integer/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Integer/#returns_76","text":"ISize val","title":"Returns"},{"location":"builtin-Integer/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Integer/#returns_77","text":"U8 val","title":"Returns"},{"location":"builtin-Integer/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Integer/#returns_78","text":"U16 val","title":"Returns"},{"location":"builtin-Integer/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Integer/#returns_79","text":"U32 val","title":"Returns"},{"location":"builtin-Integer/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Integer/#returns_80","text":"U64 val","title":"Returns"},{"location":"builtin-Integer/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Integer/#returns_81","text":"U128 val","title":"Returns"},{"location":"builtin-Integer/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Integer/#returns_82","text":"ULong val","title":"Returns"},{"location":"builtin-Integer/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Integer/#returns_83","text":"USize val","title":"Returns"},{"location":"builtin-Integer/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Integer/#returns_84","text":"F32 val","title":"Returns"},{"location":"builtin-Integer/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Integer/#returns_85","text":"F64 val","title":"Returns"},{"location":"builtin-Integer/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Integer/#parameters_44","text":"that: box->A","title":"Parameters"},{"location":"builtin-Integer/#returns_86","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Integer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Integer/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Integer/#returns_87","text":"A","title":"Returns"},{"location":"builtin-Iterator/","text":"Iterator[A: A] \u00b6 [Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness. Usage \u00b6 Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this. Implementing Iterators \u00b6 Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness. Example \u00b6 // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A] Public Functions \u00b6 has_next \u00b6 [Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ? Returns \u00b6 A ?","title":"interface Iterator"},{"location":"builtin-Iterator/#iterator91a-a93","text":"[Source] Iterators generate a series of values, one value at a time on each call to next() . An Iterator is considered exhausted, once its has_next() method returns false . Thus every call to next() should be preceeded with a call to has_next() to check for exhaustiveness.","title":"Iterator[A: A]"},{"location":"builtin-Iterator/#usage","text":"Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: while iterator.has_next() do let elem = iterator.next()? // do something with elem end The For -loop provides a more concise way of iteration: for elem in iterator do // do something with elem end Iteration using While is more flexible as it allows to continue iterating if a call to next() errors. The For -loop does not allow this.","title":"Usage"},{"location":"builtin-Iterator/#implementing-iterators","text":"Iterator implementations need to adhere to the following rules to be considered well-behaved: If the Iterator is exhausted, has_next() needs to return false . Once has_next() returned false it is not allowed to switch back to true (Unless the Iterator supports rewinding) has_next() does not change its returned value if next() has not been called. That means, that between two calls to next() any number of calls to has_next() need to return the same value. (Unless the Iterator supports rewinding) A call to next() erroring does not necessarily denote exhaustiveness.","title":"Implementing Iterators"},{"location":"builtin-Iterator/#example","text":"// Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem interface ref Iterator[A: A]","title":"Example"},{"location":"builtin-Iterator/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Iterator/#has_next","text":"[Source] Returns true if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to next() is a valid part of this iterator. Returns false if this Iterator is exhausted. The behavior of next() after this function returned false is undefined, it might throw an error or return values which are not part of this Iterator. fun ref has_next() : Bool val","title":"has_next"},{"location":"builtin-Iterator/#returns","text":"Bool val","title":"Returns"},{"location":"builtin-Iterator/#next","text":"[Source] Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. fun ref next() : A ?","title":"next"},{"location":"builtin-Iterator/#returns_1","text":"A ?","title":"Returns"},{"location":"builtin-Less/","text":"Less \u00b6 [Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref Implements \u00b6 Equatable [( Less val | Equal val | Greater val)] ref Constructors \u00b6 create \u00b6 [Source] new val create() : Less val^ Returns \u00b6 Less val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val Parameters \u00b6 that: ( Less val | Equal val | Greater val) Returns \u00b6 Bool val","title":"primitive Less"},{"location":"builtin-Less/#less","text":"[Source] primitive val Less is Equatable[(Less val | Equal val | Greater val)] ref","title":"Less"},{"location":"builtin-Less/#implements","text":"Equatable [( Less val | Equal val | Greater val)] ref","title":"Implements"},{"location":"builtin-Less/#constructors","text":"","title":"Constructors"},{"location":"builtin-Less/#create","text":"[Source] new val create() : Less val^","title":"create"},{"location":"builtin-Less/#returns","text":"Less val^","title":"Returns"},{"location":"builtin-Less/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Less/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Less/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-Less/#eq","text":"[Source] fun box eq( that: (Less val | Equal val | Greater val)) : Bool val","title":"eq"},{"location":"builtin-Less/#parameters","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Less/#ne","text":"[Source] fun box ne( that: (Less val | Equal val | Greater val)) : Bool val","title":"ne"},{"location":"builtin-Less/#parameters_1","text":"that: ( Less val | Equal val | Greater val)","title":"Parameters"},{"location":"builtin-Less/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-None/","text":"None \u00b6 [Source] primitive val None is Stringable box Implements \u00b6 Stringable box Constructors \u00b6 create \u00b6 [Source] new val create() : None val^ Returns \u00b6 None val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: None val) : Bool val Parameters \u00b6 that: None val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: None val) : Bool val Parameters \u00b6 that: None val Returns \u00b6 Bool val","title":"primitive None"},{"location":"builtin-None/#none","text":"[Source] primitive val None is Stringable box","title":"None"},{"location":"builtin-None/#implements","text":"Stringable box","title":"Implements"},{"location":"builtin-None/#constructors","text":"","title":"Constructors"},{"location":"builtin-None/#create","text":"[Source] new val create() : None val^","title":"create"},{"location":"builtin-None/#returns","text":"None val^","title":"Returns"},{"location":"builtin-None/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-None/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-None/#returns_1","text":"String iso^","title":"Returns"},{"location":"builtin-None/#eq","text":"[Source] fun box eq( that: None val) : Bool val","title":"eq"},{"location":"builtin-None/#parameters","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-None/#ne","text":"[Source] fun box ne( that: None val) : Bool val","title":"ne"},{"location":"builtin-None/#parameters_1","text":"that: None val","title":"Parameters"},{"location":"builtin-None/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-NullablePointer/","text":"NullablePointer[A: A] \u00b6 [Source] A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref NullablePointer[A: A] Constructors \u00b6 create \u00b6 [Source] This re-encodes the type of that from A to NullablePointer[A], allowing that to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : NullablePointer[A] ref^ Parameters \u00b6 that: A Returns \u00b6 NullablePointer [A] ref^ none \u00b6 [Source] This returns a null pointer typed as a NullablePointer[A]. new ref none() : NullablePointer[A] ref^ Returns \u00b6 NullablePointer [A] ref^ Public Functions \u00b6 apply \u00b6 [Source] This re-encodes the type of this from NullablePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this->A ? Returns \u00b6 this->A ? is_none \u00b6 [Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val Returns \u00b6 Bool val","title":"struct NullablePointer"},{"location":"builtin-NullablePointer/#nullablepointer91a-a93","text":"[Source] A NullablePointer[A] is used to encode a possibly-null type. It should only be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). struct ref NullablePointer[A: A]","title":"NullablePointer[A: A]"},{"location":"builtin-NullablePointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-NullablePointer/#create","text":"[Source] This re-encodes the type of that from A to NullablePointer[A], allowing that to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for that . new ref create( that: A) : NullablePointer[A] ref^","title":"create"},{"location":"builtin-NullablePointer/#parameters","text":"that: A","title":"Parameters"},{"location":"builtin-NullablePointer/#returns","text":"NullablePointer [A] ref^","title":"Returns"},{"location":"builtin-NullablePointer/#none","text":"[Source] This returns a null pointer typed as a NullablePointer[A]. new ref none() : NullablePointer[A] ref^","title":"none"},{"location":"builtin-NullablePointer/#returns_1","text":"NullablePointer [A] ref^","title":"Returns"},{"location":"builtin-NullablePointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-NullablePointer/#apply","text":"[Source] This re-encodes the type of this from NullablePointer[A] to A, allowing this to be assigned to a field of variable of type A. If this is a null pointer, an error is raised. fun box apply() : this->A ?","title":"apply"},{"location":"builtin-NullablePointer/#returns_2","text":"this->A ?","title":"Returns"},{"location":"builtin-NullablePointer/#is_none","text":"[Source] Returns true if this is null (ie apply would raise an error). fun box is_none() : Bool val","title":"is_none"},{"location":"builtin-NullablePointer/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Number/","text":"Number \u00b6 [Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"type Number"},{"location":"builtin-Number/#number","text":"[Source] type Number is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Number"},{"location":"builtin-Number/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)","title":"Type Alias For"},{"location":"builtin-OutStream/","text":"OutStream \u00b6 [Source] Asnychronous access to some output stream. interface tag OutStream Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush the stream. be flush()","title":"interface OutStream"},{"location":"builtin-OutStream/#outstream","text":"[Source] Asnychronous access to some output stream. interface tag OutStream","title":"OutStream"},{"location":"builtin-OutStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-OutStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-OutStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-OutStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-OutStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-OutStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-OutStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-OutStream/#flush","text":"[Source] Flush the stream. be flush()","title":"flush"},{"location":"builtin-Platform/","text":"Platform \u00b6 [Source] primitive val Platform Constructors \u00b6 create \u00b6 [Source] new val create() : Platform val^ Returns \u00b6 Platform val^ Public Functions \u00b6 bsd \u00b6 [Source] fun box bsd() : Bool val Returns \u00b6 Bool val freebsd \u00b6 [Source] fun box freebsd() : Bool val Returns \u00b6 Bool val dragonfly \u00b6 [Source] fun box dragonfly() : Bool val Returns \u00b6 Bool val openbsd \u00b6 [Source] fun box openbsd() : Bool val Returns \u00b6 Bool val linux \u00b6 [Source] fun box linux() : Bool val Returns \u00b6 Bool val osx \u00b6 [Source] fun box osx() : Bool val Returns \u00b6 Bool val posix \u00b6 [Source] fun box posix() : Bool val Returns \u00b6 Bool val windows \u00b6 [Source] fun box windows() : Bool val Returns \u00b6 Bool val x86 \u00b6 [Source] fun box x86() : Bool val Returns \u00b6 Bool val arm \u00b6 [Source] fun box arm() : Bool val Returns \u00b6 Bool val lp64 \u00b6 [Source] fun box lp64() : Bool val Returns \u00b6 Bool val llp64 \u00b6 [Source] fun box llp64() : Bool val Returns \u00b6 Bool val ilp32 \u00b6 [Source] fun box ilp32() : Bool val Returns \u00b6 Bool val bigendian \u00b6 [Source] fun box bigendian() : Bool val Returns \u00b6 Bool val littleendian \u00b6 [Source] fun box littleendian() : Bool val Returns \u00b6 Bool val native128 \u00b6 [Source] fun box native128() : Bool val Returns \u00b6 Bool val debug \u00b6 [Source] fun box debug() : Bool val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Platform val) : Bool val Parameters \u00b6 that: Platform val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Platform val) : Bool val Parameters \u00b6 that: Platform val Returns \u00b6 Bool val","title":"primitive Platform"},{"location":"builtin-Platform/#platform","text":"[Source] primitive val Platform","title":"Platform"},{"location":"builtin-Platform/#constructors","text":"","title":"Constructors"},{"location":"builtin-Platform/#create","text":"[Source] new val create() : Platform val^","title":"create"},{"location":"builtin-Platform/#returns","text":"Platform val^","title":"Returns"},{"location":"builtin-Platform/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Platform/#bsd","text":"[Source] fun box bsd() : Bool val","title":"bsd"},{"location":"builtin-Platform/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#freebsd","text":"[Source] fun box freebsd() : Bool val","title":"freebsd"},{"location":"builtin-Platform/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#dragonfly","text":"[Source] fun box dragonfly() : Bool val","title":"dragonfly"},{"location":"builtin-Platform/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#openbsd","text":"[Source] fun box openbsd() : Bool val","title":"openbsd"},{"location":"builtin-Platform/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#linux","text":"[Source] fun box linux() : Bool val","title":"linux"},{"location":"builtin-Platform/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#osx","text":"[Source] fun box osx() : Bool val","title":"osx"},{"location":"builtin-Platform/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#posix","text":"[Source] fun box posix() : Bool val","title":"posix"},{"location":"builtin-Platform/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#windows","text":"[Source] fun box windows() : Bool val","title":"windows"},{"location":"builtin-Platform/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#x86","text":"[Source] fun box x86() : Bool val","title":"x86"},{"location":"builtin-Platform/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#arm","text":"[Source] fun box arm() : Bool val","title":"arm"},{"location":"builtin-Platform/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#lp64","text":"[Source] fun box lp64() : Bool val","title":"lp64"},{"location":"builtin-Platform/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#llp64","text":"[Source] fun box llp64() : Bool val","title":"llp64"},{"location":"builtin-Platform/#returns_12","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ilp32","text":"[Source] fun box ilp32() : Bool val","title":"ilp32"},{"location":"builtin-Platform/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#bigendian","text":"[Source] fun box bigendian() : Bool val","title":"bigendian"},{"location":"builtin-Platform/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#littleendian","text":"[Source] fun box littleendian() : Bool val","title":"littleendian"},{"location":"builtin-Platform/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#native128","text":"[Source] fun box native128() : Bool val","title":"native128"},{"location":"builtin-Platform/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#debug","text":"[Source] fun box debug() : Bool val","title":"debug"},{"location":"builtin-Platform/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#eq","text":"[Source] fun box eq( that: Platform val) : Bool val","title":"eq"},{"location":"builtin-Platform/#parameters","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Platform/#ne","text":"[Source] fun box ne( that: Platform val) : Bool val","title":"ne"},{"location":"builtin-Platform/#parameters_1","text":"that: Platform val","title":"Parameters"},{"location":"builtin-Platform/#returns_19","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/","text":"Pointer[A: A] \u00b6 [Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A] Constructors \u00b6 create \u00b6 [Source] A null pointer. new ref create() : Pointer[A] ref^ Returns \u00b6 Pointer [A] ref^ _alloc \u00b6 [Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^ Parameters \u00b6 len: USize val Returns \u00b6 Pointer [A] ref^ Public Functions \u00b6 offset \u00b6 [Source] Return a tag pointer to the n-th element. fun tag offset( n: USize val) : Pointer[A] tag Parameters \u00b6 n: USize val Returns \u00b6 Pointer [A] tag usize \u00b6 [Source] Convert the pointer into an integer. fun tag usize() : USize val Returns \u00b6 USize val is_null \u00b6 [Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val Returns \u00b6 Bool val eq \u00b6 [Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val lt \u00b6 [Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val ne \u00b6 [Source] fun tag ne( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val le \u00b6 [Source] fun tag le( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val ge \u00b6 [Source] fun tag ge( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val gt \u00b6 [Source] fun tag gt( that: Pointer[A] tag) : Bool val Parameters \u00b6 that: Pointer [A] tag Returns \u00b6 Bool val hash \u00b6 [Source] Returns a hash of the address. fun tag hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val Returns \u00b6 U64 val Private Functions \u00b6 _realloc \u00b6 [Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref Parameters \u00b6 len: USize val Returns \u00b6 Pointer [A] ref _unsafe \u00b6 [Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref Returns \u00b6 Pointer [A] ref _convert[B: B] \u00b6 [Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this->Pointer[B] ref Returns \u00b6 this-> Pointer [B] ref _apply \u00b6 [Source] Retrieve index i. fun box _apply( i: USize val) : this->A Parameters \u00b6 i: USize val Returns \u00b6 this->A _update \u00b6 [Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^ Parameters \u00b6 i: USize val value: A! Returns \u00b6 A^ _offset \u00b6 [Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this->Pointer[A] ref Parameters \u00b6 n: USize val Returns \u00b6 this-> Pointer [A] ref _element_size \u00b6 [Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val Returns \u00b6 USize val _insert \u00b6 [Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref Parameters \u00b6 n: USize val len: USize val Returns \u00b6 Pointer [A] ref _delete \u00b6 [Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^ Parameters \u00b6 n: USize val len: USize val Returns \u00b6 A^ _copy_to \u00b6 [Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this->A!] ref, n: USize val) : this->Pointer[A] ref Parameters \u00b6 that: Pointer [this->A!] ref n: USize val Returns \u00b6 this-> Pointer [A] ref","title":"struct Pointer"},{"location":"builtin-Pointer/#pointer91a-a93","text":"[Source] A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. struct ref Pointer[A: A]","title":"Pointer[A: A]"},{"location":"builtin-Pointer/#constructors","text":"","title":"Constructors"},{"location":"builtin-Pointer/#create","text":"[Source] A null pointer. new ref create() : Pointer[A] ref^","title":"create"},{"location":"builtin-Pointer/#returns","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#_alloc","text":"[Source] Space for len instances of A. new ref _alloc( len: USize val) : Pointer[A] ref^","title":"_alloc"},{"location":"builtin-Pointer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_1","text":"Pointer [A] ref^","title":"Returns"},{"location":"builtin-Pointer/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Pointer/#offset","text":"[Source] Return a tag pointer to the n-th element. fun tag offset( n: USize val) : Pointer[A] tag","title":"offset"},{"location":"builtin-Pointer/#parameters_1","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_2","text":"Pointer [A] tag","title":"Returns"},{"location":"builtin-Pointer/#usize","text":"[Source] Convert the pointer into an integer. fun tag usize() : USize val","title":"usize"},{"location":"builtin-Pointer/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#is_null","text":"[Source] Return true for a null pointer, false for anything else. fun tag is_null() : Bool val","title":"is_null"},{"location":"builtin-Pointer/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#eq","text":"[Source] Return true if this address is that address. fun tag eq( that: Pointer[A] tag) : Bool val","title":"eq"},{"location":"builtin-Pointer/#parameters_2","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#lt","text":"[Source] Return true if this address is less than that address. fun tag lt( that: Pointer[A] tag) : Bool val","title":"lt"},{"location":"builtin-Pointer/#parameters_3","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ne","text":"[Source] fun tag ne( that: Pointer[A] tag) : Bool val","title":"ne"},{"location":"builtin-Pointer/#parameters_4","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_7","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#le","text":"[Source] fun tag le( that: Pointer[A] tag) : Bool val","title":"le"},{"location":"builtin-Pointer/#parameters_5","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_8","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#ge","text":"[Source] fun tag ge( that: Pointer[A] tag) : Bool val","title":"ge"},{"location":"builtin-Pointer/#parameters_6","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#gt","text":"[Source] fun tag gt( that: Pointer[A] tag) : Bool val","title":"gt"},{"location":"builtin-Pointer/#parameters_7","text":"that: Pointer [A] tag","title":"Parameters"},{"location":"builtin-Pointer/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-Pointer/#hash","text":"[Source] Returns a hash of the address. fun tag hash() : USize val","title":"hash"},{"location":"builtin-Pointer/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#hash64","text":"[Source] Returns a 64-bit hash of the address. fun tag hash64() : U64 val","title":"hash64"},{"location":"builtin-Pointer/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-Pointer/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Pointer/#_realloc","text":"[Source] Keep the contents, but reserve space for len instances of A. fun ref _realloc( len: USize val) : Pointer[A] ref","title":"_realloc"},{"location":"builtin-Pointer/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_13","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_unsafe","text":"[Source] Unsafe change in reference capability. fun tag _unsafe() : Pointer[A] ref","title":"_unsafe"},{"location":"builtin-Pointer/#returns_14","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_convert91b-b93","text":"[Source] Convert from Pointer[A] to Pointer[B]. fun box _convert[B: B]() : this->Pointer[B] ref","title":"_convert[B: B]"},{"location":"builtin-Pointer/#returns_15","text":"this-> Pointer [B] ref","title":"Returns"},{"location":"builtin-Pointer/#_apply","text":"[Source] Retrieve index i. fun box _apply( i: USize val) : this->A","title":"_apply"},{"location":"builtin-Pointer/#parameters_9","text":"i: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_16","text":"this->A","title":"Returns"},{"location":"builtin-Pointer/#_update","text":"[Source] Set index i and return the previous value. fun ref _update( i: USize val, value: A!) : A^","title":"_update"},{"location":"builtin-Pointer/#parameters_10","text":"i: USize val value: A!","title":"Parameters"},{"location":"builtin-Pointer/#returns_17","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_offset","text":"[Source] Return a pointer to the n-th element. fun box _offset( n: USize val) : this->Pointer[A] ref","title":"_offset"},{"location":"builtin-Pointer/#parameters_11","text":"n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_18","text":"this-> Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_element_size","text":"[Source] Return the size of a single element in an array of type A. fun tag _element_size() : USize val","title":"_element_size"},{"location":"builtin-Pointer/#returns_19","text":"USize val","title":"Returns"},{"location":"builtin-Pointer/#_insert","text":"[Source] Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. fun ref _insert( n: USize val, len: USize val) : Pointer[A] ref","title":"_insert"},{"location":"builtin-Pointer/#parameters_12","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_20","text":"Pointer [A] ref","title":"Returns"},{"location":"builtin-Pointer/#_delete","text":"[Source] Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. fun ref _delete( n: USize val, len: USize val) : A^","title":"_delete"},{"location":"builtin-Pointer/#parameters_13","text":"n: USize val len: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_21","text":"A^","title":"Returns"},{"location":"builtin-Pointer/#_copy_to","text":"[Source] Copy n elements from this to that. fun box _copy_to( that: Pointer[this->A!] ref, n: USize val) : this->Pointer[A] ref","title":"_copy_to"},{"location":"builtin-Pointer/#parameters_14","text":"that: Pointer [this->A!] ref n: USize val","title":"Parameters"},{"location":"builtin-Pointer/#returns_22","text":"this-> Pointer [A] ref","title":"Returns"},{"location":"builtin-ReadElement/","text":"ReadElement[A: A] \u00b6 [Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A] Public Functions \u00b6 apply \u00b6 [Source] fun box apply( i: USize val) : A ? Parameters \u00b6 i: USize val Returns \u00b6 A ?","title":"interface ReadElement"},{"location":"builtin-ReadElement/#readelement91a-a93","text":"[Source] Used to show that a ReadSeq can return an element of a specific unmodified type. interface box ReadElement[A: A]","title":"ReadElement[A: A]"},{"location":"builtin-ReadElement/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadElement/#apply","text":"[Source] fun box apply( i: USize val) : A ?","title":"apply"},{"location":"builtin-ReadElement/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadElement/#returns","text":"A ?","title":"Returns"},{"location":"builtin-ReadSeq/","text":"ReadSeq[A: A] \u00b6 [Source] The readable interface of a sequence. interface box ReadSeq[A: A] Public Functions \u00b6 size \u00b6 [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? values \u00b6 [Source] Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. fun box values() : Iterator[this->A] ref^ Returns \u00b6 Iterator [this->A] ref^","title":"interface ReadSeq"},{"location":"builtin-ReadSeq/#readseq91a-a93","text":"[Source] The readable interface of a sequence. interface box ReadSeq[A: A]","title":"ReadSeq[A: A]"},{"location":"builtin-ReadSeq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ReadSeq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-ReadSeq/#returns","text":"USize val","title":"Returns"},{"location":"builtin-ReadSeq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-ReadSeq/#parameters","text":"i: USize val","title":"Parameters"},{"location":"builtin-ReadSeq/#returns_1","text":"this->A ?","title":"Returns"},{"location":"builtin-ReadSeq/#values","text":"[Source] Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. fun box values() : Iterator[this->A] ref^","title":"values"},{"location":"builtin-ReadSeq/#returns_2","text":"Iterator [this->A] ref^","title":"Returns"},{"location":"builtin-Real/","text":"Real[A: Real [A] val] \u00b6 [Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref Implements \u00b6 Stringable box _ArithmeticConvertible val Comparable [A] ref Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] Integer division, rounded towards zero. fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] Calculate the remainder after integer division, rounded towards zero ( div ). The result has the sign of the dividend. fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] Floored integer division, rounded towards negative infinity. fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] Calculate the modulo after floored integer division, rounded towards negative infinity ( fld ). The result has the sign of the divisor. fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait Real"},{"location":"builtin-Real/#real91a-real91a93-val93","text":"[Source] trait val Real[A: Real[A] val] is Stringable box, _ArithmeticConvertible val, Comparable[A] ref","title":"Real[A: Real[A] val]"},{"location":"builtin-Real/#implements","text":"Stringable box _ArithmeticConvertible val Comparable [A] ref","title":"Implements"},{"location":"builtin-Real/#constructors","text":"","title":"Constructors"},{"location":"builtin-Real/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-Real/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-Real/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-Real/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-Real/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-Real/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-Real/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-Real/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Real/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-Real/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_4","text":"A","title":"Returns"},{"location":"builtin-Real/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-Real/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_5","text":"A","title":"Returns"},{"location":"builtin-Real/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-Real/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_6","text":"A","title":"Returns"},{"location":"builtin-Real/#div","text":"[Source] Integer division, rounded towards zero. fun box div( y: A) : A","title":"div"},{"location":"builtin-Real/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_7","text":"A","title":"Returns"},{"location":"builtin-Real/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-Real/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_8","text":"(A , A)","title":"Returns"},{"location":"builtin-Real/#rem","text":"[Source] Calculate the remainder after integer division, rounded towards zero ( div ). The result has the sign of the dividend. fun box rem( y: A) : A","title":"rem"},{"location":"builtin-Real/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_9","text":"A","title":"Returns"},{"location":"builtin-Real/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-Real/#returns_10","text":"A","title":"Returns"},{"location":"builtin-Real/#fld","text":"[Source] Floored integer division, rounded towards negative infinity. fun box fld( y: A) : A","title":"fld"},{"location":"builtin-Real/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_11","text":"A","title":"Returns"},{"location":"builtin-Real/#mod","text":"[Source] Calculate the modulo after floored integer division, rounded towards negative infinity ( fld ). The result has the sign of the divisor. fun box mod( y: A) : A","title":"mod"},{"location":"builtin-Real/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_12","text":"A","title":"Returns"},{"location":"builtin-Real/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-Real/#parameters_10","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_13","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-Real/#parameters_11","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_14","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-Real/#parameters_12","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_15","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-Real/#parameters_13","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_16","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-Real/#parameters_14","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_17","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-Real/#parameters_15","text":"y: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_18","text":"Bool val","title":"Returns"},{"location":"builtin-Real/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-Real/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_19","text":"A","title":"Returns"},{"location":"builtin-Real/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-Real/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-Real/#returns_20","text":"A","title":"Returns"},{"location":"builtin-Real/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-Real/#returns_21","text":"USize val","title":"Returns"},{"location":"builtin-Real/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-Real/#returns_22","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-Real/#returns_23","text":"String iso^","title":"Returns"},{"location":"builtin-Real/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-Real/#returns_24","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-Real/#returns_25","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-Real/#returns_26","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-Real/#returns_27","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-Real/#returns_28","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-Real/#returns_29","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-Real/#returns_30","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-Real/#returns_31","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-Real/#returns_32","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-Real/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-Real/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-Real/#returns_35","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-Real/#returns_36","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-Real/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-Real/#returns_38","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-Real/#returns_39","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-Real/#returns_40","text":"I8 val","title":"Returns"},{"location":"builtin-Real/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-Real/#returns_41","text":"I16 val","title":"Returns"},{"location":"builtin-Real/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-Real/#returns_42","text":"I32 val","title":"Returns"},{"location":"builtin-Real/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-Real/#returns_43","text":"I64 val","title":"Returns"},{"location":"builtin-Real/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-Real/#returns_44","text":"I128 val","title":"Returns"},{"location":"builtin-Real/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-Real/#returns_45","text":"ILong val","title":"Returns"},{"location":"builtin-Real/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-Real/#returns_46","text":"ISize val","title":"Returns"},{"location":"builtin-Real/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-Real/#returns_47","text":"U8 val","title":"Returns"},{"location":"builtin-Real/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-Real/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-Real/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-Real/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-Real/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-Real/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-Real/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-Real/#returns_51","text":"U128 val","title":"Returns"},{"location":"builtin-Real/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-Real/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-Real/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-Real/#returns_53","text":"USize val","title":"Returns"},{"location":"builtin-Real/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-Real/#returns_54","text":"F32 val","title":"Returns"},{"location":"builtin-Real/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-Real/#returns_55","text":"F64 val","title":"Returns"},{"location":"builtin-Real/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-Real/#parameters_18","text":"that: box->A","title":"Parameters"},{"location":"builtin-Real/#returns_56","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-Real/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Real/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-Real/#returns_57","text":"A","title":"Returns"},{"location":"builtin-Seq/","text":"Seq[A: A] \u00b6 [Source] A sequence of elements. interface ref Seq[A: A] Constructors \u00b6 create \u00b6 [Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = 0) : Seq[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 Seq [A] ref^ Public Functions \u00b6 reserve \u00b6 [Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val size \u00b6 [Source] Returns the number of elements in the sequence. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? update \u00b6 [Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? clear \u00b6 [Source] Removes all elements from the sequence. fun ref clear() : None val Returns \u00b6 None val push \u00b6 [Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Removes an element from the end of the sequence. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val shift \u00b6 [Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val truncate \u00b6 [Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val values \u00b6 [Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this->A] ref^ Returns \u00b6 Iterator [this->A] ref^","title":"interface Seq"},{"location":"builtin-Seq/#seq91a-a93","text":"[Source] A sequence of elements. interface ref Seq[A: A]","title":"Seq[A: A]"},{"location":"builtin-Seq/#constructors","text":"","title":"Constructors"},{"location":"builtin-Seq/#create","text":"[Source] Create a sequence, reserving space for len elements. new ref create( len: USize val = 0) : Seq[A] ref^","title":"create"},{"location":"builtin-Seq/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-Seq/#returns","text":"Seq [A] ref^","title":"Returns"},{"location":"builtin-Seq/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Seq/#reserve","text":"[Source] Reserve space for len elements. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-Seq/#parameters_1","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Seq/#size","text":"[Source] Returns the number of elements in the sequence. fun box size() : USize val","title":"size"},{"location":"builtin-Seq/#returns_2","text":"USize val","title":"Returns"},{"location":"builtin-Seq/#apply","text":"[Source] Returns the i-th element of the sequence. Raises an error if the index is out of bounds. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"builtin-Seq/#parameters_2","text":"i: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_3","text":"this->A ?","title":"Returns"},{"location":"builtin-Seq/#update","text":"[Source] Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"builtin-Seq/#parameters_3","text":"i: USize val value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_4","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#clear","text":"[Source] Removes all elements from the sequence. fun ref clear() : None val","title":"clear"},{"location":"builtin-Seq/#returns_5","text":"None val","title":"Returns"},{"location":"builtin-Seq/#push","text":"[Source] Adds an element to the end of the sequence. fun ref push( value: A) : None val","title":"push"},{"location":"builtin-Seq/#parameters_4","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_6","text":"None val","title":"Returns"},{"location":"builtin-Seq/#pop","text":"[Source] Removes an element from the end of the sequence. fun ref pop() : A^ ?","title":"pop"},{"location":"builtin-Seq/#returns_7","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#unshift","text":"[Source] Adds an element to the beginning of the sequence. fun ref unshift( value: A) : None val","title":"unshift"},{"location":"builtin-Seq/#parameters_5","text":"value: A","title":"Parameters"},{"location":"builtin-Seq/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-Seq/#shift","text":"[Source] Removes an element from the beginning of the sequence. fun ref shift() : A^ ?","title":"shift"},{"location":"builtin-Seq/#returns_9","text":"A^ ?","title":"Returns"},{"location":"builtin-Seq/#append","text":"[Source] Add len elements to the end of the list, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-Seq/#parameters_6","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Seq/#returns_10","text":"None val","title":"Returns"},{"location":"builtin-Seq/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-Seq/#parameters_7","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-Seq/#returns_11","text":"None val","title":"Returns"},{"location":"builtin-Seq/#truncate","text":"[Source] Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-Seq/#parameters_8","text":"len: USize val","title":"Parameters"},{"location":"builtin-Seq/#returns_12","text":"None val","title":"Returns"},{"location":"builtin-Seq/#values","text":"[Source] Returns an iterator over the elements of the sequence. fun box values() : Iterator[this->A] ref^","title":"values"},{"location":"builtin-Seq/#returns_13","text":"Iterator [this->A] ref^","title":"Returns"},{"location":"builtin-Signed/","text":"Signed \u00b6 [Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) Type Alias For \u00b6 ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"type Signed"},{"location":"builtin-Signed/#signed","text":"[Source] type Signed is (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Signed"},{"location":"builtin-Signed/#type-alias-for","text":"( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)","title":"Type Alias For"},{"location":"builtin-SignedInteger/","text":"SignedInteger[A: SignedInteger [A, B] val, B: UnsignedInteger [B] val] \u00b6 [Source] trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] val Implements \u00b6 Integer [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : B Returns \u00b6 B shl \u00b6 [Source] fun box shl( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shr \u00b6 [Source] fun box shr( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shl_unsafe \u00b6 [Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A shr_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A Parameters \u00b6 y: B Returns \u00b6 A popcount \u00b6 [Source] fun box popcount() : B Returns \u00b6 B clz \u00b6 [Source] fun box clz() : B Returns \u00b6 B ctz \u00b6 [Source] fun box ctz() : B Returns \u00b6 B clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B Returns \u00b6 B ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B Returns \u00b6 B bitwidth \u00b6 [Source] fun box bitwidth() : B Returns \u00b6 B bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 [Source] fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? fld_partial \u00b6 [Source] fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_partial \u00b6 [Source] fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? neg_unsafe \u00b6 [Source] fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fldc \u00b6 [Source] fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) modc \u00b6 [Source] fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait SignedInteger"},{"location":"builtin-SignedInteger/#signedinteger91a-signedinteger91a-b93-val-b-unsignedinteger91b93-val93","text":"[Source] trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] val","title":"SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val]"},{"location":"builtin-SignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-SignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-SignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-SignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-SignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-SignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-SignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-SignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SignedInteger/#abs","text":"[Source] fun box abs() : B","title":"abs"},{"location":"builtin-SignedInteger/#returns_4","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#shl","text":"[Source] fun box shl( y: B) : A","title":"shl"},{"location":"builtin-SignedInteger/#parameters_2","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shr","text":"[Source] fun box shr( y: B) : A","title":"shr"},{"location":"builtin-SignedInteger/#parameters_3","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. fun box shl_unsafe( y: B) : A","title":"shl_unsafe"},{"location":"builtin-SignedInteger/#parameters_4","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: B) : A","title":"shr_unsafe"},{"location":"builtin-SignedInteger/#parameters_5","text":"y: B","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_8","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#popcount","text":"[Source] fun box popcount() : B","title":"popcount"},{"location":"builtin-SignedInteger/#returns_9","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#clz","text":"[Source] fun box clz() : B","title":"clz"},{"location":"builtin-SignedInteger/#returns_10","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#ctz","text":"[Source] fun box ctz() : B","title":"ctz"},{"location":"builtin-SignedInteger/#returns_11","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : B","title":"clz_unsafe"},{"location":"builtin-SignedInteger/#returns_12","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : B","title":"ctz_unsafe"},{"location":"builtin-SignedInteger/#returns_13","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : B","title":"bitwidth"},{"location":"builtin-SignedInteger/#returns_14","text":"B","title":"Returns"},{"location":"builtin-SignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-SignedInteger/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-SignedInteger/#returns_16","text":"String iso^","title":"Returns"},{"location":"builtin-SignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-SignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-SignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-SignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-SignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-SignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_21","text":"(A , A)","title":"Returns"},{"location":"builtin-SignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-SignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-SignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_23","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-SignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-SignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_25","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-SignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_26","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-SignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_27","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-SignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_28","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-SignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_29","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-SignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_30","text":"(A , A) ?","title":"Returns"},{"location":"builtin-SignedInteger/#fld_partial","text":"[Source] fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-SignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_31","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#mod_partial","text":"[Source] fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-SignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_32","text":"A ?","title":"Returns"},{"location":"builtin-SignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-SignedInteger/#returns_33","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-SignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_34","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-SignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_35","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-SignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_36","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-SignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_37","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-SignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_38","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#fldc","text":"[Source] fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-SignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_39","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#modc","text":"[Source] fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-SignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_40","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-SignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-SignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_41","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-SignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_42","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-SignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_43","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-SignedInteger/#returns_44","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-SignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-SignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-SignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-SignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-SignedInteger/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-SignedInteger/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_50","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-SignedInteger/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_51","text":"(A , A)","title":"Returns"},{"location":"builtin-SignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-SignedInteger/#parameters_37","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_52","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-SignedInteger/#returns_53","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-SignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-SignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_55","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-SignedInteger/#parameters_40","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_56","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-SignedInteger/#parameters_41","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_57","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-SignedInteger/#parameters_42","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-SignedInteger/#parameters_43","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-SignedInteger/#parameters_44","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-SignedInteger/#parameters_45","text":"y: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-SignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-SignedInteger/#parameters_46","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_62","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-SignedInteger/#parameters_47","text":"y: A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_63","text":"A","title":"Returns"},{"location":"builtin-SignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-SignedInteger/#returns_64","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-SignedInteger/#returns_65","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-SignedInteger/#returns_66","text":"I8 val","title":"Returns"},{"location":"builtin-SignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-SignedInteger/#returns_67","text":"I16 val","title":"Returns"},{"location":"builtin-SignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-SignedInteger/#returns_68","text":"I32 val","title":"Returns"},{"location":"builtin-SignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-SignedInteger/#returns_69","text":"I64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-SignedInteger/#returns_70","text":"I128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-SignedInteger/#returns_71","text":"ILong val","title":"Returns"},{"location":"builtin-SignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-SignedInteger/#returns_72","text":"ISize val","title":"Returns"},{"location":"builtin-SignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-SignedInteger/#returns_73","text":"U8 val","title":"Returns"},{"location":"builtin-SignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-SignedInteger/#returns_74","text":"U16 val","title":"Returns"},{"location":"builtin-SignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-SignedInteger/#returns_75","text":"U32 val","title":"Returns"},{"location":"builtin-SignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-SignedInteger/#returns_76","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-SignedInteger/#returns_77","text":"U128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-SignedInteger/#returns_78","text":"ULong val","title":"Returns"},{"location":"builtin-SignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-SignedInteger/#returns_79","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-SignedInteger/#returns_80","text":"F32 val","title":"Returns"},{"location":"builtin-SignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-SignedInteger/#returns_81","text":"F64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-SignedInteger/#returns_82","text":"I8 val","title":"Returns"},{"location":"builtin-SignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-SignedInteger/#returns_83","text":"I16 val","title":"Returns"},{"location":"builtin-SignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-SignedInteger/#returns_84","text":"I32 val","title":"Returns"},{"location":"builtin-SignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-SignedInteger/#returns_85","text":"I64 val","title":"Returns"},{"location":"builtin-SignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-SignedInteger/#returns_86","text":"I128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-SignedInteger/#returns_87","text":"ILong val","title":"Returns"},{"location":"builtin-SignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-SignedInteger/#returns_88","text":"ISize val","title":"Returns"},{"location":"builtin-SignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-SignedInteger/#returns_89","text":"U8 val","title":"Returns"},{"location":"builtin-SignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-SignedInteger/#returns_90","text":"U16 val","title":"Returns"},{"location":"builtin-SignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-SignedInteger/#returns_91","text":"U32 val","title":"Returns"},{"location":"builtin-SignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-SignedInteger/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-SignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-SignedInteger/#returns_93","text":"U128 val","title":"Returns"},{"location":"builtin-SignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-SignedInteger/#returns_94","text":"ULong val","title":"Returns"},{"location":"builtin-SignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-SignedInteger/#returns_95","text":"USize val","title":"Returns"},{"location":"builtin-SignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-SignedInteger/#returns_96","text":"F32 val","title":"Returns"},{"location":"builtin-SignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-SignedInteger/#returns_97","text":"F64 val","title":"Returns"},{"location":"builtin-SignedInteger/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-SignedInteger/#parameters_48","text":"that: box->A","title":"Parameters"},{"location":"builtin-SignedInteger/#returns_98","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-SignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-SignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-SignedInteger/#returns_99","text":"A","title":"Returns"},{"location":"builtin-SourceLoc/","text":"SourceLoc \u00b6 [Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc Public Functions \u00b6 file \u00b6 [Source] Name and path of source file. fun box file() : String val Returns \u00b6 String val type_name \u00b6 [Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val Returns \u00b6 String val method_name \u00b6 [Source] Name of containing method. fun box method_name() : String val Returns \u00b6 String val line \u00b6 [Source] Line number within file. Line numbers start at 1. fun box line() : USize val Returns \u00b6 USize val pos \u00b6 [Source] Character position on line. Character positions start at 1. fun box pos() : USize val Returns \u00b6 USize val","title":"interface SourceLoc"},{"location":"builtin-SourceLoc/#sourceloc","text":"[Source] Represents a location in a Pony source file, as reported by __loc . interface val SourceLoc","title":"SourceLoc"},{"location":"builtin-SourceLoc/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-SourceLoc/#file","text":"[Source] Name and path of source file. fun box file() : String val","title":"file"},{"location":"builtin-SourceLoc/#returns","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#type_name","text":"[Source] Name of nearest class, actor, primitive, struct, interface, or trait. fun box type_name() : String val","title":"type_name"},{"location":"builtin-SourceLoc/#returns_1","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#method_name","text":"[Source] Name of containing method. fun box method_name() : String val","title":"method_name"},{"location":"builtin-SourceLoc/#returns_2","text":"String val","title":"Returns"},{"location":"builtin-SourceLoc/#line","text":"[Source] Line number within file. Line numbers start at 1. fun box line() : USize val","title":"line"},{"location":"builtin-SourceLoc/#returns_3","text":"USize val","title":"Returns"},{"location":"builtin-SourceLoc/#pos","text":"[Source] Character position on line. Character positions start at 1. fun box pos() : USize val","title":"pos"},{"location":"builtin-SourceLoc/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-StdStream/","text":"StdStream \u00b6 [Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream Constructors \u00b6 _out \u00b6 [Source] Create an async stream for stdout. new tag _out() : StdStream tag^ Returns \u00b6 StdStream tag^ _err \u00b6 [Source] Create an async stream for stderr. new tag _err() : StdStream tag^ Returns \u00b6 StdStream tag^ Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush any data out to the os (ignoring failures). be flush() Private Functions \u00b6 _write \u00b6 [Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val _print \u00b6 [Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val","title":"actor StdStream"},{"location":"builtin-StdStream/#stdstream","text":"[Source] Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. actor tag StdStream","title":"StdStream"},{"location":"builtin-StdStream/#constructors","text":"","title":"Constructors"},{"location":"builtin-StdStream/#_out","text":"[Source] Create an async stream for stdout. new tag _out() : StdStream tag^","title":"_out"},{"location":"builtin-StdStream/#returns","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#_err","text":"[Source] Create an async stream for stderr. new tag _err() : StdStream tag^","title":"_err"},{"location":"builtin-StdStream/#returns_1","text":"StdStream tag^","title":"Returns"},{"location":"builtin-StdStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-StdStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"builtin-StdStream/#parameters","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"builtin-StdStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"builtin-StdStream/#parameters_2","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"builtin-StdStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"builtin-StdStream/#flush","text":"[Source] Flush any data out to the os (ignoring failures). be flush()","title":"flush"},{"location":"builtin-StdStream/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-StdStream/#_write","text":"[Source] Write the bytes without explicitly flushing. fun ref _write( data: (String val | Array[U8 val] val)) : None val","title":"_write"},{"location":"builtin-StdStream/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_2","text":"None val","title":"Returns"},{"location":"builtin-StdStream/#_print","text":"[Source] Write the bytes and a newline without explicitly flushing. fun ref _print( data: (String val | Array[U8 val] val)) : None val","title":"_print"},{"location":"builtin-StdStream/#parameters_5","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"builtin-StdStream/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-Stdin/","text":"Stdin \u00b6 [Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin Constructors \u00b6 _create \u00b6 [Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^ Parameters \u00b6 use_event: Bool val Returns \u00b6 Stdin tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32) Parameters \u00b6 notify: ( InputNotify iso | None val) chunk_size: USize val = 32 dispose \u00b6 [Source] Clear the notifier in order to shut down input. be dispose() Private Behaviours \u00b6 _loop_read \u00b6 [Source] If we are able to read from stdin, schedule another read. be _loop_read() _event_notify \u00b6 [Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again \u00b6 [Source] Resume reading. be _read_again() Private Functions \u00b6 _set_notify \u00b6 [Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val Parameters \u00b6 notify: ( InputNotify iso | None val) Returns \u00b6 None val _read \u00b6 [Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val Returns \u00b6 Bool val _close_event \u00b6 [Source] Close the event. fun ref _close_event() : None val Returns \u00b6 None val","title":"actor Stdin"},{"location":"builtin-Stdin/#stdin","text":"[Source] Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an InputNotify : actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) Note: For reading user input from a terminal, use the term package. actor tag Stdin","title":"Stdin"},{"location":"builtin-Stdin/#constructors","text":"","title":"Constructors"},{"location":"builtin-Stdin/#_create","text":"[Source] Create an asynchronous stdin provider. new tag _create( use_event: Bool val) : Stdin tag^","title":"_create"},{"location":"builtin-Stdin/#parameters","text":"use_event: Bool val","title":"Parameters"},{"location":"builtin-Stdin/#returns","text":"Stdin tag^","title":"Returns"},{"location":"builtin-Stdin/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"builtin-Stdin/#apply","text":"[Source] Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. be apply( notify: (InputNotify iso | None val), chunk_size: USize val = 32)","title":"apply"},{"location":"builtin-Stdin/#parameters_1","text":"notify: ( InputNotify iso | None val) chunk_size: USize val = 32","title":"Parameters"},{"location":"builtin-Stdin/#dispose","text":"[Source] Clear the notifier in order to shut down input. be dispose()","title":"dispose"},{"location":"builtin-Stdin/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"builtin-Stdin/#_loop_read","text":"[Source] If we are able to read from stdin, schedule another read. be _loop_read()","title":"_loop_read"},{"location":"builtin-Stdin/#_event_notify","text":"[Source] When the event fires, read from stdin. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"builtin-Stdin/#parameters_2","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"builtin-Stdin/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"builtin-Stdin/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-Stdin/#_set_notify","text":"[Source] Set the notifier. fun ref _set_notify( notify: (InputNotify iso | None val)) : None val","title":"_set_notify"},{"location":"builtin-Stdin/#parameters_3","text":"notify: ( InputNotify iso | None val)","title":"Parameters"},{"location":"builtin-Stdin/#returns_1","text":"None val","title":"Returns"},{"location":"builtin-Stdin/#_read","text":"[Source] Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. fun ref _read() : Bool val","title":"_read"},{"location":"builtin-Stdin/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-Stdin/#_close_event","text":"[Source] Close the event. fun ref _close_event() : None val","title":"_close_event"},{"location":"builtin-Stdin/#returns_3","text":"None val","title":"Returns"},{"location":"builtin-String/","text":"String \u00b6 [Source] A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box Implements \u00b6 Seq [ U8 val] ref Comparable [ String box] ref Stringable box Constructors \u00b6 create \u00b6 [Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = 0) : String ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 String ref^ from_array \u00b6 [Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^ Parameters \u00b6 data: Array [ U8 val] val Returns \u00b6 String val^ from_iso_array \u00b6 [Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^ Parameters \u00b6 data: Array [ U8 val] iso Returns \u00b6 String iso^ from_cpointer \u00b6 [Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = 0) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] ref len: USize val alloc: USize val = 0 Returns \u00b6 String ref^ from_cstring \u00b6 [Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] ref Returns \u00b6 String ref^ copy_cpointer \u00b6 [Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] box len: USize val Returns \u00b6 String ref^ copy_cstring \u00b6 [Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^ Parameters \u00b6 str: Pointer [ U8 val] box Returns \u00b6 String ref^ from_utf32 \u00b6 [Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^ Parameters \u00b6 value: U32 val Returns \u00b6 String ref^ Public Functions \u00b6 push_utf32 \u00b6 [Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val Parameters \u00b6 value: U32 val Returns \u00b6 None val cpointer \u00b6 [Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = 0) : Pointer[U8 val] tag Parameters \u00b6 offset: USize val = 0 Returns \u00b6 Pointer [ U8 val] tag cstring \u00b6 [Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag Returns \u00b6 Pointer [ U8 val] tag array \u00b6 [Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val iso_array \u00b6 [Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^ Returns \u00b6 Array [ U8 val] iso^ size \u00b6 [Source] Returns the length of the string data in bytes. fun box size() : USize val Returns \u00b6 USize val codepoints \u00b6 [Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = 0, to: ISize val = call) : USize val Parameters \u00b6 from: ISize val = 0 to: ISize val = call Returns \u00b6 USize val space \u00b6 [Source] Returns the space available for data, not including the null terminator. fun box space() : USize val Returns \u00b6 USize val reserve \u00b6 [Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val compact \u00b6 [Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val Returns \u00b6 None val recalc \u00b6 [Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val Returns \u00b6 None val truncate \u00b6 [Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val trim_in_place \u00b6 [Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 None val trim \u00b6 [Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : String val Parameters \u00b6 from: USize val = 0 to: USize val = call Returns \u00b6 String val chop \u00b6 [Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^) Parameters \u00b6 split_point: USize val Returns \u00b6 ( String iso^ , String iso^) unchop \u00b6 [Source] Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. fun iso unchop( b: String iso) : ((String iso^ , String iso^) | String iso^) Parameters \u00b6 b: String iso Returns \u00b6 (( String iso^ , String iso^) | String iso^) is_null_terminated \u00b6 [Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val Returns \u00b6 Bool val utf32 \u00b6 [Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ? Parameters \u00b6 offset: ISize val Returns \u00b6 ( U32 val , U8 val) ? apply \u00b6 [Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ? Parameters \u00b6 i: USize val Returns \u00b6 U8 val ? update \u00b6 [Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ? Parameters \u00b6 i: USize val value: U8 val Returns \u00b6 U8 val ? at_offset \u00b6 [Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ? Parameters \u00b6 offset: ISize val Returns \u00b6 U8 val ? update_offset \u00b6 [Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ? Parameters \u00b6 offset: ISize val value: U8 val Returns \u00b6 U8 val ? clone \u00b6 [Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^ Returns \u00b6 String iso^ repeat_str \u00b6 [Source] Returns a copy of the string repeated num times with an optional separator added inbetween repeats. fun box repeat_str( num: USize val = 1, sep: String val = \"\") : String iso^ Parameters \u00b6 num: USize val = 1 sep: String val = \"\" Returns \u00b6 String iso^ mul \u00b6 [Source] Returns a copy of the string repeated num times. fun box mul( num: USize val) : String iso^ Parameters \u00b6 num: USize val Returns \u00b6 String iso^ find \u00b6 [Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = 0, nth: USize val = 0) : ISize val ? Parameters \u00b6 s: String box offset: ISize val = 0 nth: USize val = 0 Returns \u00b6 ISize val ? rfind \u00b6 [Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = call, nth: USize val = 0) : ISize val ? Parameters \u00b6 s: String box offset: ISize val = call nth: USize val = 0 Returns \u00b6 ISize val ? contains \u00b6 [Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = 0, nth: USize val = 0) : Bool val Parameters \u00b6 s: String box offset: ISize val = 0 nth: USize val = 0 Returns \u00b6 Bool val count \u00b6 [Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = 0) : USize val Parameters \u00b6 s: String box offset: ISize val = 0 Returns \u00b6 USize val at \u00b6 [Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = 0) : Bool val Parameters \u00b6 s: String box offset: ISize val = 0 Returns \u00b6 Bool val delete \u00b6 [Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = 1) : None val Parameters \u00b6 offset: ISize val len: USize val = 1 Returns \u00b6 None val substring \u00b6 [Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = call) : String iso^ Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 String iso^ lower \u00b6 [Source] Returns a lower case version of the string. fun box lower() : String iso^ Returns \u00b6 String iso^ lower_in_place \u00b6 [Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val Returns \u00b6 None val upper \u00b6 [Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^ Returns \u00b6 String iso^ upper_in_place \u00b6 [Source] Transforms the string to upper case. fun ref upper_in_place() : None val Returns \u00b6 None val reverse \u00b6 [Source] Returns a reversed version of the string. fun box reverse() : String iso^ Returns \u00b6 String iso^ reverse_in_place \u00b6 [Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val Returns \u00b6 None val push \u00b6 [Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val pop \u00b6 [Source] Remove a byte from the end of the string. fun ref pop() : U8 val ? Returns \u00b6 U8 val ? unshift \u00b6 [Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val Parameters \u00b6 value: U8 val Returns \u00b6 None val shift \u00b6 [Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ? Returns \u00b6 U8 val ? append \u00b6 [Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ReadSeq [ U8 val] box offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [ U8 val] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val clear \u00b6 [Source] Truncate the string to zero length. fun ref clear() : None val Returns \u00b6 None val insert \u00b6 [Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^ Parameters \u00b6 offset: ISize val that: String val Returns \u00b6 String iso^ insert_in_place \u00b6 [Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val Parameters \u00b6 offset: ISize val that: String box Returns \u00b6 None val insert_byte \u00b6 [Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val Parameters \u00b6 offset: ISize val value: U8 val Returns \u00b6 None val cut \u00b6 [Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = call) : String iso^ Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 String iso^ cut_in_place \u00b6 [Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = call) : None val Parameters \u00b6 from: ISize val to: ISize val = call Returns \u00b6 None val remove \u00b6 [Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val Parameters \u00b6 s: String box Returns \u00b6 USize val replace \u00b6 [Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = 0) : USize val Parameters \u00b6 from: String box to: String box n: USize val = 0 Returns \u00b6 USize val split_by \u00b6 [Source] Split the string into an array of strings that are delimited by delim in the original string. If n > 0 , then the split count is limited to n. Example: let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> Adjacent delimiters result in a zero length entry in the array. For example, \"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of delim , use split . fun box split_by( delim: String val, n: USize val = call) : Array[String val] iso^ Parameters \u00b6 delim: String val n: USize val = call Returns \u00b6 Array [ String val] iso^ split \u00b6 [Source] Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If n > 0 , then the split count is limited to n. Example: let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] . If you want to split the string with the entire delimiter string delim , use split_by . fun box split( delim: String val = \" \", n: USize val = 0) : Array[String val] iso^ Parameters \u00b6 delim: String val = \" \" n: USize val = 0 Returns \u00b6 Array [ String val] iso^ strip \u00b6 [Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val rstrip \u00b6 [Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val lstrip \u00b6 [Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = \" \") : None val Parameters \u00b6 s: String box = \" \" Returns \u00b6 None val add \u00b6 [Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val Parameters \u00b6 that: String box Returns \u00b6 String val join \u00b6 [Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^ Parameters \u00b6 data: Iterator [ Stringable box] ref Returns \u00b6 String iso^ compare \u00b6 [Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: String box Returns \u00b6 ( Less val | Equal val | Greater val) compare_sub \u00b6 [Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = 0, that_offset: ISize val = 0, ignore_case: Bool val = false) : (Less val | Equal val | Greater val) Parameters \u00b6 that: String box n: USize val offset: ISize val = 0 that_offset: ISize val = 0 ignore_case: Bool val = false Returns \u00b6 ( Less val | Equal val | Greater val) eq \u00b6 [Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val offset_to_index \u00b6 [Source] fun box offset_to_index( i: ISize val) : USize val Parameters \u00b6 i: ISize val Returns \u00b6 USize val bool \u00b6 [Source] fun box bool() : Bool val ? Returns \u00b6 Bool val ? i8 \u00b6 [Source] fun box i8( base: U8 val = 0) : I8 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I8 val ? i16 \u00b6 [Source] fun box i16( base: U8 val = 0) : I16 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I16 val ? i32 \u00b6 [Source] fun box i32( base: U8 val = 0) : I32 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I32 val ? i64 \u00b6 [Source] fun box i64( base: U8 val = 0) : I64 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I64 val ? i128 \u00b6 [Source] fun box i128( base: U8 val = 0) : I128 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 I128 val ? ilong \u00b6 [Source] fun box ilong( base: U8 val = 0) : ILong val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ILong val ? isize \u00b6 [Source] fun box isize( base: U8 val = 0) : ISize val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ISize val ? u8 \u00b6 [Source] fun box u8( base: U8 val = 0) : U8 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U8 val ? u16 \u00b6 [Source] fun box u16( base: U8 val = 0) : U16 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U16 val ? u32 \u00b6 [Source] fun box u32( base: U8 val = 0) : U32 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U32 val ? u64 \u00b6 [Source] fun box u64( base: U8 val = 0) : U64 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U64 val ? u128 \u00b6 [Source] fun box u128( base: U8 val = 0) : U128 val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 U128 val ? ulong \u00b6 [Source] fun box ulong( base: U8 val = 0) : ULong val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 ULong val ? usize \u00b6 [Source] fun box usize( base: U8 val = 0) : USize val ? Parameters \u00b6 base: U8 val = 0 Returns \u00b6 USize val ? read_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( offset: ISize val = 0, base: U8 val = 0) : (A , USize val) ? Parameters \u00b6 offset: ISize val = 0 base: U8 val = 0 Returns \u00b6 (A , USize val) ? f32 \u00b6 [Source] Convert this string starting at the given offset to a 32-bit floating point number ( F32 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true fun box f32( offset: ISize val = 0) : F32 val ? Parameters \u00b6 offset: ISize val = 0 Returns \u00b6 F32 val ? f64 \u00b6 [Source] Convert this string starting at the given offset to a 64-bit floating point number ( F64 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true fun box f64( offset: ISize val = 0) : F64 val ? Parameters \u00b6 offset: ISize val = 0 Returns \u00b6 F64 val ? hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ values \u00b6 [Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^ Returns \u00b6 StringBytes ref^ runes \u00b6 [Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^ Returns \u00b6 StringRunes ref^ ge \u00b6 fun box ge( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val gt \u00b6 fun box gt( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val ne \u00b6 fun box ne( that: String box) : Bool val Parameters \u00b6 that: String box Returns \u00b6 Bool val Private Functions \u00b6 _copy_to \u00b6 [Source] Copy copy_len characters from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val Parameters \u00b6 ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0 Returns \u00b6 None val _append \u00b6 [Source] fun iso _append( s: String box) : String iso^ Parameters \u00b6 s: String box Returns \u00b6 String iso^ _to_int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val) : A ? Parameters \u00b6 base: U8 val Returns \u00b6 A ? _read_int_base[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val) Parameters \u00b6 base: U8 val index: USize val Returns \u00b6 (A , USize val) _set \u00b6 [Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val Parameters \u00b6 i: USize val value: U8 val Returns \u00b6 U8 val","title":"class String"},{"location":"builtin-String/#string","text":"[Source] A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end class val String is Seq[U8 val] ref, Comparable[String box] ref, Stringable box","title":"String"},{"location":"builtin-String/#implements","text":"Seq [ U8 val] ref Comparable [ String box] ref Stringable box","title":"Implements"},{"location":"builtin-String/#constructors","text":"","title":"Constructors"},{"location":"builtin-String/#create","text":"[Source] An empty string. Enough space for len bytes is reserved. new ref create( len: USize val = 0) : String ref^","title":"create"},{"location":"builtin-String/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_array","text":"[Source] Create a string from an array, reusing the underlying data pointer. new val from_array( data: Array[U8 val] val) : String val^","title":"from_array"},{"location":"builtin-String/#parameters_1","text":"data: Array [ U8 val] val","title":"Parameters"},{"location":"builtin-String/#returns_1","text":"String val^","title":"Returns"},{"location":"builtin-String/#from_iso_array","text":"[Source] Create a string from an array, reusing the underlying data pointer new iso from_iso_array( data: Array[U8 val] iso) : String iso^","title":"from_iso_array"},{"location":"builtin-String/#parameters_2","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"builtin-String/#returns_2","text":"String iso^","title":"Returns"},{"location":"builtin-String/#from_cpointer","text":"[Source] Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. new ref from_cpointer( str: Pointer[U8 val] ref, len: USize val, alloc: USize val = 0) : String ref^","title":"from_cpointer"},{"location":"builtin-String/#parameters_3","text":"str: Pointer [ U8 val] ref len: USize val alloc: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_3","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_cstring","text":"[Source] Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref from_cstring( str: Pointer[U8 val] ref) : String ref^","title":"from_cstring"},{"location":"builtin-String/#parameters_4","text":"str: Pointer [ U8 val] ref","title":"Parameters"},{"location":"builtin-String/#returns_4","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cpointer","text":"[Source] Create a string by copying a fixed number of bytes from a pointer. new ref copy_cpointer( str: Pointer[U8 val] box, len: USize val) : String ref^","title":"copy_cpointer"},{"location":"builtin-String/#parameters_5","text":"str: Pointer [ U8 val] box len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_5","text":"String ref^","title":"Returns"},{"location":"builtin-String/#copy_cstring","text":"[Source] Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. new ref copy_cstring( str: Pointer[U8 val] box) : String ref^","title":"copy_cstring"},{"location":"builtin-String/#parameters_6","text":"str: Pointer [ U8 val] box","title":"Parameters"},{"location":"builtin-String/#returns_6","text":"String ref^","title":"Returns"},{"location":"builtin-String/#from_utf32","text":"[Source] Create a UTF-8 string from a single UTF-32 code point. new ref from_utf32( value: U32 val) : String ref^","title":"from_utf32"},{"location":"builtin-String/#parameters_7","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_7","text":"String ref^","title":"Returns"},{"location":"builtin-String/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-String/#push_utf32","text":"[Source] Push a UTF-32 code point. fun ref push_utf32( value: U32 val) : None val","title":"push_utf32"},{"location":"builtin-String/#parameters_8","text":"value: U32 val","title":"Parameters"},{"location":"builtin-String/#returns_8","text":"None val","title":"Returns"},{"location":"builtin-String/#cpointer","text":"[Source] Returns a C compatible pointer to the underlying string allocation. fun box cpointer( offset: USize val = 0) : Pointer[U8 val] tag","title":"cpointer"},{"location":"builtin-String/#parameters_9","text":"offset: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_9","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#cstring","text":"[Source] Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. fun box cstring() : Pointer[U8 val] tag","title":"cstring"},{"location":"builtin-String/#returns_10","text":"Pointer [ U8 val] tag","title":"Returns"},{"location":"builtin-String/#array","text":"[Source] Returns an Array[U8] that reuses the underlying data pointer. fun val array() : Array[U8 val] val","title":"array"},{"location":"builtin-String/#returns_11","text":"Array [ U8 val] val","title":"Returns"},{"location":"builtin-String/#iso_array","text":"[Source] Returns an Array[U8] iso that reuses the underlying data pointer. fun iso iso_array() : Array[U8 val] iso^","title":"iso_array"},{"location":"builtin-String/#returns_12","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"builtin-String/#size","text":"[Source] Returns the length of the string data in bytes. fun box size() : USize val","title":"size"},{"location":"builtin-String/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-String/#codepoints","text":"[Source] Returns the number of unicode code points in the string between the two offsets. Index range [ from .. to ) is half-open. fun box codepoints( from: ISize val = 0, to: ISize val = call) : USize val","title":"codepoints"},{"location":"builtin-String/#parameters_10","text":"from: ISize val = 0 to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-String/#space","text":"[Source] Returns the space available for data, not including the null terminator. fun box space() : USize val","title":"space"},{"location":"builtin-String/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-String/#reserve","text":"[Source] Reserve space for len bytes. An additional byte will be reserved for the null terminator. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"builtin-String/#parameters_11","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_16","text":"None val","title":"Returns"},{"location":"builtin-String/#compact","text":"[Source] Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. fun ref compact() : None val","title":"compact"},{"location":"builtin-String/#returns_17","text":"None val","title":"Returns"},{"location":"builtin-String/#recalc","text":"[Source] Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. fun ref recalc() : None val","title":"recalc"},{"location":"builtin-String/#returns_18","text":"None val","title":"Returns"},{"location":"builtin-String/#truncate","text":"[Source] Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"builtin-String/#parameters_12","text":"len: USize val","title":"Parameters"},{"location":"builtin-String/#returns_19","text":"None val","title":"Returns"},{"location":"builtin-String/#trim_in_place","text":"[Source] Trim the string to a portion of itself, covering from until to . Unlike slice, the operation does not allocate a new string nor copy elements. fun ref trim_in_place( from: USize val = 0, to: USize val = call) : None val","title":"trim_in_place"},{"location":"builtin-String/#parameters_13","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_20","text":"None val","title":"Returns"},{"location":"builtin-String/#trim","text":"[Source] Return a shared portion of this string, covering from until to . Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. fun val trim( from: USize val = 0, to: USize val = call) : String val","title":"trim"},{"location":"builtin-String/#parameters_14","text":"from: USize val = 0 to: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_21","text":"String val","title":"Returns"},{"location":"builtin-String/#chop","text":"[Source] Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. fun iso chop( split_point: USize val) : (String iso^ , String iso^)","title":"chop"},{"location":"builtin-String/#parameters_15","text":"split_point: USize val","title":"Parameters"},{"location":"builtin-String/#returns_22","text":"( String iso^ , String iso^)","title":"Returns"},{"location":"builtin-String/#unchop","text":"[Source] Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. fun iso unchop( b: String iso) : ((String iso^ , String iso^) | String iso^)","title":"unchop"},{"location":"builtin-String/#parameters_16","text":"b: String iso","title":"Parameters"},{"location":"builtin-String/#returns_23","text":"(( String iso^ , String iso^) | String iso^)","title":"Returns"},{"location":"builtin-String/#is_null_terminated","text":"[Source] Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. fun box is_null_terminated() : Bool val","title":"is_null_terminated"},{"location":"builtin-String/#returns_24","text":"Bool val","title":"Returns"},{"location":"builtin-String/#utf32","text":"[Source] Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. fun box utf32( offset: ISize val) : (U32 val , U8 val) ?","title":"utf32"},{"location":"builtin-String/#parameters_17","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_25","text":"( U32 val , U8 val) ?","title":"Returns"},{"location":"builtin-String/#apply","text":"[Source] Returns the i-th byte. Raise an error if the index is out of bounds. fun box apply( i: USize val) : U8 val ?","title":"apply"},{"location":"builtin-String/#parameters_18","text":"i: USize val","title":"Parameters"},{"location":"builtin-String/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update","text":"[Source] Change the i-th byte. Raise an error if the index is out of bounds. fun ref update( i: USize val, value: U8 val) : U8 val ?","title":"update"},{"location":"builtin-String/#parameters_19","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_27","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#at_offset","text":"[Source] Returns the byte at the given offset. Raise an error if the offset is out of bounds. fun box at_offset( offset: ISize val) : U8 val ?","title":"at_offset"},{"location":"builtin-String/#parameters_20","text":"offset: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_28","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#update_offset","text":"[Source] Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. fun ref update_offset( offset: ISize val, value: U8 val) : U8 val ?","title":"update_offset"},{"location":"builtin-String/#parameters_21","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_29","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#clone","text":"[Source] Returns a copy of the string. The resulting string is null-terminated even if the original is not. fun box clone() : String iso^","title":"clone"},{"location":"builtin-String/#returns_30","text":"String iso^","title":"Returns"},{"location":"builtin-String/#repeat_str","text":"[Source] Returns a copy of the string repeated num times with an optional separator added inbetween repeats. fun box repeat_str( num: USize val = 1, sep: String val = \"\") : String iso^","title":"repeat_str"},{"location":"builtin-String/#parameters_22","text":"num: USize val = 1 sep: String val = \"\"","title":"Parameters"},{"location":"builtin-String/#returns_31","text":"String iso^","title":"Returns"},{"location":"builtin-String/#mul","text":"[Source] Returns a copy of the string repeated num times. fun box mul( num: USize val) : String iso^","title":"mul"},{"location":"builtin-String/#parameters_23","text":"num: USize val","title":"Parameters"},{"location":"builtin-String/#returns_32","text":"String iso^","title":"Returns"},{"location":"builtin-String/#find","text":"[Source] Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. fun box find( s: String box, offset: ISize val = 0, nth: USize val = 0) : ISize val ?","title":"find"},{"location":"builtin-String/#parameters_24","text":"s: String box offset: ISize val = 0 nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_33","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#rfind","text":"[Source] Return the index of n-th instance of s in the string starting from the end. The offset represents the highest index to included in the search. Raise an error if there is no n-th occurrence of s or s is empty. fun box rfind( s: String box, offset: ISize val = call, nth: USize val = 0) : ISize val ?","title":"rfind"},{"location":"builtin-String/#parameters_25","text":"s: String box offset: ISize val = call nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_34","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#contains","text":"[Source] Returns true if contains s as a substring, false otherwise. fun box contains( s: String box, offset: ISize val = 0, nth: USize val = 0) : Bool val","title":"contains"},{"location":"builtin-String/#parameters_26","text":"s: String box offset: ISize val = 0 nth: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_35","text":"Bool val","title":"Returns"},{"location":"builtin-String/#count","text":"[Source] Counts the non-overlapping occurrences of s in the string. fun box count( s: String box, offset: ISize val = 0) : USize val","title":"count"},{"location":"builtin-String/#parameters_27","text":"s: String box offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_36","text":"USize val","title":"Returns"},{"location":"builtin-String/#at","text":"[Source] Returns true if the substring s is present at the given offset. fun box at( s: String box, offset: ISize val = 0) : Bool val","title":"at"},{"location":"builtin-String/#parameters_28","text":"s: String box offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_37","text":"Bool val","title":"Returns"},{"location":"builtin-String/#delete","text":"[Source] Delete len bytes at the supplied offset, compacting the string in place. fun ref delete( offset: ISize val, len: USize val = 1) : None val","title":"delete"},{"location":"builtin-String/#parameters_29","text":"offset: ISize val len: USize val = 1","title":"Parameters"},{"location":"builtin-String/#returns_38","text":"None val","title":"Returns"},{"location":"builtin-String/#substring","text":"[Source] Returns a substring. Index range [ from .. to ) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see trim and trim_in_place . fun box substring( from: ISize val, to: ISize val = call) : String iso^","title":"substring"},{"location":"builtin-String/#parameters_30","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_39","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower","text":"[Source] Returns a lower case version of the string. fun box lower() : String iso^","title":"lower"},{"location":"builtin-String/#returns_40","text":"String iso^","title":"Returns"},{"location":"builtin-String/#lower_in_place","text":"[Source] Transforms the string to lower case. Currently only knows ASCII case. fun ref lower_in_place() : None val","title":"lower_in_place"},{"location":"builtin-String/#returns_41","text":"None val","title":"Returns"},{"location":"builtin-String/#upper","text":"[Source] Returns an upper case version of the string. Currently only knows ASCII case. fun box upper() : String iso^","title":"upper"},{"location":"builtin-String/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-String/#upper_in_place","text":"[Source] Transforms the string to upper case. fun ref upper_in_place() : None val","title":"upper_in_place"},{"location":"builtin-String/#returns_43","text":"None val","title":"Returns"},{"location":"builtin-String/#reverse","text":"[Source] Returns a reversed version of the string. fun box reverse() : String iso^","title":"reverse"},{"location":"builtin-String/#returns_44","text":"String iso^","title":"Returns"},{"location":"builtin-String/#reverse_in_place","text":"[Source] Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. fun ref reverse_in_place() : None val","title":"reverse_in_place"},{"location":"builtin-String/#returns_45","text":"None val","title":"Returns"},{"location":"builtin-String/#push","text":"[Source] Add a byte to the end of the string. fun ref push( value: U8 val) : None val","title":"push"},{"location":"builtin-String/#parameters_31","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_46","text":"None val","title":"Returns"},{"location":"builtin-String/#pop","text":"[Source] Remove a byte from the end of the string. fun ref pop() : U8 val ?","title":"pop"},{"location":"builtin-String/#returns_47","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#unshift","text":"[Source] Adds a byte to the beginning of the string. fun ref unshift( value: U8 val) : None val","title":"unshift"},{"location":"builtin-String/#parameters_32","text":"value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_48","text":"None val","title":"Returns"},{"location":"builtin-String/#shift","text":"[Source] Removes a byte from the beginning of the string. fun ref shift() : U8 val ?","title":"shift"},{"location":"builtin-String/#returns_49","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#append","text":"[Source] Append the elements from a sequence, starting from the given offset. fun ref append( seq: ReadSeq[U8 val] box, offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"builtin-String/#parameters_33","text":"seq: ReadSeq [ U8 val] box offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_50","text":"None val","title":"Returns"},{"location":"builtin-String/#concat","text":"[Source] Add len iterated bytes to the end of the string, starting from the given offset. fun ref concat( iter: Iterator[U8 val] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"builtin-String/#parameters_34","text":"iter: Iterator [ U8 val] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_51","text":"None val","title":"Returns"},{"location":"builtin-String/#clear","text":"[Source] Truncate the string to zero length. fun ref clear() : None val","title":"clear"},{"location":"builtin-String/#returns_52","text":"None val","title":"Returns"},{"location":"builtin-String/#insert","text":"[Source] Returns a version of the string with the given string inserted at the given offset. fun box insert( offset: ISize val, that: String val) : String iso^","title":"insert"},{"location":"builtin-String/#parameters_35","text":"offset: ISize val that: String val","title":"Parameters"},{"location":"builtin-String/#returns_53","text":"String iso^","title":"Returns"},{"location":"builtin-String/#insert_in_place","text":"[Source] Inserts the given string at the given offset. Appends the string if the offset is out of bounds. fun ref insert_in_place( offset: ISize val, that: String box) : None val","title":"insert_in_place"},{"location":"builtin-String/#parameters_36","text":"offset: ISize val that: String box","title":"Parameters"},{"location":"builtin-String/#returns_54","text":"None val","title":"Returns"},{"location":"builtin-String/#insert_byte","text":"[Source] Inserts a byte at the given offset. Appends if the offset is out of bounds. fun ref insert_byte( offset: ISize val, value: U8 val) : None val","title":"insert_byte"},{"location":"builtin-String/#parameters_37","text":"offset: ISize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_55","text":"None val","title":"Returns"},{"location":"builtin-String/#cut","text":"[Source] Returns a version of the string with the given range deleted. Index range [ from .. to ) is half-open. fun box cut( from: ISize val, to: ISize val = call) : String iso^","title":"cut"},{"location":"builtin-String/#parameters_38","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_56","text":"String iso^","title":"Returns"},{"location":"builtin-String/#cut_in_place","text":"[Source] Cuts the given range out of the string. Index range [ from .. to ) is half-open. fun ref cut_in_place( from: ISize val, to: ISize val = call) : None val","title":"cut_in_place"},{"location":"builtin-String/#parameters_39","text":"from: ISize val to: ISize val = call","title":"Parameters"},{"location":"builtin-String/#returns_57","text":"None val","title":"Returns"},{"location":"builtin-String/#remove","text":"[Source] Remove all instances of s from the string. Returns the count of removed instances. fun ref remove( s: String box) : USize val","title":"remove"},{"location":"builtin-String/#parameters_40","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_58","text":"USize val","title":"Returns"},{"location":"builtin-String/#replace","text":"[Source] Replace up to n occurrences of from in this with to . If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. fun ref replace( from: String box, to: String box, n: USize val = 0) : USize val","title":"replace"},{"location":"builtin-String/#parameters_41","text":"from: String box to: String box n: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-String/#split_by","text":"[Source] Split the string into an array of strings that are delimited by delim in the original string. If n > 0 , then the split count is limited to n. Example: let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> Adjacent delimiters result in a zero length entry in the array. For example, \"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"] . An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of delim , use split . fun box split_by( delim: String val, n: USize val = call) : Array[String val] iso^","title":"split_by"},{"location":"builtin-String/#parameters_42","text":"delim: String val n: USize val = call","title":"Parameters"},{"location":"builtin-String/#returns_60","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#split","text":"[Source] Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If n > 0 , then the split count is limited to n. Example: let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department Adjacent delimiters result in a zero length entry in the array. For example, \"1,,2\".split(\",\") => [\"1\", \"\", \"2\"] . If you want to split the string with the entire delimiter string delim , use split_by . fun box split( delim: String val = \" \", n: USize val = 0) : Array[String val] iso^","title":"split"},{"location":"builtin-String/#parameters_43","text":"delim: String val = \" \" n: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_61","text":"Array [ String val] iso^","title":"Returns"},{"location":"builtin-String/#strip","text":"[Source] Remove all leading and trailing characters from the string that are in s. fun ref strip( s: String box = \" \") : None val","title":"strip"},{"location":"builtin-String/#parameters_44","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_62","text":"None val","title":"Returns"},{"location":"builtin-String/#rstrip","text":"[Source] Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. fun ref rstrip( s: String box = \" \") : None val","title":"rstrip"},{"location":"builtin-String/#parameters_45","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_63","text":"None val","title":"Returns"},{"location":"builtin-String/#lstrip","text":"[Source] Remove all leading characters within the string that are in s. By default, leading whitespace is removed. fun ref lstrip( s: String box = \" \") : None val","title":"lstrip"},{"location":"builtin-String/#parameters_46","text":"s: String box = \" \"","title":"Parameters"},{"location":"builtin-String/#returns_64","text":"None val","title":"Returns"},{"location":"builtin-String/#add","text":"[Source] Return a string that is a concatenation of this and that. fun box add( that: String box) : String val","title":"add"},{"location":"builtin-String/#parameters_47","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_65","text":"String val","title":"Returns"},{"location":"builtin-String/#join","text":"[Source] Return a string that is a concatenation of the strings in data, using this as a separator. fun box join( data: Iterator[Stringable box] ref) : String iso^","title":"join"},{"location":"builtin-String/#parameters_48","text":"data: Iterator [ Stringable box] ref","title":"Parameters"},{"location":"builtin-String/#returns_66","text":"String iso^","title":"Returns"},{"location":"builtin-String/#compare","text":"[Source] Lexically compare two strings. fun box compare( that: String box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-String/#parameters_49","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_67","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#compare_sub","text":"[Source] Lexically compare at most n bytes of the substring of this starting at offset with the substring of that starting at that_offset . The comparison is case sensitive unless ignore_case is true . If the substring of this is a proper prefix of the substring of that , then this is Less than that . Likewise, if that is a proper prefix of this , then this is Greater than that . Both offset and that_offset can be negative, in which case the offsets are computed from the end of the string. If n + offset is greater than the length of this , or n + that_offset is greater than the length of that , then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. fun box compare_sub( that: String box, n: USize val, offset: ISize val = 0, that_offset: ISize val = 0, ignore_case: Bool val = false) : (Less val | Equal val | Greater val)","title":"compare_sub"},{"location":"builtin-String/#parameters_50","text":"that: String box n: USize val offset: ISize val = 0 that_offset: ISize val = 0 ignore_case: Bool val = false","title":"Parameters"},{"location":"builtin-String/#returns_68","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-String/#eq","text":"[Source] Returns true if the two strings have the same contents. fun box eq( that: String box) : Bool val","title":"eq"},{"location":"builtin-String/#parameters_51","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-String/#lt","text":"[Source] Returns true if this is lexically less than that. Needs to be made UTF-8 safe. fun box lt( that: String box) : Bool val","title":"lt"},{"location":"builtin-String/#parameters_52","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-String/#le","text":"[Source] Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. fun box le( that: String box) : Bool val","title":"le"},{"location":"builtin-String/#parameters_53","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-String/#offset_to_index","text":"[Source] fun box offset_to_index( i: ISize val) : USize val","title":"offset_to_index"},{"location":"builtin-String/#parameters_54","text":"i: ISize val","title":"Parameters"},{"location":"builtin-String/#returns_72","text":"USize val","title":"Returns"},{"location":"builtin-String/#bool","text":"[Source] fun box bool() : Bool val ?","title":"bool"},{"location":"builtin-String/#returns_73","text":"Bool val ?","title":"Returns"},{"location":"builtin-String/#i8","text":"[Source] fun box i8( base: U8 val = 0) : I8 val ?","title":"i8"},{"location":"builtin-String/#parameters_55","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_74","text":"I8 val ?","title":"Returns"},{"location":"builtin-String/#i16","text":"[Source] fun box i16( base: U8 val = 0) : I16 val ?","title":"i16"},{"location":"builtin-String/#parameters_56","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_75","text":"I16 val ?","title":"Returns"},{"location":"builtin-String/#i32","text":"[Source] fun box i32( base: U8 val = 0) : I32 val ?","title":"i32"},{"location":"builtin-String/#parameters_57","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_76","text":"I32 val ?","title":"Returns"},{"location":"builtin-String/#i64","text":"[Source] fun box i64( base: U8 val = 0) : I64 val ?","title":"i64"},{"location":"builtin-String/#parameters_58","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_77","text":"I64 val ?","title":"Returns"},{"location":"builtin-String/#i128","text":"[Source] fun box i128( base: U8 val = 0) : I128 val ?","title":"i128"},{"location":"builtin-String/#parameters_59","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_78","text":"I128 val ?","title":"Returns"},{"location":"builtin-String/#ilong","text":"[Source] fun box ilong( base: U8 val = 0) : ILong val ?","title":"ilong"},{"location":"builtin-String/#parameters_60","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_79","text":"ILong val ?","title":"Returns"},{"location":"builtin-String/#isize","text":"[Source] fun box isize( base: U8 val = 0) : ISize val ?","title":"isize"},{"location":"builtin-String/#parameters_61","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_80","text":"ISize val ?","title":"Returns"},{"location":"builtin-String/#u8","text":"[Source] fun box u8( base: U8 val = 0) : U8 val ?","title":"u8"},{"location":"builtin-String/#parameters_62","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_81","text":"U8 val ?","title":"Returns"},{"location":"builtin-String/#u16","text":"[Source] fun box u16( base: U8 val = 0) : U16 val ?","title":"u16"},{"location":"builtin-String/#parameters_63","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_82","text":"U16 val ?","title":"Returns"},{"location":"builtin-String/#u32","text":"[Source] fun box u32( base: U8 val = 0) : U32 val ?","title":"u32"},{"location":"builtin-String/#parameters_64","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_83","text":"U32 val ?","title":"Returns"},{"location":"builtin-String/#u64","text":"[Source] fun box u64( base: U8 val = 0) : U64 val ?","title":"u64"},{"location":"builtin-String/#parameters_65","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_84","text":"U64 val ?","title":"Returns"},{"location":"builtin-String/#u128","text":"[Source] fun box u128( base: U8 val = 0) : U128 val ?","title":"u128"},{"location":"builtin-String/#parameters_66","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_85","text":"U128 val ?","title":"Returns"},{"location":"builtin-String/#ulong","text":"[Source] fun box ulong( base: U8 val = 0) : ULong val ?","title":"ulong"},{"location":"builtin-String/#parameters_67","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_86","text":"ULong val ?","title":"Returns"},{"location":"builtin-String/#usize","text":"[Source] fun box usize( base: U8 val = 0) : USize val ?","title":"usize"},{"location":"builtin-String/#parameters_68","text":"base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_87","text":"USize val ?","title":"Returns"},{"location":"builtin-String/#read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. fun box read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( offset: ISize val = 0, base: U8 val = 0) : (A , USize val) ?","title":"read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_69","text":"offset: ISize val = 0 base: U8 val = 0","title":"Parameters"},{"location":"builtin-String/#returns_88","text":"(A , USize val) ?","title":"Returns"},{"location":"builtin-String/#f32","text":"[Source] Convert this string starting at the given offset to a 32-bit floating point number ( F32 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true fun box f32( offset: ISize val = 0) : F32 val ?","title":"f32"},{"location":"builtin-String/#parameters_70","text":"offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_89","text":"F32 val ?","title":"Returns"},{"location":"builtin-String/#f64","text":"[Source] Convert this string starting at the given offset to a 64-bit floating point number ( F64 ). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true fun box f64( offset: ISize val = 0) : F64 val ?","title":"f64"},{"location":"builtin-String/#parameters_71","text":"offset: ISize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_90","text":"F64 val ?","title":"Returns"},{"location":"builtin-String/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-String/#returns_91","text":"USize val","title":"Returns"},{"location":"builtin-String/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-String/#returns_92","text":"U64 val","title":"Returns"},{"location":"builtin-String/#string_1","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-String/#returns_93","text":"String iso^","title":"Returns"},{"location":"builtin-String/#values","text":"[Source] Return an iterator over the bytes in the string. fun box values() : StringBytes ref^","title":"values"},{"location":"builtin-String/#returns_94","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-String/#runes","text":"[Source] Return an iterator over the codepoints in the string. fun box runes() : StringRunes ref^","title":"runes"},{"location":"builtin-String/#returns_95","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-String/#ge","text":"fun box ge( that: String box) : Bool val","title":"ge"},{"location":"builtin-String/#parameters_72","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_96","text":"Bool val","title":"Returns"},{"location":"builtin-String/#gt","text":"fun box gt( that: String box) : Bool val","title":"gt"},{"location":"builtin-String/#parameters_73","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_97","text":"Bool val","title":"Returns"},{"location":"builtin-String/#ne","text":"fun box ne( that: String box) : Bool val","title":"ne"},{"location":"builtin-String/#parameters_74","text":"that: String box","title":"Parameters"},{"location":"builtin-String/#returns_98","text":"Bool val","title":"Returns"},{"location":"builtin-String/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-String/#_copy_to","text":"[Source] Copy copy_len characters from this to that at specified offsets. fun box _copy_to( ptr: Pointer[U8 val] ref, copy_len: USize val, from_offset: USize val = 0, to_offset: USize val = 0) : None val","title":"_copy_to"},{"location":"builtin-String/#parameters_75","text":"ptr: Pointer [ U8 val] ref copy_len: USize val from_offset: USize val = 0 to_offset: USize val = 0","title":"Parameters"},{"location":"builtin-String/#returns_99","text":"None val","title":"Returns"},{"location":"builtin-String/#_append","text":"[Source] fun iso _append( s: String box) : String iso^","title":"_append"},{"location":"builtin-String/#parameters_76","text":"s: String box","title":"Parameters"},{"location":"builtin-String/#returns_100","text":"String iso^","title":"Returns"},{"location":"builtin-String/#_to_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Convert the whole string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. fun box _to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val) : A ?","title":"_to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_77","text":"base: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_101","text":"A ?","title":"Returns"},{"location":"builtin-String/#_read_int_base91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. fun box _read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]( base: U8 val, index: USize val) : (A , USize val)","title":"_read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"builtin-String/#parameters_78","text":"base: U8 val index: USize val","title":"Parameters"},{"location":"builtin-String/#returns_102","text":"(A , USize val)","title":"Returns"},{"location":"builtin-String/#_set","text":"[Source] Unsafe update, used internally. fun ref _set( i: USize val, value: U8 val) : U8 val","title":"_set"},{"location":"builtin-String/#parameters_79","text":"i: USize val value: U8 val","title":"Parameters"},{"location":"builtin-String/#returns_103","text":"U8 val","title":"Returns"},{"location":"builtin-StringBytes/","text":"StringBytes \u00b6 [Source] class ref StringBytes is Iterator[U8 val] ref Implements \u00b6 Iterator [ U8 val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( string: String box) : StringBytes ref^ Parameters \u00b6 string: String box Returns \u00b6 StringBytes ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : U8 val ? Returns \u00b6 U8 val ?","title":"class StringBytes"},{"location":"builtin-StringBytes/#stringbytes","text":"[Source] class ref StringBytes is Iterator[U8 val] ref","title":"StringBytes"},{"location":"builtin-StringBytes/#implements","text":"Iterator [ U8 val] ref","title":"Implements"},{"location":"builtin-StringBytes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringBytes/#create","text":"[Source] new ref create( string: String box) : StringBytes ref^","title":"create"},{"location":"builtin-StringBytes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringBytes/#returns","text":"StringBytes ref^","title":"Returns"},{"location":"builtin-StringBytes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringBytes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringBytes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringBytes/#next","text":"[Source] fun ref next() : U8 val ?","title":"next"},{"location":"builtin-StringBytes/#returns_2","text":"U8 val ?","title":"Returns"},{"location":"builtin-StringRunes/","text":"StringRunes \u00b6 [Source] class ref StringRunes is Iterator[U32 val] ref Implements \u00b6 Iterator [ U32 val] ref Constructors \u00b6 create \u00b6 [Source] new ref create( string: String box) : StringRunes ref^ Parameters \u00b6 string: String box Returns \u00b6 StringRunes ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : U32 val ? Returns \u00b6 U32 val ?","title":"class StringRunes"},{"location":"builtin-StringRunes/#stringrunes","text":"[Source] class ref StringRunes is Iterator[U32 val] ref","title":"StringRunes"},{"location":"builtin-StringRunes/#implements","text":"Iterator [ U32 val] ref","title":"Implements"},{"location":"builtin-StringRunes/#constructors","text":"","title":"Constructors"},{"location":"builtin-StringRunes/#create","text":"[Source] new ref create( string: String box) : StringRunes ref^","title":"create"},{"location":"builtin-StringRunes/#parameters","text":"string: String box","title":"Parameters"},{"location":"builtin-StringRunes/#returns","text":"StringRunes ref^","title":"Returns"},{"location":"builtin-StringRunes/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-StringRunes/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"builtin-StringRunes/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-StringRunes/#next","text":"[Source] fun ref next() : U32 val ?","title":"next"},{"location":"builtin-StringRunes/#returns_2","text":"U32 val ?","title":"Returns"},{"location":"builtin-Stringable/","text":"Stringable \u00b6 [Source] Things that can be turned into a String. interface box Stringable Public Functions \u00b6 string \u00b6 [Source] Generate a string representation of this object. fun box string() : String iso^ Returns \u00b6 String iso^","title":"interface Stringable"},{"location":"builtin-Stringable/#stringable","text":"[Source] Things that can be turned into a String. interface box Stringable","title":"Stringable"},{"location":"builtin-Stringable/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-Stringable/#string","text":"[Source] Generate a string representation of this object. fun box string() : String iso^","title":"string"},{"location":"builtin-Stringable/#returns","text":"String iso^","title":"Returns"},{"location":"builtin-U128/","text":"U128 \u00b6 [Source] primitive val U128 is UnsignedInteger[U128 val] val Implements \u00b6 UnsignedInteger [ U128 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U128 val) : U128 val^ Parameters \u00b6 value: U128 val Returns \u00b6 U128 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U128 val^ Parameters \u00b6 a: A Returns \u00b6 U128 val^ min_value \u00b6 [Source] new val min_value() : U128 val^ Returns \u00b6 U128 val^ max_value \u00b6 [Source] new val max_value() : U128 val^ Returns \u00b6 U128 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U128 val Returns \u00b6 U128 val abs \u00b6 [Source] fun box abs() : U128 val Returns \u00b6 U128 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U128 val Returns \u00b6 U128 val bswap \u00b6 [Source] fun box bswap() : U128 val Returns \u00b6 U128 val popcount \u00b6 [Source] fun box popcount() : U128 val Returns \u00b6 U128 val clz \u00b6 [Source] fun box clz() : U128 val Returns \u00b6 U128 val ctz \u00b6 [Source] fun box ctz() : U128 val Returns \u00b6 U128 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val Returns \u00b6 U128 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val Returns \u00b6 U128 val bitwidth \u00b6 [Source] fun box bitwidth() : U128 val Returns \u00b6 U128 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val max \u00b6 [Source] fun box max( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ mul \u00b6 [Source] fun box mul( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val divrem \u00b6 [Source] fun box divrem( y: U128 val) : (U128 val , U128 val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) div \u00b6 [Source] fun box div( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rem \u00b6 [Source] fun box rem( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val mul_unsafe \u00b6 [Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val divrem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) div_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rem_unsafe \u00b6 [Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val addc \u00b6 [Source] fun box addc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) subc \u00b6 [Source] fun box subc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) divc \u00b6 [Source] fun box divc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) remc \u00b6 [Source] fun box remc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? div_partial \u00b6 [Source] fun box div_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ? Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , U128 val) ? shl \u00b6 fun box shl( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shr \u00b6 fun box shr( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val fld \u00b6 fun box fld( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val fldc \u00b6 fun box fldc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val mod \u00b6 fun box mod( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val modc \u00b6 fun box modc( y: U128 val) : (U128 val , Bool val) Parameters \u00b6 y: U128 val Returns \u00b6 ( U128 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U128 val) : U128 val ? Parameters \u00b6 y: U128 val Returns \u00b6 U128 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shl_unsafe \u00b6 fun box shl_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val shr_unsafe \u00b6 fun box shr_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rotl \u00b6 fun box rotl( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val rotr \u00b6 fun box rotr( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val add_unsafe \u00b6 fun box add_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val sub_unsafe \u00b6 fun box sub_unsafe( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val neg_unsafe \u00b6 fun box neg_unsafe() : U128 val Returns \u00b6 U128 val op_and \u00b6 fun box op_and( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_or \u00b6 fun box op_or( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_xor \u00b6 fun box op_xor( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val op_not \u00b6 fun box op_not() : U128 val Returns \u00b6 U128 val add \u00b6 fun box add( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val sub \u00b6 fun box sub( y: U128 val) : U128 val Parameters \u00b6 y: U128 val Returns \u00b6 U128 val neg \u00b6 fun box neg() : U128 val Returns \u00b6 U128 val eq \u00b6 fun box eq( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U128 val) : Bool val Parameters \u00b6 y: U128 val Returns \u00b6 Bool val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val compare \u00b6 fun box compare( that: U128 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U128 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U128 val Returns \u00b6 U128 val","title":"primitive U128"},{"location":"builtin-U128/#u128","text":"[Source] primitive val U128 is UnsignedInteger[U128 val] val","title":"U128"},{"location":"builtin-U128/#implements","text":"UnsignedInteger [ U128 val] val","title":"Implements"},{"location":"builtin-U128/#constructors","text":"","title":"Constructors"},{"location":"builtin-U128/#create","text":"[Source] new val create( value: U128 val) : U128 val^","title":"create"},{"location":"builtin-U128/#parameters","text":"value: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U128 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U128/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U128/#returns_1","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#min_value","text":"[Source] new val min_value() : U128 val^","title":"min_value"},{"location":"builtin-U128/#returns_2","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#max_value","text":"[Source] new val max_value() : U128 val^","title":"max_value"},{"location":"builtin-U128/#returns_3","text":"U128 val^","title":"Returns"},{"location":"builtin-U128/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U128/#next_pow2","text":"[Source] fun box next_pow2() : U128 val","title":"next_pow2"},{"location":"builtin-U128/#returns_4","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#abs","text":"[Source] fun box abs() : U128 val","title":"abs"},{"location":"builtin-U128/#returns_5","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bit_reverse","text":"[Source] fun box bit_reverse() : U128 val","title":"bit_reverse"},{"location":"builtin-U128/#returns_6","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bswap","text":"[Source] fun box bswap() : U128 val","title":"bswap"},{"location":"builtin-U128/#returns_7","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#popcount","text":"[Source] fun box popcount() : U128 val","title":"popcount"},{"location":"builtin-U128/#returns_8","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz","text":"[Source] fun box clz() : U128 val","title":"clz"},{"location":"builtin-U128/#returns_9","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz","text":"[Source] fun box ctz() : U128 val","title":"ctz"},{"location":"builtin-U128/#returns_10","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U128 val","title":"clz_unsafe"},{"location":"builtin-U128/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U128 val","title":"ctz_unsafe"},{"location":"builtin-U128/#returns_12","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bitwidth","text":"[Source] fun box bitwidth() : U128 val","title":"bitwidth"},{"location":"builtin-U128/#returns_13","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U128/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U128/#min","text":"[Source] fun box min( y: U128 val) : U128 val","title":"min"},{"location":"builtin-U128/#parameters_2","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_15","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#max","text":"[Source] fun box max( y: U128 val) : U128 val","title":"max"},{"location":"builtin-U128/#parameters_3","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_16","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U128/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U128/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U128/#returns_18","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-U128/#returns_19","text":"String iso^","title":"Returns"},{"location":"builtin-U128/#mul","text":"[Source] fun box mul( y: U128 val) : U128 val","title":"mul"},{"location":"builtin-U128/#parameters_4","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_20","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem","text":"[Source] fun box divrem( y: U128 val) : (U128 val , U128 val)","title":"divrem"},{"location":"builtin-U128/#parameters_5","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_21","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div","text":"[Source] fun box div( y: U128 val) : U128 val","title":"div"},{"location":"builtin-U128/#parameters_6","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_22","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem","text":"[Source] fun box rem( y: U128 val) : U128 val","title":"rem"},{"location":"builtin-U128/#parameters_7","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_23","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mul_unsafe","text":"[Source] Unsafe operation. If the operation overflows, the result is undefined. fun box mul_unsafe( y: U128 val) : U128 val","title":"mul_unsafe"},{"location":"builtin-U128/#parameters_8","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_24","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#divrem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box divrem_unsafe( y: U128 val) : (U128 val , U128 val)","title":"divrem_unsafe"},{"location":"builtin-U128/#parameters_9","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_25","text":"( U128 val , U128 val)","title":"Returns"},{"location":"builtin-U128/#div_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box div_unsafe( y: U128 val) : U128 val","title":"div_unsafe"},{"location":"builtin-U128/#parameters_10","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_26","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rem_unsafe","text":"[Source] Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. fun box rem_unsafe( y: U128 val) : U128 val","title":"rem_unsafe"},{"location":"builtin-U128/#parameters_11","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-U128/#returns_28","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-U128/#returns_29","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U128/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-U128/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U128/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-U128/#addc","text":"[Source] fun box addc( y: U128 val) : (U128 val , Bool val)","title":"addc"},{"location":"builtin-U128/#parameters_12","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_32","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#subc","text":"[Source] fun box subc( y: U128 val) : (U128 val , Bool val)","title":"subc"},{"location":"builtin-U128/#parameters_13","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_33","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mulc","text":"[Source] fun box mulc( y: U128 val) : (U128 val , Bool val)","title":"mulc"},{"location":"builtin-U128/#parameters_14","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_34","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#divc","text":"[Source] fun box divc( y: U128 val) : (U128 val , Bool val)","title":"divc"},{"location":"builtin-U128/#parameters_15","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_35","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#remc","text":"[Source] fun box remc( y: U128 val) : (U128 val , Bool val)","title":"remc"},{"location":"builtin-U128/#parameters_16","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_36","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#add_partial","text":"[Source] fun box add_partial( y: U128 val) : U128 val ?","title":"add_partial"},{"location":"builtin-U128/#parameters_17","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_37","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#sub_partial","text":"[Source] fun box sub_partial( y: U128 val) : U128 val ?","title":"sub_partial"},{"location":"builtin-U128/#parameters_18","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_38","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mul_partial","text":"[Source] fun box mul_partial( y: U128 val) : U128 val ?","title":"mul_partial"},{"location":"builtin-U128/#parameters_19","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_39","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#div_partial","text":"[Source] fun box div_partial( y: U128 val) : U128 val ?","title":"div_partial"},{"location":"builtin-U128/#parameters_20","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_40","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#rem_partial","text":"[Source] fun box rem_partial( y: U128 val) : U128 val ?","title":"rem_partial"},{"location":"builtin-U128/#parameters_21","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_41","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#divrem_partial","text":"[Source] fun box divrem_partial( y: U128 val) : (U128 val , U128 val) ?","title":"divrem_partial"},{"location":"builtin-U128/#parameters_22","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_42","text":"( U128 val , U128 val) ?","title":"Returns"},{"location":"builtin-U128/#shl","text":"fun box shl( y: U128 val) : U128 val","title":"shl"},{"location":"builtin-U128/#parameters_23","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_43","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr","text":"fun box shr( y: U128 val) : U128 val","title":"shr"},{"location":"builtin-U128/#parameters_24","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_44","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#fld","text":"fun box fld( y: U128 val) : U128 val","title":"fld"},{"location":"builtin-U128/#parameters_25","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_45","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#fldc","text":"fun box fldc( y: U128 val) : (U128 val , Bool val)","title":"fldc"},{"location":"builtin-U128/#parameters_26","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_46","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#fld_partial","text":"fun box fld_partial( y: U128 val) : U128 val ?","title":"fld_partial"},{"location":"builtin-U128/#parameters_27","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_47","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#fld_unsafe","text":"fun box fld_unsafe( y: U128 val) : U128 val","title":"fld_unsafe"},{"location":"builtin-U128/#parameters_28","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_48","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#mod","text":"fun box mod( y: U128 val) : U128 val","title":"mod"},{"location":"builtin-U128/#parameters_29","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_49","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#modc","text":"fun box modc( y: U128 val) : (U128 val , Bool val)","title":"modc"},{"location":"builtin-U128/#parameters_30","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_50","text":"( U128 val , Bool val)","title":"Returns"},{"location":"builtin-U128/#mod_partial","text":"fun box mod_partial( y: U128 val) : U128 val ?","title":"mod_partial"},{"location":"builtin-U128/#parameters_31","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_51","text":"U128 val ?","title":"Returns"},{"location":"builtin-U128/#mod_unsafe","text":"fun box mod_unsafe( y: U128 val) : U128 val","title":"mod_unsafe"},{"location":"builtin-U128/#parameters_32","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_52","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shl_unsafe","text":"fun box shl_unsafe( y: U128 val) : U128 val","title":"shl_unsafe"},{"location":"builtin-U128/#parameters_33","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_53","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#shr_unsafe","text":"fun box shr_unsafe( y: U128 val) : U128 val","title":"shr_unsafe"},{"location":"builtin-U128/#parameters_34","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_54","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotl","text":"fun box rotl( y: U128 val) : U128 val","title":"rotl"},{"location":"builtin-U128/#parameters_35","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_55","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#rotr","text":"fun box rotr( y: U128 val) : U128 val","title":"rotr"},{"location":"builtin-U128/#parameters_36","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_56","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add_unsafe","text":"fun box add_unsafe( y: U128 val) : U128 val","title":"add_unsafe"},{"location":"builtin-U128/#parameters_37","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_57","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub_unsafe","text":"fun box sub_unsafe( y: U128 val) : U128 val","title":"sub_unsafe"},{"location":"builtin-U128/#parameters_38","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_58","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg_unsafe","text":"fun box neg_unsafe() : U128 val","title":"neg_unsafe"},{"location":"builtin-U128/#returns_59","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_and","text":"fun box op_and( y: U128 val) : U128 val","title":"op_and"},{"location":"builtin-U128/#parameters_39","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_60","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_or","text":"fun box op_or( y: U128 val) : U128 val","title":"op_or"},{"location":"builtin-U128/#parameters_40","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_61","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_xor","text":"fun box op_xor( y: U128 val) : U128 val","title":"op_xor"},{"location":"builtin-U128/#parameters_41","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_62","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#op_not","text":"fun box op_not() : U128 val","title":"op_not"},{"location":"builtin-U128/#returns_63","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#add","text":"fun box add( y: U128 val) : U128 val","title":"add"},{"location":"builtin-U128/#parameters_42","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_64","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#sub","text":"fun box sub( y: U128 val) : U128 val","title":"sub"},{"location":"builtin-U128/#parameters_43","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_65","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#neg","text":"fun box neg() : U128 val","title":"neg"},{"location":"builtin-U128/#returns_66","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#eq","text":"fun box eq( y: U128 val) : Bool val","title":"eq"},{"location":"builtin-U128/#parameters_44","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ne","text":"fun box ne( y: U128 val) : Bool val","title":"ne"},{"location":"builtin-U128/#parameters_45","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_68","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#lt","text":"fun box lt( y: U128 val) : Bool val","title":"lt"},{"location":"builtin-U128/#parameters_46","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_69","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#le","text":"fun box le( y: U128 val) : Bool val","title":"le"},{"location":"builtin-U128/#parameters_47","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_70","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#ge","text":"fun box ge( y: U128 val) : Bool val","title":"ge"},{"location":"builtin-U128/#parameters_48","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_71","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#gt","text":"fun box gt( y: U128 val) : Bool val","title":"gt"},{"location":"builtin-U128/#parameters_49","text":"y: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_72","text":"Bool val","title":"Returns"},{"location":"builtin-U128/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U128/#returns_73","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U128/#returns_74","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U128/#returns_75","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U128/#returns_76","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U128/#returns_77","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U128/#returns_78","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U128/#returns_79","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U128/#returns_80","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U128/#returns_81","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U128/#returns_82","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U128/#returns_83","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_1","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U128/#returns_84","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U128/#returns_85","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U128/#returns_86","text":"USize val","title":"Returns"},{"location":"builtin-U128/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U128/#returns_87","text":"I8 val","title":"Returns"},{"location":"builtin-U128/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U128/#returns_88","text":"I16 val","title":"Returns"},{"location":"builtin-U128/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U128/#returns_89","text":"I32 val","title":"Returns"},{"location":"builtin-U128/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U128/#returns_90","text":"I64 val","title":"Returns"},{"location":"builtin-U128/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U128/#returns_91","text":"I128 val","title":"Returns"},{"location":"builtin-U128/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U128/#returns_92","text":"ILong val","title":"Returns"},{"location":"builtin-U128/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U128/#returns_93","text":"ISize val","title":"Returns"},{"location":"builtin-U128/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U128/#returns_94","text":"U8 val","title":"Returns"},{"location":"builtin-U128/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U128/#returns_95","text":"U16 val","title":"Returns"},{"location":"builtin-U128/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U128/#returns_96","text":"U32 val","title":"Returns"},{"location":"builtin-U128/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U128/#returns_97","text":"U64 val","title":"Returns"},{"location":"builtin-U128/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U128/#returns_98","text":"U128 val","title":"Returns"},{"location":"builtin-U128/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U128/#returns_99","text":"ULong val","title":"Returns"},{"location":"builtin-U128/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U128/#returns_100","text":"USize val","title":"Returns"},{"location":"builtin-U128/#compare","text":"fun box compare( that: U128 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U128/#parameters_50","text":"that: U128 val","title":"Parameters"},{"location":"builtin-U128/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U128/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U128/#_value","text":"fun box _value() : U128 val","title":"_value"},{"location":"builtin-U128/#returns_102","text":"U128 val","title":"Returns"},{"location":"builtin-U16/","text":"U16 \u00b6 [Source] primitive val U16 is UnsignedInteger[U16 val] val Implements \u00b6 UnsignedInteger [ U16 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U16 val) : U16 val^ Parameters \u00b6 value: U16 val Returns \u00b6 U16 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U16 val^ Parameters \u00b6 a: A Returns \u00b6 U16 val^ min_value \u00b6 [Source] new val min_value() : U16 val^ Returns \u00b6 U16 val^ max_value \u00b6 [Source] new val max_value() : U16 val^ Returns \u00b6 U16 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U16 val Returns \u00b6 U16 val abs \u00b6 [Source] fun box abs() : U16 val Returns \u00b6 U16 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U16 val Returns \u00b6 U16 val bswap \u00b6 [Source] fun box bswap() : U16 val Returns \u00b6 U16 val popcount \u00b6 [Source] fun box popcount() : U16 val Returns \u00b6 U16 val clz \u00b6 [Source] fun box clz() : U16 val Returns \u00b6 U16 val ctz \u00b6 [Source] fun box ctz() : U16 val Returns \u00b6 U16 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val Returns \u00b6 U16 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val Returns \u00b6 U16 val bitwidth \u00b6 [Source] fun box bitwidth() : U16 val Returns \u00b6 U16 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val max \u00b6 [Source] fun box max( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val addc \u00b6 [Source] fun box addc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) subc \u00b6 [Source] fun box subc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) divc \u00b6 [Source] fun box divc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) remc \u00b6 [Source] fun box remc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? div_partial \u00b6 [Source] fun box div_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ? Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) ? shl \u00b6 fun box shl( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shr \u00b6 fun box shr( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val fld \u00b6 fun box fld( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val fldc \u00b6 fun box fldc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mod \u00b6 fun box mod( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val modc \u00b6 fun box modc( y: U16 val) : (U16 val , Bool val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U16 val) : U16 val ? Parameters \u00b6 y: U16 val Returns \u00b6 U16 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shl_unsafe \u00b6 fun box shl_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val shr_unsafe \u00b6 fun box shr_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val rotl \u00b6 fun box rotl( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val rotr \u00b6 fun box rotr( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val sub_unsafe \u00b6 fun box sub_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mul_unsafe \u00b6 fun box mul_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val div_unsafe \u00b6 fun box div_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val neg_unsafe \u00b6 fun box neg_unsafe() : U16 val Returns \u00b6 U16 val op_and \u00b6 fun box op_and( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_or \u00b6 fun box op_or( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_xor \u00b6 fun box op_xor( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val op_not \u00b6 fun box op_not() : U16 val Returns \u00b6 U16 val add \u00b6 fun box add( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val sub \u00b6 fun box sub( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val mul \u00b6 fun box mul( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val div \u00b6 fun box div( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val divrem \u00b6 fun box divrem( y: U16 val) : (U16 val , U16 val) Parameters \u00b6 y: U16 val Returns \u00b6 ( U16 val , U16 val) rem \u00b6 fun box rem( y: U16 val) : U16 val Parameters \u00b6 y: U16 val Returns \u00b6 U16 val neg \u00b6 fun box neg() : U16 val Returns \u00b6 U16 val eq \u00b6 fun box eq( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U16 val) : Bool val Parameters \u00b6 y: U16 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U16 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U16 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U16 val Returns \u00b6 U16 val","title":"primitive U16"},{"location":"builtin-U16/#u16","text":"[Source] primitive val U16 is UnsignedInteger[U16 val] val","title":"U16"},{"location":"builtin-U16/#implements","text":"UnsignedInteger [ U16 val] val","title":"Implements"},{"location":"builtin-U16/#constructors","text":"","title":"Constructors"},{"location":"builtin-U16/#create","text":"[Source] new val create( value: U16 val) : U16 val^","title":"create"},{"location":"builtin-U16/#parameters","text":"value: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U16 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U16/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U16/#returns_1","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#min_value","text":"[Source] new val min_value() : U16 val^","title":"min_value"},{"location":"builtin-U16/#returns_2","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#max_value","text":"[Source] new val max_value() : U16 val^","title":"max_value"},{"location":"builtin-U16/#returns_3","text":"U16 val^","title":"Returns"},{"location":"builtin-U16/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U16/#next_pow2","text":"[Source] fun box next_pow2() : U16 val","title":"next_pow2"},{"location":"builtin-U16/#returns_4","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#abs","text":"[Source] fun box abs() : U16 val","title":"abs"},{"location":"builtin-U16/#returns_5","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bit_reverse","text":"[Source] fun box bit_reverse() : U16 val","title":"bit_reverse"},{"location":"builtin-U16/#returns_6","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bswap","text":"[Source] fun box bswap() : U16 val","title":"bswap"},{"location":"builtin-U16/#returns_7","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#popcount","text":"[Source] fun box popcount() : U16 val","title":"popcount"},{"location":"builtin-U16/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz","text":"[Source] fun box clz() : U16 val","title":"clz"},{"location":"builtin-U16/#returns_9","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz","text":"[Source] fun box ctz() : U16 val","title":"ctz"},{"location":"builtin-U16/#returns_10","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U16 val","title":"clz_unsafe"},{"location":"builtin-U16/#returns_11","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U16 val","title":"ctz_unsafe"},{"location":"builtin-U16/#returns_12","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bitwidth","text":"[Source] fun box bitwidth() : U16 val","title":"bitwidth"},{"location":"builtin-U16/#returns_13","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U16/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U16/#min","text":"[Source] fun box min( y: U16 val) : U16 val","title":"min"},{"location":"builtin-U16/#parameters_2","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_15","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#max","text":"[Source] fun box max( y: U16 val) : U16 val","title":"max"},{"location":"builtin-U16/#parameters_3","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_16","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#addc","text":"[Source] fun box addc( y: U16 val) : (U16 val , Bool val)","title":"addc"},{"location":"builtin-U16/#parameters_4","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_17","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#subc","text":"[Source] fun box subc( y: U16 val) : (U16 val , Bool val)","title":"subc"},{"location":"builtin-U16/#parameters_5","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_18","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mulc","text":"[Source] fun box mulc( y: U16 val) : (U16 val , Bool val)","title":"mulc"},{"location":"builtin-U16/#parameters_6","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_19","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#divc","text":"[Source] fun box divc( y: U16 val) : (U16 val , Bool val)","title":"divc"},{"location":"builtin-U16/#parameters_7","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_20","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#remc","text":"[Source] fun box remc( y: U16 val) : (U16 val , Bool val)","title":"remc"},{"location":"builtin-U16/#parameters_8","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_21","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#add_partial","text":"[Source] fun box add_partial( y: U16 val) : U16 val ?","title":"add_partial"},{"location":"builtin-U16/#parameters_9","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_22","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#sub_partial","text":"[Source] fun box sub_partial( y: U16 val) : U16 val ?","title":"sub_partial"},{"location":"builtin-U16/#parameters_10","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_23","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mul_partial","text":"[Source] fun box mul_partial( y: U16 val) : U16 val ?","title":"mul_partial"},{"location":"builtin-U16/#parameters_11","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_24","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#div_partial","text":"[Source] fun box div_partial( y: U16 val) : U16 val ?","title":"div_partial"},{"location":"builtin-U16/#parameters_12","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_25","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#rem_partial","text":"[Source] fun box rem_partial( y: U16 val) : U16 val ?","title":"rem_partial"},{"location":"builtin-U16/#parameters_13","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_26","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#divrem_partial","text":"[Source] fun box divrem_partial( y: U16 val) : (U16 val , U16 val) ?","title":"divrem_partial"},{"location":"builtin-U16/#parameters_14","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_27","text":"( U16 val , U16 val) ?","title":"Returns"},{"location":"builtin-U16/#shl","text":"fun box shl( y: U16 val) : U16 val","title":"shl"},{"location":"builtin-U16/#parameters_15","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_28","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr","text":"fun box shr( y: U16 val) : U16 val","title":"shr"},{"location":"builtin-U16/#parameters_16","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_29","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#fld","text":"fun box fld( y: U16 val) : U16 val","title":"fld"},{"location":"builtin-U16/#parameters_17","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_30","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#fldc","text":"fun box fldc( y: U16 val) : (U16 val , Bool val)","title":"fldc"},{"location":"builtin-U16/#parameters_18","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_31","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#fld_partial","text":"fun box fld_partial( y: U16 val) : U16 val ?","title":"fld_partial"},{"location":"builtin-U16/#parameters_19","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_32","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#fld_unsafe","text":"fun box fld_unsafe( y: U16 val) : U16 val","title":"fld_unsafe"},{"location":"builtin-U16/#parameters_20","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_33","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mod","text":"fun box mod( y: U16 val) : U16 val","title":"mod"},{"location":"builtin-U16/#parameters_21","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_34","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#modc","text":"fun box modc( y: U16 val) : (U16 val , Bool val)","title":"modc"},{"location":"builtin-U16/#parameters_22","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_35","text":"( U16 val , Bool val)","title":"Returns"},{"location":"builtin-U16/#mod_partial","text":"fun box mod_partial( y: U16 val) : U16 val ?","title":"mod_partial"},{"location":"builtin-U16/#parameters_23","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_36","text":"U16 val ?","title":"Returns"},{"location":"builtin-U16/#mod_unsafe","text":"fun box mod_unsafe( y: U16 val) : U16 val","title":"mod_unsafe"},{"location":"builtin-U16/#parameters_24","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_37","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shl_unsafe","text":"fun box shl_unsafe( y: U16 val) : U16 val","title":"shl_unsafe"},{"location":"builtin-U16/#parameters_25","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_38","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#shr_unsafe","text":"fun box shr_unsafe( y: U16 val) : U16 val","title":"shr_unsafe"},{"location":"builtin-U16/#parameters_26","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_39","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotl","text":"fun box rotl( y: U16 val) : U16 val","title":"rotl"},{"location":"builtin-U16/#parameters_27","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_40","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#rotr","text":"fun box rotr( y: U16 val) : U16 val","title":"rotr"},{"location":"builtin-U16/#parameters_28","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_41","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U16/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U16/#add_unsafe","text":"fun box add_unsafe( y: U16 val) : U16 val","title":"add_unsafe"},{"location":"builtin-U16/#parameters_29","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_43","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub_unsafe","text":"fun box sub_unsafe( y: U16 val) : U16 val","title":"sub_unsafe"},{"location":"builtin-U16/#parameters_30","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_44","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul_unsafe","text":"fun box mul_unsafe( y: U16 val) : U16 val","title":"mul_unsafe"},{"location":"builtin-U16/#parameters_31","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_45","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div_unsafe","text":"fun box div_unsafe( y: U16 val) : U16 val","title":"div_unsafe"},{"location":"builtin-U16/#parameters_32","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_46","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem_unsafe","text":"fun box divrem_unsafe( y: U16 val) : (U16 val , U16 val)","title":"divrem_unsafe"},{"location":"builtin-U16/#parameters_33","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_47","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem_unsafe","text":"fun box rem_unsafe( y: U16 val) : U16 val","title":"rem_unsafe"},{"location":"builtin-U16/#parameters_34","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_48","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg_unsafe","text":"fun box neg_unsafe() : U16 val","title":"neg_unsafe"},{"location":"builtin-U16/#returns_49","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_and","text":"fun box op_and( y: U16 val) : U16 val","title":"op_and"},{"location":"builtin-U16/#parameters_35","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_50","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_or","text":"fun box op_or( y: U16 val) : U16 val","title":"op_or"},{"location":"builtin-U16/#parameters_36","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_51","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_xor","text":"fun box op_xor( y: U16 val) : U16 val","title":"op_xor"},{"location":"builtin-U16/#parameters_37","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_52","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#op_not","text":"fun box op_not() : U16 val","title":"op_not"},{"location":"builtin-U16/#returns_53","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#add","text":"fun box add( y: U16 val) : U16 val","title":"add"},{"location":"builtin-U16/#parameters_38","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_54","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#sub","text":"fun box sub( y: U16 val) : U16 val","title":"sub"},{"location":"builtin-U16/#parameters_39","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_55","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#mul","text":"fun box mul( y: U16 val) : U16 val","title":"mul"},{"location":"builtin-U16/#parameters_40","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_56","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#div","text":"fun box div( y: U16 val) : U16 val","title":"div"},{"location":"builtin-U16/#parameters_41","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_57","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#divrem","text":"fun box divrem( y: U16 val) : (U16 val , U16 val)","title":"divrem"},{"location":"builtin-U16/#parameters_42","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_58","text":"( U16 val , U16 val)","title":"Returns"},{"location":"builtin-U16/#rem","text":"fun box rem( y: U16 val) : U16 val","title":"rem"},{"location":"builtin-U16/#parameters_43","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_59","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#neg","text":"fun box neg() : U16 val","title":"neg"},{"location":"builtin-U16/#returns_60","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#eq","text":"fun box eq( y: U16 val) : Bool val","title":"eq"},{"location":"builtin-U16/#parameters_44","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ne","text":"fun box ne( y: U16 val) : Bool val","title":"ne"},{"location":"builtin-U16/#parameters_45","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#lt","text":"fun box lt( y: U16 val) : Bool val","title":"lt"},{"location":"builtin-U16/#parameters_46","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#le","text":"fun box le( y: U16 val) : Bool val","title":"le"},{"location":"builtin-U16/#parameters_47","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#ge","text":"fun box ge( y: U16 val) : Bool val","title":"ge"},{"location":"builtin-U16/#parameters_48","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#gt","text":"fun box gt( y: U16 val) : Bool val","title":"gt"},{"location":"builtin-U16/#parameters_49","text":"y: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U16/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U16/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U16/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U16/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U16/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U16/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U16/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U16/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U16/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U16/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U16/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U16/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_1","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U16/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U16/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U16/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U16/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U16/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U16/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U16/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U16/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U16/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U16/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U16/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U16/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U16/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U16/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U16/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U16/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U16/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U16/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U16/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U16/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U16/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U16/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U16/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U16/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U16/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U16/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U16/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U16/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U16/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U16/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U16/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U16/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U16/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U16/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U16/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U16/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U16/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U16/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U16/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U16/#compare","text":"fun box compare( that: U16 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U16/#parameters_50","text":"that: U16 val","title":"Parameters"},{"location":"builtin-U16/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U16/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U16/#_value","text":"fun box _value() : U16 val","title":"_value"},{"location":"builtin-U16/#returns_102","text":"U16 val","title":"Returns"},{"location":"builtin-U32/","text":"U32 \u00b6 [Source] primitive val U32 is UnsignedInteger[U32 val] val Implements \u00b6 UnsignedInteger [ U32 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U32 val) : U32 val^ Parameters \u00b6 value: U32 val Returns \u00b6 U32 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U32 val^ Parameters \u00b6 a: A Returns \u00b6 U32 val^ min_value \u00b6 [Source] new val min_value() : U32 val^ Returns \u00b6 U32 val^ max_value \u00b6 [Source] new val max_value() : U32 val^ Returns \u00b6 U32 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U32 val Returns \u00b6 U32 val abs \u00b6 [Source] fun box abs() : U32 val Returns \u00b6 U32 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U32 val Returns \u00b6 U32 val bswap \u00b6 [Source] fun box bswap() : U32 val Returns \u00b6 U32 val popcount \u00b6 [Source] fun box popcount() : U32 val Returns \u00b6 U32 val clz \u00b6 [Source] fun box clz() : U32 val Returns \u00b6 U32 val ctz \u00b6 [Source] fun box ctz() : U32 val Returns \u00b6 U32 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val Returns \u00b6 U32 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val Returns \u00b6 U32 val bitwidth \u00b6 [Source] fun box bitwidth() : U32 val Returns \u00b6 U32 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val max \u00b6 [Source] fun box max( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val addc \u00b6 [Source] fun box addc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) subc \u00b6 [Source] fun box subc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) divc \u00b6 [Source] fun box divc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) remc \u00b6 [Source] fun box remc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? div_partial \u00b6 [Source] fun box div_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ? Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) ? shl \u00b6 fun box shl( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shr \u00b6 fun box shr( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val fld \u00b6 fun box fld( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val fldc \u00b6 fun box fldc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mod \u00b6 fun box mod( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val modc \u00b6 fun box modc( y: U32 val) : (U32 val , Bool val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U32 val) : U32 val ? Parameters \u00b6 y: U32 val Returns \u00b6 U32 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shl_unsafe \u00b6 fun box shl_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val shr_unsafe \u00b6 fun box shr_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val rotl \u00b6 fun box rotl( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val rotr \u00b6 fun box rotr( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val sub_unsafe \u00b6 fun box sub_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mul_unsafe \u00b6 fun box mul_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val div_unsafe \u00b6 fun box div_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val neg_unsafe \u00b6 fun box neg_unsafe() : U32 val Returns \u00b6 U32 val op_and \u00b6 fun box op_and( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_or \u00b6 fun box op_or( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_xor \u00b6 fun box op_xor( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val op_not \u00b6 fun box op_not() : U32 val Returns \u00b6 U32 val add \u00b6 fun box add( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val sub \u00b6 fun box sub( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val mul \u00b6 fun box mul( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val div \u00b6 fun box div( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val divrem \u00b6 fun box divrem( y: U32 val) : (U32 val , U32 val) Parameters \u00b6 y: U32 val Returns \u00b6 ( U32 val , U32 val) rem \u00b6 fun box rem( y: U32 val) : U32 val Parameters \u00b6 y: U32 val Returns \u00b6 U32 val neg \u00b6 fun box neg() : U32 val Returns \u00b6 U32 val eq \u00b6 fun box eq( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U32 val) : Bool val Parameters \u00b6 y: U32 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U32 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U32 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U32 val Returns \u00b6 U32 val","title":"primitive U32"},{"location":"builtin-U32/#u32","text":"[Source] primitive val U32 is UnsignedInteger[U32 val] val","title":"U32"},{"location":"builtin-U32/#implements","text":"UnsignedInteger [ U32 val] val","title":"Implements"},{"location":"builtin-U32/#constructors","text":"","title":"Constructors"},{"location":"builtin-U32/#create","text":"[Source] new val create( value: U32 val) : U32 val^","title":"create"},{"location":"builtin-U32/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U32 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U32/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U32/#returns_1","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#min_value","text":"[Source] new val min_value() : U32 val^","title":"min_value"},{"location":"builtin-U32/#returns_2","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#max_value","text":"[Source] new val max_value() : U32 val^","title":"max_value"},{"location":"builtin-U32/#returns_3","text":"U32 val^","title":"Returns"},{"location":"builtin-U32/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U32/#next_pow2","text":"[Source] fun box next_pow2() : U32 val","title":"next_pow2"},{"location":"builtin-U32/#returns_4","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#abs","text":"[Source] fun box abs() : U32 val","title":"abs"},{"location":"builtin-U32/#returns_5","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bit_reverse","text":"[Source] fun box bit_reverse() : U32 val","title":"bit_reverse"},{"location":"builtin-U32/#returns_6","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bswap","text":"[Source] fun box bswap() : U32 val","title":"bswap"},{"location":"builtin-U32/#returns_7","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#popcount","text":"[Source] fun box popcount() : U32 val","title":"popcount"},{"location":"builtin-U32/#returns_8","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz","text":"[Source] fun box clz() : U32 val","title":"clz"},{"location":"builtin-U32/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz","text":"[Source] fun box ctz() : U32 val","title":"ctz"},{"location":"builtin-U32/#returns_10","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U32 val","title":"clz_unsafe"},{"location":"builtin-U32/#returns_11","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U32 val","title":"ctz_unsafe"},{"location":"builtin-U32/#returns_12","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bitwidth","text":"[Source] fun box bitwidth() : U32 val","title":"bitwidth"},{"location":"builtin-U32/#returns_13","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U32/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U32/#min","text":"[Source] fun box min( y: U32 val) : U32 val","title":"min"},{"location":"builtin-U32/#parameters_2","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_15","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#max","text":"[Source] fun box max( y: U32 val) : U32 val","title":"max"},{"location":"builtin-U32/#parameters_3","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_16","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#addc","text":"[Source] fun box addc( y: U32 val) : (U32 val , Bool val)","title":"addc"},{"location":"builtin-U32/#parameters_4","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_17","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#subc","text":"[Source] fun box subc( y: U32 val) : (U32 val , Bool val)","title":"subc"},{"location":"builtin-U32/#parameters_5","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_18","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mulc","text":"[Source] fun box mulc( y: U32 val) : (U32 val , Bool val)","title":"mulc"},{"location":"builtin-U32/#parameters_6","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_19","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#divc","text":"[Source] fun box divc( y: U32 val) : (U32 val , Bool val)","title":"divc"},{"location":"builtin-U32/#parameters_7","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_20","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#remc","text":"[Source] fun box remc( y: U32 val) : (U32 val , Bool val)","title":"remc"},{"location":"builtin-U32/#parameters_8","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_21","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#add_partial","text":"[Source] fun box add_partial( y: U32 val) : U32 val ?","title":"add_partial"},{"location":"builtin-U32/#parameters_9","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_22","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#sub_partial","text":"[Source] fun box sub_partial( y: U32 val) : U32 val ?","title":"sub_partial"},{"location":"builtin-U32/#parameters_10","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_23","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mul_partial","text":"[Source] fun box mul_partial( y: U32 val) : U32 val ?","title":"mul_partial"},{"location":"builtin-U32/#parameters_11","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_24","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#div_partial","text":"[Source] fun box div_partial( y: U32 val) : U32 val ?","title":"div_partial"},{"location":"builtin-U32/#parameters_12","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_25","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#rem_partial","text":"[Source] fun box rem_partial( y: U32 val) : U32 val ?","title":"rem_partial"},{"location":"builtin-U32/#parameters_13","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_26","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#divrem_partial","text":"[Source] fun box divrem_partial( y: U32 val) : (U32 val , U32 val) ?","title":"divrem_partial"},{"location":"builtin-U32/#parameters_14","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_27","text":"( U32 val , U32 val) ?","title":"Returns"},{"location":"builtin-U32/#shl","text":"fun box shl( y: U32 val) : U32 val","title":"shl"},{"location":"builtin-U32/#parameters_15","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_28","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr","text":"fun box shr( y: U32 val) : U32 val","title":"shr"},{"location":"builtin-U32/#parameters_16","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_29","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#fld","text":"fun box fld( y: U32 val) : U32 val","title":"fld"},{"location":"builtin-U32/#parameters_17","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_30","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#fldc","text":"fun box fldc( y: U32 val) : (U32 val , Bool val)","title":"fldc"},{"location":"builtin-U32/#parameters_18","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_31","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#fld_partial","text":"fun box fld_partial( y: U32 val) : U32 val ?","title":"fld_partial"},{"location":"builtin-U32/#parameters_19","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_32","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#fld_unsafe","text":"fun box fld_unsafe( y: U32 val) : U32 val","title":"fld_unsafe"},{"location":"builtin-U32/#parameters_20","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_33","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mod","text":"fun box mod( y: U32 val) : U32 val","title":"mod"},{"location":"builtin-U32/#parameters_21","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_34","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#modc","text":"fun box modc( y: U32 val) : (U32 val , Bool val)","title":"modc"},{"location":"builtin-U32/#parameters_22","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_35","text":"( U32 val , Bool val)","title":"Returns"},{"location":"builtin-U32/#mod_partial","text":"fun box mod_partial( y: U32 val) : U32 val ?","title":"mod_partial"},{"location":"builtin-U32/#parameters_23","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_36","text":"U32 val ?","title":"Returns"},{"location":"builtin-U32/#mod_unsafe","text":"fun box mod_unsafe( y: U32 val) : U32 val","title":"mod_unsafe"},{"location":"builtin-U32/#parameters_24","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_37","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shl_unsafe","text":"fun box shl_unsafe( y: U32 val) : U32 val","title":"shl_unsafe"},{"location":"builtin-U32/#parameters_25","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_38","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#shr_unsafe","text":"fun box shr_unsafe( y: U32 val) : U32 val","title":"shr_unsafe"},{"location":"builtin-U32/#parameters_26","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_39","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotl","text":"fun box rotl( y: U32 val) : U32 val","title":"rotl"},{"location":"builtin-U32/#parameters_27","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_40","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#rotr","text":"fun box rotr( y: U32 val) : U32 val","title":"rotr"},{"location":"builtin-U32/#parameters_28","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_41","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U32/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U32/#add_unsafe","text":"fun box add_unsafe( y: U32 val) : U32 val","title":"add_unsafe"},{"location":"builtin-U32/#parameters_29","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_43","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub_unsafe","text":"fun box sub_unsafe( y: U32 val) : U32 val","title":"sub_unsafe"},{"location":"builtin-U32/#parameters_30","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_44","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul_unsafe","text":"fun box mul_unsafe( y: U32 val) : U32 val","title":"mul_unsafe"},{"location":"builtin-U32/#parameters_31","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_45","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div_unsafe","text":"fun box div_unsafe( y: U32 val) : U32 val","title":"div_unsafe"},{"location":"builtin-U32/#parameters_32","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_46","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem_unsafe","text":"fun box divrem_unsafe( y: U32 val) : (U32 val , U32 val)","title":"divrem_unsafe"},{"location":"builtin-U32/#parameters_33","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_47","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem_unsafe","text":"fun box rem_unsafe( y: U32 val) : U32 val","title":"rem_unsafe"},{"location":"builtin-U32/#parameters_34","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_48","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg_unsafe","text":"fun box neg_unsafe() : U32 val","title":"neg_unsafe"},{"location":"builtin-U32/#returns_49","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_and","text":"fun box op_and( y: U32 val) : U32 val","title":"op_and"},{"location":"builtin-U32/#parameters_35","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_50","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_or","text":"fun box op_or( y: U32 val) : U32 val","title":"op_or"},{"location":"builtin-U32/#parameters_36","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_51","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_xor","text":"fun box op_xor( y: U32 val) : U32 val","title":"op_xor"},{"location":"builtin-U32/#parameters_37","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_52","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#op_not","text":"fun box op_not() : U32 val","title":"op_not"},{"location":"builtin-U32/#returns_53","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#add","text":"fun box add( y: U32 val) : U32 val","title":"add"},{"location":"builtin-U32/#parameters_38","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_54","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#sub","text":"fun box sub( y: U32 val) : U32 val","title":"sub"},{"location":"builtin-U32/#parameters_39","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_55","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#mul","text":"fun box mul( y: U32 val) : U32 val","title":"mul"},{"location":"builtin-U32/#parameters_40","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_56","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#div","text":"fun box div( y: U32 val) : U32 val","title":"div"},{"location":"builtin-U32/#parameters_41","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_57","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#divrem","text":"fun box divrem( y: U32 val) : (U32 val , U32 val)","title":"divrem"},{"location":"builtin-U32/#parameters_42","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_58","text":"( U32 val , U32 val)","title":"Returns"},{"location":"builtin-U32/#rem","text":"fun box rem( y: U32 val) : U32 val","title":"rem"},{"location":"builtin-U32/#parameters_43","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_59","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#neg","text":"fun box neg() : U32 val","title":"neg"},{"location":"builtin-U32/#returns_60","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#eq","text":"fun box eq( y: U32 val) : Bool val","title":"eq"},{"location":"builtin-U32/#parameters_44","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ne","text":"fun box ne( y: U32 val) : Bool val","title":"ne"},{"location":"builtin-U32/#parameters_45","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#lt","text":"fun box lt( y: U32 val) : Bool val","title":"lt"},{"location":"builtin-U32/#parameters_46","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#le","text":"fun box le( y: U32 val) : Bool val","title":"le"},{"location":"builtin-U32/#parameters_47","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#ge","text":"fun box ge( y: U32 val) : Bool val","title":"ge"},{"location":"builtin-U32/#parameters_48","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#gt","text":"fun box gt( y: U32 val) : Bool val","title":"gt"},{"location":"builtin-U32/#parameters_49","text":"y: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U32/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U32/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U32/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U32/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U32/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U32/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U32/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U32/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U32/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U32/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U32/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U32/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U32/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_1","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U32/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U32/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U32/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U32/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U32/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U32/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U32/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U32/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U32/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U32/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U32/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U32/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U32/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U32/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U32/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U32/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U32/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U32/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U32/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U32/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U32/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U32/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U32/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U32/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U32/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U32/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U32/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U32/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U32/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U32/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U32/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U32/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U32/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U32/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U32/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U32/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U32/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U32/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U32/#compare","text":"fun box compare( that: U32 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U32/#parameters_50","text":"that: U32 val","title":"Parameters"},{"location":"builtin-U32/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U32/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U32/#_value","text":"fun box _value() : U32 val","title":"_value"},{"location":"builtin-U32/#returns_102","text":"U32 val","title":"Returns"},{"location":"builtin-U64/","text":"U64 \u00b6 [Source] primitive val U64 is UnsignedInteger[U64 val] val Implements \u00b6 UnsignedInteger [ U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U64 val) : U64 val^ Parameters \u00b6 value: U64 val Returns \u00b6 U64 val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U64 val^ Parameters \u00b6 a: A Returns \u00b6 U64 val^ min_value \u00b6 [Source] new val min_value() : U64 val^ Returns \u00b6 U64 val^ max_value \u00b6 [Source] new val max_value() : U64 val^ Returns \u00b6 U64 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U64 val Returns \u00b6 U64 val abs \u00b6 [Source] fun box abs() : U64 val Returns \u00b6 U64 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U64 val Returns \u00b6 U64 val bswap \u00b6 [Source] fun box bswap() : U64 val Returns \u00b6 U64 val popcount \u00b6 [Source] fun box popcount() : U64 val Returns \u00b6 U64 val clz \u00b6 [Source] fun box clz() : U64 val Returns \u00b6 U64 val ctz \u00b6 [Source] fun box ctz() : U64 val Returns \u00b6 U64 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val Returns \u00b6 U64 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val Returns \u00b6 U64 val bitwidth \u00b6 [Source] fun box bitwidth() : U64 val Returns \u00b6 U64 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val max \u00b6 [Source] fun box max( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) subc \u00b6 [Source] fun box subc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) divc \u00b6 [Source] fun box divc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) remc \u00b6 [Source] fun box remc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? div_partial \u00b6 [Source] fun box div_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ? Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) ? shl \u00b6 fun box shl( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shr \u00b6 fun box shr( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val fld \u00b6 fun box fld( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val fldc \u00b6 fun box fldc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mod \u00b6 fun box mod( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val modc \u00b6 fun box modc( y: U64 val) : (U64 val , Bool val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U64 val) : U64 val ? Parameters \u00b6 y: U64 val Returns \u00b6 U64 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shl_unsafe \u00b6 fun box shl_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val shr_unsafe \u00b6 fun box shr_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val rotl \u00b6 fun box rotl( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val rotr \u00b6 fun box rotr( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val sub_unsafe \u00b6 fun box sub_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mul_unsafe \u00b6 fun box mul_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val div_unsafe \u00b6 fun box div_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val neg_unsafe \u00b6 fun box neg_unsafe() : U64 val Returns \u00b6 U64 val op_and \u00b6 fun box op_and( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_or \u00b6 fun box op_or( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_xor \u00b6 fun box op_xor( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val op_not \u00b6 fun box op_not() : U64 val Returns \u00b6 U64 val add \u00b6 fun box add( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val sub \u00b6 fun box sub( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val mul \u00b6 fun box mul( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val div \u00b6 fun box div( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val divrem \u00b6 fun box divrem( y: U64 val) : (U64 val , U64 val) Parameters \u00b6 y: U64 val Returns \u00b6 ( U64 val , U64 val) rem \u00b6 fun box rem( y: U64 val) : U64 val Parameters \u00b6 y: U64 val Returns \u00b6 U64 val neg \u00b6 fun box neg() : U64 val Returns \u00b6 U64 val eq \u00b6 fun box eq( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U64 val) : Bool val Parameters \u00b6 y: U64 val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U64 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U64 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U64 val Returns \u00b6 U64 val","title":"primitive U64"},{"location":"builtin-U64/#u64","text":"[Source] primitive val U64 is UnsignedInteger[U64 val] val","title":"U64"},{"location":"builtin-U64/#implements","text":"UnsignedInteger [ U64 val] val","title":"Implements"},{"location":"builtin-U64/#constructors","text":"","title":"Constructors"},{"location":"builtin-U64/#create","text":"[Source] new val create( value: U64 val) : U64 val^","title":"create"},{"location":"builtin-U64/#parameters","text":"value: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : U64 val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-U64/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-U64/#returns_1","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#min_value","text":"[Source] new val min_value() : U64 val^","title":"min_value"},{"location":"builtin-U64/#returns_2","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#max_value","text":"[Source] new val max_value() : U64 val^","title":"max_value"},{"location":"builtin-U64/#returns_3","text":"U64 val^","title":"Returns"},{"location":"builtin-U64/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U64/#next_pow2","text":"[Source] fun box next_pow2() : U64 val","title":"next_pow2"},{"location":"builtin-U64/#returns_4","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#abs","text":"[Source] fun box abs() : U64 val","title":"abs"},{"location":"builtin-U64/#returns_5","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bit_reverse","text":"[Source] fun box bit_reverse() : U64 val","title":"bit_reverse"},{"location":"builtin-U64/#returns_6","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bswap","text":"[Source] fun box bswap() : U64 val","title":"bswap"},{"location":"builtin-U64/#returns_7","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#popcount","text":"[Source] fun box popcount() : U64 val","title":"popcount"},{"location":"builtin-U64/#returns_8","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz","text":"[Source] fun box clz() : U64 val","title":"clz"},{"location":"builtin-U64/#returns_9","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz","text":"[Source] fun box ctz() : U64 val","title":"ctz"},{"location":"builtin-U64/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U64 val","title":"clz_unsafe"},{"location":"builtin-U64/#returns_11","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U64 val","title":"ctz_unsafe"},{"location":"builtin-U64/#returns_12","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bitwidth","text":"[Source] fun box bitwidth() : U64 val","title":"bitwidth"},{"location":"builtin-U64/#returns_13","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U64/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U64/#min","text":"[Source] fun box min( y: U64 val) : U64 val","title":"min"},{"location":"builtin-U64/#parameters_2","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_15","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#max","text":"[Source] fun box max( y: U64 val) : U64 val","title":"max"},{"location":"builtin-U64/#parameters_3","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_16","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-U64/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-U64/#addc","text":"[Source] fun box addc( y: U64 val) : (U64 val , Bool val)","title":"addc"},{"location":"builtin-U64/#parameters_4","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_18","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#subc","text":"[Source] fun box subc( y: U64 val) : (U64 val , Bool val)","title":"subc"},{"location":"builtin-U64/#parameters_5","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_19","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mulc","text":"[Source] fun box mulc( y: U64 val) : (U64 val , Bool val)","title":"mulc"},{"location":"builtin-U64/#parameters_6","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_20","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#divc","text":"[Source] fun box divc( y: U64 val) : (U64 val , Bool val)","title":"divc"},{"location":"builtin-U64/#parameters_7","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_21","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#remc","text":"[Source] fun box remc( y: U64 val) : (U64 val , Bool val)","title":"remc"},{"location":"builtin-U64/#parameters_8","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_22","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#add_partial","text":"[Source] fun box add_partial( y: U64 val) : U64 val ?","title":"add_partial"},{"location":"builtin-U64/#parameters_9","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_23","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#sub_partial","text":"[Source] fun box sub_partial( y: U64 val) : U64 val ?","title":"sub_partial"},{"location":"builtin-U64/#parameters_10","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_24","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mul_partial","text":"[Source] fun box mul_partial( y: U64 val) : U64 val ?","title":"mul_partial"},{"location":"builtin-U64/#parameters_11","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_25","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#div_partial","text":"[Source] fun box div_partial( y: U64 val) : U64 val ?","title":"div_partial"},{"location":"builtin-U64/#parameters_12","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_26","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#rem_partial","text":"[Source] fun box rem_partial( y: U64 val) : U64 val ?","title":"rem_partial"},{"location":"builtin-U64/#parameters_13","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_27","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#divrem_partial","text":"[Source] fun box divrem_partial( y: U64 val) : (U64 val , U64 val) ?","title":"divrem_partial"},{"location":"builtin-U64/#parameters_14","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_28","text":"( U64 val , U64 val) ?","title":"Returns"},{"location":"builtin-U64/#shl","text":"fun box shl( y: U64 val) : U64 val","title":"shl"},{"location":"builtin-U64/#parameters_15","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_29","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr","text":"fun box shr( y: U64 val) : U64 val","title":"shr"},{"location":"builtin-U64/#parameters_16","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_30","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#fld","text":"fun box fld( y: U64 val) : U64 val","title":"fld"},{"location":"builtin-U64/#parameters_17","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_31","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#fldc","text":"fun box fldc( y: U64 val) : (U64 val , Bool val)","title":"fldc"},{"location":"builtin-U64/#parameters_18","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_32","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#fld_partial","text":"fun box fld_partial( y: U64 val) : U64 val ?","title":"fld_partial"},{"location":"builtin-U64/#parameters_19","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_33","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#fld_unsafe","text":"fun box fld_unsafe( y: U64 val) : U64 val","title":"fld_unsafe"},{"location":"builtin-U64/#parameters_20","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_34","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mod","text":"fun box mod( y: U64 val) : U64 val","title":"mod"},{"location":"builtin-U64/#parameters_21","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_35","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#modc","text":"fun box modc( y: U64 val) : (U64 val , Bool val)","title":"modc"},{"location":"builtin-U64/#parameters_22","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_36","text":"( U64 val , Bool val)","title":"Returns"},{"location":"builtin-U64/#mod_partial","text":"fun box mod_partial( y: U64 val) : U64 val ?","title":"mod_partial"},{"location":"builtin-U64/#parameters_23","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_37","text":"U64 val ?","title":"Returns"},{"location":"builtin-U64/#mod_unsafe","text":"fun box mod_unsafe( y: U64 val) : U64 val","title":"mod_unsafe"},{"location":"builtin-U64/#parameters_24","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_38","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shl_unsafe","text":"fun box shl_unsafe( y: U64 val) : U64 val","title":"shl_unsafe"},{"location":"builtin-U64/#parameters_25","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_39","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#shr_unsafe","text":"fun box shr_unsafe( y: U64 val) : U64 val","title":"shr_unsafe"},{"location":"builtin-U64/#parameters_26","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_40","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotl","text":"fun box rotl( y: U64 val) : U64 val","title":"rotl"},{"location":"builtin-U64/#parameters_27","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_41","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#rotr","text":"fun box rotr( y: U64 val) : U64 val","title":"rotr"},{"location":"builtin-U64/#parameters_28","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_42","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U64/#returns_43","text":"String iso^","title":"Returns"},{"location":"builtin-U64/#add_unsafe","text":"fun box add_unsafe( y: U64 val) : U64 val","title":"add_unsafe"},{"location":"builtin-U64/#parameters_29","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_44","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub_unsafe","text":"fun box sub_unsafe( y: U64 val) : U64 val","title":"sub_unsafe"},{"location":"builtin-U64/#parameters_30","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_45","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul_unsafe","text":"fun box mul_unsafe( y: U64 val) : U64 val","title":"mul_unsafe"},{"location":"builtin-U64/#parameters_31","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_46","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div_unsafe","text":"fun box div_unsafe( y: U64 val) : U64 val","title":"div_unsafe"},{"location":"builtin-U64/#parameters_32","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_47","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem_unsafe","text":"fun box divrem_unsafe( y: U64 val) : (U64 val , U64 val)","title":"divrem_unsafe"},{"location":"builtin-U64/#parameters_33","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_48","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem_unsafe","text":"fun box rem_unsafe( y: U64 val) : U64 val","title":"rem_unsafe"},{"location":"builtin-U64/#parameters_34","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_49","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg_unsafe","text":"fun box neg_unsafe() : U64 val","title":"neg_unsafe"},{"location":"builtin-U64/#returns_50","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_and","text":"fun box op_and( y: U64 val) : U64 val","title":"op_and"},{"location":"builtin-U64/#parameters_35","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_51","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_or","text":"fun box op_or( y: U64 val) : U64 val","title":"op_or"},{"location":"builtin-U64/#parameters_36","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_52","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_xor","text":"fun box op_xor( y: U64 val) : U64 val","title":"op_xor"},{"location":"builtin-U64/#parameters_37","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_53","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#op_not","text":"fun box op_not() : U64 val","title":"op_not"},{"location":"builtin-U64/#returns_54","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#add","text":"fun box add( y: U64 val) : U64 val","title":"add"},{"location":"builtin-U64/#parameters_38","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_55","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#sub","text":"fun box sub( y: U64 val) : U64 val","title":"sub"},{"location":"builtin-U64/#parameters_39","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_56","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#mul","text":"fun box mul( y: U64 val) : U64 val","title":"mul"},{"location":"builtin-U64/#parameters_40","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_57","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#div","text":"fun box div( y: U64 val) : U64 val","title":"div"},{"location":"builtin-U64/#parameters_41","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_58","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#divrem","text":"fun box divrem( y: U64 val) : (U64 val , U64 val)","title":"divrem"},{"location":"builtin-U64/#parameters_42","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_59","text":"( U64 val , U64 val)","title":"Returns"},{"location":"builtin-U64/#rem","text":"fun box rem( y: U64 val) : U64 val","title":"rem"},{"location":"builtin-U64/#parameters_43","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_60","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#neg","text":"fun box neg() : U64 val","title":"neg"},{"location":"builtin-U64/#returns_61","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#eq","text":"fun box eq( y: U64 val) : Bool val","title":"eq"},{"location":"builtin-U64/#parameters_44","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ne","text":"fun box ne( y: U64 val) : Bool val","title":"ne"},{"location":"builtin-U64/#parameters_45","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#lt","text":"fun box lt( y: U64 val) : Bool val","title":"lt"},{"location":"builtin-U64/#parameters_46","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#le","text":"fun box le( y: U64 val) : Bool val","title":"le"},{"location":"builtin-U64/#parameters_47","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#ge","text":"fun box ge( y: U64 val) : Bool val","title":"ge"},{"location":"builtin-U64/#parameters_48","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#gt","text":"fun box gt( y: U64 val) : Bool val","title":"gt"},{"location":"builtin-U64/#parameters_49","text":"y: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-U64/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U64/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U64/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U64/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U64/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U64/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U64/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U64/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U64/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U64/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U64/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U64/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_1","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U64/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U64/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U64/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U64/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U64/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U64/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U64/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U64/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U64/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U64/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U64/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U64/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U64/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U64/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U64/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U64/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U64/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U64/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U64/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U64/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U64/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U64/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U64/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U64/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U64/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U64/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U64/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U64/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U64/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U64/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U64/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U64/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U64/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U64/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U64/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U64/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U64/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U64/#compare","text":"fun box compare( that: U64 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U64/#parameters_50","text":"that: U64 val","title":"Parameters"},{"location":"builtin-U64/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U64/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U64/#_value","text":"fun box _value() : U64 val","title":"_value"},{"location":"builtin-U64/#returns_102","text":"U64 val","title":"Returns"},{"location":"builtin-U8/","text":"U8 \u00b6 [Source] primitive val U8 is UnsignedInteger[U8 val] val Implements \u00b6 UnsignedInteger [ U8 val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: U8 val) : U8 val^ Parameters \u00b6 value: U8 val Returns \u00b6 U8 val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : U8 val^ Parameters \u00b6 a: B Returns \u00b6 U8 val^ min_value \u00b6 [Source] new val min_value() : U8 val^ Returns \u00b6 U8 val^ max_value \u00b6 [Source] new val max_value() : U8 val^ Returns \u00b6 U8 val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : U8 val Returns \u00b6 U8 val abs \u00b6 [Source] fun box abs() : U8 val Returns \u00b6 U8 val bit_reverse \u00b6 [Source] fun box bit_reverse() : U8 val Returns \u00b6 U8 val bswap \u00b6 [Source] fun box bswap() : U8 val Returns \u00b6 U8 val popcount \u00b6 [Source] fun box popcount() : U8 val Returns \u00b6 U8 val clz \u00b6 [Source] fun box clz() : U8 val Returns \u00b6 U8 val ctz \u00b6 [Source] fun box ctz() : U8 val Returns \u00b6 U8 val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val Returns \u00b6 U8 val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val Returns \u00b6 U8 val bitwidth \u00b6 [Source] fun box bitwidth() : U8 val Returns \u00b6 U8 val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val max \u00b6 [Source] fun box max( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val addc \u00b6 [Source] fun box addc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) subc \u00b6 [Source] fun box subc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) mulc \u00b6 [Source] fun box mulc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) divc \u00b6 [Source] fun box divc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) remc \u00b6 [Source] fun box remc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? sub_partial \u00b6 [Source] fun box sub_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? mul_partial \u00b6 [Source] fun box mul_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? div_partial \u00b6 [Source] fun box div_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? rem_partial \u00b6 [Source] fun box rem_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ? Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) ? shl \u00b6 fun box shl( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shr \u00b6 fun box shr( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val fld \u00b6 fun box fld( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val fldc \u00b6 fun box fldc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) fld_partial \u00b6 fun box fld_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? fld_unsafe \u00b6 fun box fld_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mod \u00b6 fun box mod( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val modc \u00b6 fun box modc( y: U8 val) : (U8 val , Bool val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , Bool val) mod_partial \u00b6 fun box mod_partial( y: U8 val) : U8 val ? Parameters \u00b6 y: U8 val Returns \u00b6 U8 val ? mod_unsafe \u00b6 fun box mod_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shl_unsafe \u00b6 fun box shl_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val shr_unsafe \u00b6 fun box shr_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val rotl \u00b6 fun box rotl( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val rotr \u00b6 fun box rotr( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val sub_unsafe \u00b6 fun box sub_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mul_unsafe \u00b6 fun box mul_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val div_unsafe \u00b6 fun box div_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val divrem_unsafe \u00b6 fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) rem_unsafe \u00b6 fun box rem_unsafe( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val neg_unsafe \u00b6 fun box neg_unsafe() : U8 val Returns \u00b6 U8 val op_and \u00b6 fun box op_and( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_or \u00b6 fun box op_or( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_xor \u00b6 fun box op_xor( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val op_not \u00b6 fun box op_not() : U8 val Returns \u00b6 U8 val add \u00b6 fun box add( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val sub \u00b6 fun box sub( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val mul \u00b6 fun box mul( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val div \u00b6 fun box div( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val divrem \u00b6 fun box divrem( y: U8 val) : (U8 val , U8 val) Parameters \u00b6 y: U8 val Returns \u00b6 ( U8 val , U8 val) rem \u00b6 fun box rem( y: U8 val) : U8 val Parameters \u00b6 y: U8 val Returns \u00b6 U8 val neg \u00b6 fun box neg() : U8 val Returns \u00b6 U8 val eq \u00b6 fun box eq( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val le \u00b6 fun box le( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: U8 val) : Bool val Parameters \u00b6 y: U8 val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: U8 val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: U8 val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : U8 val Returns \u00b6 U8 val","title":"primitive U8"},{"location":"builtin-U8/#u8","text":"[Source] primitive val U8 is UnsignedInteger[U8 val] val","title":"U8"},{"location":"builtin-U8/#implements","text":"UnsignedInteger [ U8 val] val","title":"Implements"},{"location":"builtin-U8/#constructors","text":"","title":"Constructors"},{"location":"builtin-U8/#create","text":"[Source] new val create( value: U8 val) : U8 val^","title":"create"},{"location":"builtin-U8/#parameters","text":"value: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : U8 val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-U8/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-U8/#returns_1","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#min_value","text":"[Source] new val min_value() : U8 val^","title":"min_value"},{"location":"builtin-U8/#returns_2","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#max_value","text":"[Source] new val max_value() : U8 val^","title":"max_value"},{"location":"builtin-U8/#returns_3","text":"U8 val^","title":"Returns"},{"location":"builtin-U8/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-U8/#next_pow2","text":"[Source] fun box next_pow2() : U8 val","title":"next_pow2"},{"location":"builtin-U8/#returns_4","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#abs","text":"[Source] fun box abs() : U8 val","title":"abs"},{"location":"builtin-U8/#returns_5","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bit_reverse","text":"[Source] fun box bit_reverse() : U8 val","title":"bit_reverse"},{"location":"builtin-U8/#returns_6","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bswap","text":"[Source] fun box bswap() : U8 val","title":"bswap"},{"location":"builtin-U8/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#popcount","text":"[Source] fun box popcount() : U8 val","title":"popcount"},{"location":"builtin-U8/#returns_8","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz","text":"[Source] fun box clz() : U8 val","title":"clz"},{"location":"builtin-U8/#returns_9","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz","text":"[Source] fun box ctz() : U8 val","title":"ctz"},{"location":"builtin-U8/#returns_10","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : U8 val","title":"clz_unsafe"},{"location":"builtin-U8/#returns_11","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : U8 val","title":"ctz_unsafe"},{"location":"builtin-U8/#returns_12","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bitwidth","text":"[Source] fun box bitwidth() : U8 val","title":"bitwidth"},{"location":"builtin-U8/#returns_13","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-U8/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-U8/#min","text":"[Source] fun box min( y: U8 val) : U8 val","title":"min"},{"location":"builtin-U8/#parameters_2","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_15","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#max","text":"[Source] fun box max( y: U8 val) : U8 val","title":"max"},{"location":"builtin-U8/#parameters_3","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_16","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#addc","text":"[Source] fun box addc( y: U8 val) : (U8 val , Bool val)","title":"addc"},{"location":"builtin-U8/#parameters_4","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_17","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#subc","text":"[Source] fun box subc( y: U8 val) : (U8 val , Bool val)","title":"subc"},{"location":"builtin-U8/#parameters_5","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_18","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mulc","text":"[Source] fun box mulc( y: U8 val) : (U8 val , Bool val)","title":"mulc"},{"location":"builtin-U8/#parameters_6","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_19","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#divc","text":"[Source] fun box divc( y: U8 val) : (U8 val , Bool val)","title":"divc"},{"location":"builtin-U8/#parameters_7","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_20","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#remc","text":"[Source] fun box remc( y: U8 val) : (U8 val , Bool val)","title":"remc"},{"location":"builtin-U8/#parameters_8","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_21","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#add_partial","text":"[Source] fun box add_partial( y: U8 val) : U8 val ?","title":"add_partial"},{"location":"builtin-U8/#parameters_9","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_22","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#sub_partial","text":"[Source] fun box sub_partial( y: U8 val) : U8 val ?","title":"sub_partial"},{"location":"builtin-U8/#parameters_10","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_23","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mul_partial","text":"[Source] fun box mul_partial( y: U8 val) : U8 val ?","title":"mul_partial"},{"location":"builtin-U8/#parameters_11","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_24","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#div_partial","text":"[Source] fun box div_partial( y: U8 val) : U8 val ?","title":"div_partial"},{"location":"builtin-U8/#parameters_12","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_25","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#rem_partial","text":"[Source] fun box rem_partial( y: U8 val) : U8 val ?","title":"rem_partial"},{"location":"builtin-U8/#parameters_13","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_26","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#divrem_partial","text":"[Source] fun box divrem_partial( y: U8 val) : (U8 val , U8 val) ?","title":"divrem_partial"},{"location":"builtin-U8/#parameters_14","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_27","text":"( U8 val , U8 val) ?","title":"Returns"},{"location":"builtin-U8/#shl","text":"fun box shl( y: U8 val) : U8 val","title":"shl"},{"location":"builtin-U8/#parameters_15","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_28","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr","text":"fun box shr( y: U8 val) : U8 val","title":"shr"},{"location":"builtin-U8/#parameters_16","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_29","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#fld","text":"fun box fld( y: U8 val) : U8 val","title":"fld"},{"location":"builtin-U8/#parameters_17","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_30","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#fldc","text":"fun box fldc( y: U8 val) : (U8 val , Bool val)","title":"fldc"},{"location":"builtin-U8/#parameters_18","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_31","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#fld_partial","text":"fun box fld_partial( y: U8 val) : U8 val ?","title":"fld_partial"},{"location":"builtin-U8/#parameters_19","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_32","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#fld_unsafe","text":"fun box fld_unsafe( y: U8 val) : U8 val","title":"fld_unsafe"},{"location":"builtin-U8/#parameters_20","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_33","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mod","text":"fun box mod( y: U8 val) : U8 val","title":"mod"},{"location":"builtin-U8/#parameters_21","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_34","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#modc","text":"fun box modc( y: U8 val) : (U8 val , Bool val)","title":"modc"},{"location":"builtin-U8/#parameters_22","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_35","text":"( U8 val , Bool val)","title":"Returns"},{"location":"builtin-U8/#mod_partial","text":"fun box mod_partial( y: U8 val) : U8 val ?","title":"mod_partial"},{"location":"builtin-U8/#parameters_23","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_36","text":"U8 val ?","title":"Returns"},{"location":"builtin-U8/#mod_unsafe","text":"fun box mod_unsafe( y: U8 val) : U8 val","title":"mod_unsafe"},{"location":"builtin-U8/#parameters_24","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_37","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shl_unsafe","text":"fun box shl_unsafe( y: U8 val) : U8 val","title":"shl_unsafe"},{"location":"builtin-U8/#parameters_25","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_38","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#shr_unsafe","text":"fun box shr_unsafe( y: U8 val) : U8 val","title":"shr_unsafe"},{"location":"builtin-U8/#parameters_26","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_39","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotl","text":"fun box rotl( y: U8 val) : U8 val","title":"rotl"},{"location":"builtin-U8/#parameters_27","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_40","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#rotr","text":"fun box rotr( y: U8 val) : U8 val","title":"rotr"},{"location":"builtin-U8/#parameters_28","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_41","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-U8/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-U8/#add_unsafe","text":"fun box add_unsafe( y: U8 val) : U8 val","title":"add_unsafe"},{"location":"builtin-U8/#parameters_29","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_43","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub_unsafe","text":"fun box sub_unsafe( y: U8 val) : U8 val","title":"sub_unsafe"},{"location":"builtin-U8/#parameters_30","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_44","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul_unsafe","text":"fun box mul_unsafe( y: U8 val) : U8 val","title":"mul_unsafe"},{"location":"builtin-U8/#parameters_31","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_45","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div_unsafe","text":"fun box div_unsafe( y: U8 val) : U8 val","title":"div_unsafe"},{"location":"builtin-U8/#parameters_32","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_46","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem_unsafe","text":"fun box divrem_unsafe( y: U8 val) : (U8 val , U8 val)","title":"divrem_unsafe"},{"location":"builtin-U8/#parameters_33","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_47","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem_unsafe","text":"fun box rem_unsafe( y: U8 val) : U8 val","title":"rem_unsafe"},{"location":"builtin-U8/#parameters_34","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_48","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg_unsafe","text":"fun box neg_unsafe() : U8 val","title":"neg_unsafe"},{"location":"builtin-U8/#returns_49","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_and","text":"fun box op_and( y: U8 val) : U8 val","title":"op_and"},{"location":"builtin-U8/#parameters_35","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_50","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_or","text":"fun box op_or( y: U8 val) : U8 val","title":"op_or"},{"location":"builtin-U8/#parameters_36","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_51","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_xor","text":"fun box op_xor( y: U8 val) : U8 val","title":"op_xor"},{"location":"builtin-U8/#parameters_37","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_52","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#op_not","text":"fun box op_not() : U8 val","title":"op_not"},{"location":"builtin-U8/#returns_53","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#add","text":"fun box add( y: U8 val) : U8 val","title":"add"},{"location":"builtin-U8/#parameters_38","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_54","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#sub","text":"fun box sub( y: U8 val) : U8 val","title":"sub"},{"location":"builtin-U8/#parameters_39","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_55","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#mul","text":"fun box mul( y: U8 val) : U8 val","title":"mul"},{"location":"builtin-U8/#parameters_40","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_56","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#div","text":"fun box div( y: U8 val) : U8 val","title":"div"},{"location":"builtin-U8/#parameters_41","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_57","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#divrem","text":"fun box divrem( y: U8 val) : (U8 val , U8 val)","title":"divrem"},{"location":"builtin-U8/#parameters_42","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_58","text":"( U8 val , U8 val)","title":"Returns"},{"location":"builtin-U8/#rem","text":"fun box rem( y: U8 val) : U8 val","title":"rem"},{"location":"builtin-U8/#parameters_43","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_59","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#neg","text":"fun box neg() : U8 val","title":"neg"},{"location":"builtin-U8/#returns_60","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#eq","text":"fun box eq( y: U8 val) : Bool val","title":"eq"},{"location":"builtin-U8/#parameters_44","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ne","text":"fun box ne( y: U8 val) : Bool val","title":"ne"},{"location":"builtin-U8/#parameters_45","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#lt","text":"fun box lt( y: U8 val) : Bool val","title":"lt"},{"location":"builtin-U8/#parameters_46","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#le","text":"fun box le( y: U8 val) : Bool val","title":"le"},{"location":"builtin-U8/#parameters_47","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#ge","text":"fun box ge( y: U8 val) : Bool val","title":"ge"},{"location":"builtin-U8/#parameters_48","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#gt","text":"fun box gt( y: U8 val) : Bool val","title":"gt"},{"location":"builtin-U8/#parameters_49","text":"y: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-U8/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-U8/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-U8/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-U8/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-U8/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-U8/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-U8/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-U8/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-U8/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-U8/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-U8/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_1","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-U8/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-U8/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-U8/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-U8/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-U8/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-U8/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-U8/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-U8/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-U8/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-U8/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-U8/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-U8/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-U8/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-U8/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-U8/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-U8/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-U8/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-U8/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-U8/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-U8/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-U8/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-U8/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-U8/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-U8/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-U8/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-U8/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-U8/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-U8/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-U8/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-U8/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-U8/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-U8/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-U8/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-U8/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-U8/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-U8/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-U8/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-U8/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-U8/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-U8/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-U8/#compare","text":"fun box compare( that: U8 val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-U8/#parameters_50","text":"that: U8 val","title":"Parameters"},{"location":"builtin-U8/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-U8/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-U8/#_value","text":"fun box _value() : U8 val","title":"_value"},{"location":"builtin-U8/#returns_102","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/","text":"ULong \u00b6 [Source] primitive val ULong is UnsignedInteger[ULong val] val Implements \u00b6 UnsignedInteger [ ULong val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: ULong val) : ULong val^ Parameters \u00b6 value: ULong val Returns \u00b6 ULong val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ULong val^ Parameters \u00b6 a: A Returns \u00b6 ULong val^ min_value \u00b6 [Source] new val min_value() : ULong val^ Returns \u00b6 ULong val^ max_value \u00b6 [Source] new val max_value() : ULong val^ Returns \u00b6 ULong val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : ULong val Returns \u00b6 ULong val abs \u00b6 [Source] fun box abs() : ULong val Returns \u00b6 ULong val bit_reverse \u00b6 [Source] fun box bit_reverse() : ULong val Returns \u00b6 ULong val bswap \u00b6 [Source] fun box bswap() : ULong val Returns \u00b6 ULong val popcount \u00b6 [Source] fun box popcount() : ULong val Returns \u00b6 ULong val clz \u00b6 [Source] fun box clz() : ULong val Returns \u00b6 ULong val ctz \u00b6 [Source] fun box ctz() : ULong val Returns \u00b6 ULong val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val Returns \u00b6 ULong val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val Returns \u00b6 ULong val bitwidth \u00b6 [Source] fun box bitwidth() : ULong val Returns \u00b6 ULong val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val max \u00b6 [Source] fun box max( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) subc \u00b6 [Source] fun box subc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) mulc \u00b6 [Source] fun box mulc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) divc \u00b6 [Source] fun box divc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) remc \u00b6 [Source] fun box remc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? sub_partial \u00b6 [Source] fun box sub_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? mul_partial \u00b6 [Source] fun box mul_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? div_partial \u00b6 [Source] fun box div_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? rem_partial \u00b6 [Source] fun box rem_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ? Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) ? shl \u00b6 fun box shl( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shr \u00b6 fun box shr( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val fld \u00b6 fun box fld( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val fldc \u00b6 fun box fldc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) fld_partial \u00b6 fun box fld_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? fld_unsafe \u00b6 fun box fld_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mod \u00b6 fun box mod( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val modc \u00b6 fun box modc( y: ULong val) : (ULong val , Bool val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , Bool val) mod_partial \u00b6 fun box mod_partial( y: ULong val) : ULong val ? Parameters \u00b6 y: ULong val Returns \u00b6 ULong val ? mod_unsafe \u00b6 fun box mod_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shl_unsafe \u00b6 fun box shl_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val shr_unsafe \u00b6 fun box shr_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val rotl \u00b6 fun box rotl( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val rotr \u00b6 fun box rotr( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val sub_unsafe \u00b6 fun box sub_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mul_unsafe \u00b6 fun box mul_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val div_unsafe \u00b6 fun box div_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val divrem_unsafe \u00b6 fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) rem_unsafe \u00b6 fun box rem_unsafe( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val neg_unsafe \u00b6 fun box neg_unsafe() : ULong val Returns \u00b6 ULong val op_and \u00b6 fun box op_and( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_or \u00b6 fun box op_or( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_xor \u00b6 fun box op_xor( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val op_not \u00b6 fun box op_not() : ULong val Returns \u00b6 ULong val add \u00b6 fun box add( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val sub \u00b6 fun box sub( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val mul \u00b6 fun box mul( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val div \u00b6 fun box div( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val divrem \u00b6 fun box divrem( y: ULong val) : (ULong val , ULong val) Parameters \u00b6 y: ULong val Returns \u00b6 ( ULong val , ULong val) rem \u00b6 fun box rem( y: ULong val) : ULong val Parameters \u00b6 y: ULong val Returns \u00b6 ULong val neg \u00b6 fun box neg() : ULong val Returns \u00b6 ULong val eq \u00b6 fun box eq( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val le \u00b6 fun box le( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: ULong val) : Bool val Parameters \u00b6 y: ULong val Returns \u00b6 Bool val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: ULong val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: ULong val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : ULong val Returns \u00b6 ULong val","title":"primitive ULong"},{"location":"builtin-ULong/#ulong","text":"[Source] primitive val ULong is UnsignedInteger[ULong val] val","title":"ULong"},{"location":"builtin-ULong/#implements","text":"UnsignedInteger [ ULong val] val","title":"Implements"},{"location":"builtin-ULong/#constructors","text":"","title":"Constructors"},{"location":"builtin-ULong/#create","text":"[Source] new val create( value: ULong val) : ULong val^","title":"create"},{"location":"builtin-ULong/#parameters","text":"value: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : ULong val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-ULong/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-ULong/#returns_1","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#min_value","text":"[Source] new val min_value() : ULong val^","title":"min_value"},{"location":"builtin-ULong/#returns_2","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#max_value","text":"[Source] new val max_value() : ULong val^","title":"max_value"},{"location":"builtin-ULong/#returns_3","text":"ULong val^","title":"Returns"},{"location":"builtin-ULong/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-ULong/#next_pow2","text":"[Source] fun box next_pow2() : ULong val","title":"next_pow2"},{"location":"builtin-ULong/#returns_4","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#abs","text":"[Source] fun box abs() : ULong val","title":"abs"},{"location":"builtin-ULong/#returns_5","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bit_reverse","text":"[Source] fun box bit_reverse() : ULong val","title":"bit_reverse"},{"location":"builtin-ULong/#returns_6","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bswap","text":"[Source] fun box bswap() : ULong val","title":"bswap"},{"location":"builtin-ULong/#returns_7","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#popcount","text":"[Source] fun box popcount() : ULong val","title":"popcount"},{"location":"builtin-ULong/#returns_8","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz","text":"[Source] fun box clz() : ULong val","title":"clz"},{"location":"builtin-ULong/#returns_9","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz","text":"[Source] fun box ctz() : ULong val","title":"ctz"},{"location":"builtin-ULong/#returns_10","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : ULong val","title":"clz_unsafe"},{"location":"builtin-ULong/#returns_11","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : ULong val","title":"ctz_unsafe"},{"location":"builtin-ULong/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bitwidth","text":"[Source] fun box bitwidth() : ULong val","title":"bitwidth"},{"location":"builtin-ULong/#returns_13","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-ULong/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#min","text":"[Source] fun box min( y: ULong val) : ULong val","title":"min"},{"location":"builtin-ULong/#parameters_2","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_15","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#max","text":"[Source] fun box max( y: ULong val) : ULong val","title":"max"},{"location":"builtin-ULong/#parameters_3","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_16","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-ULong/#returns_17","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#addc","text":"[Source] fun box addc( y: ULong val) : (ULong val , Bool val)","title":"addc"},{"location":"builtin-ULong/#parameters_4","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_18","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#subc","text":"[Source] fun box subc( y: ULong val) : (ULong val , Bool val)","title":"subc"},{"location":"builtin-ULong/#parameters_5","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_19","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mulc","text":"[Source] fun box mulc( y: ULong val) : (ULong val , Bool val)","title":"mulc"},{"location":"builtin-ULong/#parameters_6","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_20","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#divc","text":"[Source] fun box divc( y: ULong val) : (ULong val , Bool val)","title":"divc"},{"location":"builtin-ULong/#parameters_7","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_21","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#remc","text":"[Source] fun box remc( y: ULong val) : (ULong val , Bool val)","title":"remc"},{"location":"builtin-ULong/#parameters_8","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_22","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#add_partial","text":"[Source] fun box add_partial( y: ULong val) : ULong val ?","title":"add_partial"},{"location":"builtin-ULong/#parameters_9","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_23","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#sub_partial","text":"[Source] fun box sub_partial( y: ULong val) : ULong val ?","title":"sub_partial"},{"location":"builtin-ULong/#parameters_10","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_24","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mul_partial","text":"[Source] fun box mul_partial( y: ULong val) : ULong val ?","title":"mul_partial"},{"location":"builtin-ULong/#parameters_11","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_25","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#div_partial","text":"[Source] fun box div_partial( y: ULong val) : ULong val ?","title":"div_partial"},{"location":"builtin-ULong/#parameters_12","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_26","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#rem_partial","text":"[Source] fun box rem_partial( y: ULong val) : ULong val ?","title":"rem_partial"},{"location":"builtin-ULong/#parameters_13","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_27","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#divrem_partial","text":"[Source] fun box divrem_partial( y: ULong val) : (ULong val , ULong val) ?","title":"divrem_partial"},{"location":"builtin-ULong/#parameters_14","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_28","text":"( ULong val , ULong val) ?","title":"Returns"},{"location":"builtin-ULong/#shl","text":"fun box shl( y: ULong val) : ULong val","title":"shl"},{"location":"builtin-ULong/#parameters_15","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_29","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr","text":"fun box shr( y: ULong val) : ULong val","title":"shr"},{"location":"builtin-ULong/#parameters_16","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_30","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#fld","text":"fun box fld( y: ULong val) : ULong val","title":"fld"},{"location":"builtin-ULong/#parameters_17","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_31","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#fldc","text":"fun box fldc( y: ULong val) : (ULong val , Bool val)","title":"fldc"},{"location":"builtin-ULong/#parameters_18","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_32","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#fld_partial","text":"fun box fld_partial( y: ULong val) : ULong val ?","title":"fld_partial"},{"location":"builtin-ULong/#parameters_19","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_33","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#fld_unsafe","text":"fun box fld_unsafe( y: ULong val) : ULong val","title":"fld_unsafe"},{"location":"builtin-ULong/#parameters_20","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_34","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mod","text":"fun box mod( y: ULong val) : ULong val","title":"mod"},{"location":"builtin-ULong/#parameters_21","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_35","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#modc","text":"fun box modc( y: ULong val) : (ULong val , Bool val)","title":"modc"},{"location":"builtin-ULong/#parameters_22","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_36","text":"( ULong val , Bool val)","title":"Returns"},{"location":"builtin-ULong/#mod_partial","text":"fun box mod_partial( y: ULong val) : ULong val ?","title":"mod_partial"},{"location":"builtin-ULong/#parameters_23","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_37","text":"ULong val ?","title":"Returns"},{"location":"builtin-ULong/#mod_unsafe","text":"fun box mod_unsafe( y: ULong val) : ULong val","title":"mod_unsafe"},{"location":"builtin-ULong/#parameters_24","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_38","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shl_unsafe","text":"fun box shl_unsafe( y: ULong val) : ULong val","title":"shl_unsafe"},{"location":"builtin-ULong/#parameters_25","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_39","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#shr_unsafe","text":"fun box shr_unsafe( y: ULong val) : ULong val","title":"shr_unsafe"},{"location":"builtin-ULong/#parameters_26","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_40","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotl","text":"fun box rotl( y: ULong val) : ULong val","title":"rotl"},{"location":"builtin-ULong/#parameters_27","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_41","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#rotr","text":"fun box rotr( y: ULong val) : ULong val","title":"rotr"},{"location":"builtin-ULong/#parameters_28","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_42","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-ULong/#returns_43","text":"String iso^","title":"Returns"},{"location":"builtin-ULong/#add_unsafe","text":"fun box add_unsafe( y: ULong val) : ULong val","title":"add_unsafe"},{"location":"builtin-ULong/#parameters_29","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_44","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub_unsafe","text":"fun box sub_unsafe( y: ULong val) : ULong val","title":"sub_unsafe"},{"location":"builtin-ULong/#parameters_30","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_45","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul_unsafe","text":"fun box mul_unsafe( y: ULong val) : ULong val","title":"mul_unsafe"},{"location":"builtin-ULong/#parameters_31","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_46","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div_unsafe","text":"fun box div_unsafe( y: ULong val) : ULong val","title":"div_unsafe"},{"location":"builtin-ULong/#parameters_32","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_47","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem_unsafe","text":"fun box divrem_unsafe( y: ULong val) : (ULong val , ULong val)","title":"divrem_unsafe"},{"location":"builtin-ULong/#parameters_33","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_48","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem_unsafe","text":"fun box rem_unsafe( y: ULong val) : ULong val","title":"rem_unsafe"},{"location":"builtin-ULong/#parameters_34","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_49","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg_unsafe","text":"fun box neg_unsafe() : ULong val","title":"neg_unsafe"},{"location":"builtin-ULong/#returns_50","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_and","text":"fun box op_and( y: ULong val) : ULong val","title":"op_and"},{"location":"builtin-ULong/#parameters_35","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_51","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_or","text":"fun box op_or( y: ULong val) : ULong val","title":"op_or"},{"location":"builtin-ULong/#parameters_36","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_52","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_xor","text":"fun box op_xor( y: ULong val) : ULong val","title":"op_xor"},{"location":"builtin-ULong/#parameters_37","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_53","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#op_not","text":"fun box op_not() : ULong val","title":"op_not"},{"location":"builtin-ULong/#returns_54","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#add","text":"fun box add( y: ULong val) : ULong val","title":"add"},{"location":"builtin-ULong/#parameters_38","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_55","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#sub","text":"fun box sub( y: ULong val) : ULong val","title":"sub"},{"location":"builtin-ULong/#parameters_39","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_56","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#mul","text":"fun box mul( y: ULong val) : ULong val","title":"mul"},{"location":"builtin-ULong/#parameters_40","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_57","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#div","text":"fun box div( y: ULong val) : ULong val","title":"div"},{"location":"builtin-ULong/#parameters_41","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_58","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#divrem","text":"fun box divrem( y: ULong val) : (ULong val , ULong val)","title":"divrem"},{"location":"builtin-ULong/#parameters_42","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_59","text":"( ULong val , ULong val)","title":"Returns"},{"location":"builtin-ULong/#rem","text":"fun box rem( y: ULong val) : ULong val","title":"rem"},{"location":"builtin-ULong/#parameters_43","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_60","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#neg","text":"fun box neg() : ULong val","title":"neg"},{"location":"builtin-ULong/#returns_61","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#eq","text":"fun box eq( y: ULong val) : Bool val","title":"eq"},{"location":"builtin-ULong/#parameters_44","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ne","text":"fun box ne( y: ULong val) : Bool val","title":"ne"},{"location":"builtin-ULong/#parameters_45","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#lt","text":"fun box lt( y: ULong val) : Bool val","title":"lt"},{"location":"builtin-ULong/#parameters_46","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#le","text":"fun box le( y: ULong val) : Bool val","title":"le"},{"location":"builtin-ULong/#parameters_47","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#ge","text":"fun box ge( y: ULong val) : Bool val","title":"ge"},{"location":"builtin-ULong/#parameters_48","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#gt","text":"fun box gt( y: ULong val) : Bool val","title":"gt"},{"location":"builtin-ULong/#parameters_49","text":"y: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_67","text":"Bool val","title":"Returns"},{"location":"builtin-ULong/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-ULong/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-ULong/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-ULong/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-ULong/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-ULong/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-ULong/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-ULong/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-ULong/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-ULong/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-ULong/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-ULong/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-ULong/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-ULong/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_1","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-ULong/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-ULong/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-ULong/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-ULong/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-ULong/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-ULong/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-ULong/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-ULong/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-ULong/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-ULong/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-ULong/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-ULong/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-ULong/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-ULong/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-ULong/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-ULong/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-ULong/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-ULong/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-ULong/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-ULong/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-ULong/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-ULong/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-ULong/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-ULong/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-ULong/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-ULong/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-ULong/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-ULong/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-ULong/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-ULong/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-ULong/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-ULong/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-ULong/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-ULong/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-ULong/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-ULong/#compare","text":"fun box compare( that: ULong val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-ULong/#parameters_50","text":"that: ULong val","title":"Parameters"},{"location":"builtin-ULong/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-ULong/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-ULong/#_value","text":"fun box _value() : ULong val","title":"_value"},{"location":"builtin-ULong/#returns_102","text":"ULong val","title":"Returns"},{"location":"builtin-USize/","text":"USize \u00b6 [Source] primitive val USize is UnsignedInteger[USize val] val Implements \u00b6 UnsignedInteger [ USize val] val Constructors \u00b6 create \u00b6 [Source] new val create( value: USize val) : USize val^ Parameters \u00b6 value: USize val Returns \u00b6 USize val^ from[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [A] val)] \u00b6 [Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : USize val^ Parameters \u00b6 a: A Returns \u00b6 USize val^ min_value \u00b6 [Source] new val min_value() : USize val^ Returns \u00b6 USize val^ max_value \u00b6 [Source] new val max_value() : USize val^ Returns \u00b6 USize val^ Public Functions \u00b6 next_pow2 \u00b6 [Source] fun box next_pow2() : USize val Returns \u00b6 USize val abs \u00b6 [Source] fun box abs() : USize val Returns \u00b6 USize val bit_reverse \u00b6 [Source] fun box bit_reverse() : USize val Returns \u00b6 USize val bswap \u00b6 [Source] fun box bswap() : USize val Returns \u00b6 USize val popcount \u00b6 [Source] fun box popcount() : USize val Returns \u00b6 USize val clz \u00b6 [Source] fun box clz() : USize val Returns \u00b6 USize val ctz \u00b6 [Source] fun box ctz() : USize val Returns \u00b6 USize val clz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val Returns \u00b6 USize val ctz_unsafe \u00b6 [Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val Returns \u00b6 USize val bitwidth \u00b6 [Source] fun box bitwidth() : USize val Returns \u00b6 USize val bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val min \u00b6 [Source] fun box min( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val max \u00b6 [Source] fun box max( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val addc \u00b6 [Source] fun box addc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) subc \u00b6 [Source] fun box subc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) mulc \u00b6 [Source] fun box mulc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) divc \u00b6 [Source] fun box divc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) remc \u00b6 [Source] fun box remc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) add_partial \u00b6 [Source] fun box add_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? sub_partial \u00b6 [Source] fun box sub_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? mul_partial \u00b6 [Source] fun box mul_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? div_partial \u00b6 [Source] fun box div_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? rem_partial \u00b6 [Source] fun box rem_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ? Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) ? shl \u00b6 fun box shl( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shr \u00b6 fun box shr( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val fld \u00b6 fun box fld( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val fldc \u00b6 fun box fldc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) fld_partial \u00b6 fun box fld_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? fld_unsafe \u00b6 fun box fld_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mod \u00b6 fun box mod( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val modc \u00b6 fun box modc( y: USize val) : (USize val , Bool val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , Bool val) mod_partial \u00b6 fun box mod_partial( y: USize val) : USize val ? Parameters \u00b6 y: USize val Returns \u00b6 USize val ? mod_unsafe \u00b6 fun box mod_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shl_unsafe \u00b6 fun box shl_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val shr_unsafe \u00b6 fun box shr_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val rotl \u00b6 fun box rotl( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val rotr \u00b6 fun box rotr( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val string \u00b6 fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 fun box add_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val sub_unsafe \u00b6 fun box sub_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mul_unsafe \u00b6 fun box mul_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val div_unsafe \u00b6 fun box div_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val divrem_unsafe \u00b6 fun box divrem_unsafe( y: USize val) : (USize val , USize val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) rem_unsafe \u00b6 fun box rem_unsafe( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val neg_unsafe \u00b6 fun box neg_unsafe() : USize val Returns \u00b6 USize val op_and \u00b6 fun box op_and( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_or \u00b6 fun box op_or( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_xor \u00b6 fun box op_xor( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val op_not \u00b6 fun box op_not() : USize val Returns \u00b6 USize val add \u00b6 fun box add( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val sub \u00b6 fun box sub( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val mul \u00b6 fun box mul( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val div \u00b6 fun box div( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val divrem \u00b6 fun box divrem( y: USize val) : (USize val , USize val) Parameters \u00b6 y: USize val Returns \u00b6 ( USize val , USize val) rem \u00b6 fun box rem( y: USize val) : USize val Parameters \u00b6 y: USize val Returns \u00b6 USize val neg \u00b6 fun box neg() : USize val Returns \u00b6 USize val eq \u00b6 fun box eq( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val ne \u00b6 fun box ne( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val lt \u00b6 fun box lt( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val le \u00b6 fun box le( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val ge \u00b6 fun box ge( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val gt \u00b6 fun box gt( y: USize val) : Bool val Parameters \u00b6 y: USize val Returns \u00b6 Bool val hash \u00b6 fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: USize val) : (Less val | Equal val | Greater val) Parameters \u00b6 that: USize val Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 fun box _value() : USize val Returns \u00b6 USize val","title":"primitive USize"},{"location":"builtin-USize/#usize","text":"[Source] primitive val USize is UnsignedInteger[USize val] val","title":"USize"},{"location":"builtin-USize/#implements","text":"UnsignedInteger [ USize val] val","title":"Implements"},{"location":"builtin-USize/#constructors","text":"","title":"Constructors"},{"location":"builtin-USize/#create","text":"[Source] new val create( value: USize val) : USize val^","title":"create"},{"location":"builtin-USize/#parameters","text":"value: USize val","title":"Parameters"},{"location":"builtin-USize/#returns","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93","text":"[Source] new val from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[A] val)]( a: A) : USize val^","title":"from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"},{"location":"builtin-USize/#parameters_1","text":"a: A","title":"Parameters"},{"location":"builtin-USize/#returns_1","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#min_value","text":"[Source] new val min_value() : USize val^","title":"min_value"},{"location":"builtin-USize/#returns_2","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#max_value","text":"[Source] new val max_value() : USize val^","title":"max_value"},{"location":"builtin-USize/#returns_3","text":"USize val^","title":"Returns"},{"location":"builtin-USize/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-USize/#next_pow2","text":"[Source] fun box next_pow2() : USize val","title":"next_pow2"},{"location":"builtin-USize/#returns_4","text":"USize val","title":"Returns"},{"location":"builtin-USize/#abs","text":"[Source] fun box abs() : USize val","title":"abs"},{"location":"builtin-USize/#returns_5","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bit_reverse","text":"[Source] fun box bit_reverse() : USize val","title":"bit_reverse"},{"location":"builtin-USize/#returns_6","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bswap","text":"[Source] fun box bswap() : USize val","title":"bswap"},{"location":"builtin-USize/#returns_7","text":"USize val","title":"Returns"},{"location":"builtin-USize/#popcount","text":"[Source] fun box popcount() : USize val","title":"popcount"},{"location":"builtin-USize/#returns_8","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz","text":"[Source] fun box clz() : USize val","title":"clz"},{"location":"builtin-USize/#returns_9","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz","text":"[Source] fun box ctz() : USize val","title":"ctz"},{"location":"builtin-USize/#returns_10","text":"USize val","title":"Returns"},{"location":"builtin-USize/#clz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : USize val","title":"clz_unsafe"},{"location":"builtin-USize/#returns_11","text":"USize val","title":"Returns"},{"location":"builtin-USize/#ctz_unsafe","text":"[Source] Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : USize val","title":"ctz_unsafe"},{"location":"builtin-USize/#returns_12","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bitwidth","text":"[Source] fun box bitwidth() : USize val","title":"bitwidth"},{"location":"builtin-USize/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-USize/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-USize/#returns_14","text":"USize val","title":"Returns"},{"location":"builtin-USize/#min","text":"[Source] fun box min( y: USize val) : USize val","title":"min"},{"location":"builtin-USize/#parameters_2","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_15","text":"USize val","title":"Returns"},{"location":"builtin-USize/#max","text":"[Source] fun box max( y: USize val) : USize val","title":"max"},{"location":"builtin-USize/#parameters_3","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_16","text":"USize val","title":"Returns"},{"location":"builtin-USize/#addc","text":"[Source] fun box addc( y: USize val) : (USize val , Bool val)","title":"addc"},{"location":"builtin-USize/#parameters_4","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_17","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#subc","text":"[Source] fun box subc( y: USize val) : (USize val , Bool val)","title":"subc"},{"location":"builtin-USize/#parameters_5","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_18","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mulc","text":"[Source] fun box mulc( y: USize val) : (USize val , Bool val)","title":"mulc"},{"location":"builtin-USize/#parameters_6","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_19","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#divc","text":"[Source] fun box divc( y: USize val) : (USize val , Bool val)","title":"divc"},{"location":"builtin-USize/#parameters_7","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_20","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#remc","text":"[Source] fun box remc( y: USize val) : (USize val , Bool val)","title":"remc"},{"location":"builtin-USize/#parameters_8","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_21","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#add_partial","text":"[Source] fun box add_partial( y: USize val) : USize val ?","title":"add_partial"},{"location":"builtin-USize/#parameters_9","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_22","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#sub_partial","text":"[Source] fun box sub_partial( y: USize val) : USize val ?","title":"sub_partial"},{"location":"builtin-USize/#parameters_10","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_23","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mul_partial","text":"[Source] fun box mul_partial( y: USize val) : USize val ?","title":"mul_partial"},{"location":"builtin-USize/#parameters_11","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_24","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#div_partial","text":"[Source] fun box div_partial( y: USize val) : USize val ?","title":"div_partial"},{"location":"builtin-USize/#parameters_12","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_25","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#rem_partial","text":"[Source] fun box rem_partial( y: USize val) : USize val ?","title":"rem_partial"},{"location":"builtin-USize/#parameters_13","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_26","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#divrem_partial","text":"[Source] fun box divrem_partial( y: USize val) : (USize val , USize val) ?","title":"divrem_partial"},{"location":"builtin-USize/#parameters_14","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_27","text":"( USize val , USize val) ?","title":"Returns"},{"location":"builtin-USize/#shl","text":"fun box shl( y: USize val) : USize val","title":"shl"},{"location":"builtin-USize/#parameters_15","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_28","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr","text":"fun box shr( y: USize val) : USize val","title":"shr"},{"location":"builtin-USize/#parameters_16","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-USize/#fld","text":"fun box fld( y: USize val) : USize val","title":"fld"},{"location":"builtin-USize/#parameters_17","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_30","text":"USize val","title":"Returns"},{"location":"builtin-USize/#fldc","text":"fun box fldc( y: USize val) : (USize val , Bool val)","title":"fldc"},{"location":"builtin-USize/#parameters_18","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_31","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#fld_partial","text":"fun box fld_partial( y: USize val) : USize val ?","title":"fld_partial"},{"location":"builtin-USize/#parameters_19","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_32","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#fld_unsafe","text":"fun box fld_unsafe( y: USize val) : USize val","title":"fld_unsafe"},{"location":"builtin-USize/#parameters_20","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_33","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mod","text":"fun box mod( y: USize val) : USize val","title":"mod"},{"location":"builtin-USize/#parameters_21","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_34","text":"USize val","title":"Returns"},{"location":"builtin-USize/#modc","text":"fun box modc( y: USize val) : (USize val , Bool val)","title":"modc"},{"location":"builtin-USize/#parameters_22","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_35","text":"( USize val , Bool val)","title":"Returns"},{"location":"builtin-USize/#mod_partial","text":"fun box mod_partial( y: USize val) : USize val ?","title":"mod_partial"},{"location":"builtin-USize/#parameters_23","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_36","text":"USize val ?","title":"Returns"},{"location":"builtin-USize/#mod_unsafe","text":"fun box mod_unsafe( y: USize val) : USize val","title":"mod_unsafe"},{"location":"builtin-USize/#parameters_24","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_37","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shl_unsafe","text":"fun box shl_unsafe( y: USize val) : USize val","title":"shl_unsafe"},{"location":"builtin-USize/#parameters_25","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_38","text":"USize val","title":"Returns"},{"location":"builtin-USize/#shr_unsafe","text":"fun box shr_unsafe( y: USize val) : USize val","title":"shr_unsafe"},{"location":"builtin-USize/#parameters_26","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_39","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotl","text":"fun box rotl( y: USize val) : USize val","title":"rotl"},{"location":"builtin-USize/#parameters_27","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_40","text":"USize val","title":"Returns"},{"location":"builtin-USize/#rotr","text":"fun box rotr( y: USize val) : USize val","title":"rotr"},{"location":"builtin-USize/#parameters_28","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_41","text":"USize val","title":"Returns"},{"location":"builtin-USize/#string","text":"fun box string() : String iso^","title":"string"},{"location":"builtin-USize/#returns_42","text":"String iso^","title":"Returns"},{"location":"builtin-USize/#add_unsafe","text":"fun box add_unsafe( y: USize val) : USize val","title":"add_unsafe"},{"location":"builtin-USize/#parameters_29","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_43","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub_unsafe","text":"fun box sub_unsafe( y: USize val) : USize val","title":"sub_unsafe"},{"location":"builtin-USize/#parameters_30","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_44","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul_unsafe","text":"fun box mul_unsafe( y: USize val) : USize val","title":"mul_unsafe"},{"location":"builtin-USize/#parameters_31","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_45","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div_unsafe","text":"fun box div_unsafe( y: USize val) : USize val","title":"div_unsafe"},{"location":"builtin-USize/#parameters_32","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_46","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem_unsafe","text":"fun box divrem_unsafe( y: USize val) : (USize val , USize val)","title":"divrem_unsafe"},{"location":"builtin-USize/#parameters_33","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_47","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem_unsafe","text":"fun box rem_unsafe( y: USize val) : USize val","title":"rem_unsafe"},{"location":"builtin-USize/#parameters_34","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_48","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg_unsafe","text":"fun box neg_unsafe() : USize val","title":"neg_unsafe"},{"location":"builtin-USize/#returns_49","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_and","text":"fun box op_and( y: USize val) : USize val","title":"op_and"},{"location":"builtin-USize/#parameters_35","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_50","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_or","text":"fun box op_or( y: USize val) : USize val","title":"op_or"},{"location":"builtin-USize/#parameters_36","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_51","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_xor","text":"fun box op_xor( y: USize val) : USize val","title":"op_xor"},{"location":"builtin-USize/#parameters_37","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_52","text":"USize val","title":"Returns"},{"location":"builtin-USize/#op_not","text":"fun box op_not() : USize val","title":"op_not"},{"location":"builtin-USize/#returns_53","text":"USize val","title":"Returns"},{"location":"builtin-USize/#add","text":"fun box add( y: USize val) : USize val","title":"add"},{"location":"builtin-USize/#parameters_38","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_54","text":"USize val","title":"Returns"},{"location":"builtin-USize/#sub","text":"fun box sub( y: USize val) : USize val","title":"sub"},{"location":"builtin-USize/#parameters_39","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_55","text":"USize val","title":"Returns"},{"location":"builtin-USize/#mul","text":"fun box mul( y: USize val) : USize val","title":"mul"},{"location":"builtin-USize/#parameters_40","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_56","text":"USize val","title":"Returns"},{"location":"builtin-USize/#div","text":"fun box div( y: USize val) : USize val","title":"div"},{"location":"builtin-USize/#parameters_41","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_57","text":"USize val","title":"Returns"},{"location":"builtin-USize/#divrem","text":"fun box divrem( y: USize val) : (USize val , USize val)","title":"divrem"},{"location":"builtin-USize/#parameters_42","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_58","text":"( USize val , USize val)","title":"Returns"},{"location":"builtin-USize/#rem","text":"fun box rem( y: USize val) : USize val","title":"rem"},{"location":"builtin-USize/#parameters_43","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_59","text":"USize val","title":"Returns"},{"location":"builtin-USize/#neg","text":"fun box neg() : USize val","title":"neg"},{"location":"builtin-USize/#returns_60","text":"USize val","title":"Returns"},{"location":"builtin-USize/#eq","text":"fun box eq( y: USize val) : Bool val","title":"eq"},{"location":"builtin-USize/#parameters_44","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ne","text":"fun box ne( y: USize val) : Bool val","title":"ne"},{"location":"builtin-USize/#parameters_45","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#lt","text":"fun box lt( y: USize val) : Bool val","title":"lt"},{"location":"builtin-USize/#parameters_46","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#le","text":"fun box le( y: USize val) : Bool val","title":"le"},{"location":"builtin-USize/#parameters_47","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_64","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#ge","text":"fun box ge( y: USize val) : Bool val","title":"ge"},{"location":"builtin-USize/#parameters_48","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_65","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#gt","text":"fun box gt( y: USize val) : Bool val","title":"gt"},{"location":"builtin-USize/#parameters_49","text":"y: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_66","text":"Bool val","title":"Returns"},{"location":"builtin-USize/#hash","text":"fun box hash() : USize val","title":"hash"},{"location":"builtin-USize/#returns_67","text":"USize val","title":"Returns"},{"location":"builtin-USize/#hash64","text":"fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-USize/#returns_68","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#i8","text":"fun box i8() : I8 val","title":"i8"},{"location":"builtin-USize/#returns_69","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16","text":"fun box i16() : I16 val","title":"i16"},{"location":"builtin-USize/#returns_70","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32","text":"fun box i32() : I32 val","title":"i32"},{"location":"builtin-USize/#returns_71","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64","text":"fun box i64() : I64 val","title":"i64"},{"location":"builtin-USize/#returns_72","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128","text":"fun box i128() : I128 val","title":"i128"},{"location":"builtin-USize/#returns_73","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong","text":"fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-USize/#returns_74","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize","text":"fun box isize() : ISize val","title":"isize"},{"location":"builtin-USize/#returns_75","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8","text":"fun box u8() : U8 val","title":"u8"},{"location":"builtin-USize/#returns_76","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16","text":"fun box u16() : U16 val","title":"u16"},{"location":"builtin-USize/#returns_77","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32","text":"fun box u32() : U32 val","title":"u32"},{"location":"builtin-USize/#returns_78","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64","text":"fun box u64() : U64 val","title":"u64"},{"location":"builtin-USize/#returns_79","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128","text":"fun box u128() : U128 val","title":"u128"},{"location":"builtin-USize/#returns_80","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong","text":"fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-USize/#returns_81","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_1","text":"fun box usize() : USize val","title":"usize"},{"location":"builtin-USize/#returns_82","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32","text":"fun box f32() : F32 val","title":"f32"},{"location":"builtin-USize/#returns_83","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64","text":"fun box f64() : F64 val","title":"f64"},{"location":"builtin-USize/#returns_84","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#i8_unsafe","text":"fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-USize/#returns_85","text":"I8 val","title":"Returns"},{"location":"builtin-USize/#i16_unsafe","text":"fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-USize/#returns_86","text":"I16 val","title":"Returns"},{"location":"builtin-USize/#i32_unsafe","text":"fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-USize/#returns_87","text":"I32 val","title":"Returns"},{"location":"builtin-USize/#i64_unsafe","text":"fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-USize/#returns_88","text":"I64 val","title":"Returns"},{"location":"builtin-USize/#i128_unsafe","text":"fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-USize/#returns_89","text":"I128 val","title":"Returns"},{"location":"builtin-USize/#ilong_unsafe","text":"fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-USize/#returns_90","text":"ILong val","title":"Returns"},{"location":"builtin-USize/#isize_unsafe","text":"fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-USize/#returns_91","text":"ISize val","title":"Returns"},{"location":"builtin-USize/#u8_unsafe","text":"fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-USize/#returns_92","text":"U8 val","title":"Returns"},{"location":"builtin-USize/#u16_unsafe","text":"fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-USize/#returns_93","text":"U16 val","title":"Returns"},{"location":"builtin-USize/#u32_unsafe","text":"fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-USize/#returns_94","text":"U32 val","title":"Returns"},{"location":"builtin-USize/#u64_unsafe","text":"fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-USize/#returns_95","text":"U64 val","title":"Returns"},{"location":"builtin-USize/#u128_unsafe","text":"fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-USize/#returns_96","text":"U128 val","title":"Returns"},{"location":"builtin-USize/#ulong_unsafe","text":"fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-USize/#returns_97","text":"ULong val","title":"Returns"},{"location":"builtin-USize/#usize_unsafe","text":"fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-USize/#returns_98","text":"USize val","title":"Returns"},{"location":"builtin-USize/#f32_unsafe","text":"fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-USize/#returns_99","text":"F32 val","title":"Returns"},{"location":"builtin-USize/#f64_unsafe","text":"fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-USize/#returns_100","text":"F64 val","title":"Returns"},{"location":"builtin-USize/#compare","text":"fun box compare( that: USize val) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-USize/#parameters_50","text":"that: USize val","title":"Parameters"},{"location":"builtin-USize/#returns_101","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-USize/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-USize/#_value","text":"fun box _value() : USize val","title":"_value"},{"location":"builtin-USize/#returns_102","text":"USize val","title":"Returns"},{"location":"builtin-Unsigned/","text":"Unsigned \u00b6 [Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) Type Alias For \u00b6 ( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"type Unsigned"},{"location":"builtin-Unsigned/#unsigned","text":"[Source] type Unsigned is (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Unsigned"},{"location":"builtin-Unsigned/#type-alias-for","text":"( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)","title":"Type Alias For"},{"location":"builtin-UnsignedInteger/","text":"UnsignedInteger[A: UnsignedInteger [A] val] \u00b6 [Source] trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] val Implements \u00b6 Integer [A] val Constructors \u00b6 create \u00b6 [Source] new val create( value: A) : Real[A] val^ Parameters \u00b6 value: A Returns \u00b6 Real [A] val^ from[B: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real [B] val)] \u00b6 [Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^ Parameters \u00b6 a: B Returns \u00b6 Real [A] val^ min_value \u00b6 [Source] new val min_value() : Real[A] val^ Returns \u00b6 Real [A] val^ max_value \u00b6 [Source] new val max_value() : Real[A] val^ Returns \u00b6 Real [A] val^ Public Functions \u00b6 abs \u00b6 [Source] fun box abs() : A Returns \u00b6 A shl \u00b6 [Source] fun box shl( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shr \u00b6 [Source] fun box shr( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fld \u00b6 [Source] fun box fld( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A fldc \u00b6 [Source] fun box fldc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) fld_partial \u00b6 [Source] fun box fld_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? fld_unsafe \u00b6 [Source] fun box fld_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mod \u00b6 [Source] fun box mod( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A modc \u00b6 [Source] fun box modc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mod_partial \u00b6 [Source] fun box mod_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mod_unsafe \u00b6 [Source] fun box mod_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shl_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A shr_unsafe \u00b6 [Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A rotl \u00b6 [Source] fun box rotl( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A rotr \u00b6 [Source] fun box rotr( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A popcount \u00b6 [Source] fun box popcount() : A Returns \u00b6 A clz \u00b6 [Source] fun box clz() : A Returns \u00b6 A ctz \u00b6 [Source] fun box ctz() : A Returns \u00b6 A clz_unsafe \u00b6 [Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A Returns \u00b6 A ctz_unsafe \u00b6 [Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A Returns \u00b6 A bitwidth \u00b6 [Source] fun box bitwidth() : A Returns \u00b6 A bytewidth \u00b6 [Source] fun box bytewidth() : USize val Returns \u00b6 USize val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ add_unsafe \u00b6 [Source] fun box add_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub_unsafe \u00b6 [Source] fun box sub_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul_unsafe \u00b6 [Source] fun box mul_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div_unsafe \u00b6 [Source] fun box div_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem_unsafe \u00b6 [Source] fun box divrem_unsafe( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem_unsafe \u00b6 [Source] fun box rem_unsafe( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A add_partial \u00b6 [Source] fun box add_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? sub_partial \u00b6 [Source] fun box sub_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? mul_partial \u00b6 [Source] fun box mul_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? div_partial \u00b6 [Source] fun box div_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? rem_partial \u00b6 [Source] fun box rem_partial( y: A) : A ? Parameters \u00b6 y: A Returns \u00b6 A ? divrem_partial \u00b6 [Source] fun box divrem_partial( y: A) : (A , A) ? Parameters \u00b6 y: A Returns \u00b6 (A , A) ? neg_unsafe \u00b6 [Source] fun box neg_unsafe() : A Returns \u00b6 A addc \u00b6 [Source] fun box addc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) subc \u00b6 [Source] fun box subc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) mulc \u00b6 [Source] fun box mulc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) divc \u00b6 [Source] fun box divc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) remc \u00b6 [Source] fun box remc( y: A) : (A , Bool val) Parameters \u00b6 y: A Returns \u00b6 (A , Bool val) op_and \u00b6 [Source] fun box op_and( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_or \u00b6 [Source] fun box op_or( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_xor \u00b6 [Source] fun box op_xor( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A op_not \u00b6 [Source] fun box op_not() : A Returns \u00b6 A bit_reverse \u00b6 [Source] fun box bit_reverse() : A Returns \u00b6 A bswap \u00b6 [Source] fun box bswap() : A Returns \u00b6 A add \u00b6 [Source] fun box add( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A sub \u00b6 [Source] fun box sub( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A mul \u00b6 [Source] fun box mul( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A div \u00b6 [Source] fun box div( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A divrem \u00b6 [Source] fun box divrem( y: A) : (A , A) Parameters \u00b6 y: A Returns \u00b6 (A , A) rem \u00b6 [Source] fun box rem( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A neg \u00b6 [Source] fun box neg() : A Returns \u00b6 A eq \u00b6 [Source] fun box eq( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val lt \u00b6 [Source] fun box lt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val le \u00b6 [Source] fun box le( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val ge \u00b6 [Source] fun box ge( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val gt \u00b6 [Source] fun box gt( y: box->A) : Bool val Parameters \u00b6 y: box->A Returns \u00b6 Bool val min \u00b6 [Source] fun box min( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A max \u00b6 [Source] fun box max( y: A) : A Parameters \u00b6 y: A Returns \u00b6 A hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] fun box f64_unsafe() : F64 val Returns \u00b6 F64 val compare \u00b6 fun box compare( that: box->A) : (Less val | Equal val | Greater val) Parameters \u00b6 that: box->A Returns \u00b6 ( Less val | Equal val | Greater val) Private Functions \u00b6 _value \u00b6 [Source] fun box _value() : A Returns \u00b6 A","title":"trait UnsignedInteger"},{"location":"builtin-UnsignedInteger/#unsignedinteger91a-unsignedinteger91a93-val93","text":"[Source] trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] val","title":"UnsignedInteger[A: UnsignedInteger[A] val]"},{"location":"builtin-UnsignedInteger/#implements","text":"Integer [A] val","title":"Implements"},{"location":"builtin-UnsignedInteger/#constructors","text":"","title":"Constructors"},{"location":"builtin-UnsignedInteger/#create","text":"[Source] new val create( value: A) : Real[A] val^","title":"create"},{"location":"builtin-UnsignedInteger/#parameters","text":"value: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93","text":"[Source] new val from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) & Real[B] val)]( a: B) : Real[A] val^","title":"from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"},{"location":"builtin-UnsignedInteger/#parameters_1","text":"a: B","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_1","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#min_value","text":"[Source] new val min_value() : Real[A] val^","title":"min_value"},{"location":"builtin-UnsignedInteger/#returns_2","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#max_value","text":"[Source] new val max_value() : Real[A] val^","title":"max_value"},{"location":"builtin-UnsignedInteger/#returns_3","text":"Real [A] val^","title":"Returns"},{"location":"builtin-UnsignedInteger/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-UnsignedInteger/#abs","text":"[Source] fun box abs() : A","title":"abs"},{"location":"builtin-UnsignedInteger/#returns_4","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shl","text":"[Source] fun box shl( y: A) : A","title":"shl"},{"location":"builtin-UnsignedInteger/#parameters_2","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_5","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shr","text":"[Source] fun box shr( y: A) : A","title":"shr"},{"location":"builtin-UnsignedInteger/#parameters_3","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_6","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld","text":"[Source] fun box fld( y: A) : A","title":"fld"},{"location":"builtin-UnsignedInteger/#parameters_4","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_7","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#fldc","text":"[Source] fun box fldc( y: A) : (A , Bool val)","title":"fldc"},{"location":"builtin-UnsignedInteger/#parameters_5","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_8","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld_partial","text":"[Source] fun box fld_partial( y: A) : A ?","title":"fld_partial"},{"location":"builtin-UnsignedInteger/#parameters_6","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_9","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#fld_unsafe","text":"[Source] fun box fld_unsafe( y: A) : A","title":"fld_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_7","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_10","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod","text":"[Source] fun box mod( y: A) : A","title":"mod"},{"location":"builtin-UnsignedInteger/#parameters_8","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_11","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#modc","text":"[Source] fun box modc( y: A) : (A , Bool val)","title":"modc"},{"location":"builtin-UnsignedInteger/#parameters_9","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_12","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod_partial","text":"[Source] fun box mod_partial( y: A) : A ?","title":"mod_partial"},{"location":"builtin-UnsignedInteger/#parameters_10","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_13","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#mod_unsafe","text":"[Source] fun box mod_unsafe( y: A) : A","title":"mod_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_11","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_14","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shl_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shl_unsafe( y: A) : A","title":"shl_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_12","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_15","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#shr_unsafe","text":"[Source] Unsafe operation. If non-zero bits are shifted-out, the result is undefined. fun box shr_unsafe( y: A) : A","title":"shr_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_13","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_16","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#rotl","text":"[Source] fun box rotl( y: A) : A","title":"rotl"},{"location":"builtin-UnsignedInteger/#parameters_14","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_17","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#rotr","text":"[Source] fun box rotr( y: A) : A","title":"rotr"},{"location":"builtin-UnsignedInteger/#parameters_15","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_18","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#popcount","text":"[Source] fun box popcount() : A","title":"popcount"},{"location":"builtin-UnsignedInteger/#returns_19","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#clz","text":"[Source] fun box clz() : A","title":"clz"},{"location":"builtin-UnsignedInteger/#returns_20","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#ctz","text":"[Source] fun box ctz() : A","title":"ctz"},{"location":"builtin-UnsignedInteger/#returns_21","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#clz_unsafe","text":"[Source] Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. fun box clz_unsafe() : A","title":"clz_unsafe"},{"location":"builtin-UnsignedInteger/#returns_22","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#ctz_unsafe","text":"[Source] Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. fun box ctz_unsafe() : A","title":"ctz_unsafe"},{"location":"builtin-UnsignedInteger/#returns_23","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bitwidth","text":"[Source] fun box bitwidth() : A","title":"bitwidth"},{"location":"builtin-UnsignedInteger/#returns_24","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bytewidth","text":"[Source] fun box bytewidth() : USize val","title":"bytewidth"},{"location":"builtin-UnsignedInteger/#returns_25","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"builtin-UnsignedInteger/#returns_26","text":"String iso^","title":"Returns"},{"location":"builtin-UnsignedInteger/#add_unsafe","text":"[Source] fun box add_unsafe( y: A) : A","title":"add_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_16","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_27","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub_unsafe","text":"[Source] fun box sub_unsafe( y: A) : A","title":"sub_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_17","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_28","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul_unsafe","text":"[Source] fun box mul_unsafe( y: A) : A","title":"mul_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_18","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_29","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#div_unsafe","text":"[Source] fun box div_unsafe( y: A) : A","title":"div_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_19","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_30","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem_unsafe","text":"[Source] fun box divrem_unsafe( y: A) : (A , A)","title":"divrem_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_20","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_31","text":"(A , A)","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem_unsafe","text":"[Source] fun box rem_unsafe( y: A) : A","title":"rem_unsafe"},{"location":"builtin-UnsignedInteger/#parameters_21","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_32","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#add_partial","text":"[Source] fun box add_partial( y: A) : A ?","title":"add_partial"},{"location":"builtin-UnsignedInteger/#parameters_22","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_33","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub_partial","text":"[Source] fun box sub_partial( y: A) : A ?","title":"sub_partial"},{"location":"builtin-UnsignedInteger/#parameters_23","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_34","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul_partial","text":"[Source] fun box mul_partial( y: A) : A ?","title":"mul_partial"},{"location":"builtin-UnsignedInteger/#parameters_24","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_35","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#div_partial","text":"[Source] fun box div_partial( y: A) : A ?","title":"div_partial"},{"location":"builtin-UnsignedInteger/#parameters_25","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_36","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem_partial","text":"[Source] fun box rem_partial( y: A) : A ?","title":"rem_partial"},{"location":"builtin-UnsignedInteger/#parameters_26","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_37","text":"A ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem_partial","text":"[Source] fun box divrem_partial( y: A) : (A , A) ?","title":"divrem_partial"},{"location":"builtin-UnsignedInteger/#parameters_27","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_38","text":"(A , A) ?","title":"Returns"},{"location":"builtin-UnsignedInteger/#neg_unsafe","text":"[Source] fun box neg_unsafe() : A","title":"neg_unsafe"},{"location":"builtin-UnsignedInteger/#returns_39","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#addc","text":"[Source] fun box addc( y: A) : (A , Bool val)","title":"addc"},{"location":"builtin-UnsignedInteger/#parameters_28","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_40","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#subc","text":"[Source] fun box subc( y: A) : (A , Bool val)","title":"subc"},{"location":"builtin-UnsignedInteger/#parameters_29","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_41","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#mulc","text":"[Source] fun box mulc( y: A) : (A , Bool val)","title":"mulc"},{"location":"builtin-UnsignedInteger/#parameters_30","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_42","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#divc","text":"[Source] fun box divc( y: A) : (A , Bool val)","title":"divc"},{"location":"builtin-UnsignedInteger/#parameters_31","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_43","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#remc","text":"[Source] fun box remc( y: A) : (A , Bool val)","title":"remc"},{"location":"builtin-UnsignedInteger/#parameters_32","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_44","text":"(A , Bool val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_and","text":"[Source] fun box op_and( y: A) : A","title":"op_and"},{"location":"builtin-UnsignedInteger/#parameters_33","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_45","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_or","text":"[Source] fun box op_or( y: A) : A","title":"op_or"},{"location":"builtin-UnsignedInteger/#parameters_34","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_46","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_xor","text":"[Source] fun box op_xor( y: A) : A","title":"op_xor"},{"location":"builtin-UnsignedInteger/#parameters_35","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_47","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#op_not","text":"[Source] fun box op_not() : A","title":"op_not"},{"location":"builtin-UnsignedInteger/#returns_48","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bit_reverse","text":"[Source] fun box bit_reverse() : A","title":"bit_reverse"},{"location":"builtin-UnsignedInteger/#returns_49","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#bswap","text":"[Source] fun box bswap() : A","title":"bswap"},{"location":"builtin-UnsignedInteger/#returns_50","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#add","text":"[Source] fun box add( y: A) : A","title":"add"},{"location":"builtin-UnsignedInteger/#parameters_36","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_51","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#sub","text":"[Source] fun box sub( y: A) : A","title":"sub"},{"location":"builtin-UnsignedInteger/#parameters_37","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_52","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#mul","text":"[Source] fun box mul( y: A) : A","title":"mul"},{"location":"builtin-UnsignedInteger/#parameters_38","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_53","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#div","text":"[Source] fun box div( y: A) : A","title":"div"},{"location":"builtin-UnsignedInteger/#parameters_39","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_54","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#divrem","text":"[Source] fun box divrem( y: A) : (A , A)","title":"divrem"},{"location":"builtin-UnsignedInteger/#parameters_40","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_55","text":"(A , A)","title":"Returns"},{"location":"builtin-UnsignedInteger/#rem","text":"[Source] fun box rem( y: A) : A","title":"rem"},{"location":"builtin-UnsignedInteger/#parameters_41","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_56","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#neg","text":"[Source] fun box neg() : A","title":"neg"},{"location":"builtin-UnsignedInteger/#returns_57","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#eq","text":"[Source] fun box eq( y: box->A) : Bool val","title":"eq"},{"location":"builtin-UnsignedInteger/#parameters_42","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_58","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ne","text":"[Source] fun box ne( y: box->A) : Bool val","title":"ne"},{"location":"builtin-UnsignedInteger/#parameters_43","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_59","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#lt","text":"[Source] fun box lt( y: box->A) : Bool val","title":"lt"},{"location":"builtin-UnsignedInteger/#parameters_44","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_60","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#le","text":"[Source] fun box le( y: box->A) : Bool val","title":"le"},{"location":"builtin-UnsignedInteger/#parameters_45","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_61","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ge","text":"[Source] fun box ge( y: box->A) : Bool val","title":"ge"},{"location":"builtin-UnsignedInteger/#parameters_46","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_62","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#gt","text":"[Source] fun box gt( y: box->A) : Bool val","title":"gt"},{"location":"builtin-UnsignedInteger/#parameters_47","text":"y: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_63","text":"Bool val","title":"Returns"},{"location":"builtin-UnsignedInteger/#min","text":"[Source] fun box min( y: A) : A","title":"min"},{"location":"builtin-UnsignedInteger/#parameters_48","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_64","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#max","text":"[Source] fun box max( y: A) : A","title":"max"},{"location":"builtin-UnsignedInteger/#parameters_49","text":"y: A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_65","text":"A","title":"Returns"},{"location":"builtin-UnsignedInteger/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"builtin-UnsignedInteger/#returns_66","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"builtin-UnsignedInteger/#returns_67","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-UnsignedInteger/#returns_68","text":"I8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-UnsignedInteger/#returns_69","text":"I16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-UnsignedInteger/#returns_70","text":"I32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-UnsignedInteger/#returns_71","text":"I64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-UnsignedInteger/#returns_72","text":"I128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-UnsignedInteger/#returns_73","text":"ILong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-UnsignedInteger/#returns_74","text":"ISize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-UnsignedInteger/#returns_75","text":"U8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-UnsignedInteger/#returns_76","text":"U16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-UnsignedInteger/#returns_77","text":"U32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-UnsignedInteger/#returns_78","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-UnsignedInteger/#returns_79","text":"U128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-UnsignedInteger/#returns_80","text":"ULong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-UnsignedInteger/#returns_81","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-UnsignedInteger/#returns_82","text":"F32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-UnsignedInteger/#returns_83","text":"F64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i8_unsafe","text":"[Source] fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-UnsignedInteger/#returns_84","text":"I8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i16_unsafe","text":"[Source] fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-UnsignedInteger/#returns_85","text":"I16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i32_unsafe","text":"[Source] fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_86","text":"I32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i64_unsafe","text":"[Source] fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_87","text":"I64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#i128_unsafe","text":"[Source] fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-UnsignedInteger/#returns_88","text":"I128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ilong_unsafe","text":"[Source] fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-UnsignedInteger/#returns_89","text":"ILong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#isize_unsafe","text":"[Source] fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-UnsignedInteger/#returns_90","text":"ISize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u8_unsafe","text":"[Source] fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-UnsignedInteger/#returns_91","text":"U8 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u16_unsafe","text":"[Source] fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-UnsignedInteger/#returns_92","text":"U16 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u32_unsafe","text":"[Source] fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_93","text":"U32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u64_unsafe","text":"[Source] fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_94","text":"U64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#u128_unsafe","text":"[Source] fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-UnsignedInteger/#returns_95","text":"U128 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#ulong_unsafe","text":"[Source] fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-UnsignedInteger/#returns_96","text":"ULong val","title":"Returns"},{"location":"builtin-UnsignedInteger/#usize_unsafe","text":"[Source] fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-UnsignedInteger/#returns_97","text":"USize val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f32_unsafe","text":"[Source] fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-UnsignedInteger/#returns_98","text":"F32 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#f64_unsafe","text":"[Source] fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-UnsignedInteger/#returns_99","text":"F64 val","title":"Returns"},{"location":"builtin-UnsignedInteger/#compare","text":"fun box compare( that: box->A) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"builtin-UnsignedInteger/#parameters_50","text":"that: box->A","title":"Parameters"},{"location":"builtin-UnsignedInteger/#returns_100","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"builtin-UnsignedInteger/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-UnsignedInteger/#_value","text":"[Source] fun box _value() : A","title":"_value"},{"location":"builtin-UnsignedInteger/#returns_101","text":"A","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/","text":"_ArithmeticConvertible \u00b6 [Source] trait val _ArithmeticConvertible Public Functions \u00b6 i8 \u00b6 [Source] fun box i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun box i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun box i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun box i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun box i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun box ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun box isize() : ISize val Returns \u00b6 ISize val u8 \u00b6 [Source] fun box u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun box u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun box u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun box u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun box u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun box ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun box usize() : USize val Returns \u00b6 USize val f32 \u00b6 [Source] fun box f32() : F32 val Returns \u00b6 F32 val f64 \u00b6 [Source] fun box f64() : F64 val Returns \u00b6 F64 val i8_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val Returns \u00b6 I8 val i16_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val Returns \u00b6 I16 val i32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val Returns \u00b6 I32 val i64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val Returns \u00b6 I64 val i128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val Returns \u00b6 I128 val ilong_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val Returns \u00b6 ILong val isize_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val Returns \u00b6 ISize val u8_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val Returns \u00b6 U8 val u16_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val Returns \u00b6 U16 val u32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val Returns \u00b6 U32 val u64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val Returns \u00b6 U64 val u128_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val Returns \u00b6 U128 val ulong_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val Returns \u00b6 ULong val usize_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val Returns \u00b6 USize val f32_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val Returns \u00b6 F32 val f64_unsafe \u00b6 [Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val Returns \u00b6 F64 val","title":"trait _ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#_arithmeticconvertible","text":"[Source] trait val _ArithmeticConvertible","title":"_ArithmeticConvertible"},{"location":"builtin-_ArithmeticConvertible/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ArithmeticConvertible/#i8","text":"[Source] fun box i8() : I8 val","title":"i8"},{"location":"builtin-_ArithmeticConvertible/#returns","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16","text":"[Source] fun box i16() : I16 val","title":"i16"},{"location":"builtin-_ArithmeticConvertible/#returns_1","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32","text":"[Source] fun box i32() : I32 val","title":"i32"},{"location":"builtin-_ArithmeticConvertible/#returns_2","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64","text":"[Source] fun box i64() : I64 val","title":"i64"},{"location":"builtin-_ArithmeticConvertible/#returns_3","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128","text":"[Source] fun box i128() : I128 val","title":"i128"},{"location":"builtin-_ArithmeticConvertible/#returns_4","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong","text":"[Source] fun box ilong() : ILong val","title":"ilong"},{"location":"builtin-_ArithmeticConvertible/#returns_5","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize","text":"[Source] fun box isize() : ISize val","title":"isize"},{"location":"builtin-_ArithmeticConvertible/#returns_6","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8","text":"[Source] fun box u8() : U8 val","title":"u8"},{"location":"builtin-_ArithmeticConvertible/#returns_7","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16","text":"[Source] fun box u16() : U16 val","title":"u16"},{"location":"builtin-_ArithmeticConvertible/#returns_8","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32","text":"[Source] fun box u32() : U32 val","title":"u32"},{"location":"builtin-_ArithmeticConvertible/#returns_9","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64","text":"[Source] fun box u64() : U64 val","title":"u64"},{"location":"builtin-_ArithmeticConvertible/#returns_10","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128","text":"[Source] fun box u128() : U128 val","title":"u128"},{"location":"builtin-_ArithmeticConvertible/#returns_11","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong","text":"[Source] fun box ulong() : ULong val","title":"ulong"},{"location":"builtin-_ArithmeticConvertible/#returns_12","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize","text":"[Source] fun box usize() : USize val","title":"usize"},{"location":"builtin-_ArithmeticConvertible/#returns_13","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32","text":"[Source] fun box f32() : F32 val","title":"f32"},{"location":"builtin-_ArithmeticConvertible/#returns_14","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64","text":"[Source] fun box f64() : F64 val","title":"f64"},{"location":"builtin-_ArithmeticConvertible/#returns_15","text":"F64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i8_unsafe() : I8 val","title":"i8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_16","text":"I8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i16_unsafe() : I16 val","title":"i16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_17","text":"I16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i32_unsafe() : I32 val","title":"i32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_18","text":"I32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i64_unsafe() : I64 val","title":"i64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_19","text":"I64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#i128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box i128_unsafe() : I128 val","title":"i128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_20","text":"I128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ilong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ilong_unsafe() : ILong val","title":"ilong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_21","text":"ILong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#isize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box isize_unsafe() : ISize val","title":"isize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_22","text":"ISize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u8_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u8_unsafe() : U8 val","title":"u8_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_23","text":"U8 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u16_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u16_unsafe() : U16 val","title":"u16_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_24","text":"U16 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u32_unsafe() : U32 val","title":"u32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_25","text":"U32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u64_unsafe() : U64 val","title":"u64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_26","text":"U64 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#u128_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box u128_unsafe() : U128 val","title":"u128_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_27","text":"U128 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#ulong_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box ulong_unsafe() : ULong val","title":"ulong_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_28","text":"ULong val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#usize_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box usize_unsafe() : USize val","title":"usize_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_29","text":"USize val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f32_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f32_unsafe() : F32 val","title":"f32_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_30","text":"F32 val","title":"Returns"},{"location":"builtin-_ArithmeticConvertible/#f64_unsafe","text":"[Source] Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. fun box f64_unsafe() : F64 val","title":"f64_unsafe"},{"location":"builtin-_ArithmeticConvertible/#returns_31","text":"F64 val","title":"Returns"},{"location":"builtin-_PartialArithmetic/","text":"_PartialArithmetic \u00b6 [Source] trait ref _PartialArithmetic Public Functions \u00b6 add_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? sub_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mul_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ?","title":"trait _PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#_partialarithmetic","text":"[Source] trait ref _PartialArithmetic","title":"_PartialArithmetic"},{"location":"builtin-_PartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_PartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_PartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_PartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_PartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_SignedArithmetic/","text":"_SignedArithmetic \u00b6 [Source] primitive val _SignedArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedArithmetic val^ Returns \u00b6 _SignedArithmetic val^ Public Functions \u00b6 fld[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T mod[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T eq \u00b6 [Source] fun box eq( that: _SignedArithmetic val) : Bool val Parameters \u00b6 that: _SignedArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedArithmetic val) : Bool val Parameters \u00b6 that: _SignedArithmetic val Returns \u00b6 Bool val","title":"primitive _SignedArithmetic"},{"location":"builtin-_SignedArithmetic/#_signedarithmetic","text":"[Source] primitive val _SignedArithmetic","title":"_SignedArithmetic"},{"location":"builtin-_SignedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedArithmetic/#create","text":"[Source] new val create() : _SignedArithmetic val^","title":"create"},{"location":"builtin-_SignedArithmetic/#returns","text":"_SignedArithmetic val^","title":"Returns"},{"location":"builtin-_SignedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedArithmetic/#fld91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box fld[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"fld[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_1","text":"T","title":"Returns"},{"location":"builtin-_SignedArithmetic/#mod91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box mod[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"mod[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_2","text":"T","title":"Returns"},{"location":"builtin-_SignedArithmetic/#eq","text":"[Source] fun box eq( that: _SignedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedArithmetic/#parameters_2","text":"that: _SignedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedArithmetic/#ne","text":"[Source] fun box ne( that: _SignedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedArithmetic/#parameters_3","text":"that: _SignedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedArithmetic/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/","text":"_SignedCheckedArithmetic \u00b6 [Source] primitive val _SignedCheckedArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedCheckedArithmetic val^ Returns \u00b6 _SignedCheckedArithmetic val^ Public Functions \u00b6 div_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box div_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) rem_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box rem_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) fld_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) mod_checked[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) eq \u00b6 [Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _SignedCheckedArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _SignedCheckedArithmetic val Returns \u00b6 Bool val Private Functions \u00b6 _mul_checked[U: UnsignedInteger [U] val, T: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) & SignedInteger [T, U] val)] \u00b6 [Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) & SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val)","title":"primitive _SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#_signedcheckedarithmetic","text":"[Source] primitive val _SignedCheckedArithmetic","title":"_SignedCheckedArithmetic"},{"location":"builtin-_SignedCheckedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedCheckedArithmetic/#create","text":"[Source] new val create() : _SignedCheckedArithmetic val^","title":"create"},{"location":"builtin-_SignedCheckedArithmetic/#returns","text":"_SignedCheckedArithmetic val^","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedCheckedArithmetic/#div_checked91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box div_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#rem_checked91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box rem_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#fld_checked91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box fld_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"fld_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_3","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#mod_checked91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box mod_checked[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , Bool val)","title":"mod_checked[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_4","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#eq","text":"[Source] fun box eq( that: _SignedCheckedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_4","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#ne","text":"[Source] fun box ne( that: _SignedCheckedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_5","text":"that: _SignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedCheckedArithmetic/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_SignedCheckedArithmetic/#_mul_checked91u-unsignedinteger91u93-val-t-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-signedinteger91t-u93-val93","text":"[Source] basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: @\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y) Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. fun box _mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) & SignedInteger[T, U] val)]( x: T, y: T) : (T , Bool val)","title":"_mul_checked[U: UnsignedInteger[U] val, T: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val) &amp; SignedInteger[T, U] val)]"},{"location":"builtin-_SignedCheckedArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedCheckedArithmetic/#returns_7","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/","text":"_SignedPartialArithmetic \u00b6 [Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref Implements \u00b6 _PartialArithmetic ref Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedPartialArithmetic val^ Returns \u00b6 _SignedPartialArithmetic val^ Public Functions \u00b6 div_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box div_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? rem_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box rem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? divrem_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box divrem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , T) ? Parameters \u00b6 x: T y: T Returns \u00b6 (T , T) ? fld_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mod_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? neg_partial[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box neg_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T) : T ? Parameters \u00b6 x: T Returns \u00b6 T ? add_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? sub_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mul_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? eq \u00b6 [Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _SignedPartialArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _SignedPartialArithmetic val Returns \u00b6 Bool val","title":"primitive _SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#_signedpartialarithmetic","text":"[Source] primitive val _SignedPartialArithmetic is _PartialArithmetic ref","title":"_SignedPartialArithmetic"},{"location":"builtin-_SignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_SignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedPartialArithmetic/#create","text":"[Source] new val create() : _SignedPartialArithmetic val^","title":"create"},{"location":"builtin-_SignedPartialArithmetic/#returns","text":"_SignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedPartialArithmetic/#div_partial91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box div_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"div_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#rem_partial91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box rem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"rem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#divrem_partial91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box divrem_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_3","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#fld_partial91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box fld_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"fld_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#mod_partial91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box mod_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T ?","title":"mod_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_5","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#neg_partial91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box neg_partial[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T) : T ?","title":"neg_partial[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_5","text":"x: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_SignedPartialArithmetic/#parameters_8","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_9","text":"T ?","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _SignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedPartialArithmetic/#parameters_9","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _SignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedPartialArithmetic/#parameters_10","text":"that: _SignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_SignedPartialArithmetic/#returns_11","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/","text":"_SignedUnsafeArithmetic \u00b6 [Source] primitive val _SignedUnsafeArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _SignedUnsafeArithmetic val^ Returns \u00b6 _SignedUnsafeArithmetic val^ Public Functions \u00b6 fld_unsafe[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box fld_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T mod_unsafe[T: ( SignedInteger [T, U] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger [U] val] \u00b6 [Source] fun box mod_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T Parameters \u00b6 x: T y: T Returns \u00b6 T eq \u00b6 [Source] fun box eq( that: _SignedUnsafeArithmetic val) : Bool val Parameters \u00b6 that: _SignedUnsafeArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _SignedUnsafeArithmetic val) : Bool val Parameters \u00b6 that: _SignedUnsafeArithmetic val Returns \u00b6 Bool val","title":"primitive _SignedUnsafeArithmetic"},{"location":"builtin-_SignedUnsafeArithmetic/#_signedunsafearithmetic","text":"[Source] primitive val _SignedUnsafeArithmetic","title":"_SignedUnsafeArithmetic"},{"location":"builtin-_SignedUnsafeArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_SignedUnsafeArithmetic/#create","text":"[Source] new val create() : _SignedUnsafeArithmetic val^","title":"create"},{"location":"builtin-_SignedUnsafeArithmetic/#returns","text":"_SignedUnsafeArithmetic val^","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_SignedUnsafeArithmetic/#fld_unsafe91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box fld_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"fld_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_1","text":"T","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#mod_unsafe91t-signedinteger91t-u93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u-unsignedinteger91u93-val93","text":"[Source] fun box mod_unsafe[T: (SignedInteger[T, U] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]( x: T, y: T) : T","title":"mod_unsafe[T: (SignedInteger[T, U] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)), U: UnsignedInteger[U] val]"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_2","text":"T","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#eq","text":"[Source] fun box eq( that: _SignedUnsafeArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_2","text":"that: _SignedUnsafeArithmetic val","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_SignedUnsafeArithmetic/#ne","text":"[Source] fun box ne( that: _SignedUnsafeArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_SignedUnsafeArithmetic/#parameters_3","text":"that: _SignedUnsafeArithmetic val","title":"Parameters"},{"location":"builtin-_SignedUnsafeArithmetic/#returns_4","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/","text":"_ToString \u00b6 [Source] Worker type providing simple to string conversions for numbers. primitive val _ToString Constructors \u00b6 create \u00b6 [Source] new val create() : _ToString val^ Returns \u00b6 _ToString val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _ToString val) : Bool val Parameters \u00b6 that: _ToString val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ToString val) : Bool val Parameters \u00b6 that: _ToString val Returns \u00b6 Bool val Private Functions \u00b6 _u64 \u00b6 [Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^ Parameters \u00b6 x: U64 val neg: Bool val Returns \u00b6 String iso^ _u128 \u00b6 [Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^ Parameters \u00b6 x: U128 val neg: Bool val Returns \u00b6 String iso^ _f64 \u00b6 [Source] fun box _f64( x: F64 val) : String iso^ Parameters \u00b6 x: F64 val Returns \u00b6 String iso^","title":"primitive _ToString"},{"location":"builtin-_ToString/#_tostring","text":"[Source] Worker type providing simple to string conversions for numbers. primitive val _ToString","title":"_ToString"},{"location":"builtin-_ToString/#constructors","text":"","title":"Constructors"},{"location":"builtin-_ToString/#create","text":"[Source] new val create() : _ToString val^","title":"create"},{"location":"builtin-_ToString/#returns","text":"_ToString val^","title":"Returns"},{"location":"builtin-_ToString/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_ToString/#eq","text":"[Source] fun box eq( that: _ToString val) : Bool val","title":"eq"},{"location":"builtin-_ToString/#parameters","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_1","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#ne","text":"[Source] fun box ne( that: _ToString val) : Bool val","title":"ne"},{"location":"builtin-_ToString/#parameters_1","text":"that: _ToString val","title":"Parameters"},{"location":"builtin-_ToString/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_ToString/#private-functions","text":"","title":"Private Functions"},{"location":"builtin-_ToString/#_u64","text":"[Source] fun box _u64( x: U64 val, neg: Bool val) : String iso^","title":"_u64"},{"location":"builtin-_ToString/#parameters_2","text":"x: U64 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_3","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_u128","text":"[Source] fun box _u128( x: U128 val, neg: Bool val) : String iso^","title":"_u128"},{"location":"builtin-_ToString/#parameters_3","text":"x: U128 val neg: Bool val","title":"Parameters"},{"location":"builtin-_ToString/#returns_4","text":"String iso^","title":"Returns"},{"location":"builtin-_ToString/#_f64","text":"[Source] fun box _f64( x: F64 val) : String iso^","title":"_f64"},{"location":"builtin-_ToString/#parameters_4","text":"x: F64 val","title":"Parameters"},{"location":"builtin-_ToString/#returns_5","text":"String iso^","title":"Returns"},{"location":"builtin-_UTF32Encoder/","text":"_UTF32Encoder \u00b6 [Source] primitive val _UTF32Encoder Constructors \u00b6 create \u00b6 [Source] new val create() : _UTF32Encoder val^ Returns \u00b6 _UTF32Encoder val^ Public Functions \u00b6 encode \u00b6 [Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val) Parameters \u00b6 value: U32 val Returns \u00b6 ( USize val , U8 val , U8 val , U8 val , U8 val) eq \u00b6 [Source] fun box eq( that: _UTF32Encoder val) : Bool val Parameters \u00b6 that: _UTF32Encoder val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _UTF32Encoder val) : Bool val Parameters \u00b6 that: _UTF32Encoder val Returns \u00b6 Bool val","title":"primitive _UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#_utf32encoder","text":"[Source] primitive val _UTF32Encoder","title":"_UTF32Encoder"},{"location":"builtin-_UTF32Encoder/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UTF32Encoder/#create","text":"[Source] new val create() : _UTF32Encoder val^","title":"create"},{"location":"builtin-_UTF32Encoder/#returns","text":"_UTF32Encoder val^","title":"Returns"},{"location":"builtin-_UTF32Encoder/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UTF32Encoder/#encode","text":"[Source] Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. fun box encode( value: U32 val) : (USize val , U8 val , U8 val , U8 val , U8 val)","title":"encode"},{"location":"builtin-_UTF32Encoder/#parameters","text":"value: U32 val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_1","text":"( USize val , U8 val , U8 val , U8 val , U8 val)","title":"Returns"},{"location":"builtin-_UTF32Encoder/#eq","text":"[Source] fun box eq( that: _UTF32Encoder val) : Bool val","title":"eq"},{"location":"builtin-_UTF32Encoder/#parameters_1","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_2","text":"Bool val","title":"Returns"},{"location":"builtin-_UTF32Encoder/#ne","text":"[Source] fun box ne( that: _UTF32Encoder val) : Bool val","title":"ne"},{"location":"builtin-_UTF32Encoder/#parameters_2","text":"that: _UTF32Encoder val","title":"Parameters"},{"location":"builtin-_UTF32Encoder/#returns_3","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/","text":"_UnsignedCheckedArithmetic \u00b6 [Source] primitive val _UnsignedCheckedArithmetic Constructors \u00b6 create \u00b6 [Source] new val create() : _UnsignedCheckedArithmetic val^ Returns \u00b6 _UnsignedCheckedArithmetic val^ Public Functions \u00b6 div_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box div_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) rem_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box rem_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) fld_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box fld_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) mod_checked[T: UnsignedInteger [T] val] \u00b6 [Source] fun box mod_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val) Parameters \u00b6 x: T y: T Returns \u00b6 (T , Bool val) eq \u00b6 [Source] fun box eq( that: _UnsignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedCheckedArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _UnsignedCheckedArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedCheckedArithmetic val Returns \u00b6 Bool val","title":"primitive _UnsignedCheckedArithmetic"},{"location":"builtin-_UnsignedCheckedArithmetic/#_unsignedcheckedarithmetic","text":"[Source] primitive val _UnsignedCheckedArithmetic","title":"_UnsignedCheckedArithmetic"},{"location":"builtin-_UnsignedCheckedArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedCheckedArithmetic/#create","text":"[Source] new val create() : _UnsignedCheckedArithmetic val^","title":"create"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns","text":"_UnsignedCheckedArithmetic val^","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedCheckedArithmetic/#div_checked91t-unsignedinteger91t93-val93","text":"[Source] fun box div_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"div_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_1","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#rem_checked91t-unsignedinteger91t93-val93","text":"[Source] fun box rem_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"rem_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_2","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#fld_checked91t-unsignedinteger91t93-val93","text":"[Source] fun box fld_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"fld_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_3","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#mod_checked91t-unsignedinteger91t93-val93","text":"[Source] fun box mod_checked[T: UnsignedInteger[T] val]( x: T, y: T) : (T , Bool val)","title":"mod_checked[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_4","text":"(T , Bool val)","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#eq","text":"[Source] fun box eq( that: _UnsignedCheckedArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_4","text":"that: _UnsignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_5","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedCheckedArithmetic/#ne","text":"[Source] fun box ne( that: _UnsignedCheckedArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_UnsignedCheckedArithmetic/#parameters_5","text":"that: _UnsignedCheckedArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedCheckedArithmetic/#returns_6","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/","text":"_UnsignedPartialArithmetic \u00b6 [Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref Implements \u00b6 _PartialArithmetic ref Constructors \u00b6 create \u00b6 [Source] new val create() : _UnsignedPartialArithmetic val^ Returns \u00b6 _UnsignedPartialArithmetic val^ Public Functions \u00b6 div_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box div_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? rem_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box rem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? divrem_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box divrem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : (T , T) ? Parameters \u00b6 x: T y: T Returns \u00b6 (T , T) ? fld_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box fld_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mod_partial[T: UnsignedInteger [T] val] \u00b6 [Source] fun box mod_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? add_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? sub_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? mul_partial[T: ( Integer [T] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ? Parameters \u00b6 x: T y: T Returns \u00b6 T ? eq \u00b6 [Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedPartialArithmetic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val Parameters \u00b6 that: _UnsignedPartialArithmetic val Returns \u00b6 Bool val","title":"primitive _UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#_unsignedpartialarithmetic","text":"[Source] primitive val _UnsignedPartialArithmetic is _PartialArithmetic ref","title":"_UnsignedPartialArithmetic"},{"location":"builtin-_UnsignedPartialArithmetic/#implements","text":"_PartialArithmetic ref","title":"Implements"},{"location":"builtin-_UnsignedPartialArithmetic/#constructors","text":"","title":"Constructors"},{"location":"builtin-_UnsignedPartialArithmetic/#create","text":"[Source] new val create() : _UnsignedPartialArithmetic val^","title":"create"},{"location":"builtin-_UnsignedPartialArithmetic/#returns","text":"_UnsignedPartialArithmetic val^","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#public-functions","text":"","title":"Public Functions"},{"location":"builtin-_UnsignedPartialArithmetic/#div_partial91t-unsignedinteger91t93-val93","text":"[Source] fun box div_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"div_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_1","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#rem_partial91t-unsignedinteger91t93-val93","text":"[Source] fun box rem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"rem_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_1","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_2","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#divrem_partial91t-unsignedinteger91t93-val93","text":"[Source] fun box divrem_partial[T: UnsignedInteger[T] val]( x: T, y: T) : (T , T) ?","title":"divrem_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_2","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_3","text":"(T , T) ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#fld_partial91t-unsignedinteger91t93-val93","text":"[Source] fun box fld_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"fld_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_3","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_4","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#mod_partial91t-unsignedinteger91t93-val93","text":"[Source] fun box mod_partial[T: UnsignedInteger[T] val]( x: T, y: T) : T ?","title":"mod_partial[T: UnsignedInteger[T] val]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_4","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_5","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#add_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box add_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"add_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_5","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_6","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#sub_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box sub_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"sub_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_6","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_7","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#mul_partial91t-integer91t93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] fun box mul_partial[T: (Integer[T] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]( x: T, y: T) : T ?","title":"mul_partial[T: (Integer[T] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_7","text":"x: T y: T","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_8","text":"T ?","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#eq","text":"[Source] fun box eq( that: _UnsignedPartialArithmetic val) : Bool val","title":"eq"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_8","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_9","text":"Bool val","title":"Returns"},{"location":"builtin-_UnsignedPartialArithmetic/#ne","text":"[Source] fun box ne( that: _UnsignedPartialArithmetic val) : Bool val","title":"ne"},{"location":"builtin-_UnsignedPartialArithmetic/#parameters_9","text":"that: _UnsignedPartialArithmetic val","title":"Parameters"},{"location":"builtin-_UnsignedPartialArithmetic/#returns_10","text":"Bool val","title":"Returns"},{"location":"bureaucracy--index/","text":"Bureaucracy package \u00b6 It happens to almost every program. It starts small, tiny if you will, like a village where every actor knows every other actor and shutdown is easy. One day you realize your program is no longer a cute seaside hamlet, its a bustling metropolis and you are doing way too much work to keep track of everything. What do you do? Call for a little bureaucracy. The bureaucracy contains objects designed to ease your bookkeeping burdens. Need to shutdown a number of actors together? Check out Custodian . Need to keep track of a lot of stuff and be able to look it up by name? Check out Registrar . Put bureaucracy to use today and before long, your sprawling metropolis of a code base will be manageable again in no time. Public Types \u00b6 actor Registrar actor Custodian","title":"Package"},{"location":"bureaucracy--index/#bureaucracy-package","text":"It happens to almost every program. It starts small, tiny if you will, like a village where every actor knows every other actor and shutdown is easy. One day you realize your program is no longer a cute seaside hamlet, its a bustling metropolis and you are doing way too much work to keep track of everything. What do you do? Call for a little bureaucracy. The bureaucracy contains objects designed to ease your bookkeeping burdens. Need to shutdown a number of actors together? Check out Custodian . Need to keep track of a lot of stuff and be able to look it up by name? Check out Registrar . Put bureaucracy to use today and before long, your sprawling metropolis of a code base will be manageable again in no time.","title":"Bureaucracy package"},{"location":"bureaucracy--index/#public-types","text":"actor Registrar actor Custodian","title":"Public Types"},{"location":"bureaucracy-Custodian/","text":"Custodian \u00b6 [Source] A Custodian keeps a set of actors to dispose. When the Custodian is disposed, it disposes of the actors in its set and then clears the set. Example program \u00b6 Imagine you have a program with 3 actors that you need to shutdown when it receives a TERM signal. We can set up a Custodian that knows about each of our actors and when a TERM signal is received, is disposed of. use \"bureaucracy\" use \"signals\" actor Actor1 be dispose() => None // dispose of resources here. actor Actor2 be dispose() => None // dispose of resources here. actor Actor3 be dispose() => None // dispose of resources here. actor Main new create(env: Env) => let actor1 = Actor1 let actor2 = Actor2 let actor3 = Actor3 let custodian = Custodian custodian(actor1) custodian(actor2) custodian(actor3) SignalHandler(TermHandler(custodian), Sig.term()) class TermHandler is SignalNotify let _custodian: Custodian new iso create(custodian: Custodian) => _custodian = custodian fun ref apply(count: U32): Bool => _custodian.dispose() true actor tag Custodian Constructors \u00b6 create \u00b6 [Source] new tag create() : Custodian tag^ Returns \u00b6 Custodian tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Add an actor to be disposed of. be apply( worker: DisposableActor tag) Parameters \u00b6 worker: DisposableActor tag remove \u00b6 [Source] Removes an actor from the set of things to be disposed. be remove( worker: DisposableActor tag) Parameters \u00b6 worker: DisposableActor tag dispose \u00b6 [Source] Dispose of the actors in the set and then clear the set. be dispose()","title":"actor Custodian"},{"location":"bureaucracy-Custodian/#custodian","text":"[Source] A Custodian keeps a set of actors to dispose. When the Custodian is disposed, it disposes of the actors in its set and then clears the set.","title":"Custodian"},{"location":"bureaucracy-Custodian/#example-program","text":"Imagine you have a program with 3 actors that you need to shutdown when it receives a TERM signal. We can set up a Custodian that knows about each of our actors and when a TERM signal is received, is disposed of. use \"bureaucracy\" use \"signals\" actor Actor1 be dispose() => None // dispose of resources here. actor Actor2 be dispose() => None // dispose of resources here. actor Actor3 be dispose() => None // dispose of resources here. actor Main new create(env: Env) => let actor1 = Actor1 let actor2 = Actor2 let actor3 = Actor3 let custodian = Custodian custodian(actor1) custodian(actor2) custodian(actor3) SignalHandler(TermHandler(custodian), Sig.term()) class TermHandler is SignalNotify let _custodian: Custodian new iso create(custodian: Custodian) => _custodian = custodian fun ref apply(count: U32): Bool => _custodian.dispose() true actor tag Custodian","title":"Example program"},{"location":"bureaucracy-Custodian/#constructors","text":"","title":"Constructors"},{"location":"bureaucracy-Custodian/#create","text":"[Source] new tag create() : Custodian tag^","title":"create"},{"location":"bureaucracy-Custodian/#returns","text":"Custodian tag^","title":"Returns"},{"location":"bureaucracy-Custodian/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"bureaucracy-Custodian/#apply","text":"[Source] Add an actor to be disposed of. be apply( worker: DisposableActor tag)","title":"apply"},{"location":"bureaucracy-Custodian/#parameters","text":"worker: DisposableActor tag","title":"Parameters"},{"location":"bureaucracy-Custodian/#remove","text":"[Source] Removes an actor from the set of things to be disposed. be remove( worker: DisposableActor tag)","title":"remove"},{"location":"bureaucracy-Custodian/#parameters_1","text":"worker: DisposableActor tag","title":"Parameters"},{"location":"bureaucracy-Custodian/#dispose","text":"[Source] Dispose of the actors in the set and then clear the set. be dispose()","title":"dispose"},{"location":"bureaucracy-Registrar/","text":"Registrar \u00b6 [Source] A Registrar keeps a map of lookup string to anything. Generally, this is used to keep a directory of long-lived service-providing actors that can be looked up name. actor tag Registrar Constructors \u00b6 create \u00b6 [Source] new tag create() : Registrar tag^ Returns \u00b6 Registrar tag^ Public Behaviours \u00b6 update \u00b6 [Source] Add, or change, a lookup mapping. be update( key: String val, value: Any tag) Parameters \u00b6 key: String val value: Any tag remove \u00b6 [Source] Remove a mapping. This only takes effect if provided key currently maps to the provided value. If the key maps to some other value (perhaps after updating), the mapping won't be removed. be remove( key: String val, value: Any tag) Parameters \u00b6 key: String val value: Any tag Public Functions \u00b6 apply[optional A: Any tag] \u00b6 [Source] Lookup by name. Returns a promise that will be fulfilled with the mapped value if it exists and is a subtype of A. Otherwise, the promise will be rejected. fun tag apply[optional A: Any tag]( key: String val) : Promise[A] tag Parameters \u00b6 key: String val Returns \u00b6 Promise [A] tag Private Behaviours \u00b6 _fetch[A: Any tag] \u00b6 [Source] Fulfills or rejects the promise. be _fetch[A: Any tag]( key: String val, promise: Promise[A] tag) Parameters \u00b6 key: String val promise: Promise [A] tag","title":"actor Registrar"},{"location":"bureaucracy-Registrar/#registrar","text":"[Source] A Registrar keeps a map of lookup string to anything. Generally, this is used to keep a directory of long-lived service-providing actors that can be looked up name. actor tag Registrar","title":"Registrar"},{"location":"bureaucracy-Registrar/#constructors","text":"","title":"Constructors"},{"location":"bureaucracy-Registrar/#create","text":"[Source] new tag create() : Registrar tag^","title":"create"},{"location":"bureaucracy-Registrar/#returns","text":"Registrar tag^","title":"Returns"},{"location":"bureaucracy-Registrar/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"bureaucracy-Registrar/#update","text":"[Source] Add, or change, a lookup mapping. be update( key: String val, value: Any tag)","title":"update"},{"location":"bureaucracy-Registrar/#parameters","text":"key: String val value: Any tag","title":"Parameters"},{"location":"bureaucracy-Registrar/#remove","text":"[Source] Remove a mapping. This only takes effect if provided key currently maps to the provided value. If the key maps to some other value (perhaps after updating), the mapping won't be removed. be remove( key: String val, value: Any tag)","title":"remove"},{"location":"bureaucracy-Registrar/#parameters_1","text":"key: String val value: Any tag","title":"Parameters"},{"location":"bureaucracy-Registrar/#public-functions","text":"","title":"Public Functions"},{"location":"bureaucracy-Registrar/#apply91optional-a-any-tag93","text":"[Source] Lookup by name. Returns a promise that will be fulfilled with the mapped value if it exists and is a subtype of A. Otherwise, the promise will be rejected. fun tag apply[optional A: Any tag]( key: String val) : Promise[A] tag","title":"apply[optional A: Any tag]"},{"location":"bureaucracy-Registrar/#parameters_2","text":"key: String val","title":"Parameters"},{"location":"bureaucracy-Registrar/#returns_1","text":"Promise [A] tag","title":"Returns"},{"location":"bureaucracy-Registrar/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"bureaucracy-Registrar/#_fetch91a-any-tag93","text":"[Source] Fulfills or rejects the promise. be _fetch[A: Any tag]( key: String val, promise: Promise[A] tag)","title":"_fetch[A: Any tag]"},{"location":"bureaucracy-Registrar/#parameters_3","text":"key: String val promise: Promise [A] tag","title":"Parameters"},{"location":"capsicum--index/","text":"No package doc string provided for capsicum. Public Types \u00b6 type CapRights class CapRights0 primitive Cap","title":"Package"},{"location":"capsicum--index/#public-types","text":"type CapRights class CapRights0 primitive Cap","title":"Public Types"},{"location":"capsicum-Cap/","text":"Cap \u00b6 [Source] The Capsicum rights. primitive val Cap Constructors \u00b6 create \u00b6 [Source] new val create() : Cap val^ Returns \u00b6 Cap val^ Public Functions \u00b6 enter \u00b6 [Source] This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented. fun box enter() : Bool val Returns \u00b6 Bool val read \u00b6 [Source] fun box read() : U64 val Returns \u00b6 U64 val write \u00b6 [Source] fun box write() : U64 val Returns \u00b6 U64 val seek_tell \u00b6 [Source] fun box seek_tell() : U64 val Returns \u00b6 U64 val seek \u00b6 [Source] fun box seek() : U64 val Returns \u00b6 U64 val pread \u00b6 [Source] fun box pread() : U64 val Returns \u00b6 U64 val pwrite \u00b6 [Source] fun box pwrite() : U64 val Returns \u00b6 U64 val mmap \u00b6 [Source] fun box mmap() : U64 val Returns \u00b6 U64 val mmap_r \u00b6 [Source] fun box mmap_r() : U64 val Returns \u00b6 U64 val mmap_w \u00b6 [Source] fun box mmap_w() : U64 val Returns \u00b6 U64 val mmap_x \u00b6 [Source] fun box mmap_x() : U64 val Returns \u00b6 U64 val mmap_rw \u00b6 [Source] fun box mmap_rw() : U64 val Returns \u00b6 U64 val mmap_rx \u00b6 [Source] fun box mmap_rx() : U64 val Returns \u00b6 U64 val mmap_wx \u00b6 [Source] fun box mmap_wx() : U64 val Returns \u00b6 U64 val mmap_rwx \u00b6 [Source] fun box mmap_rwx() : U64 val Returns \u00b6 U64 val creat \u00b6 [Source] fun box creat() : U64 val Returns \u00b6 U64 val fexecve \u00b6 [Source] fun box fexecve() : U64 val Returns \u00b6 U64 val fsync \u00b6 [Source] fun box fsync() : U64 val Returns \u00b6 U64 val ftruncate \u00b6 [Source] fun box ftruncate() : U64 val Returns \u00b6 U64 val lookup \u00b6 [Source] fun box lookup() : U64 val Returns \u00b6 U64 val fchdir \u00b6 [Source] fun box fchdir() : U64 val Returns \u00b6 U64 val fchflags \u00b6 [Source] fun box fchflags() : U64 val Returns \u00b6 U64 val chflagsat \u00b6 [Source] fun box chflagsat() : U64 val Returns \u00b6 U64 val fchmod \u00b6 [Source] fun box fchmod() : U64 val Returns \u00b6 U64 val fchmodat \u00b6 [Source] fun box fchmodat() : U64 val Returns \u00b6 U64 val fchown \u00b6 [Source] fun box fchown() : U64 val Returns \u00b6 U64 val fchownat \u00b6 [Source] fun box fchownat() : U64 val Returns \u00b6 U64 val fcntl \u00b6 [Source] fun box fcntl() : U64 val Returns \u00b6 U64 val flock \u00b6 [Source] fun box flock() : U64 val Returns \u00b6 U64 val fpathconf \u00b6 [Source] fun box fpathconf() : U64 val Returns \u00b6 U64 val fsck \u00b6 [Source] fun box fsck() : U64 val Returns \u00b6 U64 val fstat \u00b6 [Source] fun box fstat() : U64 val Returns \u00b6 U64 val fstatat \u00b6 [Source] fun box fstatat() : U64 val Returns \u00b6 U64 val fstatfs \u00b6 [Source] fun box fstatfs() : U64 val Returns \u00b6 U64 val futimes \u00b6 [Source] fun box futimes() : U64 val Returns \u00b6 U64 val futimesat \u00b6 [Source] fun box futimesat() : U64 val Returns \u00b6 U64 val linkat \u00b6 [Source] fun box linkat() : U64 val Returns \u00b6 U64 val mkdirat \u00b6 [Source] fun box mkdirat() : U64 val Returns \u00b6 U64 val mkfifoat \u00b6 [Source] fun box mkfifoat() : U64 val Returns \u00b6 U64 val mknodat \u00b6 [Source] fun box mknodat() : U64 val Returns \u00b6 U64 val renameat \u00b6 [Source] fun box renameat() : U64 val Returns \u00b6 U64 val symlinkat \u00b6 [Source] fun box symlinkat() : U64 val Returns \u00b6 U64 val unlinkat \u00b6 [Source] fun box unlinkat() : U64 val Returns \u00b6 U64 val accept \u00b6 [Source] fun box accept() : U64 val Returns \u00b6 U64 val bind \u00b6 [Source] fun box bind() : U64 val Returns \u00b6 U64 val connect \u00b6 [Source] fun box connect() : U64 val Returns \u00b6 U64 val getpeername \u00b6 [Source] fun box getpeername() : U64 val Returns \u00b6 U64 val getsockname \u00b6 [Source] fun box getsockname() : U64 val Returns \u00b6 U64 val getsockopt \u00b6 [Source] fun box getsockopt() : U64 val Returns \u00b6 U64 val listen \u00b6 [Source] fun box listen() : U64 val Returns \u00b6 U64 val peeloff \u00b6 [Source] fun box peeloff() : U64 val Returns \u00b6 U64 val recv \u00b6 [Source] fun box recv() : U64 val Returns \u00b6 U64 val send \u00b6 [Source] fun box send() : U64 val Returns \u00b6 U64 val setsockopt \u00b6 [Source] fun box setsockopt() : U64 val Returns \u00b6 U64 val shutdown \u00b6 [Source] fun box shutdown() : U64 val Returns \u00b6 U64 val bindat \u00b6 [Source] fun box bindat() : U64 val Returns \u00b6 U64 val connectat \u00b6 [Source] fun box connectat() : U64 val Returns \u00b6 U64 val sock_client \u00b6 [Source] fun box sock_client() : U64 val Returns \u00b6 U64 val sock_server \u00b6 [Source] fun box sock_server() : U64 val Returns \u00b6 U64 val mac_get \u00b6 [Source] fun box mac_get() : U64 val Returns \u00b6 U64 val mac_set \u00b6 [Source] fun box mac_set() : U64 val Returns \u00b6 U64 val sem_getvalue \u00b6 [Source] fun box sem_getvalue() : U64 val Returns \u00b6 U64 val sem_post \u00b6 [Source] fun box sem_post() : U64 val Returns \u00b6 U64 val sem_wait \u00b6 [Source] fun box sem_wait() : U64 val Returns \u00b6 U64 val event \u00b6 [Source] fun box event() : U64 val Returns \u00b6 U64 val kqueue_event \u00b6 [Source] fun box kqueue_event() : U64 val Returns \u00b6 U64 val ioctl \u00b6 [Source] fun box ioctl() : U64 val Returns \u00b6 U64 val ttyhook \u00b6 [Source] fun box ttyhook() : U64 val Returns \u00b6 U64 val pdgetpid \u00b6 [Source] fun box pdgetpid() : U64 val Returns \u00b6 U64 val pdwait \u00b6 [Source] fun box pdwait() : U64 val Returns \u00b6 U64 val pdkill \u00b6 [Source] fun box pdkill() : U64 val Returns \u00b6 U64 val exattr_delete \u00b6 [Source] fun box exattr_delete() : U64 val Returns \u00b6 U64 val exattr_get \u00b6 [Source] fun box exattr_get() : U64 val Returns \u00b6 U64 val exattr_list \u00b6 [Source] fun box exattr_list() : U64 val Returns \u00b6 U64 val exattr_set \u00b6 [Source] fun box exattr_set() : U64 val Returns \u00b6 U64 val acl_check \u00b6 [Source] fun box acl_check() : U64 val Returns \u00b6 U64 val acl_delete \u00b6 [Source] fun box acl_delete() : U64 val Returns \u00b6 U64 val acl_get \u00b6 [Source] fun box acl_get() : U64 val Returns \u00b6 U64 val acl_set \u00b6 [Source] fun box acl_set() : U64 val Returns \u00b6 U64 val kqueue_change \u00b6 [Source] fun box kqueue_change() : U64 val Returns \u00b6 U64 val kqueue \u00b6 [Source] fun box kqueue() : U64 val Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( that: Cap val) : Bool val Parameters \u00b6 that: Cap val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Cap val) : Bool val Parameters \u00b6 that: Cap val Returns \u00b6 Bool val Private Functions \u00b6 _id \u00b6 [Source] Build a Capsicum ID from an index and a bit position. fun box _id( idx: U64 val, bit: U64 val) : U64 val Parameters \u00b6 idx: U64 val bit: U64 val Returns \u00b6 U64 val","title":"primitive Cap"},{"location":"capsicum-Cap/#cap","text":"[Source] The Capsicum rights. primitive val Cap","title":"Cap"},{"location":"capsicum-Cap/#constructors","text":"","title":"Constructors"},{"location":"capsicum-Cap/#create","text":"[Source] new val create() : Cap val^","title":"create"},{"location":"capsicum-Cap/#returns","text":"Cap val^","title":"Returns"},{"location":"capsicum-Cap/#public-functions","text":"","title":"Public Functions"},{"location":"capsicum-Cap/#enter","text":"[Source] This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented. fun box enter() : Bool val","title":"enter"},{"location":"capsicum-Cap/#returns_1","text":"Bool val","title":"Returns"},{"location":"capsicum-Cap/#read","text":"[Source] fun box read() : U64 val","title":"read"},{"location":"capsicum-Cap/#returns_2","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#write","text":"[Source] fun box write() : U64 val","title":"write"},{"location":"capsicum-Cap/#returns_3","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#seek_tell","text":"[Source] fun box seek_tell() : U64 val","title":"seek_tell"},{"location":"capsicum-Cap/#returns_4","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#seek","text":"[Source] fun box seek() : U64 val","title":"seek"},{"location":"capsicum-Cap/#returns_5","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pread","text":"[Source] fun box pread() : U64 val","title":"pread"},{"location":"capsicum-Cap/#returns_6","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pwrite","text":"[Source] fun box pwrite() : U64 val","title":"pwrite"},{"location":"capsicum-Cap/#returns_7","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap","text":"[Source] fun box mmap() : U64 val","title":"mmap"},{"location":"capsicum-Cap/#returns_8","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_r","text":"[Source] fun box mmap_r() : U64 val","title":"mmap_r"},{"location":"capsicum-Cap/#returns_9","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_w","text":"[Source] fun box mmap_w() : U64 val","title":"mmap_w"},{"location":"capsicum-Cap/#returns_10","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_x","text":"[Source] fun box mmap_x() : U64 val","title":"mmap_x"},{"location":"capsicum-Cap/#returns_11","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_rw","text":"[Source] fun box mmap_rw() : U64 val","title":"mmap_rw"},{"location":"capsicum-Cap/#returns_12","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_rx","text":"[Source] fun box mmap_rx() : U64 val","title":"mmap_rx"},{"location":"capsicum-Cap/#returns_13","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_wx","text":"[Source] fun box mmap_wx() : U64 val","title":"mmap_wx"},{"location":"capsicum-Cap/#returns_14","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mmap_rwx","text":"[Source] fun box mmap_rwx() : U64 val","title":"mmap_rwx"},{"location":"capsicum-Cap/#returns_15","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#creat","text":"[Source] fun box creat() : U64 val","title":"creat"},{"location":"capsicum-Cap/#returns_16","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fexecve","text":"[Source] fun box fexecve() : U64 val","title":"fexecve"},{"location":"capsicum-Cap/#returns_17","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fsync","text":"[Source] fun box fsync() : U64 val","title":"fsync"},{"location":"capsicum-Cap/#returns_18","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#ftruncate","text":"[Source] fun box ftruncate() : U64 val","title":"ftruncate"},{"location":"capsicum-Cap/#returns_19","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#lookup","text":"[Source] fun box lookup() : U64 val","title":"lookup"},{"location":"capsicum-Cap/#returns_20","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchdir","text":"[Source] fun box fchdir() : U64 val","title":"fchdir"},{"location":"capsicum-Cap/#returns_21","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchflags","text":"[Source] fun box fchflags() : U64 val","title":"fchflags"},{"location":"capsicum-Cap/#returns_22","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#chflagsat","text":"[Source] fun box chflagsat() : U64 val","title":"chflagsat"},{"location":"capsicum-Cap/#returns_23","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchmod","text":"[Source] fun box fchmod() : U64 val","title":"fchmod"},{"location":"capsicum-Cap/#returns_24","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchmodat","text":"[Source] fun box fchmodat() : U64 val","title":"fchmodat"},{"location":"capsicum-Cap/#returns_25","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchown","text":"[Source] fun box fchown() : U64 val","title":"fchown"},{"location":"capsicum-Cap/#returns_26","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fchownat","text":"[Source] fun box fchownat() : U64 val","title":"fchownat"},{"location":"capsicum-Cap/#returns_27","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fcntl","text":"[Source] fun box fcntl() : U64 val","title":"fcntl"},{"location":"capsicum-Cap/#returns_28","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#flock","text":"[Source] fun box flock() : U64 val","title":"flock"},{"location":"capsicum-Cap/#returns_29","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fpathconf","text":"[Source] fun box fpathconf() : U64 val","title":"fpathconf"},{"location":"capsicum-Cap/#returns_30","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fsck","text":"[Source] fun box fsck() : U64 val","title":"fsck"},{"location":"capsicum-Cap/#returns_31","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fstat","text":"[Source] fun box fstat() : U64 val","title":"fstat"},{"location":"capsicum-Cap/#returns_32","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fstatat","text":"[Source] fun box fstatat() : U64 val","title":"fstatat"},{"location":"capsicum-Cap/#returns_33","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#fstatfs","text":"[Source] fun box fstatfs() : U64 val","title":"fstatfs"},{"location":"capsicum-Cap/#returns_34","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#futimes","text":"[Source] fun box futimes() : U64 val","title":"futimes"},{"location":"capsicum-Cap/#returns_35","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#futimesat","text":"[Source] fun box futimesat() : U64 val","title":"futimesat"},{"location":"capsicum-Cap/#returns_36","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#linkat","text":"[Source] fun box linkat() : U64 val","title":"linkat"},{"location":"capsicum-Cap/#returns_37","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mkdirat","text":"[Source] fun box mkdirat() : U64 val","title":"mkdirat"},{"location":"capsicum-Cap/#returns_38","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mkfifoat","text":"[Source] fun box mkfifoat() : U64 val","title":"mkfifoat"},{"location":"capsicum-Cap/#returns_39","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mknodat","text":"[Source] fun box mknodat() : U64 val","title":"mknodat"},{"location":"capsicum-Cap/#returns_40","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#renameat","text":"[Source] fun box renameat() : U64 val","title":"renameat"},{"location":"capsicum-Cap/#returns_41","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#symlinkat","text":"[Source] fun box symlinkat() : U64 val","title":"symlinkat"},{"location":"capsicum-Cap/#returns_42","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#unlinkat","text":"[Source] fun box unlinkat() : U64 val","title":"unlinkat"},{"location":"capsicum-Cap/#returns_43","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#accept","text":"[Source] fun box accept() : U64 val","title":"accept"},{"location":"capsicum-Cap/#returns_44","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#bind","text":"[Source] fun box bind() : U64 val","title":"bind"},{"location":"capsicum-Cap/#returns_45","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#connect","text":"[Source] fun box connect() : U64 val","title":"connect"},{"location":"capsicum-Cap/#returns_46","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#getpeername","text":"[Source] fun box getpeername() : U64 val","title":"getpeername"},{"location":"capsicum-Cap/#returns_47","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#getsockname","text":"[Source] fun box getsockname() : U64 val","title":"getsockname"},{"location":"capsicum-Cap/#returns_48","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#getsockopt","text":"[Source] fun box getsockopt() : U64 val","title":"getsockopt"},{"location":"capsicum-Cap/#returns_49","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#listen","text":"[Source] fun box listen() : U64 val","title":"listen"},{"location":"capsicum-Cap/#returns_50","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#peeloff","text":"[Source] fun box peeloff() : U64 val","title":"peeloff"},{"location":"capsicum-Cap/#returns_51","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#recv","text":"[Source] fun box recv() : U64 val","title":"recv"},{"location":"capsicum-Cap/#returns_52","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#send","text":"[Source] fun box send() : U64 val","title":"send"},{"location":"capsicum-Cap/#returns_53","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#setsockopt","text":"[Source] fun box setsockopt() : U64 val","title":"setsockopt"},{"location":"capsicum-Cap/#returns_54","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#shutdown","text":"[Source] fun box shutdown() : U64 val","title":"shutdown"},{"location":"capsicum-Cap/#returns_55","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#bindat","text":"[Source] fun box bindat() : U64 val","title":"bindat"},{"location":"capsicum-Cap/#returns_56","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#connectat","text":"[Source] fun box connectat() : U64 val","title":"connectat"},{"location":"capsicum-Cap/#returns_57","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sock_client","text":"[Source] fun box sock_client() : U64 val","title":"sock_client"},{"location":"capsicum-Cap/#returns_58","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sock_server","text":"[Source] fun box sock_server() : U64 val","title":"sock_server"},{"location":"capsicum-Cap/#returns_59","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mac_get","text":"[Source] fun box mac_get() : U64 val","title":"mac_get"},{"location":"capsicum-Cap/#returns_60","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#mac_set","text":"[Source] fun box mac_set() : U64 val","title":"mac_set"},{"location":"capsicum-Cap/#returns_61","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sem_getvalue","text":"[Source] fun box sem_getvalue() : U64 val","title":"sem_getvalue"},{"location":"capsicum-Cap/#returns_62","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sem_post","text":"[Source] fun box sem_post() : U64 val","title":"sem_post"},{"location":"capsicum-Cap/#returns_63","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#sem_wait","text":"[Source] fun box sem_wait() : U64 val","title":"sem_wait"},{"location":"capsicum-Cap/#returns_64","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#event","text":"[Source] fun box event() : U64 val","title":"event"},{"location":"capsicum-Cap/#returns_65","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#kqueue_event","text":"[Source] fun box kqueue_event() : U64 val","title":"kqueue_event"},{"location":"capsicum-Cap/#returns_66","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#ioctl","text":"[Source] fun box ioctl() : U64 val","title":"ioctl"},{"location":"capsicum-Cap/#returns_67","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#ttyhook","text":"[Source] fun box ttyhook() : U64 val","title":"ttyhook"},{"location":"capsicum-Cap/#returns_68","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pdgetpid","text":"[Source] fun box pdgetpid() : U64 val","title":"pdgetpid"},{"location":"capsicum-Cap/#returns_69","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pdwait","text":"[Source] fun box pdwait() : U64 val","title":"pdwait"},{"location":"capsicum-Cap/#returns_70","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#pdkill","text":"[Source] fun box pdkill() : U64 val","title":"pdkill"},{"location":"capsicum-Cap/#returns_71","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_delete","text":"[Source] fun box exattr_delete() : U64 val","title":"exattr_delete"},{"location":"capsicum-Cap/#returns_72","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_get","text":"[Source] fun box exattr_get() : U64 val","title":"exattr_get"},{"location":"capsicum-Cap/#returns_73","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_list","text":"[Source] fun box exattr_list() : U64 val","title":"exattr_list"},{"location":"capsicum-Cap/#returns_74","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#exattr_set","text":"[Source] fun box exattr_set() : U64 val","title":"exattr_set"},{"location":"capsicum-Cap/#returns_75","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_check","text":"[Source] fun box acl_check() : U64 val","title":"acl_check"},{"location":"capsicum-Cap/#returns_76","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_delete","text":"[Source] fun box acl_delete() : U64 val","title":"acl_delete"},{"location":"capsicum-Cap/#returns_77","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_get","text":"[Source] fun box acl_get() : U64 val","title":"acl_get"},{"location":"capsicum-Cap/#returns_78","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#acl_set","text":"[Source] fun box acl_set() : U64 val","title":"acl_set"},{"location":"capsicum-Cap/#returns_79","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#kqueue_change","text":"[Source] fun box kqueue_change() : U64 val","title":"kqueue_change"},{"location":"capsicum-Cap/#returns_80","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#kqueue","text":"[Source] fun box kqueue() : U64 val","title":"kqueue"},{"location":"capsicum-Cap/#returns_81","text":"U64 val","title":"Returns"},{"location":"capsicum-Cap/#eq","text":"[Source] fun box eq( that: Cap val) : Bool val","title":"eq"},{"location":"capsicum-Cap/#parameters","text":"that: Cap val","title":"Parameters"},{"location":"capsicum-Cap/#returns_82","text":"Bool val","title":"Returns"},{"location":"capsicum-Cap/#ne","text":"[Source] fun box ne( that: Cap val) : Bool val","title":"ne"},{"location":"capsicum-Cap/#parameters_1","text":"that: Cap val","title":"Parameters"},{"location":"capsicum-Cap/#returns_83","text":"Bool val","title":"Returns"},{"location":"capsicum-Cap/#private-functions","text":"","title":"Private Functions"},{"location":"capsicum-Cap/#_id","text":"[Source] Build a Capsicum ID from an index and a bit position. fun box _id( idx: U64 val, bit: U64 val) : U64 val","title":"_id"},{"location":"capsicum-Cap/#parameters_2","text":"idx: U64 val bit: U64 val","title":"Parameters"},{"location":"capsicum-Cap/#returns_84","text":"U64 val","title":"Returns"},{"location":"capsicum-CapRights/","text":"CapRights \u00b6 [Source] type CapRights is CapRights0 ref Type Alias For \u00b6 CapRights0 ref","title":"type CapRights"},{"location":"capsicum-CapRights/#caprights","text":"[Source] type CapRights is CapRights0 ref","title":"CapRights"},{"location":"capsicum-CapRights/#type-alias-for","text":"CapRights0 ref","title":"Type Alias For"},{"location":"capsicum-CapRights0/","text":"CapRights0 \u00b6 [Source] Version 0 of the capsicum cap_rights_t structure. class ref CapRights0 Constructors \u00b6 create \u00b6 [Source] Initialises with no rights. new ref create() : CapRights0 ref^ Returns \u00b6 CapRights0 ref^ from \u00b6 [Source] Initialises with the rights from a FileCaps. new ref from( caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box) : CapRights0 ref^ Parameters \u00b6 caps: Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box Returns \u00b6 CapRights0 ref^ descriptor \u00b6 [Source] Initialises with the rights on the given file descriptor. new ref descriptor( fd: I32 val) : CapRights0 ref^ Parameters \u00b6 fd: I32 val Returns \u00b6 CapRights0 ref^ Public Functions \u00b6 set \u00b6 [Source] fun ref set( cap: U64 val) : None val Parameters \u00b6 cap: U64 val Returns \u00b6 None val unset \u00b6 [Source] fun ref unset( cap: U64 val) : None val Parameters \u00b6 cap: U64 val Returns \u00b6 None val limit \u00b6 [Source] Limits the fd to the encoded rights. fun box limit( fd: I32 val) : Bool val Parameters \u00b6 fd: I32 val Returns \u00b6 Bool val merge \u00b6 [Source] Merge the rights in that into this. fun ref merge( that: CapRights0 ref) : None val Parameters \u00b6 that: CapRights0 ref Returns \u00b6 None val remove \u00b6 [Source] Remove the rights in that from this. fun ref remove( that: CapRights0 ref) : None val Parameters \u00b6 that: CapRights0 ref Returns \u00b6 None val clear \u00b6 [Source] Clear all rights. fun ref clear() : None val Returns \u00b6 None val contains \u00b6 [Source] Check that this is a superset of the rights in that. fun box contains( that: CapRights0 ref) : Bool val Parameters \u00b6 that: CapRights0 ref Returns \u00b6 Bool val Private Functions \u00b6 _version \u00b6 [Source] fun box _version() : I32 val Returns \u00b6 I32 val","title":"class CapRights0"},{"location":"capsicum-CapRights0/#caprights0","text":"[Source] Version 0 of the capsicum cap_rights_t structure. class ref CapRights0","title":"CapRights0"},{"location":"capsicum-CapRights0/#constructors","text":"","title":"Constructors"},{"location":"capsicum-CapRights0/#create","text":"[Source] Initialises with no rights. new ref create() : CapRights0 ref^","title":"create"},{"location":"capsicum-CapRights0/#returns","text":"CapRights0 ref^","title":"Returns"},{"location":"capsicum-CapRights0/#from","text":"[Source] Initialises with the rights from a FileCaps. new ref from( caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box) : CapRights0 ref^","title":"from"},{"location":"capsicum-CapRights0/#parameters","text":"caps: Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_1","text":"CapRights0 ref^","title":"Returns"},{"location":"capsicum-CapRights0/#descriptor","text":"[Source] Initialises with the rights on the given file descriptor. new ref descriptor( fd: I32 val) : CapRights0 ref^","title":"descriptor"},{"location":"capsicum-CapRights0/#parameters_1","text":"fd: I32 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_2","text":"CapRights0 ref^","title":"Returns"},{"location":"capsicum-CapRights0/#public-functions","text":"","title":"Public Functions"},{"location":"capsicum-CapRights0/#set","text":"[Source] fun ref set( cap: U64 val) : None val","title":"set"},{"location":"capsicum-CapRights0/#parameters_2","text":"cap: U64 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_3","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#unset","text":"[Source] fun ref unset( cap: U64 val) : None val","title":"unset"},{"location":"capsicum-CapRights0/#parameters_3","text":"cap: U64 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_4","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#limit","text":"[Source] Limits the fd to the encoded rights. fun box limit( fd: I32 val) : Bool val","title":"limit"},{"location":"capsicum-CapRights0/#parameters_4","text":"fd: I32 val","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_5","text":"Bool val","title":"Returns"},{"location":"capsicum-CapRights0/#merge","text":"[Source] Merge the rights in that into this. fun ref merge( that: CapRights0 ref) : None val","title":"merge"},{"location":"capsicum-CapRights0/#parameters_5","text":"that: CapRights0 ref","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_6","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#remove","text":"[Source] Remove the rights in that from this. fun ref remove( that: CapRights0 ref) : None val","title":"remove"},{"location":"capsicum-CapRights0/#parameters_6","text":"that: CapRights0 ref","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_7","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#clear","text":"[Source] Clear all rights. fun ref clear() : None val","title":"clear"},{"location":"capsicum-CapRights0/#returns_8","text":"None val","title":"Returns"},{"location":"capsicum-CapRights0/#contains","text":"[Source] Check that this is a superset of the rights in that. fun box contains( that: CapRights0 ref) : Bool val","title":"contains"},{"location":"capsicum-CapRights0/#parameters_7","text":"that: CapRights0 ref","title":"Parameters"},{"location":"capsicum-CapRights0/#returns_9","text":"Bool val","title":"Returns"},{"location":"capsicum-CapRights0/#private-functions","text":"","title":"Private Functions"},{"location":"capsicum-CapRights0/#_version","text":"[Source] fun box _version() : I32 val","title":"_version"},{"location":"capsicum-CapRights0/#returns_10","text":"I32 val","title":"Returns"},{"location":"cli--index/","text":"CLI Package \u00b6 The CLI package provides enhanced Posix+GNU command line parsing with the feature of commands that can be specified in a hierarchy. See RFC-0038 for more background. The general EBNF of a command line is: command_line ::= root_command (option | command)* (option | arg)* command ::= alphanum_word alphanum_word ::= alphachar(alphachar | numchar | '_' | '-')* option ::= longoption | shortoptionset longoption ::= '--'alphanum_word['='arg | ' 'arg] shortoptionset := '-'alphachar[alphachar]...['='arg | ' 'arg] arg := boolarg | intarg | floatarg | stringarg boolarg := 'true' | 'false' intarg> := ['-'] numchar... floatarg ::= ['-'] numchar... ['.' numchar...] stringarg ::= anychar Some examples: usage: ls [<options>] [<args> ...] usage: make [<options>] <command> [<options>] [<args> ...] usage: chat [<options>] <command> <subcommand> [<options>] [<args> ...] Usage \u00b6 The types in the cli package are broken down into three groups: Specs \u00b6 Pony programs use constructors to create the spec objects to specify their command line syntax. Many aspects of the spec are checked for correctness at compile time, and the result represents everything the parser needs to know when parsing a command line or forming syntax help messages. Option and Arg value types \u00b6 Options and Args parse values from the command line as one of four Pony types: Bool , String , I64 and F64 . Values of each of these types can then be retrieved using the corresponding accessor funtions. In addition, there is a string_seq type that accepts string values from the command line and collects them into a sequence which can then be retrieved as a ReadSeq[String] using the string_seq() accessor function. Some specific details: bool Options: have a default value of 'true' if no value is given. That is, -f is equivalent to -f=true . string_seq Options: the option prefix has to be used each time, like: --file=f1 --file=f2 --file=f3 with the results being collected into a single sequence. string_seq Args: there is no way to indicate termination, so a string_seq Arg should be the last arg for a command, and will consume all remaining command line arguments. Parser \u00b6 Programs then use the CommandSpec they've built to instantiate a parser to parse any given command line. This is often env.args(), but could also be commands from files or other input sources. The result of a parse is either a parsed command, a command help, or a syntax error object. Commands \u00b6 Programs then match the object returned by the parser to determine what kind it is. Errors and help requests typically print messages and exit. For commands, the fullname can be matched and the effective values for the command's options and arguments can be retrieved. Example program \u00b6 This program echos its command line arguments with the option of uppercasing them. use \"cli\" actor Main new create(env: Env) => let cs = try CommandSpec.leaf(\"echo\", \"A sample echo program\", [ OptionSpec.bool(\"upper\", \"Uppercase words\" where short' = 'U', default' = false) ], [ ArgSpec.string_seq(\"words\", \"The words to echo\") ])? .> add_help()? else env.exitcode(-1) // some kind of coding error return end let cmd = match CommandParser(cs).parse(env.args, env.vars) | let c: Command => c | let ch: CommandHelp => ch.print_help(env.out) env.exitcode(0) return | let se: SyntaxError => env.out.print(se.string()) env.exitcode(1) return end let upper = cmd.option(\"upper\").bool() let words = cmd.arg(\"words\").string_seq() for word in words.values() do env.out.write(if upper then word.upper() else word end + \" \") end env.out.print(\"\") Public Types \u00b6 primitive EnvVars class CommandSpec class OptionSpec class ArgSpec class CommandParser primitive Help class CommandHelp class Command class Option class Arg class SyntaxError Private Types \u00b6 primitive _CommandSpecLeaf primitive _CommandSpecParent type _CommandSpecType class _StringSeq type _Value trait _ValueType primitive _BoolType primitive _StringType primitive _I64Type primitive _U64Type primitive _F64Type primitive _StringSeqType primitive _OptionParser primitive _ArgParser primitive _ValueParser primitive _Columns primitive _Fixtures","title":"Package"},{"location":"cli--index/#cli-package","text":"The CLI package provides enhanced Posix+GNU command line parsing with the feature of commands that can be specified in a hierarchy. See RFC-0038 for more background. The general EBNF of a command line is: command_line ::= root_command (option | command)* (option | arg)* command ::= alphanum_word alphanum_word ::= alphachar(alphachar | numchar | '_' | '-')* option ::= longoption | shortoptionset longoption ::= '--'alphanum_word['='arg | ' 'arg] shortoptionset := '-'alphachar[alphachar]...['='arg | ' 'arg] arg := boolarg | intarg | floatarg | stringarg boolarg := 'true' | 'false' intarg> := ['-'] numchar... floatarg ::= ['-'] numchar... ['.' numchar...] stringarg ::= anychar Some examples: usage: ls [<options>] [<args> ...] usage: make [<options>] <command> [<options>] [<args> ...] usage: chat [<options>] <command> <subcommand> [<options>] [<args> ...]","title":"CLI Package"},{"location":"cli--index/#usage","text":"The types in the cli package are broken down into three groups:","title":"Usage"},{"location":"cli--index/#specs","text":"Pony programs use constructors to create the spec objects to specify their command line syntax. Many aspects of the spec are checked for correctness at compile time, and the result represents everything the parser needs to know when parsing a command line or forming syntax help messages.","title":"Specs"},{"location":"cli--index/#option-and-arg-value-types","text":"Options and Args parse values from the command line as one of four Pony types: Bool , String , I64 and F64 . Values of each of these types can then be retrieved using the corresponding accessor funtions. In addition, there is a string_seq type that accepts string values from the command line and collects them into a sequence which can then be retrieved as a ReadSeq[String] using the string_seq() accessor function. Some specific details: bool Options: have a default value of 'true' if no value is given. That is, -f is equivalent to -f=true . string_seq Options: the option prefix has to be used each time, like: --file=f1 --file=f2 --file=f3 with the results being collected into a single sequence. string_seq Args: there is no way to indicate termination, so a string_seq Arg should be the last arg for a command, and will consume all remaining command line arguments.","title":"Option and Arg value types"},{"location":"cli--index/#parser","text":"Programs then use the CommandSpec they've built to instantiate a parser to parse any given command line. This is often env.args(), but could also be commands from files or other input sources. The result of a parse is either a parsed command, a command help, or a syntax error object.","title":"Parser"},{"location":"cli--index/#commands","text":"Programs then match the object returned by the parser to determine what kind it is. Errors and help requests typically print messages and exit. For commands, the fullname can be matched and the effective values for the command's options and arguments can be retrieved.","title":"Commands"},{"location":"cli--index/#example-program","text":"This program echos its command line arguments with the option of uppercasing them. use \"cli\" actor Main new create(env: Env) => let cs = try CommandSpec.leaf(\"echo\", \"A sample echo program\", [ OptionSpec.bool(\"upper\", \"Uppercase words\" where short' = 'U', default' = false) ], [ ArgSpec.string_seq(\"words\", \"The words to echo\") ])? .> add_help()? else env.exitcode(-1) // some kind of coding error return end let cmd = match CommandParser(cs).parse(env.args, env.vars) | let c: Command => c | let ch: CommandHelp => ch.print_help(env.out) env.exitcode(0) return | let se: SyntaxError => env.out.print(se.string()) env.exitcode(1) return end let upper = cmd.option(\"upper\").bool() let words = cmd.arg(\"words\").string_seq() for word in words.values() do env.out.write(if upper then word.upper() else word end + \" \") end env.out.print(\"\")","title":"Example program"},{"location":"cli--index/#public-types","text":"primitive EnvVars class CommandSpec class OptionSpec class ArgSpec class CommandParser primitive Help class CommandHelp class Command class Option class Arg class SyntaxError","title":"Public Types"},{"location":"cli--index/#private-types","text":"primitive _CommandSpecLeaf primitive _CommandSpecParent type _CommandSpecType class _StringSeq type _Value trait _ValueType primitive _BoolType primitive _StringType primitive _I64Type primitive _U64Type primitive _F64Type primitive _StringSeqType primitive _OptionParser primitive _ArgParser primitive _ValueParser primitive _Columns primitive _Fixtures","title":"Private Types"},{"location":"cli-Arg/","text":"Arg \u00b6 [Source] Arg contains a spec and an effective value for a given arg. class val Arg Constructors \u00b6 create \u00b6 [Source] new val create( spec': ArgSpec val, value': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : Arg val^ Parameters \u00b6 spec': ArgSpec val value': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 Arg val^ Public Functions \u00b6 spec \u00b6 [Source] fun box spec() : ArgSpec val Returns \u00b6 ArgSpec val bool \u00b6 [Source] Returns the arg value as a Bool, defaulting to false. fun box bool() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] Returns the arg value as a String, defaulting to empty. fun box string() : String val Returns \u00b6 String val i64 \u00b6 [Source] Returns the arg value as an I64, defaulting to 0. fun box i64() : I64 val Returns \u00b6 I64 val u64 \u00b6 [Source] Returns the arg value as an U64, defaulting to 0. fun box u64() : U64 val Returns \u00b6 U64 val f64 \u00b6 [Source] Returns the arg value as an F64, defaulting to 0.0. fun box f64() : F64 val Returns \u00b6 F64 val string_seq \u00b6 [Source] Returns the arg value as a ReadSeq[String], defaulting to empty. fun box string_seq() : ReadSeq[String val] val Returns \u00b6 ReadSeq [ String val] val deb_string \u00b6 [Source] fun box deb_string() : String val Returns \u00b6 String val Private Functions \u00b6 _append \u00b6 [Source] fun box _append( next: Arg val) : Arg val Parameters \u00b6 next: Arg val Returns \u00b6 Arg val","title":"class Arg"},{"location":"cli-Arg/#arg","text":"[Source] Arg contains a spec and an effective value for a given arg. class val Arg","title":"Arg"},{"location":"cli-Arg/#constructors","text":"","title":"Constructors"},{"location":"cli-Arg/#create","text":"[Source] new val create( spec': ArgSpec val, value': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : Arg val^","title":"create"},{"location":"cli-Arg/#parameters","text":"spec': ArgSpec val value': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-Arg/#returns","text":"Arg val^","title":"Returns"},{"location":"cli-Arg/#public-functions","text":"","title":"Public Functions"},{"location":"cli-Arg/#spec","text":"[Source] fun box spec() : ArgSpec val","title":"spec"},{"location":"cli-Arg/#returns_1","text":"ArgSpec val","title":"Returns"},{"location":"cli-Arg/#bool","text":"[Source] Returns the arg value as a Bool, defaulting to false. fun box bool() : Bool val","title":"bool"},{"location":"cli-Arg/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-Arg/#string","text":"[Source] Returns the arg value as a String, defaulting to empty. fun box string() : String val","title":"string"},{"location":"cli-Arg/#returns_3","text":"String val","title":"Returns"},{"location":"cli-Arg/#i64","text":"[Source] Returns the arg value as an I64, defaulting to 0. fun box i64() : I64 val","title":"i64"},{"location":"cli-Arg/#returns_4","text":"I64 val","title":"Returns"},{"location":"cli-Arg/#u64","text":"[Source] Returns the arg value as an U64, defaulting to 0. fun box u64() : U64 val","title":"u64"},{"location":"cli-Arg/#returns_5","text":"U64 val","title":"Returns"},{"location":"cli-Arg/#f64","text":"[Source] Returns the arg value as an F64, defaulting to 0.0. fun box f64() : F64 val","title":"f64"},{"location":"cli-Arg/#returns_6","text":"F64 val","title":"Returns"},{"location":"cli-Arg/#string_seq","text":"[Source] Returns the arg value as a ReadSeq[String], defaulting to empty. fun box string_seq() : ReadSeq[String val] val","title":"string_seq"},{"location":"cli-Arg/#returns_7","text":"ReadSeq [ String val] val","title":"Returns"},{"location":"cli-Arg/#deb_string","text":"[Source] fun box deb_string() : String val","title":"deb_string"},{"location":"cli-Arg/#returns_8","text":"String val","title":"Returns"},{"location":"cli-Arg/#private-functions","text":"","title":"Private Functions"},{"location":"cli-Arg/#_append","text":"[Source] fun box _append( next: Arg val) : Arg val","title":"_append"},{"location":"cli-Arg/#parameters_1","text":"next: Arg val","title":"Parameters"},{"location":"cli-Arg/#returns_9","text":"Arg val","title":"Returns"},{"location":"cli-ArgSpec/","text":"ArgSpec \u00b6 [Source] ArgSpec describes the specification of a positional Arg(ument). They have a name, descr(iption), a typ(e), and a default value when they are not required. Args always come after a leaf command, and are assigned in their positional order. class val ArgSpec Constructors \u00b6 bool \u00b6 [Source] Creates an Arg with a Bool typed value that can be used like <cmd> true to yield an arg value like cmd.arg(\"opt\").bool() == true . new val bool( name': String val, descr': String val = \"\", default': (Bool val | None val) = reference) : ArgSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" default': ( Bool val | None val) = reference Returns \u00b6 ArgSpec val^ string \u00b6 [Source] Creates an Arg with a String typed value that can be used like <cmd> filename to yield an arg value cmd.arg(\"file\").string() == \"filename\" . new val string( name': String val, descr': String val = \"\", default': (String val | None val) = reference) : ArgSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" default': ( String val | None val) = reference Returns \u00b6 ArgSpec val^ i64 \u00b6 [Source] Creates an Arg with an I64 typed value that can be used like <cmd> 42 to yield an arg value like cmd.arg(\"count\").i64() == I64(42) . new val i64( name': String val, descr': String val = \"\", default': (I64 val | None val) = reference) : ArgSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" default': ( I64 val | None val) = reference Returns \u00b6 ArgSpec val^ u64 \u00b6 [Source] Creates an Arg with an U64 typed value that can be used like <cmd> 47 to yield an arg value like cmd.arg(\"count\").u64() == U64(47) . new val u64( name': String val, descr': String val = \"\", default': (U64 val | None val) = reference) : ArgSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" default': ( U64 val | None val) = reference Returns \u00b6 ArgSpec val^ f64 \u00b6 [Source] Creates an Arg with a F64 typed value that can be used like <cmd> 1.039 to yield an arg value like cmd.arg(\"ratio\").f64() == F64(1.039) . new val f64( name': String val, descr': String val = \"\", default': (F64 val | None val) = reference) : ArgSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" default': ( F64 val | None val) = reference Returns \u00b6 ArgSpec val^ string_seq \u00b6 [Source] Creates an Arg with a ReadSeq[String] typed value that can be used like <cmd> file1 file2 file3 to yield a sequence of three strings equivalent to cmd.arg(\"file\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"] . new val string_seq( name': String val, descr': String val = \"\") : ArgSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" Returns \u00b6 ArgSpec val^ Public Functions \u00b6 name \u00b6 [Source] Returns the name of this arg. fun box name() : String val Returns \u00b6 String val descr \u00b6 [Source] Returns the description for this arg. fun box descr() : String val Returns \u00b6 String val required \u00b6 [Source] Returns true iff this arg is required to be present in the command line. fun box required() : Bool val Returns \u00b6 Bool val help_string \u00b6 [Source] Returns a formated help string for this arg. fun box help_string() : String val Returns \u00b6 String val deb_string \u00b6 [Source] fun box deb_string() : String val Returns \u00b6 String val Private Functions \u00b6 _init \u00b6 [Source] fun tag _init( typ': _ValueType val, default': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val)) : (_ValueType val , (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val) Parameters \u00b6 typ': _ValueType val default': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val) Returns \u00b6 ( _ValueType val , ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val) _typ_p \u00b6 [Source] fun box _typ_p() : _ValueType val Returns \u00b6 _ValueType val _default_p \u00b6 [Source] fun box _default_p() : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"class ArgSpec"},{"location":"cli-ArgSpec/#argspec","text":"[Source] ArgSpec describes the specification of a positional Arg(ument). They have a name, descr(iption), a typ(e), and a default value when they are not required. Args always come after a leaf command, and are assigned in their positional order. class val ArgSpec","title":"ArgSpec"},{"location":"cli-ArgSpec/#constructors","text":"","title":"Constructors"},{"location":"cli-ArgSpec/#bool","text":"[Source] Creates an Arg with a Bool typed value that can be used like <cmd> true to yield an arg value like cmd.arg(\"opt\").bool() == true . new val bool( name': String val, descr': String val = \"\", default': (Bool val | None val) = reference) : ArgSpec val^","title":"bool"},{"location":"cli-ArgSpec/#parameters","text":"name': String val descr': String val = \"\" default': ( Bool val | None val) = reference","title":"Parameters"},{"location":"cli-ArgSpec/#returns","text":"ArgSpec val^","title":"Returns"},{"location":"cli-ArgSpec/#string","text":"[Source] Creates an Arg with a String typed value that can be used like <cmd> filename to yield an arg value cmd.arg(\"file\").string() == \"filename\" . new val string( name': String val, descr': String val = \"\", default': (String val | None val) = reference) : ArgSpec val^","title":"string"},{"location":"cli-ArgSpec/#parameters_1","text":"name': String val descr': String val = \"\" default': ( String val | None val) = reference","title":"Parameters"},{"location":"cli-ArgSpec/#returns_1","text":"ArgSpec val^","title":"Returns"},{"location":"cli-ArgSpec/#i64","text":"[Source] Creates an Arg with an I64 typed value that can be used like <cmd> 42 to yield an arg value like cmd.arg(\"count\").i64() == I64(42) . new val i64( name': String val, descr': String val = \"\", default': (I64 val | None val) = reference) : ArgSpec val^","title":"i64"},{"location":"cli-ArgSpec/#parameters_2","text":"name': String val descr': String val = \"\" default': ( I64 val | None val) = reference","title":"Parameters"},{"location":"cli-ArgSpec/#returns_2","text":"ArgSpec val^","title":"Returns"},{"location":"cli-ArgSpec/#u64","text":"[Source] Creates an Arg with an U64 typed value that can be used like <cmd> 47 to yield an arg value like cmd.arg(\"count\").u64() == U64(47) . new val u64( name': String val, descr': String val = \"\", default': (U64 val | None val) = reference) : ArgSpec val^","title":"u64"},{"location":"cli-ArgSpec/#parameters_3","text":"name': String val descr': String val = \"\" default': ( U64 val | None val) = reference","title":"Parameters"},{"location":"cli-ArgSpec/#returns_3","text":"ArgSpec val^","title":"Returns"},{"location":"cli-ArgSpec/#f64","text":"[Source] Creates an Arg with a F64 typed value that can be used like <cmd> 1.039 to yield an arg value like cmd.arg(\"ratio\").f64() == F64(1.039) . new val f64( name': String val, descr': String val = \"\", default': (F64 val | None val) = reference) : ArgSpec val^","title":"f64"},{"location":"cli-ArgSpec/#parameters_4","text":"name': String val descr': String val = \"\" default': ( F64 val | None val) = reference","title":"Parameters"},{"location":"cli-ArgSpec/#returns_4","text":"ArgSpec val^","title":"Returns"},{"location":"cli-ArgSpec/#string_seq","text":"[Source] Creates an Arg with a ReadSeq[String] typed value that can be used like <cmd> file1 file2 file3 to yield a sequence of three strings equivalent to cmd.arg(\"file\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"] . new val string_seq( name': String val, descr': String val = \"\") : ArgSpec val^","title":"string_seq"},{"location":"cli-ArgSpec/#parameters_5","text":"name': String val descr': String val = \"\"","title":"Parameters"},{"location":"cli-ArgSpec/#returns_5","text":"ArgSpec val^","title":"Returns"},{"location":"cli-ArgSpec/#public-functions","text":"","title":"Public Functions"},{"location":"cli-ArgSpec/#name","text":"[Source] Returns the name of this arg. fun box name() : String val","title":"name"},{"location":"cli-ArgSpec/#returns_6","text":"String val","title":"Returns"},{"location":"cli-ArgSpec/#descr","text":"[Source] Returns the description for this arg. fun box descr() : String val","title":"descr"},{"location":"cli-ArgSpec/#returns_7","text":"String val","title":"Returns"},{"location":"cli-ArgSpec/#required","text":"[Source] Returns true iff this arg is required to be present in the command line. fun box required() : Bool val","title":"required"},{"location":"cli-ArgSpec/#returns_8","text":"Bool val","title":"Returns"},{"location":"cli-ArgSpec/#help_string","text":"[Source] Returns a formated help string for this arg. fun box help_string() : String val","title":"help_string"},{"location":"cli-ArgSpec/#returns_9","text":"String val","title":"Returns"},{"location":"cli-ArgSpec/#deb_string","text":"[Source] fun box deb_string() : String val","title":"deb_string"},{"location":"cli-ArgSpec/#returns_10","text":"String val","title":"Returns"},{"location":"cli-ArgSpec/#private-functions","text":"","title":"Private Functions"},{"location":"cli-ArgSpec/#_init","text":"[Source] fun tag _init( typ': _ValueType val, default': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val)) : (_ValueType val , (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val)","title":"_init"},{"location":"cli-ArgSpec/#parameters_6","text":"typ': _ValueType val default': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val)","title":"Parameters"},{"location":"cli-ArgSpec/#returns_11","text":"( _ValueType val , ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val)","title":"Returns"},{"location":"cli-ArgSpec/#_typ_p","text":"[Source] fun box _typ_p() : _ValueType val","title":"_typ_p"},{"location":"cli-ArgSpec/#returns_12","text":"_ValueType val","title":"Returns"},{"location":"cli-ArgSpec/#_default_p","text":"[Source] fun box _default_p() : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"_default_p"},{"location":"cli-ArgSpec/#returns_13","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-Command/","text":"Command \u00b6 [Source] Command contains all of the information describing a command with its spec and effective options and arguments, ready to use. class box Command Constructors \u00b6 _create \u00b6 [Source] new ref _create( spec': CommandSpec box, fullname': String val, options': HashMap[String val, Option val, HashEq[String val] val] box, args': HashMap[String val, Arg val, HashEq[String val] val] box) : Command ref^ Parameters \u00b6 spec': CommandSpec box fullname': String val options': HashMap [ String val, Option val, HashEq [ String val] val] box args': HashMap [ String val, Arg val, HashEq [ String val] val] box Returns \u00b6 Command ref^ Public Functions \u00b6 string \u00b6 [Source] Returns a representational string for this command. fun box string() : String iso^ Returns \u00b6 String iso^ spec \u00b6 [Source] Returns the spec for this command. fun box spec() : CommandSpec box Returns \u00b6 CommandSpec box fullname \u00b6 [Source] Returns the full name of this command, with its parents prefixed. fun box fullname() : String val Returns \u00b6 String val option \u00b6 [Source] Returns the Option by name, defaulting to a fake Option if unknown. fun box option( name: String val) : Option val Parameters \u00b6 name: String val Returns \u00b6 Option val arg \u00b6 [Source] Returns the Arg by name, defaulting to a fake Arg if unknown. fun box arg( name: String val) : Arg val Parameters \u00b6 name: String val Returns \u00b6 Arg val","title":"class Command"},{"location":"cli-Command/#command","text":"[Source] Command contains all of the information describing a command with its spec and effective options and arguments, ready to use. class box Command","title":"Command"},{"location":"cli-Command/#constructors","text":"","title":"Constructors"},{"location":"cli-Command/#_create","text":"[Source] new ref _create( spec': CommandSpec box, fullname': String val, options': HashMap[String val, Option val, HashEq[String val] val] box, args': HashMap[String val, Arg val, HashEq[String val] val] box) : Command ref^","title":"_create"},{"location":"cli-Command/#parameters","text":"spec': CommandSpec box fullname': String val options': HashMap [ String val, Option val, HashEq [ String val] val] box args': HashMap [ String val, Arg val, HashEq [ String val] val] box","title":"Parameters"},{"location":"cli-Command/#returns","text":"Command ref^","title":"Returns"},{"location":"cli-Command/#public-functions","text":"","title":"Public Functions"},{"location":"cli-Command/#string","text":"[Source] Returns a representational string for this command. fun box string() : String iso^","title":"string"},{"location":"cli-Command/#returns_1","text":"String iso^","title":"Returns"},{"location":"cli-Command/#spec","text":"[Source] Returns the spec for this command. fun box spec() : CommandSpec box","title":"spec"},{"location":"cli-Command/#returns_2","text":"CommandSpec box","title":"Returns"},{"location":"cli-Command/#fullname","text":"[Source] Returns the full name of this command, with its parents prefixed. fun box fullname() : String val","title":"fullname"},{"location":"cli-Command/#returns_3","text":"String val","title":"Returns"},{"location":"cli-Command/#option","text":"[Source] Returns the Option by name, defaulting to a fake Option if unknown. fun box option( name: String val) : Option val","title":"option"},{"location":"cli-Command/#parameters_1","text":"name: String val","title":"Parameters"},{"location":"cli-Command/#returns_4","text":"Option val","title":"Returns"},{"location":"cli-Command/#arg","text":"[Source] Returns the Arg by name, defaulting to a fake Arg if unknown. fun box arg( name: String val) : Arg val","title":"arg"},{"location":"cli-Command/#parameters_2","text":"name: String val","title":"Parameters"},{"location":"cli-Command/#returns_5","text":"Arg val","title":"Returns"},{"location":"cli-CommandHelp/","text":"CommandHelp \u00b6 [Source] CommandHelp encapsulates the information needed to generate a user help message for a given CommandSpec, optionally with a specific command identified to print help about. Use Help.general() or Help.for_command() to create a CommandHelp instance. class box CommandHelp Constructors \u00b6 _create \u00b6 [Source] new ref _create( parent': (CommandHelp box | None val), spec': CommandSpec box) : CommandHelp ref^ Parameters \u00b6 parent': ( CommandHelp box | None val) spec': CommandSpec box Returns \u00b6 CommandHelp ref^ Public Functions \u00b6 fullname \u00b6 [Source] fun box fullname() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val help_string \u00b6 [Source] Renders the help message as a String. fun box help_string() : String val Returns \u00b6 String val print_help \u00b6 [Source] Prints the help message to an OutStream. fun box print_help( os: OutStream tag) : None val Parameters \u00b6 os: OutStream tag Returns \u00b6 None val Private Functions \u00b6 _write_help \u00b6 [Source] fun box _write_help( w: Writer ref) : None val Parameters \u00b6 w: Writer ref Returns \u00b6 None val _write_usage \u00b6 [Source] fun box _write_usage( w: Writer ref) : None val Parameters \u00b6 w: Writer ref Returns \u00b6 None val _write_options \u00b6 [Source] fun box _write_options( w: Writer ref, options: Array[OptionSpec box] box) : None val Parameters \u00b6 w: Writer ref options: Array [ OptionSpec box] box Returns \u00b6 None val _write_commands \u00b6 [Source] fun box _write_commands( w: Writer ref) : None val Parameters \u00b6 w: Writer ref Returns \u00b6 None val _list_commands \u00b6 [Source] fun box _list_commands( cs: CommandSpec box, cols: Array[(USize val , String val , String val)] ref, level: USize val) : None val Parameters \u00b6 cs: CommandSpec box cols: Array [( USize val , String val , String val)] ref level: USize val Returns \u00b6 None val _write_args \u00b6 [Source] fun box _write_args( w: Writer ref, args: Array[ArgSpec val] box) : None val Parameters \u00b6 w: Writer ref args: Array [ ArgSpec val] box Returns \u00b6 None val _any_options \u00b6 [Source] fun box _any_options() : Bool val Returns \u00b6 Bool val _all_options \u00b6 [Source] fun box _all_options() : Array[OptionSpec box] ref Returns \u00b6 Array [ OptionSpec box] ref _all_options_fill \u00b6 [Source] fun box _all_options_fill( options: Array[OptionSpec box] ref) : None val Parameters \u00b6 options: Array [ OptionSpec box] ref Returns \u00b6 None val","title":"class CommandHelp"},{"location":"cli-CommandHelp/#commandhelp","text":"[Source] CommandHelp encapsulates the information needed to generate a user help message for a given CommandSpec, optionally with a specific command identified to print help about. Use Help.general() or Help.for_command() to create a CommandHelp instance. class box CommandHelp","title":"CommandHelp"},{"location":"cli-CommandHelp/#constructors","text":"","title":"Constructors"},{"location":"cli-CommandHelp/#_create","text":"[Source] new ref _create( parent': (CommandHelp box | None val), spec': CommandSpec box) : CommandHelp ref^","title":"_create"},{"location":"cli-CommandHelp/#parameters","text":"parent': ( CommandHelp box | None val) spec': CommandSpec box","title":"Parameters"},{"location":"cli-CommandHelp/#returns","text":"CommandHelp ref^","title":"Returns"},{"location":"cli-CommandHelp/#public-functions","text":"","title":"Public Functions"},{"location":"cli-CommandHelp/#fullname","text":"[Source] fun box fullname() : String val","title":"fullname"},{"location":"cli-CommandHelp/#returns_1","text":"String val","title":"Returns"},{"location":"cli-CommandHelp/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-CommandHelp/#returns_2","text":"String val","title":"Returns"},{"location":"cli-CommandHelp/#help_string","text":"[Source] Renders the help message as a String. fun box help_string() : String val","title":"help_string"},{"location":"cli-CommandHelp/#returns_3","text":"String val","title":"Returns"},{"location":"cli-CommandHelp/#print_help","text":"[Source] Prints the help message to an OutStream. fun box print_help( os: OutStream tag) : None val","title":"print_help"},{"location":"cli-CommandHelp/#parameters_1","text":"os: OutStream tag","title":"Parameters"},{"location":"cli-CommandHelp/#returns_4","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#private-functions","text":"","title":"Private Functions"},{"location":"cli-CommandHelp/#_write_help","text":"[Source] fun box _write_help( w: Writer ref) : None val","title":"_write_help"},{"location":"cli-CommandHelp/#parameters_2","text":"w: Writer ref","title":"Parameters"},{"location":"cli-CommandHelp/#returns_5","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#_write_usage","text":"[Source] fun box _write_usage( w: Writer ref) : None val","title":"_write_usage"},{"location":"cli-CommandHelp/#parameters_3","text":"w: Writer ref","title":"Parameters"},{"location":"cli-CommandHelp/#returns_6","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#_write_options","text":"[Source] fun box _write_options( w: Writer ref, options: Array[OptionSpec box] box) : None val","title":"_write_options"},{"location":"cli-CommandHelp/#parameters_4","text":"w: Writer ref options: Array [ OptionSpec box] box","title":"Parameters"},{"location":"cli-CommandHelp/#returns_7","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#_write_commands","text":"[Source] fun box _write_commands( w: Writer ref) : None val","title":"_write_commands"},{"location":"cli-CommandHelp/#parameters_5","text":"w: Writer ref","title":"Parameters"},{"location":"cli-CommandHelp/#returns_8","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#_list_commands","text":"[Source] fun box _list_commands( cs: CommandSpec box, cols: Array[(USize val , String val , String val)] ref, level: USize val) : None val","title":"_list_commands"},{"location":"cli-CommandHelp/#parameters_6","text":"cs: CommandSpec box cols: Array [( USize val , String val , String val)] ref level: USize val","title":"Parameters"},{"location":"cli-CommandHelp/#returns_9","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#_write_args","text":"[Source] fun box _write_args( w: Writer ref, args: Array[ArgSpec val] box) : None val","title":"_write_args"},{"location":"cli-CommandHelp/#parameters_7","text":"w: Writer ref args: Array [ ArgSpec val] box","title":"Parameters"},{"location":"cli-CommandHelp/#returns_10","text":"None val","title":"Returns"},{"location":"cli-CommandHelp/#_any_options","text":"[Source] fun box _any_options() : Bool val","title":"_any_options"},{"location":"cli-CommandHelp/#returns_11","text":"Bool val","title":"Returns"},{"location":"cli-CommandHelp/#_all_options","text":"[Source] fun box _all_options() : Array[OptionSpec box] ref","title":"_all_options"},{"location":"cli-CommandHelp/#returns_12","text":"Array [ OptionSpec box] ref","title":"Returns"},{"location":"cli-CommandHelp/#_all_options_fill","text":"[Source] fun box _all_options_fill( options: Array[OptionSpec box] ref) : None val","title":"_all_options_fill"},{"location":"cli-CommandHelp/#parameters_8","text":"options: Array [ OptionSpec box] ref","title":"Parameters"},{"location":"cli-CommandHelp/#returns_13","text":"None val","title":"Returns"},{"location":"cli-CommandParser/","text":"CommandParser \u00b6 [Source] class ref CommandParser Constructors \u00b6 create \u00b6 [Source] Creates a new parser for a given command spec. new box create( spec': CommandSpec box) : CommandParser box^ Parameters \u00b6 spec': CommandSpec box Returns \u00b6 CommandParser box^ _sub \u00b6 [Source] new box _sub( spec': CommandSpec box, parent': CommandParser box) : CommandParser box^ Parameters \u00b6 spec': CommandSpec box parent': CommandParser box Returns \u00b6 CommandParser box^ Public Functions \u00b6 parse \u00b6 [Source] Parses all of the command line tokens and env vars and returns a Command, or the first SyntaxError. fun box parse( argv: Array[String val] box, envs: (Array[String val] box | None val) = reference) : (Command box | CommandHelp box | SyntaxError val) Parameters \u00b6 argv: Array [ String val] box envs: ( Array [ String val] box | None val) = reference Returns \u00b6 ( Command box | CommandHelp box | SyntaxError val) Private Functions \u00b6 _fullname \u00b6 [Source] fun box _fullname() : String val Returns \u00b6 String val _root_spec \u00b6 [Source] fun box _root_spec() : CommandSpec box Returns \u00b6 CommandSpec box _parse_command \u00b6 [Source] Parses all of the command line tokens and env vars into the given options and args maps. Returns the first SyntaxError, or the Command when OK. fun box _parse_command( tokens: Array[String val] ref, options: HashMap[String val, Option val, HashEq[String val] val] ref, args: HashMap[String val, Arg val, HashEq[String val] val] ref, envsmap: HashMap[String val, String val, HashEq[String val] val] box, ostop: Bool val) : (Command box | CommandHelp box | SyntaxError val) Parameters \u00b6 tokens: Array [ String val] ref options: HashMap [ String val, Option val, HashEq [ String val] val] ref args: HashMap [ String val, Arg val, HashEq [ String val] val] ref envsmap: HashMap [ String val, String val, HashEq [ String val] val] box ostop: Bool val Returns \u00b6 ( Command box | CommandHelp box | SyntaxError val) _parse_long_option \u00b6 [Source] --opt=foo => --opt has argument foo --opt foo => --opt has argument foo, iff arg is required fun box _parse_long_option( token: String val, args: Array[String val] ref) : (Option val | SyntaxError val) Parameters \u00b6 token: String val args: Array [ String val] ref Returns \u00b6 ( Option val | SyntaxError val) _parse_short_options \u00b6 [Source] if 'O' requires an argument -OFoo => -O has argument Foo -O=Foo => -O has argument Foo -O Foo => -O has argument Foo else -O=Foo => -O has argument foo -abc => options a, b, c. -abcFoo => options a, b, c. c has argument Foo iff its arg is required. -abc=Foo => options a, b, c. c has argument Foo. -abc Foo => options a, b, c. c has argument Foo iff its arg is required. fun box _parse_short_options( token: String val, args: Array[String val] ref) : (Array[Option val] ref | SyntaxError val) Parameters \u00b6 token: String val args: Array [ String val] ref Returns \u00b6 ( Array [ Option val] ref | SyntaxError val) _parse_arg \u00b6 [Source] fun box _parse_arg( token: String val, arg_pos: USize val) : (Arg val | SyntaxError val) Parameters \u00b6 token: String val arg_pos: USize val Returns \u00b6 ( Arg val | SyntaxError val) _option_with_name \u00b6 [Source] fun box _option_with_name( name: String val) : (OptionSpec val | None val) Parameters \u00b6 name: String val Returns \u00b6 ( OptionSpec val | None val) _option_with_short \u00b6 [Source] fun box _option_with_short( short: U8 val) : (OptionSpec val | None val) Parameters \u00b6 short: U8 val Returns \u00b6 ( OptionSpec val | None val) _short_string \u00b6 [Source] fun tag _short_string( c: U8 val) : String val Parameters \u00b6 c: U8 val Returns \u00b6 String val _help_name \u00b6 [Source] fun box _help_name() : String val Returns \u00b6 String val","title":"class CommandParser"},{"location":"cli-CommandParser/#commandparser","text":"[Source] class ref CommandParser","title":"CommandParser"},{"location":"cli-CommandParser/#constructors","text":"","title":"Constructors"},{"location":"cli-CommandParser/#create","text":"[Source] Creates a new parser for a given command spec. new box create( spec': CommandSpec box) : CommandParser box^","title":"create"},{"location":"cli-CommandParser/#parameters","text":"spec': CommandSpec box","title":"Parameters"},{"location":"cli-CommandParser/#returns","text":"CommandParser box^","title":"Returns"},{"location":"cli-CommandParser/#_sub","text":"[Source] new box _sub( spec': CommandSpec box, parent': CommandParser box) : CommandParser box^","title":"_sub"},{"location":"cli-CommandParser/#parameters_1","text":"spec': CommandSpec box parent': CommandParser box","title":"Parameters"},{"location":"cli-CommandParser/#returns_1","text":"CommandParser box^","title":"Returns"},{"location":"cli-CommandParser/#public-functions","text":"","title":"Public Functions"},{"location":"cli-CommandParser/#parse","text":"[Source] Parses all of the command line tokens and env vars and returns a Command, or the first SyntaxError. fun box parse( argv: Array[String val] box, envs: (Array[String val] box | None val) = reference) : (Command box | CommandHelp box | SyntaxError val)","title":"parse"},{"location":"cli-CommandParser/#parameters_2","text":"argv: Array [ String val] box envs: ( Array [ String val] box | None val) = reference","title":"Parameters"},{"location":"cli-CommandParser/#returns_2","text":"( Command box | CommandHelp box | SyntaxError val)","title":"Returns"},{"location":"cli-CommandParser/#private-functions","text":"","title":"Private Functions"},{"location":"cli-CommandParser/#_fullname","text":"[Source] fun box _fullname() : String val","title":"_fullname"},{"location":"cli-CommandParser/#returns_3","text":"String val","title":"Returns"},{"location":"cli-CommandParser/#_root_spec","text":"[Source] fun box _root_spec() : CommandSpec box","title":"_root_spec"},{"location":"cli-CommandParser/#returns_4","text":"CommandSpec box","title":"Returns"},{"location":"cli-CommandParser/#_parse_command","text":"[Source] Parses all of the command line tokens and env vars into the given options and args maps. Returns the first SyntaxError, or the Command when OK. fun box _parse_command( tokens: Array[String val] ref, options: HashMap[String val, Option val, HashEq[String val] val] ref, args: HashMap[String val, Arg val, HashEq[String val] val] ref, envsmap: HashMap[String val, String val, HashEq[String val] val] box, ostop: Bool val) : (Command box | CommandHelp box | SyntaxError val)","title":"_parse_command"},{"location":"cli-CommandParser/#parameters_3","text":"tokens: Array [ String val] ref options: HashMap [ String val, Option val, HashEq [ String val] val] ref args: HashMap [ String val, Arg val, HashEq [ String val] val] ref envsmap: HashMap [ String val, String val, HashEq [ String val] val] box ostop: Bool val","title":"Parameters"},{"location":"cli-CommandParser/#returns_5","text":"( Command box | CommandHelp box | SyntaxError val)","title":"Returns"},{"location":"cli-CommandParser/#_parse_long_option","text":"[Source] --opt=foo => --opt has argument foo --opt foo => --opt has argument foo, iff arg is required fun box _parse_long_option( token: String val, args: Array[String val] ref) : (Option val | SyntaxError val)","title":"_parse_long_option"},{"location":"cli-CommandParser/#parameters_4","text":"token: String val args: Array [ String val] ref","title":"Parameters"},{"location":"cli-CommandParser/#returns_6","text":"( Option val | SyntaxError val)","title":"Returns"},{"location":"cli-CommandParser/#_parse_short_options","text":"[Source] if 'O' requires an argument -OFoo => -O has argument Foo -O=Foo => -O has argument Foo -O Foo => -O has argument Foo else -O=Foo => -O has argument foo -abc => options a, b, c. -abcFoo => options a, b, c. c has argument Foo iff its arg is required. -abc=Foo => options a, b, c. c has argument Foo. -abc Foo => options a, b, c. c has argument Foo iff its arg is required. fun box _parse_short_options( token: String val, args: Array[String val] ref) : (Array[Option val] ref | SyntaxError val)","title":"_parse_short_options"},{"location":"cli-CommandParser/#parameters_5","text":"token: String val args: Array [ String val] ref","title":"Parameters"},{"location":"cli-CommandParser/#returns_7","text":"( Array [ Option val] ref | SyntaxError val)","title":"Returns"},{"location":"cli-CommandParser/#_parse_arg","text":"[Source] fun box _parse_arg( token: String val, arg_pos: USize val) : (Arg val | SyntaxError val)","title":"_parse_arg"},{"location":"cli-CommandParser/#parameters_6","text":"token: String val arg_pos: USize val","title":"Parameters"},{"location":"cli-CommandParser/#returns_8","text":"( Arg val | SyntaxError val)","title":"Returns"},{"location":"cli-CommandParser/#_option_with_name","text":"[Source] fun box _option_with_name( name: String val) : (OptionSpec val | None val)","title":"_option_with_name"},{"location":"cli-CommandParser/#parameters_7","text":"name: String val","title":"Parameters"},{"location":"cli-CommandParser/#returns_9","text":"( OptionSpec val | None val)","title":"Returns"},{"location":"cli-CommandParser/#_option_with_short","text":"[Source] fun box _option_with_short( short: U8 val) : (OptionSpec val | None val)","title":"_option_with_short"},{"location":"cli-CommandParser/#parameters_8","text":"short: U8 val","title":"Parameters"},{"location":"cli-CommandParser/#returns_10","text":"( OptionSpec val | None val)","title":"Returns"},{"location":"cli-CommandParser/#_short_string","text":"[Source] fun tag _short_string( c: U8 val) : String val","title":"_short_string"},{"location":"cli-CommandParser/#parameters_9","text":"c: U8 val","title":"Parameters"},{"location":"cli-CommandParser/#returns_11","text":"String val","title":"Returns"},{"location":"cli-CommandParser/#_help_name","text":"[Source] fun box _help_name() : String val","title":"_help_name"},{"location":"cli-CommandParser/#returns_12","text":"String val","title":"Returns"},{"location":"cli-CommandSpec/","text":"CommandSpec \u00b6 [Source] CommandSpec describes the specification of a parent or leaf command. Each command has the following attributes: a name: a simple string token that identifies the command. a description: used in the syntax message. a map of options: the valid options for this command. an optional help option+command name for help parsing one of: a Map of child commands. an Array of arguments. class ref CommandSpec Constructors \u00b6 parent \u00b6 [Source] Creates a command spec that can accept options and child commands, but not arguments. new ref parent( name': String val, descr': String val = \"\", options': Array[OptionSpec val] box = call, commands': Array[CommandSpec ref] box = call) : CommandSpec ref^ ? Parameters \u00b6 name': String val descr': String val = \"\" options': Array [ OptionSpec val] box = call commands': Array [ CommandSpec ref] box = call Returns \u00b6 CommandSpec ref^ ? leaf \u00b6 [Source] Creates a command spec that can accept options and arguments, but not child commands. new ref leaf( name': String val, descr': String val = \"\", options': Array[OptionSpec val] box = call, args': Array[ArgSpec val] box = call) : CommandSpec ref^ ? Parameters \u00b6 name': String val descr': String val = \"\" options': Array [ OptionSpec val] box = call args': Array [ ArgSpec val] box = call Returns \u00b6 CommandSpec ref^ ? Public Functions \u00b6 add_command \u00b6 [Source] Adds an additional child command to this parent command. fun ref add_command( cmd: CommandSpec box) : None val ? Parameters \u00b6 cmd: CommandSpec box Returns \u00b6 None val ? add_help \u00b6 [Source] Adds a standard help option and, optionally command, to a root command. fun ref add_help( hname: String val = \"help\", descr': String val = \"\") : None val ? Parameters \u00b6 hname: String val = \"help\" descr': String val = \"\" Returns \u00b6 None val ? name \u00b6 [Source] Returns the name of this command. fun box name() : String val Returns \u00b6 String val descr \u00b6 [Source] Returns the description for this command. fun box descr() : String val Returns \u00b6 String val options \u00b6 [Source] Returns a map by name of the named options of this command. fun box options() : HashMap[String val, OptionSpec val, HashEq[String val] val] box Returns \u00b6 HashMap [ String val, OptionSpec val, HashEq [ String val] val] box commands \u00b6 [Source] Returns a map by name of the child commands of this command. fun box commands() : HashMap[String val, CommandSpec box, HashEq[String val] val] box Returns \u00b6 HashMap [ String val, CommandSpec box, HashEq [ String val] val] box args \u00b6 [Source] Returns an array of the positional arguments of this command. fun box args() : Array[ArgSpec val] box Returns \u00b6 Array [ ArgSpec val] box is_leaf \u00b6 [Source] fun box is_leaf() : Bool val Returns \u00b6 Bool val is_parent \u00b6 [Source] fun box is_parent() : Bool val Returns \u00b6 Bool val help_name \u00b6 [Source] Returns the name of the help command, which defaults to \"help\". fun box help_name() : String val Returns \u00b6 String val help_string \u00b6 [Source] Returns a formated help string for this command and all of its arguments. fun box help_string() : String val Returns \u00b6 String val Private Functions \u00b6 _assertName \u00b6 [Source] fun tag _assertName( nm: String val) : String val ? Parameters \u00b6 nm: String val Returns \u00b6 String val ?","title":"class CommandSpec"},{"location":"cli-CommandSpec/#commandspec","text":"[Source] CommandSpec describes the specification of a parent or leaf command. Each command has the following attributes: a name: a simple string token that identifies the command. a description: used in the syntax message. a map of options: the valid options for this command. an optional help option+command name for help parsing one of: a Map of child commands. an Array of arguments. class ref CommandSpec","title":"CommandSpec"},{"location":"cli-CommandSpec/#constructors","text":"","title":"Constructors"},{"location":"cli-CommandSpec/#parent","text":"[Source] Creates a command spec that can accept options and child commands, but not arguments. new ref parent( name': String val, descr': String val = \"\", options': Array[OptionSpec val] box = call, commands': Array[CommandSpec ref] box = call) : CommandSpec ref^ ?","title":"parent"},{"location":"cli-CommandSpec/#parameters","text":"name': String val descr': String val = \"\" options': Array [ OptionSpec val] box = call commands': Array [ CommandSpec ref] box = call","title":"Parameters"},{"location":"cli-CommandSpec/#returns","text":"CommandSpec ref^ ?","title":"Returns"},{"location":"cli-CommandSpec/#leaf","text":"[Source] Creates a command spec that can accept options and arguments, but not child commands. new ref leaf( name': String val, descr': String val = \"\", options': Array[OptionSpec val] box = call, args': Array[ArgSpec val] box = call) : CommandSpec ref^ ?","title":"leaf"},{"location":"cli-CommandSpec/#parameters_1","text":"name': String val descr': String val = \"\" options': Array [ OptionSpec val] box = call args': Array [ ArgSpec val] box = call","title":"Parameters"},{"location":"cli-CommandSpec/#returns_1","text":"CommandSpec ref^ ?","title":"Returns"},{"location":"cli-CommandSpec/#public-functions","text":"","title":"Public Functions"},{"location":"cli-CommandSpec/#add_command","text":"[Source] Adds an additional child command to this parent command. fun ref add_command( cmd: CommandSpec box) : None val ?","title":"add_command"},{"location":"cli-CommandSpec/#parameters_2","text":"cmd: CommandSpec box","title":"Parameters"},{"location":"cli-CommandSpec/#returns_2","text":"None val ?","title":"Returns"},{"location":"cli-CommandSpec/#add_help","text":"[Source] Adds a standard help option and, optionally command, to a root command. fun ref add_help( hname: String val = \"help\", descr': String val = \"\") : None val ?","title":"add_help"},{"location":"cli-CommandSpec/#parameters_3","text":"hname: String val = \"help\" descr': String val = \"\"","title":"Parameters"},{"location":"cli-CommandSpec/#returns_3","text":"None val ?","title":"Returns"},{"location":"cli-CommandSpec/#name","text":"[Source] Returns the name of this command. fun box name() : String val","title":"name"},{"location":"cli-CommandSpec/#returns_4","text":"String val","title":"Returns"},{"location":"cli-CommandSpec/#descr","text":"[Source] Returns the description for this command. fun box descr() : String val","title":"descr"},{"location":"cli-CommandSpec/#returns_5","text":"String val","title":"Returns"},{"location":"cli-CommandSpec/#options","text":"[Source] Returns a map by name of the named options of this command. fun box options() : HashMap[String val, OptionSpec val, HashEq[String val] val] box","title":"options"},{"location":"cli-CommandSpec/#returns_6","text":"HashMap [ String val, OptionSpec val, HashEq [ String val] val] box","title":"Returns"},{"location":"cli-CommandSpec/#commands","text":"[Source] Returns a map by name of the child commands of this command. fun box commands() : HashMap[String val, CommandSpec box, HashEq[String val] val] box","title":"commands"},{"location":"cli-CommandSpec/#returns_7","text":"HashMap [ String val, CommandSpec box, HashEq [ String val] val] box","title":"Returns"},{"location":"cli-CommandSpec/#args","text":"[Source] Returns an array of the positional arguments of this command. fun box args() : Array[ArgSpec val] box","title":"args"},{"location":"cli-CommandSpec/#returns_8","text":"Array [ ArgSpec val] box","title":"Returns"},{"location":"cli-CommandSpec/#is_leaf","text":"[Source] fun box is_leaf() : Bool val","title":"is_leaf"},{"location":"cli-CommandSpec/#returns_9","text":"Bool val","title":"Returns"},{"location":"cli-CommandSpec/#is_parent","text":"[Source] fun box is_parent() : Bool val","title":"is_parent"},{"location":"cli-CommandSpec/#returns_10","text":"Bool val","title":"Returns"},{"location":"cli-CommandSpec/#help_name","text":"[Source] Returns the name of the help command, which defaults to \"help\". fun box help_name() : String val","title":"help_name"},{"location":"cli-CommandSpec/#returns_11","text":"String val","title":"Returns"},{"location":"cli-CommandSpec/#help_string","text":"[Source] Returns a formated help string for this command and all of its arguments. fun box help_string() : String val","title":"help_string"},{"location":"cli-CommandSpec/#returns_12","text":"String val","title":"Returns"},{"location":"cli-CommandSpec/#private-functions","text":"","title":"Private Functions"},{"location":"cli-CommandSpec/#_assertname","text":"[Source] fun tag _assertName( nm: String val) : String val ?","title":"_assertName"},{"location":"cli-CommandSpec/#parameters_4","text":"nm: String val","title":"Parameters"},{"location":"cli-CommandSpec/#returns_13","text":"String val ?","title":"Returns"},{"location":"cli-EnvVars/","text":"EnvVars \u00b6 [Source] primitive val EnvVars Constructors \u00b6 create \u00b6 [Source] new val create() : EnvVars val^ Returns \u00b6 EnvVars val^ Public Functions \u00b6 apply \u00b6 [Source] Turns an array of strings that look like environment variables, ie. key=value, into a map of string to string. Can optionally filter for keys matching a 'prefix', and will squash resulting keys to lowercase iff 'squash' is true. So: = becomes: {KEY, VALUE} or {key, VALUE} fun box apply( envs: (Array[String val] box | None val), prefix: String val = \"\", squash: Bool val = false) : HashMap[String val, String val, HashEq[String val] val] val Parameters \u00b6 envs: ( Array [ String val] box | None val) prefix: String val = \"\" squash: Bool val = false Returns \u00b6 HashMap [ String val, String val, HashEq [ String val] val] val eq \u00b6 [Source] fun box eq( that: EnvVars val) : Bool val Parameters \u00b6 that: EnvVars val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: EnvVars val) : Bool val Parameters \u00b6 that: EnvVars val Returns \u00b6 Bool val","title":"primitive EnvVars"},{"location":"cli-EnvVars/#envvars","text":"[Source] primitive val EnvVars","title":"EnvVars"},{"location":"cli-EnvVars/#constructors","text":"","title":"Constructors"},{"location":"cli-EnvVars/#create","text":"[Source] new val create() : EnvVars val^","title":"create"},{"location":"cli-EnvVars/#returns","text":"EnvVars val^","title":"Returns"},{"location":"cli-EnvVars/#public-functions","text":"","title":"Public Functions"},{"location":"cli-EnvVars/#apply","text":"[Source] Turns an array of strings that look like environment variables, ie. key=value, into a map of string to string. Can optionally filter for keys matching a 'prefix', and will squash resulting keys to lowercase iff 'squash' is true. So: = becomes: {KEY, VALUE} or {key, VALUE} fun box apply( envs: (Array[String val] box | None val), prefix: String val = \"\", squash: Bool val = false) : HashMap[String val, String val, HashEq[String val] val] val","title":"apply"},{"location":"cli-EnvVars/#parameters","text":"envs: ( Array [ String val] box | None val) prefix: String val = \"\" squash: Bool val = false","title":"Parameters"},{"location":"cli-EnvVars/#returns_1","text":"HashMap [ String val, String val, HashEq [ String val] val] val","title":"Returns"},{"location":"cli-EnvVars/#eq","text":"[Source] fun box eq( that: EnvVars val) : Bool val","title":"eq"},{"location":"cli-EnvVars/#parameters_1","text":"that: EnvVars val","title":"Parameters"},{"location":"cli-EnvVars/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-EnvVars/#ne","text":"[Source] fun box ne( that: EnvVars val) : Bool val","title":"ne"},{"location":"cli-EnvVars/#parameters_2","text":"that: EnvVars val","title":"Parameters"},{"location":"cli-EnvVars/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-Help/","text":"Help \u00b6 [Source] primitive val Help Constructors \u00b6 create \u00b6 [Source] new val create() : Help val^ Returns \u00b6 Help val^ Public Functions \u00b6 general \u00b6 [Source] Creates a command help that can print a general program help message. fun box general( cs: CommandSpec box) : CommandHelp box Parameters \u00b6 cs: CommandSpec box Returns \u00b6 CommandHelp box for_command \u00b6 [Source] Creates a command help for a specific command that can print a detailed help message. fun box for_command( cs: CommandSpec box, argv: Array[String val] box) : (CommandHelp box | SyntaxError val) Parameters \u00b6 cs: CommandSpec box argv: Array [ String val] box Returns \u00b6 ( CommandHelp box | SyntaxError val) eq \u00b6 [Source] fun box eq( that: Help val) : Bool val Parameters \u00b6 that: Help val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Help val) : Bool val Parameters \u00b6 that: Help val Returns \u00b6 Bool val Private Functions \u00b6 _parse \u00b6 [Source] fun box _parse( cs: CommandSpec box, ch: CommandHelp box, argv: Array[String val] box) : (CommandHelp box | SyntaxError val) Parameters \u00b6 cs: CommandSpec box ch: CommandHelp box argv: Array [ String val] box Returns \u00b6 ( CommandHelp box | SyntaxError val)","title":"primitive Help"},{"location":"cli-Help/#help","text":"[Source] primitive val Help","title":"Help"},{"location":"cli-Help/#constructors","text":"","title":"Constructors"},{"location":"cli-Help/#create","text":"[Source] new val create() : Help val^","title":"create"},{"location":"cli-Help/#returns","text":"Help val^","title":"Returns"},{"location":"cli-Help/#public-functions","text":"","title":"Public Functions"},{"location":"cli-Help/#general","text":"[Source] Creates a command help that can print a general program help message. fun box general( cs: CommandSpec box) : CommandHelp box","title":"general"},{"location":"cli-Help/#parameters","text":"cs: CommandSpec box","title":"Parameters"},{"location":"cli-Help/#returns_1","text":"CommandHelp box","title":"Returns"},{"location":"cli-Help/#for_command","text":"[Source] Creates a command help for a specific command that can print a detailed help message. fun box for_command( cs: CommandSpec box, argv: Array[String val] box) : (CommandHelp box | SyntaxError val)","title":"for_command"},{"location":"cli-Help/#parameters_1","text":"cs: CommandSpec box argv: Array [ String val] box","title":"Parameters"},{"location":"cli-Help/#returns_2","text":"( CommandHelp box | SyntaxError val)","title":"Returns"},{"location":"cli-Help/#eq","text":"[Source] fun box eq( that: Help val) : Bool val","title":"eq"},{"location":"cli-Help/#parameters_2","text":"that: Help val","title":"Parameters"},{"location":"cli-Help/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-Help/#ne","text":"[Source] fun box ne( that: Help val) : Bool val","title":"ne"},{"location":"cli-Help/#parameters_3","text":"that: Help val","title":"Parameters"},{"location":"cli-Help/#returns_4","text":"Bool val","title":"Returns"},{"location":"cli-Help/#private-functions","text":"","title":"Private Functions"},{"location":"cli-Help/#_parse","text":"[Source] fun box _parse( cs: CommandSpec box, ch: CommandHelp box, argv: Array[String val] box) : (CommandHelp box | SyntaxError val)","title":"_parse"},{"location":"cli-Help/#parameters_4","text":"cs: CommandSpec box ch: CommandHelp box argv: Array [ String val] box","title":"Parameters"},{"location":"cli-Help/#returns_5","text":"( CommandHelp box | SyntaxError val)","title":"Returns"},{"location":"cli-Option/","text":"Option \u00b6 [Source] Option contains a spec and an effective value for a given option. class val Option Constructors \u00b6 create \u00b6 [Source] new val create( spec': OptionSpec val, value': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : Option val^ Parameters \u00b6 spec': OptionSpec val value': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 Option val^ Public Functions \u00b6 spec \u00b6 [Source] fun box spec() : OptionSpec val Returns \u00b6 OptionSpec val bool \u00b6 [Source] Returns the option value as a Bool, defaulting to false. fun box bool() : Bool val Returns \u00b6 Bool val string \u00b6 [Source] Returns the option value as a String, defaulting to empty. fun box string() : String val Returns \u00b6 String val i64 \u00b6 [Source] Returns the option value as an I64, defaulting to 0. fun box i64() : I64 val Returns \u00b6 I64 val u64 \u00b6 [Source] Returns the option value as an U64, defaulting to 0. fun box u64() : U64 val Returns \u00b6 U64 val f64 \u00b6 [Source] Returns the option value as an F64, defaulting to 0.0. fun box f64() : F64 val Returns \u00b6 F64 val string_seq \u00b6 [Source] Returns the option value as a ReadSeq[String], defaulting to empty. fun box string_seq() : ReadSeq[String val] val Returns \u00b6 ReadSeq [ String val] val deb_string \u00b6 [Source] fun box deb_string() : String val Returns \u00b6 String val Private Functions \u00b6 _append \u00b6 [Source] fun box _append( next: Option val) : Option val Parameters \u00b6 next: Option val Returns \u00b6 Option val","title":"class Option"},{"location":"cli-Option/#option","text":"[Source] Option contains a spec and an effective value for a given option. class val Option","title":"Option"},{"location":"cli-Option/#constructors","text":"","title":"Constructors"},{"location":"cli-Option/#create","text":"[Source] new val create( spec': OptionSpec val, value': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : Option val^","title":"create"},{"location":"cli-Option/#parameters","text":"spec': OptionSpec val value': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-Option/#returns","text":"Option val^","title":"Returns"},{"location":"cli-Option/#public-functions","text":"","title":"Public Functions"},{"location":"cli-Option/#spec","text":"[Source] fun box spec() : OptionSpec val","title":"spec"},{"location":"cli-Option/#returns_1","text":"OptionSpec val","title":"Returns"},{"location":"cli-Option/#bool","text":"[Source] Returns the option value as a Bool, defaulting to false. fun box bool() : Bool val","title":"bool"},{"location":"cli-Option/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-Option/#string","text":"[Source] Returns the option value as a String, defaulting to empty. fun box string() : String val","title":"string"},{"location":"cli-Option/#returns_3","text":"String val","title":"Returns"},{"location":"cli-Option/#i64","text":"[Source] Returns the option value as an I64, defaulting to 0. fun box i64() : I64 val","title":"i64"},{"location":"cli-Option/#returns_4","text":"I64 val","title":"Returns"},{"location":"cli-Option/#u64","text":"[Source] Returns the option value as an U64, defaulting to 0. fun box u64() : U64 val","title":"u64"},{"location":"cli-Option/#returns_5","text":"U64 val","title":"Returns"},{"location":"cli-Option/#f64","text":"[Source] Returns the option value as an F64, defaulting to 0.0. fun box f64() : F64 val","title":"f64"},{"location":"cli-Option/#returns_6","text":"F64 val","title":"Returns"},{"location":"cli-Option/#string_seq","text":"[Source] Returns the option value as a ReadSeq[String], defaulting to empty. fun box string_seq() : ReadSeq[String val] val","title":"string_seq"},{"location":"cli-Option/#returns_7","text":"ReadSeq [ String val] val","title":"Returns"},{"location":"cli-Option/#deb_string","text":"[Source] fun box deb_string() : String val","title":"deb_string"},{"location":"cli-Option/#returns_8","text":"String val","title":"Returns"},{"location":"cli-Option/#private-functions","text":"","title":"Private Functions"},{"location":"cli-Option/#_append","text":"[Source] fun box _append( next: Option val) : Option val","title":"_append"},{"location":"cli-Option/#parameters_1","text":"next: Option val","title":"Parameters"},{"location":"cli-Option/#returns_9","text":"Option val","title":"Returns"},{"location":"cli-OptionSpec/","text":"OptionSpec \u00b6 [Source] OptionSpec describes the specification of a named Option. They have a name, descr(iption), a short-name, a typ(e), and a default value when they are not required. Options can be placed anywhere before or after commands, and can be thought of as named arguments. class val OptionSpec Constructors \u00b6 bool \u00b6 [Source] Creates an Option with a Bool typed value that can be used like --opt or -O or --opt=true or -O=true to yield an option value like cmd.option(\"opt\").bool() == true . new val bool( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (Bool val | None val) = reference) : OptionSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( Bool val | None val) = reference Returns \u00b6 OptionSpec val^ string \u00b6 [Source] Creates an Option with a String typed value that can be used like --file=dir/filename or -F=dir/filename or -Fdir/filename to yield an option value like cmd.option(\"file\").string() == \"dir/filename\" . new val string( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (String val | None val) = reference) : OptionSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( String val | None val) = reference Returns \u00b6 OptionSpec val^ i64 \u00b6 [Source] Creates an Option with an I64 typed value that can be used like --count=42 -C=42 to yield an option value like cmd.option(\"count\").i64() == I64(42) . new val i64( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (I64 val | None val) = reference) : OptionSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( I64 val | None val) = reference Returns \u00b6 OptionSpec val^ u64 \u00b6 [Source] Creates an Option with an U64 typed value that can be used like --count=47 -C=47 to yield an option value like cmd.option(\"count\").u64() == U64(47) . new val u64( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (U64 val | None val) = reference) : OptionSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( U64 val | None val) = reference Returns \u00b6 OptionSpec val^ f64 \u00b6 [Source] Creates an Option with a F64 typed value that can be used like --ratio=1.039 or -R=1.039 to yield an option value like cmd.option(\"ratio\").f64() == F64(1.039) . new val f64( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (F64 val | None val) = reference) : OptionSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( F64 val | None val) = reference Returns \u00b6 OptionSpec val^ string_seq \u00b6 [Source] Creates an Option with a ReadSeq[String] typed value that can be used like --files=file1 --files=files2 --files=files2 to yield a sequence of three strings equivalent to cmd.option(\"ratio\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"] . new val string_seq( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference) : OptionSpec val^ Parameters \u00b6 name': String val descr': String val = \"\" short': ( U8 val | None val) = reference Returns \u00b6 OptionSpec val^ Public Functions \u00b6 name \u00b6 [Source] Returns the name of this option. fun box name() : String val Returns \u00b6 String val descr \u00b6 [Source] Returns the description for this option. fun box descr() : String val Returns \u00b6 String val required \u00b6 [Source] Returns true iff this option is required to be present in the command line. fun box required() : Bool val Returns \u00b6 Bool val help_string \u00b6 [Source] Returns a formated help string for this option. fun box help_string() : String val Returns \u00b6 String val deb_string \u00b6 [Source] fun box deb_string() : String val Returns \u00b6 String val Private Functions \u00b6 _init \u00b6 [Source] fun tag _init( typ': _ValueType val, default': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val)) : (_ValueType val , (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val) Parameters \u00b6 typ': _ValueType val default': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val) Returns \u00b6 ( _ValueType val , ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val) _typ_p \u00b6 [Source] fun box _typ_p() : _ValueType val Returns \u00b6 _ValueType val _default_p \u00b6 [Source] fun box _default_p() : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) _requires_arg \u00b6 [Source] fun box _requires_arg() : Bool val Returns \u00b6 Bool val _default_arg \u00b6 [Source] fun box _default_arg() : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) _has_short \u00b6 [Source] fun box _has_short( sh: U8 val) : Bool val Parameters \u00b6 sh: U8 val Returns \u00b6 Bool val","title":"class OptionSpec"},{"location":"cli-OptionSpec/#optionspec","text":"[Source] OptionSpec describes the specification of a named Option. They have a name, descr(iption), a short-name, a typ(e), and a default value when they are not required. Options can be placed anywhere before or after commands, and can be thought of as named arguments. class val OptionSpec","title":"OptionSpec"},{"location":"cli-OptionSpec/#constructors","text":"","title":"Constructors"},{"location":"cli-OptionSpec/#bool","text":"[Source] Creates an Option with a Bool typed value that can be used like --opt or -O or --opt=true or -O=true to yield an option value like cmd.option(\"opt\").bool() == true . new val bool( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (Bool val | None val) = reference) : OptionSpec val^","title":"bool"},{"location":"cli-OptionSpec/#parameters","text":"name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( Bool val | None val) = reference","title":"Parameters"},{"location":"cli-OptionSpec/#returns","text":"OptionSpec val^","title":"Returns"},{"location":"cli-OptionSpec/#string","text":"[Source] Creates an Option with a String typed value that can be used like --file=dir/filename or -F=dir/filename or -Fdir/filename to yield an option value like cmd.option(\"file\").string() == \"dir/filename\" . new val string( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (String val | None val) = reference) : OptionSpec val^","title":"string"},{"location":"cli-OptionSpec/#parameters_1","text":"name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( String val | None val) = reference","title":"Parameters"},{"location":"cli-OptionSpec/#returns_1","text":"OptionSpec val^","title":"Returns"},{"location":"cli-OptionSpec/#i64","text":"[Source] Creates an Option with an I64 typed value that can be used like --count=42 -C=42 to yield an option value like cmd.option(\"count\").i64() == I64(42) . new val i64( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (I64 val | None val) = reference) : OptionSpec val^","title":"i64"},{"location":"cli-OptionSpec/#parameters_2","text":"name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( I64 val | None val) = reference","title":"Parameters"},{"location":"cli-OptionSpec/#returns_2","text":"OptionSpec val^","title":"Returns"},{"location":"cli-OptionSpec/#u64","text":"[Source] Creates an Option with an U64 typed value that can be used like --count=47 -C=47 to yield an option value like cmd.option(\"count\").u64() == U64(47) . new val u64( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (U64 val | None val) = reference) : OptionSpec val^","title":"u64"},{"location":"cli-OptionSpec/#parameters_3","text":"name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( U64 val | None val) = reference","title":"Parameters"},{"location":"cli-OptionSpec/#returns_3","text":"OptionSpec val^","title":"Returns"},{"location":"cli-OptionSpec/#f64","text":"[Source] Creates an Option with a F64 typed value that can be used like --ratio=1.039 or -R=1.039 to yield an option value like cmd.option(\"ratio\").f64() == F64(1.039) . new val f64( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference, default': (F64 val | None val) = reference) : OptionSpec val^","title":"f64"},{"location":"cli-OptionSpec/#parameters_4","text":"name': String val descr': String val = \"\" short': ( U8 val | None val) = reference default': ( F64 val | None val) = reference","title":"Parameters"},{"location":"cli-OptionSpec/#returns_4","text":"OptionSpec val^","title":"Returns"},{"location":"cli-OptionSpec/#string_seq","text":"[Source] Creates an Option with a ReadSeq[String] typed value that can be used like --files=file1 --files=files2 --files=files2 to yield a sequence of three strings equivalent to cmd.option(\"ratio\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"] . new val string_seq( name': String val, descr': String val = \"\", short': (U8 val | None val) = reference) : OptionSpec val^","title":"string_seq"},{"location":"cli-OptionSpec/#parameters_5","text":"name': String val descr': String val = \"\" short': ( U8 val | None val) = reference","title":"Parameters"},{"location":"cli-OptionSpec/#returns_5","text":"OptionSpec val^","title":"Returns"},{"location":"cli-OptionSpec/#public-functions","text":"","title":"Public Functions"},{"location":"cli-OptionSpec/#name","text":"[Source] Returns the name of this option. fun box name() : String val","title":"name"},{"location":"cli-OptionSpec/#returns_6","text":"String val","title":"Returns"},{"location":"cli-OptionSpec/#descr","text":"[Source] Returns the description for this option. fun box descr() : String val","title":"descr"},{"location":"cli-OptionSpec/#returns_7","text":"String val","title":"Returns"},{"location":"cli-OptionSpec/#required","text":"[Source] Returns true iff this option is required to be present in the command line. fun box required() : Bool val","title":"required"},{"location":"cli-OptionSpec/#returns_8","text":"Bool val","title":"Returns"},{"location":"cli-OptionSpec/#help_string","text":"[Source] Returns a formated help string for this option. fun box help_string() : String val","title":"help_string"},{"location":"cli-OptionSpec/#returns_9","text":"String val","title":"Returns"},{"location":"cli-OptionSpec/#deb_string","text":"[Source] fun box deb_string() : String val","title":"deb_string"},{"location":"cli-OptionSpec/#returns_10","text":"String val","title":"Returns"},{"location":"cli-OptionSpec/#private-functions","text":"","title":"Private Functions"},{"location":"cli-OptionSpec/#_init","text":"[Source] fun tag _init( typ': _ValueType val, default': (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val)) : (_ValueType val , (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val)","title":"_init"},{"location":"cli-OptionSpec/#parameters_6","text":"typ': _ValueType val default': ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | None val)","title":"Parameters"},{"location":"cli-OptionSpec/#returns_11","text":"( _ValueType val , ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) , Bool val)","title":"Returns"},{"location":"cli-OptionSpec/#_typ_p","text":"[Source] fun box _typ_p() : _ValueType val","title":"_typ_p"},{"location":"cli-OptionSpec/#returns_12","text":"_ValueType val","title":"Returns"},{"location":"cli-OptionSpec/#_default_p","text":"[Source] fun box _default_p() : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"_default_p"},{"location":"cli-OptionSpec/#returns_13","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-OptionSpec/#_requires_arg","text":"[Source] fun box _requires_arg() : Bool val","title":"_requires_arg"},{"location":"cli-OptionSpec/#returns_14","text":"Bool val","title":"Returns"},{"location":"cli-OptionSpec/#_default_arg","text":"[Source] fun box _default_arg() : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"_default_arg"},{"location":"cli-OptionSpec/#returns_15","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-OptionSpec/#_has_short","text":"[Source] fun box _has_short( sh: U8 val) : Bool val","title":"_has_short"},{"location":"cli-OptionSpec/#parameters_7","text":"sh: U8 val","title":"Parameters"},{"location":"cli-OptionSpec/#returns_16","text":"Bool val","title":"Returns"},{"location":"cli-SyntaxError/","text":"SyntaxError \u00b6 [Source] SyntaxError summarizes a syntax error in a given parsed command line. class val SyntaxError Constructors \u00b6 create \u00b6 [Source] new val create( token': String val, msg': String val) : SyntaxError val^ Parameters \u00b6 token': String val msg': String val Returns \u00b6 SyntaxError val^ Public Functions \u00b6 token \u00b6 [Source] fun box token() : String val Returns \u00b6 String val string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val","title":"class SyntaxError"},{"location":"cli-SyntaxError/#syntaxerror","text":"[Source] SyntaxError summarizes a syntax error in a given parsed command line. class val SyntaxError","title":"SyntaxError"},{"location":"cli-SyntaxError/#constructors","text":"","title":"Constructors"},{"location":"cli-SyntaxError/#create","text":"[Source] new val create( token': String val, msg': String val) : SyntaxError val^","title":"create"},{"location":"cli-SyntaxError/#parameters","text":"token': String val msg': String val","title":"Parameters"},{"location":"cli-SyntaxError/#returns","text":"SyntaxError val^","title":"Returns"},{"location":"cli-SyntaxError/#public-functions","text":"","title":"Public Functions"},{"location":"cli-SyntaxError/#token","text":"[Source] fun box token() : String val","title":"token"},{"location":"cli-SyntaxError/#returns_1","text":"String val","title":"Returns"},{"location":"cli-SyntaxError/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-SyntaxError/#returns_2","text":"String val","title":"Returns"},{"location":"cli-_ArgParser/","text":"_ArgParser \u00b6 [Source] primitive val _ArgParser Constructors \u00b6 create \u00b6 [Source] new val create() : _ArgParser val^ Returns \u00b6 _ArgParser val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( spec: ArgSpec val, arg: String val) : (Arg val | SyntaxError val) Parameters \u00b6 spec: ArgSpec val arg: String val Returns \u00b6 ( Arg val | SyntaxError val) eq \u00b6 [Source] fun box eq( that: _ArgParser val) : Bool val Parameters \u00b6 that: _ArgParser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ArgParser val) : Bool val Parameters \u00b6 that: _ArgParser val Returns \u00b6 Bool val","title":"primitive _ArgParser"},{"location":"cli-_ArgParser/#_argparser","text":"[Source] primitive val _ArgParser","title":"_ArgParser"},{"location":"cli-_ArgParser/#constructors","text":"","title":"Constructors"},{"location":"cli-_ArgParser/#create","text":"[Source] new val create() : _ArgParser val^","title":"create"},{"location":"cli-_ArgParser/#returns","text":"_ArgParser val^","title":"Returns"},{"location":"cli-_ArgParser/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_ArgParser/#parse","text":"[Source] fun box parse( spec: ArgSpec val, arg: String val) : (Arg val | SyntaxError val)","title":"parse"},{"location":"cli-_ArgParser/#parameters","text":"spec: ArgSpec val arg: String val","title":"Parameters"},{"location":"cli-_ArgParser/#returns_1","text":"( Arg val | SyntaxError val)","title":"Returns"},{"location":"cli-_ArgParser/#eq","text":"[Source] fun box eq( that: _ArgParser val) : Bool val","title":"eq"},{"location":"cli-_ArgParser/#parameters_1","text":"that: _ArgParser val","title":"Parameters"},{"location":"cli-_ArgParser/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-_ArgParser/#ne","text":"[Source] fun box ne( that: _ArgParser val) : Bool val","title":"ne"},{"location":"cli-_ArgParser/#parameters_2","text":"that: _ArgParser val","title":"Parameters"},{"location":"cli-_ArgParser/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_BoolType/","text":"_BoolType \u00b6 [Source] primitive val _BoolType is _ValueType val Implements \u00b6 _ValueType val Constructors \u00b6 create \u00b6 [Source] new val create() : _BoolType val^ Returns \u00b6 _BoolType val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) eq \u00b6 [Source] fun box eq( that: _BoolType val) : Bool val Parameters \u00b6 that: _BoolType val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _BoolType val) : Bool val Parameters \u00b6 that: _BoolType val Returns \u00b6 Bool val","title":"primitive _BoolType"},{"location":"cli-_BoolType/#_booltype","text":"[Source] primitive val _BoolType is _ValueType val","title":"_BoolType"},{"location":"cli-_BoolType/#implements","text":"_ValueType val","title":"Implements"},{"location":"cli-_BoolType/#constructors","text":"","title":"Constructors"},{"location":"cli-_BoolType/#create","text":"[Source] new val create() : _BoolType val^","title":"create"},{"location":"cli-_BoolType/#returns","text":"_BoolType val^","title":"Returns"},{"location":"cli-_BoolType/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_BoolType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_BoolType/#returns_1","text":"String val","title":"Returns"},{"location":"cli-_BoolType/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"value_of"},{"location":"cli-_BoolType/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_BoolType/#returns_2","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"Returns"},{"location":"cli-_BoolType/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_BoolType/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_BoolType/#append","text":"[Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_BoolType/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_BoolType/#returns_4","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_BoolType/#eq","text":"[Source] fun box eq( that: _BoolType val) : Bool val","title":"eq"},{"location":"cli-_BoolType/#parameters_2","text":"that: _BoolType val","title":"Parameters"},{"location":"cli-_BoolType/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_BoolType/#ne","text":"[Source] fun box ne( that: _BoolType val) : Bool val","title":"ne"},{"location":"cli-_BoolType/#parameters_3","text":"that: _BoolType val","title":"Parameters"},{"location":"cli-_BoolType/#returns_6","text":"Bool val","title":"Returns"},{"location":"cli-_Columns/","text":"_Columns \u00b6 [Source] primitive val _Columns Constructors \u00b6 create \u00b6 [Source] new val create() : _Columns val^ Returns \u00b6 _Columns val^ Public Functions \u00b6 indent \u00b6 [Source] fun box indent( w: Writer ref, n: USize val) : None val Parameters \u00b6 w: Writer ref n: USize val Returns \u00b6 None val write \u00b6 [Source] fun box write( w: Writer ref, cols: Array[(USize val , String val , String val)] ref) : None val Parameters \u00b6 w: Writer ref cols: Array [( USize val , String val , String val)] ref Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: _Columns val) : Bool val Parameters \u00b6 that: _Columns val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _Columns val) : Bool val Parameters \u00b6 that: _Columns val Returns \u00b6 Bool val","title":"primitive _Columns"},{"location":"cli-_Columns/#_columns","text":"[Source] primitive val _Columns","title":"_Columns"},{"location":"cli-_Columns/#constructors","text":"","title":"Constructors"},{"location":"cli-_Columns/#create","text":"[Source] new val create() : _Columns val^","title":"create"},{"location":"cli-_Columns/#returns","text":"_Columns val^","title":"Returns"},{"location":"cli-_Columns/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_Columns/#indent","text":"[Source] fun box indent( w: Writer ref, n: USize val) : None val","title":"indent"},{"location":"cli-_Columns/#parameters","text":"w: Writer ref n: USize val","title":"Parameters"},{"location":"cli-_Columns/#returns_1","text":"None val","title":"Returns"},{"location":"cli-_Columns/#write","text":"[Source] fun box write( w: Writer ref, cols: Array[(USize val , String val , String val)] ref) : None val","title":"write"},{"location":"cli-_Columns/#parameters_1","text":"w: Writer ref cols: Array [( USize val , String val , String val)] ref","title":"Parameters"},{"location":"cli-_Columns/#returns_2","text":"None val","title":"Returns"},{"location":"cli-_Columns/#eq","text":"[Source] fun box eq( that: _Columns val) : Bool val","title":"eq"},{"location":"cli-_Columns/#parameters_2","text":"that: _Columns val","title":"Parameters"},{"location":"cli-_Columns/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_Columns/#ne","text":"[Source] fun box ne( that: _Columns val) : Bool val","title":"ne"},{"location":"cli-_Columns/#parameters_3","text":"that: _Columns val","title":"Parameters"},{"location":"cli-_Columns/#returns_4","text":"Bool val","title":"Returns"},{"location":"cli-_CommandSpecLeaf/","text":"_CommandSpecLeaf \u00b6 [Source] primitive val _CommandSpecLeaf Constructors \u00b6 create \u00b6 [Source] new val create() : _CommandSpecLeaf val^ Returns \u00b6 _CommandSpecLeaf val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _CommandSpecLeaf val) : Bool val Parameters \u00b6 that: _CommandSpecLeaf val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _CommandSpecLeaf val) : Bool val Parameters \u00b6 that: _CommandSpecLeaf val Returns \u00b6 Bool val","title":"primitive _CommandSpecLeaf"},{"location":"cli-_CommandSpecLeaf/#_commandspecleaf","text":"[Source] primitive val _CommandSpecLeaf","title":"_CommandSpecLeaf"},{"location":"cli-_CommandSpecLeaf/#constructors","text":"","title":"Constructors"},{"location":"cli-_CommandSpecLeaf/#create","text":"[Source] new val create() : _CommandSpecLeaf val^","title":"create"},{"location":"cli-_CommandSpecLeaf/#returns","text":"_CommandSpecLeaf val^","title":"Returns"},{"location":"cli-_CommandSpecLeaf/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_CommandSpecLeaf/#eq","text":"[Source] fun box eq( that: _CommandSpecLeaf val) : Bool val","title":"eq"},{"location":"cli-_CommandSpecLeaf/#parameters","text":"that: _CommandSpecLeaf val","title":"Parameters"},{"location":"cli-_CommandSpecLeaf/#returns_1","text":"Bool val","title":"Returns"},{"location":"cli-_CommandSpecLeaf/#ne","text":"[Source] fun box ne( that: _CommandSpecLeaf val) : Bool val","title":"ne"},{"location":"cli-_CommandSpecLeaf/#parameters_1","text":"that: _CommandSpecLeaf val","title":"Parameters"},{"location":"cli-_CommandSpecLeaf/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-_CommandSpecParent/","text":"_CommandSpecParent \u00b6 [Source] primitive val _CommandSpecParent Constructors \u00b6 create \u00b6 [Source] new val create() : _CommandSpecParent val^ Returns \u00b6 _CommandSpecParent val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _CommandSpecParent val) : Bool val Parameters \u00b6 that: _CommandSpecParent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _CommandSpecParent val) : Bool val Parameters \u00b6 that: _CommandSpecParent val Returns \u00b6 Bool val","title":"primitive _CommandSpecParent"},{"location":"cli-_CommandSpecParent/#_commandspecparent","text":"[Source] primitive val _CommandSpecParent","title":"_CommandSpecParent"},{"location":"cli-_CommandSpecParent/#constructors","text":"","title":"Constructors"},{"location":"cli-_CommandSpecParent/#create","text":"[Source] new val create() : _CommandSpecParent val^","title":"create"},{"location":"cli-_CommandSpecParent/#returns","text":"_CommandSpecParent val^","title":"Returns"},{"location":"cli-_CommandSpecParent/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_CommandSpecParent/#eq","text":"[Source] fun box eq( that: _CommandSpecParent val) : Bool val","title":"eq"},{"location":"cli-_CommandSpecParent/#parameters","text":"that: _CommandSpecParent val","title":"Parameters"},{"location":"cli-_CommandSpecParent/#returns_1","text":"Bool val","title":"Returns"},{"location":"cli-_CommandSpecParent/#ne","text":"[Source] fun box ne( that: _CommandSpecParent val) : Bool val","title":"ne"},{"location":"cli-_CommandSpecParent/#parameters_1","text":"that: _CommandSpecParent val","title":"Parameters"},{"location":"cli-_CommandSpecParent/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-_CommandSpecType/","text":"_CommandSpecType \u00b6 [Source] type _CommandSpecType is (_CommandSpecLeaf val | _CommandSpecParent val) Type Alias For \u00b6 ( _CommandSpecLeaf val | _CommandSpecParent val)","title":"type _CommandSpecType"},{"location":"cli-_CommandSpecType/#_commandspectype","text":"[Source] type _CommandSpecType is (_CommandSpecLeaf val | _CommandSpecParent val)","title":"_CommandSpecType"},{"location":"cli-_CommandSpecType/#type-alias-for","text":"( _CommandSpecLeaf val | _CommandSpecParent val)","title":"Type Alias For"},{"location":"cli-_F64Type/","text":"_F64Type \u00b6 [Source] primitive val _F64Type is _ValueType val Implements \u00b6 _ValueType val Constructors \u00b6 create \u00b6 [Source] new val create() : _F64Type val^ Returns \u00b6 _F64Type val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) eq \u00b6 [Source] fun box eq( that: _F64Type val) : Bool val Parameters \u00b6 that: _F64Type val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _F64Type val) : Bool val Parameters \u00b6 that: _F64Type val Returns \u00b6 Bool val","title":"primitive _F64Type"},{"location":"cli-_F64Type/#_f64type","text":"[Source] primitive val _F64Type is _ValueType val","title":"_F64Type"},{"location":"cli-_F64Type/#implements","text":"_ValueType val","title":"Implements"},{"location":"cli-_F64Type/#constructors","text":"","title":"Constructors"},{"location":"cli-_F64Type/#create","text":"[Source] new val create() : _F64Type val^","title":"create"},{"location":"cli-_F64Type/#returns","text":"_F64Type val^","title":"Returns"},{"location":"cli-_F64Type/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_F64Type/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_F64Type/#returns_1","text":"String val","title":"Returns"},{"location":"cli-_F64Type/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"value_of"},{"location":"cli-_F64Type/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_F64Type/#returns_2","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"Returns"},{"location":"cli-_F64Type/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_F64Type/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_F64Type/#append","text":"[Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_F64Type/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_F64Type/#returns_4","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_F64Type/#eq","text":"[Source] fun box eq( that: _F64Type val) : Bool val","title":"eq"},{"location":"cli-_F64Type/#parameters_2","text":"that: _F64Type val","title":"Parameters"},{"location":"cli-_F64Type/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_F64Type/#ne","text":"[Source] fun box ne( that: _F64Type val) : Bool val","title":"ne"},{"location":"cli-_F64Type/#parameters_3","text":"that: _F64Type val","title":"Parameters"},{"location":"cli-_F64Type/#returns_6","text":"Bool val","title":"Returns"},{"location":"cli-_Fixtures/","text":"_Fixtures \u00b6 [Source] primitive val _Fixtures Constructors \u00b6 create \u00b6 [Source] new val create() : _Fixtures val^ Returns \u00b6 _Fixtures val^ Public Functions \u00b6 bools_cli_spec \u00b6 [Source] Builds and returns the spec for a CLI with four bool options. fun box bools_cli_spec() : CommandSpec box ? Returns \u00b6 CommandSpec box ? simple_cli_spec \u00b6 [Source] Builds and returns the spec for a CLI with short options of each type. fun box simple_cli_spec() : CommandSpec box ? Returns \u00b6 CommandSpec box ? chat_cli_spec \u00b6 [Source] Builds and returns the spec for a sample chat client's CLI. fun box chat_cli_spec() : CommandSpec box ? Returns \u00b6 CommandSpec box ? eq \u00b6 [Source] fun box eq( that: _Fixtures val) : Bool val Parameters \u00b6 that: _Fixtures val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _Fixtures val) : Bool val Parameters \u00b6 that: _Fixtures val Returns \u00b6 Bool val","title":"primitive _Fixtures"},{"location":"cli-_Fixtures/#_fixtures","text":"[Source] primitive val _Fixtures","title":"_Fixtures"},{"location":"cli-_Fixtures/#constructors","text":"","title":"Constructors"},{"location":"cli-_Fixtures/#create","text":"[Source] new val create() : _Fixtures val^","title":"create"},{"location":"cli-_Fixtures/#returns","text":"_Fixtures val^","title":"Returns"},{"location":"cli-_Fixtures/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_Fixtures/#bools_cli_spec","text":"[Source] Builds and returns the spec for a CLI with four bool options. fun box bools_cli_spec() : CommandSpec box ?","title":"bools_cli_spec"},{"location":"cli-_Fixtures/#returns_1","text":"CommandSpec box ?","title":"Returns"},{"location":"cli-_Fixtures/#simple_cli_spec","text":"[Source] Builds and returns the spec for a CLI with short options of each type. fun box simple_cli_spec() : CommandSpec box ?","title":"simple_cli_spec"},{"location":"cli-_Fixtures/#returns_2","text":"CommandSpec box ?","title":"Returns"},{"location":"cli-_Fixtures/#chat_cli_spec","text":"[Source] Builds and returns the spec for a sample chat client's CLI. fun box chat_cli_spec() : CommandSpec box ?","title":"chat_cli_spec"},{"location":"cli-_Fixtures/#returns_3","text":"CommandSpec box ?","title":"Returns"},{"location":"cli-_Fixtures/#eq","text":"[Source] fun box eq( that: _Fixtures val) : Bool val","title":"eq"},{"location":"cli-_Fixtures/#parameters","text":"that: _Fixtures val","title":"Parameters"},{"location":"cli-_Fixtures/#returns_4","text":"Bool val","title":"Returns"},{"location":"cli-_Fixtures/#ne","text":"[Source] fun box ne( that: _Fixtures val) : Bool val","title":"ne"},{"location":"cli-_Fixtures/#parameters_1","text":"that: _Fixtures val","title":"Parameters"},{"location":"cli-_Fixtures/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_I64Type/","text":"_I64Type \u00b6 [Source] primitive val _I64Type is _ValueType val Implements \u00b6 _ValueType val Constructors \u00b6 create \u00b6 [Source] new val create() : _I64Type val^ Returns \u00b6 _I64Type val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) eq \u00b6 [Source] fun box eq( that: _I64Type val) : Bool val Parameters \u00b6 that: _I64Type val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _I64Type val) : Bool val Parameters \u00b6 that: _I64Type val Returns \u00b6 Bool val","title":"primitive _I64Type"},{"location":"cli-_I64Type/#_i64type","text":"[Source] primitive val _I64Type is _ValueType val","title":"_I64Type"},{"location":"cli-_I64Type/#implements","text":"_ValueType val","title":"Implements"},{"location":"cli-_I64Type/#constructors","text":"","title":"Constructors"},{"location":"cli-_I64Type/#create","text":"[Source] new val create() : _I64Type val^","title":"create"},{"location":"cli-_I64Type/#returns","text":"_I64Type val^","title":"Returns"},{"location":"cli-_I64Type/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_I64Type/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_I64Type/#returns_1","text":"String val","title":"Returns"},{"location":"cli-_I64Type/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"value_of"},{"location":"cli-_I64Type/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_I64Type/#returns_2","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"Returns"},{"location":"cli-_I64Type/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_I64Type/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_I64Type/#append","text":"[Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_I64Type/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_I64Type/#returns_4","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_I64Type/#eq","text":"[Source] fun box eq( that: _I64Type val) : Bool val","title":"eq"},{"location":"cli-_I64Type/#parameters_2","text":"that: _I64Type val","title":"Parameters"},{"location":"cli-_I64Type/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_I64Type/#ne","text":"[Source] fun box ne( that: _I64Type val) : Bool val","title":"ne"},{"location":"cli-_I64Type/#parameters_3","text":"that: _I64Type val","title":"Parameters"},{"location":"cli-_I64Type/#returns_6","text":"Bool val","title":"Returns"},{"location":"cli-_OptionParser/","text":"_OptionParser \u00b6 [Source] primitive val _OptionParser Constructors \u00b6 create \u00b6 [Source] new val create() : _OptionParser val^ Returns \u00b6 _OptionParser val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( spec: OptionSpec val, targ: (String val | None val), args: Array[String val] ref) : (Option val | SyntaxError val) Parameters \u00b6 spec: OptionSpec val targ: ( String val | None val) args: Array [ String val] ref Returns \u00b6 ( Option val | SyntaxError val) eq \u00b6 [Source] fun box eq( that: _OptionParser val) : Bool val Parameters \u00b6 that: _OptionParser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _OptionParser val) : Bool val Parameters \u00b6 that: _OptionParser val Returns \u00b6 Bool val","title":"primitive _OptionParser"},{"location":"cli-_OptionParser/#_optionparser","text":"[Source] primitive val _OptionParser","title":"_OptionParser"},{"location":"cli-_OptionParser/#constructors","text":"","title":"Constructors"},{"location":"cli-_OptionParser/#create","text":"[Source] new val create() : _OptionParser val^","title":"create"},{"location":"cli-_OptionParser/#returns","text":"_OptionParser val^","title":"Returns"},{"location":"cli-_OptionParser/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_OptionParser/#parse","text":"[Source] fun box parse( spec: OptionSpec val, targ: (String val | None val), args: Array[String val] ref) : (Option val | SyntaxError val)","title":"parse"},{"location":"cli-_OptionParser/#parameters","text":"spec: OptionSpec val targ: ( String val | None val) args: Array [ String val] ref","title":"Parameters"},{"location":"cli-_OptionParser/#returns_1","text":"( Option val | SyntaxError val)","title":"Returns"},{"location":"cli-_OptionParser/#eq","text":"[Source] fun box eq( that: _OptionParser val) : Bool val","title":"eq"},{"location":"cli-_OptionParser/#parameters_1","text":"that: _OptionParser val","title":"Parameters"},{"location":"cli-_OptionParser/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-_OptionParser/#ne","text":"[Source] fun box ne( that: _OptionParser val) : Bool val","title":"ne"},{"location":"cli-_OptionParser/#parameters_2","text":"that: _OptionParser val","title":"Parameters"},{"location":"cli-_OptionParser/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_StringSeq/","text":"_StringSeq \u00b6 [Source] _StringSeq is a wrapper / helper class for working with String sequence values while parsing. It assists in collecting the strings as they are parsed, and producing a ReadSeq[String] as a result. class ref _StringSeq is ReadSeq[String val] box Implements \u00b6 ReadSeq [ String val] box Constructors \u00b6 empty \u00b6 [Source] new val empty() : _StringSeq val^ Returns \u00b6 _StringSeq val^ from_string \u00b6 [Source] new val from_string( s: String val) : _StringSeq val^ Parameters \u00b6 s: String val Returns \u00b6 _StringSeq val^ from_concat \u00b6 [Source] new val from_concat( ss0: _StringSeq val, ss1: _StringSeq val) : _StringSeq val^ Parameters \u00b6 ss0: _StringSeq val ss1: _StringSeq val Returns \u00b6 _StringSeq val^ Public fields \u00b6 let strings: Vec [ String val] val \u00b6 [Source] Public Functions \u00b6 string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ size \u00b6 [Source] fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] fun box apply( i: USize val) : String val ? Parameters \u00b6 i: USize val Returns \u00b6 String val ? values \u00b6 [Source] fun box values() : Iterator[String val] ref^ Returns \u00b6 Iterator [ String val] ref^","title":"class _StringSeq"},{"location":"cli-_StringSeq/#_stringseq","text":"[Source] _StringSeq is a wrapper / helper class for working with String sequence values while parsing. It assists in collecting the strings as they are parsed, and producing a ReadSeq[String] as a result. class ref _StringSeq is ReadSeq[String val] box","title":"_StringSeq"},{"location":"cli-_StringSeq/#implements","text":"ReadSeq [ String val] box","title":"Implements"},{"location":"cli-_StringSeq/#constructors","text":"","title":"Constructors"},{"location":"cli-_StringSeq/#empty","text":"[Source] new val empty() : _StringSeq val^","title":"empty"},{"location":"cli-_StringSeq/#returns","text":"_StringSeq val^","title":"Returns"},{"location":"cli-_StringSeq/#from_string","text":"[Source] new val from_string( s: String val) : _StringSeq val^","title":"from_string"},{"location":"cli-_StringSeq/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_StringSeq/#returns_1","text":"_StringSeq val^","title":"Returns"},{"location":"cli-_StringSeq/#from_concat","text":"[Source] new val from_concat( ss0: _StringSeq val, ss1: _StringSeq val) : _StringSeq val^","title":"from_concat"},{"location":"cli-_StringSeq/#parameters_1","text":"ss0: _StringSeq val ss1: _StringSeq val","title":"Parameters"},{"location":"cli-_StringSeq/#returns_2","text":"_StringSeq val^","title":"Returns"},{"location":"cli-_StringSeq/#public-fields","text":"","title":"Public fields"},{"location":"cli-_StringSeq/#let-strings-vec91string-val93-val","text":"[Source]","title":"let strings: Vec[String val] val"},{"location":"cli-_StringSeq/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_StringSeq/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"cli-_StringSeq/#returns_3","text":"String iso^","title":"Returns"},{"location":"cli-_StringSeq/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"cli-_StringSeq/#returns_4","text":"USize val","title":"Returns"},{"location":"cli-_StringSeq/#apply","text":"[Source] fun box apply( i: USize val) : String val ?","title":"apply"},{"location":"cli-_StringSeq/#parameters_2","text":"i: USize val","title":"Parameters"},{"location":"cli-_StringSeq/#returns_5","text":"String val ?","title":"Returns"},{"location":"cli-_StringSeq/#values","text":"[Source] fun box values() : Iterator[String val] ref^","title":"values"},{"location":"cli-_StringSeq/#returns_6","text":"Iterator [ String val] ref^","title":"Returns"},{"location":"cli-_StringSeqType/","text":"_StringSeqType \u00b6 [Source] primitive val _StringSeqType is _ValueType val Implements \u00b6 _ValueType val Constructors \u00b6 create \u00b6 [Source] new val create() : _StringSeqType val^ Returns \u00b6 _StringSeqType val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] When is_seq() returns true, append() is called during parsing to append a new parsed value onto an existing value. fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) eq \u00b6 [Source] fun box eq( that: _StringSeqType val) : Bool val Parameters \u00b6 that: _StringSeqType val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _StringSeqType val) : Bool val Parameters \u00b6 that: _StringSeqType val Returns \u00b6 Bool val","title":"primitive _StringSeqType"},{"location":"cli-_StringSeqType/#_stringseqtype","text":"[Source] primitive val _StringSeqType is _ValueType val","title":"_StringSeqType"},{"location":"cli-_StringSeqType/#implements","text":"_ValueType val","title":"Implements"},{"location":"cli-_StringSeqType/#constructors","text":"","title":"Constructors"},{"location":"cli-_StringSeqType/#create","text":"[Source] new val create() : _StringSeqType val^","title":"create"},{"location":"cli-_StringSeqType/#returns","text":"_StringSeqType val^","title":"Returns"},{"location":"cli-_StringSeqType/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_StringSeqType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_StringSeqType/#returns_1","text":"String val","title":"Returns"},{"location":"cli-_StringSeqType/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"value_of"},{"location":"cli-_StringSeqType/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_StringSeqType/#returns_2","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_StringSeqType/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_StringSeqType/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_StringSeqType/#append","text":"[Source] When is_seq() returns true, append() is called during parsing to append a new parsed value onto an existing value. fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_StringSeqType/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_StringSeqType/#returns_4","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_StringSeqType/#eq","text":"[Source] fun box eq( that: _StringSeqType val) : Bool val","title":"eq"},{"location":"cli-_StringSeqType/#parameters_2","text":"that: _StringSeqType val","title":"Parameters"},{"location":"cli-_StringSeqType/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_StringSeqType/#ne","text":"[Source] fun box ne( that: _StringSeqType val) : Bool val","title":"ne"},{"location":"cli-_StringSeqType/#parameters_3","text":"that: _StringSeqType val","title":"Parameters"},{"location":"cli-_StringSeqType/#returns_6","text":"Bool val","title":"Returns"},{"location":"cli-_StringType/","text":"_StringType \u00b6 [Source] primitive val _StringType is _ValueType val Implements \u00b6 _ValueType val Constructors \u00b6 create \u00b6 [Source] new val create() : _StringType val^ Returns \u00b6 _StringType val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) eq \u00b6 [Source] fun box eq( that: _StringType val) : Bool val Parameters \u00b6 that: _StringType val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _StringType val) : Bool val Parameters \u00b6 that: _StringType val Returns \u00b6 Bool val","title":"primitive _StringType"},{"location":"cli-_StringType/#_stringtype","text":"[Source] primitive val _StringType is _ValueType val","title":"_StringType"},{"location":"cli-_StringType/#implements","text":"_ValueType val","title":"Implements"},{"location":"cli-_StringType/#constructors","text":"","title":"Constructors"},{"location":"cli-_StringType/#create","text":"[Source] new val create() : _StringType val^","title":"create"},{"location":"cli-_StringType/#returns","text":"_StringType val^","title":"Returns"},{"location":"cli-_StringType/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_StringType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_StringType/#returns_1","text":"String val","title":"Returns"},{"location":"cli-_StringType/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"value_of"},{"location":"cli-_StringType/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_StringType/#returns_2","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_StringType/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_StringType/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_StringType/#append","text":"[Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_StringType/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_StringType/#returns_4","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_StringType/#eq","text":"[Source] fun box eq( that: _StringType val) : Bool val","title":"eq"},{"location":"cli-_StringType/#parameters_2","text":"that: _StringType val","title":"Parameters"},{"location":"cli-_StringType/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_StringType/#ne","text":"[Source] fun box ne( that: _StringType val) : Bool val","title":"ne"},{"location":"cli-_StringType/#parameters_3","text":"that: _StringType val","title":"Parameters"},{"location":"cli-_StringType/#returns_6","text":"Bool val","title":"Returns"},{"location":"cli-_U64Type/","text":"_U64Type \u00b6 [Source] primitive val _U64Type is _ValueType val Implements \u00b6 _ValueType val Constructors \u00b6 create \u00b6 [Source] new val create() : _U64Type val^ Returns \u00b6 _U64Type val^ Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) eq \u00b6 [Source] fun box eq( that: _U64Type val) : Bool val Parameters \u00b6 that: _U64Type val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _U64Type val) : Bool val Parameters \u00b6 that: _U64Type val Returns \u00b6 Bool val","title":"primitive _U64Type"},{"location":"cli-_U64Type/#_u64type","text":"[Source] primitive val _U64Type is _ValueType val","title":"_U64Type"},{"location":"cli-_U64Type/#implements","text":"_ValueType val","title":"Implements"},{"location":"cli-_U64Type/#constructors","text":"","title":"Constructors"},{"location":"cli-_U64Type/#create","text":"[Source] new val create() : _U64Type val^","title":"create"},{"location":"cli-_U64Type/#returns","text":"_U64Type val^","title":"Returns"},{"location":"cli-_U64Type/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_U64Type/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_U64Type/#returns_1","text":"String val","title":"Returns"},{"location":"cli-_U64Type/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"value_of"},{"location":"cli-_U64Type/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_U64Type/#returns_2","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"Returns"},{"location":"cli-_U64Type/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_U64Type/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_U64Type/#append","text":"[Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_U64Type/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_U64Type/#returns_4","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"cli-_U64Type/#eq","text":"[Source] fun box eq( that: _U64Type val) : Bool val","title":"eq"},{"location":"cli-_U64Type/#parameters_2","text":"that: _U64Type val","title":"Parameters"},{"location":"cli-_U64Type/#returns_5","text":"Bool val","title":"Returns"},{"location":"cli-_U64Type/#ne","text":"[Source] fun box ne( that: _U64Type val) : Bool val","title":"ne"},{"location":"cli-_U64Type/#parameters_3","text":"that: _U64Type val","title":"Parameters"},{"location":"cli-_U64Type/#returns_6","text":"Bool val","title":"Returns"},{"location":"cli-_Value/","text":"_Value \u00b6 [Source] type _Value is (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Type Alias For \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"type _Value"},{"location":"cli-_Value/#_value","text":"[Source] type _Value is (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"_Value"},{"location":"cli-_Value/#type-alias-for","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Type Alias For"},{"location":"cli-_ValueParser/","text":"_ValueParser \u00b6 [Source] primitive val _ValueParser Constructors \u00b6 create \u00b6 [Source] new val create() : _ValueParser val^ Returns \u00b6 _ValueParser val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( typ: _ValueType val, arg: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | SyntaxError val) Parameters \u00b6 typ: _ValueType val arg: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | SyntaxError val) eq \u00b6 [Source] fun box eq( that: _ValueParser val) : Bool val Parameters \u00b6 that: _ValueParser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ValueParser val) : Bool val Parameters \u00b6 that: _ValueParser val Returns \u00b6 Bool val","title":"primitive _ValueParser"},{"location":"cli-_ValueParser/#_valueparser","text":"[Source] primitive val _ValueParser","title":"_ValueParser"},{"location":"cli-_ValueParser/#constructors","text":"","title":"Constructors"},{"location":"cli-_ValueParser/#create","text":"[Source] new val create() : _ValueParser val^","title":"create"},{"location":"cli-_ValueParser/#returns","text":"_ValueParser val^","title":"Returns"},{"location":"cli-_ValueParser/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_ValueParser/#parse","text":"[Source] fun box parse( typ: _ValueType val, arg: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | SyntaxError val)","title":"parse"},{"location":"cli-_ValueParser/#parameters","text":"typ: _ValueType val arg: String val","title":"Parameters"},{"location":"cli-_ValueParser/#returns_1","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val | SyntaxError val)","title":"Returns"},{"location":"cli-_ValueParser/#eq","text":"[Source] fun box eq( that: _ValueParser val) : Bool val","title":"eq"},{"location":"cli-_ValueParser/#parameters_1","text":"that: _ValueParser val","title":"Parameters"},{"location":"cli-_ValueParser/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-_ValueParser/#ne","text":"[Source] fun box ne( that: _ValueParser val) : Bool val","title":"ne"},{"location":"cli-_ValueParser/#parameters_2","text":"that: _ValueParser val","title":"Parameters"},{"location":"cli-_ValueParser/#returns_3","text":"Bool val","title":"Returns"},{"location":"cli-_ValueType/","text":"_ValueType \u00b6 [Source] trait val _ValueType Public Functions \u00b6 string \u00b6 [Source] fun box string() : String val Returns \u00b6 String val value_of \u00b6 [Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? Parameters \u00b6 s: String val Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ? is_seq \u00b6 [Source] fun box is_seq() : Bool val Returns \u00b6 Bool val append \u00b6 [Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Parameters \u00b6 v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) Returns \u00b6 ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"trait _ValueType"},{"location":"cli-_ValueType/#_valuetype","text":"[Source] trait val _ValueType","title":"_ValueType"},{"location":"cli-_ValueType/#public-functions","text":"","title":"Public Functions"},{"location":"cli-_ValueType/#string","text":"[Source] fun box string() : String val","title":"string"},{"location":"cli-_ValueType/#returns","text":"String val","title":"Returns"},{"location":"cli-_ValueType/#value_of","text":"[Source] fun box value_of( s: String val) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"value_of"},{"location":"cli-_ValueType/#parameters","text":"s: String val","title":"Parameters"},{"location":"cli-_ValueType/#returns_1","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) ?","title":"Returns"},{"location":"cli-_ValueType/#is_seq","text":"[Source] fun box is_seq() : Bool val","title":"is_seq"},{"location":"cli-_ValueType/#returns_2","text":"Bool val","title":"Returns"},{"location":"cli-_ValueType/#append","text":"[Source] fun box append( v1: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val), v2: (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)) : (Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"append"},{"location":"cli-_ValueType/#parameters_1","text":"v1: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val) v2: ( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Parameters"},{"location":"cli-_ValueType/#returns_3","text":"( Bool val | String val | I64 val | U64 val | F64 val | _StringSeq val)","title":"Returns"},{"location":"collections--index/","text":"No package doc string provided for collections. Public Types \u00b6 primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues type MinHeap type MaxHeap class BinaryHeap type BinaryHeapPriority primitive MinHeapPriority primitive MaxHeapPriority interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags Private Types \u00b6 primitive _MapEmpty primitive _MapDeleted interface _BinaryHeapPriority","title":"Package"},{"location":"collections--index/#public-types","text":"primitive Sort type Set type SetIs class HashSet class SetValues class RingBuffer class Reverse class Range type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs class ListNode class List class ListNodes class ListValues type MinHeap type MaxHeap class BinaryHeap type BinaryHeapPriority primitive MinHeapPriority primitive MaxHeapPriority interface Hashable interface Hashable64 interface HashFunction interface HashFunction64 primitive HashEq primitive HashEq64 primitive HashIs primitive HashByteSeq interface Flag class Flags","title":"Public Types"},{"location":"collections--index/#private-types","text":"primitive _MapEmpty primitive _MapDeleted interface _BinaryHeapPriority","title":"Private Types"},{"location":"collections-BinaryHeap/","text":"BinaryHeap[A: Comparable [A] #read, P: ( _BinaryHeapPriority [A] val & ( MinHeapPriority [A] val | MaxHeapPriority [A] val))] \u00b6 [Source] A priority queue implemented as a binary heap. The BinaryHeapPriority type parameter determines whether this is max-heap or a min-heap. class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val))] Constructors \u00b6 create \u00b6 [Source] Create an empty heap with space for len elements. new ref create( len: USize val) : BinaryHeap[A, P] ref^ Parameters \u00b6 len: USize val Returns \u00b6 BinaryHeap [A, P] ref^ Public Functions \u00b6 clear \u00b6 [Source] Remove all elements from the heap. fun ref clear() : None val Returns \u00b6 None val size \u00b6 [Source] Return the number of elements in the heap. fun box size() : USize val Returns \u00b6 USize val peek \u00b6 [Source] Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. fun box peek() : this->A ? Returns \u00b6 this->A ? push \u00b6 [Source] Push an item into the heap. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref push( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val pop \u00b6 [Source] Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref pop() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val values \u00b6 [Source] Return an iterator for the elements in the heap. The order of elements is arbitrary. fun box values() : ArrayValues[A, this->Array[A] ref] ref^ Returns \u00b6 ArrayValues [A, this-> Array [A] ref] ref^ Private Functions \u00b6 _make_heap \u00b6 [Source] fun ref _make_heap() : None val Returns \u00b6 None val _sift_up \u00b6 [Source] fun ref _sift_up( n: USize val) : None val Parameters \u00b6 n: USize val Returns \u00b6 None val _sift_down \u00b6 [Source] fun ref _sift_down( start: USize val, n: USize val) : Bool val Parameters \u00b6 start: USize val n: USize val Returns \u00b6 Bool val _apply \u00b6 [Source] fun box _apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ?","title":"class BinaryHeap"},{"location":"collections-BinaryHeap/#binaryheap91a-comparable91a93-read-p-_binaryheappriority91a93-val-minheappriority91a93-val-maxheappriority91a93-val93","text":"[Source] A priority queue implemented as a binary heap. The BinaryHeapPriority type parameter determines whether this is max-heap or a min-heap. class ref BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val))]","title":"BinaryHeap[A: Comparable[A] #read, P: (_BinaryHeapPriority[A] val &amp; (MinHeapPriority[A] val | MaxHeapPriority[A] val))]"},{"location":"collections-BinaryHeap/#constructors","text":"","title":"Constructors"},{"location":"collections-BinaryHeap/#create","text":"[Source] Create an empty heap with space for len elements. new ref create( len: USize val) : BinaryHeap[A, P] ref^","title":"create"},{"location":"collections-BinaryHeap/#parameters","text":"len: USize val","title":"Parameters"},{"location":"collections-BinaryHeap/#returns","text":"BinaryHeap [A, P] ref^","title":"Returns"},{"location":"collections-BinaryHeap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-BinaryHeap/#clear","text":"[Source] Remove all elements from the heap. fun ref clear() : None val","title":"clear"},{"location":"collections-BinaryHeap/#returns_1","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#size","text":"[Source] Return the number of elements in the heap. fun box size() : USize val","title":"size"},{"location":"collections-BinaryHeap/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-BinaryHeap/#peek","text":"[Source] Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. fun box peek() : this->A ?","title":"peek"},{"location":"collections-BinaryHeap/#returns_3","text":"this->A ?","title":"Returns"},{"location":"collections-BinaryHeap/#push","text":"[Source] Push an item into the heap. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref push( value: A) : None val","title":"push"},{"location":"collections-BinaryHeap/#parameters_1","text":"value: A","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_4","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#pop","text":"[Source] Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. The time complexity of this operation is O(log(n)) with respect to the size of the heap. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-BinaryHeap/#returns_5","text":"A^ ?","title":"Returns"},{"location":"collections-BinaryHeap/#append","text":"[Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"collections-BinaryHeap/#parameters_2","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_6","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#concat","text":"[Source] Add len iterated elements, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"collections-BinaryHeap/#parameters_3","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_7","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#values","text":"[Source] Return an iterator for the elements in the heap. The order of elements is arbitrary. fun box values() : ArrayValues[A, this->Array[A] ref] ref^","title":"values"},{"location":"collections-BinaryHeap/#returns_8","text":"ArrayValues [A, this-> Array [A] ref] ref^","title":"Returns"},{"location":"collections-BinaryHeap/#private-functions","text":"","title":"Private Functions"},{"location":"collections-BinaryHeap/#_make_heap","text":"[Source] fun ref _make_heap() : None val","title":"_make_heap"},{"location":"collections-BinaryHeap/#returns_9","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#_sift_up","text":"[Source] fun ref _sift_up( n: USize val) : None val","title":"_sift_up"},{"location":"collections-BinaryHeap/#parameters_4","text":"n: USize val","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_10","text":"None val","title":"Returns"},{"location":"collections-BinaryHeap/#_sift_down","text":"[Source] fun ref _sift_down( start: USize val, n: USize val) : Bool val","title":"_sift_down"},{"location":"collections-BinaryHeap/#parameters_5","text":"start: USize val n: USize val","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_11","text":"Bool val","title":"Returns"},{"location":"collections-BinaryHeap/#_apply","text":"[Source] fun box _apply( i: USize val) : this->A ?","title":"_apply"},{"location":"collections-BinaryHeap/#parameters_6","text":"i: USize val","title":"Parameters"},{"location":"collections-BinaryHeap/#returns_12","text":"this->A ?","title":"Returns"},{"location":"collections-BinaryHeapPriority/","text":"BinaryHeapPriority[A: Comparable [A] #read] \u00b6 [Source] type BinaryHeapPriority[A: Comparable[A] #read] is (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val)) Type Alias For \u00b6 ( _BinaryHeapPriority [A] val & ( MinHeapPriority [A] val | MaxHeapPriority [A] val))","title":"type BinaryHeapPriority"},{"location":"collections-BinaryHeapPriority/#binaryheappriority91a-comparable91a93-read93","text":"[Source] type BinaryHeapPriority[A: Comparable[A] #read] is (_BinaryHeapPriority[A] val & (MinHeapPriority[A] val | MaxHeapPriority[A] val))","title":"BinaryHeapPriority[A: Comparable[A] #read]"},{"location":"collections-BinaryHeapPriority/#type-alias-for","text":"( _BinaryHeapPriority [A] val & ( MinHeapPriority [A] val | MaxHeapPriority [A] val))","title":"Type Alias For"},{"location":"collections-Flag/","text":"Flag[A: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A] val)] \u00b6 [Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)] Public Functions \u00b6 value \u00b6 [Source] fun box value() : A Returns \u00b6 A","title":"interface Flag"},{"location":"collections-Flag/#flag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93","text":"[Source] A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. interface val Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A] val)]","title":"Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"},{"location":"collections-Flag/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flag/#value","text":"[Source] fun box value() : A","title":"value"},{"location":"collections-Flag/#returns","text":"A","title":"Returns"},{"location":"collections-Flags/","text":"Flags[A: Flag [B] val, optional B: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [B] val)] \u00b6 [Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 => 1 primitive AVX fun value(): U64 => 2 primitive RDTSCP fun value(): U64 => 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[B] val)] is Comparable[Flags[A, B] box] ref Implements \u00b6 Comparable [ Flags [A, B] box] ref Constructors \u00b6 create \u00b6 [Source] new iso create() : Flags[A, B] iso^ Returns \u00b6 Flags [A, B] iso^ Public Functions \u00b6 value \u00b6 [Source] Returns the bit encoding of the set flags. fun box value() : B Returns \u00b6 B apply \u00b6 [Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val Parameters \u00b6 flag: A Returns \u00b6 Bool val all \u00b6 [Source] Sets all bits, including undefined flags. fun ref all() : None val Returns \u00b6 None val clear \u00b6 [Source] Unsets all flags. fun ref clear() : None val Returns \u00b6 None val set \u00b6 [Source] Sets the flag. fun ref set( flag: A) : None val Parameters \u00b6 flag: A Returns \u00b6 None val unset \u00b6 [Source] Unsets the flag. fun ref unset( flag: A) : None val Parameters \u00b6 flag: A Returns \u00b6 None val flip \u00b6 [Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val Parameters \u00b6 flag: A Returns \u00b6 None val union \u00b6 [Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val intersect \u00b6 [Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val difference \u00b6 [Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val remove \u00b6 [Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 None val add \u00b6 [Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^ Parameters \u00b6 flag: A Returns \u00b6 Flags [A, B] iso^ sub \u00b6 [Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^ Parameters \u00b6 flag: A Returns \u00b6 Flags [A, B] iso^ op_or \u00b6 [Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ op_and \u00b6 [Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ op_xor \u00b6 [Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ without \u00b6 [Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^ Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Flags [A, B] iso^ clone \u00b6 [Source] Create a clone. fun box clone() : Flags[A, B] iso^ Returns \u00b6 Flags [A, B] iso^ eq \u00b6 [Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val gt \u00b6 [Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val ge \u00b6 [Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val compare \u00b6 [Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 ( Less val | Equal val | Greater val) ne \u00b6 [Source] fun box ne( that: Flags[A, B] box) : Bool val Parameters \u00b6 that: Flags [A, B] box Returns \u00b6 Bool val","title":"class Flags"},{"location":"collections-Flags/#flags91a-flag91b93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b93-val93","text":"[Source] Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 => 1 primitive AVX fun value(): U64 => 2 primitive RDTSCP fun value(): U64 => 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[B] val)] is Comparable[Flags[A, B] box] ref","title":"Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"},{"location":"collections-Flags/#implements","text":"Comparable [ Flags [A, B] box] ref","title":"Implements"},{"location":"collections-Flags/#constructors","text":"","title":"Constructors"},{"location":"collections-Flags/#create","text":"[Source] new iso create() : Flags[A, B] iso^","title":"create"},{"location":"collections-Flags/#returns","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Flags/#value","text":"[Source] Returns the bit encoding of the set flags. fun box value() : B","title":"value"},{"location":"collections-Flags/#returns_1","text":"B","title":"Returns"},{"location":"collections-Flags/#apply","text":"[Source] Returns true if the flag is set. fun box apply( flag: A) : Bool val","title":"apply"},{"location":"collections-Flags/#parameters","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#all","text":"[Source] Sets all bits, including undefined flags. fun ref all() : None val","title":"all"},{"location":"collections-Flags/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Flags/#clear","text":"[Source] Unsets all flags. fun ref clear() : None val","title":"clear"},{"location":"collections-Flags/#returns_4","text":"None val","title":"Returns"},{"location":"collections-Flags/#set","text":"[Source] Sets the flag. fun ref set( flag: A) : None val","title":"set"},{"location":"collections-Flags/#parameters_1","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_5","text":"None val","title":"Returns"},{"location":"collections-Flags/#unset","text":"[Source] Unsets the flag. fun ref unset( flag: A) : None val","title":"unset"},{"location":"collections-Flags/#parameters_2","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Flags/#flip","text":"[Source] Sets the flag if it is unset, unsets the flag if it is set. fun ref flip( flag: A) : None val","title":"flip"},{"location":"collections-Flags/#parameters_3","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_7","text":"None val","title":"Returns"},{"location":"collections-Flags/#union","text":"[Source] The union of this and that. fun ref union( that: Flags[A, B] box) : None val","title":"union"},{"location":"collections-Flags/#parameters_4","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_8","text":"None val","title":"Returns"},{"location":"collections-Flags/#intersect","text":"[Source] The intersection of this and that. fun ref intersect( that: Flags[A, B] box) : None val","title":"intersect"},{"location":"collections-Flags/#parameters_5","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_9","text":"None val","title":"Returns"},{"location":"collections-Flags/#difference","text":"[Source] The symmetric difference of this and that. fun ref difference( that: Flags[A, B] box) : None val","title":"difference"},{"location":"collections-Flags/#parameters_6","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_10","text":"None val","title":"Returns"},{"location":"collections-Flags/#remove","text":"[Source] Unset flags that are set in that. fun ref remove( that: Flags[A, B] box) : None val","title":"remove"},{"location":"collections-Flags/#parameters_7","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_11","text":"None val","title":"Returns"},{"location":"collections-Flags/#add","text":"[Source] This with the flag set. fun box add( flag: A) : Flags[A, B] iso^","title":"add"},{"location":"collections-Flags/#parameters_8","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_12","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#sub","text":"[Source] This with the flag unset. fun box sub( flag: A) : Flags[A, B] iso^","title":"sub"},{"location":"collections-Flags/#parameters_9","text":"flag: A","title":"Parameters"},{"location":"collections-Flags/#returns_13","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_or","text":"[Source] The union of this and that. fun box op_or( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_or"},{"location":"collections-Flags/#parameters_10","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_14","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_and","text":"[Source] The intersection of this and that. fun box op_and( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_and"},{"location":"collections-Flags/#parameters_11","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_15","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#op_xor","text":"[Source] The symmetric difference of this and that. fun box op_xor( that: Flags[A, B] box) : Flags[A, B] iso^","title":"op_xor"},{"location":"collections-Flags/#parameters_12","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_16","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#without","text":"[Source] The flags in this that are not in that. fun box without( that: Flags[A, B] box) : Flags[A, B] iso^","title":"without"},{"location":"collections-Flags/#parameters_13","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_17","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#clone","text":"[Source] Create a clone. fun box clone() : Flags[A, B] iso^","title":"clone"},{"location":"collections-Flags/#returns_18","text":"Flags [A, B] iso^","title":"Returns"},{"location":"collections-Flags/#eq","text":"[Source] Returns true if this has the same flags set as that. fun box eq( that: Flags[A, B] box) : Bool val","title":"eq"},{"location":"collections-Flags/#parameters_14","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_19","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#lt","text":"[Source] Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. fun box lt( that: Flags[A, B] box) : Bool val","title":"lt"},{"location":"collections-Flags/#parameters_15","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#le","text":"[Source] Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. fun box le( that: Flags[A, B] box) : Bool val","title":"le"},{"location":"collections-Flags/#parameters_16","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#gt","text":"[Source] Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. fun box gt( that: Flags[A, B] box) : Bool val","title":"gt"},{"location":"collections-Flags/#parameters_17","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#ge","text":"[Source] Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. fun box ge( that: Flags[A, B] box) : Bool val","title":"ge"},{"location":"collections-Flags/#parameters_18","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-Flags/#compare","text":"[Source] fun box compare( that: Flags[A, B] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-Flags/#parameters_19","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_24","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Flags/#ne","text":"[Source] fun box ne( that: Flags[A, B] box) : Bool val","title":"ne"},{"location":"collections-Flags/#parameters_20","text":"that: Flags [A, B] box","title":"Parameters"},{"location":"collections-Flags/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/","text":"HashByteSeq \u00b6 [Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val Implements \u00b6 HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashByteSeq val^ Returns \u00b6 HashByteSeq val^ Public Functions \u00b6 hash \u00b6 [Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val Parameters \u00b6 x: ( String box | Array [ U8 val] box) Returns \u00b6 USize val hash64 \u00b6 [Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val Parameters \u00b6 x: ( String box | Array [ U8 val] box) Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val Parameters \u00b6 x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box) Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashByteSeq val) : Bool val Parameters \u00b6 that: HashByteSeq val Returns \u00b6 Bool val","title":"primitive HashByteSeq"},{"location":"collections-HashByteSeq/#hashbyteseq","text":"[Source] Hash and equality functions for arbitrary ByteSeq. primitive val HashByteSeq is HashFunction[(String box | Array[U8 val] box)] val, HashFunction64[(String box | Array[U8 val] box)] val","title":"HashByteSeq"},{"location":"collections-HashByteSeq/#implements","text":"HashFunction [( String box | Array [ U8 val] box)] val HashFunction64 [( String box | Array [ U8 val] box)] val","title":"Implements"},{"location":"collections-HashByteSeq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashByteSeq/#create","text":"[Source] new val create() : HashByteSeq val^","title":"create"},{"location":"collections-HashByteSeq/#returns","text":"HashByteSeq val^","title":"Returns"},{"location":"collections-HashByteSeq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashByteSeq/#hash","text":"[Source] fun box hash( x: (String box | Array[U8 val] box)) : USize val","title":"hash"},{"location":"collections-HashByteSeq/#parameters","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashByteSeq/#hash64","text":"[Source] fun box hash64( x: (String box | Array[U8 val] box)) : U64 val","title":"hash64"},{"location":"collections-HashByteSeq/#parameters_1","text":"x: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashByteSeq/#eq","text":"[Source] fun box eq( x: (String box | Array[U8 val] box), y: (String box | Array[U8 val] box)) : Bool val","title":"eq"},{"location":"collections-HashByteSeq/#parameters_2","text":"x: ( String box | Array [ U8 val] box) y: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashByteSeq/#ne","text":"[Source] fun box ne( that: HashByteSeq val) : Bool val","title":"ne"},{"location":"collections-HashByteSeq/#parameters_3","text":"that: HashByteSeq val","title":"Parameters"},{"location":"collections-HashByteSeq/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/","text":"HashEq[A: ( Hashable #read & Equatable [A] #read)] \u00b6 [Source] primitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A] val Implements \u00b6 HashFunction [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashEq[A] val^ Returns \u00b6 HashEq [A] val^ Public Functions \u00b6 hash \u00b6 [Source] Use the hash function from the type parameter. fun box hash( x: box->A) : USize val Parameters \u00b6 x: box->A Returns \u00b6 USize val eq \u00b6 [Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val Parameters \u00b6 x: box->A y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashEq[A] val) : Bool val Parameters \u00b6 that: HashEq [A] val Returns \u00b6 Bool val","title":"primitive HashEq"},{"location":"collections-HashEq/#hasheq91a-hashable-read-equatable91a93-read93","text":"[Source] primitive val HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A] val","title":"HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq/#implements","text":"HashFunction [A] val","title":"Implements"},{"location":"collections-HashEq/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq/#create","text":"[Source] new val create() : HashEq[A] val^","title":"create"},{"location":"collections-HashEq/#returns","text":"HashEq [A] val^","title":"Returns"},{"location":"collections-HashEq/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq/#hash","text":"[Source] Use the hash function from the type parameter. fun box hash( x: box->A) : USize val","title":"hash"},{"location":"collections-HashEq/#parameters","text":"x: box->A","title":"Parameters"},{"location":"collections-HashEq/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashEq/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val","title":"eq"},{"location":"collections-HashEq/#parameters_1","text":"x: box->A y: box->A","title":"Parameters"},{"location":"collections-HashEq/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq/#ne","text":"[Source] fun box ne( that: HashEq[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq/#parameters_2","text":"that: HashEq [A] val","title":"Parameters"},{"location":"collections-HashEq/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/","text":"HashEq64[A: ( Hashable64 #read & Equatable [A] #read)] \u00b6 [Source] primitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A] val Implements \u00b6 HashFunction64 [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashEq64[A] val^ Returns \u00b6 HashEq64 [A] val^ Public Functions \u00b6 hash64 \u00b6 [Source] Use the hash function from the type parameter. fun box hash64( x: box->A) : U64 val Parameters \u00b6 x: box->A Returns \u00b6 U64 val eq \u00b6 [Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val Parameters \u00b6 x: box->A y: box->A Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashEq64[A] val) : Bool val Parameters \u00b6 that: HashEq64 [A] val Returns \u00b6 Bool val","title":"primitive HashEq64"},{"location":"collections-HashEq64/#hasheq6491a-hashable64-read-equatable91a93-read93","text":"[Source] primitive val HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A] val","title":"HashEq64[A: (Hashable64 #read &amp; Equatable[A] #read)]"},{"location":"collections-HashEq64/#implements","text":"HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashEq64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashEq64/#create","text":"[Source] new val create() : HashEq64[A] val^","title":"create"},{"location":"collections-HashEq64/#returns","text":"HashEq64 [A] val^","title":"Returns"},{"location":"collections-HashEq64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashEq64/#hash64","text":"[Source] Use the hash function from the type parameter. fun box hash64( x: box->A) : U64 val","title":"hash64"},{"location":"collections-HashEq64/#parameters","text":"x: box->A","title":"Parameters"},{"location":"collections-HashEq64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashEq64/#eq","text":"[Source] Use the structural equality function from the type parameter. fun box eq( x: box->A, y: box->A) : Bool val","title":"eq"},{"location":"collections-HashEq64/#parameters_1","text":"x: box->A y: box->A","title":"Parameters"},{"location":"collections-HashEq64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashEq64/#ne","text":"[Source] fun box ne( that: HashEq64[A] val) : Bool val","title":"ne"},{"location":"collections-HashEq64/#parameters_2","text":"that: HashEq64 [A] val","title":"Parameters"},{"location":"collections-HashEq64/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction/","text":"HashFunction[A: A] \u00b6 [Source] A pluggable hash function. interface val HashFunction[A: A] Constructors \u00b6 create \u00b6 [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^ Returns \u00b6 HashFunction [A] val^ Public Functions \u00b6 hash \u00b6 [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box->A!) : USize val Parameters \u00b6 x: box->A! Returns \u00b6 USize val eq \u00b6 [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val Parameters \u00b6 x: box->A! y: box->A! Returns \u00b6 Bool val","title":"interface HashFunction"},{"location":"collections-HashFunction/#hashfunction91a-a93","text":"[Source] A pluggable hash function. interface val HashFunction[A: A]","title":"HashFunction[A: A]"},{"location":"collections-HashFunction/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction[A] val^","title":"create"},{"location":"collections-HashFunction/#returns","text":"HashFunction [A] val^","title":"Returns"},{"location":"collections-HashFunction/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction/#hash","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash( x: box->A!) : USize val","title":"hash"},{"location":"collections-HashFunction/#parameters","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashFunction/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val","title":"eq"},{"location":"collections-HashFunction/#parameters_1","text":"x: box->A! y: box->A!","title":"Parameters"},{"location":"collections-HashFunction/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashFunction64/","text":"HashFunction64[A: A] \u00b6 [Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A] Constructors \u00b6 create \u00b6 [Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^ Returns \u00b6 HashFunction64 [A] val^ Public Functions \u00b6 hash64 \u00b6 [Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box->A!) : U64 val Parameters \u00b6 x: box->A! Returns \u00b6 U64 val eq \u00b6 [Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val Parameters \u00b6 x: box->A! y: box->A! Returns \u00b6 Bool val","title":"interface HashFunction64"},{"location":"collections-HashFunction64/#hashfunction6491a-a93","text":"[Source] A pluggable hash function with 64-bit hashes. interface val HashFunction64[A: A]","title":"HashFunction64[A: A]"},{"location":"collections-HashFunction64/#constructors","text":"","title":"Constructors"},{"location":"collections-HashFunction64/#create","text":"[Source] Data structures create instances internally. Use a primitive if possible. new val create() : HashFunction64[A] val^","title":"create"},{"location":"collections-HashFunction64/#returns","text":"HashFunction64 [A] val^","title":"Returns"},{"location":"collections-HashFunction64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashFunction64/#hash64","text":"[Source] Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. fun box hash64( x: box->A!) : U64 val","title":"hash64"},{"location":"collections-HashFunction64/#parameters","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_1","text":"U64 val","title":"Returns"},{"location":"collections-HashFunction64/#eq","text":"[Source] Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. fun box eq( x: box->A!, y: box->A!) : Bool val","title":"eq"},{"location":"collections-HashFunction64/#parameters_1","text":"x: box->A! y: box->A!","title":"Parameters"},{"location":"collections-HashFunction64/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/","text":"HashIs[A: A] \u00b6 [Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val Implements \u00b6 HashFunction [A] val HashFunction64 [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : HashIs[A] val^ Returns \u00b6 HashIs [A] val^ Public Functions \u00b6 hash \u00b6 [Source] Hash the identity rather than the contents. fun box hash( x: box->A!) : USize val Parameters \u00b6 x: box->A! Returns \u00b6 USize val hash64 \u00b6 [Source] Hash the identity rather than the contents. fun box hash64( x: box->A!) : U64 val Parameters \u00b6 x: box->A! Returns \u00b6 U64 val eq \u00b6 [Source] Determine equality by identity rather than structurally. fun box eq( x: box->A!, y: box->A!) : Bool val Parameters \u00b6 x: box->A! y: box->A! Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: HashIs[A] val) : Bool val Parameters \u00b6 that: HashIs [A] val Returns \u00b6 Bool val","title":"primitive HashIs"},{"location":"collections-HashIs/#hashis91a-a93","text":"[Source] primitive val HashIs[A: A] is HashFunction[A] val, HashFunction64[A] val","title":"HashIs[A: A]"},{"location":"collections-HashIs/#implements","text":"HashFunction [A] val HashFunction64 [A] val","title":"Implements"},{"location":"collections-HashIs/#constructors","text":"","title":"Constructors"},{"location":"collections-HashIs/#create","text":"[Source] new val create() : HashIs[A] val^","title":"create"},{"location":"collections-HashIs/#returns","text":"HashIs [A] val^","title":"Returns"},{"location":"collections-HashIs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashIs/#hash","text":"[Source] Hash the identity rather than the contents. fun box hash( x: box->A!) : USize val","title":"hash"},{"location":"collections-HashIs/#parameters","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashIs/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashIs/#hash64","text":"[Source] Hash the identity rather than the contents. fun box hash64( x: box->A!) : U64 val","title":"hash64"},{"location":"collections-HashIs/#parameters_1","text":"x: box->A!","title":"Parameters"},{"location":"collections-HashIs/#returns_2","text":"U64 val","title":"Returns"},{"location":"collections-HashIs/#eq","text":"[Source] Determine equality by identity rather than structurally. fun box eq( x: box->A!, y: box->A!) : Bool val","title":"eq"},{"location":"collections-HashIs/#parameters_2","text":"x: box->A! y: box->A!","title":"Parameters"},{"location":"collections-HashIs/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-HashIs/#ne","text":"[Source] fun box ne( that: HashIs[A] val) : Bool val","title":"ne"},{"location":"collections-HashIs/#parameters_3","text":"that: HashIs [A] val","title":"Parameters"},{"location":"collections-HashIs/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/","text":"HashMap[K: K, V: V, H: HashFunction [K] val] \u00b6 [Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = 6) : HashMap[K, V, H] ref^ Parameters \u00b6 prealloc: USize val = 6 Returns \u00b6 HashMap [K, V, H] ref^ Public Functions \u00b6 size \u00b6 [Source] The number of items in the map. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the map. Resize will happen when size / space >= 0.75. fun box space() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box->K!) : this->V ? Parameters \u00b6 key: box->K! Returns \u00b6 this->V ? update \u00b6 [Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val) Parameters \u00b6 key: K value: V Returns \u00b6 (V^ | None val) upsert \u00b6 [Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(current, provided) => current + provided }) This changes the value associated with \"test\" to 6. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(current, provided) => current + provided }) then \"new-key\" is added to the map with a value of 4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V Parameters \u00b6 key: K value: V f: {(V, V): V^}[K, V, H] box Returns \u00b6 V insert \u00b6 [Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V! Parameters \u00b6 key: K value: V Returns \u00b6 V! insert_if_absent \u00b6 [Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V Parameters \u00b6 key: K value: V Returns \u00b6 V remove \u00b6 [Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box->K!) : (K^ , V^) ? Parameters \u00b6 key: box->K! Returns \u00b6 (K^ , V^) ? get_or_else \u00b6 [Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box->K!, alt: this->V) : this->V Parameters \u00b6 key: box->K! alt: this->V Returns \u00b6 this->V contains \u00b6 [Source] Checks whether the map contains the key k fun box contains( k: box->K!) : Bool val Parameters \u00b6 k: box->K! Returns \u00b6 Bool val concat \u00b6 [Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val Parameters \u00b6 iter: Iterator [(K^ , V^)] ref Returns \u00b6 None val add[optional H2: HashFunction [this->K!] val] \u00b6 [Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this->K!] val]( key: this->K!, value: this->V!) : HashMap[this->K!, this->V!, H2] ref^ Parameters \u00b6 key: this->K! value: this->V! Returns \u00b6 HashMap [this->K!, this->V!, H2] ref^ sub[optional H2: HashFunction [this->K!] val] \u00b6 [Source] This without the given key. fun box sub[optional H2: HashFunction[this->K!] val]( key: this->K!) : HashMap[this->K!, this->V!, H2] ref^ Parameters \u00b6 key: this->K! Returns \u00b6 HashMap [this->K!, this->V!, H2] ref^ next_index \u00b6 [Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ? Parameters \u00b6 prev: USize val = call Returns \u00b6 USize val ? index \u00b6 [Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this->K , this->V) ? Parameters \u00b6 i: USize val Returns \u00b6 (this->K , this->V) ? compact \u00b6 [Source] Minimise the memory used for the map. fun ref compact() : None val Returns \u00b6 None val clone[optional H2: HashFunction [this->K!] val] \u00b6 [Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this->K!] val]() : HashMap[this->K!, this->V!, H2] ref^ Returns \u00b6 HashMap [this->K!, this->V!, H2] ref^ clear \u00b6 [Source] Remove all entries. fun ref clear() : None val Returns \u00b6 None val keys \u00b6 [Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^ Returns \u00b6 MapKeys [K, V, H, this-> HashMap [K, V, H] ref] ref^ values \u00b6 [Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^ Returns \u00b6 MapValues [K, V, H, this-> HashMap [K, V, H] ref] ref^ pairs \u00b6 [Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^ Returns \u00b6 MapPairs [K, V, H, this-> HashMap [K, V, H] ref] ref^ Private Functions \u00b6 _search \u00b6 [Source] Return a slot number and whether or not it's currently occupied. fun box _search( key: box->K!) : (USize val , Bool val) Parameters \u00b6 key: box->K! Returns \u00b6 ( USize val , Bool val) _resize \u00b6 [Source] Change the available space. fun ref _resize( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val","title":"class HashMap"},{"location":"collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93","text":"[Source] A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. class ref HashMap[K: K, V: V, H: HashFunction[K] val]","title":"HashMap[K: K, V: V, H: HashFunction[K] val]"},{"location":"collections-HashMap/#constructors","text":"","title":"Constructors"},{"location":"collections-HashMap/#create","text":"[Source] Create an array with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = 6) : HashMap[K, V, H] ref^","title":"create"},{"location":"collections-HashMap/#parameters","text":"prealloc: USize val = 6","title":"Parameters"},{"location":"collections-HashMap/#returns","text":"HashMap [K, V, H] ref^","title":"Returns"},{"location":"collections-HashMap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashMap/#size","text":"[Source] The number of items in the map. fun box size() : USize val","title":"size"},{"location":"collections-HashMap/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#space","text":"[Source] The available space in the map. Resize will happen when size / space >= 0.75. fun box space() : USize val","title":"space"},{"location":"collections-HashMap/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashMap/#apply","text":"[Source] Gets a value from the map. Raises an error if no such item exists. fun box apply( key: box->K!) : this->V ?","title":"apply"},{"location":"collections-HashMap/#parameters_1","text":"key: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_3","text":"this->V ?","title":"Returns"},{"location":"collections-HashMap/#update","text":"[Source] Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. fun ref update( key: K, value: V) : (V^ | None val)","title":"update"},{"location":"collections-HashMap/#parameters_2","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_4","text":"(V^ | None val)","title":"Returns"},{"location":"collections-HashMap/#upsert","text":"[Source] Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(current, provided) => current + provided }) This changes the value associated with \"test\" to 6. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(current, provided) => current + provided }) then \"new-key\" is added to the map with a value of 4. Returns the value that we set the key to fun ref upsert( key: K, value: V, f: {(V, V): V^}[K, V, H] box) : V","title":"upsert"},{"location":"collections-HashMap/#parameters_3","text":"key: K value: V f: {(V, V): V^}[K, V, H] box","title":"Parameters"},{"location":"collections-HashMap/#returns_5","text":"V","title":"Returns"},{"location":"collections-HashMap/#insert","text":"[Source] Set a value in the map. Returns the new value, allowing reuse. fun ref insert( key: K, value: V) : V!","title":"insert"},{"location":"collections-HashMap/#parameters_4","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_6","text":"V!","title":"Returns"},{"location":"collections-HashMap/#insert_if_absent","text":"[Source] Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: if not my_map.contains(my_key) then my_map(my_key) = my_value end Returns the value, the same as insert , allowing 'insert_if_absent' to be used as a drop-in replacement for insert . fun ref insert_if_absent( key: K, value: V) : V","title":"insert_if_absent"},{"location":"collections-HashMap/#parameters_5","text":"key: K value: V","title":"Parameters"},{"location":"collections-HashMap/#returns_7","text":"V","title":"Returns"},{"location":"collections-HashMap/#remove","text":"[Source] Delete a value from the map and return it. Raises an error if there was no value for the given key. fun ref remove( key: box->K!) : (K^ , V^) ?","title":"remove"},{"location":"collections-HashMap/#parameters_6","text":"key: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_8","text":"(K^ , V^) ?","title":"Returns"},{"location":"collections-HashMap/#get_or_else","text":"[Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun box get_or_else( key: box->K!, alt: this->V) : this->V","title":"get_or_else"},{"location":"collections-HashMap/#parameters_7","text":"key: box->K! alt: this->V","title":"Parameters"},{"location":"collections-HashMap/#returns_9","text":"this->V","title":"Returns"},{"location":"collections-HashMap/#contains","text":"[Source] Checks whether the map contains the key k fun box contains( k: box->K!) : Bool val","title":"contains"},{"location":"collections-HashMap/#parameters_8","text":"k: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_10","text":"Bool val","title":"Returns"},{"location":"collections-HashMap/#concat","text":"[Source] Add K, V pairs from the iterator to the map. fun ref concat( iter: Iterator[(K^ , V^)] ref) : None val","title":"concat"},{"location":"collections-HashMap/#parameters_9","text":"iter: Iterator [(K^ , V^)] ref","title":"Parameters"},{"location":"collections-HashMap/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashMap/#add91optional-h2-hashfunction91this-k93-val93","text":"[Source] This with the new (key, value) mapping. fun box add[optional H2: HashFunction[this->K!] val]( key: this->K!, value: this->V!) : HashMap[this->K!, this->V!, H2] ref^","title":"add[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_10","text":"key: this->K! value: this->V!","title":"Parameters"},{"location":"collections-HashMap/#returns_12","text":"HashMap [this->K!, this->V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#sub91optional-h2-hashfunction91this-k93-val93","text":"[Source] This without the given key. fun box sub[optional H2: HashFunction[this->K!] val]( key: this->K!) : HashMap[this->K!, this->V!, H2] ref^","title":"sub[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#parameters_11","text":"key: this->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_13","text":"HashMap [this->K!, this->V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#next_index","text":"[Source] Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ?","title":"next_index"},{"location":"collections-HashMap/#parameters_12","text":"prev: USize val = call","title":"Parameters"},{"location":"collections-HashMap/#returns_14","text":"USize val ?","title":"Returns"},{"location":"collections-HashMap/#index","text":"[Source] Returns the key and value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : (this->K , this->V) ?","title":"index"},{"location":"collections-HashMap/#parameters_13","text":"i: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_15","text":"(this->K , this->V) ?","title":"Returns"},{"location":"collections-HashMap/#compact","text":"[Source] Minimise the memory used for the map. fun ref compact() : None val","title":"compact"},{"location":"collections-HashMap/#returns_16","text":"None val","title":"Returns"},{"location":"collections-HashMap/#clone91optional-h2-hashfunction91this-k93-val93","text":"[Source] Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. fun box clone[optional H2: HashFunction[this->K!] val]() : HashMap[this->K!, this->V!, H2] ref^","title":"clone[optional H2: HashFunction[this-&gt;K!] val]"},{"location":"collections-HashMap/#returns_17","text":"HashMap [this->K!, this->V!, H2] ref^","title":"Returns"},{"location":"collections-HashMap/#clear","text":"[Source] Remove all entries. fun ref clear() : None val","title":"clear"},{"location":"collections-HashMap/#returns_18","text":"None val","title":"Returns"},{"location":"collections-HashMap/#keys","text":"[Source] Return an iterator over the keys. fun box keys() : MapKeys[K, V, H, this->HashMap[K, V, H] ref] ref^","title":"keys"},{"location":"collections-HashMap/#returns_19","text":"MapKeys [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#values","text":"[Source] Return an iterator over the values. fun box values() : MapValues[K, V, H, this->HashMap[K, V, H] ref] ref^","title":"values"},{"location":"collections-HashMap/#returns_20","text":"MapValues [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#pairs","text":"[Source] Return an iterator over the keys and values. fun box pairs() : MapPairs[K, V, H, this->HashMap[K, V, H] ref] ref^","title":"pairs"},{"location":"collections-HashMap/#returns_21","text":"MapPairs [K, V, H, this-> HashMap [K, V, H] ref] ref^","title":"Returns"},{"location":"collections-HashMap/#private-functions","text":"","title":"Private Functions"},{"location":"collections-HashMap/#_search","text":"[Source] Return a slot number and whether or not it's currently occupied. fun box _search( key: box->K!) : (USize val , Bool val)","title":"_search"},{"location":"collections-HashMap/#parameters_14","text":"key: box->K!","title":"Parameters"},{"location":"collections-HashMap/#returns_22","text":"( USize val , Bool val)","title":"Returns"},{"location":"collections-HashMap/#_resize","text":"[Source] Change the available space. fun ref _resize( len: USize val) : None val","title":"_resize"},{"location":"collections-HashMap/#parameters_15","text":"len: USize val","title":"Parameters"},{"location":"collections-HashMap/#returns_23","text":"None val","title":"Returns"},{"location":"collections-HashSet/","text":"HashSet[A: A, H: HashFunction [A!] val] \u00b6 [Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref Implements \u00b6 Comparable [ HashSet [A, H] box] ref Constructors \u00b6 create \u00b6 [Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = 8) : HashSet[A, H] ref^ Parameters \u00b6 prealloc: USize val = 8 Returns \u00b6 HashSet [A, H] ref^ Public Functions \u00b6 size \u00b6 [Source] The number of items in the set. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the set. fun box space() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box->A!) : this->A ? Parameters \u00b6 value: box->A! Returns \u00b6 this->A ? contains \u00b6 [Source] Checks whether the set contains the value. fun box contains( value: box->A!) : Bool val Parameters \u00b6 value: box->A! Returns \u00b6 Bool val clear \u00b6 [Source] Remove all elements from the set. fun ref clear() : None val Returns \u00b6 None val set \u00b6 [Source] Add a value to the set. fun ref set( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val unset \u00b6 [Source] Remove a value from the set. fun ref unset( value: box->A!) : None val Parameters \u00b6 value: box->A! Returns \u00b6 None val extract \u00b6 [Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box->A!) : A^ ? Parameters \u00b6 value: box->A! Returns \u00b6 A^ ? union \u00b6 [Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val Parameters \u00b6 that: Iterator [A^] ref Returns \u00b6 None val intersect[optional K: HashFunction [box->A!] val] \u00b6 [Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box->A!] val]( that: HashSet[box->A!, K] ref) : None val Parameters \u00b6 that: HashSet [box->A!, K] ref Returns \u00b6 None val difference \u00b6 [Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val Parameters \u00b6 that: Iterator [A^] ref Returns \u00b6 None val remove \u00b6 [Source] Remove everything that is in that. fun ref remove( that: Iterator[box->A!] ref) : None val Parameters \u00b6 that: Iterator [box->A!] ref Returns \u00b6 None val add[optional K: HashFunction [this->A!] val] \u00b6 [Source] Add a value to the set. fun box add[optional K: HashFunction[this->A!] val]( value: this->A!) : HashSet[this->A!, K] ref^ Parameters \u00b6 value: this->A! Returns \u00b6 HashSet [this->A!, K] ref^ sub[optional K: HashFunction [this->A!] val] \u00b6 [Source] Remove a value from the set. fun box sub[optional K: HashFunction[this->A!] val]( value: box->this->A!) : HashSet[this->A!, K] ref^ Parameters \u00b6 value: box->this->A! Returns \u00b6 HashSet [this->A!, K] ref^ op_or[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ op_and[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ op_xor[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ without[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^ Parameters \u00b6 that: this-> HashSet [A, H] ref Returns \u00b6 HashSet [this->A!, K] ref^ clone[optional K: HashFunction [this->A!] val] \u00b6 [Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this->A!] val]() : HashSet[this->A!, K] ref^ Returns \u00b6 HashSet [this->A!, K] ref^ eq \u00b6 [Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val ne \u00b6 [Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val lt \u00b6 [Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val le \u00b6 [Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val gt \u00b6 [Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val ge \u00b6 [Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val next_index \u00b6 [Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ? Parameters \u00b6 prev: USize val = call Returns \u00b6 USize val ? index \u00b6 [Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? values \u00b6 [Source] Return an iterator over the values. fun box values() : SetValues[A, H, this->HashSet[A, H] ref] ref^ Returns \u00b6 SetValues [A, H, this-> HashSet [A, H] ref] ref^ compare \u00b6 [Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 ( Less val | Equal val | Greater val)","title":"class HashSet"},{"location":"collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93","text":"[Source] A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself class ref HashSet[A: A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] ref","title":"HashSet[A: A, H: HashFunction[A!] val]"},{"location":"collections-HashSet/#implements","text":"Comparable [ HashSet [A, H] box] ref","title":"Implements"},{"location":"collections-HashSet/#constructors","text":"","title":"Constructors"},{"location":"collections-HashSet/#create","text":"[Source] Defaults to a prealloc of 8. new ref create( prealloc: USize val = 8) : HashSet[A, H] ref^","title":"create"},{"location":"collections-HashSet/#parameters","text":"prealloc: USize val = 8","title":"Parameters"},{"location":"collections-HashSet/#returns","text":"HashSet [A, H] ref^","title":"Returns"},{"location":"collections-HashSet/#public-functions","text":"","title":"Public Functions"},{"location":"collections-HashSet/#size","text":"[Source] The number of items in the set. fun box size() : USize val","title":"size"},{"location":"collections-HashSet/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#space","text":"[Source] The available space in the set. fun box space() : USize val","title":"space"},{"location":"collections-HashSet/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-HashSet/#apply","text":"[Source] Return the value if its in the set, otherwise raise an error. fun box apply( value: box->A!) : this->A ?","title":"apply"},{"location":"collections-HashSet/#parameters_1","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_3","text":"this->A ?","title":"Returns"},{"location":"collections-HashSet/#contains","text":"[Source] Checks whether the set contains the value. fun box contains( value: box->A!) : Bool val","title":"contains"},{"location":"collections-HashSet/#parameters_2","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#clear","text":"[Source] Remove all elements from the set. fun ref clear() : None val","title":"clear"},{"location":"collections-HashSet/#returns_5","text":"None val","title":"Returns"},{"location":"collections-HashSet/#set","text":"[Source] Add a value to the set. fun ref set( value: A) : None val","title":"set"},{"location":"collections-HashSet/#parameters_3","text":"value: A","title":"Parameters"},{"location":"collections-HashSet/#returns_6","text":"None val","title":"Returns"},{"location":"collections-HashSet/#unset","text":"[Source] Remove a value from the set. fun ref unset( value: box->A!) : None val","title":"unset"},{"location":"collections-HashSet/#parameters_4","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_7","text":"None val","title":"Returns"},{"location":"collections-HashSet/#extract","text":"[Source] Remove a value from the set and return it. Raises an error if the value wasn't in the set. fun ref extract( value: box->A!) : A^ ?","title":"extract"},{"location":"collections-HashSet/#parameters_5","text":"value: box->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_8","text":"A^ ?","title":"Returns"},{"location":"collections-HashSet/#union","text":"[Source] Add everything in that to the set. fun ref union( that: Iterator[A^] ref) : None val","title":"union"},{"location":"collections-HashSet/#parameters_6","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_9","text":"None val","title":"Returns"},{"location":"collections-HashSet/#intersect91optional-k-hashfunction91box-a93-val93","text":"[Source] Remove everything that isn't in that. fun ref intersect[optional K: HashFunction[box->A!] val]( that: HashSet[box->A!, K] ref) : None val","title":"intersect[optional K: HashFunction[box-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_7","text":"that: HashSet [box->A!, K] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_10","text":"None val","title":"Returns"},{"location":"collections-HashSet/#difference","text":"[Source] Remove elements in this which are also in that. Add elements in that which are not in this. fun ref difference( that: Iterator[A^] ref) : None val","title":"difference"},{"location":"collections-HashSet/#parameters_8","text":"that: Iterator [A^] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_11","text":"None val","title":"Returns"},{"location":"collections-HashSet/#remove","text":"[Source] Remove everything that is in that. fun ref remove( that: Iterator[box->A!] ref) : None val","title":"remove"},{"location":"collections-HashSet/#parameters_9","text":"that: Iterator [box->A!] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_12","text":"None val","title":"Returns"},{"location":"collections-HashSet/#add91optional-k-hashfunction91this-a93-val93","text":"[Source] Add a value to the set. fun box add[optional K: HashFunction[this->A!] val]( value: this->A!) : HashSet[this->A!, K] ref^","title":"add[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_10","text":"value: this->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_13","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#sub91optional-k-hashfunction91this-a93-val93","text":"[Source] Remove a value from the set. fun box sub[optional K: HashFunction[this->A!] val]( value: box->this->A!) : HashSet[this->A!, K] ref^","title":"sub[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_11","text":"value: box->this->A!","title":"Parameters"},{"location":"collections-HashSet/#returns_14","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_or91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements of both this and that. fun box op_or[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"op_or[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_12","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_15","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_and91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements that are in both this and that. fun box op_and[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"op_and[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_13","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_16","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#op_xor91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements that are in either set but not both. fun box op_xor[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"op_xor[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_14","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_17","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#without91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a set with the elements of this that are not in that. fun box without[optional K: HashFunction[this->A!] val]( that: this->HashSet[A, H] ref) : HashSet[this->A!, K] ref^","title":"without[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#parameters_15","text":"that: this-> HashSet [A, H] ref","title":"Parameters"},{"location":"collections-HashSet/#returns_18","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#clone91optional-k-hashfunction91this-a93-val93","text":"[Source] Create a clone. The element type may be different due to aliasing and viewpoint adaptation. fun box clone[optional K: HashFunction[this->A!] val]() : HashSet[this->A!, K] ref^","title":"clone[optional K: HashFunction[this-&gt;A!] val]"},{"location":"collections-HashSet/#returns_19","text":"HashSet [this->A!, K] ref^","title":"Returns"},{"location":"collections-HashSet/#eq","text":"[Source] Returns true if the sets contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val","title":"eq"},{"location":"collections-HashSet/#parameters_16","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_20","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ne","text":"[Source] Returns false if the sets contain the same elements. fun box ne( that: HashSet[A, H] box) : Bool val","title":"ne"},{"location":"collections-HashSet/#parameters_17","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_21","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#lt","text":"[Source] Returns true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val","title":"lt"},{"location":"collections-HashSet/#parameters_18","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_22","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#le","text":"[Source] Returns true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val","title":"le"},{"location":"collections-HashSet/#parameters_19","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#gt","text":"[Source] Returns true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val","title":"gt"},{"location":"collections-HashSet/#parameters_20","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_24","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#ge","text":"[Source] Returns true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val","title":"ge"},{"location":"collections-HashSet/#parameters_21","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-HashSet/#next_index","text":"[Source] Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. fun box next_index( prev: USize val = call) : USize val ?","title":"next_index"},{"location":"collections-HashSet/#parameters_22","text":"prev: USize val = call","title":"Parameters"},{"location":"collections-HashSet/#returns_26","text":"USize val ?","title":"Returns"},{"location":"collections-HashSet/#index","text":"[Source] Returns the value at a given index. Raise an error if the index is not populated. fun box index( i: USize val) : this->A ?","title":"index"},{"location":"collections-HashSet/#parameters_23","text":"i: USize val","title":"Parameters"},{"location":"collections-HashSet/#returns_27","text":"this->A ?","title":"Returns"},{"location":"collections-HashSet/#values","text":"[Source] Return an iterator over the values. fun box values() : SetValues[A, H, this->HashSet[A, H] ref] ref^","title":"values"},{"location":"collections-HashSet/#returns_28","text":"SetValues [A, H, this-> HashSet [A, H] ref] ref^","title":"Returns"},{"location":"collections-HashSet/#compare","text":"[Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-HashSet/#parameters_24","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-HashSet/#returns_29","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-Hashable/","text":"Hashable \u00b6 [Source] Anything with a hash method is hashable. interface ref Hashable Public Functions \u00b6 hash \u00b6 [Source] fun box hash() : USize val Returns \u00b6 USize val","title":"interface Hashable"},{"location":"collections-Hashable/#hashable","text":"[Source] Anything with a hash method is hashable. interface ref Hashable","title":"Hashable"},{"location":"collections-Hashable/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable/#hash","text":"[Source] fun box hash() : USize val","title":"hash"},{"location":"collections-Hashable/#returns","text":"USize val","title":"Returns"},{"location":"collections-Hashable64/","text":"Hashable64 \u00b6 [Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64 Public Functions \u00b6 hash64 \u00b6 [Source] fun box hash64() : U64 val Returns \u00b6 U64 val","title":"interface Hashable64"},{"location":"collections-Hashable64/#hashable64","text":"[Source] A version of Hashable that returns 64-bit hashes on every platform. interface ref Hashable64","title":"Hashable64"},{"location":"collections-Hashable64/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Hashable64/#hash64","text":"[Source] fun box hash64() : U64 val","title":"hash64"},{"location":"collections-Hashable64/#returns","text":"U64 val","title":"Returns"},{"location":"collections-List/","text":"List[A: A] \u00b6 [Source] A doubly linked list. (The following is paraphrased from Wikipedia .) A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. (Implemented in Ponylang via the collections.ListNode class.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders. As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc. Example program \u00b6 There are a lot of functions in List. The following code picks out a few common examples. It outputs: A new empty list has 0 nodes. Adding one node to our empty list means it now has a size of 1. The first (index 0) node has the value: A single String A list created by appending our second single-node list onto our first has size: 2 The List nodes of our first list are now: A single String Another String Append *moves* the nodes from the second list so that now has 0 nodes. A list created from an array of three strings has size: 3 First Second Third Mapping over our three-node list produces a new list of size: 3 Each node-value in the resulting list is now far more exciting: First BOOM! Second BOOM! Third BOOM! Filtering our three-node list produces a new list of size: 2 Second BOOM! Third BOOM! The size of our first partitioned list (matches predicate): 1 The size of our second partitioned list (doesn't match predicate): 1 Our matching partition elements are: Second BOOM! use \"collections\" actor Main new create(env:Env) => // Create a new empty List of type String let my_list = List[String]() env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0 // Push a String literal onto our empty List my_list.push(\"A single String\") env.out.print(\"Adding one node to our empty list means it now has a size of \" + my_list.size().string() + \".\") // 1 // Get the first element of our List try env.out.print(\"The first (index 0) node has the value: \" + my_list.index(0)?()?.string()) end // A single String // Create a second List from a single String literal let my_second_list = List[String].unit(\"Another String\") // Append the second List to the first my_list.append_list(my_second_list) env.out.print(\"A list created by appending our second single-node list onto our first has size: \" + my_list.size().string()) // 2 env.out.print(\"The List nodes of our first list are now:\") for n in my_list.values() do env.out.print(\"\\t\" + n.string()) end // NOTE: this _moves_ the elements so second_list consequently ends up empty env.out.print(\"Append *moves* the nodes from the second list so that now has \" + my_second_list.size().string() + \" nodes.\") // 0 // Create a third List from a Seq(ence) // (In this case a literal array of Strings) let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"]) env.out.print(\"A list created from an array of three strings has size: \" + my_third_list.size().string()) // 3 for n in my_third_list.values() do env.out.print(\"\\t\" + n.string()) end // Map over the third List, concatenating some \"BOOM!'s\" into a new List let new_list = my_third_list.map[String]({ (n) => n + \" BOOM!\" }) env.out.print(\"Mapping over our three-node list produces a new list of size: \" + new_list.size().string()) // 3 env.out.print(\"Each node-value in the resulting list is now far more exciting:\") for n in new_list.values() do env.out.print(\"\\t\" + n.string()) end // Filter the new list to extract 2 elements let filtered_list = new_list.filter({ (n) => n.string().contains(\"d BOOM!\") }) env.out.print(\"Filtering our three-node list produces a new list of size: \" + filtered_list.size().string()) // 2 for n in filtered_list.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM! end // Partition the filtered list let partitioned_lists = filtered_list.partition({ (n) => n.string().contains(\"Second\") }) env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string()) // 1 env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string()) // 1 env.out.print(\"Our matching partition elements are:\") for n in partitioned_lists._1.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM! end class ref List[A: A] is Seq[A] ref Implements \u00b6 Seq [A] ref Constructors \u00b6 create \u00b6 [Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = 0) : List[A] ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 List [A] ref^ unit \u00b6 [Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^ Parameters \u00b6 a: A Returns \u00b6 List [A] ref^ from \u00b6 [Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^ Parameters \u00b6 seq: Array [A^] ref Returns \u00b6 List [A] ref^ Public Functions \u00b6 reserve \u00b6 [Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val size \u00b6 [Source] Returns the number of items in the list. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = 0) : this->A ? Parameters \u00b6 i: USize val = 0 Returns \u00b6 this->A ? update \u00b6 [Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ? Parameters \u00b6 i: USize val value: A Returns \u00b6 A^ ? index \u00b6 [Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this->ListNode[A] ref ? Parameters \u00b6 i: USize val Returns \u00b6 this-> ListNode [A] ref ? remove \u00b6 [Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ? Parameters \u00b6 i: USize val Returns \u00b6 ListNode [A] ref ? clear \u00b6 [Source] Empties the list. fun ref clear() : None val Returns \u00b6 None val head \u00b6 [Source] Get the head of the list. fun box head() : this->ListNode[A] ref ? Returns \u00b6 this-> ListNode [A] ref ? tail \u00b6 [Source] Get the tail of the list. fun box tail() : this->ListNode[A] ref ? Returns \u00b6 this-> ListNode [A] ref ? prepend_node \u00b6 [Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val Parameters \u00b6 node: ListNode [A] ref Returns \u00b6 None val append_node \u00b6 [Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val Parameters \u00b6 node: ListNode [A] ref Returns \u00b6 None val append_list \u00b6 [Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val Parameters \u00b6 that: List [A] ref Returns \u00b6 None val prepend_list \u00b6 [Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val Parameters \u00b6 that: List [A] ref Returns \u00b6 None val push \u00b6 [Source] Adds a value to the tail of the list. fun ref push( a: A) : None val Parameters \u00b6 a: A Returns \u00b6 None val pop \u00b6 [Source] Removes a value from the tail of the list. fun ref pop() : A^ ? Returns \u00b6 A^ ? unshift \u00b6 [Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val Parameters \u00b6 a: A Returns \u00b6 None val shift \u00b6 [Source] Removes a value from the head of the list. fun ref shift() : A^ ? Returns \u00b6 A^ ? append \u00b6 [Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call Returns \u00b6 None val concat \u00b6 [Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val Parameters \u00b6 iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call Returns \u00b6 None val truncate \u00b6 [Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val Parameters \u00b6 len: USize val Returns \u00b6 None val clone \u00b6 [Source] Clone the list. fun box clone() : List[this->A!] ref^ Returns \u00b6 List [this->A!] ref^ map[B: B] \u00b6 [Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this->A!): B^}[A, B] box) : List[B] ref^ Parameters \u00b6 f: {(this->A!): B^}[A, B] box Returns \u00b6 List [B] ref^ flat_map[B: B] \u00b6 [Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this->A!): List[B]}[A, B] box) : List[B] ref^ Parameters \u00b6 f: {(this->A!): List[B]}[A, B] box Returns \u00b6 List [B] ref^ filter \u00b6 [Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^ Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 List [this->A!] ref^ fold[B: B] \u00b6 [Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this->A!): B^}[A, B] box, acc: B) : B Parameters \u00b6 f: {(B!, this->A!): B^}[A, B] box acc: B Returns \u00b6 B every \u00b6 [Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this->A!): Bool}[A] box) : Bool val Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 Bool val exists \u00b6 [Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this->A!): Bool}[A] box) : Bool val Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 Bool val partition \u00b6 [Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this->A!): Bool}[A] box) : (List[this->A!] ref^ , List[this->A!] ref^) Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 ( List [this->A!] ref^ , List [this->A!] ref^) drop \u00b6 [Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this->A!] ref^ Parameters \u00b6 n: USize val Returns \u00b6 List [this->A!] ref^ take \u00b6 [Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this->A!] ref Parameters \u00b6 n: USize val Returns \u00b6 List [this->A!] ref take_while \u00b6 [Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^ Parameters \u00b6 f: {(this->A!): Bool}[A] box Returns \u00b6 List [this->A!] ref^ reverse \u00b6 [Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this->A!] ref^ Returns \u00b6 List [this->A!] ref^ contains[optional B: (A & HasEq [A!] #read)] \u00b6 [Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A & HasEq[A!] #read)]( a: box->B) : Bool val Parameters \u00b6 a: box->B Returns \u00b6 Bool val nodes \u00b6 [Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListNodes [A, this-> ListNode [A] ref] ref^ rnodes \u00b6 [Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListNodes [A, this-> ListNode [A] ref] ref^ values \u00b6 [Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListValues [A, this-> ListNode [A] ref] ref^ rvalues \u00b6 [Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this->ListNode[A] ref] ref^ Returns \u00b6 ListValues [A, this-> ListNode [A] ref] ref^ Private Functions \u00b6 _map[B: B] \u00b6 [Source] Private helper for map, recursively working with ListNodes. fun box _map[B: B]( ln: this->ListNode[A] ref, f: {(this->A!): B^}[A, B] box, acc: List[B] ref) : List[B] ref^ Parameters \u00b6 ln: this-> ListNode [A] ref f: {(this->A!): B^}[A, B] box acc: List [B] ref Returns \u00b6 List [B] ref^ _flat_map[B: B] \u00b6 [Source] Private helper for flat_map, recursively working with ListNodes. fun box _flat_map[B: B]( ln: this->ListNode[A] ref, f: {(this->A!): List[B]}[A, B] box, acc: List[B] ref) : List[B] ref^ Parameters \u00b6 ln: this-> ListNode [A] ref f: {(this->A!): List[B]}[A, B] box acc: List [B] ref Returns \u00b6 List [B] ref^ _filter \u00b6 [Source] Private helper for filter, recursively working with ListNodes. fun box _filter( ln: this->ListNode[A] ref, f: {(this->A!): Bool}[A] box, acc: List[this->A!] ref) : List[this->A!] ref Parameters \u00b6 ln: this-> ListNode [A] ref f: {(this->A!): Bool}[A] box acc: List [this->A!] ref Returns \u00b6 List [this->A!] ref _fold[B: B] \u00b6 [Source] Private helper for fold, recursively working with ListNodes. fun box _fold[B: B]( ln: this->ListNode[A] ref, f: {(B!, this->A!): B^}[A, B] box, acc: B) : B Parameters \u00b6 ln: this-> ListNode [A] ref f: {(B!, this->A!): B^}[A, B] box acc: B Returns \u00b6 B _every \u00b6 [Source] Private helper for every, recursively working with ListNodes. fun box _every( ln: this->ListNode[A] ref, f: {(this->A!): Bool}[A] box) : Bool val Parameters \u00b6 ln: this-> ListNode [A] ref f: {(this->A!): Bool}[A] box Returns \u00b6 Bool val _exists \u00b6 [Source] Private helper for exists, recursively working with ListNodes. fun box _exists( ln: this->ListNode[A] ref, f: {(this->A!): Bool}[A] box) : Bool val Parameters \u00b6 ln: this-> ListNode [A] ref f: {(this->A!): Bool}[A] box Returns \u00b6 Bool val _reverse \u00b6 [Source] Private helper for reverse, recursively working with ListNodes. fun box _reverse( ln: this->ListNode[A] ref, acc: List[this->A!] ref) : List[this->A!] ref^ Parameters \u00b6 ln: this-> ListNode [A] ref acc: List [this->A!] ref Returns \u00b6 List [this->A!] ref^ _contains[optional B: (A & HasEq [A!] #read)] \u00b6 [Source] Private helper for contains, recursively working with ListNodes. fun box _contains[optional B: (A & HasEq[A!] #read)]( ln: this->ListNode[A] ref, a: box->B) : Bool val Parameters \u00b6 ln: this-> ListNode [A] ref a: box->B Returns \u00b6 Bool val _increment \u00b6 [Source] fun ref _increment() : None val Returns \u00b6 None val _decrement \u00b6 [Source] fun ref _decrement() : None val Returns \u00b6 None val _set_head \u00b6 [Source] fun ref _set_head( head': (ListNode[A] ref | None val)) : None val Parameters \u00b6 head': ( ListNode [A] ref | None val) Returns \u00b6 None val _set_tail \u00b6 [Source] fun ref _set_tail( tail': (ListNode[A] ref | None val)) : None val Parameters \u00b6 tail': ( ListNode [A] ref | None val) Returns \u00b6 None val _set_both \u00b6 [Source] fun ref _set_both( node: ListNode[A] ref) : None val Parameters \u00b6 node: ListNode [A] ref Returns \u00b6 None val","title":"class List"},{"location":"collections-List/#list91a-a93","text":"[Source] A doubly linked list. (The following is paraphrased from Wikipedia .) A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. (Implemented in Ponylang via the collections.ListNode class.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders. As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc.","title":"List[A: A]"},{"location":"collections-List/#example-program","text":"There are a lot of functions in List. The following code picks out a few common examples. It outputs: A new empty list has 0 nodes. Adding one node to our empty list means it now has a size of 1. The first (index 0) node has the value: A single String A list created by appending our second single-node list onto our first has size: 2 The List nodes of our first list are now: A single String Another String Append *moves* the nodes from the second list so that now has 0 nodes. A list created from an array of three strings has size: 3 First Second Third Mapping over our three-node list produces a new list of size: 3 Each node-value in the resulting list is now far more exciting: First BOOM! Second BOOM! Third BOOM! Filtering our three-node list produces a new list of size: 2 Second BOOM! Third BOOM! The size of our first partitioned list (matches predicate): 1 The size of our second partitioned list (doesn't match predicate): 1 Our matching partition elements are: Second BOOM! use \"collections\" actor Main new create(env:Env) => // Create a new empty List of type String let my_list = List[String]() env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0 // Push a String literal onto our empty List my_list.push(\"A single String\") env.out.print(\"Adding one node to our empty list means it now has a size of \" + my_list.size().string() + \".\") // 1 // Get the first element of our List try env.out.print(\"The first (index 0) node has the value: \" + my_list.index(0)?()?.string()) end // A single String // Create a second List from a single String literal let my_second_list = List[String].unit(\"Another String\") // Append the second List to the first my_list.append_list(my_second_list) env.out.print(\"A list created by appending our second single-node list onto our first has size: \" + my_list.size().string()) // 2 env.out.print(\"The List nodes of our first list are now:\") for n in my_list.values() do env.out.print(\"\\t\" + n.string()) end // NOTE: this _moves_ the elements so second_list consequently ends up empty env.out.print(\"Append *moves* the nodes from the second list so that now has \" + my_second_list.size().string() + \" nodes.\") // 0 // Create a third List from a Seq(ence) // (In this case a literal array of Strings) let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"]) env.out.print(\"A list created from an array of three strings has size: \" + my_third_list.size().string()) // 3 for n in my_third_list.values() do env.out.print(\"\\t\" + n.string()) end // Map over the third List, concatenating some \"BOOM!'s\" into a new List let new_list = my_third_list.map[String]({ (n) => n + \" BOOM!\" }) env.out.print(\"Mapping over our three-node list produces a new list of size: \" + new_list.size().string()) // 3 env.out.print(\"Each node-value in the resulting list is now far more exciting:\") for n in new_list.values() do env.out.print(\"\\t\" + n.string()) end // Filter the new list to extract 2 elements let filtered_list = new_list.filter({ (n) => n.string().contains(\"d BOOM!\") }) env.out.print(\"Filtering our three-node list produces a new list of size: \" + filtered_list.size().string()) // 2 for n in filtered_list.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM! end // Partition the filtered list let partitioned_lists = filtered_list.partition({ (n) => n.string().contains(\"Second\") }) env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string()) // 1 env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string()) // 1 env.out.print(\"Our matching partition elements are:\") for n in partitioned_lists._1.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM! end class ref List[A: A] is Seq[A] ref","title":"Example program"},{"location":"collections-List/#implements","text":"Seq [A] ref","title":"Implements"},{"location":"collections-List/#constructors","text":"","title":"Constructors"},{"location":"collections-List/#create","text":"[Source] Do nothing, but be compatible with Seq. new ref create( len: USize val = 0) : List[A] ref^","title":"create"},{"location":"collections-List/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"collections-List/#returns","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#unit","text":"[Source] Builds a new list from an element. new ref unit( a: A) : List[A] ref^","title":"unit"},{"location":"collections-List/#parameters_1","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_1","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#from","text":"[Source] Builds a new list from the sequence passed in. new ref from( seq: Array[A^] ref) : List[A] ref^","title":"from"},{"location":"collections-List/#parameters_2","text":"seq: Array [A^] ref","title":"Parameters"},{"location":"collections-List/#returns_2","text":"List [A] ref^","title":"Returns"},{"location":"collections-List/#public-functions","text":"","title":"Public Functions"},{"location":"collections-List/#reserve","text":"[Source] Do nothing, but be compatible with Seq. fun ref reserve( len: USize val) : None val","title":"reserve"},{"location":"collections-List/#parameters_3","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_3","text":"None val","title":"Returns"},{"location":"collections-List/#size","text":"[Source] Returns the number of items in the list. fun box size() : USize val","title":"size"},{"location":"collections-List/#returns_4","text":"USize val","title":"Returns"},{"location":"collections-List/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val = 0) : this->A ?","title":"apply"},{"location":"collections-List/#parameters_4","text":"i: USize val = 0","title":"Parameters"},{"location":"collections-List/#returns_5","text":"this->A ?","title":"Returns"},{"location":"collections-List/#update","text":"[Source] Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. fun ref update( i: USize val, value: A) : A^ ?","title":"update"},{"location":"collections-List/#parameters_5","text":"i: USize val value: A","title":"Parameters"},{"location":"collections-List/#returns_6","text":"A^ ?","title":"Returns"},{"location":"collections-List/#index","text":"[Source] Gets the i-th node, raising an error if the index is out of bounds. fun box index( i: USize val) : this->ListNode[A] ref ?","title":"index"},{"location":"collections-List/#parameters_6","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_7","text":"this-> ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#remove","text":"[Source] Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. fun ref remove( i: USize val) : ListNode[A] ref ?","title":"remove"},{"location":"collections-List/#parameters_7","text":"i: USize val","title":"Parameters"},{"location":"collections-List/#returns_8","text":"ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#clear","text":"[Source] Empties the list. fun ref clear() : None val","title":"clear"},{"location":"collections-List/#returns_9","text":"None val","title":"Returns"},{"location":"collections-List/#head","text":"[Source] Get the head of the list. fun box head() : this->ListNode[A] ref ?","title":"head"},{"location":"collections-List/#returns_10","text":"this-> ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#tail","text":"[Source] Get the tail of the list. fun box tail() : this->ListNode[A] ref ?","title":"tail"},{"location":"collections-List/#returns_11","text":"this-> ListNode [A] ref ?","title":"Returns"},{"location":"collections-List/#prepend_node","text":"[Source] Adds a node to the head of the list. fun ref prepend_node( node: ListNode[A] ref) : None val","title":"prepend_node"},{"location":"collections-List/#parameters_8","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_12","text":"None val","title":"Returns"},{"location":"collections-List/#append_node","text":"[Source] Adds a node to the tail of the list. fun ref append_node( node: ListNode[A] ref) : None val","title":"append_node"},{"location":"collections-List/#parameters_9","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_13","text":"None val","title":"Returns"},{"location":"collections-List/#append_list","text":"[Source] Remove all nodes from that and append them to this. fun ref append_list( that: List[A] ref) : None val","title":"append_list"},{"location":"collections-List/#parameters_10","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_14","text":"None val","title":"Returns"},{"location":"collections-List/#prepend_list","text":"[Source] Remove all nodes from that and prepend them to this. fun ref prepend_list( that: List[A] ref) : None val","title":"prepend_list"},{"location":"collections-List/#parameters_11","text":"that: List [A] ref","title":"Parameters"},{"location":"collections-List/#returns_15","text":"None val","title":"Returns"},{"location":"collections-List/#push","text":"[Source] Adds a value to the tail of the list. fun ref push( a: A) : None val","title":"push"},{"location":"collections-List/#parameters_12","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_16","text":"None val","title":"Returns"},{"location":"collections-List/#pop","text":"[Source] Removes a value from the tail of the list. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-List/#returns_17","text":"A^ ?","title":"Returns"},{"location":"collections-List/#unshift","text":"[Source] Adds a value to the head of the list. fun ref unshift( a: A) : None val","title":"unshift"},{"location":"collections-List/#parameters_13","text":"a: A","title":"Parameters"},{"location":"collections-List/#returns_18","text":"None val","title":"Returns"},{"location":"collections-List/#shift","text":"[Source] Removes a value from the head of the list. fun ref shift() : A^ ?","title":"shift"},{"location":"collections-List/#returns_19","text":"A^ ?","title":"Returns"},{"location":"collections-List/#append","text":"[Source] Append len elements from a sequence, starting from the given offset. fun ref append( seq: (ReadSeq[A] box & ReadElement[A^] box), offset: USize val = 0, len: USize val = call) : None val","title":"append"},{"location":"collections-List/#parameters_14","text":"seq: ( ReadSeq [A] box & ReadElement [A^] box) offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-List/#returns_20","text":"None val","title":"Returns"},{"location":"collections-List/#concat","text":"[Source] Add len iterated elements to the end of the list, starting from the given offset. fun ref concat( iter: Iterator[A^] ref, offset: USize val = 0, len: USize val = call) : None val","title":"concat"},{"location":"collections-List/#parameters_15","text":"iter: Iterator [A^] ref offset: USize val = 0 len: USize val = call","title":"Parameters"},{"location":"collections-List/#returns_21","text":"None val","title":"Returns"},{"location":"collections-List/#truncate","text":"[Source] Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. fun ref truncate( len: USize val) : None val","title":"truncate"},{"location":"collections-List/#parameters_16","text":"len: USize val","title":"Parameters"},{"location":"collections-List/#returns_22","text":"None val","title":"Returns"},{"location":"collections-List/#clone","text":"[Source] Clone the list. fun box clone() : List[this->A!] ref^","title":"clone"},{"location":"collections-List/#returns_23","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list. fun box map[B: B]( f: {(this->A!): B^}[A, B] box) : List[B] ref^","title":"map[B: B]"},{"location":"collections-List/#parameters_17","text":"f: {(this->A!): B^}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_24","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#flat_map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun box flat_map[B: B]( f: {(this->A!): List[B]}[A, B] box) : List[B] ref^","title":"flat_map[B: B]"},{"location":"collections-List/#parameters_18","text":"f: {(this->A!): List[B]}[A, B] box","title":"Parameters"},{"location":"collections-List/#returns_25","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#filter","text":"[Source] Builds a new list with those elements that satisfy a provided predicate. fun box filter( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^","title":"filter"},{"location":"collections-List/#parameters_19","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_26","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#fold91b-b93","text":"[Source] Folds the elements of the list using the supplied function. fun box fold[B: B]( f: {(B!, this->A!): B^}[A, B] box, acc: B) : B","title":"fold[B: B]"},{"location":"collections-List/#parameters_20","text":"f: {(B!, this->A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_27","text":"B","title":"Returns"},{"location":"collections-List/#every","text":"[Source] Returns true if every element satisfies the provided predicate, false otherwise. fun box every( f: {(this->A!): Bool}[A] box) : Bool val","title":"every"},{"location":"collections-List/#parameters_21","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_28","text":"Bool val","title":"Returns"},{"location":"collections-List/#exists","text":"[Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun box exists( f: {(this->A!): Bool}[A] box) : Bool val","title":"exists"},{"location":"collections-List/#parameters_22","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_29","text":"Bool val","title":"Returns"},{"location":"collections-List/#partition","text":"[Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun box partition( f: {(this->A!): Bool}[A] box) : (List[this->A!] ref^ , List[this->A!] ref^)","title":"partition"},{"location":"collections-List/#parameters_23","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_30","text":"( List [this->A!] ref^ , List [this->A!] ref^)","title":"Returns"},{"location":"collections-List/#drop","text":"[Source] Builds a list by dropping the first n elements. fun box drop( n: USize val) : List[this->A!] ref^","title":"drop"},{"location":"collections-List/#parameters_24","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_31","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#take","text":"[Source] Builds a list of the first n elements. fun box take( n: USize val) : List[this->A!] ref","title":"take"},{"location":"collections-List/#parameters_25","text":"n: USize val","title":"Parameters"},{"location":"collections-List/#returns_32","text":"List [this->A!] ref","title":"Returns"},{"location":"collections-List/#take_while","text":"[Source] Builds a list of elements satisfying the provided predicate until one does not. fun box take_while( f: {(this->A!): Bool}[A] box) : List[this->A!] ref^","title":"take_while"},{"location":"collections-List/#parameters_26","text":"f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_33","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#reverse","text":"[Source] Builds a new list by reversing the elements in the list. fun box reverse() : List[this->A!] ref^","title":"reverse"},{"location":"collections-List/#returns_34","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#contains91optional-b-a-haseq91a93-read93","text":"[Source] Returns true if the list contains the provided element, false otherwise. fun box contains[optional B: (A & HasEq[A!] #read)]( a: box->B) : Bool val","title":"contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_27","text":"a: box->B","title":"Parameters"},{"location":"collections-List/#returns_35","text":"Bool val","title":"Returns"},{"location":"collections-List/#nodes","text":"[Source] Return an iterator on the nodes in the list. fun box nodes() : ListNodes[A, this->ListNode[A] ref] ref^","title":"nodes"},{"location":"collections-List/#returns_36","text":"ListNodes [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rnodes","text":"[Source] Return an iterator on the nodes in the list. fun box rnodes() : ListNodes[A, this->ListNode[A] ref] ref^","title":"rnodes"},{"location":"collections-List/#returns_37","text":"ListNodes [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#values","text":"[Source] Return an iterator on the values in the list. fun box values() : ListValues[A, this->ListNode[A] ref] ref^","title":"values"},{"location":"collections-List/#returns_38","text":"ListValues [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#rvalues","text":"[Source] Return an iterator on the values in the list. fun box rvalues() : ListValues[A, this->ListNode[A] ref] ref^","title":"rvalues"},{"location":"collections-List/#returns_39","text":"ListValues [A, this-> ListNode [A] ref] ref^","title":"Returns"},{"location":"collections-List/#private-functions","text":"","title":"Private Functions"},{"location":"collections-List/#_map91b-b93","text":"[Source] Private helper for map, recursively working with ListNodes. fun box _map[B: B]( ln: this->ListNode[A] ref, f: {(this->A!): B^}[A, B] box, acc: List[B] ref) : List[B] ref^","title":"_map[B: B]"},{"location":"collections-List/#parameters_28","text":"ln: this-> ListNode [A] ref f: {(this->A!): B^}[A, B] box acc: List [B] ref","title":"Parameters"},{"location":"collections-List/#returns_40","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#_flat_map91b-b93","text":"[Source] Private helper for flat_map, recursively working with ListNodes. fun box _flat_map[B: B]( ln: this->ListNode[A] ref, f: {(this->A!): List[B]}[A, B] box, acc: List[B] ref) : List[B] ref^","title":"_flat_map[B: B]"},{"location":"collections-List/#parameters_29","text":"ln: this-> ListNode [A] ref f: {(this->A!): List[B]}[A, B] box acc: List [B] ref","title":"Parameters"},{"location":"collections-List/#returns_41","text":"List [B] ref^","title":"Returns"},{"location":"collections-List/#_filter","text":"[Source] Private helper for filter, recursively working with ListNodes. fun box _filter( ln: this->ListNode[A] ref, f: {(this->A!): Bool}[A] box, acc: List[this->A!] ref) : List[this->A!] ref","title":"_filter"},{"location":"collections-List/#parameters_30","text":"ln: this-> ListNode [A] ref f: {(this->A!): Bool}[A] box acc: List [this->A!] ref","title":"Parameters"},{"location":"collections-List/#returns_42","text":"List [this->A!] ref","title":"Returns"},{"location":"collections-List/#_fold91b-b93","text":"[Source] Private helper for fold, recursively working with ListNodes. fun box _fold[B: B]( ln: this->ListNode[A] ref, f: {(B!, this->A!): B^}[A, B] box, acc: B) : B","title":"_fold[B: B]"},{"location":"collections-List/#parameters_31","text":"ln: this-> ListNode [A] ref f: {(B!, this->A!): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-List/#returns_43","text":"B","title":"Returns"},{"location":"collections-List/#_every","text":"[Source] Private helper for every, recursively working with ListNodes. fun box _every( ln: this->ListNode[A] ref, f: {(this->A!): Bool}[A] box) : Bool val","title":"_every"},{"location":"collections-List/#parameters_32","text":"ln: this-> ListNode [A] ref f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_44","text":"Bool val","title":"Returns"},{"location":"collections-List/#_exists","text":"[Source] Private helper for exists, recursively working with ListNodes. fun box _exists( ln: this->ListNode[A] ref, f: {(this->A!): Bool}[A] box) : Bool val","title":"_exists"},{"location":"collections-List/#parameters_33","text":"ln: this-> ListNode [A] ref f: {(this->A!): Bool}[A] box","title":"Parameters"},{"location":"collections-List/#returns_45","text":"Bool val","title":"Returns"},{"location":"collections-List/#_reverse","text":"[Source] Private helper for reverse, recursively working with ListNodes. fun box _reverse( ln: this->ListNode[A] ref, acc: List[this->A!] ref) : List[this->A!] ref^","title":"_reverse"},{"location":"collections-List/#parameters_34","text":"ln: this-> ListNode [A] ref acc: List [this->A!] ref","title":"Parameters"},{"location":"collections-List/#returns_46","text":"List [this->A!] ref^","title":"Returns"},{"location":"collections-List/#_contains91optional-b-a-haseq91a93-read93","text":"[Source] Private helper for contains, recursively working with ListNodes. fun box _contains[optional B: (A & HasEq[A!] #read)]( ln: this->ListNode[A] ref, a: box->B) : Bool val","title":"_contains[optional B: (A &amp; HasEq[A!] #read)]"},{"location":"collections-List/#parameters_35","text":"ln: this-> ListNode [A] ref a: box->B","title":"Parameters"},{"location":"collections-List/#returns_47","text":"Bool val","title":"Returns"},{"location":"collections-List/#_increment","text":"[Source] fun ref _increment() : None val","title":"_increment"},{"location":"collections-List/#returns_48","text":"None val","title":"Returns"},{"location":"collections-List/#_decrement","text":"[Source] fun ref _decrement() : None val","title":"_decrement"},{"location":"collections-List/#returns_49","text":"None val","title":"Returns"},{"location":"collections-List/#_set_head","text":"[Source] fun ref _set_head( head': (ListNode[A] ref | None val)) : None val","title":"_set_head"},{"location":"collections-List/#parameters_36","text":"head': ( ListNode [A] ref | None val)","title":"Parameters"},{"location":"collections-List/#returns_50","text":"None val","title":"Returns"},{"location":"collections-List/#_set_tail","text":"[Source] fun ref _set_tail( tail': (ListNode[A] ref | None val)) : None val","title":"_set_tail"},{"location":"collections-List/#parameters_37","text":"tail': ( ListNode [A] ref | None val)","title":"Parameters"},{"location":"collections-List/#returns_51","text":"None val","title":"Returns"},{"location":"collections-List/#_set_both","text":"[Source] fun ref _set_both( node: ListNode[A] ref) : None val","title":"_set_both"},{"location":"collections-List/#parameters_38","text":"node: ListNode [A] ref","title":"Parameters"},{"location":"collections-List/#returns_52","text":"None val","title":"Returns"},{"location":"collections-ListNode/","text":"ListNode[A: A] \u00b6 [Source] A node in a doubly linked list. (See Ponylang collections.List class for usage examples.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode. Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions. The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes. Example program \u00b6 The functions which are illustrated below are only those which operate on an individual ListNode. It outputs: My node has the item value: My Node item My node has the updated item value: My updated Node item Popped the item from the ListNode The ListNode has no (None) item. use \"collections\" actor Main new create(env:Env) => // Create a new ListNode of type String let my_list_node = ListNode[String](\"My Node item\") try env.out.print(\"My node has the item value: \" + my_list_node.apply()?) // My Node item end // Update the item contained in the ListNode try my_list_node.update(\"My updated Node item\")? env.out.print(\"My node has the updated item value: \" + my_list_node.apply()?) // My updated Node item end // Pop the item from the ListNode try my_list_node.pop()? env.out.print(\"Popped the item from the ListNode\") my_list_node.apply()? // This will error as the item is now None else env.out.print(\"The ListNode has no (None) item.\") end ... ```pony class ref ListNode[A: A] Constructors \u00b6 create \u00b6 [Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = reference) : ListNode[A] ref^ Parameters \u00b6 item: (A | None val) = reference Returns \u00b6 ListNode [A] ref^ Public Functions \u00b6 apply \u00b6 [Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this->A ? Returns \u00b6 this->A ? update \u00b6 [Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ? Parameters \u00b6 value: (A | None val) Returns \u00b6 A^ ? pop \u00b6 [Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ? Returns \u00b6 A^ ? prepend \u00b6 [Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. If the ListNode is not contained within a List the prepend will fail. fun ref prepend( that: ListNode[A] ref) : Bool val Parameters \u00b6 that: ListNode [A] ref Returns \u00b6 Bool val append \u00b6 [Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. If the ListNode is not contained within a List the append will fail. fun ref append( that: ListNode[A] ref) : Bool val Parameters \u00b6 that: ListNode [A] ref Returns \u00b6 Bool val remove \u00b6 [Source] Remove a node from a list. The ListNode must be contained within a List for this to succeed. fun ref remove() : None val Returns \u00b6 None val has_prev \u00b6 [Source] Return true if there is a previous node. fun box has_prev() : Bool val Returns \u00b6 Bool val has_next \u00b6 [Source] Return true if there is a next node. fun box has_next() : Bool val Returns \u00b6 Bool val prev \u00b6 [Source] Return the previous node. fun box prev() : (this->ListNode[A] ref | None val) Returns \u00b6 (this-> ListNode [A] ref | None val) next \u00b6 [Source] Return the next node. fun box next() : (this->ListNode[A] ref | None val) Returns \u00b6 (this-> ListNode [A] ref | None val) Private Functions \u00b6 _set_list \u00b6 [Source] Make this node the only node on the given list. fun ref _set_list( list: List[A] ref) : ListNode[A] ref^ Parameters \u00b6 list: List [A] ref Returns \u00b6 ListNode [A] ref^","title":"class ListNode"},{"location":"collections-ListNode/#listnode91a-a93","text":"[Source] A node in a doubly linked list. (See Ponylang collections.List class for usage examples.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode. Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions. The Ponylang collections.List class is the correct way to create these. Do not attempt to create a Linked List using only ListNodes.","title":"ListNode[A: A]"},{"location":"collections-ListNode/#example-program","text":"The functions which are illustrated below are only those which operate on an individual ListNode. It outputs: My node has the item value: My Node item My node has the updated item value: My updated Node item Popped the item from the ListNode The ListNode has no (None) item. use \"collections\" actor Main new create(env:Env) => // Create a new ListNode of type String let my_list_node = ListNode[String](\"My Node item\") try env.out.print(\"My node has the item value: \" + my_list_node.apply()?) // My Node item end // Update the item contained in the ListNode try my_list_node.update(\"My updated Node item\")? env.out.print(\"My node has the updated item value: \" + my_list_node.apply()?) // My updated Node item end // Pop the item from the ListNode try my_list_node.pop()? env.out.print(\"Popped the item from the ListNode\") my_list_node.apply()? // This will error as the item is now None else env.out.print(\"The ListNode has no (None) item.\") end ... ```pony class ref ListNode[A: A]","title":"Example program"},{"location":"collections-ListNode/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNode/#create","text":"[Source] Create a node. Initially, it is not in any list. new ref create( item: (A | None val) = reference) : ListNode[A] ref^","title":"create"},{"location":"collections-ListNode/#parameters","text":"item: (A | None val) = reference","title":"Parameters"},{"location":"collections-ListNode/#returns","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNode/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNode/#apply","text":"[Source] Return the item, if we have one, otherwise raise an error. fun box apply() : this->A ?","title":"apply"},{"location":"collections-ListNode/#returns_1","text":"this->A ?","title":"Returns"},{"location":"collections-ListNode/#update","text":"[Source] Replace the item and return the previous one. Raise an error if we have no previous value. fun ref update( value: (A | None val)) : A^ ?","title":"update"},{"location":"collections-ListNode/#parameters_1","text":"value: (A | None val)","title":"Parameters"},{"location":"collections-ListNode/#returns_2","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#pop","text":"[Source] Remove the item from the node, if we have one, otherwise raise an error. fun ref pop() : A^ ?","title":"pop"},{"location":"collections-ListNode/#returns_3","text":"A^ ?","title":"Returns"},{"location":"collections-ListNode/#prepend","text":"[Source] Prepend a node to this one. If that is already in a list, it is removed before it is prepended. Returns true if that was removed from another list. If the ListNode is not contained within a List the prepend will fail. fun ref prepend( that: ListNode[A] ref) : Bool val","title":"prepend"},{"location":"collections-ListNode/#parameters_2","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#append","text":"[Source] Append a node to this one. If that is already in a list, it is removed before it is appended. Returns true if that was removed from another list. If the ListNode is not contained within a List the append will fail. fun ref append( that: ListNode[A] ref) : Bool val","title":"append"},{"location":"collections-ListNode/#parameters_3","text":"that: ListNode [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#remove","text":"[Source] Remove a node from a list. The ListNode must be contained within a List for this to succeed. fun ref remove() : None val","title":"remove"},{"location":"collections-ListNode/#returns_6","text":"None val","title":"Returns"},{"location":"collections-ListNode/#has_prev","text":"[Source] Return true if there is a previous node. fun box has_prev() : Bool val","title":"has_prev"},{"location":"collections-ListNode/#returns_7","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#has_next","text":"[Source] Return true if there is a next node. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNode/#returns_8","text":"Bool val","title":"Returns"},{"location":"collections-ListNode/#prev","text":"[Source] Return the previous node. fun box prev() : (this->ListNode[A] ref | None val)","title":"prev"},{"location":"collections-ListNode/#returns_9","text":"(this-> ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#next","text":"[Source] Return the next node. fun box next() : (this->ListNode[A] ref | None val)","title":"next"},{"location":"collections-ListNode/#returns_10","text":"(this-> ListNode [A] ref | None val)","title":"Returns"},{"location":"collections-ListNode/#private-functions","text":"","title":"Private Functions"},{"location":"collections-ListNode/#_set_list","text":"[Source] Make this node the only node on the given list. fun ref _set_list( list: List[A] ref) : ListNode[A] ref^","title":"_set_list"},{"location":"collections-ListNode/#parameters_4","text":"list: List [A] ref","title":"Parameters"},{"location":"collections-ListNode/#returns_11","text":"ListNode [A] ref^","title":"Returns"},{"location":"collections-ListNodes/","text":"ListNodes[A: A, N: ListNode [A] #read] \u00b6 [Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref Implements \u00b6 Iterator [N] ref Constructors \u00b6 create \u00b6 [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListNodes[A, N] ref^ Parameters \u00b6 head: (N | None val) reverse: Bool val = false Returns \u00b6 ListNodes [A, N] ref^ Public Functions \u00b6 has_next \u00b6 [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Get the list node and replace it with the next one. fun ref next() : N ? Returns \u00b6 N ?","title":"class ListNodes"},{"location":"collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93","text":"[Source] Iterate over the nodes in a list. class ref ListNodes[A: A, N: ListNode[A] #read] is Iterator[N] ref","title":"ListNodes[A: A, N: ListNode[A] #read]"},{"location":"collections-ListNodes/#implements","text":"Iterator [N] ref","title":"Implements"},{"location":"collections-ListNodes/#constructors","text":"","title":"Constructors"},{"location":"collections-ListNodes/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListNodes[A, N] ref^","title":"create"},{"location":"collections-ListNodes/#parameters","text":"head: (N | None val) reverse: Bool val = false","title":"Parameters"},{"location":"collections-ListNodes/#returns","text":"ListNodes [A, N] ref^","title":"Returns"},{"location":"collections-ListNodes/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListNodes/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListNodes/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListNodes/#next","text":"[Source] Get the list node and replace it with the next one. fun ref next() : N ?","title":"next"},{"location":"collections-ListNodes/#returns_2","text":"N ?","title":"Returns"},{"location":"collections-ListValues/","text":"ListValues[A: A, N: ListNode [A] #read] \u00b6 [Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N->A] ref Implements \u00b6 Iterator [N->A] ref Constructors \u00b6 create \u00b6 [Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListValues[A, N] ref^ Parameters \u00b6 head: (N | None val) reverse: Bool val = false Returns \u00b6 ListValues [A, N] ref^ Public Functions \u00b6 has_next \u00b6 [Source] If we have a list node, we have more values. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Get the value of the list node and replace it with the next one. fun ref next() : N->A ? Returns \u00b6 N->A ?","title":"class ListValues"},{"location":"collections-ListValues/#listvalues91a-a-n-listnode91a93-read93","text":"[Source] Iterate over the values in a list. class ref ListValues[A: A, N: ListNode[A] #read] is Iterator[N->A] ref","title":"ListValues[A: A, N: ListNode[A] #read]"},{"location":"collections-ListValues/#implements","text":"Iterator [N->A] ref","title":"Implements"},{"location":"collections-ListValues/#constructors","text":"","title":"Constructors"},{"location":"collections-ListValues/#create","text":"[Source] Keep the next list node to be examined. new ref create( head: (N | None val), reverse: Bool val = false) : ListValues[A, N] ref^","title":"create"},{"location":"collections-ListValues/#parameters","text":"head: (N | None val) reverse: Bool val = false","title":"Parameters"},{"location":"collections-ListValues/#returns","text":"ListValues [A, N] ref^","title":"Returns"},{"location":"collections-ListValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-ListValues/#has_next","text":"[Source] If we have a list node, we have more values. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-ListValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-ListValues/#next","text":"[Source] Get the value of the list node and replace it with the next one. fun ref next() : N->A ?","title":"next"},{"location":"collections-ListValues/#returns_2","text":"N->A ?","title":"Returns"},{"location":"collections-Map/","text":"Map[K: ( Hashable #read & Equatable [K] #read), V: V] \u00b6 [Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read & Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref Type Alias For \u00b6 HashMap [K, V, HashEq [K] val] ref","title":"type Map"},{"location":"collections-Map/#map91k-hashable-read-equatable91k93-read-v-v93","text":"[Source] This is a map that uses structural equality on the key. type Map[K: (Hashable #read & Equatable[K] #read), V: V] is HashMap[K, V, HashEq[K] val] ref","title":"Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"},{"location":"collections-Map/#type-alias-for","text":"HashMap [K, V, HashEq [K] val] ref","title":"Type Alias For"},{"location":"collections-MapIs/","text":"MapIs[K: K, V: V] \u00b6 [Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref Type Alias For \u00b6 HashMap [K, V, HashIs [K] val] ref","title":"type MapIs"},{"location":"collections-MapIs/#mapis91k-k-v-v93","text":"[Source] This is a map that uses identity comparison on the key. type MapIs[K: K, V: V] is HashMap[K, V, HashIs[K] val] ref","title":"MapIs[K: K, V: V]"},{"location":"collections-MapIs/#type-alias-for","text":"HashMap [K, V, HashIs [K] val] ref","title":"Type Alias For"},{"location":"collections-MapKeys/","text":"MapKeys[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] \u00b6 [Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->K] ref Implements \u00b6 Iterator [M->K] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^ Parameters \u00b6 map: M Returns \u00b6 MapKeys [K, V, H, M] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M->K ? Returns \u00b6 M->K ?","title":"class MapKeys"},{"location":"collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the keys in a map. class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->K] ref","title":"MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapKeys/#implements","text":"Iterator [M->K] ref","title":"Implements"},{"location":"collections-MapKeys/#constructors","text":"","title":"Constructors"},{"location":"collections-MapKeys/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapKeys[K, V, H, M] ref^","title":"create"},{"location":"collections-MapKeys/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapKeys/#returns","text":"MapKeys [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapKeys/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapKeys/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapKeys/#next","text":"[Source] Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. fun ref next() : M->K ?","title":"next"},{"location":"collections-MapKeys/#returns_2","text":"M->K ?","title":"Returns"},{"location":"collections-MapPairs/","text":"MapPairs[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] \u00b6 [Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M->K , M->V)] ref Implements \u00b6 Iterator [(M->K , M->V)] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^ Parameters \u00b6 map: M Returns \u00b6 MapPairs [K, V, H, M] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M->K , M->V) ? Returns \u00b6 (M->K , M->V) ?","title":"class MapPairs"},{"location":"collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the keys and values in a map. class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M->K , M->V)] ref","title":"MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapPairs/#implements","text":"Iterator [(M->K , M->V)] ref","title":"Implements"},{"location":"collections-MapPairs/#constructors","text":"","title":"Constructors"},{"location":"collections-MapPairs/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapPairs[K, V, H, M] ref^","title":"create"},{"location":"collections-MapPairs/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapPairs/#returns","text":"MapPairs [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapPairs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapPairs/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapPairs/#next","text":"[Source] Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. fun ref next() : (M->K , M->V) ?","title":"next"},{"location":"collections-MapPairs/#returns_2","text":"(M->K , M->V) ?","title":"Returns"},{"location":"collections-MapValues/","text":"MapValues[K: K, V: V, H: HashFunction [K] val, M: HashMap [K, V, H] #read] \u00b6 [Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->V] ref Implements \u00b6 Iterator [M->V] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^ Parameters \u00b6 map: M Returns \u00b6 MapValues [K, V, H, M] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M->V ? Returns \u00b6 M->V ?","title":"class MapValues"},{"location":"collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93","text":"[Source] An iterator over the values in a map. class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->V] ref","title":"MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"},{"location":"collections-MapValues/#implements","text":"Iterator [M->V] ref","title":"Implements"},{"location":"collections-MapValues/#constructors","text":"","title":"Constructors"},{"location":"collections-MapValues/#create","text":"[Source] Creates an iterator for the given map. new ref create( map: M) : MapValues[K, V, H, M] ref^","title":"create"},{"location":"collections-MapValues/#parameters","text":"map: M","title":"Parameters"},{"location":"collections-MapValues/#returns","text":"MapValues [K, V, H, M] ref^","title":"Returns"},{"location":"collections-MapValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MapValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the map. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-MapValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MapValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : M->V ?","title":"next"},{"location":"collections-MapValues/#returns_2","text":"M->V ?","title":"Returns"},{"location":"collections-MaxHeap/","text":"MaxHeap[A: Comparable [A] #read] \u00b6 [Source] type MaxHeap[A: Comparable[A] #read] is BinaryHeap[A, MaxHeapPriority[A] val] ref Type Alias For \u00b6 BinaryHeap [A, MaxHeapPriority [A] val] ref","title":"type MaxHeap"},{"location":"collections-MaxHeap/#maxheap91a-comparable91a93-read93","text":"[Source] type MaxHeap[A: Comparable[A] #read] is BinaryHeap[A, MaxHeapPriority[A] val] ref","title":"MaxHeap[A: Comparable[A] #read]"},{"location":"collections-MaxHeap/#type-alias-for","text":"BinaryHeap [A, MaxHeapPriority [A] val] ref","title":"Type Alias For"},{"location":"collections-MaxHeapPriority/","text":"MaxHeapPriority[A: Comparable [A] #read] \u00b6 [Source] primitive val MaxHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val Implements \u00b6 _BinaryHeapPriority [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : MaxHeapPriority[A] val^ Returns \u00b6 MaxHeapPriority [A] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( x: A, y: A) : Bool val Parameters \u00b6 x: A y: A Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: MaxHeapPriority[A] val) : Bool val Parameters \u00b6 that: MaxHeapPriority [A] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MaxHeapPriority[A] val) : Bool val Parameters \u00b6 that: MaxHeapPriority [A] val Returns \u00b6 Bool val","title":"primitive MaxHeapPriority"},{"location":"collections-MaxHeapPriority/#maxheappriority91a-comparable91a93-read93","text":"[Source] primitive val MaxHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val","title":"MaxHeapPriority[A: Comparable[A] #read]"},{"location":"collections-MaxHeapPriority/#implements","text":"_BinaryHeapPriority [A] val","title":"Implements"},{"location":"collections-MaxHeapPriority/#constructors","text":"","title":"Constructors"},{"location":"collections-MaxHeapPriority/#create","text":"[Source] new val create() : MaxHeapPriority[A] val^","title":"create"},{"location":"collections-MaxHeapPriority/#returns","text":"MaxHeapPriority [A] val^","title":"Returns"},{"location":"collections-MaxHeapPriority/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MaxHeapPriority/#apply","text":"[Source] fun box apply( x: A, y: A) : Bool val","title":"apply"},{"location":"collections-MaxHeapPriority/#parameters","text":"x: A y: A","title":"Parameters"},{"location":"collections-MaxHeapPriority/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MaxHeapPriority/#eq","text":"[Source] fun box eq( that: MaxHeapPriority[A] val) : Bool val","title":"eq"},{"location":"collections-MaxHeapPriority/#parameters_1","text":"that: MaxHeapPriority [A] val","title":"Parameters"},{"location":"collections-MaxHeapPriority/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-MaxHeapPriority/#ne","text":"[Source] fun box ne( that: MaxHeapPriority[A] val) : Bool val","title":"ne"},{"location":"collections-MaxHeapPriority/#parameters_2","text":"that: MaxHeapPriority [A] val","title":"Parameters"},{"location":"collections-MaxHeapPriority/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-MinHeap/","text":"MinHeap[A: Comparable [A] #read] \u00b6 [Source] type MinHeap[A: Comparable[A] #read] is BinaryHeap[A, MinHeapPriority[A] val] ref Type Alias For \u00b6 BinaryHeap [A, MinHeapPriority [A] val] ref","title":"type MinHeap"},{"location":"collections-MinHeap/#minheap91a-comparable91a93-read93","text":"[Source] type MinHeap[A: Comparable[A] #read] is BinaryHeap[A, MinHeapPriority[A] val] ref","title":"MinHeap[A: Comparable[A] #read]"},{"location":"collections-MinHeap/#type-alias-for","text":"BinaryHeap [A, MinHeapPriority [A] val] ref","title":"Type Alias For"},{"location":"collections-MinHeapPriority/","text":"MinHeapPriority[A: Comparable [A] #read] \u00b6 [Source] primitive val MinHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val Implements \u00b6 _BinaryHeapPriority [A] val Constructors \u00b6 create \u00b6 [Source] new val create() : MinHeapPriority[A] val^ Returns \u00b6 MinHeapPriority [A] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( x: A, y: A) : Bool val Parameters \u00b6 x: A y: A Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: MinHeapPriority[A] val) : Bool val Parameters \u00b6 that: MinHeapPriority [A] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MinHeapPriority[A] val) : Bool val Parameters \u00b6 that: MinHeapPriority [A] val Returns \u00b6 Bool val","title":"primitive MinHeapPriority"},{"location":"collections-MinHeapPriority/#minheappriority91a-comparable91a93-read93","text":"[Source] primitive val MinHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] val","title":"MinHeapPriority[A: Comparable[A] #read]"},{"location":"collections-MinHeapPriority/#implements","text":"_BinaryHeapPriority [A] val","title":"Implements"},{"location":"collections-MinHeapPriority/#constructors","text":"","title":"Constructors"},{"location":"collections-MinHeapPriority/#create","text":"[Source] new val create() : MinHeapPriority[A] val^","title":"create"},{"location":"collections-MinHeapPriority/#returns","text":"MinHeapPriority [A] val^","title":"Returns"},{"location":"collections-MinHeapPriority/#public-functions","text":"","title":"Public Functions"},{"location":"collections-MinHeapPriority/#apply","text":"[Source] fun box apply( x: A, y: A) : Bool val","title":"apply"},{"location":"collections-MinHeapPriority/#parameters","text":"x: A y: A","title":"Parameters"},{"location":"collections-MinHeapPriority/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-MinHeapPriority/#eq","text":"[Source] fun box eq( that: MinHeapPriority[A] val) : Bool val","title":"eq"},{"location":"collections-MinHeapPriority/#parameters_1","text":"that: MinHeapPriority [A] val","title":"Parameters"},{"location":"collections-MinHeapPriority/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-MinHeapPriority/#ne","text":"[Source] fun box ne( that: MinHeapPriority[A] val) : Bool val","title":"ne"},{"location":"collections-MinHeapPriority/#parameters_2","text":"that: MinHeapPriority [A] val","title":"Parameters"},{"location":"collections-MinHeapPriority/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-Range/","text":"Range[optional A: ( Real [A] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left < previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print(\"will this ever end?\") env.err.print(\"no, never!\") end When using Range with floating point types ( F32 and F64 ) inc steps < 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( min: A, max: A, inc: A = 1) : Range[A] ref^ Parameters \u00b6 min: A max: A inc: A = 1 Returns \u00b6 Range [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A Returns \u00b6 A rewind \u00b6 [Source] fun ref rewind() : None val Returns \u00b6 None val is_infinite \u00b6 [Source] fun box is_infinite() : Bool val Returns \u00b6 Bool val","title":"class Range"},{"location":"collections-Range/#range91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Produces [min, max) with a step of inc for any Number type. // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end Supports min being smaller than max with negative inc but only for signed integer types and floats: var previous = 11 for left in Range[I64](10, -5, -1) do if not (left < previous) then error end previous = left end If the step is not moving min towards max or if it is 0 , the Range is considered infinite and iterating over it will never terminate: let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print(\"will this ever end?\") env.err.print(\"no, never!\") end When using Range with floating point types ( F32 and F64 ) inc steps < 1.0 are possible. If any of the arguments contains NaN , +Inf or -Inf the range is considered infinite as operations on any of them won't move min towards max . The actual values produced by such a Range are determined by what IEEE 754 defines as the result of min + inc : for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end class ref Range[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Range/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Range/#constructors","text":"","title":"Constructors"},{"location":"collections-Range/#create","text":"[Source] new ref create( min: A, max: A, inc: A = 1) : Range[A] ref^","title":"create"},{"location":"collections-Range/#parameters","text":"min: A max: A inc: A = 1","title":"Parameters"},{"location":"collections-Range/#returns","text":"Range [A] ref^","title":"Returns"},{"location":"collections-Range/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Range/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Range/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Range/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Range/#returns_2","text":"A","title":"Returns"},{"location":"collections-Range/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Range/#returns_3","text":"None val","title":"Returns"},{"location":"collections-Range/#is_infinite","text":"[Source] fun box is_infinite() : Bool val","title":"is_infinite"},{"location":"collections-Range/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/","text":"Reverse[optional A: ( Real [A] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] Produces a decreasing range [max, min] with step dec , for any Number type. (i.e. the reverse of Range ) Example program: use \"collections\" actor Main new create(env: Env) => for e in Reverse(10, 2, 2) do env.out.print(e.string()) end Which outputs: 10 8 6 4 2 If dec is 0, produces an infinite series of max . If dec is negative, produces a range with max as the only value. class ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( max: A, min: A, dec: A = 1) : Reverse[A] ref^ Parameters \u00b6 max: A min: A dec: A = 1 Returns \u00b6 Reverse [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A Returns \u00b6 A rewind \u00b6 [Source] fun ref rewind() : None val Returns \u00b6 None val","title":"class Reverse"},{"location":"collections-Reverse/#reverse91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] Produces a decreasing range [max, min] with step dec , for any Number type. (i.e. the reverse of Range ) Example program: use \"collections\" actor Main new create(env: Env) => for e in Reverse(10, 2, 2) do env.out.print(e.string()) end Which outputs: 10 8 6 4 2 If dec is 0, produces an infinite series of max . If dec is negative, produces a range with max as the only value. class ref Reverse[optional A: (Real[A] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] is Iterator[A] ref","title":"Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"collections-Reverse/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"collections-Reverse/#constructors","text":"","title":"Constructors"},{"location":"collections-Reverse/#create","text":"[Source] new ref create( max: A, min: A, dec: A = 1) : Reverse[A] ref^","title":"create"},{"location":"collections-Reverse/#parameters","text":"max: A min: A dec: A = 1","title":"Parameters"},{"location":"collections-Reverse/#returns","text":"Reverse [A] ref^","title":"Returns"},{"location":"collections-Reverse/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Reverse/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-Reverse/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-Reverse/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"collections-Reverse/#returns_2","text":"A","title":"Returns"},{"location":"collections-Reverse/#rewind","text":"[Source] fun ref rewind() : None val","title":"rewind"},{"location":"collections-Reverse/#returns_3","text":"None val","title":"Returns"},{"location":"collections-RingBuffer/","text":"RingBuffer[A: A] \u00b6 [Source] A ring buffer. class ref RingBuffer[A: A] Constructors \u00b6 create \u00b6 [Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^ Parameters \u00b6 len: USize val Returns \u00b6 RingBuffer [A] ref^ Public Functions \u00b6 head \u00b6 [Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ? Returns \u00b6 USize val ? size \u00b6 [Source] The number of elements that have been added to the ring. fun box size() : USize val Returns \u00b6 USize val space \u00b6 [Source] The available space in the ring. fun box space() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this->A ? Parameters \u00b6 i: USize val Returns \u00b6 this->A ? push \u00b6 [Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val Parameters \u00b6 value: A Returns \u00b6 Bool val clear \u00b6 [Source] Clear the queue. fun ref clear() : None val Returns \u00b6 None val","title":"class RingBuffer"},{"location":"collections-RingBuffer/#ringbuffer91a-a93","text":"[Source] A ring buffer. class ref RingBuffer[A: A]","title":"RingBuffer[A: A]"},{"location":"collections-RingBuffer/#constructors","text":"","title":"Constructors"},{"location":"collections-RingBuffer/#create","text":"[Source] Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. new ref create( len: USize val) : RingBuffer[A] ref^","title":"create"},{"location":"collections-RingBuffer/#parameters","text":"len: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns","text":"RingBuffer [A] ref^","title":"Returns"},{"location":"collections-RingBuffer/#public-functions","text":"","title":"Public Functions"},{"location":"collections-RingBuffer/#head","text":"[Source] The first read that will succeed. If nothing has been written to the ring, this will raise an error. fun box head() : USize val ?","title":"head"},{"location":"collections-RingBuffer/#returns_1","text":"USize val ?","title":"Returns"},{"location":"collections-RingBuffer/#size","text":"[Source] The number of elements that have been added to the ring. fun box size() : USize val","title":"size"},{"location":"collections-RingBuffer/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#space","text":"[Source] The available space in the ring. fun box space() : USize val","title":"space"},{"location":"collections-RingBuffer/#returns_3","text":"USize val","title":"Returns"},{"location":"collections-RingBuffer/#apply","text":"[Source] Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. fun box apply( i: USize val) : this->A ?","title":"apply"},{"location":"collections-RingBuffer/#parameters_1","text":"i: USize val","title":"Parameters"},{"location":"collections-RingBuffer/#returns_4","text":"this->A ?","title":"Returns"},{"location":"collections-RingBuffer/#push","text":"[Source] Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. fun ref push( value: A) : Bool val","title":"push"},{"location":"collections-RingBuffer/#parameters_2","text":"value: A","title":"Parameters"},{"location":"collections-RingBuffer/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-RingBuffer/#clear","text":"[Source] Clear the queue. fun ref clear() : None val","title":"clear"},{"location":"collections-RingBuffer/#returns_6","text":"None val","title":"Returns"},{"location":"collections-Set/","text":"Set[A: ( Hashable #read & Equatable [A] #read)] \u00b6 [Source] type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref Type Alias For \u00b6 HashSet [A, HashEq [A] val] ref","title":"type Set"},{"location":"collections-Set/#set91a-hashable-read-equatable91a93-read93","text":"[Source] type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A] val] ref","title":"Set[A: (Hashable #read &amp; Equatable[A] #read)]"},{"location":"collections-Set/#type-alias-for","text":"HashSet [A, HashEq [A] val] ref","title":"Type Alias For"},{"location":"collections-SetIs/","text":"SetIs[A: A] \u00b6 [Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref Type Alias For \u00b6 HashSet [A, HashIs [A!] val] ref","title":"type SetIs"},{"location":"collections-SetIs/#setis91a-a93","text":"[Source] type SetIs[A: A] is HashSet[A, HashIs[A!] val] ref","title":"SetIs[A: A]"},{"location":"collections-SetIs/#type-alias-for","text":"HashSet [A, HashIs [A!] val] ref","title":"Type Alias For"},{"location":"collections-SetValues/","text":"SetValues[A: A, H: HashFunction [A!] val, S: HashSet [A, H] #read] \u00b6 [Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S->A] ref Implements \u00b6 Iterator [S->A] ref Constructors \u00b6 create \u00b6 [Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^ Parameters \u00b6 set: S Returns \u00b6 SetValues [A, H, S] ref^ Public Functions \u00b6 has_next \u00b6 [Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S->A ? Returns \u00b6 S->A ?","title":"class SetValues"},{"location":"collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h93-read93","text":"[Source] An iterator over the values in a set. class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S->A] ref","title":"SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"},{"location":"collections-SetValues/#implements","text":"Iterator [S->A] ref","title":"Implements"},{"location":"collections-SetValues/#constructors","text":"","title":"Constructors"},{"location":"collections-SetValues/#create","text":"[Source] Creates an iterator for the given set. new ref create( set: S) : SetValues[A, H, S] ref^","title":"create"},{"location":"collections-SetValues/#parameters","text":"set: S","title":"Parameters"},{"location":"collections-SetValues/#returns","text":"SetValues [A, H, S] ref^","title":"Returns"},{"location":"collections-SetValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-SetValues/#has_next","text":"[Source] True if it believes there are remaining entries. May not be right if values were added or removed from the set. fun box has_next() : Bool val","title":"has_next"},{"location":"collections-SetValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-SetValues/#next","text":"[Source] Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. fun ref next() : S->A ?","title":"next"},{"location":"collections-SetValues/#returns_2","text":"S->A ?","title":"Returns"},{"location":"collections-Sort/","text":"Sort[A: Seq [B] ref, B: Comparable [B] #read] \u00b6 [Source] Implementation of dual-pivot quicksort. It operates in-place on the provided Seq, using a small amount of additional memory. The nature of the element-realation is expressed via the supplied comparator. (The following is paraphrased from Wikipedia .) Quicksort is a common implementation of a sort algorithm which can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Multi-pivot implementations (of which dual-pivot is one) make efficient use of modern processor caches. Example program \u00b6 The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"), and sorts it in place alphabetically using the default String Comparator. It outputs: first second third use \"collections\" actor Main new create(env:Env) => let array = [ \"third\"; \"second\"; \"first\" ] let sorted_array = Sort[Array[String], String](array) for e in sorted_array.values() do env.out.print(e) // prints \"first \\n second \\n third\" end ``` ```pony primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read] Constructors \u00b6 create \u00b6 [Source] new val create() : Sort[A, B] val^ Returns \u00b6 Sort [A, B] val^ Public Functions \u00b6 apply \u00b6 [Source] Sort the given seq. fun box apply( a: A) : A^ Parameters \u00b6 a: A Returns \u00b6 A^ eq \u00b6 [Source] fun box eq( that: Sort[A, B] val) : Bool val Parameters \u00b6 that: Sort [A, B] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Sort[A, B] val) : Bool val Parameters \u00b6 that: Sort [A, B] val Returns \u00b6 Bool val Private Functions \u00b6 _sort \u00b6 [Source] fun box _sort( a: A, lo: ISize val, hi: ISize val) : None val ? Parameters \u00b6 a: A lo: ISize val hi: ISize val Returns \u00b6 None val ? _swap \u00b6 [Source] fun box _swap( a: A, i: ISize val, j: ISize val) : None val ? Parameters \u00b6 a: A i: ISize val j: ISize val Returns \u00b6 None val ?","title":"primitive Sort"},{"location":"collections-Sort/#sort91a-seq91b93-ref-b-comparable91b93-read93","text":"[Source] Implementation of dual-pivot quicksort. It operates in-place on the provided Seq, using a small amount of additional memory. The nature of the element-realation is expressed via the supplied comparator. (The following is paraphrased from Wikipedia .) Quicksort is a common implementation of a sort algorithm which can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Multi-pivot implementations (of which dual-pivot is one) make efficient use of modern processor caches.","title":"Sort[A: Seq[B] ref, B: Comparable[B] #read]"},{"location":"collections-Sort/#example-program","text":"The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"), and sorts it in place alphabetically using the default String Comparator. It outputs: first second third use \"collections\" actor Main new create(env:Env) => let array = [ \"third\"; \"second\"; \"first\" ] let sorted_array = Sort[Array[String], String](array) for e in sorted_array.values() do env.out.print(e) // prints \"first \\n second \\n third\" end ``` ```pony primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]","title":"Example program"},{"location":"collections-Sort/#constructors","text":"","title":"Constructors"},{"location":"collections-Sort/#create","text":"[Source] new val create() : Sort[A, B] val^","title":"create"},{"location":"collections-Sort/#returns","text":"Sort [A, B] val^","title":"Returns"},{"location":"collections-Sort/#public-functions","text":"","title":"Public Functions"},{"location":"collections-Sort/#apply","text":"[Source] Sort the given seq. fun box apply( a: A) : A^","title":"apply"},{"location":"collections-Sort/#parameters","text":"a: A","title":"Parameters"},{"location":"collections-Sort/#returns_1","text":"A^","title":"Returns"},{"location":"collections-Sort/#eq","text":"[Source] fun box eq( that: Sort[A, B] val) : Bool val","title":"eq"},{"location":"collections-Sort/#parameters_1","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#ne","text":"[Source] fun box ne( that: Sort[A, B] val) : Bool val","title":"ne"},{"location":"collections-Sort/#parameters_2","text":"that: Sort [A, B] val","title":"Parameters"},{"location":"collections-Sort/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-Sort/#private-functions","text":"","title":"Private Functions"},{"location":"collections-Sort/#_sort","text":"[Source] fun box _sort( a: A, lo: ISize val, hi: ISize val) : None val ?","title":"_sort"},{"location":"collections-Sort/#parameters_3","text":"a: A lo: ISize val hi: ISize val","title":"Parameters"},{"location":"collections-Sort/#returns_4","text":"None val ?","title":"Returns"},{"location":"collections-Sort/#_swap","text":"[Source] fun box _swap( a: A, i: ISize val, j: ISize val) : None val ?","title":"_swap"},{"location":"collections-Sort/#parameters_4","text":"a: A i: ISize val j: ISize val","title":"Parameters"},{"location":"collections-Sort/#returns_5","text":"None val ?","title":"Returns"},{"location":"collections-_BinaryHeapPriority/","text":"_BinaryHeapPriority[A: Comparable [A] #read] \u00b6 [Source] interface val _BinaryHeapPriority[A: Comparable[A] #read] Constructors \u00b6 create \u00b6 [Source] new val create() : _BinaryHeapPriority[A] val^ Returns \u00b6 _BinaryHeapPriority [A] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( x: A, y: A) : Bool val Parameters \u00b6 x: A y: A Returns \u00b6 Bool val","title":"interface _BinaryHeapPriority"},{"location":"collections-_BinaryHeapPriority/#_binaryheappriority91a-comparable91a93-read93","text":"[Source] interface val _BinaryHeapPriority[A: Comparable[A] #read]","title":"_BinaryHeapPriority[A: Comparable[A] #read]"},{"location":"collections-_BinaryHeapPriority/#constructors","text":"","title":"Constructors"},{"location":"collections-_BinaryHeapPriority/#create","text":"[Source] new val create() : _BinaryHeapPriority[A] val^","title":"create"},{"location":"collections-_BinaryHeapPriority/#returns","text":"_BinaryHeapPriority [A] val^","title":"Returns"},{"location":"collections-_BinaryHeapPriority/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_BinaryHeapPriority/#apply","text":"[Source] fun box apply( x: A, y: A) : Bool val","title":"apply"},{"location":"collections-_BinaryHeapPriority/#parameters","text":"x: A y: A","title":"Parameters"},{"location":"collections-_BinaryHeapPriority/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapDeleted/","text":"_MapDeleted \u00b6 [Source] primitive val _MapDeleted Constructors \u00b6 create \u00b6 [Source] new val create() : _MapDeleted val^ Returns \u00b6 _MapDeleted val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _MapDeleted val) : Bool val Parameters \u00b6 that: _MapDeleted val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _MapDeleted val) : Bool val Parameters \u00b6 that: _MapDeleted val Returns \u00b6 Bool val","title":"primitive _MapDeleted"},{"location":"collections-_MapDeleted/#_mapdeleted","text":"[Source] primitive val _MapDeleted","title":"_MapDeleted"},{"location":"collections-_MapDeleted/#constructors","text":"","title":"Constructors"},{"location":"collections-_MapDeleted/#create","text":"[Source] new val create() : _MapDeleted val^","title":"create"},{"location":"collections-_MapDeleted/#returns","text":"_MapDeleted val^","title":"Returns"},{"location":"collections-_MapDeleted/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_MapDeleted/#eq","text":"[Source] fun box eq( that: _MapDeleted val) : Bool val","title":"eq"},{"location":"collections-_MapDeleted/#parameters","text":"that: _MapDeleted val","title":"Parameters"},{"location":"collections-_MapDeleted/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapDeleted/#ne","text":"[Source] fun box ne( that: _MapDeleted val) : Bool val","title":"ne"},{"location":"collections-_MapDeleted/#parameters_1","text":"that: _MapDeleted val","title":"Parameters"},{"location":"collections-_MapDeleted/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-_MapEmpty/","text":"_MapEmpty \u00b6 [Source] primitive val _MapEmpty Constructors \u00b6 create \u00b6 [Source] new val create() : _MapEmpty val^ Returns \u00b6 _MapEmpty val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _MapEmpty val) : Bool val Parameters \u00b6 that: _MapEmpty val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _MapEmpty val) : Bool val Parameters \u00b6 that: _MapEmpty val Returns \u00b6 Bool val","title":"primitive _MapEmpty"},{"location":"collections-_MapEmpty/#_mapempty","text":"[Source] primitive val _MapEmpty","title":"_MapEmpty"},{"location":"collections-_MapEmpty/#constructors","text":"","title":"Constructors"},{"location":"collections-_MapEmpty/#create","text":"[Source] new val create() : _MapEmpty val^","title":"create"},{"location":"collections-_MapEmpty/#returns","text":"_MapEmpty val^","title":"Returns"},{"location":"collections-_MapEmpty/#public-functions","text":"","title":"Public Functions"},{"location":"collections-_MapEmpty/#eq","text":"[Source] fun box eq( that: _MapEmpty val) : Bool val","title":"eq"},{"location":"collections-_MapEmpty/#parameters","text":"that: _MapEmpty val","title":"Parameters"},{"location":"collections-_MapEmpty/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-_MapEmpty/#ne","text":"[Source] fun box ne( that: _MapEmpty val) : Bool val","title":"ne"},{"location":"collections-_MapEmpty/#parameters_1","text":"that: _MapEmpty val","title":"Parameters"},{"location":"collections-_MapEmpty/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-persistent--index/","text":"Persistent Collections Package \u00b6 List - A persistent list with functional transformations. Map - A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju. Set - A persistent set implemented as a persistent map of an alias of a type to itself. Vec - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell. Public Types \u00b6 class Vec class VecKeys class VecValues class VecPairs type Set type SetIs class HashSet type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs type List primitive Lists primitive Nil class Cons primitive CollisionHash Private Types \u00b6 interface _MapIter type _VecSubNodes class _VecNode type _Map class _OpMapUpdate class _OpMapRemove class _MapEntry class _MapCollisions type _MapNode class _MapSubNodes primitive _Bits","title":"Package"},{"location":"collections-persistent--index/#persistent-collections-package","text":"List - A persistent list with functional transformations. Map - A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju. Set - A persistent set implemented as a persistent map of an alias of a type to itself. Vec - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell.","title":"Persistent Collections Package"},{"location":"collections-persistent--index/#public-types","text":"class Vec class VecKeys class VecValues class VecPairs type Set type SetIs class HashSet type Map type MapIs class HashMap class MapKeys class MapValues class MapPairs type List primitive Lists primitive Nil class Cons primitive CollisionHash","title":"Public Types"},{"location":"collections-persistent--index/#private-types","text":"interface _MapIter type _VecSubNodes class _VecNode type _Map class _OpMapUpdate class _OpMapRemove class _MapEntry class _MapCollisions type _MapNode class _MapSubNodes primitive _Bits","title":"Private Types"},{"location":"collections-persistent-CollisionHash/","text":"CollisionHash \u00b6 [Source] primitive val CollisionHash is HashFunction[U64 val] val Implements \u00b6 HashFunction [ U64 val] val Constructors \u00b6 create \u00b6 [Source] new val create() : CollisionHash val^ Returns \u00b6 CollisionHash val^ Public Functions \u00b6 hash \u00b6 [Source] fun box hash( x: U64 val) : USize val Parameters \u00b6 x: U64 val Returns \u00b6 USize val eq \u00b6 [Source] fun box eq( x: U64 val, y: U64 val) : Bool val Parameters \u00b6 x: U64 val y: U64 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CollisionHash val) : Bool val Parameters \u00b6 that: CollisionHash val Returns \u00b6 Bool val","title":"primitive CollisionHash"},{"location":"collections-persistent-CollisionHash/#collisionhash","text":"[Source] primitive val CollisionHash is HashFunction[U64 val] val","title":"CollisionHash"},{"location":"collections-persistent-CollisionHash/#implements","text":"HashFunction [ U64 val] val","title":"Implements"},{"location":"collections-persistent-CollisionHash/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-CollisionHash/#create","text":"[Source] new val create() : CollisionHash val^","title":"create"},{"location":"collections-persistent-CollisionHash/#returns","text":"CollisionHash val^","title":"Returns"},{"location":"collections-persistent-CollisionHash/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-CollisionHash/#hash","text":"[Source] fun box hash( x: U64 val) : USize val","title":"hash"},{"location":"collections-persistent-CollisionHash/#parameters","text":"x: U64 val","title":"Parameters"},{"location":"collections-persistent-CollisionHash/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-persistent-CollisionHash/#eq","text":"[Source] fun box eq( x: U64 val, y: U64 val) : Bool val","title":"eq"},{"location":"collections-persistent-CollisionHash/#parameters_1","text":"x: U64 val y: U64 val","title":"Parameters"},{"location":"collections-persistent-CollisionHash/#returns_2","text":"Bool val","title":"Returns"},{"location":"collections-persistent-CollisionHash/#ne","text":"[Source] fun box ne( that: CollisionHash val) : Bool val","title":"ne"},{"location":"collections-persistent-CollisionHash/#parameters_2","text":"that: CollisionHash val","title":"Parameters"},{"location":"collections-persistent-CollisionHash/#returns_3","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Cons/","text":"Cons[A: A] \u00b6 [Source] A list with a head and a tail, where the tail can be empty. class val Cons[A: A] is ReadSeq[val->A] box Implements \u00b6 ReadSeq [val->A] box Constructors \u00b6 create \u00b6 [Source] new val create( a: val->A, t: (Cons[A] val | Nil[A] val)) : Cons[A] val^ Parameters \u00b6 a: val->A t: ( Cons [A] val | Nil [A] val) Returns \u00b6 Cons [A] val^ Public Functions \u00b6 size \u00b6 [Source] Returns the size of the list. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the list. Errors if the index is out of bounds. fun box apply( i: USize val) : val->A ? Parameters \u00b6 i: USize val Returns \u00b6 val->A ? values \u00b6 [Source] Returns an iterator over the elements of the list. fun box values() : Iterator[val->A] ref^ Returns \u00b6 Iterator [val->A] ref^ is_empty \u00b6 [Source] Returns a Bool indicating if the list is empty. fun box is_empty() : Bool val Returns \u00b6 Bool val is_non_empty \u00b6 [Source] Returns a Bool indicating if the list is non-empty. fun box is_non_empty() : Bool val Returns \u00b6 Bool val head \u00b6 [Source] Returns the head of the list. fun box head() : val->A Returns \u00b6 val->A tail \u00b6 [Source] Returns the tail of the list. fun box tail() : (Cons[A] val | Nil[A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) reverse \u00b6 [Source] Builds a new list by reversing the elements in the list. fun val reverse() : (Cons[A] val | Nil[A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) prepend \u00b6 [Source] Builds a new list with an element added to the front of this list. fun val prepend( a: val->A!) : Cons[A] val Parameters \u00b6 a: val->A! Returns \u00b6 Cons [A] val concat \u00b6 [Source] Builds a new list that is the concatenation of this list and the provided list. fun val concat( l: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) map[B: B] \u00b6 [Source] Builds a new list by applying a function to every member of the list. fun val map[B: B]( f: {(val->A): val->B}[A, B] box) : (Cons[B] val | Nil[B] val) Parameters \u00b6 f: {(val->A): val->B}[A, B] box Returns \u00b6 ( Cons [B] val | Nil [B] val) flat_map[B: B] \u00b6 [Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun val flat_map[B: B]( f: {(val->A): List[B]}[A, B] box) : (Cons[B] val | Nil[B] val) Parameters \u00b6 f: {(val->A): List[B]}[A, B] box Returns \u00b6 ( Cons [B] val | Nil [B] val) for_each \u00b6 [Source] Applies the supplied function to every element of the list in order. fun val for_each( f: {(val->A)}[A] box) : None val Parameters \u00b6 f: {(val->A)}[A] box Returns \u00b6 None val filter \u00b6 [Source] Builds a new list with those elements that satisfy a provided predicate. fun val filter( f: {(val->A): Bool}[A] box) : (Cons[A] val | Nil[A] val) Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 ( Cons [A] val | Nil [A] val) fold[B: B] \u00b6 [Source] Folds the elements of the list using the supplied function. fun val fold[B: B]( f: {(B, val->A): B^}[A, B] box, acc: B) : B Parameters \u00b6 f: {(B, val->A): B^}[A, B] box acc: B Returns \u00b6 B every \u00b6 [Source] Returns true if every element satisfies the provided predicate, false otherwise. fun val every( f: {(val->A): Bool}[A] box) : Bool val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Bool val exists \u00b6 [Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun val exists( f: {(val->A): Bool}[A] box) : Bool val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Bool val partition \u00b6 [Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun val partition( f: {(val->A): Bool}[A] box) : ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val)) Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 (( Cons [A] val | Nil [A] val) , ( Cons [A] val | Nil [A] val)) drop \u00b6 [Source] Builds a list by dropping the first n elements. fun val drop( n: USize val) : (Cons[A] val | Nil[A] val) Parameters \u00b6 n: USize val Returns \u00b6 ( Cons [A] val | Nil [A] val) drop_while \u00b6 [Source] Builds a list by dropping elements from the front of the list until one fails to satisfy the provided predicate. fun val drop_while( f: {(val->A): Bool}[A] box) : (Cons[A] val | Nil[A] val) Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 ( Cons [A] val | Nil [A] val) take \u00b6 [Source] Builds a list of the first n elements. fun val take( n: USize val) : (Cons[A] val | Nil[A] val) Parameters \u00b6 n: USize val Returns \u00b6 ( Cons [A] val | Nil [A] val) take_while \u00b6 [Source] Builds a list of elements satisfying the provided predicate until one does not. fun val take_while( f: {(val->A): Bool}[A] box) : (Cons[A] val | Nil[A] val) Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 ( Cons [A] val | Nil [A] val) Private Functions \u00b6 _reverse \u00b6 [Source] Private helper for reverse, recursively working on elements. fun val _reverse( l: (Cons[A] val | Nil[A] val), acc: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) acc: ( Cons [A] val | Nil [A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) _concat \u00b6 [Source] Private helper for concat that recursively builds the new list. fun val _concat( l: (Cons[A] val | Nil[A] val), acc: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) acc: ( Cons [A] val | Nil [A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) _map[B: B] \u00b6 [Source] Private helper for map, recursively applying function to elements. fun box _map[B: B]( l: (Cons[A] val | Nil[A] val), f: {(val->A): val->B}[A, B] box, acc: (Cons[B] val | Nil[B] val)) : (Cons[B] val | Nil[B] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(val->A): val->B}[A, B] box acc: ( Cons [B] val | Nil [B] val) Returns \u00b6 ( Cons [B] val | Nil [B] val) _flat_map[B: B] \u00b6 [Source] Private helper for flat_map, recursively working on elements. fun box _flat_map[B: B]( l: (Cons[A] val | Nil[A] val), f: {(val->A): List[B]}[A, B] box, acc: (Cons[B] val | Nil[B] val)) : (Cons[B] val | Nil[B] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(val->A): List[B]}[A, B] box acc: ( Cons [B] val | Nil [B] val) Returns \u00b6 ( Cons [B] val | Nil [B] val) _rev_prepend[B: B] \u00b6 [Source] Prepends l in reverse order onto target fun tag _rev_prepend[B: B]( l: (Cons[B] val | Nil[B] val), target: (Cons[B] val | Nil[B] val)) : (Cons[B] val | Nil[B] val) Parameters \u00b6 l: ( Cons [B] val | Nil [B] val) target: ( Cons [B] val | Nil [B] val) Returns \u00b6 ( Cons [B] val | Nil [B] val) _for_each \u00b6 [Source] Private helper for for_each, recursively working on elements. fun box _for_each( l: (Cons[A] val | Nil[A] val), f: {(val->A)}[A] box) : None val Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(val->A)}[A] box Returns \u00b6 None val _filter \u00b6 [Source] Private helper for filter, recursively working on elements, keeping those that match the predicate and discarding those that don't. fun box _filter( l: (Cons[A] val | Nil[A] val), f: {(val->A): Bool}[A] box, acc: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(val->A): Bool}[A] box acc: ( Cons [A] val | Nil [A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) _fold[B: B] \u00b6 [Source] Private helper for fold, recursively working on elements. fun val _fold[B: B]( l: (Cons[A] val | Nil[A] val), f: {(B, val->A): B^}[A, B] box, acc: B) : B Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(B, val->A): B^}[A, B] box acc: B Returns \u00b6 B _every \u00b6 [Source] Private helper for every, recursively testing predicate on elements, returning false immediately on an element that fails to satisfy the predicate. fun box _every( l: (Cons[A] val | Nil[A] val), f: {(val->A): Bool}[A] box) : Bool val Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(val->A): Bool}[A] box Returns \u00b6 Bool val _exists \u00b6 [Source] Private helper for exists, recursively testing predicate on elements, returning true immediately on an element satisfying the predicate. fun box _exists( l: (Cons[A] val | Nil[A] val), f: {(val->A): Bool}[A] box) : Bool val Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) f: {(val->A): Bool}[A] box Returns \u00b6 Bool val","title":"class Cons"},{"location":"collections-persistent-Cons/#cons91a-a93","text":"[Source] A list with a head and a tail, where the tail can be empty. class val Cons[A: A] is ReadSeq[val->A] box","title":"Cons[A: A]"},{"location":"collections-persistent-Cons/#implements","text":"ReadSeq [val->A] box","title":"Implements"},{"location":"collections-persistent-Cons/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-Cons/#create","text":"[Source] new val create( a: val->A, t: (Cons[A] val | Nil[A] val)) : Cons[A] val^","title":"create"},{"location":"collections-persistent-Cons/#parameters","text":"a: val->A t: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns","text":"Cons [A] val^","title":"Returns"},{"location":"collections-persistent-Cons/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-Cons/#size","text":"[Source] Returns the size of the list. fun box size() : USize val","title":"size"},{"location":"collections-persistent-Cons/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-persistent-Cons/#apply","text":"[Source] Returns the i-th element of the list. Errors if the index is out of bounds. fun box apply( i: USize val) : val->A ?","title":"apply"},{"location":"collections-persistent-Cons/#parameters_1","text":"i: USize val","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_2","text":"val->A ?","title":"Returns"},{"location":"collections-persistent-Cons/#values","text":"[Source] Returns an iterator over the elements of the list. fun box values() : Iterator[val->A] ref^","title":"values"},{"location":"collections-persistent-Cons/#returns_3","text":"Iterator [val->A] ref^","title":"Returns"},{"location":"collections-persistent-Cons/#is_empty","text":"[Source] Returns a Bool indicating if the list is empty. fun box is_empty() : Bool val","title":"is_empty"},{"location":"collections-persistent-Cons/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Cons/#is_non_empty","text":"[Source] Returns a Bool indicating if the list is non-empty. fun box is_non_empty() : Bool val","title":"is_non_empty"},{"location":"collections-persistent-Cons/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Cons/#head","text":"[Source] Returns the head of the list. fun box head() : val->A","title":"head"},{"location":"collections-persistent-Cons/#returns_6","text":"val->A","title":"Returns"},{"location":"collections-persistent-Cons/#tail","text":"[Source] Returns the tail of the list. fun box tail() : (Cons[A] val | Nil[A] val)","title":"tail"},{"location":"collections-persistent-Cons/#returns_7","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#reverse","text":"[Source] Builds a new list by reversing the elements in the list. fun val reverse() : (Cons[A] val | Nil[A] val)","title":"reverse"},{"location":"collections-persistent-Cons/#returns_8","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#prepend","text":"[Source] Builds a new list with an element added to the front of this list. fun val prepend( a: val->A!) : Cons[A] val","title":"prepend"},{"location":"collections-persistent-Cons/#parameters_2","text":"a: val->A!","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_9","text":"Cons [A] val","title":"Returns"},{"location":"collections-persistent-Cons/#concat","text":"[Source] Builds a new list that is the concatenation of this list and the provided list. fun val concat( l: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val)","title":"concat"},{"location":"collections-persistent-Cons/#parameters_3","text":"l: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_10","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list. fun val map[B: B]( f: {(val->A): val->B}[A, B] box) : (Cons[B] val | Nil[B] val)","title":"map[B: B]"},{"location":"collections-persistent-Cons/#parameters_4","text":"f: {(val->A): val->B}[A, B] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_11","text":"( Cons [B] val | Nil [B] val)","title":"Returns"},{"location":"collections-persistent-Cons/#flat_map91b-b93","text":"[Source] Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. fun val flat_map[B: B]( f: {(val->A): List[B]}[A, B] box) : (Cons[B] val | Nil[B] val)","title":"flat_map[B: B]"},{"location":"collections-persistent-Cons/#parameters_5","text":"f: {(val->A): List[B]}[A, B] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_12","text":"( Cons [B] val | Nil [B] val)","title":"Returns"},{"location":"collections-persistent-Cons/#for_each","text":"[Source] Applies the supplied function to every element of the list in order. fun val for_each( f: {(val->A)}[A] box) : None val","title":"for_each"},{"location":"collections-persistent-Cons/#parameters_6","text":"f: {(val->A)}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_13","text":"None val","title":"Returns"},{"location":"collections-persistent-Cons/#filter","text":"[Source] Builds a new list with those elements that satisfy a provided predicate. fun val filter( f: {(val->A): Bool}[A] box) : (Cons[A] val | Nil[A] val)","title":"filter"},{"location":"collections-persistent-Cons/#parameters_7","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_14","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#fold91b-b93","text":"[Source] Folds the elements of the list using the supplied function. fun val fold[B: B]( f: {(B, val->A): B^}[A, B] box, acc: B) : B","title":"fold[B: B]"},{"location":"collections-persistent-Cons/#parameters_8","text":"f: {(B, val->A): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_15","text":"B","title":"Returns"},{"location":"collections-persistent-Cons/#every","text":"[Source] Returns true if every element satisfies the provided predicate, false otherwise. fun val every( f: {(val->A): Bool}[A] box) : Bool val","title":"every"},{"location":"collections-persistent-Cons/#parameters_9","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_16","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Cons/#exists","text":"[Source] Returns true if at least one element satisfies the provided predicate, false otherwise. fun val exists( f: {(val->A): Bool}[A] box) : Bool val","title":"exists"},{"location":"collections-persistent-Cons/#parameters_10","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_17","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Cons/#partition","text":"[Source] Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. fun val partition( f: {(val->A): Bool}[A] box) : ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))","title":"partition"},{"location":"collections-persistent-Cons/#parameters_11","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_18","text":"(( Cons [A] val | Nil [A] val) , ( Cons [A] val | Nil [A] val))","title":"Returns"},{"location":"collections-persistent-Cons/#drop","text":"[Source] Builds a list by dropping the first n elements. fun val drop( n: USize val) : (Cons[A] val | Nil[A] val)","title":"drop"},{"location":"collections-persistent-Cons/#parameters_12","text":"n: USize val","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_19","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#drop_while","text":"[Source] Builds a list by dropping elements from the front of the list until one fails to satisfy the provided predicate. fun val drop_while( f: {(val->A): Bool}[A] box) : (Cons[A] val | Nil[A] val)","title":"drop_while"},{"location":"collections-persistent-Cons/#parameters_13","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_20","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#take","text":"[Source] Builds a list of the first n elements. fun val take( n: USize val) : (Cons[A] val | Nil[A] val)","title":"take"},{"location":"collections-persistent-Cons/#parameters_14","text":"n: USize val","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_21","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#take_while","text":"[Source] Builds a list of elements satisfying the provided predicate until one does not. fun val take_while( f: {(val->A): Bool}[A] box) : (Cons[A] val | Nil[A] val)","title":"take_while"},{"location":"collections-persistent-Cons/#parameters_15","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_22","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#private-functions","text":"","title":"Private Functions"},{"location":"collections-persistent-Cons/#_reverse","text":"[Source] Private helper for reverse, recursively working on elements. fun val _reverse( l: (Cons[A] val | Nil[A] val), acc: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val)","title":"_reverse"},{"location":"collections-persistent-Cons/#parameters_16","text":"l: ( Cons [A] val | Nil [A] val) acc: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_23","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#_concat","text":"[Source] Private helper for concat that recursively builds the new list. fun val _concat( l: (Cons[A] val | Nil[A] val), acc: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val)","title":"_concat"},{"location":"collections-persistent-Cons/#parameters_17","text":"l: ( Cons [A] val | Nil [A] val) acc: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_24","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#_map91b-b93","text":"[Source] Private helper for map, recursively applying function to elements. fun box _map[B: B]( l: (Cons[A] val | Nil[A] val), f: {(val->A): val->B}[A, B] box, acc: (Cons[B] val | Nil[B] val)) : (Cons[B] val | Nil[B] val)","title":"_map[B: B]"},{"location":"collections-persistent-Cons/#parameters_18","text":"l: ( Cons [A] val | Nil [A] val) f: {(val->A): val->B}[A, B] box acc: ( Cons [B] val | Nil [B] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_25","text":"( Cons [B] val | Nil [B] val)","title":"Returns"},{"location":"collections-persistent-Cons/#_flat_map91b-b93","text":"[Source] Private helper for flat_map, recursively working on elements. fun box _flat_map[B: B]( l: (Cons[A] val | Nil[A] val), f: {(val->A): List[B]}[A, B] box, acc: (Cons[B] val | Nil[B] val)) : (Cons[B] val | Nil[B] val)","title":"_flat_map[B: B]"},{"location":"collections-persistent-Cons/#parameters_19","text":"l: ( Cons [A] val | Nil [A] val) f: {(val->A): List[B]}[A, B] box acc: ( Cons [B] val | Nil [B] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_26","text":"( Cons [B] val | Nil [B] val)","title":"Returns"},{"location":"collections-persistent-Cons/#_rev_prepend91b-b93","text":"[Source] Prepends l in reverse order onto target fun tag _rev_prepend[B: B]( l: (Cons[B] val | Nil[B] val), target: (Cons[B] val | Nil[B] val)) : (Cons[B] val | Nil[B] val)","title":"_rev_prepend[B: B]"},{"location":"collections-persistent-Cons/#parameters_20","text":"l: ( Cons [B] val | Nil [B] val) target: ( Cons [B] val | Nil [B] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_27","text":"( Cons [B] val | Nil [B] val)","title":"Returns"},{"location":"collections-persistent-Cons/#_for_each","text":"[Source] Private helper for for_each, recursively working on elements. fun box _for_each( l: (Cons[A] val | Nil[A] val), f: {(val->A)}[A] box) : None val","title":"_for_each"},{"location":"collections-persistent-Cons/#parameters_21","text":"l: ( Cons [A] val | Nil [A] val) f: {(val->A)}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_28","text":"None val","title":"Returns"},{"location":"collections-persistent-Cons/#_filter","text":"[Source] Private helper for filter, recursively working on elements, keeping those that match the predicate and discarding those that don't. fun box _filter( l: (Cons[A] val | Nil[A] val), f: {(val->A): Bool}[A] box, acc: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val)","title":"_filter"},{"location":"collections-persistent-Cons/#parameters_22","text":"l: ( Cons [A] val | Nil [A] val) f: {(val->A): Bool}[A] box acc: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_29","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Cons/#_fold91b-b93","text":"[Source] Private helper for fold, recursively working on elements. fun val _fold[B: B]( l: (Cons[A] val | Nil[A] val), f: {(B, val->A): B^}[A, B] box, acc: B) : B","title":"_fold[B: B]"},{"location":"collections-persistent-Cons/#parameters_23","text":"l: ( Cons [A] val | Nil [A] val) f: {(B, val->A): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_30","text":"B","title":"Returns"},{"location":"collections-persistent-Cons/#_every","text":"[Source] Private helper for every, recursively testing predicate on elements, returning false immediately on an element that fails to satisfy the predicate. fun box _every( l: (Cons[A] val | Nil[A] val), f: {(val->A): Bool}[A] box) : Bool val","title":"_every"},{"location":"collections-persistent-Cons/#parameters_24","text":"l: ( Cons [A] val | Nil [A] val) f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_31","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Cons/#_exists","text":"[Source] Private helper for exists, recursively testing predicate on elements, returning true immediately on an element satisfying the predicate. fun box _exists( l: (Cons[A] val | Nil[A] val), f: {(val->A): Bool}[A] box) : Bool val","title":"_exists"},{"location":"collections-persistent-Cons/#parameters_25","text":"l: ( Cons [A] val | Nil [A] val) f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Cons/#returns_32","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashMap/","text":"HashMap[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju Usage \u00b6 use \"collections/persistent\" actor Main new create(env: Env) => try let m1 = Map[String, U32] // {} // Update returns a new map with the provided key set // to the provided value. The old map is unchanged. let m2 = m1(\"a\") = 5 // {a: 5} let m3 = m2(\"b\") = 10 // {a: 5, b: 10} let m4 = m3.remove(\"a\")? // {b: 10} // You can create a new map from key value pairs. let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3} end class val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new val create() : HashMap[K, V, H] val^ Returns \u00b6 HashMap [K, V, H] val^ _create \u00b6 [Source] new val _create( r: _MapSubNodes[K, V, H] val, s: USize val) : HashMap[K, V, H] val^ Parameters \u00b6 r: _MapSubNodes [K, V, H] val s: USize val Returns \u00b6 HashMap [K, V, H] val^ Public Functions \u00b6 apply \u00b6 [Source] Attempt to get the value corresponding to k. fun val apply( k: K) : val->V ? Parameters \u00b6 k: K Returns \u00b6 val->V ? size \u00b6 [Source] Return the amount of key-value pairs in the Map. fun val size() : USize val Returns \u00b6 USize val update \u00b6 [Source] Update the value associated with the provided key. fun val update( key: K, value: val->V) : HashMap[K, V, H] val Parameters \u00b6 key: K value: val->V Returns \u00b6 HashMap [K, V, H] val remove \u00b6 [Source] Try to remove the provided key from the Map. fun val remove( k: K) : HashMap[K, V, H] val ? Parameters \u00b6 k: K Returns \u00b6 HashMap [K, V, H] val ? get_or_else \u00b6 [Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun val get_or_else( k: K, alt: val->V) : val->V Parameters \u00b6 k: K alt: val->V Returns \u00b6 val->V contains \u00b6 [Source] Check whether the node contains the provided key. fun val contains( k: K) : Bool val Parameters \u00b6 k: K Returns \u00b6 Bool val concat \u00b6 [Source] Add the K, V pairs from the given iterator to the map. fun val concat( iter: Iterator[(val->K , val->V)] ref) : HashMap[K, V, H] val Parameters \u00b6 iter: Iterator [(val->K , val->V)] ref Returns \u00b6 HashMap [K, V, H] val add \u00b6 [Source] Return this Map with the given (key, value) mapping. fun val add( key: K, value: val->V) : HashMap[K, V, H] val Parameters \u00b6 key: K value: val->V Returns \u00b6 HashMap [K, V, H] val sub \u00b6 [Source] Return this Map without the given key. fun val sub( key: K) : HashMap[K, V, H] val Parameters \u00b6 key: K Returns \u00b6 HashMap [K, V, H] val keys \u00b6 [Source] fun val keys() : MapKeys[K, V, H] ref Returns \u00b6 MapKeys [K, V, H] ref values \u00b6 [Source] fun val values() : MapValues[K, V, H] ref Returns \u00b6 MapValues [K, V, H] ref pairs \u00b6 [Source] fun val pairs() : MapPairs[K, V, H] ref Returns \u00b6 MapPairs [K, V, H] ref Private Functions \u00b6 _root_node \u00b6 [Source] fun box _root_node() : _MapSubNodes[K, V, H] val Returns \u00b6 _MapSubNodes [K, V, H] val","title":"class HashMap"},{"location":"collections-persistent-HashMap/#hashmap91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju","title":"HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-HashMap/#usage","text":"use \"collections/persistent\" actor Main new create(env: Env) => try let m1 = Map[String, U32] // {} // Update returns a new map with the provided key set // to the provided value. The old map is unchanged. let m2 = m1(\"a\") = 5 // {a: 5} let m3 = m2(\"b\") = 10 // {a: 5, b: 10} let m4 = m3.remove(\"a\")? // {b: 10} // You can create a new map from key value pairs. let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3} end class val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"Usage"},{"location":"collections-persistent-HashMap/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-HashMap/#create","text":"[Source] new val create() : HashMap[K, V, H] val^","title":"create"},{"location":"collections-persistent-HashMap/#returns","text":"HashMap [K, V, H] val^","title":"Returns"},{"location":"collections-persistent-HashMap/#_create","text":"[Source] new val _create( r: _MapSubNodes[K, V, H] val, s: USize val) : HashMap[K, V, H] val^","title":"_create"},{"location":"collections-persistent-HashMap/#parameters","text":"r: _MapSubNodes [K, V, H] val s: USize val","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_1","text":"HashMap [K, V, H] val^","title":"Returns"},{"location":"collections-persistent-HashMap/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-HashMap/#apply","text":"[Source] Attempt to get the value corresponding to k. fun val apply( k: K) : val->V ?","title":"apply"},{"location":"collections-persistent-HashMap/#parameters_1","text":"k: K","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_2","text":"val->V ?","title":"Returns"},{"location":"collections-persistent-HashMap/#size","text":"[Source] Return the amount of key-value pairs in the Map. fun val size() : USize val","title":"size"},{"location":"collections-persistent-HashMap/#returns_3","text":"USize val","title":"Returns"},{"location":"collections-persistent-HashMap/#update","text":"[Source] Update the value associated with the provided key. fun val update( key: K, value: val->V) : HashMap[K, V, H] val","title":"update"},{"location":"collections-persistent-HashMap/#parameters_2","text":"key: K value: val->V","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_4","text":"HashMap [K, V, H] val","title":"Returns"},{"location":"collections-persistent-HashMap/#remove","text":"[Source] Try to remove the provided key from the Map. fun val remove( k: K) : HashMap[K, V, H] val ?","title":"remove"},{"location":"collections-persistent-HashMap/#parameters_3","text":"k: K","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_5","text":"HashMap [K, V, H] val ?","title":"Returns"},{"location":"collections-persistent-HashMap/#get_or_else","text":"[Source] Get the value associated with provided key if present. Otherwise, return the provided alternate value. fun val get_or_else( k: K, alt: val->V) : val->V","title":"get_or_else"},{"location":"collections-persistent-HashMap/#parameters_4","text":"k: K alt: val->V","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_6","text":"val->V","title":"Returns"},{"location":"collections-persistent-HashMap/#contains","text":"[Source] Check whether the node contains the provided key. fun val contains( k: K) : Bool val","title":"contains"},{"location":"collections-persistent-HashMap/#parameters_5","text":"k: K","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_7","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashMap/#concat","text":"[Source] Add the K, V pairs from the given iterator to the map. fun val concat( iter: Iterator[(val->K , val->V)] ref) : HashMap[K, V, H] val","title":"concat"},{"location":"collections-persistent-HashMap/#parameters_6","text":"iter: Iterator [(val->K , val->V)] ref","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_8","text":"HashMap [K, V, H] val","title":"Returns"},{"location":"collections-persistent-HashMap/#add","text":"[Source] Return this Map with the given (key, value) mapping. fun val add( key: K, value: val->V) : HashMap[K, V, H] val","title":"add"},{"location":"collections-persistent-HashMap/#parameters_7","text":"key: K value: val->V","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_9","text":"HashMap [K, V, H] val","title":"Returns"},{"location":"collections-persistent-HashMap/#sub","text":"[Source] Return this Map without the given key. fun val sub( key: K) : HashMap[K, V, H] val","title":"sub"},{"location":"collections-persistent-HashMap/#parameters_8","text":"key: K","title":"Parameters"},{"location":"collections-persistent-HashMap/#returns_10","text":"HashMap [K, V, H] val","title":"Returns"},{"location":"collections-persistent-HashMap/#keys","text":"[Source] fun val keys() : MapKeys[K, V, H] ref","title":"keys"},{"location":"collections-persistent-HashMap/#returns_11","text":"MapKeys [K, V, H] ref","title":"Returns"},{"location":"collections-persistent-HashMap/#values","text":"[Source] fun val values() : MapValues[K, V, H] ref","title":"values"},{"location":"collections-persistent-HashMap/#returns_12","text":"MapValues [K, V, H] ref","title":"Returns"},{"location":"collections-persistent-HashMap/#pairs","text":"[Source] fun val pairs() : MapPairs[K, V, H] ref","title":"pairs"},{"location":"collections-persistent-HashMap/#returns_13","text":"MapPairs [K, V, H] ref","title":"Returns"},{"location":"collections-persistent-HashMap/#private-functions","text":"","title":"Private Functions"},{"location":"collections-persistent-HashMap/#_root_node","text":"[Source] fun box _root_node() : _MapSubNodes[K, V, H] val","title":"_root_node"},{"location":"collections-persistent-HashMap/#returns_14","text":"_MapSubNodes [K, V, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/","text":"HashSet[A: Any #share, H: HashFunction [A] val] \u00b6 [Source] A set, built on top of persistent Map. This is implemented as map of an alias of a type to itself. class val HashSet[A: Any #share, H: HashFunction[A] val] is Comparable[HashSet[A, H] box] ref Implements \u00b6 Comparable [ HashSet [A, H] box] ref Constructors \u00b6 create \u00b6 [Source] new val create() : HashSet[A, H] val^ Returns \u00b6 HashSet [A, H] val^ _create \u00b6 [Source] new val _create( map': HashMap[A, A, H] val) : HashSet[A, H] val^ Parameters \u00b6 map': HashMap [A, A, H] val Returns \u00b6 HashSet [A, H] val^ Public Functions \u00b6 size \u00b6 [Source] Return the number of elements in the set. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Return the value if it is in the set, otherwise raise an error. fun box apply( value: val->A) : val->A ? Parameters \u00b6 value: val->A Returns \u00b6 val->A ? contains \u00b6 [Source] Check whether the set contains the value. fun box contains( value: val->A) : Bool val Parameters \u00b6 value: val->A Returns \u00b6 Bool val add \u00b6 [Source] Return a set with the value added. fun val add( value: val->A) : HashSet[A, H] val Parameters \u00b6 value: val->A Returns \u00b6 HashSet [A, H] val sub \u00b6 [Source] Return a set with the value removed. fun val sub( value: val->A) : HashSet[A, H] val Parameters \u00b6 value: val->A Returns \u00b6 HashSet [A, H] val op_or \u00b6 [Source] Return a set with the elements of both this and that. fun val op_or( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val Parameters \u00b6 that: ( HashSet [A, H] val | Iterator [A] ref) Returns \u00b6 HashSet [A, H] val op_and \u00b6 [Source] Return a set with the elements that are in both this and that. fun val op_and( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val Parameters \u00b6 that: ( HashSet [A, H] val | Iterator [A] ref) Returns \u00b6 HashSet [A, H] val op_xor \u00b6 [Source] Return a set with elements that are in either this or that, but not both. fun val op_xor( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val Parameters \u00b6 that: ( HashSet [A, H] val | Iterator [A] ref) Returns \u00b6 HashSet [A, H] val without \u00b6 [Source] Return a set with the elements of this that are not in that. fun val without( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val Parameters \u00b6 that: ( HashSet [A, H] val | Iterator [A] ref) Returns \u00b6 HashSet [A, H] val eq \u00b6 [Source] Return true if this and that contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val lt \u00b6 [Source] Return true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val le \u00b6 [Source] Return true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val gt \u00b6 [Source] Return true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val ge \u00b6 [Source] Return true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val values \u00b6 [Source] Return an iterator over the values in the set. fun box values() : Iterator[A] ref^ Returns \u00b6 Iterator [A] ref^ compare \u00b6 [Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val) Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 ( Less val | Equal val | Greater val) ne \u00b6 [Source] fun box ne( that: HashSet[A, H] box) : Bool val Parameters \u00b6 that: HashSet [A, H] box Returns \u00b6 Bool val","title":"class HashSet"},{"location":"collections-persistent-HashSet/#hashset91a-any-share-h-hashfunction91a93-val93","text":"[Source] A set, built on top of persistent Map. This is implemented as map of an alias of a type to itself. class val HashSet[A: Any #share, H: HashFunction[A] val] is Comparable[HashSet[A, H] box] ref","title":"HashSet[A: Any #share, H: HashFunction[A] val]"},{"location":"collections-persistent-HashSet/#implements","text":"Comparable [ HashSet [A, H] box] ref","title":"Implements"},{"location":"collections-persistent-HashSet/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-HashSet/#create","text":"[Source] new val create() : HashSet[A, H] val^","title":"create"},{"location":"collections-persistent-HashSet/#returns","text":"HashSet [A, H] val^","title":"Returns"},{"location":"collections-persistent-HashSet/#_create","text":"[Source] new val _create( map': HashMap[A, A, H] val) : HashSet[A, H] val^","title":"_create"},{"location":"collections-persistent-HashSet/#parameters","text":"map': HashMap [A, A, H] val","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_1","text":"HashSet [A, H] val^","title":"Returns"},{"location":"collections-persistent-HashSet/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-HashSet/#size","text":"[Source] Return the number of elements in the set. fun box size() : USize val","title":"size"},{"location":"collections-persistent-HashSet/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-persistent-HashSet/#apply","text":"[Source] Return the value if it is in the set, otherwise raise an error. fun box apply( value: val->A) : val->A ?","title":"apply"},{"location":"collections-persistent-HashSet/#parameters_1","text":"value: val->A","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_3","text":"val->A ?","title":"Returns"},{"location":"collections-persistent-HashSet/#contains","text":"[Source] Check whether the set contains the value. fun box contains( value: val->A) : Bool val","title":"contains"},{"location":"collections-persistent-HashSet/#parameters_2","text":"value: val->A","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashSet/#add","text":"[Source] Return a set with the value added. fun val add( value: val->A) : HashSet[A, H] val","title":"add"},{"location":"collections-persistent-HashSet/#parameters_3","text":"value: val->A","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_5","text":"HashSet [A, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/#sub","text":"[Source] Return a set with the value removed. fun val sub( value: val->A) : HashSet[A, H] val","title":"sub"},{"location":"collections-persistent-HashSet/#parameters_4","text":"value: val->A","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_6","text":"HashSet [A, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/#op_or","text":"[Source] Return a set with the elements of both this and that. fun val op_or( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val","title":"op_or"},{"location":"collections-persistent-HashSet/#parameters_5","text":"that: ( HashSet [A, H] val | Iterator [A] ref)","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_7","text":"HashSet [A, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/#op_and","text":"[Source] Return a set with the elements that are in both this and that. fun val op_and( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val","title":"op_and"},{"location":"collections-persistent-HashSet/#parameters_6","text":"that: ( HashSet [A, H] val | Iterator [A] ref)","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_8","text":"HashSet [A, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/#op_xor","text":"[Source] Return a set with elements that are in either this or that, but not both. fun val op_xor( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val","title":"op_xor"},{"location":"collections-persistent-HashSet/#parameters_7","text":"that: ( HashSet [A, H] val | Iterator [A] ref)","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_9","text":"HashSet [A, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/#without","text":"[Source] Return a set with the elements of this that are not in that. fun val without( that: (HashSet[A, H] val | Iterator[A] ref)) : HashSet[A, H] val","title":"without"},{"location":"collections-persistent-HashSet/#parameters_8","text":"that: ( HashSet [A, H] val | Iterator [A] ref)","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_10","text":"HashSet [A, H] val","title":"Returns"},{"location":"collections-persistent-HashSet/#eq","text":"[Source] Return true if this and that contain the same elements. fun box eq( that: HashSet[A, H] box) : Bool val","title":"eq"},{"location":"collections-persistent-HashSet/#parameters_9","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_11","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashSet/#lt","text":"[Source] Return true if every element in this is also in that, and this has fewer elements than that. fun box lt( that: HashSet[A, H] box) : Bool val","title":"lt"},{"location":"collections-persistent-HashSet/#parameters_10","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_12","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashSet/#le","text":"[Source] Return true if every element in this is also in that. fun box le( that: HashSet[A, H] box) : Bool val","title":"le"},{"location":"collections-persistent-HashSet/#parameters_11","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_13","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashSet/#gt","text":"[Source] Return true if every element in that is also in this, and this has more elements than that. fun box gt( that: HashSet[A, H] box) : Bool val","title":"gt"},{"location":"collections-persistent-HashSet/#parameters_12","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_14","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashSet/#ge","text":"[Source] Return true if every element in that is also in this. fun box ge( that: HashSet[A, H] box) : Bool val","title":"ge"},{"location":"collections-persistent-HashSet/#parameters_13","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_15","text":"Bool val","title":"Returns"},{"location":"collections-persistent-HashSet/#values","text":"[Source] Return an iterator over the values in the set. fun box values() : Iterator[A] ref^","title":"values"},{"location":"collections-persistent-HashSet/#returns_16","text":"Iterator [A] ref^","title":"Returns"},{"location":"collections-persistent-HashSet/#compare","text":"[Source] fun box compare( that: HashSet[A, H] box) : (Less val | Equal val | Greater val)","title":"compare"},{"location":"collections-persistent-HashSet/#parameters_14","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_17","text":"( Less val | Equal val | Greater val)","title":"Returns"},{"location":"collections-persistent-HashSet/#ne","text":"[Source] fun box ne( that: HashSet[A, H] box) : Bool val","title":"ne"},{"location":"collections-persistent-HashSet/#parameters_15","text":"that: HashSet [A, H] box","title":"Parameters"},{"location":"collections-persistent-HashSet/#returns_18","text":"Bool val","title":"Returns"},{"location":"collections-persistent-List/","text":"List[A: A] \u00b6 [Source] A persistent list with functional transformations. Usage \u00b6 use \"collections/persistent\" actor Main new create(env: Env) => try let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8) let empty = Lists[U32].empty() // List() // prepend() returns a new List, leaving the // old list unchanged let l2 = empty.prepend(3) // List(3) let l3 = l2.prepend(2) // List(2, 3) let l4 = l3.prepend(1) // List(1, 2, 3) let l4_head = l4.head() // 1 let l4_tail = l4.tail() // List(2, 3) l4_head == 1 Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))? Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))? let doubled = l4.map[U32]({(x) => x * 2 }) Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))? end type List[A: A] is (Cons[A] val | Nil[A] val) Type Alias For \u00b6 ( Cons [A] val | Nil [A] val)","title":"type List"},{"location":"collections-persistent-List/#list91a-a93","text":"[Source] A persistent list with functional transformations.","title":"List[A: A]"},{"location":"collections-persistent-List/#usage","text":"use \"collections/persistent\" actor Main new create(env: Env) => try let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8) let empty = Lists[U32].empty() // List() // prepend() returns a new List, leaving the // old list unchanged let l2 = empty.prepend(3) // List(3) let l3 = l2.prepend(2) // List(2, 3) let l4 = l3.prepend(1) // List(1, 2, 3) let l4_head = l4.head() // 1 let l4_tail = l4.tail() // List(2, 3) l4_head == 1 Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))? Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))? let doubled = l4.map[U32]({(x) => x * 2 }) Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))? end type List[A: A] is (Cons[A] val | Nil[A] val)","title":"Usage"},{"location":"collections-persistent-List/#type-alias-for","text":"( Cons [A] val | Nil [A] val)","title":"Type Alias For"},{"location":"collections-persistent-Lists/","text":"Lists[A: A] \u00b6 [Source] A primitive containing helper functions for constructing and testing Lists. primitive val Lists[A: A] Constructors \u00b6 create \u00b6 [Source] new val create() : Lists[A] val^ Returns \u00b6 Lists [A] val^ Public Functions \u00b6 empty \u00b6 [Source] Returns an empty list. fun box empty() : (Cons[A] val | Nil[A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) cons \u00b6 [Source] Returns a list that has h as a head and t as a tail. fun box cons( h: val->A, t: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val) Parameters \u00b6 h: val->A t: ( Cons [A] val | Nil [A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) apply \u00b6 [Source] Builds a new list from an Array fun box apply( arr: Array[val->A] ref) : (Cons[A] val | Nil[A] val) Parameters \u00b6 arr: Array [val->A] ref Returns \u00b6 ( Cons [A] val | Nil [A] val) from \u00b6 [Source] Builds a new list from an iterator fun box from( iter: Iterator[val->A] ref) : (Cons[A] val | Nil[A] val) Parameters \u00b6 iter: Iterator [val->A] ref Returns \u00b6 ( Cons [A] val | Nil [A] val) eq[optional T: Equatable [T] val] \u00b6 [Source] Checks whether two lists are equal. fun box eq[optional T: Equatable[T] val]( l1: (Cons[T] val | Nil[T] val), l2: (Cons[T] val | Nil[T] val)) : Bool val ? Parameters \u00b6 l1: ( Cons [T] val | Nil [T] val) l2: ( Cons [T] val | Nil [T] val) Returns \u00b6 Bool val ? ne \u00b6 [Source] fun box ne( that: Lists[A] val) : Bool val Parameters \u00b6 that: Lists [A] val Returns \u00b6 Bool val","title":"primitive Lists"},{"location":"collections-persistent-Lists/#lists91a-a93","text":"[Source] A primitive containing helper functions for constructing and testing Lists. primitive val Lists[A: A]","title":"Lists[A: A]"},{"location":"collections-persistent-Lists/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-Lists/#create","text":"[Source] new val create() : Lists[A] val^","title":"create"},{"location":"collections-persistent-Lists/#returns","text":"Lists [A] val^","title":"Returns"},{"location":"collections-persistent-Lists/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-Lists/#empty","text":"[Source] Returns an empty list. fun box empty() : (Cons[A] val | Nil[A] val)","title":"empty"},{"location":"collections-persistent-Lists/#returns_1","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Lists/#cons","text":"[Source] Returns a list that has h as a head and t as a tail. fun box cons( h: val->A, t: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val)","title":"cons"},{"location":"collections-persistent-Lists/#parameters","text":"h: val->A t: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Lists/#returns_2","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Lists/#apply","text":"[Source] Builds a new list from an Array fun box apply( arr: Array[val->A] ref) : (Cons[A] val | Nil[A] val)","title":"apply"},{"location":"collections-persistent-Lists/#parameters_1","text":"arr: Array [val->A] ref","title":"Parameters"},{"location":"collections-persistent-Lists/#returns_3","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Lists/#from","text":"[Source] Builds a new list from an iterator fun box from( iter: Iterator[val->A] ref) : (Cons[A] val | Nil[A] val)","title":"from"},{"location":"collections-persistent-Lists/#parameters_2","text":"iter: Iterator [val->A] ref","title":"Parameters"},{"location":"collections-persistent-Lists/#returns_4","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Lists/#eq91optional-t-equatable91t93-val93","text":"[Source] Checks whether two lists are equal. fun box eq[optional T: Equatable[T] val]( l1: (Cons[T] val | Nil[T] val), l2: (Cons[T] val | Nil[T] val)) : Bool val ?","title":"eq[optional T: Equatable[T] val]"},{"location":"collections-persistent-Lists/#parameters_3","text":"l1: ( Cons [T] val | Nil [T] val) l2: ( Cons [T] val | Nil [T] val)","title":"Parameters"},{"location":"collections-persistent-Lists/#returns_5","text":"Bool val ?","title":"Returns"},{"location":"collections-persistent-Lists/#ne","text":"[Source] fun box ne( that: Lists[A] val) : Bool val","title":"ne"},{"location":"collections-persistent-Lists/#parameters_4","text":"that: Lists [A] val","title":"Parameters"},{"location":"collections-persistent-Lists/#returns_6","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Map/","text":"Map[K: ( Hashable val & Equatable [K]), V: Any #share] \u00b6 [Source] A map that uses structural equality on the key. type Map[K: (Hashable val & Equatable[K]), V: Any #share] is HashMap[K, V, HashEq[K] val] val Type Alias For \u00b6 HashMap [K, V, HashEq [K] val] val","title":"type Map"},{"location":"collections-persistent-Map/#map91k-hashable-val-equatable91k93-v-any-share93","text":"[Source] A map that uses structural equality on the key. type Map[K: (Hashable val & Equatable[K]), V: Any #share] is HashMap[K, V, HashEq[K] val] val","title":"Map[K: (Hashable val &amp; Equatable[K]), V: Any #share]"},{"location":"collections-persistent-Map/#type-alias-for","text":"HashMap [K, V, HashEq [K] val] val","title":"Type Alias For"},{"location":"collections-persistent-MapIs/","text":"MapIs[K: Any #share, V: Any #share] \u00b6 [Source] A map that uses identity comparison on the key. type MapIs[K: Any #share, V: Any #share] is HashMap[K, V, HashIs[K] val] val Type Alias For \u00b6 HashMap [K, V, HashIs [K] val] val","title":"type MapIs"},{"location":"collections-persistent-MapIs/#mapis91k-any-share-v-any-share93","text":"[Source] A map that uses identity comparison on the key. type MapIs[K: Any #share, V: Any #share] is HashMap[K, V, HashIs[K] val] val","title":"MapIs[K: Any #share, V: Any #share]"},{"location":"collections-persistent-MapIs/#type-alias-for","text":"HashMap [K, V, HashIs [K] val] val","title":"Type Alias For"},{"location":"collections-persistent-MapKeys/","text":"MapKeys[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] class ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new ref create( m: HashMap[K, V, H] val) : MapKeys[K, V, H] ref^ Parameters \u00b6 m: HashMap [K, V, H] val Returns \u00b6 MapKeys [K, V, H] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : K ? Returns \u00b6 K ?","title":"class MapKeys"},{"location":"collections-persistent-MapKeys/#mapkeys91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] class ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-MapKeys/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-MapKeys/#create","text":"[Source] new ref create( m: HashMap[K, V, H] val) : MapKeys[K, V, H] ref^","title":"create"},{"location":"collections-persistent-MapKeys/#parameters","text":"m: HashMap [K, V, H] val","title":"Parameters"},{"location":"collections-persistent-MapKeys/#returns","text":"MapKeys [K, V, H] ref^","title":"Returns"},{"location":"collections-persistent-MapKeys/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-MapKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-MapKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-persistent-MapKeys/#next","text":"[Source] fun ref next() : K ?","title":"next"},{"location":"collections-persistent-MapKeys/#returns_2","text":"K ?","title":"Returns"},{"location":"collections-persistent-MapPairs/","text":"MapPairs[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] class ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new ref create( m: HashMap[K, V, H] val) : MapPairs[K, V, H] ref^ Parameters \u00b6 m: HashMap [K, V, H] val Returns \u00b6 MapPairs [K, V, H] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (K , V) ? Returns \u00b6 (K , V) ?","title":"class MapPairs"},{"location":"collections-persistent-MapPairs/#mappairs91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] class ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-MapPairs/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-MapPairs/#create","text":"[Source] new ref create( m: HashMap[K, V, H] val) : MapPairs[K, V, H] ref^","title":"create"},{"location":"collections-persistent-MapPairs/#parameters","text":"m: HashMap [K, V, H] val","title":"Parameters"},{"location":"collections-persistent-MapPairs/#returns","text":"MapPairs [K, V, H] ref^","title":"Returns"},{"location":"collections-persistent-MapPairs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-MapPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-MapPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-persistent-MapPairs/#next","text":"[Source] fun ref next() : (K , V) ?","title":"next"},{"location":"collections-persistent-MapPairs/#returns_2","text":"(K , V) ?","title":"Returns"},{"location":"collections-persistent-MapValues/","text":"MapValues[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] class ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new ref create( m: HashMap[K, V, H] val) : MapValues[K, V, H] ref^ Parameters \u00b6 m: HashMap [K, V, H] val Returns \u00b6 MapValues [K, V, H] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : val->V ? Returns \u00b6 val->V ?","title":"class MapValues"},{"location":"collections-persistent-MapValues/#mapvalues91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] class ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-MapValues/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-MapValues/#create","text":"[Source] new ref create( m: HashMap[K, V, H] val) : MapValues[K, V, H] ref^","title":"create"},{"location":"collections-persistent-MapValues/#parameters","text":"m: HashMap [K, V, H] val","title":"Parameters"},{"location":"collections-persistent-MapValues/#returns","text":"MapValues [K, V, H] ref^","title":"Returns"},{"location":"collections-persistent-MapValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-MapValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-MapValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-persistent-MapValues/#next","text":"[Source] fun ref next() : val->V ?","title":"next"},{"location":"collections-persistent-MapValues/#returns_2","text":"val->V ?","title":"Returns"},{"location":"collections-persistent-Nil/","text":"Nil[A: A] \u00b6 [Source] The empty list of As. primitive val Nil[A: A] is ReadSeq[val->A] box Implements \u00b6 ReadSeq [val->A] box Constructors \u00b6 create \u00b6 [Source] new val create() : Nil[A] val^ Returns \u00b6 Nil [A] val^ Public Functions \u00b6 size \u00b6 [Source] Returns the size of the list. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Returns the i-th element of the sequence. For the empty list this call will always error because any index will be out of bounds. fun box apply( i: USize val) : val->A ? Parameters \u00b6 i: USize val Returns \u00b6 val->A ? values \u00b6 [Source] Returns an empty iterator over the elements of the empty list. fun box values() : Iterator[val->A] ref^ Returns \u00b6 Iterator [val->A] ref^ is_empty \u00b6 [Source] Returns a Bool indicating if the list is empty. fun box is_empty() : Bool val Returns \u00b6 Bool val is_non_empty \u00b6 [Source] Returns a Bool indicating if the list is non-empty. fun box is_non_empty() : Bool val Returns \u00b6 Bool val head \u00b6 [Source] Returns an error, since Nil has no head. fun box head() : val->A ? Returns \u00b6 val->A ? tail \u00b6 [Source] Returns an error, since Nil has no tail. fun box tail() : (Cons[A] val | Nil[A] val) ? Returns \u00b6 ( Cons [A] val | Nil [A] val) ? reverse \u00b6 [Source] The reverse of the empty list is the empty list. fun box reverse() : Nil[A] val Returns \u00b6 Nil [A] val prepend \u00b6 [Source] Builds a new list with an element added to the front of this list. fun box prepend( a: val->A!) : Cons[A] val Parameters \u00b6 a: val->A! Returns \u00b6 Cons [A] val concat \u00b6 [Source] The concatenation of any list l with the empty list is l. fun box concat( l: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val) Parameters \u00b6 l: ( Cons [A] val | Nil [A] val) Returns \u00b6 ( Cons [A] val | Nil [A] val) map[B: B] \u00b6 [Source] Mapping a function from A to B over the empty list yields the empty list of Bs. fun box map[B: B]( f: {(val->A): val->B}[A, B] box) : Nil[B] val Parameters \u00b6 f: {(val->A): val->B}[A, B] box Returns \u00b6 Nil [B] val flat_map[B: B] \u00b6 [Source] Flatmapping a function from A to B over the empty list yields the empty list of Bs. fun box flat_map[B: B]( f: {(val->A): List[B]}[A, B] box) : Nil[B] val Parameters \u00b6 f: {(val->A): List[B]}[A, B] box Returns \u00b6 Nil [B] val for_each \u00b6 [Source] Applying a function to every member of the empty list is a no-op. fun box for_each( f: {(val->A)}[A] box) : None val Parameters \u00b6 f: {(val->A)}[A] box Returns \u00b6 None val filter \u00b6 [Source] Filtering the empty list yields the empty list. fun box filter( f: {(val->A): Bool}[A] box) : Nil[A] val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Nil [A] val fold[B: B] \u00b6 [Source] Folding over the empty list yields the initial accumulator. fun box fold[B: B]( f: {(B, val->A): B^}[A, B] box, acc: B) : B Parameters \u00b6 f: {(B, val->A): B^}[A, B] box acc: B Returns \u00b6 B every \u00b6 [Source] Any predicate is true of every member of the empty list. fun box every( f: {(val->A): Bool}[A] box) : Bool val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Bool val exists \u00b6 [Source] For any predicate, there is no element that satisfies it in the empty list. fun box exists( f: {(val->A): Bool}[A] box) : Bool val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Bool val partition \u00b6 [Source] The only partition of the empty list is two empty lists. fun box partition( f: {(val->A): Bool}[A] box) : (Nil[A] val , Nil[A] val) Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 ( Nil [A] val , Nil [A] val) drop \u00b6 [Source] There are no elements to drop from the empty list. fun box drop( n: USize val) : Nil[A] val Parameters \u00b6 n: USize val Returns \u00b6 Nil [A] val drop_while \u00b6 [Source] There are no elements to drop from the empty list. fun box drop_while( f: {(val->A): Bool}[A] box) : Nil[A] val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Nil [A] val take \u00b6 [Source] There are no elements to take from the empty list. fun box take( n: USize val) : Nil[A] val Parameters \u00b6 n: USize val Returns \u00b6 Nil [A] val take_while \u00b6 [Source] There are no elements to take from the empty list. fun box take_while( f: {(val->A): Bool}[A] box) : Nil[A] val Parameters \u00b6 f: {(val->A): Bool}[A] box Returns \u00b6 Nil [A] val contains[optional T: (A & HasEq [A!] #read)] \u00b6 [Source] fun val contains[optional T: (A & HasEq[A!] #read)]( a: val->T) : Bool val Parameters \u00b6 a: val->T Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Nil[A] val) : Bool val Parameters \u00b6 that: Nil [A] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Nil[A] val) : Bool val Parameters \u00b6 that: Nil [A] val Returns \u00b6 Bool val","title":"primitive Nil"},{"location":"collections-persistent-Nil/#nil91a-a93","text":"[Source] The empty list of As. primitive val Nil[A: A] is ReadSeq[val->A] box","title":"Nil[A: A]"},{"location":"collections-persistent-Nil/#implements","text":"ReadSeq [val->A] box","title":"Implements"},{"location":"collections-persistent-Nil/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-Nil/#create","text":"[Source] new val create() : Nil[A] val^","title":"create"},{"location":"collections-persistent-Nil/#returns","text":"Nil [A] val^","title":"Returns"},{"location":"collections-persistent-Nil/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-Nil/#size","text":"[Source] Returns the size of the list. fun box size() : USize val","title":"size"},{"location":"collections-persistent-Nil/#returns_1","text":"USize val","title":"Returns"},{"location":"collections-persistent-Nil/#apply","text":"[Source] Returns the i-th element of the sequence. For the empty list this call will always error because any index will be out of bounds. fun box apply( i: USize val) : val->A ?","title":"apply"},{"location":"collections-persistent-Nil/#parameters","text":"i: USize val","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_2","text":"val->A ?","title":"Returns"},{"location":"collections-persistent-Nil/#values","text":"[Source] Returns an empty iterator over the elements of the empty list. fun box values() : Iterator[val->A] ref^","title":"values"},{"location":"collections-persistent-Nil/#returns_3","text":"Iterator [val->A] ref^","title":"Returns"},{"location":"collections-persistent-Nil/#is_empty","text":"[Source] Returns a Bool indicating if the list is empty. fun box is_empty() : Bool val","title":"is_empty"},{"location":"collections-persistent-Nil/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Nil/#is_non_empty","text":"[Source] Returns a Bool indicating if the list is non-empty. fun box is_non_empty() : Bool val","title":"is_non_empty"},{"location":"collections-persistent-Nil/#returns_5","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Nil/#head","text":"[Source] Returns an error, since Nil has no head. fun box head() : val->A ?","title":"head"},{"location":"collections-persistent-Nil/#returns_6","text":"val->A ?","title":"Returns"},{"location":"collections-persistent-Nil/#tail","text":"[Source] Returns an error, since Nil has no tail. fun box tail() : (Cons[A] val | Nil[A] val) ?","title":"tail"},{"location":"collections-persistent-Nil/#returns_7","text":"( Cons [A] val | Nil [A] val) ?","title":"Returns"},{"location":"collections-persistent-Nil/#reverse","text":"[Source] The reverse of the empty list is the empty list. fun box reverse() : Nil[A] val","title":"reverse"},{"location":"collections-persistent-Nil/#returns_8","text":"Nil [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#prepend","text":"[Source] Builds a new list with an element added to the front of this list. fun box prepend( a: val->A!) : Cons[A] val","title":"prepend"},{"location":"collections-persistent-Nil/#parameters_1","text":"a: val->A!","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_9","text":"Cons [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#concat","text":"[Source] The concatenation of any list l with the empty list is l. fun box concat( l: (Cons[A] val | Nil[A] val)) : (Cons[A] val | Nil[A] val)","title":"concat"},{"location":"collections-persistent-Nil/#parameters_2","text":"l: ( Cons [A] val | Nil [A] val)","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_10","text":"( Cons [A] val | Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Nil/#map91b-b93","text":"[Source] Mapping a function from A to B over the empty list yields the empty list of Bs. fun box map[B: B]( f: {(val->A): val->B}[A, B] box) : Nil[B] val","title":"map[B: B]"},{"location":"collections-persistent-Nil/#parameters_3","text":"f: {(val->A): val->B}[A, B] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_11","text":"Nil [B] val","title":"Returns"},{"location":"collections-persistent-Nil/#flat_map91b-b93","text":"[Source] Flatmapping a function from A to B over the empty list yields the empty list of Bs. fun box flat_map[B: B]( f: {(val->A): List[B]}[A, B] box) : Nil[B] val","title":"flat_map[B: B]"},{"location":"collections-persistent-Nil/#parameters_4","text":"f: {(val->A): List[B]}[A, B] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_12","text":"Nil [B] val","title":"Returns"},{"location":"collections-persistent-Nil/#for_each","text":"[Source] Applying a function to every member of the empty list is a no-op. fun box for_each( f: {(val->A)}[A] box) : None val","title":"for_each"},{"location":"collections-persistent-Nil/#parameters_5","text":"f: {(val->A)}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_13","text":"None val","title":"Returns"},{"location":"collections-persistent-Nil/#filter","text":"[Source] Filtering the empty list yields the empty list. fun box filter( f: {(val->A): Bool}[A] box) : Nil[A] val","title":"filter"},{"location":"collections-persistent-Nil/#parameters_6","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_14","text":"Nil [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#fold91b-b93","text":"[Source] Folding over the empty list yields the initial accumulator. fun box fold[B: B]( f: {(B, val->A): B^}[A, B] box, acc: B) : B","title":"fold[B: B]"},{"location":"collections-persistent-Nil/#parameters_7","text":"f: {(B, val->A): B^}[A, B] box acc: B","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_15","text":"B","title":"Returns"},{"location":"collections-persistent-Nil/#every","text":"[Source] Any predicate is true of every member of the empty list. fun box every( f: {(val->A): Bool}[A] box) : Bool val","title":"every"},{"location":"collections-persistent-Nil/#parameters_8","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_16","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Nil/#exists","text":"[Source] For any predicate, there is no element that satisfies it in the empty list. fun box exists( f: {(val->A): Bool}[A] box) : Bool val","title":"exists"},{"location":"collections-persistent-Nil/#parameters_9","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_17","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Nil/#partition","text":"[Source] The only partition of the empty list is two empty lists. fun box partition( f: {(val->A): Bool}[A] box) : (Nil[A] val , Nil[A] val)","title":"partition"},{"location":"collections-persistent-Nil/#parameters_10","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_18","text":"( Nil [A] val , Nil [A] val)","title":"Returns"},{"location":"collections-persistent-Nil/#drop","text":"[Source] There are no elements to drop from the empty list. fun box drop( n: USize val) : Nil[A] val","title":"drop"},{"location":"collections-persistent-Nil/#parameters_11","text":"n: USize val","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_19","text":"Nil [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#drop_while","text":"[Source] There are no elements to drop from the empty list. fun box drop_while( f: {(val->A): Bool}[A] box) : Nil[A] val","title":"drop_while"},{"location":"collections-persistent-Nil/#parameters_12","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_20","text":"Nil [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#take","text":"[Source] There are no elements to take from the empty list. fun box take( n: USize val) : Nil[A] val","title":"take"},{"location":"collections-persistent-Nil/#parameters_13","text":"n: USize val","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_21","text":"Nil [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#take_while","text":"[Source] There are no elements to take from the empty list. fun box take_while( f: {(val->A): Bool}[A] box) : Nil[A] val","title":"take_while"},{"location":"collections-persistent-Nil/#parameters_14","text":"f: {(val->A): Bool}[A] box","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_22","text":"Nil [A] val","title":"Returns"},{"location":"collections-persistent-Nil/#contains91optional-t-a-haseq91a93-read93","text":"[Source] fun val contains[optional T: (A & HasEq[A!] #read)]( a: val->T) : Bool val","title":"contains[optional T: (A &amp; HasEq[A!] #read)]"},{"location":"collections-persistent-Nil/#parameters_15","text":"a: val->T","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_23","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Nil/#eq","text":"[Source] fun box eq( that: Nil[A] val) : Bool val","title":"eq"},{"location":"collections-persistent-Nil/#parameters_16","text":"that: Nil [A] val","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_24","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Nil/#ne","text":"[Source] fun box ne( that: Nil[A] val) : Bool val","title":"ne"},{"location":"collections-persistent-Nil/#parameters_17","text":"that: Nil [A] val","title":"Parameters"},{"location":"collections-persistent-Nil/#returns_25","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Set/","text":"Set[A: ( Hashable val & Equatable [A])] \u00b6 [Source] type Set[A: (Hashable val & Equatable[A])] is HashSet[A, HashEq[A] val] val Type Alias For \u00b6 HashSet [A, HashEq [A] val] val","title":"type Set"},{"location":"collections-persistent-Set/#set91a-hashable-val-equatable91a9393","text":"[Source] type Set[A: (Hashable val & Equatable[A])] is HashSet[A, HashEq[A] val] val","title":"Set[A: (Hashable val &amp; Equatable[A])]"},{"location":"collections-persistent-Set/#type-alias-for","text":"HashSet [A, HashEq [A] val] val","title":"Type Alias For"},{"location":"collections-persistent-SetIs/","text":"SetIs[A: Any #share] \u00b6 [Source] type SetIs[A: Any #share] is HashSet[A, HashIs[A] val] val Type Alias For \u00b6 HashSet [A, HashIs [A] val] val","title":"type SetIs"},{"location":"collections-persistent-SetIs/#setis91a-any-share93","text":"[Source] type SetIs[A: Any #share] is HashSet[A, HashIs[A] val] val","title":"SetIs[A: Any #share]"},{"location":"collections-persistent-SetIs/#type-alias-for","text":"HashSet [A, HashIs [A] val] val","title":"Type Alias For"},{"location":"collections-persistent-Vec/","text":"Vec[A: Any #share] \u00b6 [Source] A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell. class val Vec[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new val create() : Vec[A] val^ Returns \u00b6 Vec [A] val^ _create \u00b6 [Source] new val _create( root': (_VecNode[A] val | None val), tail': Array[A] val, size': USize val, depth': USize val) : Vec[A] val^ Parameters \u00b6 root': ( _VecNode [A] val | None val) tail': Array [A] val size': USize val depth': USize val Returns \u00b6 Vec [A] val^ Public Functions \u00b6 size \u00b6 [Source] Return the amount of values in the vector. fun box size() : USize val Returns \u00b6 USize val apply \u00b6 [Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : val->A ? Parameters \u00b6 i: USize val Returns \u00b6 val->A ? update \u00b6 [Source] Return a vector with the i-th element changed, raising an error if the index is out of bounds. fun val update( i: USize val, value: val->A) : Vec[A] val ? Parameters \u00b6 i: USize val value: val->A Returns \u00b6 Vec [A] val ? insert \u00b6 [Source] Return a vector with an element inserted. Elements after this are moved up by one index, extending the vector. An out of bounds index raises an error. fun val insert( i: USize val, value: val->A) : Vec[A] val ? Parameters \u00b6 i: USize val value: val->A Returns \u00b6 Vec [A] val ? delete \u00b6 [Source] Return a vector with an element deleted. Elements after this are moved down by one index, compacting the vector. An out of bounds index raises an error. fun val delete( i: USize val) : Vec[A] val ? Parameters \u00b6 i: USize val Returns \u00b6 Vec [A] val ? remove \u00b6 [Source] Return a vector with n elements removed, beginning at index i. fun val remove( i: USize val, n: USize val) : Vec[A] val ? Parameters \u00b6 i: USize val n: USize val Returns \u00b6 Vec [A] val ? push \u00b6 [Source] Return a vector with the value added to the end. fun val push( value: val->A) : Vec[A] val Parameters \u00b6 value: val->A Returns \u00b6 Vec [A] val pop \u00b6 [Source] Return a vector with the value at the end removed. fun val pop() : Vec[A] val ? Returns \u00b6 Vec [A] val ? concat \u00b6 [Source] Return a vector with the values of the given iterator added to the end. fun val concat( iter: Iterator[val->A] ref) : Vec[A] val Parameters \u00b6 iter: Iterator [val->A] ref Returns \u00b6 Vec [A] val find \u00b6 [Source] Find the nth appearance of value from the beginning of the vector, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the vector, returns the first instance of value found, and uses object identity for comparison. fun val find( value: val->A, offset: USize val = 0, nth: USize val = 0, predicate: {(A, A): Bool}[A] val = lambda) : USize val ? Parameters \u00b6 value: val->A offset: USize val = 0 nth: USize val = 0 predicate: {(A, A): Bool}[A] val = lambda Returns \u00b6 USize val ? contains \u00b6 [Source] Returns true if the vector contains value , false otherwise. fun val contains( value: val->A, predicate: {(A, A): Bool}[A] val = lambda) : Bool val Parameters \u00b6 value: val->A predicate: {(A, A): Bool}[A] val = lambda Returns \u00b6 Bool val slice \u00b6 [Source] Return a vector that is a clone of a portion of this vector. The range is exclusive and saturated. fun val slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Vec[A] val Parameters \u00b6 from: USize val = 0 to: USize val = call step: USize val = 1 Returns \u00b6 Vec [A] val reverse \u00b6 [Source] Return a vector with the elements in reverse order. fun val reverse() : Vec[A] val Returns \u00b6 Vec [A] val keys \u00b6 [Source] Return an iterator over the indices in the vector. fun val keys() : VecKeys[A] ref^ Returns \u00b6 VecKeys [A] ref^ values \u00b6 [Source] Return an iterator over the values in the vector. fun val values() : VecValues[A] ref^ Returns \u00b6 VecValues [A] ref^ pairs \u00b6 [Source] Return an iterator over the (index, value) pairs in the vector. fun val pairs() : VecPairs[A] ref^ Returns \u00b6 VecPairs [A] ref^ Private Functions \u00b6 _tail_offset \u00b6 [Source] Return the amount of values in the root. fun box _tail_offset() : USize val Returns \u00b6 USize val _pow32 \u00b6 [Source] Raise 32 to the power of n. fun box _pow32( n: USize val) : USize val Parameters \u00b6 n: USize val Returns \u00b6 USize val _leaf_nodes \u00b6 [Source] fun box _leaf_nodes() : Array[Array[A] val] ref^ Returns \u00b6 Array [ Array [A] val] ref^","title":"class Vec"},{"location":"collections-persistent-Vec/#vec91a-any-share93","text":"[Source] A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell. class val Vec[A: Any #share]","title":"Vec[A: Any #share]"},{"location":"collections-persistent-Vec/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-Vec/#create","text":"[Source] new val create() : Vec[A] val^","title":"create"},{"location":"collections-persistent-Vec/#returns","text":"Vec [A] val^","title":"Returns"},{"location":"collections-persistent-Vec/#_create","text":"[Source] new val _create( root': (_VecNode[A] val | None val), tail': Array[A] val, size': USize val, depth': USize val) : Vec[A] val^","title":"_create"},{"location":"collections-persistent-Vec/#parameters","text":"root': ( _VecNode [A] val | None val) tail': Array [A] val size': USize val depth': USize val","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_1","text":"Vec [A] val^","title":"Returns"},{"location":"collections-persistent-Vec/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-Vec/#size","text":"[Source] Return the amount of values in the vector. fun box size() : USize val","title":"size"},{"location":"collections-persistent-Vec/#returns_2","text":"USize val","title":"Returns"},{"location":"collections-persistent-Vec/#apply","text":"[Source] Get the i-th element, raising an error if the index is out of bounds. fun box apply( i: USize val) : val->A ?","title":"apply"},{"location":"collections-persistent-Vec/#parameters_1","text":"i: USize val","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_3","text":"val->A ?","title":"Returns"},{"location":"collections-persistent-Vec/#update","text":"[Source] Return a vector with the i-th element changed, raising an error if the index is out of bounds. fun val update( i: USize val, value: val->A) : Vec[A] val ?","title":"update"},{"location":"collections-persistent-Vec/#parameters_2","text":"i: USize val value: val->A","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_4","text":"Vec [A] val ?","title":"Returns"},{"location":"collections-persistent-Vec/#insert","text":"[Source] Return a vector with an element inserted. Elements after this are moved up by one index, extending the vector. An out of bounds index raises an error. fun val insert( i: USize val, value: val->A) : Vec[A] val ?","title":"insert"},{"location":"collections-persistent-Vec/#parameters_3","text":"i: USize val value: val->A","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_5","text":"Vec [A] val ?","title":"Returns"},{"location":"collections-persistent-Vec/#delete","text":"[Source] Return a vector with an element deleted. Elements after this are moved down by one index, compacting the vector. An out of bounds index raises an error. fun val delete( i: USize val) : Vec[A] val ?","title":"delete"},{"location":"collections-persistent-Vec/#parameters_4","text":"i: USize val","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_6","text":"Vec [A] val ?","title":"Returns"},{"location":"collections-persistent-Vec/#remove","text":"[Source] Return a vector with n elements removed, beginning at index i. fun val remove( i: USize val, n: USize val) : Vec[A] val ?","title":"remove"},{"location":"collections-persistent-Vec/#parameters_5","text":"i: USize val n: USize val","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_7","text":"Vec [A] val ?","title":"Returns"},{"location":"collections-persistent-Vec/#push","text":"[Source] Return a vector with the value added to the end. fun val push( value: val->A) : Vec[A] val","title":"push"},{"location":"collections-persistent-Vec/#parameters_6","text":"value: val->A","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_8","text":"Vec [A] val","title":"Returns"},{"location":"collections-persistent-Vec/#pop","text":"[Source] Return a vector with the value at the end removed. fun val pop() : Vec[A] val ?","title":"pop"},{"location":"collections-persistent-Vec/#returns_9","text":"Vec [A] val ?","title":"Returns"},{"location":"collections-persistent-Vec/#concat","text":"[Source] Return a vector with the values of the given iterator added to the end. fun val concat( iter: Iterator[val->A] ref) : Vec[A] val","title":"concat"},{"location":"collections-persistent-Vec/#parameters_7","text":"iter: Iterator [val->A] ref","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_10","text":"Vec [A] val","title":"Returns"},{"location":"collections-persistent-Vec/#find","text":"[Source] Find the nth appearance of value from the beginning of the vector, starting at offset and examining higher indices, and using the supplied predicate for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the vector, returns the first instance of value found, and uses object identity for comparison. fun val find( value: val->A, offset: USize val = 0, nth: USize val = 0, predicate: {(A, A): Bool}[A] val = lambda) : USize val ?","title":"find"},{"location":"collections-persistent-Vec/#parameters_8","text":"value: val->A offset: USize val = 0 nth: USize val = 0 predicate: {(A, A): Bool}[A] val = lambda","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_11","text":"USize val ?","title":"Returns"},{"location":"collections-persistent-Vec/#contains","text":"[Source] Returns true if the vector contains value , false otherwise. fun val contains( value: val->A, predicate: {(A, A): Bool}[A] val = lambda) : Bool val","title":"contains"},{"location":"collections-persistent-Vec/#parameters_9","text":"value: val->A predicate: {(A, A): Bool}[A] val = lambda","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_12","text":"Bool val","title":"Returns"},{"location":"collections-persistent-Vec/#slice","text":"[Source] Return a vector that is a clone of a portion of this vector. The range is exclusive and saturated. fun val slice( from: USize val = 0, to: USize val = call, step: USize val = 1) : Vec[A] val","title":"slice"},{"location":"collections-persistent-Vec/#parameters_10","text":"from: USize val = 0 to: USize val = call step: USize val = 1","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_13","text":"Vec [A] val","title":"Returns"},{"location":"collections-persistent-Vec/#reverse","text":"[Source] Return a vector with the elements in reverse order. fun val reverse() : Vec[A] val","title":"reverse"},{"location":"collections-persistent-Vec/#returns_14","text":"Vec [A] val","title":"Returns"},{"location":"collections-persistent-Vec/#keys","text":"[Source] Return an iterator over the indices in the vector. fun val keys() : VecKeys[A] ref^","title":"keys"},{"location":"collections-persistent-Vec/#returns_15","text":"VecKeys [A] ref^","title":"Returns"},{"location":"collections-persistent-Vec/#values","text":"[Source] Return an iterator over the values in the vector. fun val values() : VecValues[A] ref^","title":"values"},{"location":"collections-persistent-Vec/#returns_16","text":"VecValues [A] ref^","title":"Returns"},{"location":"collections-persistent-Vec/#pairs","text":"[Source] Return an iterator over the (index, value) pairs in the vector. fun val pairs() : VecPairs[A] ref^","title":"pairs"},{"location":"collections-persistent-Vec/#returns_17","text":"VecPairs [A] ref^","title":"Returns"},{"location":"collections-persistent-Vec/#private-functions","text":"","title":"Private Functions"},{"location":"collections-persistent-Vec/#_tail_offset","text":"[Source] Return the amount of values in the root. fun box _tail_offset() : USize val","title":"_tail_offset"},{"location":"collections-persistent-Vec/#returns_18","text":"USize val","title":"Returns"},{"location":"collections-persistent-Vec/#_pow32","text":"[Source] Raise 32 to the power of n. fun box _pow32( n: USize val) : USize val","title":"_pow32"},{"location":"collections-persistent-Vec/#parameters_11","text":"n: USize val","title":"Parameters"},{"location":"collections-persistent-Vec/#returns_19","text":"USize val","title":"Returns"},{"location":"collections-persistent-Vec/#_leaf_nodes","text":"[Source] fun box _leaf_nodes() : Array[Array[A] val] ref^","title":"_leaf_nodes"},{"location":"collections-persistent-Vec/#returns_20","text":"Array [ Array [A] val] ref^","title":"Returns"},{"location":"collections-persistent-VecKeys/","text":"VecKeys[A: Any #share] \u00b6 [Source] class ref VecKeys[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new ref create( v: Vec[A] val) : VecKeys[A] ref^ Parameters \u00b6 v: Vec [A] val Returns \u00b6 VecKeys [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : USize val ? Returns \u00b6 USize val ?","title":"class VecKeys"},{"location":"collections-persistent-VecKeys/#veckeys91a-any-share93","text":"[Source] class ref VecKeys[A: Any #share]","title":"VecKeys[A: Any #share]"},{"location":"collections-persistent-VecKeys/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-VecKeys/#create","text":"[Source] new ref create( v: Vec[A] val) : VecKeys[A] ref^","title":"create"},{"location":"collections-persistent-VecKeys/#parameters","text":"v: Vec [A] val","title":"Parameters"},{"location":"collections-persistent-VecKeys/#returns","text":"VecKeys [A] ref^","title":"Returns"},{"location":"collections-persistent-VecKeys/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-VecKeys/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-VecKeys/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-persistent-VecKeys/#next","text":"[Source] fun ref next() : USize val ?","title":"next"},{"location":"collections-persistent-VecKeys/#returns_2","text":"USize val ?","title":"Returns"},{"location":"collections-persistent-VecPairs/","text":"VecPairs[A: Any #share] \u00b6 [Source] class ref VecPairs[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new ref create( v: Vec[A] val) : VecPairs[A] ref^ Parameters \u00b6 v: Vec [A] val Returns \u00b6 VecPairs [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (USize val , A) ? Returns \u00b6 ( USize val , A) ?","title":"class VecPairs"},{"location":"collections-persistent-VecPairs/#vecpairs91a-any-share93","text":"[Source] class ref VecPairs[A: Any #share]","title":"VecPairs[A: Any #share]"},{"location":"collections-persistent-VecPairs/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-VecPairs/#create","text":"[Source] new ref create( v: Vec[A] val) : VecPairs[A] ref^","title":"create"},{"location":"collections-persistent-VecPairs/#parameters","text":"v: Vec [A] val","title":"Parameters"},{"location":"collections-persistent-VecPairs/#returns","text":"VecPairs [A] ref^","title":"Returns"},{"location":"collections-persistent-VecPairs/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-VecPairs/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-VecPairs/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-persistent-VecPairs/#next","text":"[Source] fun ref next() : (USize val , A) ?","title":"next"},{"location":"collections-persistent-VecPairs/#returns_2","text":"( USize val , A) ?","title":"Returns"},{"location":"collections-persistent-VecValues/","text":"VecValues[A: Any #share] \u00b6 [Source] class ref VecValues[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new ref create( v: Vec[A] val) : VecValues[A] ref^ Parameters \u00b6 v: Vec [A] val Returns \u00b6 VecValues [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : val->A ? Returns \u00b6 val->A ?","title":"class VecValues"},{"location":"collections-persistent-VecValues/#vecvalues91a-any-share93","text":"[Source] class ref VecValues[A: Any #share]","title":"VecValues[A: Any #share]"},{"location":"collections-persistent-VecValues/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-VecValues/#create","text":"[Source] new ref create( v: Vec[A] val) : VecValues[A] ref^","title":"create"},{"location":"collections-persistent-VecValues/#parameters","text":"v: Vec [A] val","title":"Parameters"},{"location":"collections-persistent-VecValues/#returns","text":"VecValues [A] ref^","title":"Returns"},{"location":"collections-persistent-VecValues/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-VecValues/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-VecValues/#returns_1","text":"Bool val","title":"Returns"},{"location":"collections-persistent-VecValues/#next","text":"[Source] fun ref next() : val->A ?","title":"next"},{"location":"collections-persistent-VecValues/#returns_2","text":"val->A ?","title":"Returns"},{"location":"collections-persistent-_Bits/","text":"_Bits \u00b6 [Source] primitive val _Bits Constructors \u00b6 create \u00b6 [Source] new val create() : _Bits val^ Returns \u00b6 _Bits val^ Public Functions \u00b6 collision_depth \u00b6 [Source] fun box collision_depth() : U32 val Returns \u00b6 U32 val set_bit \u00b6 [Source] fun box set_bit( bm: U32 val, i: U32 val) : U32 val Parameters \u00b6 bm: U32 val i: U32 val Returns \u00b6 U32 val clear_bit \u00b6 [Source] fun box clear_bit( bm: U32 val, i: U32 val) : U32 val Parameters \u00b6 bm: U32 val i: U32 val Returns \u00b6 U32 val check_bit \u00b6 [Source] fun box check_bit( bm: U32 val, i: U32 val) : Bool val Parameters \u00b6 bm: U32 val i: U32 val Returns \u00b6 Bool val mask32 \u00b6 [Source] fun box mask32( n: U32 val, d: U32 val) : U32 val Parameters \u00b6 n: U32 val d: U32 val Returns \u00b6 U32 val mask \u00b6 [Source] fun box mask( n: USize val, d: USize val) : USize val Parameters \u00b6 n: USize val d: USize val Returns \u00b6 USize val next_pow32 \u00b6 [Source] fun box next_pow32( n: USize val) : USize val Parameters \u00b6 n: USize val Returns \u00b6 USize val eq \u00b6 [Source] fun box eq( that: _Bits val) : Bool val Parameters \u00b6 that: _Bits val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _Bits val) : Bool val Parameters \u00b6 that: _Bits val Returns \u00b6 Bool val","title":"primitive _Bits"},{"location":"collections-persistent-_Bits/#_bits","text":"[Source] primitive val _Bits","title":"_Bits"},{"location":"collections-persistent-_Bits/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_Bits/#create","text":"[Source] new val create() : _Bits val^","title":"create"},{"location":"collections-persistent-_Bits/#returns","text":"_Bits val^","title":"Returns"},{"location":"collections-persistent-_Bits/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_Bits/#collision_depth","text":"[Source] fun box collision_depth() : U32 val","title":"collision_depth"},{"location":"collections-persistent-_Bits/#returns_1","text":"U32 val","title":"Returns"},{"location":"collections-persistent-_Bits/#set_bit","text":"[Source] fun box set_bit( bm: U32 val, i: U32 val) : U32 val","title":"set_bit"},{"location":"collections-persistent-_Bits/#parameters","text":"bm: U32 val i: U32 val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_2","text":"U32 val","title":"Returns"},{"location":"collections-persistent-_Bits/#clear_bit","text":"[Source] fun box clear_bit( bm: U32 val, i: U32 val) : U32 val","title":"clear_bit"},{"location":"collections-persistent-_Bits/#parameters_1","text":"bm: U32 val i: U32 val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_3","text":"U32 val","title":"Returns"},{"location":"collections-persistent-_Bits/#check_bit","text":"[Source] fun box check_bit( bm: U32 val, i: U32 val) : Bool val","title":"check_bit"},{"location":"collections-persistent-_Bits/#parameters_2","text":"bm: U32 val i: U32 val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_4","text":"Bool val","title":"Returns"},{"location":"collections-persistent-_Bits/#mask32","text":"[Source] fun box mask32( n: U32 val, d: U32 val) : U32 val","title":"mask32"},{"location":"collections-persistent-_Bits/#parameters_3","text":"n: U32 val d: U32 val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_5","text":"U32 val","title":"Returns"},{"location":"collections-persistent-_Bits/#mask","text":"[Source] fun box mask( n: USize val, d: USize val) : USize val","title":"mask"},{"location":"collections-persistent-_Bits/#parameters_4","text":"n: USize val d: USize val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_6","text":"USize val","title":"Returns"},{"location":"collections-persistent-_Bits/#next_pow32","text":"[Source] fun box next_pow32( n: USize val) : USize val","title":"next_pow32"},{"location":"collections-persistent-_Bits/#parameters_5","text":"n: USize val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_7","text":"USize val","title":"Returns"},{"location":"collections-persistent-_Bits/#eq","text":"[Source] fun box eq( that: _Bits val) : Bool val","title":"eq"},{"location":"collections-persistent-_Bits/#parameters_6","text":"that: _Bits val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_8","text":"Bool val","title":"Returns"},{"location":"collections-persistent-_Bits/#ne","text":"[Source] fun box ne( that: _Bits val) : Bool val","title":"ne"},{"location":"collections-persistent-_Bits/#parameters_7","text":"that: _Bits val","title":"Parameters"},{"location":"collections-persistent-_Bits/#returns_9","text":"Bool val","title":"Returns"},{"location":"collections-persistent-_Map/","text":"_Map \u00b6 [Source] type _Map is HashMap[U64 val, U64 val, CollisionHash val] val Type Alias For \u00b6 HashMap [ U64 val, U64 val, CollisionHash val] val","title":"type _Map"},{"location":"collections-persistent-_Map/#_map","text":"[Source] type _Map is HashMap[U64 val, U64 val, CollisionHash val] val","title":"_Map"},{"location":"collections-persistent-_Map/#type-alias-for","text":"HashMap [ U64 val, U64 val, CollisionHash val] val","title":"Type Alias For"},{"location":"collections-persistent-_MapCollisions/","text":"_MapCollisions[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] class val _MapCollisions[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new trn create() : _MapCollisions[K, V, H] trn^ Returns \u00b6 _MapCollisions [K, V, H] trn^ Public fields \u00b6 embed bins: Array [ Array [ _MapEntry [K, V, H] val] trn] trn \u00b6 [Source] Public Functions \u00b6 clone \u00b6 [Source] fun val clone() : _MapCollisions[K, V, H] trn^ Returns \u00b6 _MapCollisions [K, V, H] trn^ apply \u00b6 [Source] fun box apply( hash: U32 val, k: K) : (V | None val) ? Parameters \u00b6 hash: U32 val k: K Returns \u00b6 (V | None val) ? remove \u00b6 [Source] fun val remove( hash: U32 val, k: K) : _MapCollisions[K, V, H] val ? Parameters \u00b6 hash: U32 val k: K Returns \u00b6 _MapCollisions [K, V, H] val ? pull_last \u00b6 [Source] fun val pull_last() : _MapEntry[K, V, H] val ? Returns \u00b6 _MapEntry [K, V, H] val ? update_mut \u00b6 [Source] fun ref update_mut( hash: U32 val, entry: _MapEntry[K, V, H] val) : Bool val ? Parameters \u00b6 hash: U32 val entry: _MapEntry [K, V, H] val Returns \u00b6 Bool val ? iter \u00b6 [Source] fun val iter() : _MapIter[K, V, H] ref Returns \u00b6 _MapIter [K, V, H] ref","title":"class _MapCollisions"},{"location":"collections-persistent-_MapCollisions/#_mapcollisions91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] class val _MapCollisions[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"_MapCollisions[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-_MapCollisions/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_MapCollisions/#create","text":"[Source] new trn create() : _MapCollisions[K, V, H] trn^","title":"create"},{"location":"collections-persistent-_MapCollisions/#returns","text":"_MapCollisions [K, V, H] trn^","title":"Returns"},{"location":"collections-persistent-_MapCollisions/#public-fields","text":"","title":"Public fields"},{"location":"collections-persistent-_MapCollisions/#embed-bins-array91array91_mapentry91k-v-h93-val93-trn93-trn","text":"[Source]","title":"embed bins: Array[Array[_MapEntry[K, V, H] val] trn] trn"},{"location":"collections-persistent-_MapCollisions/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_MapCollisions/#clone","text":"[Source] fun val clone() : _MapCollisions[K, V, H] trn^","title":"clone"},{"location":"collections-persistent-_MapCollisions/#returns_1","text":"_MapCollisions [K, V, H] trn^","title":"Returns"},{"location":"collections-persistent-_MapCollisions/#apply","text":"[Source] fun box apply( hash: U32 val, k: K) : (V | None val) ?","title":"apply"},{"location":"collections-persistent-_MapCollisions/#parameters","text":"hash: U32 val k: K","title":"Parameters"},{"location":"collections-persistent-_MapCollisions/#returns_2","text":"(V | None val) ?","title":"Returns"},{"location":"collections-persistent-_MapCollisions/#remove","text":"[Source] fun val remove( hash: U32 val, k: K) : _MapCollisions[K, V, H] val ?","title":"remove"},{"location":"collections-persistent-_MapCollisions/#parameters_1","text":"hash: U32 val k: K","title":"Parameters"},{"location":"collections-persistent-_MapCollisions/#returns_3","text":"_MapCollisions [K, V, H] val ?","title":"Returns"},{"location":"collections-persistent-_MapCollisions/#pull_last","text":"[Source] fun val pull_last() : _MapEntry[K, V, H] val ?","title":"pull_last"},{"location":"collections-persistent-_MapCollisions/#returns_4","text":"_MapEntry [K, V, H] val ?","title":"Returns"},{"location":"collections-persistent-_MapCollisions/#update_mut","text":"[Source] fun ref update_mut( hash: U32 val, entry: _MapEntry[K, V, H] val) : Bool val ?","title":"update_mut"},{"location":"collections-persistent-_MapCollisions/#parameters_2","text":"hash: U32 val entry: _MapEntry [K, V, H] val","title":"Parameters"},{"location":"collections-persistent-_MapCollisions/#returns_5","text":"Bool val ?","title":"Returns"},{"location":"collections-persistent-_MapCollisions/#iter","text":"[Source] fun val iter() : _MapIter[K, V, H] ref","title":"iter"},{"location":"collections-persistent-_MapCollisions/#returns_6","text":"_MapIter [K, V, H] ref","title":"Returns"},{"location":"collections-persistent-_MapEntry/","text":"_MapEntry[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] class val _MapEntry[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new val create( k: K, v: V) : _MapEntry[K, V, H] val^ Parameters \u00b6 k: K v: V Returns \u00b6 _MapEntry [K, V, H] val^ Public fields \u00b6 let key: K \u00b6 [Source] let value: V \u00b6 [Source] Public Functions \u00b6 apply \u00b6 [Source] fun box apply( k: K) : (V | None val) Parameters \u00b6 k: K Returns \u00b6 (V | None val)","title":"class _MapEntry"},{"location":"collections-persistent-_MapEntry/#_mapentry91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] class val _MapEntry[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"_MapEntry[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-_MapEntry/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_MapEntry/#create","text":"[Source] new val create( k: K, v: V) : _MapEntry[K, V, H] val^","title":"create"},{"location":"collections-persistent-_MapEntry/#parameters","text":"k: K v: V","title":"Parameters"},{"location":"collections-persistent-_MapEntry/#returns","text":"_MapEntry [K, V, H] val^","title":"Returns"},{"location":"collections-persistent-_MapEntry/#public-fields","text":"","title":"Public fields"},{"location":"collections-persistent-_MapEntry/#let-key-k","text":"[Source]","title":"let key: K"},{"location":"collections-persistent-_MapEntry/#let-value-v","text":"[Source]","title":"let value: V"},{"location":"collections-persistent-_MapEntry/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_MapEntry/#apply","text":"[Source] fun box apply( k: K) : (V | None val)","title":"apply"},{"location":"collections-persistent-_MapEntry/#parameters_1","text":"k: K","title":"Parameters"},{"location":"collections-persistent-_MapEntry/#returns_1","text":"(V | None val)","title":"Returns"},{"location":"collections-persistent-_MapIter/","text":"_MapIter[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] interface ref _MapIter[K: Any #share, V: Any #share, H: HashFunction[K] val] is Iterator[(_MapEntry[K, V, H] val | _MapIter[K, V, H] ref)] ref Implements \u00b6 Iterator [( _MapEntry [K, V, H] val | _MapIter [K, V, H] ref)] ref Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : (_MapEntry[K, V, H] val | _MapIter[K, V, H] ref) ? Returns \u00b6 ( _MapEntry [K, V, H] val | _MapIter [K, V, H] ref) ?","title":"interface _MapIter"},{"location":"collections-persistent-_MapIter/#_mapiter91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] interface ref _MapIter[K: Any #share, V: Any #share, H: HashFunction[K] val] is Iterator[(_MapEntry[K, V, H] val | _MapIter[K, V, H] ref)] ref","title":"_MapIter[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-_MapIter/#implements","text":"Iterator [( _MapEntry [K, V, H] val | _MapIter [K, V, H] ref)] ref","title":"Implements"},{"location":"collections-persistent-_MapIter/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_MapIter/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"collections-persistent-_MapIter/#returns","text":"Bool val","title":"Returns"},{"location":"collections-persistent-_MapIter/#next","text":"[Source] fun ref next() : (_MapEntry[K, V, H] val | _MapIter[K, V, H] ref) ?","title":"next"},{"location":"collections-persistent-_MapIter/#returns_1","text":"( _MapEntry [K, V, H] val | _MapIter [K, V, H] ref) ?","title":"Returns"},{"location":"collections-persistent-_MapNode/","text":"_MapNode[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] type _MapNode[K: Any #share, V: Any #share, H: HashFunction[K] val] is (_MapEntry[K, V, H] val | _MapCollisions[K, V, H] val | _MapSubNodes[K, V, H] val) Type Alias For \u00b6 ( _MapEntry [K, V, H] val | _MapCollisions [K, V, H] val | _MapSubNodes [K, V, H] val)","title":"type _MapNode"},{"location":"collections-persistent-_MapNode/#_mapnode91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] type _MapNode[K: Any #share, V: Any #share, H: HashFunction[K] val] is (_MapEntry[K, V, H] val | _MapCollisions[K, V, H] val | _MapSubNodes[K, V, H] val)","title":"_MapNode[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-_MapNode/#type-alias-for","text":"( _MapEntry [K, V, H] val | _MapCollisions [K, V, H] val | _MapSubNodes [K, V, H] val)","title":"Type Alias For"},{"location":"collections-persistent-_MapSubNodes/","text":"_MapSubNodes[K: Any #share, V: Any #share, H: HashFunction [K] val] \u00b6 [Source] class val _MapSubNodes[K: Any #share, V: Any #share, H: HashFunction[K] val] Constructors \u00b6 create \u00b6 [Source] new trn create( size: USize val = 0, nm: U32 val = 0, dm: U32 val = 0) : _MapSubNodes[K, V, H] trn^ Parameters \u00b6 size: USize val = 0 nm: U32 val = 0 dm: U32 val = 0 Returns \u00b6 _MapSubNodes [K, V, H] trn^ Public fields \u00b6 embed nodes: Array [( _MapEntry [K, V, H] val | _MapCollisions [K, V, H] val | _MapSubNodes [K, V, H] val)] trn \u00b6 [Source] var node_map: U32 val \u00b6 [Source] var data_map: U32 val \u00b6 [Source] Public Functions \u00b6 clone \u00b6 [Source] fun val clone() : _MapSubNodes[K, V, H] trn^ Returns \u00b6 _MapSubNodes [K, V, H] trn^ compressed_idx \u00b6 [Source] fun box compressed_idx( idx: U32 val) : U32 val Parameters \u00b6 idx: U32 val Returns \u00b6 U32 val apply \u00b6 [Source] fun box apply( depth: U32 val, hash: U32 val, k: K) : (V | None val) ? Parameters \u00b6 depth: U32 val hash: U32 val k: K Returns \u00b6 (V | None val) ? update \u00b6 [Source] fun val update( depth: U32 val, hash: U32 val, k: K, v: V) : (_MapSubNodes[K, V, H] val , Bool val) ? Parameters \u00b6 depth: U32 val hash: U32 val k: K v: V Returns \u00b6 ( _MapSubNodes [K, V, H] val , Bool val) ? update_mut \u00b6 [Source] fun ref update_mut( depth: U32 val, hash: U32 val, k: K, v: V) : Bool val ? Parameters \u00b6 depth: U32 val hash: U32 val k: K v: V Returns \u00b6 Bool val ? remove \u00b6 [Source] fun val remove( depth: U32 val, hash: U32 val, k: K) : _MapSubNodes[K, V, H] val ? Parameters \u00b6 depth: U32 val hash: U32 val k: K Returns \u00b6 _MapSubNodes [K, V, H] val ? iter \u00b6 [Source] fun val iter() : _MapIter[K, V, H] ref Returns \u00b6 _MapIter [K, V, H] ref","title":"class _MapSubNodes"},{"location":"collections-persistent-_MapSubNodes/#_mapsubnodes91k-any-share-v-any-share-h-hashfunction91k93-val93","text":"[Source] class val _MapSubNodes[K: Any #share, V: Any #share, H: HashFunction[K] val]","title":"_MapSubNodes[K: Any #share, V: Any #share, H: HashFunction[K] val]"},{"location":"collections-persistent-_MapSubNodes/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_MapSubNodes/#create","text":"[Source] new trn create( size: USize val = 0, nm: U32 val = 0, dm: U32 val = 0) : _MapSubNodes[K, V, H] trn^","title":"create"},{"location":"collections-persistent-_MapSubNodes/#parameters","text":"size: USize val = 0 nm: U32 val = 0 dm: U32 val = 0","title":"Parameters"},{"location":"collections-persistent-_MapSubNodes/#returns","text":"_MapSubNodes [K, V, H] trn^","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#public-fields","text":"","title":"Public fields"},{"location":"collections-persistent-_MapSubNodes/#embed-nodes-array91_mapentry91k-v-h93-val-_mapcollisions91k-v-h93-val-_mapsubnodes91k-v-h93-val93-trn","text":"[Source]","title":"embed nodes: Array[(_MapEntry[K, V, H] val | _MapCollisions[K, V, H] val | _MapSubNodes[K, V, H] val)] trn"},{"location":"collections-persistent-_MapSubNodes/#var-node_map-u32-val","text":"[Source]","title":"var node_map: U32 val"},{"location":"collections-persistent-_MapSubNodes/#var-data_map-u32-val","text":"[Source]","title":"var data_map: U32 val"},{"location":"collections-persistent-_MapSubNodes/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_MapSubNodes/#clone","text":"[Source] fun val clone() : _MapSubNodes[K, V, H] trn^","title":"clone"},{"location":"collections-persistent-_MapSubNodes/#returns_1","text":"_MapSubNodes [K, V, H] trn^","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#compressed_idx","text":"[Source] fun box compressed_idx( idx: U32 val) : U32 val","title":"compressed_idx"},{"location":"collections-persistent-_MapSubNodes/#parameters_1","text":"idx: U32 val","title":"Parameters"},{"location":"collections-persistent-_MapSubNodes/#returns_2","text":"U32 val","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#apply","text":"[Source] fun box apply( depth: U32 val, hash: U32 val, k: K) : (V | None val) ?","title":"apply"},{"location":"collections-persistent-_MapSubNodes/#parameters_2","text":"depth: U32 val hash: U32 val k: K","title":"Parameters"},{"location":"collections-persistent-_MapSubNodes/#returns_3","text":"(V | None val) ?","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#update","text":"[Source] fun val update( depth: U32 val, hash: U32 val, k: K, v: V) : (_MapSubNodes[K, V, H] val , Bool val) ?","title":"update"},{"location":"collections-persistent-_MapSubNodes/#parameters_3","text":"depth: U32 val hash: U32 val k: K v: V","title":"Parameters"},{"location":"collections-persistent-_MapSubNodes/#returns_4","text":"( _MapSubNodes [K, V, H] val , Bool val) ?","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#update_mut","text":"[Source] fun ref update_mut( depth: U32 val, hash: U32 val, k: K, v: V) : Bool val ?","title":"update_mut"},{"location":"collections-persistent-_MapSubNodes/#parameters_4","text":"depth: U32 val hash: U32 val k: K v: V","title":"Parameters"},{"location":"collections-persistent-_MapSubNodes/#returns_5","text":"Bool val ?","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#remove","text":"[Source] fun val remove( depth: U32 val, hash: U32 val, k: K) : _MapSubNodes[K, V, H] val ?","title":"remove"},{"location":"collections-persistent-_MapSubNodes/#parameters_5","text":"depth: U32 val hash: U32 val k: K","title":"Parameters"},{"location":"collections-persistent-_MapSubNodes/#returns_6","text":"_MapSubNodes [K, V, H] val ?","title":"Returns"},{"location":"collections-persistent-_MapSubNodes/#iter","text":"[Source] fun val iter() : _MapIter[K, V, H] ref","title":"iter"},{"location":"collections-persistent-_MapSubNodes/#returns_7","text":"_MapIter [K, V, H] ref","title":"Returns"},{"location":"collections-persistent-_OpMapRemove/","text":"_OpMapRemove \u00b6 [Source] class val _OpMapRemove Constructors \u00b6 create \u00b6 [Source] new val create( k': U64 val) : _OpMapRemove val^ Parameters \u00b6 k': U64 val Returns \u00b6 _OpMapRemove val^ Public fields \u00b6 let k: U64 val \u00b6 [Source] Public Functions \u00b6 apply \u00b6 [Source] fun box apply( a: HashMap[U64 val, U64 val, CollisionHash val] val, b: HashMap[U64 val, U64 val, HashEq[U64 val] val] ref) : HashMap[U64 val, U64 val, CollisionHash val] val ? Parameters \u00b6 a: HashMap [ U64 val, U64 val, CollisionHash val] val b: HashMap [ U64 val, U64 val, HashEq [ U64 val] val] ref Returns \u00b6 HashMap [ U64 val, U64 val, CollisionHash val] val ? str \u00b6 [Source] fun box str() : String val Returns \u00b6 String val","title":"class _OpMapRemove"},{"location":"collections-persistent-_OpMapRemove/#_opmapremove","text":"[Source] class val _OpMapRemove","title":"_OpMapRemove"},{"location":"collections-persistent-_OpMapRemove/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_OpMapRemove/#create","text":"[Source] new val create( k': U64 val) : _OpMapRemove val^","title":"create"},{"location":"collections-persistent-_OpMapRemove/#parameters","text":"k': U64 val","title":"Parameters"},{"location":"collections-persistent-_OpMapRemove/#returns","text":"_OpMapRemove val^","title":"Returns"},{"location":"collections-persistent-_OpMapRemove/#public-fields","text":"","title":"Public fields"},{"location":"collections-persistent-_OpMapRemove/#let-k-u64-val","text":"[Source]","title":"let k: U64 val"},{"location":"collections-persistent-_OpMapRemove/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_OpMapRemove/#apply","text":"[Source] fun box apply( a: HashMap[U64 val, U64 val, CollisionHash val] val, b: HashMap[U64 val, U64 val, HashEq[U64 val] val] ref) : HashMap[U64 val, U64 val, CollisionHash val] val ?","title":"apply"},{"location":"collections-persistent-_OpMapRemove/#parameters_1","text":"a: HashMap [ U64 val, U64 val, CollisionHash val] val b: HashMap [ U64 val, U64 val, HashEq [ U64 val] val] ref","title":"Parameters"},{"location":"collections-persistent-_OpMapRemove/#returns_1","text":"HashMap [ U64 val, U64 val, CollisionHash val] val ?","title":"Returns"},{"location":"collections-persistent-_OpMapRemove/#str","text":"[Source] fun box str() : String val","title":"str"},{"location":"collections-persistent-_OpMapRemove/#returns_2","text":"String val","title":"Returns"},{"location":"collections-persistent-_OpMapUpdate/","text":"_OpMapUpdate \u00b6 [Source] class val _OpMapUpdate Constructors \u00b6 create \u00b6 [Source] new val create( k': U64 val, v': U64 val) : _OpMapUpdate val^ Parameters \u00b6 k': U64 val v': U64 val Returns \u00b6 _OpMapUpdate val^ Public fields \u00b6 let k: U64 val \u00b6 [Source] let v: U64 val \u00b6 [Source] Public Functions \u00b6 apply \u00b6 [Source] fun box apply( a: HashMap[U64 val, U64 val, CollisionHash val] val, b: HashMap[U64 val, U64 val, HashEq[U64 val] val] ref) : HashMap[U64 val, U64 val, CollisionHash val] val Parameters \u00b6 a: HashMap [ U64 val, U64 val, CollisionHash val] val b: HashMap [ U64 val, U64 val, HashEq [ U64 val] val] ref Returns \u00b6 HashMap [ U64 val, U64 val, CollisionHash val] val str \u00b6 [Source] fun box str() : String val Returns \u00b6 String val","title":"class _OpMapUpdate"},{"location":"collections-persistent-_OpMapUpdate/#_opmapupdate","text":"[Source] class val _OpMapUpdate","title":"_OpMapUpdate"},{"location":"collections-persistent-_OpMapUpdate/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_OpMapUpdate/#create","text":"[Source] new val create( k': U64 val, v': U64 val) : _OpMapUpdate val^","title":"create"},{"location":"collections-persistent-_OpMapUpdate/#parameters","text":"k': U64 val v': U64 val","title":"Parameters"},{"location":"collections-persistent-_OpMapUpdate/#returns","text":"_OpMapUpdate val^","title":"Returns"},{"location":"collections-persistent-_OpMapUpdate/#public-fields","text":"","title":"Public fields"},{"location":"collections-persistent-_OpMapUpdate/#let-k-u64-val","text":"[Source]","title":"let k: U64 val"},{"location":"collections-persistent-_OpMapUpdate/#let-v-u64-val","text":"[Source]","title":"let v: U64 val"},{"location":"collections-persistent-_OpMapUpdate/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_OpMapUpdate/#apply","text":"[Source] fun box apply( a: HashMap[U64 val, U64 val, CollisionHash val] val, b: HashMap[U64 val, U64 val, HashEq[U64 val] val] ref) : HashMap[U64 val, U64 val, CollisionHash val] val","title":"apply"},{"location":"collections-persistent-_OpMapUpdate/#parameters_1","text":"a: HashMap [ U64 val, U64 val, CollisionHash val] val b: HashMap [ U64 val, U64 val, HashEq [ U64 val] val] ref","title":"Parameters"},{"location":"collections-persistent-_OpMapUpdate/#returns_1","text":"HashMap [ U64 val, U64 val, CollisionHash val] val","title":"Returns"},{"location":"collections-persistent-_OpMapUpdate/#str","text":"[Source] fun box str() : String val","title":"str"},{"location":"collections-persistent-_OpMapUpdate/#returns_2","text":"String val","title":"Returns"},{"location":"collections-persistent-_VecNode/","text":"_VecNode[A: Any #share] \u00b6 [Source] class val _VecNode[A: Any #share] Constructors \u00b6 empty \u00b6 [Source] new val empty( depth: USize val) : _VecNode[A] val^ Parameters \u00b6 depth: USize val Returns \u00b6 _VecNode [A] val^ create \u00b6 [Source] new val create( entries': (Array[A] val | Array[_VecNode[A] val] val)) : _VecNode[A] val^ Parameters \u00b6 entries': ( Array [A] val | Array [ _VecNode [A] val] val) Returns \u00b6 _VecNode [A] val^ Public Functions \u00b6 grow_root \u00b6 [Source] fun val grow_root() : _VecNode[A] val Returns \u00b6 _VecNode [A] val apply \u00b6 [Source] fun box apply( depth: USize val, i: USize val) : A ? Parameters \u00b6 depth: USize val i: USize val Returns \u00b6 A ? push \u00b6 [Source] fun val push( depth: USize val, i: USize val, tail: Array[A] val) : _VecNode[A] val ? Parameters \u00b6 depth: USize val i: USize val tail: Array [A] val Returns \u00b6 _VecNode [A] val ? pop \u00b6 [Source] fun val pop( depth: USize val, i: USize val) : (_VecNode[A] val , Array[A] val) ? Parameters \u00b6 depth: USize val i: USize val Returns \u00b6 ( _VecNode [A] val , Array [A] val) ? update \u00b6 [Source] fun val update( depth: USize val, i: USize val, v: A) : _VecNode[A] val ? Parameters \u00b6 depth: USize val i: USize val v: A Returns \u00b6 _VecNode [A] val ? leaf_nodes \u00b6 [Source] fun val leaf_nodes( lns: Array[Array[A] val] ref) : Array[Array[A] val] ref^ Parameters \u00b6 lns: Array [ Array [A] val] ref Returns \u00b6 Array [ Array [A] val] ref^","title":"class _VecNode"},{"location":"collections-persistent-_VecNode/#_vecnode91a-any-share93","text":"[Source] class val _VecNode[A: Any #share]","title":"_VecNode[A: Any #share]"},{"location":"collections-persistent-_VecNode/#constructors","text":"","title":"Constructors"},{"location":"collections-persistent-_VecNode/#empty","text":"[Source] new val empty( depth: USize val) : _VecNode[A] val^","title":"empty"},{"location":"collections-persistent-_VecNode/#parameters","text":"depth: USize val","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns","text":"_VecNode [A] val^","title":"Returns"},{"location":"collections-persistent-_VecNode/#create","text":"[Source] new val create( entries': (Array[A] val | Array[_VecNode[A] val] val)) : _VecNode[A] val^","title":"create"},{"location":"collections-persistent-_VecNode/#parameters_1","text":"entries': ( Array [A] val | Array [ _VecNode [A] val] val)","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns_1","text":"_VecNode [A] val^","title":"Returns"},{"location":"collections-persistent-_VecNode/#public-functions","text":"","title":"Public Functions"},{"location":"collections-persistent-_VecNode/#grow_root","text":"[Source] fun val grow_root() : _VecNode[A] val","title":"grow_root"},{"location":"collections-persistent-_VecNode/#returns_2","text":"_VecNode [A] val","title":"Returns"},{"location":"collections-persistent-_VecNode/#apply","text":"[Source] fun box apply( depth: USize val, i: USize val) : A ?","title":"apply"},{"location":"collections-persistent-_VecNode/#parameters_2","text":"depth: USize val i: USize val","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns_3","text":"A ?","title":"Returns"},{"location":"collections-persistent-_VecNode/#push","text":"[Source] fun val push( depth: USize val, i: USize val, tail: Array[A] val) : _VecNode[A] val ?","title":"push"},{"location":"collections-persistent-_VecNode/#parameters_3","text":"depth: USize val i: USize val tail: Array [A] val","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns_4","text":"_VecNode [A] val ?","title":"Returns"},{"location":"collections-persistent-_VecNode/#pop","text":"[Source] fun val pop( depth: USize val, i: USize val) : (_VecNode[A] val , Array[A] val) ?","title":"pop"},{"location":"collections-persistent-_VecNode/#parameters_4","text":"depth: USize val i: USize val","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns_5","text":"( _VecNode [A] val , Array [A] val) ?","title":"Returns"},{"location":"collections-persistent-_VecNode/#update","text":"[Source] fun val update( depth: USize val, i: USize val, v: A) : _VecNode[A] val ?","title":"update"},{"location":"collections-persistent-_VecNode/#parameters_5","text":"depth: USize val i: USize val v: A","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns_6","text":"_VecNode [A] val ?","title":"Returns"},{"location":"collections-persistent-_VecNode/#leaf_nodes","text":"[Source] fun val leaf_nodes( lns: Array[Array[A] val] ref) : Array[Array[A] val] ref^","title":"leaf_nodes"},{"location":"collections-persistent-_VecNode/#parameters_6","text":"lns: Array [ Array [A] val] ref","title":"Parameters"},{"location":"collections-persistent-_VecNode/#returns_7","text":"Array [ Array [A] val] ref^","title":"Returns"},{"location":"collections-persistent-_VecSubNodes/","text":"_VecSubNodes[A: Any #share] \u00b6 [Source] type _VecSubNodes[A: Any #share] is Array[_VecNode[A] val] ref Type Alias For \u00b6 Array [ _VecNode [A] val] ref","title":"type _VecSubNodes"},{"location":"collections-persistent-_VecSubNodes/#_vecsubnodes91a-any-share93","text":"[Source] type _VecSubNodes[A: Any #share] is Array[_VecNode[A] val] ref","title":"_VecSubNodes[A: Any #share]"},{"location":"collections-persistent-_VecSubNodes/#type-alias-for","text":"Array [ _VecNode [A] val] ref","title":"Type Alias For"},{"location":"debug--index/","text":"Debug package \u00b6 Provides facilities to create output to either STDOUT or STDERR that will only appear when the platform is debug configured. To create a binary with debug configured, pass the -d flag to ponyc when compiling e.g.: ponyc -d Example code \u00b6 actor Main new create(env: Env) => Debug.out(\"This will only be seen when configured for debug info\") env.out.print(\"This will always be seen\") Public Types \u00b6 primitive DebugOut primitive DebugErr type DebugStream primitive Debug","title":"Package"},{"location":"debug--index/#debug-package","text":"Provides facilities to create output to either STDOUT or STDERR that will only appear when the platform is debug configured. To create a binary with debug configured, pass the -d flag to ponyc when compiling e.g.: ponyc -d","title":"Debug package"},{"location":"debug--index/#example-code","text":"actor Main new create(env: Env) => Debug.out(\"This will only be seen when configured for debug info\") env.out.print(\"This will always be seen\")","title":"Example code"},{"location":"debug--index/#public-types","text":"primitive DebugOut primitive DebugErr type DebugStream primitive Debug","title":"Public Types"},{"location":"debug-Debug/","text":"Debug \u00b6 [Source] This is a debug only print utility. primitive val Debug Constructors \u00b6 create \u00b6 [Source] new val create() : Debug val^ Returns \u00b6 Debug val^ Public Functions \u00b6 apply \u00b6 [Source] If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout. fun box apply( msg: (Stringable box | ReadSeq[Stringable box] box), sep: String val = \", \", stream: (DebugOut val | DebugErr val) = reference) : None val Parameters \u00b6 msg: ( Stringable box | ReadSeq [ Stringable box] box) sep: String val = \", \" stream: ( DebugOut val | DebugErr val) = reference Returns \u00b6 None val out \u00b6 [Source] If platform is debug configured, print message to standard output fun box out( msg: Stringable box = \"\") : None val Parameters \u00b6 msg: Stringable box = \"\" Returns \u00b6 None val err \u00b6 [Source] If platform is debug configured, print message to standard error fun box err( msg: Stringable box = \"\") : None val Parameters \u00b6 msg: Stringable box = \"\" Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: Debug val) : Bool val Parameters \u00b6 that: Debug val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Debug val) : Bool val Parameters \u00b6 that: Debug val Returns \u00b6 Bool val Private Functions \u00b6 _print \u00b6 [Source] fun box _print( msg: String val, stream: (DebugOut val | DebugErr val)) : None val Parameters \u00b6 msg: String val stream: ( DebugOut val | DebugErr val) Returns \u00b6 None val _stream \u00b6 [Source] fun box _stream( stream: (DebugOut val | DebugErr val)) : Pointer[U8 val] ref Parameters \u00b6 stream: ( DebugOut val | DebugErr val) Returns \u00b6 Pointer [ U8 val] ref","title":"primitive Debug"},{"location":"debug-Debug/#debug","text":"[Source] This is a debug only print utility. primitive val Debug","title":"Debug"},{"location":"debug-Debug/#constructors","text":"","title":"Constructors"},{"location":"debug-Debug/#create","text":"[Source] new val create() : Debug val^","title":"create"},{"location":"debug-Debug/#returns","text":"Debug val^","title":"Returns"},{"location":"debug-Debug/#public-functions","text":"","title":"Public Functions"},{"location":"debug-Debug/#apply","text":"[Source] If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout. fun box apply( msg: (Stringable box | ReadSeq[Stringable box] box), sep: String val = \", \", stream: (DebugOut val | DebugErr val) = reference) : None val","title":"apply"},{"location":"debug-Debug/#parameters","text":"msg: ( Stringable box | ReadSeq [ Stringable box] box) sep: String val = \", \" stream: ( DebugOut val | DebugErr val) = reference","title":"Parameters"},{"location":"debug-Debug/#returns_1","text":"None val","title":"Returns"},{"location":"debug-Debug/#out","text":"[Source] If platform is debug configured, print message to standard output fun box out( msg: Stringable box = \"\") : None val","title":"out"},{"location":"debug-Debug/#parameters_1","text":"msg: Stringable box = \"\"","title":"Parameters"},{"location":"debug-Debug/#returns_2","text":"None val","title":"Returns"},{"location":"debug-Debug/#err","text":"[Source] If platform is debug configured, print message to standard error fun box err( msg: Stringable box = \"\") : None val","title":"err"},{"location":"debug-Debug/#parameters_2","text":"msg: Stringable box = \"\"","title":"Parameters"},{"location":"debug-Debug/#returns_3","text":"None val","title":"Returns"},{"location":"debug-Debug/#eq","text":"[Source] fun box eq( that: Debug val) : Bool val","title":"eq"},{"location":"debug-Debug/#parameters_3","text":"that: Debug val","title":"Parameters"},{"location":"debug-Debug/#returns_4","text":"Bool val","title":"Returns"},{"location":"debug-Debug/#ne","text":"[Source] fun box ne( that: Debug val) : Bool val","title":"ne"},{"location":"debug-Debug/#parameters_4","text":"that: Debug val","title":"Parameters"},{"location":"debug-Debug/#returns_5","text":"Bool val","title":"Returns"},{"location":"debug-Debug/#private-functions","text":"","title":"Private Functions"},{"location":"debug-Debug/#_print","text":"[Source] fun box _print( msg: String val, stream: (DebugOut val | DebugErr val)) : None val","title":"_print"},{"location":"debug-Debug/#parameters_5","text":"msg: String val stream: ( DebugOut val | DebugErr val)","title":"Parameters"},{"location":"debug-Debug/#returns_6","text":"None val","title":"Returns"},{"location":"debug-Debug/#_stream","text":"[Source] fun box _stream( stream: (DebugOut val | DebugErr val)) : Pointer[U8 val] ref","title":"_stream"},{"location":"debug-Debug/#parameters_6","text":"stream: ( DebugOut val | DebugErr val)","title":"Parameters"},{"location":"debug-Debug/#returns_7","text":"Pointer [ U8 val] ref","title":"Returns"},{"location":"debug-DebugErr/","text":"DebugErr \u00b6 [Source] primitive val DebugErr Constructors \u00b6 create \u00b6 [Source] new val create() : DebugErr val^ Returns \u00b6 DebugErr val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: DebugErr val) : Bool val Parameters \u00b6 that: DebugErr val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DebugErr val) : Bool val Parameters \u00b6 that: DebugErr val Returns \u00b6 Bool val","title":"primitive DebugErr"},{"location":"debug-DebugErr/#debugerr","text":"[Source] primitive val DebugErr","title":"DebugErr"},{"location":"debug-DebugErr/#constructors","text":"","title":"Constructors"},{"location":"debug-DebugErr/#create","text":"[Source] new val create() : DebugErr val^","title":"create"},{"location":"debug-DebugErr/#returns","text":"DebugErr val^","title":"Returns"},{"location":"debug-DebugErr/#public-functions","text":"","title":"Public Functions"},{"location":"debug-DebugErr/#eq","text":"[Source] fun box eq( that: DebugErr val) : Bool val","title":"eq"},{"location":"debug-DebugErr/#parameters","text":"that: DebugErr val","title":"Parameters"},{"location":"debug-DebugErr/#returns_1","text":"Bool val","title":"Returns"},{"location":"debug-DebugErr/#ne","text":"[Source] fun box ne( that: DebugErr val) : Bool val","title":"ne"},{"location":"debug-DebugErr/#parameters_1","text":"that: DebugErr val","title":"Parameters"},{"location":"debug-DebugErr/#returns_2","text":"Bool val","title":"Returns"},{"location":"debug-DebugOut/","text":"DebugOut \u00b6 [Source] primitive val DebugOut Constructors \u00b6 create \u00b6 [Source] new val create() : DebugOut val^ Returns \u00b6 DebugOut val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: DebugOut val) : Bool val Parameters \u00b6 that: DebugOut val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DebugOut val) : Bool val Parameters \u00b6 that: DebugOut val Returns \u00b6 Bool val","title":"primitive DebugOut"},{"location":"debug-DebugOut/#debugout","text":"[Source] primitive val DebugOut","title":"DebugOut"},{"location":"debug-DebugOut/#constructors","text":"","title":"Constructors"},{"location":"debug-DebugOut/#create","text":"[Source] new val create() : DebugOut val^","title":"create"},{"location":"debug-DebugOut/#returns","text":"DebugOut val^","title":"Returns"},{"location":"debug-DebugOut/#public-functions","text":"","title":"Public Functions"},{"location":"debug-DebugOut/#eq","text":"[Source] fun box eq( that: DebugOut val) : Bool val","title":"eq"},{"location":"debug-DebugOut/#parameters","text":"that: DebugOut val","title":"Parameters"},{"location":"debug-DebugOut/#returns_1","text":"Bool val","title":"Returns"},{"location":"debug-DebugOut/#ne","text":"[Source] fun box ne( that: DebugOut val) : Bool val","title":"ne"},{"location":"debug-DebugOut/#parameters_1","text":"that: DebugOut val","title":"Parameters"},{"location":"debug-DebugOut/#returns_2","text":"Bool val","title":"Returns"},{"location":"debug-DebugStream/","text":"DebugStream \u00b6 [Source] type DebugStream is (DebugOut val | DebugErr val) Type Alias For \u00b6 ( DebugOut val | DebugErr val)","title":"type DebugStream"},{"location":"debug-DebugStream/#debugstream","text":"[Source] type DebugStream is (DebugOut val | DebugErr val)","title":"DebugStream"},{"location":"debug-DebugStream/#type-alias-for","text":"( DebugOut val | DebugErr val)","title":"Type Alias For"},{"location":"encode-base64--index/","text":"Base64 package \u00b6 The Base64 package contains support for doing Base64 binary-to-text encodings. We currently have support 3 encodings: PEM, MIME and URL. To learn more about Base64, we suggest you check out the wikipedia entry . Example code \u00b6 use \"encode/base64\" actor Main new create(env: Env) => env.out.print(Base64.encode(\"foobar\")) try env.out.print(Base64.decode[String iso](\"Zm9vYmFy\")?) end Public Types \u00b6 primitive Base64","title":"Package"},{"location":"encode-base64--index/#base64-package","text":"The Base64 package contains support for doing Base64 binary-to-text encodings. We currently have support 3 encodings: PEM, MIME and URL. To learn more about Base64, we suggest you check out the wikipedia entry .","title":"Base64 package"},{"location":"encode-base64--index/#example-code","text":"use \"encode/base64\" actor Main new create(env: Env) => env.out.print(Base64.encode(\"foobar\")) try env.out.print(Base64.decode[String iso](\"Zm9vYmFy\")?) end","title":"Example code"},{"location":"encode-base64--index/#public-types","text":"primitive Base64","title":"Public Types"},{"location":"encode-base64-Base64/","text":"Base64 \u00b6 [Source] primitive val Base64 Constructors \u00b6 create \u00b6 [Source] new val create() : Base64 val^ Returns \u00b6 Base64 val^ Public Functions \u00b6 encode_pem \u00b6 [Source] Encode for PEM (RFC 1421). fun box encode_pem( data: ReadSeq[U8 val] box) : String iso^ Parameters \u00b6 data: ReadSeq [ U8 val] box Returns \u00b6 String iso^ encode_mime \u00b6 [Source] Encode for MIME (RFC 2045). fun box encode_mime( data: ReadSeq[U8 val] box) : String iso^ Parameters \u00b6 data: ReadSeq [ U8 val] box Returns \u00b6 String iso^ encode_url[optional A: Seq [ U8 val] iso] \u00b6 [Source] Encode for URLs (RFC 4648). Padding characters are stripped by default. fun box encode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, pad: Bool val = false) : A^ Parameters \u00b6 data: ReadSeq [ U8 val] box pad: Bool val = false Returns \u00b6 A^ encode[optional A: Seq [ U8 val] iso] \u00b6 [Source] Configurable encoding. The defaults are for RFC 4648. fun box encode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = 43, at63: U8 val = 47, pad: U8 val = 61, linelen: USize val = 0, linesep: String val = \" \") : A^ Parameters \u00b6 data: ReadSeq [ U8 val] box at62: U8 val = 43 at63: U8 val = 47 pad: U8 val = 61 linelen: USize val = 0 linesep: String val = \" \" Returns \u00b6 A^ decode_url[optional A: Seq [ U8 val] iso] \u00b6 [Source] Decode for URLs (RFC 4648). fun box decode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box) : A^ ? Parameters \u00b6 data: ReadSeq [ U8 val] box Returns \u00b6 A^ ? decode[optional A: Seq [ U8 val] iso] \u00b6 [Source] Configurable decoding. The defaults are for RFC 4648. Missing padding is not an error. Non-base64 data, other than whitespace (which can appear at any time), is an error. fun box decode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = 43, at63: U8 val = 47, pad: U8 val = 61) : A^ ? Parameters \u00b6 data: ReadSeq [ U8 val] box at62: U8 val = 43 at63: U8 val = 47 pad: U8 val = 61 Returns \u00b6 A^ ? eq \u00b6 [Source] fun box eq( that: Base64 val) : Bool val Parameters \u00b6 that: Base64 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Base64 val) : Bool val Parameters \u00b6 that: Base64 val Returns \u00b6 Bool val Private Functions \u00b6 _enc_byte \u00b6 [Source] Encode a single byte. fun box _enc_byte( i: U8 val, at62: U8 val, at63: U8 val) : U8 val ? Parameters \u00b6 i: U8 val at62: U8 val at63: U8 val Returns \u00b6 U8 val ?","title":"primitive Base64"},{"location":"encode-base64-Base64/#base64","text":"[Source] primitive val Base64","title":"Base64"},{"location":"encode-base64-Base64/#constructors","text":"","title":"Constructors"},{"location":"encode-base64-Base64/#create","text":"[Source] new val create() : Base64 val^","title":"create"},{"location":"encode-base64-Base64/#returns","text":"Base64 val^","title":"Returns"},{"location":"encode-base64-Base64/#public-functions","text":"","title":"Public Functions"},{"location":"encode-base64-Base64/#encode_pem","text":"[Source] Encode for PEM (RFC 1421). fun box encode_pem( data: ReadSeq[U8 val] box) : String iso^","title":"encode_pem"},{"location":"encode-base64-Base64/#parameters","text":"data: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"encode-base64-Base64/#returns_1","text":"String iso^","title":"Returns"},{"location":"encode-base64-Base64/#encode_mime","text":"[Source] Encode for MIME (RFC 2045). fun box encode_mime( data: ReadSeq[U8 val] box) : String iso^","title":"encode_mime"},{"location":"encode-base64-Base64/#parameters_1","text":"data: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"encode-base64-Base64/#returns_2","text":"String iso^","title":"Returns"},{"location":"encode-base64-Base64/#encode_url91optional-a-seq91u8-val93-iso93","text":"[Source] Encode for URLs (RFC 4648). Padding characters are stripped by default. fun box encode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, pad: Bool val = false) : A^","title":"encode_url[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_2","text":"data: ReadSeq [ U8 val] box pad: Bool val = false","title":"Parameters"},{"location":"encode-base64-Base64/#returns_3","text":"A^","title":"Returns"},{"location":"encode-base64-Base64/#encode91optional-a-seq91u8-val93-iso93","text":"[Source] Configurable encoding. The defaults are for RFC 4648. fun box encode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = 43, at63: U8 val = 47, pad: U8 val = 61, linelen: USize val = 0, linesep: String val = \" \") : A^","title":"encode[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_3","text":"data: ReadSeq [ U8 val] box at62: U8 val = 43 at63: U8 val = 47 pad: U8 val = 61 linelen: USize val = 0 linesep: String val = \" \"","title":"Parameters"},{"location":"encode-base64-Base64/#returns_4","text":"A^","title":"Returns"},{"location":"encode-base64-Base64/#decode_url91optional-a-seq91u8-val93-iso93","text":"[Source] Decode for URLs (RFC 4648). fun box decode_url[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box) : A^ ?","title":"decode_url[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_4","text":"data: ReadSeq [ U8 val] box","title":"Parameters"},{"location":"encode-base64-Base64/#returns_5","text":"A^ ?","title":"Returns"},{"location":"encode-base64-Base64/#decode91optional-a-seq91u8-val93-iso93","text":"[Source] Configurable decoding. The defaults are for RFC 4648. Missing padding is not an error. Non-base64 data, other than whitespace (which can appear at any time), is an error. fun box decode[optional A: Seq[U8 val] iso]( data: ReadSeq[U8 val] box, at62: U8 val = 43, at63: U8 val = 47, pad: U8 val = 61) : A^ ?","title":"decode[optional A: Seq[U8 val] iso]"},{"location":"encode-base64-Base64/#parameters_5","text":"data: ReadSeq [ U8 val] box at62: U8 val = 43 at63: U8 val = 47 pad: U8 val = 61","title":"Parameters"},{"location":"encode-base64-Base64/#returns_6","text":"A^ ?","title":"Returns"},{"location":"encode-base64-Base64/#eq","text":"[Source] fun box eq( that: Base64 val) : Bool val","title":"eq"},{"location":"encode-base64-Base64/#parameters_6","text":"that: Base64 val","title":"Parameters"},{"location":"encode-base64-Base64/#returns_7","text":"Bool val","title":"Returns"},{"location":"encode-base64-Base64/#ne","text":"[Source] fun box ne( that: Base64 val) : Bool val","title":"ne"},{"location":"encode-base64-Base64/#parameters_7","text":"that: Base64 val","title":"Parameters"},{"location":"encode-base64-Base64/#returns_8","text":"Bool val","title":"Returns"},{"location":"encode-base64-Base64/#private-functions","text":"","title":"Private Functions"},{"location":"encode-base64-Base64/#_enc_byte","text":"[Source] Encode a single byte. fun box _enc_byte( i: U8 val, at62: U8 val, at63: U8 val) : U8 val ?","title":"_enc_byte"},{"location":"encode-base64-Base64/#parameters_8","text":"i: U8 val at62: U8 val at63: U8 val","title":"Parameters"},{"location":"encode-base64-Base64/#returns_9","text":"U8 val ?","title":"Returns"},{"location":"files--index/","text":"Files package \u00b6 The Files package provides classes for working with files and directories. Files are identified by FilePath objects, which represent both the path to the file and the capabilites for accessing the file at that path. FilePath objects can be used with the CreateFile and OpenFile primitives and the File class to get a reference to a file that can be used to write to and/or read from the file. It can also be used with the Directory object to get a reference to a directory object that can be used for directory operations. The FileLines class allows a file to be accessed one line at a time. The FileStream actor provides the ability to asynchronously write to a file. The Path primitive can be used to do path-related operations on strings and characters. Example program \u00b6 This program opens the files that are given as command line arguments and prints their contents. use \"files\" actor Main new create(env: Env) => try for file_name in env.args.slice(1).values() do let path = FilePath(env.root as AmbientAuth, file_name)? match OpenFile(path) | let file: File => while file.errno() is FileOK do env.out.write(file.read(1024)) end else env.err.print(\"Error opening file '\" + file_name + \"'\") end end end Public Types \u00b6 primitive Path actor FileStream interface WalkHandler class FilePath class FileMode class FileLines class FileInfo primitive FileCreate primitive FileChmod primitive FileChown primitive FileLink primitive FileLookup primitive FileMkdir primitive FileRead primitive FileRemove primitive FileRename primitive FileSeek primitive FileStat primitive FileSync primitive FileTime primitive FileTruncate primitive FileWrite primitive FileExec type FileCaps primitive FileOK primitive FileError primitive FileEOF primitive FileBadFileNumber primitive FileExists primitive FilePermissionDenied type FileErrNo primitive CreateFile primitive OpenFile class File class Directory Private Types \u00b6 primitive _PathSep primitive _PathDot primitive _PathDot2 primitive _PathOther type _PathState primitive _EBADF primitive _EEXIST primitive _EACCES primitive _DirectoryHandle primitive _DirectoryEntry primitive _FileHelper primitive _FileDes","title":"Package"},{"location":"files--index/#files-package","text":"The Files package provides classes for working with files and directories. Files are identified by FilePath objects, which represent both the path to the file and the capabilites for accessing the file at that path. FilePath objects can be used with the CreateFile and OpenFile primitives and the File class to get a reference to a file that can be used to write to and/or read from the file. It can also be used with the Directory object to get a reference to a directory object that can be used for directory operations. The FileLines class allows a file to be accessed one line at a time. The FileStream actor provides the ability to asynchronously write to a file. The Path primitive can be used to do path-related operations on strings and characters.","title":"Files package"},{"location":"files--index/#example-program","text":"This program opens the files that are given as command line arguments and prints their contents. use \"files\" actor Main new create(env: Env) => try for file_name in env.args.slice(1).values() do let path = FilePath(env.root as AmbientAuth, file_name)? match OpenFile(path) | let file: File => while file.errno() is FileOK do env.out.write(file.read(1024)) end else env.err.print(\"Error opening file '\" + file_name + \"'\") end end end","title":"Example program"},{"location":"files--index/#public-types","text":"primitive Path actor FileStream interface WalkHandler class FilePath class FileMode class FileLines class FileInfo primitive FileCreate primitive FileChmod primitive FileChown primitive FileLink primitive FileLookup primitive FileMkdir primitive FileRead primitive FileRemove primitive FileRename primitive FileSeek primitive FileStat primitive FileSync primitive FileTime primitive FileTruncate primitive FileWrite primitive FileExec type FileCaps primitive FileOK primitive FileError primitive FileEOF primitive FileBadFileNumber primitive FileExists primitive FilePermissionDenied type FileErrNo primitive CreateFile primitive OpenFile class File class Directory","title":"Public Types"},{"location":"files--index/#private-types","text":"primitive _PathSep primitive _PathDot primitive _PathDot2 primitive _PathOther type _PathState primitive _EBADF primitive _EEXIST primitive _EACCES primitive _DirectoryHandle primitive _DirectoryEntry primitive _FileHelper primitive _FileDes","title":"Private Types"},{"location":"files-CreateFile/","text":"CreateFile \u00b6 [Source] Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist. primitive val CreateFile Constructors \u00b6 create \u00b6 [Source] new val create() : CreateFile val^ Returns \u00b6 CreateFile val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Parameters \u00b6 from: FilePath val Returns \u00b6 ( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) eq \u00b6 [Source] fun box eq( that: CreateFile val) : Bool val Parameters \u00b6 that: CreateFile val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CreateFile val) : Bool val Parameters \u00b6 that: CreateFile val Returns \u00b6 Bool val","title":"primitive CreateFile"},{"location":"files-CreateFile/#createfile","text":"[Source] Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist. primitive val CreateFile","title":"CreateFile"},{"location":"files-CreateFile/#constructors","text":"","title":"Constructors"},{"location":"files-CreateFile/#create","text":"[Source] new val create() : CreateFile val^","title":"create"},{"location":"files-CreateFile/#returns","text":"CreateFile val^","title":"Returns"},{"location":"files-CreateFile/#public-functions","text":"","title":"Public Functions"},{"location":"files-CreateFile/#apply","text":"[Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"apply"},{"location":"files-CreateFile/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-CreateFile/#returns_1","text":"( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-CreateFile/#eq","text":"[Source] fun box eq( that: CreateFile val) : Bool val","title":"eq"},{"location":"files-CreateFile/#parameters_1","text":"that: CreateFile val","title":"Parameters"},{"location":"files-CreateFile/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-CreateFile/#ne","text":"[Source] fun box ne( that: CreateFile val) : Bool val","title":"ne"},{"location":"files-CreateFile/#parameters_2","text":"that: CreateFile val","title":"Parameters"},{"location":"files-CreateFile/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-Directory/","text":"Directory \u00b6 [Source] Operations on a directory. The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum. class ref Directory Constructors \u00b6 create \u00b6 [Source] This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available. new ref create( from: FilePath val) : Directory ref^ ? Parameters \u00b6 from: FilePath val Returns \u00b6 Directory ref^ ? _relative \u00b6 [Source] Internal constructor. Capsicum rights are already set by inheritence. new iso _relative( path': FilePath val, fd': I32 val) : Directory iso^ Parameters \u00b6 path': FilePath val fd': I32 val Returns \u00b6 Directory iso^ Public fields \u00b6 let path: FilePath val \u00b6 [Source] This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory. Public Functions \u00b6 entries \u00b6 [Source] The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\". fun box entries() : Array[String val] iso^ ? Returns \u00b6 Array [ String val] iso^ ? open \u00b6 [Source] Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy. fun box open( target: String val) : Directory iso^ ? Parameters \u00b6 target: String val Returns \u00b6 Directory iso^ ? mkdir \u00b6 [Source] Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing. fun box mkdir( target: String val) : Bool val Parameters \u00b6 target: String val Returns \u00b6 Bool val create_file \u00b6 [Source] Open for read/write, creating if it doesn't exist, preserving the contents if it does exist. fun box create_file( target: String val) : File iso^ ? Parameters \u00b6 target: String val Returns \u00b6 File iso^ ? open_file \u00b6 [Source] Open for read only, failing if it doesn't exist. fun box open_file( target: String val) : File iso^ ? Parameters \u00b6 target: String val Returns \u00b6 File iso^ ? info \u00b6 [Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ? Returns \u00b6 FileInfo val ? chmod \u00b6 [Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val Parameters \u00b6 mode: FileMode box Returns \u00b6 Bool val chown \u00b6 [Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val Parameters \u00b6 uid: U32 val gid: U32 val Returns \u00b6 Bool val touch \u00b6 [Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val Returns \u00b6 Bool val set_time \u00b6 [Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters \u00b6 atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns \u00b6 Bool val infoat \u00b6 [Source] Return a FileInfo for some path relative to this directory. fun box infoat( target: String val) : FileInfo val ? Parameters \u00b6 target: String val Returns \u00b6 FileInfo val ? chmodat \u00b6 [Source] Set the FileMode for some path relative to this directory. fun box chmodat( target: String val, mode: FileMode box) : Bool val Parameters \u00b6 target: String val mode: FileMode box Returns \u00b6 Bool val chownat \u00b6 [Source] Set the FileMode for some path relative to this directory. fun box chownat( target: String val, uid: U32 val, gid: U32 val) : Bool val Parameters \u00b6 target: String val uid: U32 val gid: U32 val Returns \u00b6 Bool val touchat \u00b6 [Source] Set the last access and modification times of the directory to now. fun box touchat( target: String val) : Bool val Parameters \u00b6 target: String val Returns \u00b6 Bool val set_time_at \u00b6 [Source] Set the last access and modification times of the directory to the given values. fun box set_time_at( target: String val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters \u00b6 target: String val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns \u00b6 Bool val symlink \u00b6 [Source] Link the source path to the link_name, where the link_name is relative to this directory. fun box symlink( source: FilePath val, link_name: String val) : Bool val Parameters \u00b6 source: FilePath val link_name: String val Returns \u00b6 Bool val remove \u00b6 [Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun box remove( target: String val) : Bool val Parameters \u00b6 target: String val Returns \u00b6 Bool val rename \u00b6 [Source] Rename source (which is relative to this directory) to target (which is relative to the to directory). fun box rename( source: String val, to: Directory box, target: String val) : Bool val Parameters \u00b6 source: String val to: Directory box target: String val Returns \u00b6 Bool val dispose \u00b6 [Source] Close the directory. fun ref dispose() : None val Returns \u00b6 None val Private Functions \u00b6 _final \u00b6 [Source] Close the file descriptor. fun box _final() : None val Returns \u00b6 None val","title":"class Directory"},{"location":"files-Directory/#directory","text":"[Source] Operations on a directory. The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum. class ref Directory","title":"Directory"},{"location":"files-Directory/#constructors","text":"","title":"Constructors"},{"location":"files-Directory/#create","text":"[Source] This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available. new ref create( from: FilePath val) : Directory ref^ ?","title":"create"},{"location":"files-Directory/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-Directory/#returns","text":"Directory ref^ ?","title":"Returns"},{"location":"files-Directory/#_relative","text":"[Source] Internal constructor. Capsicum rights are already set by inheritence. new iso _relative( path': FilePath val, fd': I32 val) : Directory iso^","title":"_relative"},{"location":"files-Directory/#parameters_1","text":"path': FilePath val fd': I32 val","title":"Parameters"},{"location":"files-Directory/#returns_1","text":"Directory iso^","title":"Returns"},{"location":"files-Directory/#public-fields","text":"","title":"Public fields"},{"location":"files-Directory/#let-path-filepath-val","text":"[Source] This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory.","title":"let path: FilePath val"},{"location":"files-Directory/#public-functions","text":"","title":"Public Functions"},{"location":"files-Directory/#entries","text":"[Source] The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\". fun box entries() : Array[String val] iso^ ?","title":"entries"},{"location":"files-Directory/#returns_2","text":"Array [ String val] iso^ ?","title":"Returns"},{"location":"files-Directory/#open","text":"[Source] Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy. fun box open( target: String val) : Directory iso^ ?","title":"open"},{"location":"files-Directory/#parameters_2","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_3","text":"Directory iso^ ?","title":"Returns"},{"location":"files-Directory/#mkdir","text":"[Source] Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing. fun box mkdir( target: String val) : Bool val","title":"mkdir"},{"location":"files-Directory/#parameters_3","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_4","text":"Bool val","title":"Returns"},{"location":"files-Directory/#create_file","text":"[Source] Open for read/write, creating if it doesn't exist, preserving the contents if it does exist. fun box create_file( target: String val) : File iso^ ?","title":"create_file"},{"location":"files-Directory/#parameters_4","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_5","text":"File iso^ ?","title":"Returns"},{"location":"files-Directory/#open_file","text":"[Source] Open for read only, failing if it doesn't exist. fun box open_file( target: String val) : File iso^ ?","title":"open_file"},{"location":"files-Directory/#parameters_5","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_6","text":"File iso^ ?","title":"Returns"},{"location":"files-Directory/#info","text":"[Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ?","title":"info"},{"location":"files-Directory/#returns_7","text":"FileInfo val ?","title":"Returns"},{"location":"files-Directory/#chmod","text":"[Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-Directory/#parameters_6","text":"mode: FileMode box","title":"Parameters"},{"location":"files-Directory/#returns_8","text":"Bool val","title":"Returns"},{"location":"files-Directory/#chown","text":"[Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-Directory/#parameters_7","text":"uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-Directory/#returns_9","text":"Bool val","title":"Returns"},{"location":"files-Directory/#touch","text":"[Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val","title":"touch"},{"location":"files-Directory/#returns_10","text":"Bool val","title":"Returns"},{"location":"files-Directory/#set_time","text":"[Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-Directory/#parameters_8","text":"atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-Directory/#returns_11","text":"Bool val","title":"Returns"},{"location":"files-Directory/#infoat","text":"[Source] Return a FileInfo for some path relative to this directory. fun box infoat( target: String val) : FileInfo val ?","title":"infoat"},{"location":"files-Directory/#parameters_9","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_12","text":"FileInfo val ?","title":"Returns"},{"location":"files-Directory/#chmodat","text":"[Source] Set the FileMode for some path relative to this directory. fun box chmodat( target: String val, mode: FileMode box) : Bool val","title":"chmodat"},{"location":"files-Directory/#parameters_10","text":"target: String val mode: FileMode box","title":"Parameters"},{"location":"files-Directory/#returns_13","text":"Bool val","title":"Returns"},{"location":"files-Directory/#chownat","text":"[Source] Set the FileMode for some path relative to this directory. fun box chownat( target: String val, uid: U32 val, gid: U32 val) : Bool val","title":"chownat"},{"location":"files-Directory/#parameters_11","text":"target: String val uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-Directory/#returns_14","text":"Bool val","title":"Returns"},{"location":"files-Directory/#touchat","text":"[Source] Set the last access and modification times of the directory to now. fun box touchat( target: String val) : Bool val","title":"touchat"},{"location":"files-Directory/#parameters_12","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_15","text":"Bool val","title":"Returns"},{"location":"files-Directory/#set_time_at","text":"[Source] Set the last access and modification times of the directory to the given values. fun box set_time_at( target: String val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time_at"},{"location":"files-Directory/#parameters_13","text":"target: String val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-Directory/#returns_16","text":"Bool val","title":"Returns"},{"location":"files-Directory/#symlink","text":"[Source] Link the source path to the link_name, where the link_name is relative to this directory. fun box symlink( source: FilePath val, link_name: String val) : Bool val","title":"symlink"},{"location":"files-Directory/#parameters_14","text":"source: FilePath val link_name: String val","title":"Parameters"},{"location":"files-Directory/#returns_17","text":"Bool val","title":"Returns"},{"location":"files-Directory/#remove","text":"[Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun box remove( target: String val) : Bool val","title":"remove"},{"location":"files-Directory/#parameters_15","text":"target: String val","title":"Parameters"},{"location":"files-Directory/#returns_18","text":"Bool val","title":"Returns"},{"location":"files-Directory/#rename","text":"[Source] Rename source (which is relative to this directory) to target (which is relative to the to directory). fun box rename( source: String val, to: Directory box, target: String val) : Bool val","title":"rename"},{"location":"files-Directory/#parameters_16","text":"source: String val to: Directory box target: String val","title":"Parameters"},{"location":"files-Directory/#returns_19","text":"Bool val","title":"Returns"},{"location":"files-Directory/#dispose","text":"[Source] Close the directory. fun ref dispose() : None val","title":"dispose"},{"location":"files-Directory/#returns_20","text":"None val","title":"Returns"},{"location":"files-Directory/#private-functions","text":"","title":"Private Functions"},{"location":"files-Directory/#_final","text":"[Source] Close the file descriptor. fun box _final() : None val","title":"_final"},{"location":"files-Directory/#returns_21","text":"None val","title":"Returns"},{"location":"files-File/","text":"File \u00b6 [Source] Operations on a file. class ref File Constructors \u00b6 create \u00b6 [Source] Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result. new ref create( from: FilePath val) : File ref^ Parameters \u00b6 from: FilePath val Returns \u00b6 File ref^ open \u00b6 [Source] Open for read only. Set _errno according to result. new ref open( from: FilePath val) : File ref^ Parameters \u00b6 from: FilePath val Returns \u00b6 File ref^ _descriptor \u00b6 [Source] Internal constructor from a file descriptor and a path. new ref _descriptor( fd: I32 val, from: FilePath val) : File ref^ ? Parameters \u00b6 fd: I32 val from: FilePath val Returns \u00b6 File ref^ ? Public fields \u00b6 let path: FilePath val \u00b6 [Source] This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file. let writeable: Bool val \u00b6 [Source] true if the underlying file descriptor has been opened as writeable. Public Functions \u00b6 errno \u00b6 [Source] Returns the last error code set for this File fun box errno() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Returns \u00b6 ( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) clear_errno \u00b6 [Source] Clears the last error code set for this File. Clears the error indicator for the stream. fun ref clear_errno() : None val Returns \u00b6 None val valid \u00b6 [Source] Returns true if the file is currently open. fun box valid() : Bool val Returns \u00b6 Bool val read \u00b6 [Source] Returns up to len bytes. fun ref read( len: USize val) : Array[U8 val] iso^ Parameters \u00b6 len: USize val Returns \u00b6 Array [ U8 val] iso^ read_string \u00b6 [Source] Returns up to len bytes. The resulting string may have internal null characters. fun ref read_string( len: USize val) : String iso^ Parameters \u00b6 len: USize val Returns \u00b6 String iso^ print \u00b6 [Source] Same as write, buts adds a newline. fun ref print( data: (String box | Array[U8 val] box)) : Bool val Parameters \u00b6 data: ( String box | Array [ U8 val] box) Returns \u00b6 Bool val printv \u00b6 [Source] Print an iterable collection of ByteSeqs. fun ref printv( data: ByteSeqIter box) : Bool val Parameters \u00b6 data: ByteSeqIter box Returns \u00b6 Bool val write \u00b6 [Source] Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written. fun ref write( data: (String box | Array[U8 val] box)) : Bool val Parameters \u00b6 data: ( String box | Array [ U8 val] box) Returns \u00b6 Bool val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. fun ref writev( data: ByteSeqIter box) : Bool val Parameters \u00b6 data: ByteSeqIter box Returns \u00b6 Bool val queue \u00b6 [Source] Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queue( data: (String box | Array[U8 val] box)) : None val Parameters \u00b6 data: ( String box | Array [ U8 val] box) Returns \u00b6 None val queuev \u00b6 [Source] Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queuev( data: ByteSeqIter box) : None val Parameters \u00b6 data: ByteSeqIter box Returns \u00b6 None val flush \u00b6 [Source] Flush any queued data fun ref flush() : Bool val Returns \u00b6 Bool val position \u00b6 [Source] Return the current cursor position in the file. fun ref position() : USize val Returns \u00b6 USize val size \u00b6 [Source] Return the total length of the file. fun ref size() : USize val Returns \u00b6 USize val seek_start \u00b6 [Source] Set the cursor position relative to the start of the file. fun ref seek_start( offset: USize val) : None val Parameters \u00b6 offset: USize val Returns \u00b6 None val seek_end \u00b6 [Source] Set the cursor position relative to the end of the file. fun ref seek_end( offset: USize val) : None val Parameters \u00b6 offset: USize val Returns \u00b6 None val seek \u00b6 [Source] Move the cursor position. fun ref seek( offset: ISize val) : None val Parameters \u00b6 offset: ISize val Returns \u00b6 None val sync \u00b6 [Source] Sync the file contents to physical storage. fun ref sync() : None val Returns \u00b6 None val datasync \u00b6 [Source] Sync the file contents to physical storage. fun ref datasync() : None val Returns \u00b6 None val set_length \u00b6 [Source] Change the file size. If it is made larger, the new contents are undefined. fun ref set_length( len: USize val) : Bool val Parameters \u00b6 len: USize val Returns \u00b6 Bool val info \u00b6 [Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ? Returns \u00b6 FileInfo val ? chmod \u00b6 [Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val Parameters \u00b6 mode: FileMode box Returns \u00b6 Bool val chown \u00b6 [Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val Parameters \u00b6 uid: U32 val gid: U32 val Returns \u00b6 Bool val touch \u00b6 [Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val Returns \u00b6 Bool val set_time \u00b6 [Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters \u00b6 atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns \u00b6 Bool val lines \u00b6 [Source] Returns an iterator for reading lines from the file. fun ref lines() : FileLines ref Returns \u00b6 FileLines ref dispose \u00b6 [Source] Close the file. Future operations will do nothing. fun ref dispose() : None val Returns \u00b6 None val Private Functions \u00b6 _get_error \u00b6 [Source] Fetch errno from the OS. fun box _get_error() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Returns \u00b6 ( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) _pending_writes \u00b6 [Source] Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data. fun ref _pending_writes() : Bool val Returns \u00b6 Bool val _write_to_disk \u00b6 [Source] Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also. fun box _write_to_disk() : (Bool val , USize val , USize val) ? Returns \u00b6 ( Bool val , USize val , USize val) ? _seek \u00b6 [Source] Move the cursor position. fun ref _seek( offset: I64 val, base: I32 val) : None val Parameters \u00b6 offset: I64 val base: I32 val Returns \u00b6 None val _final \u00b6 [Source] Close the file. fun box _final() : None val Returns \u00b6 None val","title":"class File"},{"location":"files-File/#file","text":"[Source] Operations on a file. class ref File","title":"File"},{"location":"files-File/#constructors","text":"","title":"Constructors"},{"location":"files-File/#create","text":"[Source] Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result. new ref create( from: FilePath val) : File ref^","title":"create"},{"location":"files-File/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-File/#returns","text":"File ref^","title":"Returns"},{"location":"files-File/#open","text":"[Source] Open for read only. Set _errno according to result. new ref open( from: FilePath val) : File ref^","title":"open"},{"location":"files-File/#parameters_1","text":"from: FilePath val","title":"Parameters"},{"location":"files-File/#returns_1","text":"File ref^","title":"Returns"},{"location":"files-File/#_descriptor","text":"[Source] Internal constructor from a file descriptor and a path. new ref _descriptor( fd: I32 val, from: FilePath val) : File ref^ ?","title":"_descriptor"},{"location":"files-File/#parameters_2","text":"fd: I32 val from: FilePath val","title":"Parameters"},{"location":"files-File/#returns_2","text":"File ref^ ?","title":"Returns"},{"location":"files-File/#public-fields","text":"","title":"Public fields"},{"location":"files-File/#let-path-filepath-val","text":"[Source] This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file.","title":"let path: FilePath val"},{"location":"files-File/#let-writeable-bool-val","text":"[Source] true if the underlying file descriptor has been opened as writeable.","title":"let writeable: Bool val"},{"location":"files-File/#public-functions","text":"","title":"Public Functions"},{"location":"files-File/#errno","text":"[Source] Returns the last error code set for this File fun box errno() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"errno"},{"location":"files-File/#returns_3","text":"( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-File/#clear_errno","text":"[Source] Clears the last error code set for this File. Clears the error indicator for the stream. fun ref clear_errno() : None val","title":"clear_errno"},{"location":"files-File/#returns_4","text":"None val","title":"Returns"},{"location":"files-File/#valid","text":"[Source] Returns true if the file is currently open. fun box valid() : Bool val","title":"valid"},{"location":"files-File/#returns_5","text":"Bool val","title":"Returns"},{"location":"files-File/#read","text":"[Source] Returns up to len bytes. fun ref read( len: USize val) : Array[U8 val] iso^","title":"read"},{"location":"files-File/#parameters_3","text":"len: USize val","title":"Parameters"},{"location":"files-File/#returns_6","text":"Array [ U8 val] iso^","title":"Returns"},{"location":"files-File/#read_string","text":"[Source] Returns up to len bytes. The resulting string may have internal null characters. fun ref read_string( len: USize val) : String iso^","title":"read_string"},{"location":"files-File/#parameters_4","text":"len: USize val","title":"Parameters"},{"location":"files-File/#returns_7","text":"String iso^","title":"Returns"},{"location":"files-File/#print","text":"[Source] Same as write, buts adds a newline. fun ref print( data: (String box | Array[U8 val] box)) : Bool val","title":"print"},{"location":"files-File/#parameters_5","text":"data: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"files-File/#returns_8","text":"Bool val","title":"Returns"},{"location":"files-File/#printv","text":"[Source] Print an iterable collection of ByteSeqs. fun ref printv( data: ByteSeqIter box) : Bool val","title":"printv"},{"location":"files-File/#parameters_6","text":"data: ByteSeqIter box","title":"Parameters"},{"location":"files-File/#returns_9","text":"Bool val","title":"Returns"},{"location":"files-File/#write","text":"[Source] Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written. fun ref write( data: (String box | Array[U8 val] box)) : Bool val","title":"write"},{"location":"files-File/#parameters_7","text":"data: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"files-File/#returns_10","text":"Bool val","title":"Returns"},{"location":"files-File/#writev","text":"[Source] Write an iterable collection of ByteSeqs. fun ref writev( data: ByteSeqIter box) : Bool val","title":"writev"},{"location":"files-File/#parameters_8","text":"data: ByteSeqIter box","title":"Parameters"},{"location":"files-File/#returns_11","text":"Bool val","title":"Returns"},{"location":"files-File/#queue","text":"[Source] Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queue( data: (String box | Array[U8 val] box)) : None val","title":"queue"},{"location":"files-File/#parameters_9","text":"data: ( String box | Array [ U8 val] box)","title":"Parameters"},{"location":"files-File/#returns_12","text":"None val","title":"Returns"},{"location":"files-File/#queuev","text":"[Source] Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data fun ref queuev( data: ByteSeqIter box) : None val","title":"queuev"},{"location":"files-File/#parameters_10","text":"data: ByteSeqIter box","title":"Parameters"},{"location":"files-File/#returns_13","text":"None val","title":"Returns"},{"location":"files-File/#flush","text":"[Source] Flush any queued data fun ref flush() : Bool val","title":"flush"},{"location":"files-File/#returns_14","text":"Bool val","title":"Returns"},{"location":"files-File/#position","text":"[Source] Return the current cursor position in the file. fun ref position() : USize val","title":"position"},{"location":"files-File/#returns_15","text":"USize val","title":"Returns"},{"location":"files-File/#size","text":"[Source] Return the total length of the file. fun ref size() : USize val","title":"size"},{"location":"files-File/#returns_16","text":"USize val","title":"Returns"},{"location":"files-File/#seek_start","text":"[Source] Set the cursor position relative to the start of the file. fun ref seek_start( offset: USize val) : None val","title":"seek_start"},{"location":"files-File/#parameters_11","text":"offset: USize val","title":"Parameters"},{"location":"files-File/#returns_17","text":"None val","title":"Returns"},{"location":"files-File/#seek_end","text":"[Source] Set the cursor position relative to the end of the file. fun ref seek_end( offset: USize val) : None val","title":"seek_end"},{"location":"files-File/#parameters_12","text":"offset: USize val","title":"Parameters"},{"location":"files-File/#returns_18","text":"None val","title":"Returns"},{"location":"files-File/#seek","text":"[Source] Move the cursor position. fun ref seek( offset: ISize val) : None val","title":"seek"},{"location":"files-File/#parameters_13","text":"offset: ISize val","title":"Parameters"},{"location":"files-File/#returns_19","text":"None val","title":"Returns"},{"location":"files-File/#sync","text":"[Source] Sync the file contents to physical storage. fun ref sync() : None val","title":"sync"},{"location":"files-File/#returns_20","text":"None val","title":"Returns"},{"location":"files-File/#datasync","text":"[Source] Sync the file contents to physical storage. fun ref datasync() : None val","title":"datasync"},{"location":"files-File/#returns_21","text":"None val","title":"Returns"},{"location":"files-File/#set_length","text":"[Source] Change the file size. If it is made larger, the new contents are undefined. fun ref set_length( len: USize val) : Bool val","title":"set_length"},{"location":"files-File/#parameters_14","text":"len: USize val","title":"Parameters"},{"location":"files-File/#returns_22","text":"Bool val","title":"Returns"},{"location":"files-File/#info","text":"[Source] Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. fun box info() : FileInfo val ?","title":"info"},{"location":"files-File/#returns_23","text":"FileInfo val ?","title":"Returns"},{"location":"files-File/#chmod","text":"[Source] Set the FileMode for this directory. fun box chmod( mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-File/#parameters_15","text":"mode: FileMode box","title":"Parameters"},{"location":"files-File/#returns_24","text":"Bool val","title":"Returns"},{"location":"files-File/#chown","text":"[Source] Set the owner and group for this directory. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-File/#parameters_16","text":"uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-File/#returns_25","text":"Bool val","title":"Returns"},{"location":"files-File/#touch","text":"[Source] Set the last access and modification times of the directory to now. fun box touch() : Bool val","title":"touch"},{"location":"files-File/#returns_26","text":"Bool val","title":"Returns"},{"location":"files-File/#set_time","text":"[Source] Set the last access and modification times of the directory to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-File/#parameters_17","text":"atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-File/#returns_27","text":"Bool val","title":"Returns"},{"location":"files-File/#lines","text":"[Source] Returns an iterator for reading lines from the file. fun ref lines() : FileLines ref","title":"lines"},{"location":"files-File/#returns_28","text":"FileLines ref","title":"Returns"},{"location":"files-File/#dispose","text":"[Source] Close the file. Future operations will do nothing. fun ref dispose() : None val","title":"dispose"},{"location":"files-File/#returns_29","text":"None val","title":"Returns"},{"location":"files-File/#private-functions","text":"","title":"Private Functions"},{"location":"files-File/#_get_error","text":"[Source] Fetch errno from the OS. fun box _get_error() : (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"_get_error"},{"location":"files-File/#returns_30","text":"( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-File/#_pending_writes","text":"[Source] Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data. fun ref _pending_writes() : Bool val","title":"_pending_writes"},{"location":"files-File/#returns_31","text":"Bool val","title":"Returns"},{"location":"files-File/#_write_to_disk","text":"[Source] Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also. fun box _write_to_disk() : (Bool val , USize val , USize val) ?","title":"_write_to_disk"},{"location":"files-File/#returns_32","text":"( Bool val , USize val , USize val) ?","title":"Returns"},{"location":"files-File/#_seek","text":"[Source] Move the cursor position. fun ref _seek( offset: I64 val, base: I32 val) : None val","title":"_seek"},{"location":"files-File/#parameters_18","text":"offset: I64 val base: I32 val","title":"Parameters"},{"location":"files-File/#returns_33","text":"None val","title":"Returns"},{"location":"files-File/#_final","text":"[Source] Close the file. fun box _final() : None val","title":"_final"},{"location":"files-File/#returns_34","text":"None val","title":"Returns"},{"location":"files-FileBadFileNumber/","text":"FileBadFileNumber \u00b6 [Source] primitive val FileBadFileNumber Constructors \u00b6 create \u00b6 [Source] new val create() : FileBadFileNumber val^ Returns \u00b6 FileBadFileNumber val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FileBadFileNumber val) : Bool val Parameters \u00b6 that: FileBadFileNumber val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileBadFileNumber val) : Bool val Parameters \u00b6 that: FileBadFileNumber val Returns \u00b6 Bool val","title":"primitive FileBadFileNumber"},{"location":"files-FileBadFileNumber/#filebadfilenumber","text":"[Source] primitive val FileBadFileNumber","title":"FileBadFileNumber"},{"location":"files-FileBadFileNumber/#constructors","text":"","title":"Constructors"},{"location":"files-FileBadFileNumber/#create","text":"[Source] new val create() : FileBadFileNumber val^","title":"create"},{"location":"files-FileBadFileNumber/#returns","text":"FileBadFileNumber val^","title":"Returns"},{"location":"files-FileBadFileNumber/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileBadFileNumber/#eq","text":"[Source] fun box eq( that: FileBadFileNumber val) : Bool val","title":"eq"},{"location":"files-FileBadFileNumber/#parameters","text":"that: FileBadFileNumber val","title":"Parameters"},{"location":"files-FileBadFileNumber/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileBadFileNumber/#ne","text":"[Source] fun box ne( that: FileBadFileNumber val) : Bool val","title":"ne"},{"location":"files-FileBadFileNumber/#parameters_1","text":"that: FileBadFileNumber val","title":"Parameters"},{"location":"files-FileBadFileNumber/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileCaps/","text":"FileCaps \u00b6 [Source] type FileCaps is Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref Type Alias For \u00b6 Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","title":"type FileCaps"},{"location":"files-FileCaps/#filecaps","text":"[Source] type FileCaps is Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","title":"FileCaps"},{"location":"files-FileCaps/#type-alias-for","text":"Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref","title":"Type Alias For"},{"location":"files-FileChmod/","text":"FileChmod \u00b6 [Source] primitive val FileChmod Constructors \u00b6 create \u00b6 [Source] new val create() : FileChmod val^ Returns \u00b6 FileChmod val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileChmod val) : Bool val Parameters \u00b6 that: FileChmod val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileChmod val) : Bool val Parameters \u00b6 that: FileChmod val Returns \u00b6 Bool val","title":"primitive FileChmod"},{"location":"files-FileChmod/#filechmod","text":"[Source] primitive val FileChmod","title":"FileChmod"},{"location":"files-FileChmod/#constructors","text":"","title":"Constructors"},{"location":"files-FileChmod/#create","text":"[Source] new val create() : FileChmod val^","title":"create"},{"location":"files-FileChmod/#returns","text":"FileChmod val^","title":"Returns"},{"location":"files-FileChmod/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileChmod/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileChmod/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileChmod/#eq","text":"[Source] fun box eq( that: FileChmod val) : Bool val","title":"eq"},{"location":"files-FileChmod/#parameters","text":"that: FileChmod val","title":"Parameters"},{"location":"files-FileChmod/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileChmod/#ne","text":"[Source] fun box ne( that: FileChmod val) : Bool val","title":"ne"},{"location":"files-FileChmod/#parameters_1","text":"that: FileChmod val","title":"Parameters"},{"location":"files-FileChmod/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileChown/","text":"FileChown \u00b6 [Source] primitive val FileChown Constructors \u00b6 create \u00b6 [Source] new val create() : FileChown val^ Returns \u00b6 FileChown val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileChown val) : Bool val Parameters \u00b6 that: FileChown val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileChown val) : Bool val Parameters \u00b6 that: FileChown val Returns \u00b6 Bool val","title":"primitive FileChown"},{"location":"files-FileChown/#filechown","text":"[Source] primitive val FileChown","title":"FileChown"},{"location":"files-FileChown/#constructors","text":"","title":"Constructors"},{"location":"files-FileChown/#create","text":"[Source] new val create() : FileChown val^","title":"create"},{"location":"files-FileChown/#returns","text":"FileChown val^","title":"Returns"},{"location":"files-FileChown/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileChown/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileChown/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileChown/#eq","text":"[Source] fun box eq( that: FileChown val) : Bool val","title":"eq"},{"location":"files-FileChown/#parameters","text":"that: FileChown val","title":"Parameters"},{"location":"files-FileChown/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileChown/#ne","text":"[Source] fun box ne( that: FileChown val) : Bool val","title":"ne"},{"location":"files-FileChown/#parameters_1","text":"that: FileChown val","title":"Parameters"},{"location":"files-FileChown/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileCreate/","text":"FileCreate \u00b6 [Source] primitive val FileCreate Constructors \u00b6 create \u00b6 [Source] new val create() : FileCreate val^ Returns \u00b6 FileCreate val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileCreate val) : Bool val Parameters \u00b6 that: FileCreate val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileCreate val) : Bool val Parameters \u00b6 that: FileCreate val Returns \u00b6 Bool val","title":"primitive FileCreate"},{"location":"files-FileCreate/#filecreate","text":"[Source] primitive val FileCreate","title":"FileCreate"},{"location":"files-FileCreate/#constructors","text":"","title":"Constructors"},{"location":"files-FileCreate/#create","text":"[Source] new val create() : FileCreate val^","title":"create"},{"location":"files-FileCreate/#returns","text":"FileCreate val^","title":"Returns"},{"location":"files-FileCreate/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileCreate/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileCreate/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileCreate/#eq","text":"[Source] fun box eq( that: FileCreate val) : Bool val","title":"eq"},{"location":"files-FileCreate/#parameters","text":"that: FileCreate val","title":"Parameters"},{"location":"files-FileCreate/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileCreate/#ne","text":"[Source] fun box ne( that: FileCreate val) : Bool val","title":"ne"},{"location":"files-FileCreate/#parameters_1","text":"that: FileCreate val","title":"Parameters"},{"location":"files-FileCreate/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileEOF/","text":"FileEOF \u00b6 [Source] primitive val FileEOF Constructors \u00b6 create \u00b6 [Source] new val create() : FileEOF val^ Returns \u00b6 FileEOF val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FileEOF val) : Bool val Parameters \u00b6 that: FileEOF val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileEOF val) : Bool val Parameters \u00b6 that: FileEOF val Returns \u00b6 Bool val","title":"primitive FileEOF"},{"location":"files-FileEOF/#fileeof","text":"[Source] primitive val FileEOF","title":"FileEOF"},{"location":"files-FileEOF/#constructors","text":"","title":"Constructors"},{"location":"files-FileEOF/#create","text":"[Source] new val create() : FileEOF val^","title":"create"},{"location":"files-FileEOF/#returns","text":"FileEOF val^","title":"Returns"},{"location":"files-FileEOF/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileEOF/#eq","text":"[Source] fun box eq( that: FileEOF val) : Bool val","title":"eq"},{"location":"files-FileEOF/#parameters","text":"that: FileEOF val","title":"Parameters"},{"location":"files-FileEOF/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileEOF/#ne","text":"[Source] fun box ne( that: FileEOF val) : Bool val","title":"ne"},{"location":"files-FileEOF/#parameters_1","text":"that: FileEOF val","title":"Parameters"},{"location":"files-FileEOF/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileErrNo/","text":"FileErrNo \u00b6 [Source] type FileErrNo is (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Type Alias For \u00b6 ( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"type FileErrNo"},{"location":"files-FileErrNo/#fileerrno","text":"[Source] type FileErrNo is (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"FileErrNo"},{"location":"files-FileErrNo/#type-alias-for","text":"( FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Type Alias For"},{"location":"files-FileError/","text":"FileError \u00b6 [Source] primitive val FileError Constructors \u00b6 create \u00b6 [Source] new val create() : FileError val^ Returns \u00b6 FileError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FileError val) : Bool val Parameters \u00b6 that: FileError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileError val) : Bool val Parameters \u00b6 that: FileError val Returns \u00b6 Bool val","title":"primitive FileError"},{"location":"files-FileError/#fileerror","text":"[Source] primitive val FileError","title":"FileError"},{"location":"files-FileError/#constructors","text":"","title":"Constructors"},{"location":"files-FileError/#create","text":"[Source] new val create() : FileError val^","title":"create"},{"location":"files-FileError/#returns","text":"FileError val^","title":"Returns"},{"location":"files-FileError/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileError/#eq","text":"[Source] fun box eq( that: FileError val) : Bool val","title":"eq"},{"location":"files-FileError/#parameters","text":"that: FileError val","title":"Parameters"},{"location":"files-FileError/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileError/#ne","text":"[Source] fun box ne( that: FileError val) : Bool val","title":"ne"},{"location":"files-FileError/#parameters_1","text":"that: FileError val","title":"Parameters"},{"location":"files-FileError/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileExec/","text":"FileExec \u00b6 [Source] primitive val FileExec Constructors \u00b6 create \u00b6 [Source] new val create() : FileExec val^ Returns \u00b6 FileExec val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileExec val) : Bool val Parameters \u00b6 that: FileExec val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileExec val) : Bool val Parameters \u00b6 that: FileExec val Returns \u00b6 Bool val","title":"primitive FileExec"},{"location":"files-FileExec/#fileexec","text":"[Source] primitive val FileExec","title":"FileExec"},{"location":"files-FileExec/#constructors","text":"","title":"Constructors"},{"location":"files-FileExec/#create","text":"[Source] new val create() : FileExec val^","title":"create"},{"location":"files-FileExec/#returns","text":"FileExec val^","title":"Returns"},{"location":"files-FileExec/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileExec/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileExec/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileExec/#eq","text":"[Source] fun box eq( that: FileExec val) : Bool val","title":"eq"},{"location":"files-FileExec/#parameters","text":"that: FileExec val","title":"Parameters"},{"location":"files-FileExec/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileExec/#ne","text":"[Source] fun box ne( that: FileExec val) : Bool val","title":"ne"},{"location":"files-FileExec/#parameters_1","text":"that: FileExec val","title":"Parameters"},{"location":"files-FileExec/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileExists/","text":"FileExists \u00b6 [Source] primitive val FileExists Constructors \u00b6 create \u00b6 [Source] new val create() : FileExists val^ Returns \u00b6 FileExists val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FileExists val) : Bool val Parameters \u00b6 that: FileExists val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileExists val) : Bool val Parameters \u00b6 that: FileExists val Returns \u00b6 Bool val","title":"primitive FileExists"},{"location":"files-FileExists/#fileexists","text":"[Source] primitive val FileExists","title":"FileExists"},{"location":"files-FileExists/#constructors","text":"","title":"Constructors"},{"location":"files-FileExists/#create","text":"[Source] new val create() : FileExists val^","title":"create"},{"location":"files-FileExists/#returns","text":"FileExists val^","title":"Returns"},{"location":"files-FileExists/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileExists/#eq","text":"[Source] fun box eq( that: FileExists val) : Bool val","title":"eq"},{"location":"files-FileExists/#parameters","text":"that: FileExists val","title":"Parameters"},{"location":"files-FileExists/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileExists/#ne","text":"[Source] fun box ne( that: FileExists val) : Bool val","title":"ne"},{"location":"files-FileExists/#parameters_1","text":"that: FileExists val","title":"Parameters"},{"location":"files-FileExists/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileInfo/","text":"FileInfo \u00b6 [Source] This contains file system metadata for a path. A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag. class val FileInfo Constructors \u00b6 create \u00b6 [Source] This will raise an error if the FileStat capability isn't available or the path doesn't exist. new val create( from: FilePath val) : FileInfo val^ ? Parameters \u00b6 from: FilePath val Returns \u00b6 FileInfo val^ ? _descriptor \u00b6 [Source] This will raise an error if the FileStat capability isn't available or the file descriptor is invalid. new val _descriptor( fd: I32 val, path: FilePath val) : FileInfo val^ ? Parameters \u00b6 fd: I32 val path: FilePath val Returns \u00b6 FileInfo val^ ? _relative \u00b6 [Source] new val _relative( fd: I32 val, path: FilePath val, from: String val) : FileInfo val^ ? Parameters \u00b6 fd: I32 val path: FilePath val from: String val Returns \u00b6 FileInfo val^ ? Public fields \u00b6 let filepath: FilePath val \u00b6 [Source] let mode: FileMode val \u00b6 [Source] UNIX-style file mode. let hard_links: U32 val \u00b6 [Source] Number of hardlinks to this filepath . let device: U64 val \u00b6 [Source] OS id of the device containing this filepath . Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system. let inode: U64 val \u00b6 [Source] UNIX specific INODE number of filepath . Is 0 on Windows. let uid: U32 val \u00b6 [Source] UNIX-style user ID of the owner of filepath . let gid: U32 val \u00b6 [Source] UNIX-style user ID of the owning group of filepath . let size: USize val \u00b6 [Source] Total size of filepath in bytes. In case of a symlink this is the size of the target, not the symlink itself. let access_time: ( I64 val , I64 val) \u00b6 [Source] Time of last access as a tuple of seconds and nanoseconds since the epoch: (let a_secs: I64, let a_nanos: I64) = file_info.access_time let modified_time: ( I64 val , I64 val) \u00b6 [Source] Time of last modification as tuple of seconds and nanoseconds since the epoch: (let m_secs: I64, let m_nanos: I64) = file_info.modified_time let change_time: ( I64 val , I64 val) \u00b6 [Source] Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of filepath as a tuple of seconds and nanoseconds since the epoch: (let c_secs: I64, let c_nanos: I64) = file_info.change_time On Windows this will be the file creation time. let file: Bool val \u00b6 [Source] true if filepath points to an a regular file. let directory: Bool val \u00b6 [Source] true if filepath points to a directory. let pipe: Bool val \u00b6 [Source] true if filepath points to a named pipe. let symlink: Bool val \u00b6 [Source] true if filepath points to a symbolic link. let broken: Bool val \u00b6 [Source] true if filepath points to a broken symlink.","title":"class FileInfo"},{"location":"files-FileInfo/#fileinfo","text":"[Source] This contains file system metadata for a path. A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag. class val FileInfo","title":"FileInfo"},{"location":"files-FileInfo/#constructors","text":"","title":"Constructors"},{"location":"files-FileInfo/#create","text":"[Source] This will raise an error if the FileStat capability isn't available or the path doesn't exist. new val create( from: FilePath val) : FileInfo val^ ?","title":"create"},{"location":"files-FileInfo/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-FileInfo/#returns","text":"FileInfo val^ ?","title":"Returns"},{"location":"files-FileInfo/#_descriptor","text":"[Source] This will raise an error if the FileStat capability isn't available or the file descriptor is invalid. new val _descriptor( fd: I32 val, path: FilePath val) : FileInfo val^ ?","title":"_descriptor"},{"location":"files-FileInfo/#parameters_1","text":"fd: I32 val path: FilePath val","title":"Parameters"},{"location":"files-FileInfo/#returns_1","text":"FileInfo val^ ?","title":"Returns"},{"location":"files-FileInfo/#_relative","text":"[Source] new val _relative( fd: I32 val, path: FilePath val, from: String val) : FileInfo val^ ?","title":"_relative"},{"location":"files-FileInfo/#parameters_2","text":"fd: I32 val path: FilePath val from: String val","title":"Parameters"},{"location":"files-FileInfo/#returns_2","text":"FileInfo val^ ?","title":"Returns"},{"location":"files-FileInfo/#public-fields","text":"","title":"Public fields"},{"location":"files-FileInfo/#let-filepath-filepath-val","text":"[Source]","title":"let filepath: FilePath val"},{"location":"files-FileInfo/#let-mode-filemode-val","text":"[Source] UNIX-style file mode.","title":"let mode: FileMode val"},{"location":"files-FileInfo/#let-hard_links-u32-val","text":"[Source] Number of hardlinks to this filepath .","title":"let hard_links: U32 val"},{"location":"files-FileInfo/#let-device-u64-val","text":"[Source] OS id of the device containing this filepath . Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system.","title":"let device: U64 val"},{"location":"files-FileInfo/#let-inode-u64-val","text":"[Source] UNIX specific INODE number of filepath . Is 0 on Windows.","title":"let inode: U64 val"},{"location":"files-FileInfo/#let-uid-u32-val","text":"[Source] UNIX-style user ID of the owner of filepath .","title":"let uid: U32 val"},{"location":"files-FileInfo/#let-gid-u32-val","text":"[Source] UNIX-style user ID of the owning group of filepath .","title":"let gid: U32 val"},{"location":"files-FileInfo/#let-size-usize-val","text":"[Source] Total size of filepath in bytes. In case of a symlink this is the size of the target, not the symlink itself.","title":"let size: USize val"},{"location":"files-FileInfo/#let-access_time-i64-val-i64-val","text":"[Source] Time of last access as a tuple of seconds and nanoseconds since the epoch: (let a_secs: I64, let a_nanos: I64) = file_info.access_time","title":"let access_time: (I64 val , I64 val)"},{"location":"files-FileInfo/#let-modified_time-i64-val-i64-val","text":"[Source] Time of last modification as tuple of seconds and nanoseconds since the epoch: (let m_secs: I64, let m_nanos: I64) = file_info.modified_time","title":"let modified_time: (I64 val , I64 val)"},{"location":"files-FileInfo/#let-change_time-i64-val-i64-val","text":"[Source] Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of filepath as a tuple of seconds and nanoseconds since the epoch: (let c_secs: I64, let c_nanos: I64) = file_info.change_time On Windows this will be the file creation time.","title":"let change_time: (I64 val , I64 val)"},{"location":"files-FileInfo/#let-file-bool-val","text":"[Source] true if filepath points to an a regular file.","title":"let file: Bool val"},{"location":"files-FileInfo/#let-directory-bool-val","text":"[Source] true if filepath points to a directory.","title":"let directory: Bool val"},{"location":"files-FileInfo/#let-pipe-bool-val","text":"[Source] true if filepath points to a named pipe.","title":"let pipe: Bool val"},{"location":"files-FileInfo/#let-symlink-bool-val","text":"[Source] true if filepath points to a symbolic link.","title":"let symlink: Bool val"},{"location":"files-FileInfo/#let-broken-bool-val","text":"[Source] true if filepath points to a broken symlink.","title":"let broken: Bool val"},{"location":"files-FileLines/","text":"FileLines \u00b6 [Source] Iterate over the lines in a file. Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from next . This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care. class ref FileLines is Iterator[String iso^] ref Implements \u00b6 Iterator [ String iso^] ref Constructors \u00b6 create \u00b6 [Source] Create a FileLines instance on a given file. This instance returns lines from the position of the given file at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines. min_read_size determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than min_read_size . new ref create( file: File ref, min_read_size: USize val = 256) : FileLines ref^ Parameters \u00b6 file: File ref min_read_size: USize val = 256 Returns \u00b6 FileLines ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Returns the next line in the file. fun ref next() : String iso^ ? Returns \u00b6 String iso^ ? Private Functions \u00b6 _read_line \u00b6 [Source] fun ref _read_line() : String iso^ ? Returns \u00b6 String iso^ ? _fill_buffer \u00b6 [Source] read from file and fill the reader-buffer. Returns true if data could be read from the file. After a successful reading operation _buffer_cursor is updated. fun ref _fill_buffer() : Bool val Returns \u00b6 Bool val _read_last_line \u00b6 [Source] fun ref _read_last_line() : String iso^ ? Returns \u00b6 String iso^ ? _inc_public_file_cursor \u00b6 [Source] fun ref _inc_public_file_cursor( amount: USize val) : None val Parameters \u00b6 amount: USize val Returns \u00b6 None val","title":"class FileLines"},{"location":"files-FileLines/#filelines","text":"[Source] Iterate over the lines in a file. Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from next . This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care. class ref FileLines is Iterator[String iso^] ref","title":"FileLines"},{"location":"files-FileLines/#implements","text":"Iterator [ String iso^] ref","title":"Implements"},{"location":"files-FileLines/#constructors","text":"","title":"Constructors"},{"location":"files-FileLines/#create","text":"[Source] Create a FileLines instance on a given file. This instance returns lines from the position of the given file at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines. min_read_size determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than min_read_size . new ref create( file: File ref, min_read_size: USize val = 256) : FileLines ref^","title":"create"},{"location":"files-FileLines/#parameters","text":"file: File ref min_read_size: USize val = 256","title":"Parameters"},{"location":"files-FileLines/#returns","text":"FileLines ref^","title":"Returns"},{"location":"files-FileLines/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileLines/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"files-FileLines/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileLines/#next","text":"[Source] Returns the next line in the file. fun ref next() : String iso^ ?","title":"next"},{"location":"files-FileLines/#returns_2","text":"String iso^ ?","title":"Returns"},{"location":"files-FileLines/#private-functions","text":"","title":"Private Functions"},{"location":"files-FileLines/#_read_line","text":"[Source] fun ref _read_line() : String iso^ ?","title":"_read_line"},{"location":"files-FileLines/#returns_3","text":"String iso^ ?","title":"Returns"},{"location":"files-FileLines/#_fill_buffer","text":"[Source] read from file and fill the reader-buffer. Returns true if data could be read from the file. After a successful reading operation _buffer_cursor is updated. fun ref _fill_buffer() : Bool val","title":"_fill_buffer"},{"location":"files-FileLines/#returns_4","text":"Bool val","title":"Returns"},{"location":"files-FileLines/#_read_last_line","text":"[Source] fun ref _read_last_line() : String iso^ ?","title":"_read_last_line"},{"location":"files-FileLines/#returns_5","text":"String iso^ ?","title":"Returns"},{"location":"files-FileLines/#_inc_public_file_cursor","text":"[Source] fun ref _inc_public_file_cursor( amount: USize val) : None val","title":"_inc_public_file_cursor"},{"location":"files-FileLines/#parameters_1","text":"amount: USize val","title":"Parameters"},{"location":"files-FileLines/#returns_6","text":"None val","title":"Returns"},{"location":"files-FileLink/","text":"FileLink \u00b6 [Source] primitive val FileLink Constructors \u00b6 create \u00b6 [Source] new val create() : FileLink val^ Returns \u00b6 FileLink val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileLink val) : Bool val Parameters \u00b6 that: FileLink val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileLink val) : Bool val Parameters \u00b6 that: FileLink val Returns \u00b6 Bool val","title":"primitive FileLink"},{"location":"files-FileLink/#filelink","text":"[Source] primitive val FileLink","title":"FileLink"},{"location":"files-FileLink/#constructors","text":"","title":"Constructors"},{"location":"files-FileLink/#create","text":"[Source] new val create() : FileLink val^","title":"create"},{"location":"files-FileLink/#returns","text":"FileLink val^","title":"Returns"},{"location":"files-FileLink/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileLink/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileLink/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileLink/#eq","text":"[Source] fun box eq( that: FileLink val) : Bool val","title":"eq"},{"location":"files-FileLink/#parameters","text":"that: FileLink val","title":"Parameters"},{"location":"files-FileLink/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileLink/#ne","text":"[Source] fun box ne( that: FileLink val) : Bool val","title":"ne"},{"location":"files-FileLink/#parameters_1","text":"that: FileLink val","title":"Parameters"},{"location":"files-FileLink/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileLookup/","text":"FileLookup \u00b6 [Source] primitive val FileLookup Constructors \u00b6 create \u00b6 [Source] new val create() : FileLookup val^ Returns \u00b6 FileLookup val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileLookup val) : Bool val Parameters \u00b6 that: FileLookup val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileLookup val) : Bool val Parameters \u00b6 that: FileLookup val Returns \u00b6 Bool val","title":"primitive FileLookup"},{"location":"files-FileLookup/#filelookup","text":"[Source] primitive val FileLookup","title":"FileLookup"},{"location":"files-FileLookup/#constructors","text":"","title":"Constructors"},{"location":"files-FileLookup/#create","text":"[Source] new val create() : FileLookup val^","title":"create"},{"location":"files-FileLookup/#returns","text":"FileLookup val^","title":"Returns"},{"location":"files-FileLookup/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileLookup/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileLookup/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileLookup/#eq","text":"[Source] fun box eq( that: FileLookup val) : Bool val","title":"eq"},{"location":"files-FileLookup/#parameters","text":"that: FileLookup val","title":"Parameters"},{"location":"files-FileLookup/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileLookup/#ne","text":"[Source] fun box ne( that: FileLookup val) : Bool val","title":"ne"},{"location":"files-FileLookup/#parameters_1","text":"that: FileLookup val","title":"Parameters"},{"location":"files-FileLookup/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileMkdir/","text":"FileMkdir \u00b6 [Source] primitive val FileMkdir Constructors \u00b6 create \u00b6 [Source] new val create() : FileMkdir val^ Returns \u00b6 FileMkdir val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileMkdir val) : Bool val Parameters \u00b6 that: FileMkdir val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileMkdir val) : Bool val Parameters \u00b6 that: FileMkdir val Returns \u00b6 Bool val","title":"primitive FileMkdir"},{"location":"files-FileMkdir/#filemkdir","text":"[Source] primitive val FileMkdir","title":"FileMkdir"},{"location":"files-FileMkdir/#constructors","text":"","title":"Constructors"},{"location":"files-FileMkdir/#create","text":"[Source] new val create() : FileMkdir val^","title":"create"},{"location":"files-FileMkdir/#returns","text":"FileMkdir val^","title":"Returns"},{"location":"files-FileMkdir/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileMkdir/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileMkdir/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileMkdir/#eq","text":"[Source] fun box eq( that: FileMkdir val) : Bool val","title":"eq"},{"location":"files-FileMkdir/#parameters","text":"that: FileMkdir val","title":"Parameters"},{"location":"files-FileMkdir/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileMkdir/#ne","text":"[Source] fun box ne( that: FileMkdir val) : Bool val","title":"ne"},{"location":"files-FileMkdir/#parameters_1","text":"that: FileMkdir val","title":"Parameters"},{"location":"files-FileMkdir/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileMode/","text":"FileMode \u00b6 [Source] This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set. The default mode is read/write for the owner, read-only for everyone else. class ref FileMode Constructors \u00b6 create \u00b6 [Source] new iso create() : FileMode iso^ Returns \u00b6 FileMode iso^ Public fields \u00b6 var setuid: Bool val \u00b6 [Source] true if the SETUID bit is set. var setgid: Bool val \u00b6 [Source] true if the SETGID bit is set. var sticky: Bool val \u00b6 [Source] true if the sticky bit is set. var owner_read: Bool val \u00b6 [Source] true if the owning user can read the file. var owner_write: Bool val \u00b6 [Source] true if the owning user can write to the file. var owner_exec: Bool val \u00b6 [Source] true if the owning user can execute the file. var group_read: Bool val \u00b6 [Source] true if members of the owning group can read the file. var group_write: Bool val \u00b6 [Source] true if members of the owning group can write to the file. var group_exec: Bool val \u00b6 [Source] true if members of the owning group can execute the file. var any_read: Bool val \u00b6 [Source] true if every user can read the file. var any_write: Bool val \u00b6 [Source] true if every user can write to the file. var any_exec: Bool val \u00b6 [Source] `true if every user can execute the file. Public Functions \u00b6 exec \u00b6 [Source] Set the executable flag for everyone. fun ref exec() : None val Returns \u00b6 None val shared \u00b6 [Source] Set the write flag for everyone to the same as owner_write. fun ref shared() : None val Returns \u00b6 None val group \u00b6 [Source] Clear all of the any-user flags. fun ref group() : None val Returns \u00b6 None val private \u00b6 [Source] Clear all of the group and any-user flags. fun ref private() : None val Returns \u00b6 None val Private Functions \u00b6 _os \u00b6 [Source] Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable. fun box _os() : U32 val Returns \u00b6 U32 val","title":"class FileMode"},{"location":"files-FileMode/#filemode","text":"[Source] This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set. The default mode is read/write for the owner, read-only for everyone else. class ref FileMode","title":"FileMode"},{"location":"files-FileMode/#constructors","text":"","title":"Constructors"},{"location":"files-FileMode/#create","text":"[Source] new iso create() : FileMode iso^","title":"create"},{"location":"files-FileMode/#returns","text":"FileMode iso^","title":"Returns"},{"location":"files-FileMode/#public-fields","text":"","title":"Public fields"},{"location":"files-FileMode/#var-setuid-bool-val","text":"[Source] true if the SETUID bit is set.","title":"var setuid: Bool val"},{"location":"files-FileMode/#var-setgid-bool-val","text":"[Source] true if the SETGID bit is set.","title":"var setgid: Bool val"},{"location":"files-FileMode/#var-sticky-bool-val","text":"[Source] true if the sticky bit is set.","title":"var sticky: Bool val"},{"location":"files-FileMode/#var-owner_read-bool-val","text":"[Source] true if the owning user can read the file.","title":"var owner_read: Bool val"},{"location":"files-FileMode/#var-owner_write-bool-val","text":"[Source] true if the owning user can write to the file.","title":"var owner_write: Bool val"},{"location":"files-FileMode/#var-owner_exec-bool-val","text":"[Source] true if the owning user can execute the file.","title":"var owner_exec: Bool val"},{"location":"files-FileMode/#var-group_read-bool-val","text":"[Source] true if members of the owning group can read the file.","title":"var group_read: Bool val"},{"location":"files-FileMode/#var-group_write-bool-val","text":"[Source] true if members of the owning group can write to the file.","title":"var group_write: Bool val"},{"location":"files-FileMode/#var-group_exec-bool-val","text":"[Source] true if members of the owning group can execute the file.","title":"var group_exec: Bool val"},{"location":"files-FileMode/#var-any_read-bool-val","text":"[Source] true if every user can read the file.","title":"var any_read: Bool val"},{"location":"files-FileMode/#var-any_write-bool-val","text":"[Source] true if every user can write to the file.","title":"var any_write: Bool val"},{"location":"files-FileMode/#var-any_exec-bool-val","text":"[Source] `true if every user can execute the file.","title":"var any_exec: Bool val"},{"location":"files-FileMode/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileMode/#exec","text":"[Source] Set the executable flag for everyone. fun ref exec() : None val","title":"exec"},{"location":"files-FileMode/#returns_1","text":"None val","title":"Returns"},{"location":"files-FileMode/#shared","text":"[Source] Set the write flag for everyone to the same as owner_write. fun ref shared() : None val","title":"shared"},{"location":"files-FileMode/#returns_2","text":"None val","title":"Returns"},{"location":"files-FileMode/#group","text":"[Source] Clear all of the any-user flags. fun ref group() : None val","title":"group"},{"location":"files-FileMode/#returns_3","text":"None val","title":"Returns"},{"location":"files-FileMode/#private","text":"[Source] Clear all of the group and any-user flags. fun ref private() : None val","title":"private"},{"location":"files-FileMode/#returns_4","text":"None val","title":"Returns"},{"location":"files-FileMode/#private-functions","text":"","title":"Private Functions"},{"location":"files-FileMode/#_os","text":"[Source] Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable. fun box _os() : U32 val","title":"_os"},{"location":"files-FileMode/#returns_5","text":"U32 val","title":"Returns"},{"location":"files-FileOK/","text":"FileOK \u00b6 [Source] primitive val FileOK Constructors \u00b6 create \u00b6 [Source] new val create() : FileOK val^ Returns \u00b6 FileOK val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FileOK val) : Bool val Parameters \u00b6 that: FileOK val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileOK val) : Bool val Parameters \u00b6 that: FileOK val Returns \u00b6 Bool val","title":"primitive FileOK"},{"location":"files-FileOK/#fileok","text":"[Source] primitive val FileOK","title":"FileOK"},{"location":"files-FileOK/#constructors","text":"","title":"Constructors"},{"location":"files-FileOK/#create","text":"[Source] new val create() : FileOK val^","title":"create"},{"location":"files-FileOK/#returns","text":"FileOK val^","title":"Returns"},{"location":"files-FileOK/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileOK/#eq","text":"[Source] fun box eq( that: FileOK val) : Bool val","title":"eq"},{"location":"files-FileOK/#parameters","text":"that: FileOK val","title":"Parameters"},{"location":"files-FileOK/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FileOK/#ne","text":"[Source] fun box ne( that: FileOK val) : Bool val","title":"ne"},{"location":"files-FileOK/#parameters_1","text":"that: FileOK val","title":"Parameters"},{"location":"files-FileOK/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FilePath/","text":"FilePath \u00b6 [Source] A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path. class val FilePath Constructors \u00b6 create \u00b6 [Source] Create a new path. The caller must either provide the root capability or an existing FilePath. If the root capability is provided, path' will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the parent. new val create( base: (FilePath val | AmbientAuth val), path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover) : FilePath val^ ? Parameters \u00b6 base: ( FilePath val | AmbientAuth val) path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover Returns \u00b6 FilePath val^ ? mkdtemp \u00b6 [Source] Create a temporary directory and returns a path to it. The directory's name will begin with prefix . The caller must either provide the root capability or an existing FilePath. If AmbientAuth is provided, pattern will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base. new val mkdtemp( base: (FilePath val | AmbientAuth val), prefix: String val = \"\", caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover) : FilePath val^ ? Parameters \u00b6 base: ( FilePath val | AmbientAuth val) prefix: String val = \"\" caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover Returns \u00b6 FilePath val^ ? _create \u00b6 [Source] Internal constructor. new val _create( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val) : FilePath val^ Parameters \u00b6 path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val Returns \u00b6 FilePath val^ Public fields \u00b6 let path: String val \u00b6 [Source] Absolute filesystem path. let caps: Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref \u00b6 [Source] Set of capabilities for operations on path . Public Functions \u00b6 join \u00b6 [Source] Return a new path relative to this one. fun val join( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover) : FilePath val ? Parameters \u00b6 path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover Returns \u00b6 FilePath val ? walk \u00b6 [Source] Walks a directory structure starting at this. handler(dir_path, dir_entries) will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the dir_entries list. fun val walk( handler: WalkHandler ref, follow_links: Bool val = false) : None val Parameters \u00b6 handler: WalkHandler ref follow_links: Bool val = false Returns \u00b6 None val canonical \u00b6 [Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun val canonical() : FilePath val ? Returns \u00b6 FilePath val ? exists \u00b6 [Source] Returns true if the path exists. Returns false for a broken symlink. fun val exists() : Bool val Returns \u00b6 Bool val mkdir \u00b6 [Source] Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist. fun val mkdir( must_create: Bool val = false) : Bool val Parameters \u00b6 must_create: Bool val = false Returns \u00b6 Bool val remove \u00b6 [Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun val remove() : Bool val Returns \u00b6 Bool val rename \u00b6 [Source] Rename a file or directory. fun box rename( new_path: FilePath val) : Bool val Parameters \u00b6 new_path: FilePath val Returns \u00b6 Bool val symlink \u00b6 [Source] Create a symlink to a file or directory. fun box symlink( link_name: FilePath val) : Bool val Parameters \u00b6 link_name: FilePath val Returns \u00b6 Bool val chmod \u00b6 [Source] Set the FileMode for a path. fun box chmod( mode: FileMode box) : Bool val Parameters \u00b6 mode: FileMode box Returns \u00b6 Bool val chown \u00b6 [Source] Set the owner and group for a path. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val Parameters \u00b6 uid: U32 val gid: U32 val Returns \u00b6 Bool val touch \u00b6 [Source] Set the last access and modification times of a path to now. fun box touch() : Bool val Returns \u00b6 Bool val set_time \u00b6 [Source] Set the last access and modification times of a path to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters \u00b6 atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns \u00b6 Bool val","title":"class FilePath"},{"location":"files-FilePath/#filepath","text":"[Source] A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path. class val FilePath","title":"FilePath"},{"location":"files-FilePath/#constructors","text":"","title":"Constructors"},{"location":"files-FilePath/#create","text":"[Source] Create a new path. The caller must either provide the root capability or an existing FilePath. If the root capability is provided, path' will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the parent. new val create( base: (FilePath val | AmbientAuth val), path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover) : FilePath val^ ?","title":"create"},{"location":"files-FilePath/#parameters","text":"base: ( FilePath val | AmbientAuth val) path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover","title":"Parameters"},{"location":"files-FilePath/#returns","text":"FilePath val^ ?","title":"Returns"},{"location":"files-FilePath/#mkdtemp","text":"[Source] Create a temporary directory and returns a path to it. The directory's name will begin with prefix . The caller must either provide the root capability or an existing FilePath. If AmbientAuth is provided, pattern will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base. new val mkdtemp( base: (FilePath val | AmbientAuth val), prefix: String val = \"\", caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover) : FilePath val^ ?","title":"mkdtemp"},{"location":"files-FilePath/#parameters_1","text":"base: ( FilePath val | AmbientAuth val) prefix: String val = \"\" caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover","title":"Parameters"},{"location":"files-FilePath/#returns_1","text":"FilePath val^ ?","title":"Returns"},{"location":"files-FilePath/#_create","text":"[Source] Internal constructor. new val _create( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val) : FilePath val^","title":"_create"},{"location":"files-FilePath/#parameters_2","text":"path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val","title":"Parameters"},{"location":"files-FilePath/#returns_2","text":"FilePath val^","title":"Returns"},{"location":"files-FilePath/#public-fields","text":"","title":"Public fields"},{"location":"files-FilePath/#let-path-string-val","text":"[Source] Absolute filesystem path.","title":"let path: String val"},{"location":"files-FilePath/#let-caps-flags91filecreate-val-filechmod-val-filechown-val-filelink-val-filelookup-val-filemkdir-val-fileread-val-fileremove-val-filerename-val-fileseek-val-filestat-val-filesync-val-filetime-val-filetruncate-val-filewrite-val-fileexec-val-u32-val93-ref","text":"[Source] Set of capabilities for operations on path .","title":"let caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref"},{"location":"files-FilePath/#public-functions","text":"","title":"Public Functions"},{"location":"files-FilePath/#join","text":"[Source] Return a new path relative to this one. fun val join( path': String val, caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover) : FilePath val ?","title":"join"},{"location":"files-FilePath/#parameters_3","text":"path': String val caps': Flags [( FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = recover","title":"Parameters"},{"location":"files-FilePath/#returns_3","text":"FilePath val ?","title":"Returns"},{"location":"files-FilePath/#walk","text":"[Source] Walks a directory structure starting at this. handler(dir_path, dir_entries) will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the dir_entries list. fun val walk( handler: WalkHandler ref, follow_links: Bool val = false) : None val","title":"walk"},{"location":"files-FilePath/#parameters_4","text":"handler: WalkHandler ref follow_links: Bool val = false","title":"Parameters"},{"location":"files-FilePath/#returns_4","text":"None val","title":"Returns"},{"location":"files-FilePath/#canonical","text":"[Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun val canonical() : FilePath val ?","title":"canonical"},{"location":"files-FilePath/#returns_5","text":"FilePath val ?","title":"Returns"},{"location":"files-FilePath/#exists","text":"[Source] Returns true if the path exists. Returns false for a broken symlink. fun val exists() : Bool val","title":"exists"},{"location":"files-FilePath/#returns_6","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#mkdir","text":"[Source] Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist. fun val mkdir( must_create: Bool val = false) : Bool val","title":"mkdir"},{"location":"files-FilePath/#parameters_5","text":"must_create: Bool val = false","title":"Parameters"},{"location":"files-FilePath/#returns_7","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#remove","text":"[Source] Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. fun val remove() : Bool val","title":"remove"},{"location":"files-FilePath/#returns_8","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#rename","text":"[Source] Rename a file or directory. fun box rename( new_path: FilePath val) : Bool val","title":"rename"},{"location":"files-FilePath/#parameters_6","text":"new_path: FilePath val","title":"Parameters"},{"location":"files-FilePath/#returns_9","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#symlink","text":"[Source] Create a symlink to a file or directory. fun box symlink( link_name: FilePath val) : Bool val","title":"symlink"},{"location":"files-FilePath/#parameters_7","text":"link_name: FilePath val","title":"Parameters"},{"location":"files-FilePath/#returns_10","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#chmod","text":"[Source] Set the FileMode for a path. fun box chmod( mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-FilePath/#parameters_8","text":"mode: FileMode box","title":"Parameters"},{"location":"files-FilePath/#returns_11","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#chown","text":"[Source] Set the owner and group for a path. Does nothing on Windows. fun box chown( uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-FilePath/#parameters_9","text":"uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-FilePath/#returns_12","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#touch","text":"[Source] Set the last access and modification times of a path to now. fun box touch() : Bool val","title":"touch"},{"location":"files-FilePath/#returns_13","text":"Bool val","title":"Returns"},{"location":"files-FilePath/#set_time","text":"[Source] Set the last access and modification times of a path to the given values. fun box set_time( atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-FilePath/#parameters_10","text":"atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-FilePath/#returns_14","text":"Bool val","title":"Returns"},{"location":"files-FilePermissionDenied/","text":"FilePermissionDenied \u00b6 [Source] primitive val FilePermissionDenied Constructors \u00b6 create \u00b6 [Source] new val create() : FilePermissionDenied val^ Returns \u00b6 FilePermissionDenied val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FilePermissionDenied val) : Bool val Parameters \u00b6 that: FilePermissionDenied val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FilePermissionDenied val) : Bool val Parameters \u00b6 that: FilePermissionDenied val Returns \u00b6 Bool val","title":"primitive FilePermissionDenied"},{"location":"files-FilePermissionDenied/#filepermissiondenied","text":"[Source] primitive val FilePermissionDenied","title":"FilePermissionDenied"},{"location":"files-FilePermissionDenied/#constructors","text":"","title":"Constructors"},{"location":"files-FilePermissionDenied/#create","text":"[Source] new val create() : FilePermissionDenied val^","title":"create"},{"location":"files-FilePermissionDenied/#returns","text":"FilePermissionDenied val^","title":"Returns"},{"location":"files-FilePermissionDenied/#public-functions","text":"","title":"Public Functions"},{"location":"files-FilePermissionDenied/#eq","text":"[Source] fun box eq( that: FilePermissionDenied val) : Bool val","title":"eq"},{"location":"files-FilePermissionDenied/#parameters","text":"that: FilePermissionDenied val","title":"Parameters"},{"location":"files-FilePermissionDenied/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-FilePermissionDenied/#ne","text":"[Source] fun box ne( that: FilePermissionDenied val) : Bool val","title":"ne"},{"location":"files-FilePermissionDenied/#parameters_1","text":"that: FilePermissionDenied val","title":"Parameters"},{"location":"files-FilePermissionDenied/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRead/","text":"FileRead \u00b6 [Source] primitive val FileRead Constructors \u00b6 create \u00b6 [Source] new val create() : FileRead val^ Returns \u00b6 FileRead val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileRead val) : Bool val Parameters \u00b6 that: FileRead val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileRead val) : Bool val Parameters \u00b6 that: FileRead val Returns \u00b6 Bool val","title":"primitive FileRead"},{"location":"files-FileRead/#fileread","text":"[Source] primitive val FileRead","title":"FileRead"},{"location":"files-FileRead/#constructors","text":"","title":"Constructors"},{"location":"files-FileRead/#create","text":"[Source] new val create() : FileRead val^","title":"create"},{"location":"files-FileRead/#returns","text":"FileRead val^","title":"Returns"},{"location":"files-FileRead/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileRead/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileRead/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileRead/#eq","text":"[Source] fun box eq( that: FileRead val) : Bool val","title":"eq"},{"location":"files-FileRead/#parameters","text":"that: FileRead val","title":"Parameters"},{"location":"files-FileRead/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRead/#ne","text":"[Source] fun box ne( that: FileRead val) : Bool val","title":"ne"},{"location":"files-FileRead/#parameters_1","text":"that: FileRead val","title":"Parameters"},{"location":"files-FileRead/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileRemove/","text":"FileRemove \u00b6 [Source] primitive val FileRemove Constructors \u00b6 create \u00b6 [Source] new val create() : FileRemove val^ Returns \u00b6 FileRemove val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileRemove val) : Bool val Parameters \u00b6 that: FileRemove val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileRemove val) : Bool val Parameters \u00b6 that: FileRemove val Returns \u00b6 Bool val","title":"primitive FileRemove"},{"location":"files-FileRemove/#fileremove","text":"[Source] primitive val FileRemove","title":"FileRemove"},{"location":"files-FileRemove/#constructors","text":"","title":"Constructors"},{"location":"files-FileRemove/#create","text":"[Source] new val create() : FileRemove val^","title":"create"},{"location":"files-FileRemove/#returns","text":"FileRemove val^","title":"Returns"},{"location":"files-FileRemove/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileRemove/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileRemove/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileRemove/#eq","text":"[Source] fun box eq( that: FileRemove val) : Bool val","title":"eq"},{"location":"files-FileRemove/#parameters","text":"that: FileRemove val","title":"Parameters"},{"location":"files-FileRemove/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRemove/#ne","text":"[Source] fun box ne( that: FileRemove val) : Bool val","title":"ne"},{"location":"files-FileRemove/#parameters_1","text":"that: FileRemove val","title":"Parameters"},{"location":"files-FileRemove/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileRename/","text":"FileRename \u00b6 [Source] primitive val FileRename Constructors \u00b6 create \u00b6 [Source] new val create() : FileRename val^ Returns \u00b6 FileRename val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileRename val) : Bool val Parameters \u00b6 that: FileRename val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileRename val) : Bool val Parameters \u00b6 that: FileRename val Returns \u00b6 Bool val","title":"primitive FileRename"},{"location":"files-FileRename/#filerename","text":"[Source] primitive val FileRename","title":"FileRename"},{"location":"files-FileRename/#constructors","text":"","title":"Constructors"},{"location":"files-FileRename/#create","text":"[Source] new val create() : FileRename val^","title":"create"},{"location":"files-FileRename/#returns","text":"FileRename val^","title":"Returns"},{"location":"files-FileRename/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileRename/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileRename/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileRename/#eq","text":"[Source] fun box eq( that: FileRename val) : Bool val","title":"eq"},{"location":"files-FileRename/#parameters","text":"that: FileRename val","title":"Parameters"},{"location":"files-FileRename/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileRename/#ne","text":"[Source] fun box ne( that: FileRename val) : Bool val","title":"ne"},{"location":"files-FileRename/#parameters_1","text":"that: FileRename val","title":"Parameters"},{"location":"files-FileRename/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileSeek/","text":"FileSeek \u00b6 [Source] primitive val FileSeek Constructors \u00b6 create \u00b6 [Source] new val create() : FileSeek val^ Returns \u00b6 FileSeek val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileSeek val) : Bool val Parameters \u00b6 that: FileSeek val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileSeek val) : Bool val Parameters \u00b6 that: FileSeek val Returns \u00b6 Bool val","title":"primitive FileSeek"},{"location":"files-FileSeek/#fileseek","text":"[Source] primitive val FileSeek","title":"FileSeek"},{"location":"files-FileSeek/#constructors","text":"","title":"Constructors"},{"location":"files-FileSeek/#create","text":"[Source] new val create() : FileSeek val^","title":"create"},{"location":"files-FileSeek/#returns","text":"FileSeek val^","title":"Returns"},{"location":"files-FileSeek/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileSeek/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileSeek/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileSeek/#eq","text":"[Source] fun box eq( that: FileSeek val) : Bool val","title":"eq"},{"location":"files-FileSeek/#parameters","text":"that: FileSeek val","title":"Parameters"},{"location":"files-FileSeek/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileSeek/#ne","text":"[Source] fun box ne( that: FileSeek val) : Bool val","title":"ne"},{"location":"files-FileSeek/#parameters_1","text":"that: FileSeek val","title":"Parameters"},{"location":"files-FileSeek/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileStat/","text":"FileStat \u00b6 [Source] primitive val FileStat Constructors \u00b6 create \u00b6 [Source] new val create() : FileStat val^ Returns \u00b6 FileStat val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileStat val) : Bool val Parameters \u00b6 that: FileStat val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileStat val) : Bool val Parameters \u00b6 that: FileStat val Returns \u00b6 Bool val","title":"primitive FileStat"},{"location":"files-FileStat/#filestat","text":"[Source] primitive val FileStat","title":"FileStat"},{"location":"files-FileStat/#constructors","text":"","title":"Constructors"},{"location":"files-FileStat/#create","text":"[Source] new val create() : FileStat val^","title":"create"},{"location":"files-FileStat/#returns","text":"FileStat val^","title":"Returns"},{"location":"files-FileStat/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileStat/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileStat/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileStat/#eq","text":"[Source] fun box eq( that: FileStat val) : Bool val","title":"eq"},{"location":"files-FileStat/#parameters","text":"that: FileStat val","title":"Parameters"},{"location":"files-FileStat/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileStat/#ne","text":"[Source] fun box ne( that: FileStat val) : Bool val","title":"ne"},{"location":"files-FileStat/#parameters_1","text":"that: FileStat val","title":"Parameters"},{"location":"files-FileStat/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileStream/","text":"FileStream \u00b6 [Source] Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final. actor tag FileStream is OutStream tag Implements \u00b6 OutStream tag Constructors \u00b6 create \u00b6 [Source] new tag create( file: File iso) : FileStream tag^ Parameters \u00b6 file: File iso Returns \u00b6 FileStream tag^ Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val flush \u00b6 [Source] Flush pending data to write. be flush()","title":"actor FileStream"},{"location":"files-FileStream/#filestream","text":"[Source] Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final. actor tag FileStream is OutStream tag","title":"FileStream"},{"location":"files-FileStream/#implements","text":"OutStream tag","title":"Implements"},{"location":"files-FileStream/#constructors","text":"","title":"Constructors"},{"location":"files-FileStream/#create","text":"[Source] new tag create( file: File iso) : FileStream tag^","title":"create"},{"location":"files-FileStream/#parameters","text":"file: File iso","title":"Parameters"},{"location":"files-FileStream/#returns","text":"FileStream tag^","title":"Returns"},{"location":"files-FileStream/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"files-FileStream/#print","text":"[Source] Print some bytes and insert a newline afterwards. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"files-FileStream/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"files-FileStream/#write","text":"[Source] Print some bytes without inserting a newline afterwards. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"files-FileStream/#parameters_2","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"files-FileStream/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"files-FileStream/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"files-FileStream/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"files-FileStream/#parameters_4","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"files-FileStream/#flush","text":"[Source] Flush pending data to write. be flush()","title":"flush"},{"location":"files-FileSync/","text":"FileSync \u00b6 [Source] primitive val FileSync Constructors \u00b6 create \u00b6 [Source] new val create() : FileSync val^ Returns \u00b6 FileSync val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileSync val) : Bool val Parameters \u00b6 that: FileSync val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileSync val) : Bool val Parameters \u00b6 that: FileSync val Returns \u00b6 Bool val","title":"primitive FileSync"},{"location":"files-FileSync/#filesync","text":"[Source] primitive val FileSync","title":"FileSync"},{"location":"files-FileSync/#constructors","text":"","title":"Constructors"},{"location":"files-FileSync/#create","text":"[Source] new val create() : FileSync val^","title":"create"},{"location":"files-FileSync/#returns","text":"FileSync val^","title":"Returns"},{"location":"files-FileSync/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileSync/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileSync/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileSync/#eq","text":"[Source] fun box eq( that: FileSync val) : Bool val","title":"eq"},{"location":"files-FileSync/#parameters","text":"that: FileSync val","title":"Parameters"},{"location":"files-FileSync/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileSync/#ne","text":"[Source] fun box ne( that: FileSync val) : Bool val","title":"ne"},{"location":"files-FileSync/#parameters_1","text":"that: FileSync val","title":"Parameters"},{"location":"files-FileSync/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileTime/","text":"FileTime \u00b6 [Source] primitive val FileTime Constructors \u00b6 create \u00b6 [Source] new val create() : FileTime val^ Returns \u00b6 FileTime val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileTime val) : Bool val Parameters \u00b6 that: FileTime val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileTime val) : Bool val Parameters \u00b6 that: FileTime val Returns \u00b6 Bool val","title":"primitive FileTime"},{"location":"files-FileTime/#filetime","text":"[Source] primitive val FileTime","title":"FileTime"},{"location":"files-FileTime/#constructors","text":"","title":"Constructors"},{"location":"files-FileTime/#create","text":"[Source] new val create() : FileTime val^","title":"create"},{"location":"files-FileTime/#returns","text":"FileTime val^","title":"Returns"},{"location":"files-FileTime/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileTime/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileTime/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileTime/#eq","text":"[Source] fun box eq( that: FileTime val) : Bool val","title":"eq"},{"location":"files-FileTime/#parameters","text":"that: FileTime val","title":"Parameters"},{"location":"files-FileTime/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileTime/#ne","text":"[Source] fun box ne( that: FileTime val) : Bool val","title":"ne"},{"location":"files-FileTime/#parameters_1","text":"that: FileTime val","title":"Parameters"},{"location":"files-FileTime/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileTruncate/","text":"FileTruncate \u00b6 [Source] primitive val FileTruncate Constructors \u00b6 create \u00b6 [Source] new val create() : FileTruncate val^ Returns \u00b6 FileTruncate val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileTruncate val) : Bool val Parameters \u00b6 that: FileTruncate val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileTruncate val) : Bool val Parameters \u00b6 that: FileTruncate val Returns \u00b6 Bool val","title":"primitive FileTruncate"},{"location":"files-FileTruncate/#filetruncate","text":"[Source] primitive val FileTruncate","title":"FileTruncate"},{"location":"files-FileTruncate/#constructors","text":"","title":"Constructors"},{"location":"files-FileTruncate/#create","text":"[Source] new val create() : FileTruncate val^","title":"create"},{"location":"files-FileTruncate/#returns","text":"FileTruncate val^","title":"Returns"},{"location":"files-FileTruncate/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileTruncate/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileTruncate/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileTruncate/#eq","text":"[Source] fun box eq( that: FileTruncate val) : Bool val","title":"eq"},{"location":"files-FileTruncate/#parameters","text":"that: FileTruncate val","title":"Parameters"},{"location":"files-FileTruncate/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileTruncate/#ne","text":"[Source] fun box ne( that: FileTruncate val) : Bool val","title":"ne"},{"location":"files-FileTruncate/#parameters_1","text":"that: FileTruncate val","title":"Parameters"},{"location":"files-FileTruncate/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-FileWrite/","text":"FileWrite \u00b6 [Source] primitive val FileWrite Constructors \u00b6 create \u00b6 [Source] new val create() : FileWrite val^ Returns \u00b6 FileWrite val^ Public Functions \u00b6 value \u00b6 [Source] fun box value() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: FileWrite val) : Bool val Parameters \u00b6 that: FileWrite val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FileWrite val) : Bool val Parameters \u00b6 that: FileWrite val Returns \u00b6 Bool val","title":"primitive FileWrite"},{"location":"files-FileWrite/#filewrite","text":"[Source] primitive val FileWrite","title":"FileWrite"},{"location":"files-FileWrite/#constructors","text":"","title":"Constructors"},{"location":"files-FileWrite/#create","text":"[Source] new val create() : FileWrite val^","title":"create"},{"location":"files-FileWrite/#returns","text":"FileWrite val^","title":"Returns"},{"location":"files-FileWrite/#public-functions","text":"","title":"Public Functions"},{"location":"files-FileWrite/#value","text":"[Source] fun box value() : U32 val","title":"value"},{"location":"files-FileWrite/#returns_1","text":"U32 val","title":"Returns"},{"location":"files-FileWrite/#eq","text":"[Source] fun box eq( that: FileWrite val) : Bool val","title":"eq"},{"location":"files-FileWrite/#parameters","text":"that: FileWrite val","title":"Parameters"},{"location":"files-FileWrite/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-FileWrite/#ne","text":"[Source] fun box ne( that: FileWrite val) : Bool val","title":"ne"},{"location":"files-FileWrite/#parameters_1","text":"that: FileWrite val","title":"Parameters"},{"location":"files-FileWrite/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-OpenFile/","text":"OpenFile \u00b6 [Source] Open a File for read only. primitive val OpenFile Constructors \u00b6 create \u00b6 [Source] new val create() : OpenFile val^ Returns \u00b6 OpenFile val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) Parameters \u00b6 from: FilePath val Returns \u00b6 ( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val) eq \u00b6 [Source] fun box eq( that: OpenFile val) : Bool val Parameters \u00b6 that: OpenFile val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: OpenFile val) : Bool val Parameters \u00b6 that: OpenFile val Returns \u00b6 Bool val","title":"primitive OpenFile"},{"location":"files-OpenFile/#openfile","text":"[Source] Open a File for read only. primitive val OpenFile","title":"OpenFile"},{"location":"files-OpenFile/#constructors","text":"","title":"Constructors"},{"location":"files-OpenFile/#create","text":"[Source] new val create() : OpenFile val^","title":"create"},{"location":"files-OpenFile/#returns","text":"OpenFile val^","title":"Returns"},{"location":"files-OpenFile/#public-functions","text":"","title":"Public Functions"},{"location":"files-OpenFile/#apply","text":"[Source] fun box apply( from: FilePath val) : (File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"apply"},{"location":"files-OpenFile/#parameters","text":"from: FilePath val","title":"Parameters"},{"location":"files-OpenFile/#returns_1","text":"( File ref | FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)","title":"Returns"},{"location":"files-OpenFile/#eq","text":"[Source] fun box eq( that: OpenFile val) : Bool val","title":"eq"},{"location":"files-OpenFile/#parameters_1","text":"that: OpenFile val","title":"Parameters"},{"location":"files-OpenFile/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-OpenFile/#ne","text":"[Source] fun box ne( that: OpenFile val) : Bool val","title":"ne"},{"location":"files-OpenFile/#parameters_2","text":"that: OpenFile val","title":"Parameters"},{"location":"files-OpenFile/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-Path/","text":"Path \u00b6 [Source] Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths. primitive val Path Constructors \u00b6 create \u00b6 [Source] new val create() : Path val^ Returns \u00b6 Path val^ Public Functions \u00b6 is_sep \u00b6 [Source] Determine if a byte is a path separator. fun box is_sep( c: U8 val) : Bool val Parameters \u00b6 c: U8 val Returns \u00b6 Bool val sep \u00b6 [Source] Return the path separator as a string. fun tag sep() : String val Returns \u00b6 String val is_abs \u00b6 [Source] Return true if the path is an absolute path. fun box is_abs( path: String val) : Bool val Parameters \u00b6 path: String val Returns \u00b6 Bool val join \u00b6 [Source] Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned. fun box join( path: String val, next_path: String val) : String val Parameters \u00b6 path: String val next_path: String val Returns \u00b6 String val clean \u00b6 [Source] Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead. fun box clean( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val normcase \u00b6 [Source] Normalizes the case of path for the runtime platform. fun box normcase( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val cwd \u00b6 [Source] Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe. fun box cwd() : String val Returns \u00b6 String val abs \u00b6 [Source] Returns a cleaned, absolute path. fun box abs( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val rel \u00b6 [Source] Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible. fun box rel( to: String val, target: String val) : String val ? Parameters \u00b6 to: String val target: String val Returns \u00b6 String val ? split \u00b6 [Source] Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base(). fun box split( path: String val, separator: String val = call) : (String val , String val) Parameters \u00b6 path: String val separator: String val = call Returns \u00b6 ( String val , String val) base \u00b6 [Source] Return the path after the last separator, or the whole path if there is no separator. If with_ext is false , the extension as defined by the ext() method will be omitted from the result. fun box base( path: String val, with_ext: Bool val = true) : String val Parameters \u00b6 path: String val with_ext: Bool val = true Returns \u00b6 String val dir \u00b6 [Source] Return a cleaned path before the last separator, or the whole path if there is no separator. fun box dir( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val ext \u00b6 [Source] Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension. fun box ext( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val volume \u00b6 [Source] On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string. fun box volume( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val from_slash \u00b6 [Source] Changes each / in the path to the OS specific separator. fun box from_slash( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val to_slash \u00b6 [Source] Changes each OS specific separator in the path to /. fun box to_slash( path: String val) : String val Parameters \u00b6 path: String val Returns \u00b6 String val canonical \u00b6 [Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun box canonical( path: String val) : String val ? Parameters \u00b6 path: String val Returns \u00b6 String val ? is_list_sep \u00b6 [Source] Determine if a byte is a path list separator. fun box is_list_sep( c: U8 val) : Bool val Parameters \u00b6 c: U8 val Returns \u00b6 Bool val list_sep \u00b6 [Source] Return the path list separator as a string. fun box list_sep() : String val Returns \u00b6 String val split_list \u00b6 [Source] Separate a list of paths into an array of cleaned paths. fun box split_list( path: String val) : Array[String val] iso^ Parameters \u00b6 path: String val Returns \u00b6 Array [ String val] iso^ random \u00b6 [Source] Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist. fun box random( len: USize val = 6) : String val Parameters \u00b6 len: USize val = 6 Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: Path val) : Bool val Parameters \u00b6 that: Path val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Path val) : Bool val Parameters \u00b6 that: Path val Returns \u00b6 Bool val Private Functions \u00b6 _drive_letter \u00b6 [Source] Look for a drive letter followed by a ':', returning true if we find it. fun box _drive_letter( path: String val, offset: ISize val = 0) : Bool val Parameters \u00b6 path: String val offset: ISize val = 0 Returns \u00b6 Bool val _network_share \u00b6 [Source] Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String. fun box _network_share( path: String val, offset: ISize val = 0) : String val Parameters \u00b6 path: String val offset: ISize val = 0 Returns \u00b6 String val","title":"primitive Path"},{"location":"files-Path/#path","text":"[Source] Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths. primitive val Path","title":"Path"},{"location":"files-Path/#constructors","text":"","title":"Constructors"},{"location":"files-Path/#create","text":"[Source] new val create() : Path val^","title":"create"},{"location":"files-Path/#returns","text":"Path val^","title":"Returns"},{"location":"files-Path/#public-functions","text":"","title":"Public Functions"},{"location":"files-Path/#is_sep","text":"[Source] Determine if a byte is a path separator. fun box is_sep( c: U8 val) : Bool val","title":"is_sep"},{"location":"files-Path/#parameters","text":"c: U8 val","title":"Parameters"},{"location":"files-Path/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-Path/#sep","text":"[Source] Return the path separator as a string. fun tag sep() : String val","title":"sep"},{"location":"files-Path/#returns_2","text":"String val","title":"Returns"},{"location":"files-Path/#is_abs","text":"[Source] Return true if the path is an absolute path. fun box is_abs( path: String val) : Bool val","title":"is_abs"},{"location":"files-Path/#parameters_1","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-Path/#join","text":"[Source] Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned. fun box join( path: String val, next_path: String val) : String val","title":"join"},{"location":"files-Path/#parameters_2","text":"path: String val next_path: String val","title":"Parameters"},{"location":"files-Path/#returns_4","text":"String val","title":"Returns"},{"location":"files-Path/#clean","text":"[Source] Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead. fun box clean( path: String val) : String val","title":"clean"},{"location":"files-Path/#parameters_3","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_5","text":"String val","title":"Returns"},{"location":"files-Path/#normcase","text":"[Source] Normalizes the case of path for the runtime platform. fun box normcase( path: String val) : String val","title":"normcase"},{"location":"files-Path/#parameters_4","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_6","text":"String val","title":"Returns"},{"location":"files-Path/#cwd","text":"[Source] Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe. fun box cwd() : String val","title":"cwd"},{"location":"files-Path/#returns_7","text":"String val","title":"Returns"},{"location":"files-Path/#abs","text":"[Source] Returns a cleaned, absolute path. fun box abs( path: String val) : String val","title":"abs"},{"location":"files-Path/#parameters_5","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_8","text":"String val","title":"Returns"},{"location":"files-Path/#rel","text":"[Source] Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible. fun box rel( to: String val, target: String val) : String val ?","title":"rel"},{"location":"files-Path/#parameters_6","text":"to: String val target: String val","title":"Parameters"},{"location":"files-Path/#returns_9","text":"String val ?","title":"Returns"},{"location":"files-Path/#split","text":"[Source] Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base(). fun box split( path: String val, separator: String val = call) : (String val , String val)","title":"split"},{"location":"files-Path/#parameters_7","text":"path: String val separator: String val = call","title":"Parameters"},{"location":"files-Path/#returns_10","text":"( String val , String val)","title":"Returns"},{"location":"files-Path/#base","text":"[Source] Return the path after the last separator, or the whole path if there is no separator. If with_ext is false , the extension as defined by the ext() method will be omitted from the result. fun box base( path: String val, with_ext: Bool val = true) : String val","title":"base"},{"location":"files-Path/#parameters_8","text":"path: String val with_ext: Bool val = true","title":"Parameters"},{"location":"files-Path/#returns_11","text":"String val","title":"Returns"},{"location":"files-Path/#dir","text":"[Source] Return a cleaned path before the last separator, or the whole path if there is no separator. fun box dir( path: String val) : String val","title":"dir"},{"location":"files-Path/#parameters_9","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_12","text":"String val","title":"Returns"},{"location":"files-Path/#ext","text":"[Source] Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension. fun box ext( path: String val) : String val","title":"ext"},{"location":"files-Path/#parameters_10","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_13","text":"String val","title":"Returns"},{"location":"files-Path/#volume","text":"[Source] On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string. fun box volume( path: String val) : String val","title":"volume"},{"location":"files-Path/#parameters_11","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_14","text":"String val","title":"Returns"},{"location":"files-Path/#from_slash","text":"[Source] Changes each / in the path to the OS specific separator. fun box from_slash( path: String val) : String val","title":"from_slash"},{"location":"files-Path/#parameters_12","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_15","text":"String val","title":"Returns"},{"location":"files-Path/#to_slash","text":"[Source] Changes each OS specific separator in the path to /. fun box to_slash( path: String val) : String val","title":"to_slash"},{"location":"files-Path/#parameters_13","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_16","text":"String val","title":"Returns"},{"location":"files-Path/#canonical","text":"[Source] Return the equivalent canonical absolute path. Raise an error if there isn't one. fun box canonical( path: String val) : String val ?","title":"canonical"},{"location":"files-Path/#parameters_14","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_17","text":"String val ?","title":"Returns"},{"location":"files-Path/#is_list_sep","text":"[Source] Determine if a byte is a path list separator. fun box is_list_sep( c: U8 val) : Bool val","title":"is_list_sep"},{"location":"files-Path/#parameters_15","text":"c: U8 val","title":"Parameters"},{"location":"files-Path/#returns_18","text":"Bool val","title":"Returns"},{"location":"files-Path/#list_sep","text":"[Source] Return the path list separator as a string. fun box list_sep() : String val","title":"list_sep"},{"location":"files-Path/#returns_19","text":"String val","title":"Returns"},{"location":"files-Path/#split_list","text":"[Source] Separate a list of paths into an array of cleaned paths. fun box split_list( path: String val) : Array[String val] iso^","title":"split_list"},{"location":"files-Path/#parameters_16","text":"path: String val","title":"Parameters"},{"location":"files-Path/#returns_20","text":"Array [ String val] iso^","title":"Returns"},{"location":"files-Path/#random","text":"[Source] Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist. fun box random( len: USize val = 6) : String val","title":"random"},{"location":"files-Path/#parameters_17","text":"len: USize val = 6","title":"Parameters"},{"location":"files-Path/#returns_21","text":"String val","title":"Returns"},{"location":"files-Path/#eq","text":"[Source] fun box eq( that: Path val) : Bool val","title":"eq"},{"location":"files-Path/#parameters_18","text":"that: Path val","title":"Parameters"},{"location":"files-Path/#returns_22","text":"Bool val","title":"Returns"},{"location":"files-Path/#ne","text":"[Source] fun box ne( that: Path val) : Bool val","title":"ne"},{"location":"files-Path/#parameters_19","text":"that: Path val","title":"Parameters"},{"location":"files-Path/#returns_23","text":"Bool val","title":"Returns"},{"location":"files-Path/#private-functions","text":"","title":"Private Functions"},{"location":"files-Path/#_drive_letter","text":"[Source] Look for a drive letter followed by a ':', returning true if we find it. fun box _drive_letter( path: String val, offset: ISize val = 0) : Bool val","title":"_drive_letter"},{"location":"files-Path/#parameters_20","text":"path: String val offset: ISize val = 0","title":"Parameters"},{"location":"files-Path/#returns_24","text":"Bool val","title":"Returns"},{"location":"files-Path/#_network_share","text":"[Source] Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String. fun box _network_share( path: String val, offset: ISize val = 0) : String val","title":"_network_share"},{"location":"files-Path/#parameters_21","text":"path: String val offset: ISize val = 0","title":"Parameters"},{"location":"files-Path/#returns_25","text":"String val","title":"Returns"},{"location":"files-WalkHandler/","text":"WalkHandler \u00b6 [Source] A handler for FilePath.walk . interface ref WalkHandler Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( dir_path: FilePath val, dir_entries: Array[String val] ref) : None val Parameters \u00b6 dir_path: FilePath val dir_entries: Array [ String val] ref Returns \u00b6 None val","title":"interface WalkHandler"},{"location":"files-WalkHandler/#walkhandler","text":"[Source] A handler for FilePath.walk . interface ref WalkHandler","title":"WalkHandler"},{"location":"files-WalkHandler/#public-functions","text":"","title":"Public Functions"},{"location":"files-WalkHandler/#apply","text":"[Source] fun ref apply( dir_path: FilePath val, dir_entries: Array[String val] ref) : None val","title":"apply"},{"location":"files-WalkHandler/#parameters","text":"dir_path: FilePath val dir_entries: Array [ String val] ref","title":"Parameters"},{"location":"files-WalkHandler/#returns","text":"None val","title":"Returns"},{"location":"files-_DirectoryEntry/","text":"_DirectoryEntry \u00b6 [Source] primitive val _DirectoryEntry Constructors \u00b6 create \u00b6 [Source] new val create() : _DirectoryEntry val^ Returns \u00b6 _DirectoryEntry val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _DirectoryEntry val) : Bool val Parameters \u00b6 that: _DirectoryEntry val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _DirectoryEntry val) : Bool val Parameters \u00b6 that: _DirectoryEntry val Returns \u00b6 Bool val","title":"primitive _DirectoryEntry"},{"location":"files-_DirectoryEntry/#_directoryentry","text":"[Source] primitive val _DirectoryEntry","title":"_DirectoryEntry"},{"location":"files-_DirectoryEntry/#constructors","text":"","title":"Constructors"},{"location":"files-_DirectoryEntry/#create","text":"[Source] new val create() : _DirectoryEntry val^","title":"create"},{"location":"files-_DirectoryEntry/#returns","text":"_DirectoryEntry val^","title":"Returns"},{"location":"files-_DirectoryEntry/#public-functions","text":"","title":"Public Functions"},{"location":"files-_DirectoryEntry/#eq","text":"[Source] fun box eq( that: _DirectoryEntry val) : Bool val","title":"eq"},{"location":"files-_DirectoryEntry/#parameters","text":"that: _DirectoryEntry val","title":"Parameters"},{"location":"files-_DirectoryEntry/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_DirectoryEntry/#ne","text":"[Source] fun box ne( that: _DirectoryEntry val) : Bool val","title":"ne"},{"location":"files-_DirectoryEntry/#parameters_1","text":"that: _DirectoryEntry val","title":"Parameters"},{"location":"files-_DirectoryEntry/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_DirectoryHandle/","text":"_DirectoryHandle \u00b6 [Source] primitive val _DirectoryHandle Constructors \u00b6 create \u00b6 [Source] new val create() : _DirectoryHandle val^ Returns \u00b6 _DirectoryHandle val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _DirectoryHandle val) : Bool val Parameters \u00b6 that: _DirectoryHandle val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _DirectoryHandle val) : Bool val Parameters \u00b6 that: _DirectoryHandle val Returns \u00b6 Bool val","title":"primitive _DirectoryHandle"},{"location":"files-_DirectoryHandle/#_directoryhandle","text":"[Source] primitive val _DirectoryHandle","title":"_DirectoryHandle"},{"location":"files-_DirectoryHandle/#constructors","text":"","title":"Constructors"},{"location":"files-_DirectoryHandle/#create","text":"[Source] new val create() : _DirectoryHandle val^","title":"create"},{"location":"files-_DirectoryHandle/#returns","text":"_DirectoryHandle val^","title":"Returns"},{"location":"files-_DirectoryHandle/#public-functions","text":"","title":"Public Functions"},{"location":"files-_DirectoryHandle/#eq","text":"[Source] fun box eq( that: _DirectoryHandle val) : Bool val","title":"eq"},{"location":"files-_DirectoryHandle/#parameters","text":"that: _DirectoryHandle val","title":"Parameters"},{"location":"files-_DirectoryHandle/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_DirectoryHandle/#ne","text":"[Source] fun box ne( that: _DirectoryHandle val) : Bool val","title":"ne"},{"location":"files-_DirectoryHandle/#parameters_1","text":"that: _DirectoryHandle val","title":"Parameters"},{"location":"files-_DirectoryHandle/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EACCES/","text":"_EACCES \u00b6 [Source] primitive val _EACCES Constructors \u00b6 create \u00b6 [Source] new val create() : _EACCES val^ Returns \u00b6 _EACCES val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EACCES val) : Bool val Parameters \u00b6 that: _EACCES val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EACCES val) : Bool val Parameters \u00b6 that: _EACCES val Returns \u00b6 Bool val","title":"primitive _EACCES"},{"location":"files-_EACCES/#_eacces","text":"[Source] primitive val _EACCES","title":"_EACCES"},{"location":"files-_EACCES/#constructors","text":"","title":"Constructors"},{"location":"files-_EACCES/#create","text":"[Source] new val create() : _EACCES val^","title":"create"},{"location":"files-_EACCES/#returns","text":"_EACCES val^","title":"Returns"},{"location":"files-_EACCES/#public-functions","text":"","title":"Public Functions"},{"location":"files-_EACCES/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"files-_EACCES/#returns_1","text":"I32 val","title":"Returns"},{"location":"files-_EACCES/#eq","text":"[Source] fun box eq( that: _EACCES val) : Bool val","title":"eq"},{"location":"files-_EACCES/#parameters","text":"that: _EACCES val","title":"Parameters"},{"location":"files-_EACCES/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EACCES/#ne","text":"[Source] fun box ne( that: _EACCES val) : Bool val","title":"ne"},{"location":"files-_EACCES/#parameters_1","text":"that: _EACCES val","title":"Parameters"},{"location":"files-_EACCES/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_EBADF/","text":"_EBADF \u00b6 [Source] primitive val _EBADF Constructors \u00b6 create \u00b6 [Source] new val create() : _EBADF val^ Returns \u00b6 _EBADF val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EBADF val) : Bool val Parameters \u00b6 that: _EBADF val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EBADF val) : Bool val Parameters \u00b6 that: _EBADF val Returns \u00b6 Bool val","title":"primitive _EBADF"},{"location":"files-_EBADF/#_ebadf","text":"[Source] primitive val _EBADF","title":"_EBADF"},{"location":"files-_EBADF/#constructors","text":"","title":"Constructors"},{"location":"files-_EBADF/#create","text":"[Source] new val create() : _EBADF val^","title":"create"},{"location":"files-_EBADF/#returns","text":"_EBADF val^","title":"Returns"},{"location":"files-_EBADF/#public-functions","text":"","title":"Public Functions"},{"location":"files-_EBADF/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"files-_EBADF/#returns_1","text":"I32 val","title":"Returns"},{"location":"files-_EBADF/#eq","text":"[Source] fun box eq( that: _EBADF val) : Bool val","title":"eq"},{"location":"files-_EBADF/#parameters","text":"that: _EBADF val","title":"Parameters"},{"location":"files-_EBADF/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EBADF/#ne","text":"[Source] fun box ne( that: _EBADF val) : Bool val","title":"ne"},{"location":"files-_EBADF/#parameters_1","text":"that: _EBADF val","title":"Parameters"},{"location":"files-_EBADF/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_EEXIST/","text":"_EEXIST \u00b6 [Source] primitive val _EEXIST Constructors \u00b6 create \u00b6 [Source] new val create() : _EEXIST val^ Returns \u00b6 _EEXIST val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EEXIST val) : Bool val Parameters \u00b6 that: _EEXIST val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EEXIST val) : Bool val Parameters \u00b6 that: _EEXIST val Returns \u00b6 Bool val","title":"primitive _EEXIST"},{"location":"files-_EEXIST/#_eexist","text":"[Source] primitive val _EEXIST","title":"_EEXIST"},{"location":"files-_EEXIST/#constructors","text":"","title":"Constructors"},{"location":"files-_EEXIST/#create","text":"[Source] new val create() : _EEXIST val^","title":"create"},{"location":"files-_EEXIST/#returns","text":"_EEXIST val^","title":"Returns"},{"location":"files-_EEXIST/#public-functions","text":"","title":"Public Functions"},{"location":"files-_EEXIST/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"files-_EEXIST/#returns_1","text":"I32 val","title":"Returns"},{"location":"files-_EEXIST/#eq","text":"[Source] fun box eq( that: _EEXIST val) : Bool val","title":"eq"},{"location":"files-_EEXIST/#parameters","text":"that: _EEXIST val","title":"Parameters"},{"location":"files-_EEXIST/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_EEXIST/#ne","text":"[Source] fun box ne( that: _EEXIST val) : Bool val","title":"ne"},{"location":"files-_EEXIST/#parameters_1","text":"that: _EEXIST val","title":"Parameters"},{"location":"files-_EEXIST/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/","text":"_FileDes \u00b6 [Source] Convenience operations on file descriptors. primitive val _FileDes Constructors \u00b6 create \u00b6 [Source] new val create() : _FileDes val^ Returns \u00b6 _FileDes val^ Public Functions \u00b6 chmod \u00b6 [Source] Set the FileMode for this fd. fun box chmod( fd: I32 val, path: FilePath val, mode: FileMode box) : Bool val Parameters \u00b6 fd: I32 val path: FilePath val mode: FileMode box Returns \u00b6 Bool val chown \u00b6 [Source] Set the owner and group for this file. Does nothing on Windows. fun box chown( fd: I32 val, path: FilePath val, uid: U32 val, gid: U32 val) : Bool val Parameters \u00b6 fd: I32 val path: FilePath val uid: U32 val gid: U32 val Returns \u00b6 Bool val touch \u00b6 [Source] Set the last access and modification times of the file to now. fun box touch( fd: I32 val, path: FilePath val) : Bool val Parameters \u00b6 fd: I32 val path: FilePath val Returns \u00b6 Bool val set_time \u00b6 [Source] Set the last access and modification times of the file to the given values. fun box set_time( fd: I32 val, path: FilePath val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val Parameters \u00b6 fd: I32 val path: FilePath val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val) Returns \u00b6 Bool val set_rights \u00b6 [Source] Set the Capsicum rights on the file descriptor. fun box set_rights( fd: I32 val, path: FilePath val, writeable: Bool val = true) : None val ? Parameters \u00b6 fd: I32 val path: FilePath val writeable: Bool val = true Returns \u00b6 None val ? eq \u00b6 [Source] fun box eq( that: _FileDes val) : Bool val Parameters \u00b6 that: _FileDes val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FileDes val) : Bool val Parameters \u00b6 that: _FileDes val Returns \u00b6 Bool val","title":"primitive _FileDes"},{"location":"files-_FileDes/#_filedes","text":"[Source] Convenience operations on file descriptors. primitive val _FileDes","title":"_FileDes"},{"location":"files-_FileDes/#constructors","text":"","title":"Constructors"},{"location":"files-_FileDes/#create","text":"[Source] new val create() : _FileDes val^","title":"create"},{"location":"files-_FileDes/#returns","text":"_FileDes val^","title":"Returns"},{"location":"files-_FileDes/#public-functions","text":"","title":"Public Functions"},{"location":"files-_FileDes/#chmod","text":"[Source] Set the FileMode for this fd. fun box chmod( fd: I32 val, path: FilePath val, mode: FileMode box) : Bool val","title":"chmod"},{"location":"files-_FileDes/#parameters","text":"fd: I32 val path: FilePath val mode: FileMode box","title":"Parameters"},{"location":"files-_FileDes/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#chown","text":"[Source] Set the owner and group for this file. Does nothing on Windows. fun box chown( fd: I32 val, path: FilePath val, uid: U32 val, gid: U32 val) : Bool val","title":"chown"},{"location":"files-_FileDes/#parameters_1","text":"fd: I32 val path: FilePath val uid: U32 val gid: U32 val","title":"Parameters"},{"location":"files-_FileDes/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#touch","text":"[Source] Set the last access and modification times of the file to now. fun box touch( fd: I32 val, path: FilePath val) : Bool val","title":"touch"},{"location":"files-_FileDes/#parameters_2","text":"fd: I32 val path: FilePath val","title":"Parameters"},{"location":"files-_FileDes/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#set_time","text":"[Source] Set the last access and modification times of the file to the given values. fun box set_time( fd: I32 val, path: FilePath val, atime: (I64 val , I64 val), mtime: (I64 val , I64 val)) : Bool val","title":"set_time"},{"location":"files-_FileDes/#parameters_3","text":"fd: I32 val path: FilePath val atime: ( I64 val , I64 val) mtime: ( I64 val , I64 val)","title":"Parameters"},{"location":"files-_FileDes/#returns_4","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#set_rights","text":"[Source] Set the Capsicum rights on the file descriptor. fun box set_rights( fd: I32 val, path: FilePath val, writeable: Bool val = true) : None val ?","title":"set_rights"},{"location":"files-_FileDes/#parameters_4","text":"fd: I32 val path: FilePath val writeable: Bool val = true","title":"Parameters"},{"location":"files-_FileDes/#returns_5","text":"None val ?","title":"Returns"},{"location":"files-_FileDes/#eq","text":"[Source] fun box eq( that: _FileDes val) : Bool val","title":"eq"},{"location":"files-_FileDes/#parameters_5","text":"that: _FileDes val","title":"Parameters"},{"location":"files-_FileDes/#returns_6","text":"Bool val","title":"Returns"},{"location":"files-_FileDes/#ne","text":"[Source] fun box ne( that: _FileDes val) : Bool val","title":"ne"},{"location":"files-_FileDes/#parameters_6","text":"that: _FileDes val","title":"Parameters"},{"location":"files-_FileDes/#returns_7","text":"Bool val","title":"Returns"},{"location":"files-_FileHelper/","text":"_FileHelper \u00b6 [Source] primitive val _FileHelper Constructors \u00b6 create \u00b6 [Source] new val create() : _FileHelper val^ Returns \u00b6 _FileHelper val^ Public Functions \u00b6 make_files \u00b6 [Source] fun box make_files( h: TestHelper val, files: Array[String val] ref) : FilePath val ? Parameters \u00b6 h: TestHelper val files: Array [ String val] ref Returns \u00b6 FilePath val ? eq \u00b6 [Source] fun box eq( that: _FileHelper val) : Bool val Parameters \u00b6 that: _FileHelper val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FileHelper val) : Bool val Parameters \u00b6 that: _FileHelper val Returns \u00b6 Bool val","title":"primitive _FileHelper"},{"location":"files-_FileHelper/#_filehelper","text":"[Source] primitive val _FileHelper","title":"_FileHelper"},{"location":"files-_FileHelper/#constructors","text":"","title":"Constructors"},{"location":"files-_FileHelper/#create","text":"[Source] new val create() : _FileHelper val^","title":"create"},{"location":"files-_FileHelper/#returns","text":"_FileHelper val^","title":"Returns"},{"location":"files-_FileHelper/#public-functions","text":"","title":"Public Functions"},{"location":"files-_FileHelper/#make_files","text":"[Source] fun box make_files( h: TestHelper val, files: Array[String val] ref) : FilePath val ?","title":"make_files"},{"location":"files-_FileHelper/#parameters","text":"h: TestHelper val files: Array [ String val] ref","title":"Parameters"},{"location":"files-_FileHelper/#returns_1","text":"FilePath val ?","title":"Returns"},{"location":"files-_FileHelper/#eq","text":"[Source] fun box eq( that: _FileHelper val) : Bool val","title":"eq"},{"location":"files-_FileHelper/#parameters_1","text":"that: _FileHelper val","title":"Parameters"},{"location":"files-_FileHelper/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_FileHelper/#ne","text":"[Source] fun box ne( that: _FileHelper val) : Bool val","title":"ne"},{"location":"files-_FileHelper/#parameters_2","text":"that: _FileHelper val","title":"Parameters"},{"location":"files-_FileHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"files-_PathDot/","text":"_PathDot \u00b6 [Source] primitive val _PathDot Constructors \u00b6 create \u00b6 [Source] new val create() : _PathDot val^ Returns \u00b6 _PathDot val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _PathDot val) : Bool val Parameters \u00b6 that: _PathDot val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _PathDot val) : Bool val Parameters \u00b6 that: _PathDot val Returns \u00b6 Bool val","title":"primitive _PathDot"},{"location":"files-_PathDot/#_pathdot","text":"[Source] primitive val _PathDot","title":"_PathDot"},{"location":"files-_PathDot/#constructors","text":"","title":"Constructors"},{"location":"files-_PathDot/#create","text":"[Source] new val create() : _PathDot val^","title":"create"},{"location":"files-_PathDot/#returns","text":"_PathDot val^","title":"Returns"},{"location":"files-_PathDot/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathDot/#eq","text":"[Source] fun box eq( that: _PathDot val) : Bool val","title":"eq"},{"location":"files-_PathDot/#parameters","text":"that: _PathDot val","title":"Parameters"},{"location":"files-_PathDot/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathDot/#ne","text":"[Source] fun box ne( that: _PathDot val) : Bool val","title":"ne"},{"location":"files-_PathDot/#parameters_1","text":"that: _PathDot val","title":"Parameters"},{"location":"files-_PathDot/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathDot2/","text":"_PathDot2 \u00b6 [Source] primitive val _PathDot2 Constructors \u00b6 create \u00b6 [Source] new val create() : _PathDot2 val^ Returns \u00b6 _PathDot2 val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _PathDot2 val) : Bool val Parameters \u00b6 that: _PathDot2 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _PathDot2 val) : Bool val Parameters \u00b6 that: _PathDot2 val Returns \u00b6 Bool val","title":"primitive _PathDot2"},{"location":"files-_PathDot2/#_pathdot2","text":"[Source] primitive val _PathDot2","title":"_PathDot2"},{"location":"files-_PathDot2/#constructors","text":"","title":"Constructors"},{"location":"files-_PathDot2/#create","text":"[Source] new val create() : _PathDot2 val^","title":"create"},{"location":"files-_PathDot2/#returns","text":"_PathDot2 val^","title":"Returns"},{"location":"files-_PathDot2/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathDot2/#eq","text":"[Source] fun box eq( that: _PathDot2 val) : Bool val","title":"eq"},{"location":"files-_PathDot2/#parameters","text":"that: _PathDot2 val","title":"Parameters"},{"location":"files-_PathDot2/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathDot2/#ne","text":"[Source] fun box ne( that: _PathDot2 val) : Bool val","title":"ne"},{"location":"files-_PathDot2/#parameters_1","text":"that: _PathDot2 val","title":"Parameters"},{"location":"files-_PathDot2/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathOther/","text":"_PathOther \u00b6 [Source] primitive val _PathOther Constructors \u00b6 create \u00b6 [Source] new val create() : _PathOther val^ Returns \u00b6 _PathOther val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _PathOther val) : Bool val Parameters \u00b6 that: _PathOther val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _PathOther val) : Bool val Parameters \u00b6 that: _PathOther val Returns \u00b6 Bool val","title":"primitive _PathOther"},{"location":"files-_PathOther/#_pathother","text":"[Source] primitive val _PathOther","title":"_PathOther"},{"location":"files-_PathOther/#constructors","text":"","title":"Constructors"},{"location":"files-_PathOther/#create","text":"[Source] new val create() : _PathOther val^","title":"create"},{"location":"files-_PathOther/#returns","text":"_PathOther val^","title":"Returns"},{"location":"files-_PathOther/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathOther/#eq","text":"[Source] fun box eq( that: _PathOther val) : Bool val","title":"eq"},{"location":"files-_PathOther/#parameters","text":"that: _PathOther val","title":"Parameters"},{"location":"files-_PathOther/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathOther/#ne","text":"[Source] fun box ne( that: _PathOther val) : Bool val","title":"ne"},{"location":"files-_PathOther/#parameters_1","text":"that: _PathOther val","title":"Parameters"},{"location":"files-_PathOther/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathSep/","text":"_PathSep \u00b6 [Source] primitive val _PathSep Constructors \u00b6 create \u00b6 [Source] new val create() : _PathSep val^ Returns \u00b6 _PathSep val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _PathSep val) : Bool val Parameters \u00b6 that: _PathSep val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _PathSep val) : Bool val Parameters \u00b6 that: _PathSep val Returns \u00b6 Bool val","title":"primitive _PathSep"},{"location":"files-_PathSep/#_pathsep","text":"[Source] primitive val _PathSep","title":"_PathSep"},{"location":"files-_PathSep/#constructors","text":"","title":"Constructors"},{"location":"files-_PathSep/#create","text":"[Source] new val create() : _PathSep val^","title":"create"},{"location":"files-_PathSep/#returns","text":"_PathSep val^","title":"Returns"},{"location":"files-_PathSep/#public-functions","text":"","title":"Public Functions"},{"location":"files-_PathSep/#eq","text":"[Source] fun box eq( that: _PathSep val) : Bool val","title":"eq"},{"location":"files-_PathSep/#parameters","text":"that: _PathSep val","title":"Parameters"},{"location":"files-_PathSep/#returns_1","text":"Bool val","title":"Returns"},{"location":"files-_PathSep/#ne","text":"[Source] fun box ne( that: _PathSep val) : Bool val","title":"ne"},{"location":"files-_PathSep/#parameters_1","text":"that: _PathSep val","title":"Parameters"},{"location":"files-_PathSep/#returns_2","text":"Bool val","title":"Returns"},{"location":"files-_PathState/","text":"_PathState \u00b6 [Source] type _PathState is (_PathSep val | _PathDot val | _PathDot2 val | _PathOther val) Type Alias For \u00b6 ( _PathSep val | _PathDot val | _PathDot2 val | _PathOther val)","title":"type _PathState"},{"location":"files-_PathState/#_pathstate","text":"[Source] type _PathState is (_PathSep val | _PathDot val | _PathDot2 val | _PathOther val)","title":"_PathState"},{"location":"files-_PathState/#type-alias-for","text":"( _PathSep val | _PathDot val | _PathDot2 val | _PathOther val)","title":"Type Alias For"},{"location":"format--index/","text":"Format package \u00b6 The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal). Example program \u00b6 use \"format\" actor Main fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String => Format(desc where width = 10) + \":\" + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt) new create(env: Env) => try (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?) env.out.print(disp(\"x\", x)) env.out.print(disp(\"y\", y)) env.out.print(disp(\"hex(x)\", x, FormatHex)) env.out.print(disp(\"hex(y)\", y, FormatHex)) env.out.print(disp(\"x * y\", x * y)) else let exe = try env.args(0)? else \"fmt_example\" end env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\") end Public Types \u00b6 trait PrefixSpec primitive PrefixDefault primitive PrefixSpace primitive PrefixSign type PrefixNumber trait FormatSpec primitive FormatDefault primitive FormatUTF32 primitive FormatBinary primitive FormatBinaryBare primitive FormatOctal primitive FormatOctalBare primitive FormatHex primitive FormatHexBare primitive FormatHexSmall primitive FormatHexSmallBare type FormatInt primitive FormatExp primitive FormatExpLarge primitive FormatFix primitive FormatFixLarge primitive FormatGeneral primitive FormatGeneralLarge type FormatFloat primitive Format primitive AlignLeft primitive AlignRight primitive AlignCenter type Align Private Types \u00b6 primitive _FormatInt primitive _FormatFloat","title":"Package"},{"location":"format--index/#format-package","text":"The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal).","title":"Format package"},{"location":"format--index/#example-program","text":"use \"format\" actor Main fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String => Format(desc where width = 10) + \":\" + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt) new create(env: Env) => try (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?) env.out.print(disp(\"x\", x)) env.out.print(disp(\"y\", y)) env.out.print(disp(\"hex(x)\", x, FormatHex)) env.out.print(disp(\"hex(y)\", y, FormatHex)) env.out.print(disp(\"x * y\", x * y)) else let exe = try env.args(0)? else \"fmt_example\" end env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\") end","title":"Example program"},{"location":"format--index/#public-types","text":"trait PrefixSpec primitive PrefixDefault primitive PrefixSpace primitive PrefixSign type PrefixNumber trait FormatSpec primitive FormatDefault primitive FormatUTF32 primitive FormatBinary primitive FormatBinaryBare primitive FormatOctal primitive FormatOctalBare primitive FormatHex primitive FormatHexBare primitive FormatHexSmall primitive FormatHexSmallBare type FormatInt primitive FormatExp primitive FormatExpLarge primitive FormatFix primitive FormatFixLarge primitive FormatGeneral primitive FormatGeneralLarge type FormatFloat primitive Format primitive AlignLeft primitive AlignRight primitive AlignCenter type Align","title":"Public Types"},{"location":"format--index/#private-types","text":"primitive _FormatInt primitive _FormatFloat","title":"Private Types"},{"location":"format-Align/","text":"Align \u00b6 [Source] type Align is (AlignLeft val | AlignRight val | AlignCenter val) Type Alias For \u00b6 ( AlignLeft val | AlignRight val | AlignCenter val)","title":"type Align"},{"location":"format-Align/#align","text":"[Source] type Align is (AlignLeft val | AlignRight val | AlignCenter val)","title":"Align"},{"location":"format-Align/#type-alias-for","text":"( AlignLeft val | AlignRight val | AlignCenter val)","title":"Type Alias For"},{"location":"format-AlignCenter/","text":"AlignCenter \u00b6 [Source] primitive val AlignCenter Constructors \u00b6 create \u00b6 [Source] new val create() : AlignCenter val^ Returns \u00b6 AlignCenter val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AlignCenter val) : Bool val Parameters \u00b6 that: AlignCenter val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AlignCenter val) : Bool val Parameters \u00b6 that: AlignCenter val Returns \u00b6 Bool val","title":"primitive AlignCenter"},{"location":"format-AlignCenter/#aligncenter","text":"[Source] primitive val AlignCenter","title":"AlignCenter"},{"location":"format-AlignCenter/#constructors","text":"","title":"Constructors"},{"location":"format-AlignCenter/#create","text":"[Source] new val create() : AlignCenter val^","title":"create"},{"location":"format-AlignCenter/#returns","text":"AlignCenter val^","title":"Returns"},{"location":"format-AlignCenter/#public-functions","text":"","title":"Public Functions"},{"location":"format-AlignCenter/#eq","text":"[Source] fun box eq( that: AlignCenter val) : Bool val","title":"eq"},{"location":"format-AlignCenter/#parameters","text":"that: AlignCenter val","title":"Parameters"},{"location":"format-AlignCenter/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-AlignCenter/#ne","text":"[Source] fun box ne( that: AlignCenter val) : Bool val","title":"ne"},{"location":"format-AlignCenter/#parameters_1","text":"that: AlignCenter val","title":"Parameters"},{"location":"format-AlignCenter/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-AlignLeft/","text":"AlignLeft \u00b6 [Source] primitive val AlignLeft Constructors \u00b6 create \u00b6 [Source] new val create() : AlignLeft val^ Returns \u00b6 AlignLeft val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AlignLeft val) : Bool val Parameters \u00b6 that: AlignLeft val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AlignLeft val) : Bool val Parameters \u00b6 that: AlignLeft val Returns \u00b6 Bool val","title":"primitive AlignLeft"},{"location":"format-AlignLeft/#alignleft","text":"[Source] primitive val AlignLeft","title":"AlignLeft"},{"location":"format-AlignLeft/#constructors","text":"","title":"Constructors"},{"location":"format-AlignLeft/#create","text":"[Source] new val create() : AlignLeft val^","title":"create"},{"location":"format-AlignLeft/#returns","text":"AlignLeft val^","title":"Returns"},{"location":"format-AlignLeft/#public-functions","text":"","title":"Public Functions"},{"location":"format-AlignLeft/#eq","text":"[Source] fun box eq( that: AlignLeft val) : Bool val","title":"eq"},{"location":"format-AlignLeft/#parameters","text":"that: AlignLeft val","title":"Parameters"},{"location":"format-AlignLeft/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-AlignLeft/#ne","text":"[Source] fun box ne( that: AlignLeft val) : Bool val","title":"ne"},{"location":"format-AlignLeft/#parameters_1","text":"that: AlignLeft val","title":"Parameters"},{"location":"format-AlignLeft/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-AlignRight/","text":"AlignRight \u00b6 [Source] primitive val AlignRight Constructors \u00b6 create \u00b6 [Source] new val create() : AlignRight val^ Returns \u00b6 AlignRight val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AlignRight val) : Bool val Parameters \u00b6 that: AlignRight val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AlignRight val) : Bool val Parameters \u00b6 that: AlignRight val Returns \u00b6 Bool val","title":"primitive AlignRight"},{"location":"format-AlignRight/#alignright","text":"[Source] primitive val AlignRight","title":"AlignRight"},{"location":"format-AlignRight/#constructors","text":"","title":"Constructors"},{"location":"format-AlignRight/#create","text":"[Source] new val create() : AlignRight val^","title":"create"},{"location":"format-AlignRight/#returns","text":"AlignRight val^","title":"Returns"},{"location":"format-AlignRight/#public-functions","text":"","title":"Public Functions"},{"location":"format-AlignRight/#eq","text":"[Source] fun box eq( that: AlignRight val) : Bool val","title":"eq"},{"location":"format-AlignRight/#parameters","text":"that: AlignRight val","title":"Parameters"},{"location":"format-AlignRight/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-AlignRight/#ne","text":"[Source] fun box ne( that: AlignRight val) : Bool val","title":"ne"},{"location":"format-AlignRight/#parameters_1","text":"that: AlignRight val","title":"Parameters"},{"location":"format-AlignRight/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-Format/","text":"Format \u00b6 [Source] Provides functions for generating formatted strings. fmt. Format to use. prefix. Prefix to use. prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used. width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough. align. Specify whether fill characters should be added at the beginning or end of the generated string, or both. fill: The character to pad a string with if is is shorter than width. primitive val Format Constructors \u00b6 create \u00b6 [Source] new val create() : Format val^ Returns \u00b6 Format val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( str: String val, fmt: FormatDefault val = reference, prefix: PrefixDefault val = reference, prec: USize val = call, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^ Parameters \u00b6 str: String val fmt: FormatDefault val = reference prefix: PrefixDefault val = reference prec: USize val = call width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32 Returns \u00b6 String iso^ int[A: (( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer [A])] \u00b6 [Source] fun box int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A])]( x: A, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = call, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^ Parameters \u00b6 x: A fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = call width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32 Returns \u00b6 String iso^ float[A: (( F32 val | F64 val) & FloatingPoint [A])] \u00b6 [Source] fun box float[A: ((F32 val | F64 val) & FloatingPoint[A])]( x: A, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = 6, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^ Parameters \u00b6 x: A fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = 6 width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32 Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: Format val) : Bool val Parameters \u00b6 that: Format val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Format val) : Bool val Parameters \u00b6 that: Format val Returns \u00b6 Bool val","title":"primitive Format"},{"location":"format-Format/#format","text":"[Source] Provides functions for generating formatted strings. fmt. Format to use. prefix. Prefix to use. prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used. width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough. align. Specify whether fill characters should be added at the beginning or end of the generated string, or both. fill: The character to pad a string with if is is shorter than width. primitive val Format","title":"Format"},{"location":"format-Format/#constructors","text":"","title":"Constructors"},{"location":"format-Format/#create","text":"[Source] new val create() : Format val^","title":"create"},{"location":"format-Format/#returns","text":"Format val^","title":"Returns"},{"location":"format-Format/#public-functions","text":"","title":"Public Functions"},{"location":"format-Format/#apply","text":"[Source] fun box apply( str: String val, fmt: FormatDefault val = reference, prefix: PrefixDefault val = reference, prec: USize val = call, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^","title":"apply"},{"location":"format-Format/#parameters","text":"str: String val fmt: FormatDefault val = reference prefix: PrefixDefault val = reference prec: USize val = call width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32","title":"Parameters"},{"location":"format-Format/#returns_1","text":"String iso^","title":"Returns"},{"location":"format-Format/#int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a9393","text":"[Source] fun box int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Integer[A])]( x: A, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = call, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^","title":"int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A])]"},{"location":"format-Format/#parameters_1","text":"x: A fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = call width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32","title":"Parameters"},{"location":"format-Format/#returns_2","text":"String iso^","title":"Returns"},{"location":"format-Format/#float91a-f32-val-f64-val-floatingpoint91a9393","text":"[Source] fun box float[A: ((F32 val | F64 val) & FloatingPoint[A])]( x: A, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = 6, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^","title":"float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])]"},{"location":"format-Format/#parameters_2","text":"x: A fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = 6 width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32","title":"Parameters"},{"location":"format-Format/#returns_3","text":"String iso^","title":"Returns"},{"location":"format-Format/#eq","text":"[Source] fun box eq( that: Format val) : Bool val","title":"eq"},{"location":"format-Format/#parameters_3","text":"that: Format val","title":"Parameters"},{"location":"format-Format/#returns_4","text":"Bool val","title":"Returns"},{"location":"format-Format/#ne","text":"[Source] fun box ne( that: Format val) : Bool val","title":"ne"},{"location":"format-Format/#parameters_4","text":"that: Format val","title":"Parameters"},{"location":"format-Format/#returns_5","text":"Bool val","title":"Returns"},{"location":"format-FormatBinary/","text":"FormatBinary \u00b6 [Source] primitive val FormatBinary is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatBinary val^ Returns \u00b6 FormatBinary val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatBinary val) : Bool val Parameters \u00b6 that: FormatBinary val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatBinary val) : Bool val Parameters \u00b6 that: FormatBinary val Returns \u00b6 Bool val","title":"primitive FormatBinary"},{"location":"format-FormatBinary/#formatbinary","text":"[Source] primitive val FormatBinary is FormatSpec val","title":"FormatBinary"},{"location":"format-FormatBinary/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatBinary/#constructors","text":"","title":"Constructors"},{"location":"format-FormatBinary/#create","text":"[Source] new val create() : FormatBinary val^","title":"create"},{"location":"format-FormatBinary/#returns","text":"FormatBinary val^","title":"Returns"},{"location":"format-FormatBinary/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatBinary/#eq","text":"[Source] fun box eq( that: FormatBinary val) : Bool val","title":"eq"},{"location":"format-FormatBinary/#parameters","text":"that: FormatBinary val","title":"Parameters"},{"location":"format-FormatBinary/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatBinary/#ne","text":"[Source] fun box ne( that: FormatBinary val) : Bool val","title":"ne"},{"location":"format-FormatBinary/#parameters_1","text":"that: FormatBinary val","title":"Parameters"},{"location":"format-FormatBinary/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatBinaryBare/","text":"FormatBinaryBare \u00b6 [Source] primitive val FormatBinaryBare is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatBinaryBare val^ Returns \u00b6 FormatBinaryBare val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatBinaryBare val) : Bool val Parameters \u00b6 that: FormatBinaryBare val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatBinaryBare val) : Bool val Parameters \u00b6 that: FormatBinaryBare val Returns \u00b6 Bool val","title":"primitive FormatBinaryBare"},{"location":"format-FormatBinaryBare/#formatbinarybare","text":"[Source] primitive val FormatBinaryBare is FormatSpec val","title":"FormatBinaryBare"},{"location":"format-FormatBinaryBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatBinaryBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatBinaryBare/#create","text":"[Source] new val create() : FormatBinaryBare val^","title":"create"},{"location":"format-FormatBinaryBare/#returns","text":"FormatBinaryBare val^","title":"Returns"},{"location":"format-FormatBinaryBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatBinaryBare/#eq","text":"[Source] fun box eq( that: FormatBinaryBare val) : Bool val","title":"eq"},{"location":"format-FormatBinaryBare/#parameters","text":"that: FormatBinaryBare val","title":"Parameters"},{"location":"format-FormatBinaryBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatBinaryBare/#ne","text":"[Source] fun box ne( that: FormatBinaryBare val) : Bool val","title":"ne"},{"location":"format-FormatBinaryBare/#parameters_1","text":"that: FormatBinaryBare val","title":"Parameters"},{"location":"format-FormatBinaryBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatDefault/","text":"FormatDefault \u00b6 [Source] primitive val FormatDefault is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatDefault val^ Returns \u00b6 FormatDefault val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatDefault val) : Bool val Parameters \u00b6 that: FormatDefault val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatDefault val) : Bool val Parameters \u00b6 that: FormatDefault val Returns \u00b6 Bool val","title":"primitive FormatDefault"},{"location":"format-FormatDefault/#formatdefault","text":"[Source] primitive val FormatDefault is FormatSpec val","title":"FormatDefault"},{"location":"format-FormatDefault/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatDefault/#constructors","text":"","title":"Constructors"},{"location":"format-FormatDefault/#create","text":"[Source] new val create() : FormatDefault val^","title":"create"},{"location":"format-FormatDefault/#returns","text":"FormatDefault val^","title":"Returns"},{"location":"format-FormatDefault/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatDefault/#eq","text":"[Source] fun box eq( that: FormatDefault val) : Bool val","title":"eq"},{"location":"format-FormatDefault/#parameters","text":"that: FormatDefault val","title":"Parameters"},{"location":"format-FormatDefault/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatDefault/#ne","text":"[Source] fun box ne( that: FormatDefault val) : Bool val","title":"ne"},{"location":"format-FormatDefault/#parameters_1","text":"that: FormatDefault val","title":"Parameters"},{"location":"format-FormatDefault/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatExp/","text":"FormatExp \u00b6 [Source] primitive val FormatExp is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatExp val^ Returns \u00b6 FormatExp val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatExp val) : Bool val Parameters \u00b6 that: FormatExp val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatExp val) : Bool val Parameters \u00b6 that: FormatExp val Returns \u00b6 Bool val","title":"primitive FormatExp"},{"location":"format-FormatExp/#formatexp","text":"[Source] primitive val FormatExp is FormatSpec val","title":"FormatExp"},{"location":"format-FormatExp/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatExp/#constructors","text":"","title":"Constructors"},{"location":"format-FormatExp/#create","text":"[Source] new val create() : FormatExp val^","title":"create"},{"location":"format-FormatExp/#returns","text":"FormatExp val^","title":"Returns"},{"location":"format-FormatExp/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatExp/#eq","text":"[Source] fun box eq( that: FormatExp val) : Bool val","title":"eq"},{"location":"format-FormatExp/#parameters","text":"that: FormatExp val","title":"Parameters"},{"location":"format-FormatExp/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatExp/#ne","text":"[Source] fun box ne( that: FormatExp val) : Bool val","title":"ne"},{"location":"format-FormatExp/#parameters_1","text":"that: FormatExp val","title":"Parameters"},{"location":"format-FormatExp/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatExpLarge/","text":"FormatExpLarge \u00b6 [Source] primitive val FormatExpLarge is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatExpLarge val^ Returns \u00b6 FormatExpLarge val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatExpLarge val) : Bool val Parameters \u00b6 that: FormatExpLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatExpLarge val) : Bool val Parameters \u00b6 that: FormatExpLarge val Returns \u00b6 Bool val","title":"primitive FormatExpLarge"},{"location":"format-FormatExpLarge/#formatexplarge","text":"[Source] primitive val FormatExpLarge is FormatSpec val","title":"FormatExpLarge"},{"location":"format-FormatExpLarge/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatExpLarge/#constructors","text":"","title":"Constructors"},{"location":"format-FormatExpLarge/#create","text":"[Source] new val create() : FormatExpLarge val^","title":"create"},{"location":"format-FormatExpLarge/#returns","text":"FormatExpLarge val^","title":"Returns"},{"location":"format-FormatExpLarge/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatExpLarge/#eq","text":"[Source] fun box eq( that: FormatExpLarge val) : Bool val","title":"eq"},{"location":"format-FormatExpLarge/#parameters","text":"that: FormatExpLarge val","title":"Parameters"},{"location":"format-FormatExpLarge/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatExpLarge/#ne","text":"[Source] fun box ne( that: FormatExpLarge val) : Bool val","title":"ne"},{"location":"format-FormatExpLarge/#parameters_1","text":"that: FormatExpLarge val","title":"Parameters"},{"location":"format-FormatExpLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatFix/","text":"FormatFix \u00b6 [Source] primitive val FormatFix is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatFix val^ Returns \u00b6 FormatFix val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatFix val) : Bool val Parameters \u00b6 that: FormatFix val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatFix val) : Bool val Parameters \u00b6 that: FormatFix val Returns \u00b6 Bool val","title":"primitive FormatFix"},{"location":"format-FormatFix/#formatfix","text":"[Source] primitive val FormatFix is FormatSpec val","title":"FormatFix"},{"location":"format-FormatFix/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatFix/#constructors","text":"","title":"Constructors"},{"location":"format-FormatFix/#create","text":"[Source] new val create() : FormatFix val^","title":"create"},{"location":"format-FormatFix/#returns","text":"FormatFix val^","title":"Returns"},{"location":"format-FormatFix/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatFix/#eq","text":"[Source] fun box eq( that: FormatFix val) : Bool val","title":"eq"},{"location":"format-FormatFix/#parameters","text":"that: FormatFix val","title":"Parameters"},{"location":"format-FormatFix/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatFix/#ne","text":"[Source] fun box ne( that: FormatFix val) : Bool val","title":"ne"},{"location":"format-FormatFix/#parameters_1","text":"that: FormatFix val","title":"Parameters"},{"location":"format-FormatFix/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatFixLarge/","text":"FormatFixLarge \u00b6 [Source] primitive val FormatFixLarge is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatFixLarge val^ Returns \u00b6 FormatFixLarge val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatFixLarge val) : Bool val Parameters \u00b6 that: FormatFixLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatFixLarge val) : Bool val Parameters \u00b6 that: FormatFixLarge val Returns \u00b6 Bool val","title":"primitive FormatFixLarge"},{"location":"format-FormatFixLarge/#formatfixlarge","text":"[Source] primitive val FormatFixLarge is FormatSpec val","title":"FormatFixLarge"},{"location":"format-FormatFixLarge/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatFixLarge/#constructors","text":"","title":"Constructors"},{"location":"format-FormatFixLarge/#create","text":"[Source] new val create() : FormatFixLarge val^","title":"create"},{"location":"format-FormatFixLarge/#returns","text":"FormatFixLarge val^","title":"Returns"},{"location":"format-FormatFixLarge/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatFixLarge/#eq","text":"[Source] fun box eq( that: FormatFixLarge val) : Bool val","title":"eq"},{"location":"format-FormatFixLarge/#parameters","text":"that: FormatFixLarge val","title":"Parameters"},{"location":"format-FormatFixLarge/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatFixLarge/#ne","text":"[Source] fun box ne( that: FormatFixLarge val) : Bool val","title":"ne"},{"location":"format-FormatFixLarge/#parameters_1","text":"that: FormatFixLarge val","title":"Parameters"},{"location":"format-FormatFixLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatFloat/","text":"FormatFloat \u00b6 [Source] type FormatFloat is (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) Type Alias For \u00b6 ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)","title":"type FormatFloat"},{"location":"format-FormatFloat/#formatfloat","text":"[Source] type FormatFloat is (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)","title":"FormatFloat"},{"location":"format-FormatFloat/#type-alias-for","text":"( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)","title":"Type Alias For"},{"location":"format-FormatGeneral/","text":"FormatGeneral \u00b6 [Source] primitive val FormatGeneral is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatGeneral val^ Returns \u00b6 FormatGeneral val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatGeneral val) : Bool val Parameters \u00b6 that: FormatGeneral val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatGeneral val) : Bool val Parameters \u00b6 that: FormatGeneral val Returns \u00b6 Bool val","title":"primitive FormatGeneral"},{"location":"format-FormatGeneral/#formatgeneral","text":"[Source] primitive val FormatGeneral is FormatSpec val","title":"FormatGeneral"},{"location":"format-FormatGeneral/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatGeneral/#constructors","text":"","title":"Constructors"},{"location":"format-FormatGeneral/#create","text":"[Source] new val create() : FormatGeneral val^","title":"create"},{"location":"format-FormatGeneral/#returns","text":"FormatGeneral val^","title":"Returns"},{"location":"format-FormatGeneral/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatGeneral/#eq","text":"[Source] fun box eq( that: FormatGeneral val) : Bool val","title":"eq"},{"location":"format-FormatGeneral/#parameters","text":"that: FormatGeneral val","title":"Parameters"},{"location":"format-FormatGeneral/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatGeneral/#ne","text":"[Source] fun box ne( that: FormatGeneral val) : Bool val","title":"ne"},{"location":"format-FormatGeneral/#parameters_1","text":"that: FormatGeneral val","title":"Parameters"},{"location":"format-FormatGeneral/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatGeneralLarge/","text":"FormatGeneralLarge \u00b6 [Source] primitive val FormatGeneralLarge is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatGeneralLarge val^ Returns \u00b6 FormatGeneralLarge val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatGeneralLarge val) : Bool val Parameters \u00b6 that: FormatGeneralLarge val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatGeneralLarge val) : Bool val Parameters \u00b6 that: FormatGeneralLarge val Returns \u00b6 Bool val","title":"primitive FormatGeneralLarge"},{"location":"format-FormatGeneralLarge/#formatgenerallarge","text":"[Source] primitive val FormatGeneralLarge is FormatSpec val","title":"FormatGeneralLarge"},{"location":"format-FormatGeneralLarge/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatGeneralLarge/#constructors","text":"","title":"Constructors"},{"location":"format-FormatGeneralLarge/#create","text":"[Source] new val create() : FormatGeneralLarge val^","title":"create"},{"location":"format-FormatGeneralLarge/#returns","text":"FormatGeneralLarge val^","title":"Returns"},{"location":"format-FormatGeneralLarge/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatGeneralLarge/#eq","text":"[Source] fun box eq( that: FormatGeneralLarge val) : Bool val","title":"eq"},{"location":"format-FormatGeneralLarge/#parameters","text":"that: FormatGeneralLarge val","title":"Parameters"},{"location":"format-FormatGeneralLarge/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatGeneralLarge/#ne","text":"[Source] fun box ne( that: FormatGeneralLarge val) : Bool val","title":"ne"},{"location":"format-FormatGeneralLarge/#parameters_1","text":"that: FormatGeneralLarge val","title":"Parameters"},{"location":"format-FormatGeneralLarge/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHex/","text":"FormatHex \u00b6 [Source] primitive val FormatHex is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatHex val^ Returns \u00b6 FormatHex val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatHex val) : Bool val Parameters \u00b6 that: FormatHex val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatHex val) : Bool val Parameters \u00b6 that: FormatHex val Returns \u00b6 Bool val","title":"primitive FormatHex"},{"location":"format-FormatHex/#formathex","text":"[Source] primitive val FormatHex is FormatSpec val","title":"FormatHex"},{"location":"format-FormatHex/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHex/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHex/#create","text":"[Source] new val create() : FormatHex val^","title":"create"},{"location":"format-FormatHex/#returns","text":"FormatHex val^","title":"Returns"},{"location":"format-FormatHex/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHex/#eq","text":"[Source] fun box eq( that: FormatHex val) : Bool val","title":"eq"},{"location":"format-FormatHex/#parameters","text":"that: FormatHex val","title":"Parameters"},{"location":"format-FormatHex/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHex/#ne","text":"[Source] fun box ne( that: FormatHex val) : Bool val","title":"ne"},{"location":"format-FormatHex/#parameters_1","text":"that: FormatHex val","title":"Parameters"},{"location":"format-FormatHex/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHexBare/","text":"FormatHexBare \u00b6 [Source] primitive val FormatHexBare is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatHexBare val^ Returns \u00b6 FormatHexBare val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatHexBare val) : Bool val Parameters \u00b6 that: FormatHexBare val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatHexBare val) : Bool val Parameters \u00b6 that: FormatHexBare val Returns \u00b6 Bool val","title":"primitive FormatHexBare"},{"location":"format-FormatHexBare/#formathexbare","text":"[Source] primitive val FormatHexBare is FormatSpec val","title":"FormatHexBare"},{"location":"format-FormatHexBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHexBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHexBare/#create","text":"[Source] new val create() : FormatHexBare val^","title":"create"},{"location":"format-FormatHexBare/#returns","text":"FormatHexBare val^","title":"Returns"},{"location":"format-FormatHexBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHexBare/#eq","text":"[Source] fun box eq( that: FormatHexBare val) : Bool val","title":"eq"},{"location":"format-FormatHexBare/#parameters","text":"that: FormatHexBare val","title":"Parameters"},{"location":"format-FormatHexBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHexBare/#ne","text":"[Source] fun box ne( that: FormatHexBare val) : Bool val","title":"ne"},{"location":"format-FormatHexBare/#parameters_1","text":"that: FormatHexBare val","title":"Parameters"},{"location":"format-FormatHexBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmall/","text":"FormatHexSmall \u00b6 [Source] primitive val FormatHexSmall is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatHexSmall val^ Returns \u00b6 FormatHexSmall val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatHexSmall val) : Bool val Parameters \u00b6 that: FormatHexSmall val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatHexSmall val) : Bool val Parameters \u00b6 that: FormatHexSmall val Returns \u00b6 Bool val","title":"primitive FormatHexSmall"},{"location":"format-FormatHexSmall/#formathexsmall","text":"[Source] primitive val FormatHexSmall is FormatSpec val","title":"FormatHexSmall"},{"location":"format-FormatHexSmall/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHexSmall/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHexSmall/#create","text":"[Source] new val create() : FormatHexSmall val^","title":"create"},{"location":"format-FormatHexSmall/#returns","text":"FormatHexSmall val^","title":"Returns"},{"location":"format-FormatHexSmall/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHexSmall/#eq","text":"[Source] fun box eq( that: FormatHexSmall val) : Bool val","title":"eq"},{"location":"format-FormatHexSmall/#parameters","text":"that: FormatHexSmall val","title":"Parameters"},{"location":"format-FormatHexSmall/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmall/#ne","text":"[Source] fun box ne( that: FormatHexSmall val) : Bool val","title":"ne"},{"location":"format-FormatHexSmall/#parameters_1","text":"that: FormatHexSmall val","title":"Parameters"},{"location":"format-FormatHexSmall/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmallBare/","text":"FormatHexSmallBare \u00b6 [Source] primitive val FormatHexSmallBare is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatHexSmallBare val^ Returns \u00b6 FormatHexSmallBare val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatHexSmallBare val) : Bool val Parameters \u00b6 that: FormatHexSmallBare val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatHexSmallBare val) : Bool val Parameters \u00b6 that: FormatHexSmallBare val Returns \u00b6 Bool val","title":"primitive FormatHexSmallBare"},{"location":"format-FormatHexSmallBare/#formathexsmallbare","text":"[Source] primitive val FormatHexSmallBare is FormatSpec val","title":"FormatHexSmallBare"},{"location":"format-FormatHexSmallBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatHexSmallBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatHexSmallBare/#create","text":"[Source] new val create() : FormatHexSmallBare val^","title":"create"},{"location":"format-FormatHexSmallBare/#returns","text":"FormatHexSmallBare val^","title":"Returns"},{"location":"format-FormatHexSmallBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatHexSmallBare/#eq","text":"[Source] fun box eq( that: FormatHexSmallBare val) : Bool val","title":"eq"},{"location":"format-FormatHexSmallBare/#parameters","text":"that: FormatHexSmallBare val","title":"Parameters"},{"location":"format-FormatHexSmallBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatHexSmallBare/#ne","text":"[Source] fun box ne( that: FormatHexSmallBare val) : Bool val","title":"ne"},{"location":"format-FormatHexSmallBare/#parameters_1","text":"that: FormatHexSmallBare val","title":"Parameters"},{"location":"format-FormatHexSmallBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatInt/","text":"FormatInt \u00b6 [Source] type FormatInt is (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) Type Alias For \u00b6 ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"type FormatInt"},{"location":"format-FormatInt/#formatint","text":"[Source] type FormatInt is (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"FormatInt"},{"location":"format-FormatInt/#type-alias-for","text":"( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"Type Alias For"},{"location":"format-FormatOctal/","text":"FormatOctal \u00b6 [Source] primitive val FormatOctal is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatOctal val^ Returns \u00b6 FormatOctal val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatOctal val) : Bool val Parameters \u00b6 that: FormatOctal val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatOctal val) : Bool val Parameters \u00b6 that: FormatOctal val Returns \u00b6 Bool val","title":"primitive FormatOctal"},{"location":"format-FormatOctal/#formatoctal","text":"[Source] primitive val FormatOctal is FormatSpec val","title":"FormatOctal"},{"location":"format-FormatOctal/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatOctal/#constructors","text":"","title":"Constructors"},{"location":"format-FormatOctal/#create","text":"[Source] new val create() : FormatOctal val^","title":"create"},{"location":"format-FormatOctal/#returns","text":"FormatOctal val^","title":"Returns"},{"location":"format-FormatOctal/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatOctal/#eq","text":"[Source] fun box eq( that: FormatOctal val) : Bool val","title":"eq"},{"location":"format-FormatOctal/#parameters","text":"that: FormatOctal val","title":"Parameters"},{"location":"format-FormatOctal/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatOctal/#ne","text":"[Source] fun box ne( that: FormatOctal val) : Bool val","title":"ne"},{"location":"format-FormatOctal/#parameters_1","text":"that: FormatOctal val","title":"Parameters"},{"location":"format-FormatOctal/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatOctalBare/","text":"FormatOctalBare \u00b6 [Source] primitive val FormatOctalBare is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatOctalBare val^ Returns \u00b6 FormatOctalBare val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatOctalBare val) : Bool val Parameters \u00b6 that: FormatOctalBare val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatOctalBare val) : Bool val Parameters \u00b6 that: FormatOctalBare val Returns \u00b6 Bool val","title":"primitive FormatOctalBare"},{"location":"format-FormatOctalBare/#formatoctalbare","text":"[Source] primitive val FormatOctalBare is FormatSpec val","title":"FormatOctalBare"},{"location":"format-FormatOctalBare/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatOctalBare/#constructors","text":"","title":"Constructors"},{"location":"format-FormatOctalBare/#create","text":"[Source] new val create() : FormatOctalBare val^","title":"create"},{"location":"format-FormatOctalBare/#returns","text":"FormatOctalBare val^","title":"Returns"},{"location":"format-FormatOctalBare/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatOctalBare/#eq","text":"[Source] fun box eq( that: FormatOctalBare val) : Bool val","title":"eq"},{"location":"format-FormatOctalBare/#parameters","text":"that: FormatOctalBare val","title":"Parameters"},{"location":"format-FormatOctalBare/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatOctalBare/#ne","text":"[Source] fun box ne( that: FormatOctalBare val) : Bool val","title":"ne"},{"location":"format-FormatOctalBare/#parameters_1","text":"that: FormatOctalBare val","title":"Parameters"},{"location":"format-FormatOctalBare/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-FormatSpec/","text":"FormatSpec \u00b6 [Source] trait val FormatSpec","title":"trait FormatSpec"},{"location":"format-FormatSpec/#formatspec","text":"[Source] trait val FormatSpec","title":"FormatSpec"},{"location":"format-FormatUTF32/","text":"FormatUTF32 \u00b6 [Source] primitive val FormatUTF32 is FormatSpec val Implements \u00b6 FormatSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : FormatUTF32 val^ Returns \u00b6 FormatUTF32 val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: FormatUTF32 val) : Bool val Parameters \u00b6 that: FormatUTF32 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: FormatUTF32 val) : Bool val Parameters \u00b6 that: FormatUTF32 val Returns \u00b6 Bool val","title":"primitive FormatUTF32"},{"location":"format-FormatUTF32/#formatutf32","text":"[Source] primitive val FormatUTF32 is FormatSpec val","title":"FormatUTF32"},{"location":"format-FormatUTF32/#implements","text":"FormatSpec val","title":"Implements"},{"location":"format-FormatUTF32/#constructors","text":"","title":"Constructors"},{"location":"format-FormatUTF32/#create","text":"[Source] new val create() : FormatUTF32 val^","title":"create"},{"location":"format-FormatUTF32/#returns","text":"FormatUTF32 val^","title":"Returns"},{"location":"format-FormatUTF32/#public-functions","text":"","title":"Public Functions"},{"location":"format-FormatUTF32/#eq","text":"[Source] fun box eq( that: FormatUTF32 val) : Bool val","title":"eq"},{"location":"format-FormatUTF32/#parameters","text":"that: FormatUTF32 val","title":"Parameters"},{"location":"format-FormatUTF32/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-FormatUTF32/#ne","text":"[Source] fun box ne( that: FormatUTF32 val) : Bool val","title":"ne"},{"location":"format-FormatUTF32/#parameters_1","text":"that: FormatUTF32 val","title":"Parameters"},{"location":"format-FormatUTF32/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixDefault/","text":"PrefixDefault \u00b6 [Source] primitive val PrefixDefault is PrefixSpec val Implements \u00b6 PrefixSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : PrefixDefault val^ Returns \u00b6 PrefixDefault val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: PrefixDefault val) : Bool val Parameters \u00b6 that: PrefixDefault val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PrefixDefault val) : Bool val Parameters \u00b6 that: PrefixDefault val Returns \u00b6 Bool val","title":"primitive PrefixDefault"},{"location":"format-PrefixDefault/#prefixdefault","text":"[Source] primitive val PrefixDefault is PrefixSpec val","title":"PrefixDefault"},{"location":"format-PrefixDefault/#implements","text":"PrefixSpec val","title":"Implements"},{"location":"format-PrefixDefault/#constructors","text":"","title":"Constructors"},{"location":"format-PrefixDefault/#create","text":"[Source] new val create() : PrefixDefault val^","title":"create"},{"location":"format-PrefixDefault/#returns","text":"PrefixDefault val^","title":"Returns"},{"location":"format-PrefixDefault/#public-functions","text":"","title":"Public Functions"},{"location":"format-PrefixDefault/#eq","text":"[Source] fun box eq( that: PrefixDefault val) : Bool val","title":"eq"},{"location":"format-PrefixDefault/#parameters","text":"that: PrefixDefault val","title":"Parameters"},{"location":"format-PrefixDefault/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-PrefixDefault/#ne","text":"[Source] fun box ne( that: PrefixDefault val) : Bool val","title":"ne"},{"location":"format-PrefixDefault/#parameters_1","text":"that: PrefixDefault val","title":"Parameters"},{"location":"format-PrefixDefault/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixNumber/","text":"PrefixNumber \u00b6 [Source] type PrefixNumber is (PrefixDefault val | PrefixSpace val | PrefixSign val) Type Alias For \u00b6 ( PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"type PrefixNumber"},{"location":"format-PrefixNumber/#prefixnumber","text":"[Source] type PrefixNumber is (PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"PrefixNumber"},{"location":"format-PrefixNumber/#type-alias-for","text":"( PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"Type Alias For"},{"location":"format-PrefixSign/","text":"PrefixSign \u00b6 [Source] primitive val PrefixSign is PrefixSpec val Implements \u00b6 PrefixSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : PrefixSign val^ Returns \u00b6 PrefixSign val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: PrefixSign val) : Bool val Parameters \u00b6 that: PrefixSign val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PrefixSign val) : Bool val Parameters \u00b6 that: PrefixSign val Returns \u00b6 Bool val","title":"primitive PrefixSign"},{"location":"format-PrefixSign/#prefixsign","text":"[Source] primitive val PrefixSign is PrefixSpec val","title":"PrefixSign"},{"location":"format-PrefixSign/#implements","text":"PrefixSpec val","title":"Implements"},{"location":"format-PrefixSign/#constructors","text":"","title":"Constructors"},{"location":"format-PrefixSign/#create","text":"[Source] new val create() : PrefixSign val^","title":"create"},{"location":"format-PrefixSign/#returns","text":"PrefixSign val^","title":"Returns"},{"location":"format-PrefixSign/#public-functions","text":"","title":"Public Functions"},{"location":"format-PrefixSign/#eq","text":"[Source] fun box eq( that: PrefixSign val) : Bool val","title":"eq"},{"location":"format-PrefixSign/#parameters","text":"that: PrefixSign val","title":"Parameters"},{"location":"format-PrefixSign/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-PrefixSign/#ne","text":"[Source] fun box ne( that: PrefixSign val) : Bool val","title":"ne"},{"location":"format-PrefixSign/#parameters_1","text":"that: PrefixSign val","title":"Parameters"},{"location":"format-PrefixSign/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixSpace/","text":"PrefixSpace \u00b6 [Source] primitive val PrefixSpace is PrefixSpec val Implements \u00b6 PrefixSpec val Constructors \u00b6 create \u00b6 [Source] new val create() : PrefixSpace val^ Returns \u00b6 PrefixSpace val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: PrefixSpace val) : Bool val Parameters \u00b6 that: PrefixSpace val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PrefixSpace val) : Bool val Parameters \u00b6 that: PrefixSpace val Returns \u00b6 Bool val","title":"primitive PrefixSpace"},{"location":"format-PrefixSpace/#prefixspace","text":"[Source] primitive val PrefixSpace is PrefixSpec val","title":"PrefixSpace"},{"location":"format-PrefixSpace/#implements","text":"PrefixSpec val","title":"Implements"},{"location":"format-PrefixSpace/#constructors","text":"","title":"Constructors"},{"location":"format-PrefixSpace/#create","text":"[Source] new val create() : PrefixSpace val^","title":"create"},{"location":"format-PrefixSpace/#returns","text":"PrefixSpace val^","title":"Returns"},{"location":"format-PrefixSpace/#public-functions","text":"","title":"Public Functions"},{"location":"format-PrefixSpace/#eq","text":"[Source] fun box eq( that: PrefixSpace val) : Bool val","title":"eq"},{"location":"format-PrefixSpace/#parameters","text":"that: PrefixSpace val","title":"Parameters"},{"location":"format-PrefixSpace/#returns_1","text":"Bool val","title":"Returns"},{"location":"format-PrefixSpace/#ne","text":"[Source] fun box ne( that: PrefixSpace val) : Bool val","title":"ne"},{"location":"format-PrefixSpace/#parameters_1","text":"that: PrefixSpace val","title":"Parameters"},{"location":"format-PrefixSpace/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-PrefixSpec/","text":"PrefixSpec \u00b6 [Source] trait val PrefixSpec","title":"trait PrefixSpec"},{"location":"format-PrefixSpec/#prefixspec","text":"[Source] trait val PrefixSpec","title":"PrefixSpec"},{"location":"format-_FormatFloat/","text":"_FormatFloat \u00b6 [Source] Worker type providing to string conversions for floats. primitive val _FormatFloat Constructors \u00b6 create \u00b6 [Source] new val create() : _FormatFloat val^ Returns \u00b6 _FormatFloat val^ Public Functions \u00b6 f64 \u00b6 [Source] fun box f64( x: F64 val, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = 6, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^ Parameters \u00b6 x: F64 val fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = 6 width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32 Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: _FormatFloat val) : Bool val Parameters \u00b6 that: _FormatFloat val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FormatFloat val) : Bool val Parameters \u00b6 that: _FormatFloat val Returns \u00b6 Bool val","title":"primitive _FormatFloat"},{"location":"format-_FormatFloat/#_formatfloat","text":"[Source] Worker type providing to string conversions for floats. primitive val _FormatFloat","title":"_FormatFloat"},{"location":"format-_FormatFloat/#constructors","text":"","title":"Constructors"},{"location":"format-_FormatFloat/#create","text":"[Source] new val create() : _FormatFloat val^","title":"create"},{"location":"format-_FormatFloat/#returns","text":"_FormatFloat val^","title":"Returns"},{"location":"format-_FormatFloat/#public-functions","text":"","title":"Public Functions"},{"location":"format-_FormatFloat/#f64","text":"[Source] fun box f64( x: F64 val, fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = 6, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^","title":"f64"},{"location":"format-_FormatFloat/#parameters","text":"x: F64 val fmt: ( FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = 6 width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32","title":"Parameters"},{"location":"format-_FormatFloat/#returns_1","text":"String iso^","title":"Returns"},{"location":"format-_FormatFloat/#eq","text":"[Source] fun box eq( that: _FormatFloat val) : Bool val","title":"eq"},{"location":"format-_FormatFloat/#parameters_1","text":"that: _FormatFloat val","title":"Parameters"},{"location":"format-_FormatFloat/#returns_2","text":"Bool val","title":"Returns"},{"location":"format-_FormatFloat/#ne","text":"[Source] fun box ne( that: _FormatFloat val) : Bool val","title":"ne"},{"location":"format-_FormatFloat/#parameters_2","text":"that: _FormatFloat val","title":"Parameters"},{"location":"format-_FormatFloat/#returns_3","text":"Bool val","title":"Returns"},{"location":"format-_FormatInt/","text":"_FormatInt \u00b6 [Source] Worker type providing to string conversions for integers. primitive val _FormatInt Constructors \u00b6 create \u00b6 [Source] new val create() : _FormatInt val^ Returns \u00b6 _FormatInt val^ Public Functions \u00b6 u8 \u00b6 [Source] fun box u8( x: U8 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters \u00b6 x: U8 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns \u00b6 String iso^ u16 \u00b6 [Source] fun box u16( x: U16 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters \u00b6 x: U16 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns \u00b6 String iso^ u32 \u00b6 [Source] fun box u32( x: U32 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters \u00b6 x: U32 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns \u00b6 String iso^ u64 \u00b6 [Source] fun box u64( x: U64 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^ Parameters \u00b6 x: U64 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns \u00b6 String iso^ u128 \u00b6 [Source] fun box u128( x: U128 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = call, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^ Parameters \u00b6 x: U128 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = call width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32 Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: _FormatInt val) : Bool val Parameters \u00b6 that: _FormatInt val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FormatInt val) : Bool val Parameters \u00b6 that: _FormatInt val Returns \u00b6 Bool val Private Functions \u00b6 _large \u00b6 [Source] fun box _large() : String val Returns \u00b6 String val _small \u00b6 [Source] fun box _small() : String val Returns \u00b6 String val _fmt_int \u00b6 [Source] fun box _fmt_int( fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)) : (U32 val , String val , String val) Parameters \u00b6 fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) Returns \u00b6 ( U32 val , String val , String val) _prefix \u00b6 [Source] fun box _prefix( neg: Bool val, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)) : String val Parameters \u00b6 neg: Bool val prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) Returns \u00b6 String val _extend_digits \u00b6 [Source] fun box _extend_digits( s: String ref, digits: USize val) : None val Parameters \u00b6 s: String ref digits: USize val Returns \u00b6 None val _pad \u00b6 [Source] fun box _pad( s: String ref, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : None val Parameters \u00b6 s: String ref width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val Returns \u00b6 None val","title":"primitive _FormatInt"},{"location":"format-_FormatInt/#_formatint","text":"[Source] Worker type providing to string conversions for integers. primitive val _FormatInt","title":"_FormatInt"},{"location":"format-_FormatInt/#constructors","text":"","title":"Constructors"},{"location":"format-_FormatInt/#create","text":"[Source] new val create() : _FormatInt val^","title":"create"},{"location":"format-_FormatInt/#returns","text":"_FormatInt val^","title":"Returns"},{"location":"format-_FormatInt/#public-functions","text":"","title":"Public Functions"},{"location":"format-_FormatInt/#u8","text":"[Source] fun box u8( x: U8 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u8"},{"location":"format-_FormatInt/#parameters","text":"x: U8 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_1","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u16","text":"[Source] fun box u16( x: U16 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u16"},{"location":"format-_FormatInt/#parameters_1","text":"x: U16 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_2","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u32","text":"[Source] fun box u32( x: U32 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u32"},{"location":"format-_FormatInt/#parameters_2","text":"x: U32 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_3","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u64","text":"[Source] fun box u64( x: U64 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val), prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val), prec: USize val, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : String iso^","title":"u64"},{"location":"format-_FormatInt/#parameters_3","text":"x: U64 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) prec: USize val width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_4","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#u128","text":"[Source] fun box u128( x: U128 val, neg: Bool val, fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = reference, prec: USize val = call, width: USize val = 0, align: (AlignLeft val | AlignRight val | AlignCenter val) = reference, fill: U32 val = 32) : String iso^","title":"u128"},{"location":"format-_FormatInt/#parameters_4","text":"x: U128 val neg: Bool val fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val) = reference prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val) = reference prec: USize val = call width: USize val = 0 align: ( AlignLeft val | AlignRight val | AlignCenter val) = reference fill: U32 val = 32","title":"Parameters"},{"location":"format-_FormatInt/#returns_5","text":"String iso^","title":"Returns"},{"location":"format-_FormatInt/#eq","text":"[Source] fun box eq( that: _FormatInt val) : Bool val","title":"eq"},{"location":"format-_FormatInt/#parameters_5","text":"that: _FormatInt val","title":"Parameters"},{"location":"format-_FormatInt/#returns_6","text":"Bool val","title":"Returns"},{"location":"format-_FormatInt/#ne","text":"[Source] fun box ne( that: _FormatInt val) : Bool val","title":"ne"},{"location":"format-_FormatInt/#parameters_6","text":"that: _FormatInt val","title":"Parameters"},{"location":"format-_FormatInt/#returns_7","text":"Bool val","title":"Returns"},{"location":"format-_FormatInt/#private-functions","text":"","title":"Private Functions"},{"location":"format-_FormatInt/#_large","text":"[Source] fun box _large() : String val","title":"_large"},{"location":"format-_FormatInt/#returns_8","text":"String val","title":"Returns"},{"location":"format-_FormatInt/#_small","text":"[Source] fun box _small() : String val","title":"_small"},{"location":"format-_FormatInt/#returns_9","text":"String val","title":"Returns"},{"location":"format-_FormatInt/#_fmt_int","text":"[Source] fun box _fmt_int( fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)) : (U32 val , String val , String val)","title":"_fmt_int"},{"location":"format-_FormatInt/#parameters_7","text":"fmt: ( FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)","title":"Parameters"},{"location":"format-_FormatInt/#returns_10","text":"( U32 val , String val , String val)","title":"Returns"},{"location":"format-_FormatInt/#_prefix","text":"[Source] fun box _prefix( neg: Bool val, prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val)) : String val","title":"_prefix"},{"location":"format-_FormatInt/#parameters_8","text":"neg: Bool val prefix: ( PrefixDefault val | PrefixSpace val | PrefixSign val)","title":"Parameters"},{"location":"format-_FormatInt/#returns_11","text":"String val","title":"Returns"},{"location":"format-_FormatInt/#_extend_digits","text":"[Source] fun box _extend_digits( s: String ref, digits: USize val) : None val","title":"_extend_digits"},{"location":"format-_FormatInt/#parameters_9","text":"s: String ref digits: USize val","title":"Parameters"},{"location":"format-_FormatInt/#returns_12","text":"None val","title":"Returns"},{"location":"format-_FormatInt/#_pad","text":"[Source] fun box _pad( s: String ref, width: USize val, align: (AlignLeft val | AlignRight val | AlignCenter val), fill: U32 val) : None val","title":"_pad"},{"location":"format-_FormatInt/#parameters_10","text":"s: String ref width: USize val align: ( AlignLeft val | AlignRight val | AlignCenter val) fill: U32 val","title":"Parameters"},{"location":"format-_FormatInt/#returns_13","text":"None val","title":"Returns"},{"location":"ini--index/","text":"Ini package \u00b6 The Ini package provides support for parsing INI file formatted text. Currently does not support multi-line entries. Any keys not in a section will be placed in the section \"\" Example code \u00b6 // Parses the file 'example.ini' in the current working directory // Output all the content use \"ini\" use \"files\" actor Main new create(env:Env) => try let ini_file = File(FilePath(env.root as AmbientAuth, \"example.ini\")?) let sections = IniParse(ini_file.lines())? for section in sections.keys() do env.out.print(\"Section name is: \" + section) for key in sections(section)?.keys() do env.out.print(key + \" = \" + sections(section)?(key)?) end end end Public Types \u00b6 type IniMap primitive IniParse primitive IniIncompleteSection primitive IniNoDelimiter type IniError interface IniNotify primitive Ini","title":"Package"},{"location":"ini--index/#ini-package","text":"The Ini package provides support for parsing INI file formatted text. Currently does not support multi-line entries. Any keys not in a section will be placed in the section \"\"","title":"Ini package"},{"location":"ini--index/#example-code","text":"// Parses the file 'example.ini' in the current working directory // Output all the content use \"ini\" use \"files\" actor Main new create(env:Env) => try let ini_file = File(FilePath(env.root as AmbientAuth, \"example.ini\")?) let sections = IniParse(ini_file.lines())? for section in sections.keys() do env.out.print(\"Section name is: \" + section) for key in sections(section)?.keys() do env.out.print(key + \" = \" + sections(section)?(key)?) end end end","title":"Example code"},{"location":"ini--index/#public-types","text":"type IniMap primitive IniParse primitive IniIncompleteSection primitive IniNoDelimiter type IniError interface IniNotify primitive Ini","title":"Public Types"},{"location":"ini-Ini/","text":"Ini \u00b6 [Source] A streaming parser for INI formatted lines of test. primitive val Ini Constructors \u00b6 create \u00b6 [Source] new val create() : Ini val^ Returns \u00b6 Ini val^ Public Functions \u00b6 apply \u00b6 [Source] This accepts a string iterator and calls the IniNotify for each new entry. If any errors are encountered, this will return false. Otherwise, it returns true. fun box apply( lines: Iterator[String box] ref, f: IniNotify ref) : Bool val Parameters \u00b6 lines: Iterator [ String box] ref f: IniNotify ref Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: Ini val) : Bool val Parameters \u00b6 that: Ini val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Ini val) : Bool val Parameters \u00b6 that: Ini val Returns \u00b6 Bool val","title":"primitive Ini"},{"location":"ini-Ini/#ini","text":"[Source] A streaming parser for INI formatted lines of test. primitive val Ini","title":"Ini"},{"location":"ini-Ini/#constructors","text":"","title":"Constructors"},{"location":"ini-Ini/#create","text":"[Source] new val create() : Ini val^","title":"create"},{"location":"ini-Ini/#returns","text":"Ini val^","title":"Returns"},{"location":"ini-Ini/#public-functions","text":"","title":"Public Functions"},{"location":"ini-Ini/#apply","text":"[Source] This accepts a string iterator and calls the IniNotify for each new entry. If any errors are encountered, this will return false. Otherwise, it returns true. fun box apply( lines: Iterator[String box] ref, f: IniNotify ref) : Bool val","title":"apply"},{"location":"ini-Ini/#parameters","text":"lines: Iterator [ String box] ref f: IniNotify ref","title":"Parameters"},{"location":"ini-Ini/#returns_1","text":"Bool val","title":"Returns"},{"location":"ini-Ini/#eq","text":"[Source] fun box eq( that: Ini val) : Bool val","title":"eq"},{"location":"ini-Ini/#parameters_1","text":"that: Ini val","title":"Parameters"},{"location":"ini-Ini/#returns_2","text":"Bool val","title":"Returns"},{"location":"ini-Ini/#ne","text":"[Source] fun box ne( that: Ini val) : Bool val","title":"ne"},{"location":"ini-Ini/#parameters_2","text":"that: Ini val","title":"Parameters"},{"location":"ini-Ini/#returns_3","text":"Bool val","title":"Returns"},{"location":"ini-IniError/","text":"IniError \u00b6 [Source] type IniError is (IniIncompleteSection val | IniNoDelimiter val) Type Alias For \u00b6 ( IniIncompleteSection val | IniNoDelimiter val)","title":"type IniError"},{"location":"ini-IniError/#inierror","text":"[Source] type IniError is (IniIncompleteSection val | IniNoDelimiter val)","title":"IniError"},{"location":"ini-IniError/#type-alias-for","text":"( IniIncompleteSection val | IniNoDelimiter val)","title":"Type Alias For"},{"location":"ini-IniIncompleteSection/","text":"IniIncompleteSection \u00b6 [Source] primitive val IniIncompleteSection Constructors \u00b6 create \u00b6 [Source] new val create() : IniIncompleteSection val^ Returns \u00b6 IniIncompleteSection val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: IniIncompleteSection val) : Bool val Parameters \u00b6 that: IniIncompleteSection val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: IniIncompleteSection val) : Bool val Parameters \u00b6 that: IniIncompleteSection val Returns \u00b6 Bool val","title":"primitive IniIncompleteSection"},{"location":"ini-IniIncompleteSection/#iniincompletesection","text":"[Source] primitive val IniIncompleteSection","title":"IniIncompleteSection"},{"location":"ini-IniIncompleteSection/#constructors","text":"","title":"Constructors"},{"location":"ini-IniIncompleteSection/#create","text":"[Source] new val create() : IniIncompleteSection val^","title":"create"},{"location":"ini-IniIncompleteSection/#returns","text":"IniIncompleteSection val^","title":"Returns"},{"location":"ini-IniIncompleteSection/#public-functions","text":"","title":"Public Functions"},{"location":"ini-IniIncompleteSection/#eq","text":"[Source] fun box eq( that: IniIncompleteSection val) : Bool val","title":"eq"},{"location":"ini-IniIncompleteSection/#parameters","text":"that: IniIncompleteSection val","title":"Parameters"},{"location":"ini-IniIncompleteSection/#returns_1","text":"Bool val","title":"Returns"},{"location":"ini-IniIncompleteSection/#ne","text":"[Source] fun box ne( that: IniIncompleteSection val) : Bool val","title":"ne"},{"location":"ini-IniIncompleteSection/#parameters_1","text":"that: IniIncompleteSection val","title":"Parameters"},{"location":"ini-IniIncompleteSection/#returns_2","text":"Bool val","title":"Returns"},{"location":"ini-IniMap/","text":"IniMap \u00b6 [Source] type IniMap is HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref Type Alias For \u00b6 HashMap [ String val, HashMap [ String val, String val, HashEq [ String val] val] ref, HashEq [ String val] val] ref","title":"type IniMap"},{"location":"ini-IniMap/#inimap","text":"[Source] type IniMap is HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref","title":"IniMap"},{"location":"ini-IniMap/#type-alias-for","text":"HashMap [ String val, HashMap [ String val, String val, HashEq [ String val] val] ref, HashEq [ String val] val] ref","title":"Type Alias For"},{"location":"ini-IniNoDelimiter/","text":"IniNoDelimiter \u00b6 [Source] primitive val IniNoDelimiter Constructors \u00b6 create \u00b6 [Source] new val create() : IniNoDelimiter val^ Returns \u00b6 IniNoDelimiter val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: IniNoDelimiter val) : Bool val Parameters \u00b6 that: IniNoDelimiter val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: IniNoDelimiter val) : Bool val Parameters \u00b6 that: IniNoDelimiter val Returns \u00b6 Bool val","title":"primitive IniNoDelimiter"},{"location":"ini-IniNoDelimiter/#ininodelimiter","text":"[Source] primitive val IniNoDelimiter","title":"IniNoDelimiter"},{"location":"ini-IniNoDelimiter/#constructors","text":"","title":"Constructors"},{"location":"ini-IniNoDelimiter/#create","text":"[Source] new val create() : IniNoDelimiter val^","title":"create"},{"location":"ini-IniNoDelimiter/#returns","text":"IniNoDelimiter val^","title":"Returns"},{"location":"ini-IniNoDelimiter/#public-functions","text":"","title":"Public Functions"},{"location":"ini-IniNoDelimiter/#eq","text":"[Source] fun box eq( that: IniNoDelimiter val) : Bool val","title":"eq"},{"location":"ini-IniNoDelimiter/#parameters","text":"that: IniNoDelimiter val","title":"Parameters"},{"location":"ini-IniNoDelimiter/#returns_1","text":"Bool val","title":"Returns"},{"location":"ini-IniNoDelimiter/#ne","text":"[Source] fun box ne( that: IniNoDelimiter val) : Bool val","title":"ne"},{"location":"ini-IniNoDelimiter/#parameters_1","text":"that: IniNoDelimiter val","title":"Parameters"},{"location":"ini-IniNoDelimiter/#returns_2","text":"Bool val","title":"Returns"},{"location":"ini-IniNotify/","text":"IniNotify \u00b6 [Source] Notifications for INI parsing. interface ref IniNotify Public Functions \u00b6 apply \u00b6 [Source] This is called for every valid entry in the INI file. If key/value pairs occur before a section name, the section can be an empty string. Return false to halt processing. fun ref apply( section: String val, key: String val, value: String val) : Bool val Parameters \u00b6 section: String val key: String val value: String val Returns \u00b6 Bool val add_section \u00b6 [Source] This is called for every valid section in the INI file. Return false to halt processing. fun ref add_section( section: String val) : Bool val Parameters \u00b6 section: String val Returns \u00b6 Bool val errors \u00b6 [Source] This is called for each error encountered. Return false to halt processing. fun ref errors( line: USize val, err: (IniIncompleteSection val | IniNoDelimiter val)) : Bool val Parameters \u00b6 line: USize val err: ( IniIncompleteSection val | IniNoDelimiter val) Returns \u00b6 Bool val","title":"interface IniNotify"},{"location":"ini-IniNotify/#ininotify","text":"[Source] Notifications for INI parsing. interface ref IniNotify","title":"IniNotify"},{"location":"ini-IniNotify/#public-functions","text":"","title":"Public Functions"},{"location":"ini-IniNotify/#apply","text":"[Source] This is called for every valid entry in the INI file. If key/value pairs occur before a section name, the section can be an empty string. Return false to halt processing. fun ref apply( section: String val, key: String val, value: String val) : Bool val","title":"apply"},{"location":"ini-IniNotify/#parameters","text":"section: String val key: String val value: String val","title":"Parameters"},{"location":"ini-IniNotify/#returns","text":"Bool val","title":"Returns"},{"location":"ini-IniNotify/#add_section","text":"[Source] This is called for every valid section in the INI file. Return false to halt processing. fun ref add_section( section: String val) : Bool val","title":"add_section"},{"location":"ini-IniNotify/#parameters_1","text":"section: String val","title":"Parameters"},{"location":"ini-IniNotify/#returns_1","text":"Bool val","title":"Returns"},{"location":"ini-IniNotify/#errors","text":"[Source] This is called for each error encountered. Return false to halt processing. fun ref errors( line: USize val, err: (IniIncompleteSection val | IniNoDelimiter val)) : Bool val","title":"errors"},{"location":"ini-IniNotify/#parameters_2","text":"line: USize val err: ( IniIncompleteSection val | IniNoDelimiter val)","title":"Parameters"},{"location":"ini-IniNotify/#returns_2","text":"Bool val","title":"Returns"},{"location":"ini-IniParse/","text":"IniParse \u00b6 [Source] This is used to parse INI formatted text as a nested map of strings. primitive val IniParse Constructors \u00b6 create \u00b6 [Source] new val create() : IniParse val^ Returns \u00b6 IniParse val^ Public Functions \u00b6 apply \u00b6 [Source] This accepts a string iterator and returns a nested map of strings. If parsing fails, an error is raised. fun box apply( lines: Iterator[String val] ref) : HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ? Parameters \u00b6 lines: Iterator [ String val] ref Returns \u00b6 HashMap [ String val, HashMap [ String val, String val, HashEq [ String val] val] ref, HashEq [ String val] val] ref^ ? eq \u00b6 [Source] fun box eq( that: IniParse val) : Bool val Parameters \u00b6 that: IniParse val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: IniParse val) : Bool val Parameters \u00b6 that: IniParse val Returns \u00b6 Bool val","title":"primitive IniParse"},{"location":"ini-IniParse/#iniparse","text":"[Source] This is used to parse INI formatted text as a nested map of strings. primitive val IniParse","title":"IniParse"},{"location":"ini-IniParse/#constructors","text":"","title":"Constructors"},{"location":"ini-IniParse/#create","text":"[Source] new val create() : IniParse val^","title":"create"},{"location":"ini-IniParse/#returns","text":"IniParse val^","title":"Returns"},{"location":"ini-IniParse/#public-functions","text":"","title":"Public Functions"},{"location":"ini-IniParse/#apply","text":"[Source] This accepts a string iterator and returns a nested map of strings. If parsing fails, an error is raised. fun box apply( lines: Iterator[String val] ref) : HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ?","title":"apply"},{"location":"ini-IniParse/#parameters","text":"lines: Iterator [ String val] ref","title":"Parameters"},{"location":"ini-IniParse/#returns_1","text":"HashMap [ String val, HashMap [ String val, String val, HashEq [ String val] val] ref, HashEq [ String val] val] ref^ ?","title":"Returns"},{"location":"ini-IniParse/#eq","text":"[Source] fun box eq( that: IniParse val) : Bool val","title":"eq"},{"location":"ini-IniParse/#parameters_1","text":"that: IniParse val","title":"Parameters"},{"location":"ini-IniParse/#returns_2","text":"Bool val","title":"Returns"},{"location":"ini-IniParse/#ne","text":"[Source] fun box ne( that: IniParse val) : Bool val","title":"ne"},{"location":"ini-IniParse/#parameters_2","text":"that: IniParse val","title":"Parameters"},{"location":"ini-IniParse/#returns_3","text":"Bool val","title":"Returns"},{"location":"itertools--index/","text":"Itertools Package \u00b6 The itertools package provides the Iter class for doing useful things with iterators. It is Inspired by Python's itertools library, Rust's Iterator, and Elixir's Enum and Stream. Iter \u00b6 The Iter class wraps iterators so that additional methods may be applied to it. Some methods, such as fold and collect, run through the underlying iterator in order to return a result. Others, such as map and filter, are lazy. This means that they return another Iter so that the resulting values are computed one by one as needed. Lazy methods return Iter types. For example, the following code creates an Iter from the values of an array containing the numbers 1 through 5, increments each number by one, filters out any odd numbers, and prints the rest. let xs = Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) => x + 1 }) .filter({(x) => (x % 2) == 0 }) .map[None]({(x) => env.out.print(x.string()) }) This will result in an iterator that prints the numbers 2, 4, and 6. However, due to the lazy nature of the map and filter, no iteration has actually occurred and nothing will be printed. One solution to this would be to loop over the resulting Iter as so: for x in xs do None end This will trigger the iteration and print out the values 2, 4, and 6. This is where the run method comes in handy by doing the iteration without the need for a loop. So the final code would be as follows: Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) => x + 1 }) .filter({(x) => (x % 2) == 0 }) .map[None]({(x) => env.out.print(x.string()) }) .run() Output: 2 4 6 Public Types \u00b6 class Iter Private Types \u00b6 primitive _None class _EmptyIter","title":"Package"},{"location":"itertools--index/#itertools-package","text":"The itertools package provides the Iter class for doing useful things with iterators. It is Inspired by Python's itertools library, Rust's Iterator, and Elixir's Enum and Stream.","title":"Itertools Package"},{"location":"itertools--index/#iter","text":"The Iter class wraps iterators so that additional methods may be applied to it. Some methods, such as fold and collect, run through the underlying iterator in order to return a result. Others, such as map and filter, are lazy. This means that they return another Iter so that the resulting values are computed one by one as needed. Lazy methods return Iter types. For example, the following code creates an Iter from the values of an array containing the numbers 1 through 5, increments each number by one, filters out any odd numbers, and prints the rest. let xs = Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) => x + 1 }) .filter({(x) => (x % 2) == 0 }) .map[None]({(x) => env.out.print(x.string()) }) This will result in an iterator that prints the numbers 2, 4, and 6. However, due to the lazy nature of the map and filter, no iteration has actually occurred and nothing will be printed. One solution to this would be to loop over the resulting Iter as so: for x in xs do None end This will trigger the iteration and print out the values 2, 4, and 6. This is where the run method comes in handy by doing the iteration without the need for a loop. So the final code would be as follows: Iter[I64]([1; 2; 3; 4; 5].values()) .map[I64]({(x) => x + 1 }) .filter({(x) => (x % 2) == 0 }) .map[None]({(x) => env.out.print(x.string()) }) .run() Output: 2 4 6","title":"Iter"},{"location":"itertools--index/#public-types","text":"class Iter","title":"Public Types"},{"location":"itertools--index/#private-types","text":"primitive _None class _EmptyIter","title":"Private Types"},{"location":"itertools-Iter/","text":"Iter[A: A] \u00b6 [Source] Wrapper class containing methods to modify iterators. class ref Iter[A: A] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new ref create( iter: Iterator[A] ref) : Iter[A] ref^ Parameters \u00b6 iter: Iterator [A] ref Returns \u00b6 Iter [A] ref^ chain \u00b6 [Source] Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on. Example \u00b6 let xs = [as I64: 1; 2].values() let ys = [as I64: 3; 4].values() Iter[I64].chain([xs; ys].values()) 1 2 3 4 new ref chain( outer_iterator: Iterator[Iterator[A] ref] ref) : Iter[A] ref^ Parameters \u00b6 outer_iterator: Iterator [ Iterator [A] ref] ref Returns \u00b6 Iter [A] ref^ repeat_value \u00b6 [Source] Create an iterator that returns the given value forever. Example \u00b6 Iter[U32].repeat_value(7) 7 7 7 7 7 7 7 7 7 ... new ref repeat_value( value: A) : Iter[A] ref^ Parameters \u00b6 value: A Returns \u00b6 Iter [A] ref^ Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A ? Returns \u00b6 A ? map_stateful[B: B] \u00b6 [Source] Allows stateful transformation of each element from the iterator, similar to map . fun ref map_stateful[B: B]( f: {ref(A!): B^ ?}[A, B] ref) : Iter[B] ref^ Parameters \u00b6 f: {ref(A!): B^ ?}[A, B] ref Returns \u00b6 Iter [B] ref^ filter_stateful \u00b6 [Source] Allows filtering of elements based on a stateful adapter, similar to filter . fun ref filter_stateful( f: {ref(A!): Bool ?}[A] ref) : Iter[A!] ref^ Parameters \u00b6 f: {ref(A!): Bool ?}[A] ref Returns \u00b6 Iter [A!] ref^ filter_map_stateful[B: B] \u00b6 [Source] Allows stateful modification to the stream of elements from an iterator, similar to filter_map . fun ref filter_map_stateful[B: B]( f: {ref(A!): (B^ | None) ?}[A, B] ref) : Iter[B] ref^ Parameters \u00b6 f: {ref(A!): (B^ | None) ?}[A, B] ref Returns \u00b6 Iter [B] ref^ all \u00b6 [Source] Return false if at least one value of the iterator fails to match the predicate f . This method short-circuits at the first value where the predicate returns false, otherwise true is returned. Examples \u00b6 Iter[I64]([2; 4; 6].values()) .all({(x) => (x % 2) == 0 }) true Iter[I64]([2; 3; 4].values()) .all({(x) => (x % 2) == 0 }) false fun ref all( f: {(A!): Bool ?}[A] box) : Bool val Parameters \u00b6 f: {(A!): Bool ?}[A] box Returns \u00b6 Bool val any \u00b6 [Source] Return true if at least one value of the iterator matches the predicate f . This method short-circuits at the first value where the predicate returns true, otherwise false is returned. Examples \u00b6 Iter[I64]([2; 4; 6].values()) .any({(I64) => (x % 2) == 1 }) false Iter[I64]([2; 3; 4].values()) .any({(I64) => (x % 2) == 1 }) true fun ref any( f: {(A!): Bool ?}[A] box) : Bool val Parameters \u00b6 f: {(A!): Bool ?}[A] box Returns \u00b6 Bool val collect[optional B: Seq [A!] ref] \u00b6 [Source] Push each value from the iterator into the collection coll . Example \u00b6 Iter[I64]([1; 2; 3].values()) .collect(Array[I64](3)) [1, 2, 3] fun ref collect[optional B: Seq[A!] ref]( coll: B) : B^ Parameters \u00b6 coll: B Returns \u00b6 B^ count \u00b6 [Source] Return the number of values in the iterator. Example \u00b6 Iter[I64]([1; 2; 3].values()) .count() 3 fun ref count() : USize val Returns \u00b6 USize val cycle \u00b6 [Source] Repeatedly cycle through the values from the iterator. WARNING: The values returned by the original iterator are cached, so the input iterator should be finite. Example \u00b6 Iter[I64]([1; 2; 3].values()) .cycle() 1 2 3 1 2 3 1 2 3 ... fun ref cycle() : Iter[A!] ref^ Returns \u00b6 Iter [A!] ref^ enum[optional B: ( Real [B] val & ( I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))] \u00b6 [Source] An iterator which yields the current iteration count as well as the next value from the iterator. Example \u00b6 Iter[I64]([1; 2; 3].values()) .enum() (0, 1) (1, 2) (2, 3) fun ref enum[optional B: (Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]() : Iter[(B , A)] ref^ Returns \u00b6 Iter [(B , A)] ref^ filter \u00b6 [Source] Return an iterator that only returns items that match the predicate f . Example \u00b6 Iter[I64]([1; 2; 3; 4; 5; 6].values()) .filter({(x) => (x % 2) == 0 }) 2 4 6 fun ref filter( f: {(A!): Bool ?}[A] box) : Iter[A!] ref^ Parameters \u00b6 f: {(A!): Bool ?}[A] box Returns \u00b6 Iter [A!] ref^ find \u00b6 [Source] Return the nth value in the iterator that satisfies the predicate f . Examples \u00b6 Iter[I64]([1; 2; 3].values()) .find({(x) => (x % 2) == 0 }) 2 Iter[I64]([1; 2; 3; 4].values()) .find({(x) => (x % 2) == 0 }, 2) 4 fun ref find( f: {(A!): Bool ?}[A] box, n: USize val = 1) : A! ? Parameters \u00b6 f: {(A!): Bool ?}[A] box n: USize val = 1 Returns \u00b6 A! ? filter_map[B: B] \u00b6 [Source] Return an iterator which applies f to each element. If None is returned, then the iterator will try again by applying f to the next element. Otherwise, the value of type B is returned. Example \u00b6 Iter[I64]([as I64: 1; -2; 4; 7; -5]) .filter_map[USize]( {(i: I64): (USize | None) => if i >= 0 then i.usize() end }) 1 4 7 ```pony fun ref filter_map[B: B]( f: {(A!): (B^ | None) ?}[A, B] box) : Iter[B] ref^ Parameters \u00b6 f: {(A!): (B^ | None) ?}[A, B] box Returns \u00b6 Iter [B] ref^ flat_map[B: B] \u00b6 [Source] Return an iterator over the values of the iterators produced from the application of the given function. Example \u00b6 Iter[String]([\"alpha\"; \"beta\"; \"gamma\"]) .flat_map[U8]({(s: String): Iterator[U8] => s.values() }) a l p h a b e t a g a m m a fun ref flat_map[B: B]( f: {(A!): Iterator[B] ?}[A, B] box) : Iter[B] ref^ Parameters \u00b6 f: {(A!): Iterator[B] ?}[A, B] box Returns \u00b6 Iter [B] ref^ fold[B: B] \u00b6 [Source] Apply a function to every element, producing an accumulated value. Example \u00b6 Iter[I64]([1; 2; 3].values()) .fold[I64](0, {(sum, x) => sum + x }) 6 fun ref fold[B: B]( acc: B, f: {(B, A!): B^}[A, B] box) : B^ Parameters \u00b6 acc: B f: {(B, A!): B^}[A, B] box Returns \u00b6 B^ fold_partial[B: B] \u00b6 [Source] A partial version of fold . fun ref fold_partial[B: B]( acc: B, f: {(B, A!): B^ ?}[A, B] box) : B^ ? Parameters \u00b6 acc: B f: {(B, A!): B^ ?}[A, B] box Returns \u00b6 B^ ? last \u00b6 [Source] Return the last value of the iterator. Example \u00b6 Iter[I64]([1; 2; 3].values()) .last() 3 fun ref last() : A ? Returns \u00b6 A ? map[B: B] \u00b6 [Source] Return an iterator where each item's value is the application of the given function to the value in the original iterator. Example \u00b6 Iter[I64]([1; 2; 3].values()) .map[I64]({(x) => x * x }) 1 4 9 fun ref map[B: B]( f: {(A!): B^ ?}[A, B] box) : Iter[B] ref^ Parameters \u00b6 f: {(A!): B^ ?}[A, B] box Returns \u00b6 Iter [B] ref^ nth \u00b6 [Source] Return the nth value of the iterator. Example \u00b6 Iter[I64]([1; 2; 3].values()) .nth(2) 2 fun ref nth( n: USize val) : A ? Parameters \u00b6 n: USize val Returns \u00b6 A ? run \u00b6 [Source] Iterate through the values of the iterator without a for loop. The function on_error will be called if the iterator's has_next method returns true but its next method throws an error. Example \u00b6 Iter[I64]([1; 2; 3].values()) .map[None]({(x) => env.out.print(x.string()) }) .run() 1 2 3 fun ref run( on_error: {ref()}[A] ref = lambda) : None val Parameters \u00b6 on_error: {ref()}[A] ref = lambda Returns \u00b6 None val skip \u00b6 [Source] Skip the first n values of the iterator. Example \u00b6 Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip(3) 4 5 6 Iter[I64]([1; 2; 3].values()) .skip(3) .has_next() false fun ref skip( n: USize val) : Iter[A] ref^ Parameters \u00b6 n: USize val Returns \u00b6 Iter [A] ref^ skip_while \u00b6 [Source] Skip values of the iterator while the predicate f returns true. Example \u00b6 Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip_while({(x) => x < 4 }) 4 5 6 fun ref skip_while( f: {(A!): Bool ?}[A] box) : Iter[A!] ref^ Parameters \u00b6 f: {(A!): Bool ?}[A] box Returns \u00b6 Iter [A!] ref^ take \u00b6 [Source] Return an iterator for the first n elements. Example \u00b6 Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take(3) 1 2 3 fun ref take( n: USize val) : Iter[A] ref^ Parameters \u00b6 n: USize val Returns \u00b6 Iter [A] ref^ take_while \u00b6 [Source] Return an iterator that returns values while the predicate f returns true. This iterator short-circuits the first time that f returns false or raises an error. Example \u00b6 Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take_while({(x) => x < 4 }) 1 2 3 fun ref take_while( f: {(A!): Bool ?}[A] box) : Iter[A!] ref^ Parameters \u00b6 f: {(A!): Bool ?}[A] box Returns \u00b6 Iter [A!] ref^ zip[B: B] \u00b6 [Source] Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators. Example \u00b6 Iter[I64]([1; 2].values()) .zip[I64]([3; 4].values()) (1, 3) (2, 4) fun ref zip[B: B]( i2: Iterator[B] ref) : Iter[(A , B)] ref^ Parameters \u00b6 i2: Iterator [B] ref Returns \u00b6 Iter [(A , B)] ref^ zip2[B: B, C: C] \u00b6 [Source] Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators. fun ref zip2[B: B, C: C]( i2: Iterator[B] ref, i3: Iterator[C] ref) : Iter[(A , B , C)] ref^ Parameters \u00b6 i2: Iterator [B] ref i3: Iterator [C] ref Returns \u00b6 Iter [(A , B , C)] ref^ zip3[B: B, C: C, D: D] \u00b6 [Source] Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip3[B: B, C: C, D: D]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref) : Iter[(A , B , C , D)] ref^ Parameters \u00b6 i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref Returns \u00b6 Iter [(A , B , C , D)] ref^ zip4[B: B, C: C, D: D, E: E] \u00b6 [Source] Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip4[B: B, C: C, D: D, E: E]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref, i5: Iterator[E] ref) : Iter[(A , B , C , D , E)] ref^ Parameters \u00b6 i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref i5: Iterator [E] ref Returns \u00b6 Iter [(A , B , C , D , E)] ref^","title":"class Iter"},{"location":"itertools-Iter/#iter91a-a93","text":"[Source] Wrapper class containing methods to modify iterators. class ref Iter[A: A] is Iterator[A] ref","title":"Iter[A: A]"},{"location":"itertools-Iter/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"itertools-Iter/#constructors","text":"","title":"Constructors"},{"location":"itertools-Iter/#create","text":"[Source] new ref create( iter: Iterator[A] ref) : Iter[A] ref^","title":"create"},{"location":"itertools-Iter/#parameters","text":"iter: Iterator [A] ref","title":"Parameters"},{"location":"itertools-Iter/#returns","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#chain","text":"[Source] Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on.","title":"chain"},{"location":"itertools-Iter/#example","text":"let xs = [as I64: 1; 2].values() let ys = [as I64: 3; 4].values() Iter[I64].chain([xs; ys].values()) 1 2 3 4 new ref chain( outer_iterator: Iterator[Iterator[A] ref] ref) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_1","text":"outer_iterator: Iterator [ Iterator [A] ref] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_1","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#repeat_value","text":"[Source] Create an iterator that returns the given value forever.","title":"repeat_value"},{"location":"itertools-Iter/#example_1","text":"Iter[U32].repeat_value(7) 7 7 7 7 7 7 7 7 7 ... new ref repeat_value( value: A) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_2","text":"value: A","title":"Parameters"},{"location":"itertools-Iter/#returns_2","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#public-functions","text":"","title":"Public Functions"},{"location":"itertools-Iter/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"itertools-Iter/#returns_3","text":"Bool val","title":"Returns"},{"location":"itertools-Iter/#next","text":"[Source] fun ref next() : A ?","title":"next"},{"location":"itertools-Iter/#returns_4","text":"A ?","title":"Returns"},{"location":"itertools-Iter/#map_stateful91b-b93","text":"[Source] Allows stateful transformation of each element from the iterator, similar to map . fun ref map_stateful[B: B]( f: {ref(A!): B^ ?}[A, B] ref) : Iter[B] ref^","title":"map_stateful[B: B]"},{"location":"itertools-Iter/#parameters_3","text":"f: {ref(A!): B^ ?}[A, B] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_5","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#filter_stateful","text":"[Source] Allows filtering of elements based on a stateful adapter, similar to filter . fun ref filter_stateful( f: {ref(A!): Bool ?}[A] ref) : Iter[A!] ref^","title":"filter_stateful"},{"location":"itertools-Iter/#parameters_4","text":"f: {ref(A!): Bool ?}[A] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_6","text":"Iter [A!] ref^","title":"Returns"},{"location":"itertools-Iter/#filter_map_stateful91b-b93","text":"[Source] Allows stateful modification to the stream of elements from an iterator, similar to filter_map . fun ref filter_map_stateful[B: B]( f: {ref(A!): (B^ | None) ?}[A, B] ref) : Iter[B] ref^","title":"filter_map_stateful[B: B]"},{"location":"itertools-Iter/#parameters_5","text":"f: {ref(A!): (B^ | None) ?}[A, B] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_7","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#all","text":"[Source] Return false if at least one value of the iterator fails to match the predicate f . This method short-circuits at the first value where the predicate returns false, otherwise true is returned.","title":"all"},{"location":"itertools-Iter/#examples","text":"Iter[I64]([2; 4; 6].values()) .all({(x) => (x % 2) == 0 }) true Iter[I64]([2; 3; 4].values()) .all({(x) => (x % 2) == 0 }) false fun ref all( f: {(A!): Bool ?}[A] box) : Bool val","title":"Examples"},{"location":"itertools-Iter/#parameters_6","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_8","text":"Bool val","title":"Returns"},{"location":"itertools-Iter/#any","text":"[Source] Return true if at least one value of the iterator matches the predicate f . This method short-circuits at the first value where the predicate returns true, otherwise false is returned.","title":"any"},{"location":"itertools-Iter/#examples_1","text":"Iter[I64]([2; 4; 6].values()) .any({(I64) => (x % 2) == 1 }) false Iter[I64]([2; 3; 4].values()) .any({(I64) => (x % 2) == 1 }) true fun ref any( f: {(A!): Bool ?}[A] box) : Bool val","title":"Examples"},{"location":"itertools-Iter/#parameters_7","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_9","text":"Bool val","title":"Returns"},{"location":"itertools-Iter/#collect91optional-b-seq91a93-ref93","text":"[Source] Push each value from the iterator into the collection coll .","title":"collect[optional B: Seq[A!] ref]"},{"location":"itertools-Iter/#example_2","text":"Iter[I64]([1; 2; 3].values()) .collect(Array[I64](3)) [1, 2, 3] fun ref collect[optional B: Seq[A!] ref]( coll: B) : B^","title":"Example"},{"location":"itertools-Iter/#parameters_8","text":"coll: B","title":"Parameters"},{"location":"itertools-Iter/#returns_10","text":"B^","title":"Returns"},{"location":"itertools-Iter/#count","text":"[Source] Return the number of values in the iterator.","title":"count"},{"location":"itertools-Iter/#example_3","text":"Iter[I64]([1; 2; 3].values()) .count() 3 fun ref count() : USize val","title":"Example"},{"location":"itertools-Iter/#returns_11","text":"USize val","title":"Returns"},{"location":"itertools-Iter/#cycle","text":"[Source] Repeatedly cycle through the values from the iterator. WARNING: The values returned by the original iterator are cached, so the input iterator should be finite.","title":"cycle"},{"location":"itertools-Iter/#example_4","text":"Iter[I64]([1; 2; 3].values()) .cycle() 1 2 3 1 2 3 1 2 3 ... fun ref cycle() : Iter[A!] ref^","title":"Example"},{"location":"itertools-Iter/#returns_12","text":"Iter [A!] ref^","title":"Returns"},{"location":"itertools-Iter/#enum91optional-b-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93","text":"[Source] An iterator which yields the current iteration count as well as the next value from the iterator.","title":"enum[optional B: (Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"},{"location":"itertools-Iter/#example_5","text":"Iter[I64]([1; 2; 3].values()) .enum() (0, 1) (1, 2) (2, 3) fun ref enum[optional B: (Real[B] val & (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]() : Iter[(B , A)] ref^","title":"Example"},{"location":"itertools-Iter/#returns_13","text":"Iter [(B , A)] ref^","title":"Returns"},{"location":"itertools-Iter/#filter","text":"[Source] Return an iterator that only returns items that match the predicate f .","title":"filter"},{"location":"itertools-Iter/#example_6","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .filter({(x) => (x % 2) == 0 }) 2 4 6 fun ref filter( f: {(A!): Bool ?}[A] box) : Iter[A!] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_9","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_14","text":"Iter [A!] ref^","title":"Returns"},{"location":"itertools-Iter/#find","text":"[Source] Return the nth value in the iterator that satisfies the predicate f .","title":"find"},{"location":"itertools-Iter/#examples_2","text":"Iter[I64]([1; 2; 3].values()) .find({(x) => (x % 2) == 0 }) 2 Iter[I64]([1; 2; 3; 4].values()) .find({(x) => (x % 2) == 0 }, 2) 4 fun ref find( f: {(A!): Bool ?}[A] box, n: USize val = 1) : A! ?","title":"Examples"},{"location":"itertools-Iter/#parameters_10","text":"f: {(A!): Bool ?}[A] box n: USize val = 1","title":"Parameters"},{"location":"itertools-Iter/#returns_15","text":"A! ?","title":"Returns"},{"location":"itertools-Iter/#filter_map91b-b93","text":"[Source] Return an iterator which applies f to each element. If None is returned, then the iterator will try again by applying f to the next element. Otherwise, the value of type B is returned.","title":"filter_map[B: B]"},{"location":"itertools-Iter/#example_7","text":"Iter[I64]([as I64: 1; -2; 4; 7; -5]) .filter_map[USize]( {(i: I64): (USize | None) => if i >= 0 then i.usize() end }) 1 4 7 ```pony fun ref filter_map[B: B]( f: {(A!): (B^ | None) ?}[A, B] box) : Iter[B] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_11","text":"f: {(A!): (B^ | None) ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_16","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#flat_map91b-b93","text":"[Source] Return an iterator over the values of the iterators produced from the application of the given function.","title":"flat_map[B: B]"},{"location":"itertools-Iter/#example_8","text":"Iter[String]([\"alpha\"; \"beta\"; \"gamma\"]) .flat_map[U8]({(s: String): Iterator[U8] => s.values() }) a l p h a b e t a g a m m a fun ref flat_map[B: B]( f: {(A!): Iterator[B] ?}[A, B] box) : Iter[B] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_12","text":"f: {(A!): Iterator[B] ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_17","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#fold91b-b93","text":"[Source] Apply a function to every element, producing an accumulated value.","title":"fold[B: B]"},{"location":"itertools-Iter/#example_9","text":"Iter[I64]([1; 2; 3].values()) .fold[I64](0, {(sum, x) => sum + x }) 6 fun ref fold[B: B]( acc: B, f: {(B, A!): B^}[A, B] box) : B^","title":"Example"},{"location":"itertools-Iter/#parameters_13","text":"acc: B f: {(B, A!): B^}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_18","text":"B^","title":"Returns"},{"location":"itertools-Iter/#fold_partial91b-b93","text":"[Source] A partial version of fold . fun ref fold_partial[B: B]( acc: B, f: {(B, A!): B^ ?}[A, B] box) : B^ ?","title":"fold_partial[B: B]"},{"location":"itertools-Iter/#parameters_14","text":"acc: B f: {(B, A!): B^ ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_19","text":"B^ ?","title":"Returns"},{"location":"itertools-Iter/#last","text":"[Source] Return the last value of the iterator.","title":"last"},{"location":"itertools-Iter/#example_10","text":"Iter[I64]([1; 2; 3].values()) .last() 3 fun ref last() : A ?","title":"Example"},{"location":"itertools-Iter/#returns_20","text":"A ?","title":"Returns"},{"location":"itertools-Iter/#map91b-b93","text":"[Source] Return an iterator where each item's value is the application of the given function to the value in the original iterator.","title":"map[B: B]"},{"location":"itertools-Iter/#example_11","text":"Iter[I64]([1; 2; 3].values()) .map[I64]({(x) => x * x }) 1 4 9 fun ref map[B: B]( f: {(A!): B^ ?}[A, B] box) : Iter[B] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_15","text":"f: {(A!): B^ ?}[A, B] box","title":"Parameters"},{"location":"itertools-Iter/#returns_21","text":"Iter [B] ref^","title":"Returns"},{"location":"itertools-Iter/#nth","text":"[Source] Return the nth value of the iterator.","title":"nth"},{"location":"itertools-Iter/#example_12","text":"Iter[I64]([1; 2; 3].values()) .nth(2) 2 fun ref nth( n: USize val) : A ?","title":"Example"},{"location":"itertools-Iter/#parameters_16","text":"n: USize val","title":"Parameters"},{"location":"itertools-Iter/#returns_22","text":"A ?","title":"Returns"},{"location":"itertools-Iter/#run","text":"[Source] Iterate through the values of the iterator without a for loop. The function on_error will be called if the iterator's has_next method returns true but its next method throws an error.","title":"run"},{"location":"itertools-Iter/#example_13","text":"Iter[I64]([1; 2; 3].values()) .map[None]({(x) => env.out.print(x.string()) }) .run() 1 2 3 fun ref run( on_error: {ref()}[A] ref = lambda) : None val","title":"Example"},{"location":"itertools-Iter/#parameters_17","text":"on_error: {ref()}[A] ref = lambda","title":"Parameters"},{"location":"itertools-Iter/#returns_23","text":"None val","title":"Returns"},{"location":"itertools-Iter/#skip","text":"[Source] Skip the first n values of the iterator.","title":"skip"},{"location":"itertools-Iter/#example_14","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip(3) 4 5 6 Iter[I64]([1; 2; 3].values()) .skip(3) .has_next() false fun ref skip( n: USize val) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_18","text":"n: USize val","title":"Parameters"},{"location":"itertools-Iter/#returns_24","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#skip_while","text":"[Source] Skip values of the iterator while the predicate f returns true.","title":"skip_while"},{"location":"itertools-Iter/#example_15","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip_while({(x) => x < 4 }) 4 5 6 fun ref skip_while( f: {(A!): Bool ?}[A] box) : Iter[A!] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_19","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_25","text":"Iter [A!] ref^","title":"Returns"},{"location":"itertools-Iter/#take","text":"[Source] Return an iterator for the first n elements.","title":"take"},{"location":"itertools-Iter/#example_16","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take(3) 1 2 3 fun ref take( n: USize val) : Iter[A] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_20","text":"n: USize val","title":"Parameters"},{"location":"itertools-Iter/#returns_26","text":"Iter [A] ref^","title":"Returns"},{"location":"itertools-Iter/#take_while","text":"[Source] Return an iterator that returns values while the predicate f returns true. This iterator short-circuits the first time that f returns false or raises an error.","title":"take_while"},{"location":"itertools-Iter/#example_17","text":"Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take_while({(x) => x < 4 }) 1 2 3 fun ref take_while( f: {(A!): Bool ?}[A] box) : Iter[A!] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_21","text":"f: {(A!): Bool ?}[A] box","title":"Parameters"},{"location":"itertools-Iter/#returns_27","text":"Iter [A!] ref^","title":"Returns"},{"location":"itertools-Iter/#zip91b-b93","text":"[Source] Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators.","title":"zip[B: B]"},{"location":"itertools-Iter/#example_18","text":"Iter[I64]([1; 2].values()) .zip[I64]([3; 4].values()) (1, 3) (2, 4) fun ref zip[B: B]( i2: Iterator[B] ref) : Iter[(A , B)] ref^","title":"Example"},{"location":"itertools-Iter/#parameters_22","text":"i2: Iterator [B] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_28","text":"Iter [(A , B)] ref^","title":"Returns"},{"location":"itertools-Iter/#zip291b-b-c-c93","text":"[Source] Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators. fun ref zip2[B: B, C: C]( i2: Iterator[B] ref, i3: Iterator[C] ref) : Iter[(A , B , C)] ref^","title":"zip2[B: B, C: C]"},{"location":"itertools-Iter/#parameters_23","text":"i2: Iterator [B] ref i3: Iterator [C] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_29","text":"Iter [(A , B , C)] ref^","title":"Returns"},{"location":"itertools-Iter/#zip391b-b-c-c-d-d93","text":"[Source] Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip3[B: B, C: C, D: D]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref) : Iter[(A , B , C , D)] ref^","title":"zip3[B: B, C: C, D: D]"},{"location":"itertools-Iter/#parameters_24","text":"i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_30","text":"Iter [(A , B , C , D)] ref^","title":"Returns"},{"location":"itertools-Iter/#zip491b-b-c-c-d-d-e-e93","text":"[Source] Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. fun ref zip4[B: B, C: C, D: D, E: E]( i2: Iterator[B] ref, i3: Iterator[C] ref, i4: Iterator[D] ref, i5: Iterator[E] ref) : Iter[(A , B , C , D , E)] ref^","title":"zip4[B: B, C: C, D: D, E: E]"},{"location":"itertools-Iter/#parameters_25","text":"i2: Iterator [B] ref i3: Iterator [C] ref i4: Iterator [D] ref i5: Iterator [E] ref","title":"Parameters"},{"location":"itertools-Iter/#returns_31","text":"Iter [(A , B , C , D , E)] ref^","title":"Returns"},{"location":"itertools-_EmptyIter/","text":"_EmptyIter[A: A] \u00b6 [Source] class ref _EmptyIter[A: A] Constructors \u00b6 create \u00b6 [Source] new iso create() : _EmptyIter[A] iso^ Returns \u00b6 _EmptyIter [A] iso^ Public Functions \u00b6 has_next \u00b6 [Source] fun ref has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A ? Returns \u00b6 A ?","title":"class _EmptyIter"},{"location":"itertools-_EmptyIter/#_emptyiter91a-a93","text":"[Source] class ref _EmptyIter[A: A]","title":"_EmptyIter[A: A]"},{"location":"itertools-_EmptyIter/#constructors","text":"","title":"Constructors"},{"location":"itertools-_EmptyIter/#create","text":"[Source] new iso create() : _EmptyIter[A] iso^","title":"create"},{"location":"itertools-_EmptyIter/#returns","text":"_EmptyIter [A] iso^","title":"Returns"},{"location":"itertools-_EmptyIter/#public-functions","text":"","title":"Public Functions"},{"location":"itertools-_EmptyIter/#has_next","text":"[Source] fun ref has_next() : Bool val","title":"has_next"},{"location":"itertools-_EmptyIter/#returns_1","text":"Bool val","title":"Returns"},{"location":"itertools-_EmptyIter/#next","text":"[Source] fun ref next() : A ?","title":"next"},{"location":"itertools-_EmptyIter/#returns_2","text":"A ?","title":"Returns"},{"location":"itertools-_None/","text":"_None \u00b6 [Source] primitive val _None Constructors \u00b6 create \u00b6 [Source] new val create() : _None val^ Returns \u00b6 _None val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _None val) : Bool val Parameters \u00b6 that: _None val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _None val) : Bool val Parameters \u00b6 that: _None val Returns \u00b6 Bool val","title":"primitive _None"},{"location":"itertools-_None/#_none","text":"[Source] primitive val _None","title":"_None"},{"location":"itertools-_None/#constructors","text":"","title":"Constructors"},{"location":"itertools-_None/#create","text":"[Source] new val create() : _None val^","title":"create"},{"location":"itertools-_None/#returns","text":"_None val^","title":"Returns"},{"location":"itertools-_None/#public-functions","text":"","title":"Public Functions"},{"location":"itertools-_None/#eq","text":"[Source] fun box eq( that: _None val) : Bool val","title":"eq"},{"location":"itertools-_None/#parameters","text":"that: _None val","title":"Parameters"},{"location":"itertools-_None/#returns_1","text":"Bool val","title":"Returns"},{"location":"itertools-_None/#ne","text":"[Source] fun box ne( that: _None val) : Bool val","title":"ne"},{"location":"itertools-_None/#parameters_1","text":"that: _None val","title":"Parameters"},{"location":"itertools-_None/#returns_2","text":"Bool val","title":"Returns"},{"location":"json--index/","text":"JSON Package \u00b6 The json package provides the JsonDoc class both as a container for a JSON document and as means of parsing from and writing to String . JSON Representation \u00b6 JSON is represented in Pony as the following types: object - JsonObject array - JsonArray string - String integer - I64 float - F64 boolean - Bool null - None The collection types JsonObject and JsonArray can contain any other JSON structures arbitrarily nested. JsonType is used to subsume all possible JSON types. It can also be used to describe everything that can be serialized using this package. Parsing JSON \u00b6 For getting JSON from a String into proper Pony data structures, JsonDoc.parse needs to be used. This will populate the public field JsonDoc.data , which is None , if parse has not been called yet. Every call to parse overwrites the data field, so one JsonDoc instance can be used to parse multiple JSON Strings one by one. let doc = JsonDoc // parsing doc.parse(\"{\\\"key\\\":\\\"value\\\", \\\"property\\\": true, \\\"array\\\":[1, 2.5, false]}\")? // extracting values from a JSON structure let json: JsonObject = doc.data as JsonObject let key: String = json.data(\"key\")? as String let property: Bool = json.data(\"property\")? as Bool let array: JsonArray = json.data(\"array\")? as JsonArray let first: I64 = array.data(0)? as I64 let second: F64 = array.data(1)? as F64 let last: Bool = array.data(2)? as Bool Sending JSON \u00b6 JsonDoc has the ref reference capability, which means it is not sendable by default. If you need to send it to another actor you need to recover it to a sendable reference capability (either val or iso ). For the sake of simplicity it is recommended to do the parsing already in the recover block: // sending an iso doc let json_string = \"{\\\"array\\\":[1, true, null]}\" let sendable_doc: JsonDoc iso = recover iso JsonDoc.>parse(json_string)? end some_actor.send(consume sendable_doc) // sending a val doc let val_doc: JsonDoc val = recover val JsonDoc.>parse(json_string)? end some_actor.send_val(val_doc) When sending an iso JsonDoc it is important to recover it to a ref on the receiving side in order to be able to properly access the json structures in data . Writing JSON \u00b6 JSON is written using the JsonDoc.string method. This will serialize the contents of the data field to String . // building up the JSON data structure let doc = JsonDoc let obj = JsonObject obj.data(\"key\") = \"value\" obj.data(\"property\") = true obj.data(\"array\") = JsonArray.from_array([ as JsonType: I64(1); F64(2.5); false]) doc.data = obj // writing to String env.out.print( doc.string(where indent=\" \", pretty_print=true) ) Public Types \u00b6 type JsonType class JsonArray class JsonObject class JsonDoc Private Types \u00b6 primitive _JsonPrint","title":"Package"},{"location":"json--index/#json-package","text":"The json package provides the JsonDoc class both as a container for a JSON document and as means of parsing from and writing to String .","title":"JSON Package"},{"location":"json--index/#json-representation","text":"JSON is represented in Pony as the following types: object - JsonObject array - JsonArray string - String integer - I64 float - F64 boolean - Bool null - None The collection types JsonObject and JsonArray can contain any other JSON structures arbitrarily nested. JsonType is used to subsume all possible JSON types. It can also be used to describe everything that can be serialized using this package.","title":"JSON Representation"},{"location":"json--index/#parsing-json","text":"For getting JSON from a String into proper Pony data structures, JsonDoc.parse needs to be used. This will populate the public field JsonDoc.data , which is None , if parse has not been called yet. Every call to parse overwrites the data field, so one JsonDoc instance can be used to parse multiple JSON Strings one by one. let doc = JsonDoc // parsing doc.parse(\"{\\\"key\\\":\\\"value\\\", \\\"property\\\": true, \\\"array\\\":[1, 2.5, false]}\")? // extracting values from a JSON structure let json: JsonObject = doc.data as JsonObject let key: String = json.data(\"key\")? as String let property: Bool = json.data(\"property\")? as Bool let array: JsonArray = json.data(\"array\")? as JsonArray let first: I64 = array.data(0)? as I64 let second: F64 = array.data(1)? as F64 let last: Bool = array.data(2)? as Bool","title":"Parsing JSON"},{"location":"json--index/#sending-json","text":"JsonDoc has the ref reference capability, which means it is not sendable by default. If you need to send it to another actor you need to recover it to a sendable reference capability (either val or iso ). For the sake of simplicity it is recommended to do the parsing already in the recover block: // sending an iso doc let json_string = \"{\\\"array\\\":[1, true, null]}\" let sendable_doc: JsonDoc iso = recover iso JsonDoc.>parse(json_string)? end some_actor.send(consume sendable_doc) // sending a val doc let val_doc: JsonDoc val = recover val JsonDoc.>parse(json_string)? end some_actor.send_val(val_doc) When sending an iso JsonDoc it is important to recover it to a ref on the receiving side in order to be able to properly access the json structures in data .","title":"Sending JSON"},{"location":"json--index/#writing-json","text":"JSON is written using the JsonDoc.string method. This will serialize the contents of the data field to String . // building up the JSON data structure let doc = JsonDoc let obj = JsonObject obj.data(\"key\") = \"value\" obj.data(\"property\") = true obj.data(\"array\") = JsonArray.from_array([ as JsonType: I64(1); F64(2.5); false]) doc.data = obj // writing to String env.out.print( doc.string(where indent=\" \", pretty_print=true) )","title":"Writing JSON"},{"location":"json--index/#public-types","text":"type JsonType class JsonArray class JsonObject class JsonDoc","title":"Public Types"},{"location":"json--index/#private-types","text":"primitive _JsonPrint","title":"Private Types"},{"location":"json-JsonArray/","text":"JsonArray \u00b6 [Source] class ref JsonArray Constructors \u00b6 create \u00b6 [Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : JsonArray ref^ Parameters \u00b6 len: USize val = 0 Returns \u00b6 JsonArray ref^ from_array \u00b6 [Source] Create a Json array from an actual array. new ref from_array( data': Array[(F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref) : JsonArray ref^ Parameters \u00b6 data': Array [( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref Returns \u00b6 JsonArray ref^ Public fields \u00b6 var data: Array [( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref \u00b6 [Source] The actual array containing JSON structures. Public Functions \u00b6 string \u00b6 [Source] Generate string representation of this array. fun box string( indent: String val = \"\", pretty_print: Bool val = false) : String val Parameters \u00b6 indent: String val = \"\" pretty_print: Bool val = false Returns \u00b6 String val Private Functions \u00b6 _show \u00b6 [Source] Append the string representation of this array to the provided String. fun box _show( buf': String iso, indent: String val = \"\", level: USize val, pretty: Bool val) : String iso^ Parameters \u00b6 buf': String iso indent: String val = \"\" level: USize val pretty: Bool val Returns \u00b6 String iso^","title":"class JsonArray"},{"location":"json-JsonArray/#jsonarray","text":"[Source] class ref JsonArray","title":"JsonArray"},{"location":"json-JsonArray/#constructors","text":"","title":"Constructors"},{"location":"json-JsonArray/#create","text":"[Source] Create an array with zero elements, but space for len elements. new ref create( len: USize val = 0) : JsonArray ref^","title":"create"},{"location":"json-JsonArray/#parameters","text":"len: USize val = 0","title":"Parameters"},{"location":"json-JsonArray/#returns","text":"JsonArray ref^","title":"Returns"},{"location":"json-JsonArray/#from_array","text":"[Source] Create a Json array from an actual array. new ref from_array( data': Array[(F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref) : JsonArray ref^","title":"from_array"},{"location":"json-JsonArray/#parameters_1","text":"data': Array [( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref","title":"Parameters"},{"location":"json-JsonArray/#returns_1","text":"JsonArray ref^","title":"Returns"},{"location":"json-JsonArray/#public-fields","text":"","title":"Public fields"},{"location":"json-JsonArray/#var-data-array91f64-val-i64-val-bool-val-none-val-string-val-jsonarray-ref-jsonobject-ref93-ref","text":"[Source] The actual array containing JSON structures.","title":"var data: Array[(F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref"},{"location":"json-JsonArray/#public-functions","text":"","title":"Public Functions"},{"location":"json-JsonArray/#string","text":"[Source] Generate string representation of this array. fun box string( indent: String val = \"\", pretty_print: Bool val = false) : String val","title":"string"},{"location":"json-JsonArray/#parameters_2","text":"indent: String val = \"\" pretty_print: Bool val = false","title":"Parameters"},{"location":"json-JsonArray/#returns_2","text":"String val","title":"Returns"},{"location":"json-JsonArray/#private-functions","text":"","title":"Private Functions"},{"location":"json-JsonArray/#_show","text":"[Source] Append the string representation of this array to the provided String. fun box _show( buf': String iso, indent: String val = \"\", level: USize val, pretty: Bool val) : String iso^","title":"_show"},{"location":"json-JsonArray/#parameters_3","text":"buf': String iso indent: String val = \"\" level: USize val pretty: Bool val","title":"Parameters"},{"location":"json-JsonArray/#returns_3","text":"String iso^","title":"Returns"},{"location":"json-JsonDoc/","text":"JsonDoc \u00b6 [Source] Top level JSON type containing an entire document. A JSON document consists of exactly 1 value. class ref JsonDoc Constructors \u00b6 create \u00b6 [Source] Default constructor building a document containing a single null. new ref create() : JsonDoc ref^ Returns \u00b6 JsonDoc ref^ Public fields \u00b6 var data: ( F64 val | I64 val | Bool val | \u00b6 [None](builtin-None.md) val | [String](builtin-String.md) val | [JsonArray](json-JsonArray.md) ref | [JsonObject](json-JsonObject.md) ref) [Source] The parsed JSON structure. Will be a None if parse(source: String) has not been called yet. Public Functions \u00b6 string \u00b6 [Source] Generate string representation of this document. fun box string( indent: String val = \"\", pretty_print: Bool val = false) : String val Parameters \u00b6 indent: String val = \"\" pretty_print: Bool val = false Returns \u00b6 String val parse \u00b6 [Source] Parse the given string as a JSON file, building a document. Raise error on invalid JSON in given source. fun ref parse( source: String val) : None val ? Parameters \u00b6 source: String val Returns \u00b6 None val ? parse_report \u00b6 [Source] Give details of the error that occurred last time we attempted to parse. If parse was successful returns (0, \"\"). fun box parse_report() : (USize val , String val) Returns \u00b6 ( USize val , String val) Private Functions \u00b6 _parse_value \u00b6 [Source] Parse a single JSON value of any type, which MUST be present. Raise error on invalid or missing value. fun ref _parse_value( context: String val) : (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref) ? Parameters \u00b6 context: String val Returns \u00b6 ( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref) ? _parse_keyword \u00b6 [Source] Parse a keyword, the first letter of which has already been peeked. fun ref _parse_keyword() : (Bool val | None val) ? Returns \u00b6 ( Bool val | None val) ? _parse_number \u00b6 [Source] Parse a number, the leading character of which has already been peeked. fun ref _parse_number() : (F64 val | I64 val) ? Returns \u00b6 ( F64 val | I64 val) ? _parse_decimal \u00b6 [Source] Parse a decimal integer which must appear immediately in the source. fun ref _parse_decimal() : (I64 val , U8 val) ? Returns \u00b6 ( I64 val , U8 val) ? _parse_object \u00b6 [Source] Parse a JSON object, the leading { of which has already been peeked. fun ref _parse_object() : JsonObject ref ? Returns \u00b6 JsonObject ref ? _parse_array \u00b6 [Source] Parse an array, the leading [ of which has already been peeked. fun ref _parse_array() : JsonArray ref ? Returns \u00b6 JsonArray ref ? _parse_string \u00b6 [Source] Parse a string, which must be the next thing found, other than whitesapce. fun ref _parse_string( context: String val) : String val ? Parameters \u00b6 context: String val Returns \u00b6 String val ? _parse_escape \u00b6 [Source] Process a string escape sequence, the leading \\ of which has already been consumed. fun ref _parse_escape() : String val ? Returns \u00b6 String val ? _parse_unicode_escape \u00b6 [Source] Process a Unicode escape sequence, the leading \\u of which has already been consumed. fun ref _parse_unicode_escape() : String val ? Returns \u00b6 String val ? _parse_unicode_digits \u00b6 [Source] Parse the hex digits of a Unicode escape sequence, the leading \\u of which has already been consumed, and return the encoded character value. fun ref _parse_unicode_digits() : U32 val ? Returns \u00b6 U32 val ? _dump_whitespace \u00b6 [Source] Dump all whitespace at the current read location in source, if any. fun ref _dump_whitespace() : None val Returns \u00b6 None val _peek_char \u00b6 [Source] Peek the next char in the source, without consuming it. If an eof_context is given then an error is thrown on eof, setting a suitable message. If eof_context is None then 0 is returned on EOF. It up to the caller to handle this appropriately. fun ref _peek_char( eof_context: (String val | None val) = reference) : U8 val ? Parameters \u00b6 eof_context: ( String val | None val) = reference Returns \u00b6 U8 val ? _get_char \u00b6 [Source] Get and consume the next char in the source. If an eof_context is given then an error is thrown on eof, setting a suitable message. If eof_context is None then 0 is returned on EOF. It up to the caller to handle this appropriately. fun ref _get_char( eof_context: (String val | None val) = reference) : U8 val ? Parameters \u00b6 eof_context: ( String val | None val) = reference Returns \u00b6 U8 val ? _last_char \u00b6 [Source] Get the last character peeked or got from the source as a String. For use generating error messages. fun ref _last_char() : String val Returns \u00b6 String val _error \u00b6 [Source] Record an error with the given message. fun ref _error( msg: String val) : None val Parameters \u00b6 msg: String val Returns \u00b6 None val","title":"class JsonDoc"},{"location":"json-JsonDoc/#jsondoc","text":"[Source] Top level JSON type containing an entire document. A JSON document consists of exactly 1 value. class ref JsonDoc","title":"JsonDoc"},{"location":"json-JsonDoc/#constructors","text":"","title":"Constructors"},{"location":"json-JsonDoc/#create","text":"[Source] Default constructor building a document containing a single null. new ref create() : JsonDoc ref^","title":"create"},{"location":"json-JsonDoc/#returns","text":"JsonDoc ref^","title":"Returns"},{"location":"json-JsonDoc/#public-fields","text":"","title":"Public fields"},{"location":"json-JsonDoc/#var-data-f64-val-i64-val-bool-val","text":"[None](builtin-None.md) val | [String](builtin-String.md) val | [JsonArray](json-JsonArray.md) ref | [JsonObject](json-JsonObject.md) ref) [Source] The parsed JSON structure. Will be a None if parse(source: String) has not been called yet.","title":"var data: (F64 val | I64 val | Bool val |"},{"location":"json-JsonDoc/#public-functions","text":"","title":"Public Functions"},{"location":"json-JsonDoc/#string","text":"[Source] Generate string representation of this document. fun box string( indent: String val = \"\", pretty_print: Bool val = false) : String val","title":"string"},{"location":"json-JsonDoc/#parameters","text":"indent: String val = \"\" pretty_print: Bool val = false","title":"Parameters"},{"location":"json-JsonDoc/#returns_1","text":"String val","title":"Returns"},{"location":"json-JsonDoc/#parse","text":"[Source] Parse the given string as a JSON file, building a document. Raise error on invalid JSON in given source. fun ref parse( source: String val) : None val ?","title":"parse"},{"location":"json-JsonDoc/#parameters_1","text":"source: String val","title":"Parameters"},{"location":"json-JsonDoc/#returns_2","text":"None val ?","title":"Returns"},{"location":"json-JsonDoc/#parse_report","text":"[Source] Give details of the error that occurred last time we attempted to parse. If parse was successful returns (0, \"\"). fun box parse_report() : (USize val , String val)","title":"parse_report"},{"location":"json-JsonDoc/#returns_3","text":"( USize val , String val)","title":"Returns"},{"location":"json-JsonDoc/#private-functions","text":"","title":"Private Functions"},{"location":"json-JsonDoc/#_parse_value","text":"[Source] Parse a single JSON value of any type, which MUST be present. Raise error on invalid or missing value. fun ref _parse_value( context: String val) : (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref) ?","title":"_parse_value"},{"location":"json-JsonDoc/#parameters_2","text":"context: String val","title":"Parameters"},{"location":"json-JsonDoc/#returns_4","text":"( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref) ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_keyword","text":"[Source] Parse a keyword, the first letter of which has already been peeked. fun ref _parse_keyword() : (Bool val | None val) ?","title":"_parse_keyword"},{"location":"json-JsonDoc/#returns_5","text":"( Bool val | None val) ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_number","text":"[Source] Parse a number, the leading character of which has already been peeked. fun ref _parse_number() : (F64 val | I64 val) ?","title":"_parse_number"},{"location":"json-JsonDoc/#returns_6","text":"( F64 val | I64 val) ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_decimal","text":"[Source] Parse a decimal integer which must appear immediately in the source. fun ref _parse_decimal() : (I64 val , U8 val) ?","title":"_parse_decimal"},{"location":"json-JsonDoc/#returns_7","text":"( I64 val , U8 val) ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_object","text":"[Source] Parse a JSON object, the leading { of which has already been peeked. fun ref _parse_object() : JsonObject ref ?","title":"_parse_object"},{"location":"json-JsonDoc/#returns_8","text":"JsonObject ref ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_array","text":"[Source] Parse an array, the leading [ of which has already been peeked. fun ref _parse_array() : JsonArray ref ?","title":"_parse_array"},{"location":"json-JsonDoc/#returns_9","text":"JsonArray ref ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_string","text":"[Source] Parse a string, which must be the next thing found, other than whitesapce. fun ref _parse_string( context: String val) : String val ?","title":"_parse_string"},{"location":"json-JsonDoc/#parameters_3","text":"context: String val","title":"Parameters"},{"location":"json-JsonDoc/#returns_10","text":"String val ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_escape","text":"[Source] Process a string escape sequence, the leading \\ of which has already been consumed. fun ref _parse_escape() : String val ?","title":"_parse_escape"},{"location":"json-JsonDoc/#returns_11","text":"String val ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_unicode_escape","text":"[Source] Process a Unicode escape sequence, the leading \\u of which has already been consumed. fun ref _parse_unicode_escape() : String val ?","title":"_parse_unicode_escape"},{"location":"json-JsonDoc/#returns_12","text":"String val ?","title":"Returns"},{"location":"json-JsonDoc/#_parse_unicode_digits","text":"[Source] Parse the hex digits of a Unicode escape sequence, the leading \\u of which has already been consumed, and return the encoded character value. fun ref _parse_unicode_digits() : U32 val ?","title":"_parse_unicode_digits"},{"location":"json-JsonDoc/#returns_13","text":"U32 val ?","title":"Returns"},{"location":"json-JsonDoc/#_dump_whitespace","text":"[Source] Dump all whitespace at the current read location in source, if any. fun ref _dump_whitespace() : None val","title":"_dump_whitespace"},{"location":"json-JsonDoc/#returns_14","text":"None val","title":"Returns"},{"location":"json-JsonDoc/#_peek_char","text":"[Source] Peek the next char in the source, without consuming it. If an eof_context is given then an error is thrown on eof, setting a suitable message. If eof_context is None then 0 is returned on EOF. It up to the caller to handle this appropriately. fun ref _peek_char( eof_context: (String val | None val) = reference) : U8 val ?","title":"_peek_char"},{"location":"json-JsonDoc/#parameters_4","text":"eof_context: ( String val | None val) = reference","title":"Parameters"},{"location":"json-JsonDoc/#returns_15","text":"U8 val ?","title":"Returns"},{"location":"json-JsonDoc/#_get_char","text":"[Source] Get and consume the next char in the source. If an eof_context is given then an error is thrown on eof, setting a suitable message. If eof_context is None then 0 is returned on EOF. It up to the caller to handle this appropriately. fun ref _get_char( eof_context: (String val | None val) = reference) : U8 val ?","title":"_get_char"},{"location":"json-JsonDoc/#parameters_5","text":"eof_context: ( String val | None val) = reference","title":"Parameters"},{"location":"json-JsonDoc/#returns_16","text":"U8 val ?","title":"Returns"},{"location":"json-JsonDoc/#_last_char","text":"[Source] Get the last character peeked or got from the source as a String. For use generating error messages. fun ref _last_char() : String val","title":"_last_char"},{"location":"json-JsonDoc/#returns_17","text":"String val","title":"Returns"},{"location":"json-JsonDoc/#_error","text":"[Source] Record an error with the given message. fun ref _error( msg: String val) : None val","title":"_error"},{"location":"json-JsonDoc/#parameters_6","text":"msg: String val","title":"Parameters"},{"location":"json-JsonDoc/#returns_18","text":"None val","title":"Returns"},{"location":"json-JsonObject/","text":"JsonObject \u00b6 [Source] class ref JsonObject Constructors \u00b6 create \u00b6 [Source] Create a map with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = 6) : JsonObject ref^ Parameters \u00b6 prealloc: USize val = 6 Returns \u00b6 JsonObject ref^ from_map \u00b6 [Source] Create a Json object from a map. new ref from_map( data': HashMap[String val, (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq[String val] val] ref) : JsonObject ref^ Parameters \u00b6 data': HashMap [ String val, ( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq [ String val] val] ref Returns \u00b6 JsonObject ref^ Public fields \u00b6 var data: HashMap [ String val, ( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq [ String val] val] ref \u00b6 [Source] The actual JSON object structure, mapping String keys to other JSON structures. Public Functions \u00b6 string \u00b6 [Source] Generate string representation of this object. fun box string( indent: String val = \"\", pretty_print: Bool val = false) : String val Parameters \u00b6 indent: String val = \"\" pretty_print: Bool val = false Returns \u00b6 String val Private Functions \u00b6 _show \u00b6 [Source] Append the string representation of this object to the provided String. fun box _show( buf': String iso, indent: String val = \"\", level: USize val, pretty: Bool val) : String iso^ Parameters \u00b6 buf': String iso indent: String val = \"\" level: USize val pretty: Bool val Returns \u00b6 String iso^","title":"class JsonObject"},{"location":"json-JsonObject/#jsonobject","text":"[Source] class ref JsonObject","title":"JsonObject"},{"location":"json-JsonObject/#constructors","text":"","title":"Constructors"},{"location":"json-JsonObject/#create","text":"[Source] Create a map with space for prealloc elements without triggering a resize. Defaults to 6. new ref create( prealloc: USize val = 6) : JsonObject ref^","title":"create"},{"location":"json-JsonObject/#parameters","text":"prealloc: USize val = 6","title":"Parameters"},{"location":"json-JsonObject/#returns","text":"JsonObject ref^","title":"Returns"},{"location":"json-JsonObject/#from_map","text":"[Source] Create a Json object from a map. new ref from_map( data': HashMap[String val, (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq[String val] val] ref) : JsonObject ref^","title":"from_map"},{"location":"json-JsonObject/#parameters_1","text":"data': HashMap [ String val, ( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq [ String val] val] ref","title":"Parameters"},{"location":"json-JsonObject/#returns_1","text":"JsonObject ref^","title":"Returns"},{"location":"json-JsonObject/#public-fields","text":"","title":"Public fields"},{"location":"json-JsonObject/#var-data-hashmap91string-val-f64-val-i64-val-bool-val-none-val-string-val-jsonarray-ref-jsonobject-ref-hasheq91string-val93-val93-ref","text":"[Source] The actual JSON object structure, mapping String keys to other JSON structures.","title":"var data: HashMap[String val, (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq[String val] val] ref"},{"location":"json-JsonObject/#public-functions","text":"","title":"Public Functions"},{"location":"json-JsonObject/#string","text":"[Source] Generate string representation of this object. fun box string( indent: String val = \"\", pretty_print: Bool val = false) : String val","title":"string"},{"location":"json-JsonObject/#parameters_2","text":"indent: String val = \"\" pretty_print: Bool val = false","title":"Parameters"},{"location":"json-JsonObject/#returns_2","text":"String val","title":"Returns"},{"location":"json-JsonObject/#private-functions","text":"","title":"Private Functions"},{"location":"json-JsonObject/#_show","text":"[Source] Append the string representation of this object to the provided String. fun box _show( buf': String iso, indent: String val = \"\", level: USize val, pretty: Bool val) : String iso^","title":"_show"},{"location":"json-JsonObject/#parameters_3","text":"buf': String iso indent: String val = \"\" level: USize val pretty: Bool val","title":"Parameters"},{"location":"json-JsonObject/#returns_3","text":"String iso^","title":"Returns"},{"location":"json-JsonType/","text":"JsonType \u00b6 [Source] All JSON data types. type JsonType is (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref) Type Alias For \u00b6 ( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)","title":"type JsonType"},{"location":"json-JsonType/#jsontype","text":"[Source] All JSON data types. type JsonType is (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)","title":"JsonType"},{"location":"json-JsonType/#type-alias-for","text":"( F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)","title":"Type Alias For"},{"location":"json-_JsonPrint/","text":"_JsonPrint \u00b6 [Source] primitive val _JsonPrint Constructors \u00b6 create \u00b6 [Source] new val create() : _JsonPrint val^ Returns \u00b6 _JsonPrint val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _JsonPrint val) : Bool val Parameters \u00b6 that: _JsonPrint val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _JsonPrint val) : Bool val Parameters \u00b6 that: _JsonPrint val Returns \u00b6 Bool val Private Functions \u00b6 _indent \u00b6 [Source] Add indentation to the buf to the appropriate indent_level fun box _indent( buf: String iso, indent: String val, level': USize val) : String iso^ Parameters \u00b6 buf: String iso indent: String val level': USize val Returns \u00b6 String iso^ _string \u00b6 [Source] Generate string representation of the given data. fun box _string( d: (F64 val | I64 val | Bool val | None val | String val | JsonArray box | JsonObject box), buf': String iso, indent: String val, level: USize val, pretty: Bool val) : String iso^ Parameters \u00b6 d: ( F64 val | I64 val | Bool val | None val | String val | JsonArray box | JsonObject box) buf': String iso indent: String val level: USize val pretty: Bool val Returns \u00b6 String iso^ _escaped_string \u00b6 [Source] Generate a version of the given string with escapes for all non-printable and non-ASCII characters. fun box _escaped_string( buf: String iso, s: String val) : String iso^ Parameters \u00b6 buf: String iso s: String val Returns \u00b6 String iso^","title":"primitive _JsonPrint"},{"location":"json-_JsonPrint/#_jsonprint","text":"[Source] primitive val _JsonPrint","title":"_JsonPrint"},{"location":"json-_JsonPrint/#constructors","text":"","title":"Constructors"},{"location":"json-_JsonPrint/#create","text":"[Source] new val create() : _JsonPrint val^","title":"create"},{"location":"json-_JsonPrint/#returns","text":"_JsonPrint val^","title":"Returns"},{"location":"json-_JsonPrint/#public-functions","text":"","title":"Public Functions"},{"location":"json-_JsonPrint/#eq","text":"[Source] fun box eq( that: _JsonPrint val) : Bool val","title":"eq"},{"location":"json-_JsonPrint/#parameters","text":"that: _JsonPrint val","title":"Parameters"},{"location":"json-_JsonPrint/#returns_1","text":"Bool val","title":"Returns"},{"location":"json-_JsonPrint/#ne","text":"[Source] fun box ne( that: _JsonPrint val) : Bool val","title":"ne"},{"location":"json-_JsonPrint/#parameters_1","text":"that: _JsonPrint val","title":"Parameters"},{"location":"json-_JsonPrint/#returns_2","text":"Bool val","title":"Returns"},{"location":"json-_JsonPrint/#private-functions","text":"","title":"Private Functions"},{"location":"json-_JsonPrint/#_indent","text":"[Source] Add indentation to the buf to the appropriate indent_level fun box _indent( buf: String iso, indent: String val, level': USize val) : String iso^","title":"_indent"},{"location":"json-_JsonPrint/#parameters_2","text":"buf: String iso indent: String val level': USize val","title":"Parameters"},{"location":"json-_JsonPrint/#returns_3","text":"String iso^","title":"Returns"},{"location":"json-_JsonPrint/#_string","text":"[Source] Generate string representation of the given data. fun box _string( d: (F64 val | I64 val | Bool val | None val | String val | JsonArray box | JsonObject box), buf': String iso, indent: String val, level: USize val, pretty: Bool val) : String iso^","title":"_string"},{"location":"json-_JsonPrint/#parameters_3","text":"d: ( F64 val | I64 val | Bool val | None val | String val | JsonArray box | JsonObject box) buf': String iso indent: String val level: USize val pretty: Bool val","title":"Parameters"},{"location":"json-_JsonPrint/#returns_4","text":"String iso^","title":"Returns"},{"location":"json-_JsonPrint/#_escaped_string","text":"[Source] Generate a version of the given string with escapes for all non-printable and non-ASCII characters. fun box _escaped_string( buf: String iso, s: String val) : String iso^","title":"_escaped_string"},{"location":"json-_JsonPrint/#parameters_4","text":"buf: String iso s: String val","title":"Parameters"},{"location":"json-_JsonPrint/#returns_5","text":"String iso^","title":"Returns"},{"location":"logger--index/","text":"Logger package \u00b6 Provides basic logging facilities. For most use cases, the StringLogger class will be used. On construction, it takes 2 parameters and a 3rd optional parameter: LogLevel below which no output will be logged OutStream to log to Optional LogFormatter If you need to log arbitrary objects, take a look at ObjectLogger[A] which can log arbitrary objects so long as you provide it a lambda to covert from A to String. API Philosophy \u00b6 The API for using Logger is an attempt to abide by the Pony philosophy of first, be correct and secondly, aim for performance. One of the ways that logging can slow your system down is by having to evaluate expressions to be logged whether they will be logged or not (based on the level of logging). For example: logger.log(Warn, name + \": \" + reason) will construct a new String regardless of whether we will end up logging the message or not. The Logger API uses boolean short circuiting to avoid this. logger(Warn) and logger.log(name + \": \" + reason) will not evaluate the expression to be logged unless the log level Warn is at or above the overall log level for our logging. This is as close as we can get to zero cost for items that aren't going to end up being logged. Example programs \u00b6 String Logger \u00b6 The following program will output 'my warn message' and 'my error message' to STDOUT in the standard default log format. use \"logger\" actor Main new create(env: Env) => let logger = StringLogger( Warn, env.out) logger(Fine) and logger.log(\"my fine message\") logger(Info) and logger.log(\"my info message\") logger(Warn) and logger.log(\"my warn message\") logger(Error) and logger.log(\"my error message\") Logger[A] \u00b6 The following program will output '42' to STDOUT in the standard default log format. use \"logger\" actor Main new create(env: Env) => let logger = Logger[U64](Fine, env.out, {(a) => a.string() }) logger(Error) and logger.log(U64(42)) Custom formatting your logs \u00b6 The Logger package provides an interface for formatting logs. If you wish to override the standard formatting, you can create an object that implements: interface val LogFormatter fun apply( msg: String, file_name: String, file_linenum: String, file_linepos: String): String This can either be a class or because the interface only has a single apply method, can also be a lambda. Public Types \u00b6 type LogLevel primitive Fine primitive Info primitive Warn primitive Error class Logger primitive StringLogger interface LogFormatter primitive DefaultLogFormatter","title":"Package"},{"location":"logger--index/#logger-package","text":"Provides basic logging facilities. For most use cases, the StringLogger class will be used. On construction, it takes 2 parameters and a 3rd optional parameter: LogLevel below which no output will be logged OutStream to log to Optional LogFormatter If you need to log arbitrary objects, take a look at ObjectLogger[A] which can log arbitrary objects so long as you provide it a lambda to covert from A to String.","title":"Logger package"},{"location":"logger--index/#api-philosophy","text":"The API for using Logger is an attempt to abide by the Pony philosophy of first, be correct and secondly, aim for performance. One of the ways that logging can slow your system down is by having to evaluate expressions to be logged whether they will be logged or not (based on the level of logging). For example: logger.log(Warn, name + \": \" + reason) will construct a new String regardless of whether we will end up logging the message or not. The Logger API uses boolean short circuiting to avoid this. logger(Warn) and logger.log(name + \": \" + reason) will not evaluate the expression to be logged unless the log level Warn is at or above the overall log level for our logging. This is as close as we can get to zero cost for items that aren't going to end up being logged.","title":"API Philosophy"},{"location":"logger--index/#example-programs","text":"","title":"Example programs"},{"location":"logger--index/#string-logger","text":"The following program will output 'my warn message' and 'my error message' to STDOUT in the standard default log format. use \"logger\" actor Main new create(env: Env) => let logger = StringLogger( Warn, env.out) logger(Fine) and logger.log(\"my fine message\") logger(Info) and logger.log(\"my info message\") logger(Warn) and logger.log(\"my warn message\") logger(Error) and logger.log(\"my error message\")","title":"String Logger"},{"location":"logger--index/#loggera","text":"The following program will output '42' to STDOUT in the standard default log format. use \"logger\" actor Main new create(env: Env) => let logger = Logger[U64](Fine, env.out, {(a) => a.string() }) logger(Error) and logger.log(U64(42))","title":"Logger[A]"},{"location":"logger--index/#custom-formatting-your-logs","text":"The Logger package provides an interface for formatting logs. If you wish to override the standard formatting, you can create an object that implements: interface val LogFormatter fun apply( msg: String, file_name: String, file_linenum: String, file_linepos: String): String This can either be a class or because the interface only has a single apply method, can also be a lambda.","title":"Custom formatting your logs"},{"location":"logger--index/#public-types","text":"type LogLevel primitive Fine primitive Info primitive Warn primitive Error class Logger primitive StringLogger interface LogFormatter primitive DefaultLogFormatter","title":"Public Types"},{"location":"logger-DefaultLogFormatter/","text":"DefaultLogFormatter \u00b6 [Source] primitive val DefaultLogFormatter is LogFormatter val Implements \u00b6 LogFormatter val Constructors \u00b6 create \u00b6 [Source] new val create() : DefaultLogFormatter val^ Returns \u00b6 DefaultLogFormatter val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( msg: String val, loc: SourceLoc val) : String val Parameters \u00b6 msg: String val loc: SourceLoc val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: DefaultLogFormatter val) : Bool val Parameters \u00b6 that: DefaultLogFormatter val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DefaultLogFormatter val) : Bool val Parameters \u00b6 that: DefaultLogFormatter val Returns \u00b6 Bool val","title":"primitive DefaultLogFormatter"},{"location":"logger-DefaultLogFormatter/#defaultlogformatter","text":"[Source] primitive val DefaultLogFormatter is LogFormatter val","title":"DefaultLogFormatter"},{"location":"logger-DefaultLogFormatter/#implements","text":"LogFormatter val","title":"Implements"},{"location":"logger-DefaultLogFormatter/#constructors","text":"","title":"Constructors"},{"location":"logger-DefaultLogFormatter/#create","text":"[Source] new val create() : DefaultLogFormatter val^","title":"create"},{"location":"logger-DefaultLogFormatter/#returns","text":"DefaultLogFormatter val^","title":"Returns"},{"location":"logger-DefaultLogFormatter/#public-functions","text":"","title":"Public Functions"},{"location":"logger-DefaultLogFormatter/#apply","text":"[Source] fun box apply( msg: String val, loc: SourceLoc val) : String val","title":"apply"},{"location":"logger-DefaultLogFormatter/#parameters","text":"msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"logger-DefaultLogFormatter/#returns_1","text":"String val","title":"Returns"},{"location":"logger-DefaultLogFormatter/#eq","text":"[Source] fun box eq( that: DefaultLogFormatter val) : Bool val","title":"eq"},{"location":"logger-DefaultLogFormatter/#parameters_1","text":"that: DefaultLogFormatter val","title":"Parameters"},{"location":"logger-DefaultLogFormatter/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-DefaultLogFormatter/#ne","text":"[Source] fun box ne( that: DefaultLogFormatter val) : Bool val","title":"ne"},{"location":"logger-DefaultLogFormatter/#parameters_2","text":"that: DefaultLogFormatter val","title":"Parameters"},{"location":"logger-DefaultLogFormatter/#returns_3","text":"Bool val","title":"Returns"},{"location":"logger-Error/","text":"Error \u00b6 [Source] primitive val Error Constructors \u00b6 create \u00b6 [Source] new val create() : Error val^ Returns \u00b6 Error val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: Error val) : Bool val Parameters \u00b6 that: Error val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Error val) : Bool val Parameters \u00b6 that: Error val Returns \u00b6 Bool val","title":"primitive Error"},{"location":"logger-Error/#error","text":"[Source] primitive val Error","title":"Error"},{"location":"logger-Error/#constructors","text":"","title":"Constructors"},{"location":"logger-Error/#create","text":"[Source] new val create() : Error val^","title":"create"},{"location":"logger-Error/#returns","text":"Error val^","title":"Returns"},{"location":"logger-Error/#public-functions","text":"","title":"Public Functions"},{"location":"logger-Error/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"logger-Error/#returns_1","text":"U32 val","title":"Returns"},{"location":"logger-Error/#eq","text":"[Source] fun box eq( that: Error val) : Bool val","title":"eq"},{"location":"logger-Error/#parameters","text":"that: Error val","title":"Parameters"},{"location":"logger-Error/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-Error/#ne","text":"[Source] fun box ne( that: Error val) : Bool val","title":"ne"},{"location":"logger-Error/#parameters_1","text":"that: Error val","title":"Parameters"},{"location":"logger-Error/#returns_3","text":"Bool val","title":"Returns"},{"location":"logger-Fine/","text":"Fine \u00b6 [Source] primitive val Fine Constructors \u00b6 create \u00b6 [Source] new val create() : Fine val^ Returns \u00b6 Fine val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: Fine val) : Bool val Parameters \u00b6 that: Fine val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Fine val) : Bool val Parameters \u00b6 that: Fine val Returns \u00b6 Bool val","title":"primitive Fine"},{"location":"logger-Fine/#fine","text":"[Source] primitive val Fine","title":"Fine"},{"location":"logger-Fine/#constructors","text":"","title":"Constructors"},{"location":"logger-Fine/#create","text":"[Source] new val create() : Fine val^","title":"create"},{"location":"logger-Fine/#returns","text":"Fine val^","title":"Returns"},{"location":"logger-Fine/#public-functions","text":"","title":"Public Functions"},{"location":"logger-Fine/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"logger-Fine/#returns_1","text":"U32 val","title":"Returns"},{"location":"logger-Fine/#eq","text":"[Source] fun box eq( that: Fine val) : Bool val","title":"eq"},{"location":"logger-Fine/#parameters","text":"that: Fine val","title":"Parameters"},{"location":"logger-Fine/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-Fine/#ne","text":"[Source] fun box ne( that: Fine val) : Bool val","title":"ne"},{"location":"logger-Fine/#parameters_1","text":"that: Fine val","title":"Parameters"},{"location":"logger-Fine/#returns_3","text":"Bool val","title":"Returns"},{"location":"logger-Info/","text":"Info \u00b6 [Source] primitive val Info Constructors \u00b6 create \u00b6 [Source] new val create() : Info val^ Returns \u00b6 Info val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: Info val) : Bool val Parameters \u00b6 that: Info val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Info val) : Bool val Parameters \u00b6 that: Info val Returns \u00b6 Bool val","title":"primitive Info"},{"location":"logger-Info/#info","text":"[Source] primitive val Info","title":"Info"},{"location":"logger-Info/#constructors","text":"","title":"Constructors"},{"location":"logger-Info/#create","text":"[Source] new val create() : Info val^","title":"create"},{"location":"logger-Info/#returns","text":"Info val^","title":"Returns"},{"location":"logger-Info/#public-functions","text":"","title":"Public Functions"},{"location":"logger-Info/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"logger-Info/#returns_1","text":"U32 val","title":"Returns"},{"location":"logger-Info/#eq","text":"[Source] fun box eq( that: Info val) : Bool val","title":"eq"},{"location":"logger-Info/#parameters","text":"that: Info val","title":"Parameters"},{"location":"logger-Info/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-Info/#ne","text":"[Source] fun box ne( that: Info val) : Bool val","title":"ne"},{"location":"logger-Info/#parameters_1","text":"that: Info val","title":"Parameters"},{"location":"logger-Info/#returns_3","text":"Bool val","title":"Returns"},{"location":"logger-LogFormatter/","text":"LogFormatter \u00b6 [Source] Interface required to implement custom log formatting. msg is the logged message loc is the location log was called from See DefaultLogFormatter for an example of how to implement a LogFormatter. interface val LogFormatter Public Functions \u00b6 apply \u00b6 [Source] fun box apply( msg: String val, loc: SourceLoc val) : String val Parameters \u00b6 msg: String val loc: SourceLoc val Returns \u00b6 String val","title":"interface LogFormatter"},{"location":"logger-LogFormatter/#logformatter","text":"[Source] Interface required to implement custom log formatting. msg is the logged message loc is the location log was called from See DefaultLogFormatter for an example of how to implement a LogFormatter. interface val LogFormatter","title":"LogFormatter"},{"location":"logger-LogFormatter/#public-functions","text":"","title":"Public Functions"},{"location":"logger-LogFormatter/#apply","text":"[Source] fun box apply( msg: String val, loc: SourceLoc val) : String val","title":"apply"},{"location":"logger-LogFormatter/#parameters","text":"msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"logger-LogFormatter/#returns","text":"String val","title":"Returns"},{"location":"logger-LogLevel/","text":"LogLevel \u00b6 [Source] type LogLevel is (Fine val | Info val | Warn val | Error val) Type Alias For \u00b6 ( Fine val | Info val | Warn val | Error val)","title":"type LogLevel"},{"location":"logger-LogLevel/#loglevel","text":"[Source] type LogLevel is (Fine val | Info val | Warn val | Error val)","title":"LogLevel"},{"location":"logger-LogLevel/#type-alias-for","text":"( Fine val | Info val | Warn val | Error val)","title":"Type Alias For"},{"location":"logger-Logger/","text":"Logger[A: A] \u00b6 [Source] class val Logger[A: A] Constructors \u00b6 create \u00b6 [Source] new val create( level: (Fine val | Info val | Warn val | Error val), out: OutStream tag, f: {(A): String}[A] val, formatter: LogFormatter val = reference) : Logger[A] val^ Parameters \u00b6 level: ( Fine val | Info val | Warn val | Error val) out: OutStream tag f: {(A): String}[A] val formatter: LogFormatter val = reference Returns \u00b6 Logger [A] val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( level: (Fine val | Info val | Warn val | Error val)) : Bool val Parameters \u00b6 level: ( Fine val | Info val | Warn val | Error val) Returns \u00b6 Bool val log \u00b6 [Source] fun box log( value: A, loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 value: A loc: SourceLoc val = __loc Returns \u00b6 Bool val","title":"class Logger"},{"location":"logger-Logger/#logger91a-a93","text":"[Source] class val Logger[A: A]","title":"Logger[A: A]"},{"location":"logger-Logger/#constructors","text":"","title":"Constructors"},{"location":"logger-Logger/#create","text":"[Source] new val create( level: (Fine val | Info val | Warn val | Error val), out: OutStream tag, f: {(A): String}[A] val, formatter: LogFormatter val = reference) : Logger[A] val^","title":"create"},{"location":"logger-Logger/#parameters","text":"level: ( Fine val | Info val | Warn val | Error val) out: OutStream tag f: {(A): String}[A] val formatter: LogFormatter val = reference","title":"Parameters"},{"location":"logger-Logger/#returns","text":"Logger [A] val^","title":"Returns"},{"location":"logger-Logger/#public-functions","text":"","title":"Public Functions"},{"location":"logger-Logger/#apply","text":"[Source] fun box apply( level: (Fine val | Info val | Warn val | Error val)) : Bool val","title":"apply"},{"location":"logger-Logger/#parameters_1","text":"level: ( Fine val | Info val | Warn val | Error val)","title":"Parameters"},{"location":"logger-Logger/#returns_1","text":"Bool val","title":"Returns"},{"location":"logger-Logger/#log","text":"[Source] fun box log( value: A, loc: SourceLoc val = __loc) : Bool val","title":"log"},{"location":"logger-Logger/#parameters_2","text":"value: A loc: SourceLoc val = __loc","title":"Parameters"},{"location":"logger-Logger/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-StringLogger/","text":"StringLogger \u00b6 [Source] primitive val StringLogger Constructors \u00b6 create \u00b6 [Source] new val create() : StringLogger val^ Returns \u00b6 StringLogger val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( level: (Fine val | Info val | Warn val | Error val), out: OutStream tag, formatter: LogFormatter val = reference) : Logger[String val] val Parameters \u00b6 level: ( Fine val | Info val | Warn val | Error val) out: OutStream tag formatter: LogFormatter val = reference Returns \u00b6 Logger [ String val] val eq \u00b6 [Source] fun box eq( that: StringLogger val) : Bool val Parameters \u00b6 that: StringLogger val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StringLogger val) : Bool val Parameters \u00b6 that: StringLogger val Returns \u00b6 Bool val","title":"primitive StringLogger"},{"location":"logger-StringLogger/#stringlogger","text":"[Source] primitive val StringLogger","title":"StringLogger"},{"location":"logger-StringLogger/#constructors","text":"","title":"Constructors"},{"location":"logger-StringLogger/#create","text":"[Source] new val create() : StringLogger val^","title":"create"},{"location":"logger-StringLogger/#returns","text":"StringLogger val^","title":"Returns"},{"location":"logger-StringLogger/#public-functions","text":"","title":"Public Functions"},{"location":"logger-StringLogger/#apply","text":"[Source] fun box apply( level: (Fine val | Info val | Warn val | Error val), out: OutStream tag, formatter: LogFormatter val = reference) : Logger[String val] val","title":"apply"},{"location":"logger-StringLogger/#parameters","text":"level: ( Fine val | Info val | Warn val | Error val) out: OutStream tag formatter: LogFormatter val = reference","title":"Parameters"},{"location":"logger-StringLogger/#returns_1","text":"Logger [ String val] val","title":"Returns"},{"location":"logger-StringLogger/#eq","text":"[Source] fun box eq( that: StringLogger val) : Bool val","title":"eq"},{"location":"logger-StringLogger/#parameters_1","text":"that: StringLogger val","title":"Parameters"},{"location":"logger-StringLogger/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-StringLogger/#ne","text":"[Source] fun box ne( that: StringLogger val) : Bool val","title":"ne"},{"location":"logger-StringLogger/#parameters_2","text":"that: StringLogger val","title":"Parameters"},{"location":"logger-StringLogger/#returns_3","text":"Bool val","title":"Returns"},{"location":"logger-Warn/","text":"Warn \u00b6 [Source] primitive val Warn Constructors \u00b6 create \u00b6 [Source] new val create() : Warn val^ Returns \u00b6 Warn val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: Warn val) : Bool val Parameters \u00b6 that: Warn val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Warn val) : Bool val Parameters \u00b6 that: Warn val Returns \u00b6 Bool val","title":"primitive Warn"},{"location":"logger-Warn/#warn","text":"[Source] primitive val Warn","title":"Warn"},{"location":"logger-Warn/#constructors","text":"","title":"Constructors"},{"location":"logger-Warn/#create","text":"[Source] new val create() : Warn val^","title":"create"},{"location":"logger-Warn/#returns","text":"Warn val^","title":"Returns"},{"location":"logger-Warn/#public-functions","text":"","title":"Public Functions"},{"location":"logger-Warn/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"logger-Warn/#returns_1","text":"U32 val","title":"Returns"},{"location":"logger-Warn/#eq","text":"[Source] fun box eq( that: Warn val) : Bool val","title":"eq"},{"location":"logger-Warn/#parameters","text":"that: Warn val","title":"Parameters"},{"location":"logger-Warn/#returns_2","text":"Bool val","title":"Returns"},{"location":"logger-Warn/#ne","text":"[Source] fun box ne( that: Warn val) : Bool val","title":"ne"},{"location":"logger-Warn/#parameters_1","text":"that: Warn val","title":"Parameters"},{"location":"logger-Warn/#returns_3","text":"Bool val","title":"Returns"},{"location":"math--index/","text":"Math package \u00b6 Given the name Math for this package, you'd expect it have a broad and grand scope. Surprise! Not currently. However, we do have the most useful of all programming language math constructs: fibonacci! People like to make fun of fibonacci but let's face it, no fibonacci, no benchmarks. We hear from some of our engineer friends that math is very important to programming, we call upon that particular class of engineer friends to help us fill out this package with more maths than you can shake a stick at. Btw, in case you are wondering, yes we can shake a stick at a lot of maths. Public Types \u00b6 class Fibonacci","title":"Package"},{"location":"math--index/#math-package","text":"Given the name Math for this package, you'd expect it have a broad and grand scope. Surprise! Not currently. However, we do have the most useful of all programming language math constructs: fibonacci! People like to make fun of fibonacci but let's face it, no fibonacci, no benchmarks. We hear from some of our engineer friends that math is very important to programming, we call upon that particular class of engineer friends to help us fill out this package with more maths than you can shake a stick at. Btw, in case you are wondering, yes we can shake a stick at a lot of maths.","title":"Math package"},{"location":"math--index/#public-types","text":"class Fibonacci","title":"Public Types"},{"location":"math-Fibonacci/","text":"Fibonacci[optional A: ( Integer [A] val & ( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] \u00b6 [Source] Useful for microbenchmarks to impress your friends. Look y'all, Pony goes fast! We suppose if you are into Agile planning poker that you could also use this in conjunction with Random to assign User Story Points. class ref Fibonacci[optional A: (Integer[A] val & (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] is Iterator[A] ref Implements \u00b6 Iterator [A] ref Constructors \u00b6 create \u00b6 [Source] new iso create() : Fibonacci[A] iso^ Returns \u00b6 Fibonacci [A] iso^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( n: U8 val) : A Parameters \u00b6 n: U8 val Returns \u00b6 A has_next \u00b6 [Source] fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] fun ref next() : A Returns \u00b6 A","title":"class Fibonacci"},{"location":"math-Fibonacci/#fibonacci91optional-a-integer91a93-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93","text":"[Source] Useful for microbenchmarks to impress your friends. Look y'all, Pony goes fast! We suppose if you are into Agile planning poker that you could also use this in conjunction with Random to assign User Story Points. class ref Fibonacci[optional A: (Integer[A] val & (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))] is Iterator[A] ref","title":"Fibonacci[optional A: (Integer[A] val &amp; (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"},{"location":"math-Fibonacci/#implements","text":"Iterator [A] ref","title":"Implements"},{"location":"math-Fibonacci/#constructors","text":"","title":"Constructors"},{"location":"math-Fibonacci/#create","text":"[Source] new iso create() : Fibonacci[A] iso^","title":"create"},{"location":"math-Fibonacci/#returns","text":"Fibonacci [A] iso^","title":"Returns"},{"location":"math-Fibonacci/#public-functions","text":"","title":"Public Functions"},{"location":"math-Fibonacci/#apply","text":"[Source] fun box apply( n: U8 val) : A","title":"apply"},{"location":"math-Fibonacci/#parameters","text":"n: U8 val","title":"Parameters"},{"location":"math-Fibonacci/#returns_1","text":"A","title":"Returns"},{"location":"math-Fibonacci/#has_next","text":"[Source] fun box has_next() : Bool val","title":"has_next"},{"location":"math-Fibonacci/#returns_2","text":"Bool val","title":"Returns"},{"location":"math-Fibonacci/#next","text":"[Source] fun ref next() : A","title":"next"},{"location":"math-Fibonacci/#returns_3","text":"A","title":"Returns"},{"location":"net--index/","text":"Net package \u00b6 The Net package provides support for creating UDP and TCP clients and servers, reading and writing network data, and establishing UDP and TCP connections. Public Types \u00b6 type UDPSocketAuth actor UDPSocket interface UDPNotify type TCPListenerAuth actor TCPListener interface TCPListenNotify interface TCPConnectionNotify type TCPConnectionAuth actor TCPConnection interface Proxy class NoProxy primitive OSSockOpt class NetAddress type DNSLookupAuth primitive DNS primitive NetAuth primitive DNSAuth primitive UDPAuth primitive TCPAuth primitive TCPListenAuth primitive TCPConnectAuth Private Types \u00b6 primitive _OSSocket","title":"Package"},{"location":"net--index/#net-package","text":"The Net package provides support for creating UDP and TCP clients and servers, reading and writing network data, and establishing UDP and TCP connections.","title":"Net package"},{"location":"net--index/#public-types","text":"type UDPSocketAuth actor UDPSocket interface UDPNotify type TCPListenerAuth actor TCPListener interface TCPListenNotify interface TCPConnectionNotify type TCPConnectionAuth actor TCPConnection interface Proxy class NoProxy primitive OSSockOpt class NetAddress type DNSLookupAuth primitive DNS primitive NetAuth primitive DNSAuth primitive UDPAuth primitive TCPAuth primitive TCPListenAuth primitive TCPConnectAuth","title":"Public Types"},{"location":"net--index/#private-types","text":"primitive _OSSocket","title":"Private Types"},{"location":"net-DNS/","text":"DNS \u00b6 [Source] Helper functions for resolving DNS queries. primitive val DNS Constructors \u00b6 create \u00b6 [Source] new val create() : DNS val^ Returns \u00b6 DNS val^ Public Functions \u00b6 apply \u00b6 [Source] Gets all IPv4 and IPv6 addresses for a host and service. fun box apply( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val Returns \u00b6 Array [ NetAddress val] iso^ ip4 \u00b6 [Source] Gets all IPv4 addresses for a host and service. fun box ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val Returns \u00b6 Array [ NetAddress val] iso^ ip6 \u00b6 [Source] Gets all IPv6 addresses for a host and service. fun box ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val Returns \u00b6 Array [ NetAddress val] iso^ broadcast_ip4 \u00b6 [Source] Link-local IP4 broadcast address. fun box broadcast_ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val Returns \u00b6 Array [ NetAddress val] iso^ broadcast_ip6 \u00b6 [Source] Link-local IP6 broadcast address. fun box broadcast_ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val Returns \u00b6 Array [ NetAddress val] iso^ is_ip4 \u00b6 [Source] Returns true if the host is a literal IPv4 address. fun box is_ip4( host: String val) : Bool val Parameters \u00b6 host: String val Returns \u00b6 Bool val is_ip6 \u00b6 [Source] Returns true if the host is a literal IPv6 address. fun box is_ip6( host: String val) : Bool val Parameters \u00b6 host: String val Returns \u00b6 Bool val eq \u00b6 [Source] fun box eq( that: DNS val) : Bool val Parameters \u00b6 that: DNS val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DNS val) : Bool val Parameters \u00b6 that: DNS val Returns \u00b6 Bool val Private Functions \u00b6 _resolve \u00b6 [Source] Turns an addrinfo pointer into an array of addresses. fun box _resolve( auth: (AmbientAuth val | NetAuth val | DNSAuth val), family: U32 val, host: String val, service: String val) : Array[NetAddress val] iso^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | DNSAuth val) family: U32 val host: String val service: String val Returns \u00b6 Array [ NetAddress val] iso^","title":"primitive DNS"},{"location":"net-DNS/#dns","text":"[Source] Helper functions for resolving DNS queries. primitive val DNS","title":"DNS"},{"location":"net-DNS/#constructors","text":"","title":"Constructors"},{"location":"net-DNS/#create","text":"[Source] new val create() : DNS val^","title":"create"},{"location":"net-DNS/#returns","text":"DNS val^","title":"Returns"},{"location":"net-DNS/#public-functions","text":"","title":"Public Functions"},{"location":"net-DNS/#apply","text":"[Source] Gets all IPv4 and IPv6 addresses for a host and service. fun box apply( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^","title":"apply"},{"location":"net-DNS/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_1","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#ip4","text":"[Source] Gets all IPv4 addresses for a host and service. fun box ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^","title":"ip4"},{"location":"net-DNS/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_2","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#ip6","text":"[Source] Gets all IPv6 addresses for a host and service. fun box ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), host: String val, service: String val) : Array[NetAddress val] iso^","title":"ip6"},{"location":"net-DNS/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_3","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#broadcast_ip4","text":"[Source] Link-local IP4 broadcast address. fun box broadcast_ip4( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^","title":"broadcast_ip4"},{"location":"net-DNS/#parameters_3","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val","title":"Parameters"},{"location":"net-DNS/#returns_4","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#broadcast_ip6","text":"[Source] Link-local IP6 broadcast address. fun box broadcast_ip6( auth: (AmbientAuth val | NetAuth val | DNSAuth val), service: String val) : Array[NetAddress val] iso^","title":"broadcast_ip6"},{"location":"net-DNS/#parameters_4","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) service: String val","title":"Parameters"},{"location":"net-DNS/#returns_5","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNS/#is_ip4","text":"[Source] Returns true if the host is a literal IPv4 address. fun box is_ip4( host: String val) : Bool val","title":"is_ip4"},{"location":"net-DNS/#parameters_5","text":"host: String val","title":"Parameters"},{"location":"net-DNS/#returns_6","text":"Bool val","title":"Returns"},{"location":"net-DNS/#is_ip6","text":"[Source] Returns true if the host is a literal IPv6 address. fun box is_ip6( host: String val) : Bool val","title":"is_ip6"},{"location":"net-DNS/#parameters_6","text":"host: String val","title":"Parameters"},{"location":"net-DNS/#returns_7","text":"Bool val","title":"Returns"},{"location":"net-DNS/#eq","text":"[Source] fun box eq( that: DNS val) : Bool val","title":"eq"},{"location":"net-DNS/#parameters_7","text":"that: DNS val","title":"Parameters"},{"location":"net-DNS/#returns_8","text":"Bool val","title":"Returns"},{"location":"net-DNS/#ne","text":"[Source] fun box ne( that: DNS val) : Bool val","title":"ne"},{"location":"net-DNS/#parameters_8","text":"that: DNS val","title":"Parameters"},{"location":"net-DNS/#returns_9","text":"Bool val","title":"Returns"},{"location":"net-DNS/#private-functions","text":"","title":"Private Functions"},{"location":"net-DNS/#_resolve","text":"[Source] Turns an addrinfo pointer into an array of addresses. fun box _resolve( auth: (AmbientAuth val | NetAuth val | DNSAuth val), family: U32 val, host: String val, service: String val) : Array[NetAddress val] iso^","title":"_resolve"},{"location":"net-DNS/#parameters_9","text":"auth: ( AmbientAuth val | NetAuth val | DNSAuth val) family: U32 val host: String val service: String val","title":"Parameters"},{"location":"net-DNS/#returns_10","text":"Array [ NetAddress val] iso^","title":"Returns"},{"location":"net-DNSAuth/","text":"DNSAuth \u00b6 [Source] primitive val DNSAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: (AmbientAuth val | NetAuth val)) : DNSAuth val^ Parameters \u00b6 from: ( AmbientAuth val | NetAuth val) Returns \u00b6 DNSAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: DNSAuth val) : Bool val Parameters \u00b6 that: DNSAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DNSAuth val) : Bool val Parameters \u00b6 that: DNSAuth val Returns \u00b6 Bool val","title":"primitive DNSAuth"},{"location":"net-DNSAuth/#dnsauth","text":"[Source] primitive val DNSAuth","title":"DNSAuth"},{"location":"net-DNSAuth/#constructors","text":"","title":"Constructors"},{"location":"net-DNSAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val)) : DNSAuth val^","title":"create"},{"location":"net-DNSAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val)","title":"Parameters"},{"location":"net-DNSAuth/#returns","text":"DNSAuth val^","title":"Returns"},{"location":"net-DNSAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-DNSAuth/#eq","text":"[Source] fun box eq( that: DNSAuth val) : Bool val","title":"eq"},{"location":"net-DNSAuth/#parameters_1","text":"that: DNSAuth val","title":"Parameters"},{"location":"net-DNSAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-DNSAuth/#ne","text":"[Source] fun box ne( that: DNSAuth val) : Bool val","title":"ne"},{"location":"net-DNSAuth/#parameters_2","text":"that: DNSAuth val","title":"Parameters"},{"location":"net-DNSAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-DNSLookupAuth/","text":"DNSLookupAuth \u00b6 [Source] type DNSLookupAuth is (AmbientAuth val | NetAuth val | DNSAuth val) Type Alias For \u00b6 ( AmbientAuth val | NetAuth val | DNSAuth val)","title":"type DNSLookupAuth"},{"location":"net-DNSLookupAuth/#dnslookupauth","text":"[Source] type DNSLookupAuth is (AmbientAuth val | NetAuth val | DNSAuth val)","title":"DNSLookupAuth"},{"location":"net-DNSLookupAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | DNSAuth val)","title":"Type Alias For"},{"location":"net-NetAddress/","text":"NetAddress \u00b6 [Source] Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address. This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 sockaddr_storage . Use the name method to obtain address/hostname and port/service as Strings. class val NetAddress is Equatable[NetAddress val] ref Implements \u00b6 Equatable [ NetAddress val] ref Constructors \u00b6 create \u00b6 [Source] new iso create() : NetAddress iso^ Returns \u00b6 NetAddress iso^ Public Functions \u00b6 ip4 \u00b6 [Source] Returns true for an IPv4 address. fun box ip4() : Bool val Returns \u00b6 Bool val ip6 \u00b6 [Source] Returns true for an IPv6 address. fun box ip6() : Bool val Returns \u00b6 Bool val name \u00b6 [Source] Returns the host and service name. If reversedns is an instance of DNSLookupAuth a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If reversedns is None the plain IP address is given and no DNS lookup is executed. If servicename is false the numeric port is returned as second element of the result tuple. If it is true the port is translated into its corresponding servicename (e.g. port 80 is returned as \"http\" ). Internally this method uses the POSIX C function getnameinfo . fun box name( reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference, servicename: Bool val = false) : (String val , String val) ? Parameters \u00b6 reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference servicename: Bool val = false Returns \u00b6 ( String val , String val) ? eq \u00b6 [Source] fun box eq( that: NetAddress box) : Bool val Parameters \u00b6 that: NetAddress box Returns \u00b6 Bool val host_eq \u00b6 [Source] fun box host_eq( that: NetAddress box) : Bool val Parameters \u00b6 that: NetAddress box Returns \u00b6 Bool val length \u00b6 [Source] For platforms (OSX/FreeBSD) with length field as part of its struct sockaddr definition, returns the length . Else (Linux/Windows) returns the size of sockaddr_in or sockaddr_in6 . fun box length() : U8 val Returns \u00b6 U8 val family \u00b6 [Source] Returns the family . fun box family() : U8 val Returns \u00b6 U8 val port \u00b6 [Source] Returns port number in host byte order. fun box port() : U16 val Returns \u00b6 U16 val scope \u00b6 [Source] Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. fun box scope() : U32 val Returns \u00b6 U32 val ipv4_addr \u00b6 [Source] Returns IPV4 address ( _addr field in the class) if ip4() is True . If ip4() is False then the contents are invalid. fun box ipv4_addr() : U32 val Returns \u00b6 U32 val ipv6_addr \u00b6 [Source] Returns IPV6 address as the 4-tuple (say a ). a._1 = _addr1 // Bits 0-32 of the IPv6 address in host byte order. a._2 = _addr2 // Bits 33-64 of the IPv6 address in host byte order. a._3 = _addr3 // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4 // Bits 97-128 of the IPv6 address in host byte order. The contents of the 4-tuple returned are valid only if ip6() is True . fun box ipv6_addr() : (U32 val , U32 val , U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val , U32 val , U32 val) ne \u00b6 [Source] fun box ne( that: NetAddress val) : Bool val Parameters \u00b6 that: NetAddress val Returns \u00b6 Bool val","title":"class NetAddress"},{"location":"net-NetAddress/#netaddress","text":"[Source] Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address. This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 sockaddr_storage . Use the name method to obtain address/hostname and port/service as Strings. class val NetAddress is Equatable[NetAddress val] ref","title":"NetAddress"},{"location":"net-NetAddress/#implements","text":"Equatable [ NetAddress val] ref","title":"Implements"},{"location":"net-NetAddress/#constructors","text":"","title":"Constructors"},{"location":"net-NetAddress/#create","text":"[Source] new iso create() : NetAddress iso^","title":"create"},{"location":"net-NetAddress/#returns","text":"NetAddress iso^","title":"Returns"},{"location":"net-NetAddress/#public-functions","text":"","title":"Public Functions"},{"location":"net-NetAddress/#ip4","text":"[Source] Returns true for an IPv4 address. fun box ip4() : Bool val","title":"ip4"},{"location":"net-NetAddress/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#ip6","text":"[Source] Returns true for an IPv6 address. fun box ip6() : Bool val","title":"ip6"},{"location":"net-NetAddress/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#name","text":"[Source] Returns the host and service name. If reversedns is an instance of DNSLookupAuth a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If reversedns is None the plain IP address is given and no DNS lookup is executed. If servicename is false the numeric port is returned as second element of the result tuple. If it is true the port is translated into its corresponding servicename (e.g. port 80 is returned as \"http\" ). Internally this method uses the POSIX C function getnameinfo . fun box name( reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference, servicename: Bool val = false) : (String val , String val) ?","title":"name"},{"location":"net-NetAddress/#parameters","text":"reversedns: ( AmbientAuth val | NetAuth val | DNSAuth val | None val) = reference servicename: Bool val = false","title":"Parameters"},{"location":"net-NetAddress/#returns_3","text":"( String val , String val) ?","title":"Returns"},{"location":"net-NetAddress/#eq","text":"[Source] fun box eq( that: NetAddress box) : Bool val","title":"eq"},{"location":"net-NetAddress/#parameters_1","text":"that: NetAddress box","title":"Parameters"},{"location":"net-NetAddress/#returns_4","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#host_eq","text":"[Source] fun box host_eq( that: NetAddress box) : Bool val","title":"host_eq"},{"location":"net-NetAddress/#parameters_2","text":"that: NetAddress box","title":"Parameters"},{"location":"net-NetAddress/#returns_5","text":"Bool val","title":"Returns"},{"location":"net-NetAddress/#length","text":"[Source] For platforms (OSX/FreeBSD) with length field as part of its struct sockaddr definition, returns the length . Else (Linux/Windows) returns the size of sockaddr_in or sockaddr_in6 . fun box length() : U8 val","title":"length"},{"location":"net-NetAddress/#returns_6","text":"U8 val","title":"Returns"},{"location":"net-NetAddress/#family","text":"[Source] Returns the family . fun box family() : U8 val","title":"family"},{"location":"net-NetAddress/#returns_7","text":"U8 val","title":"Returns"},{"location":"net-NetAddress/#port","text":"[Source] Returns port number in host byte order. fun box port() : U16 val","title":"port"},{"location":"net-NetAddress/#returns_8","text":"U16 val","title":"Returns"},{"location":"net-NetAddress/#scope","text":"[Source] Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. fun box scope() : U32 val","title":"scope"},{"location":"net-NetAddress/#returns_9","text":"U32 val","title":"Returns"},{"location":"net-NetAddress/#ipv4_addr","text":"[Source] Returns IPV4 address ( _addr field in the class) if ip4() is True . If ip4() is False then the contents are invalid. fun box ipv4_addr() : U32 val","title":"ipv4_addr"},{"location":"net-NetAddress/#returns_10","text":"U32 val","title":"Returns"},{"location":"net-NetAddress/#ipv6_addr","text":"[Source] Returns IPV6 address as the 4-tuple (say a ). a._1 = _addr1 // Bits 0-32 of the IPv6 address in host byte order. a._2 = _addr2 // Bits 33-64 of the IPv6 address in host byte order. a._3 = _addr3 // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4 // Bits 97-128 of the IPv6 address in host byte order. The contents of the 4-tuple returned are valid only if ip6() is True . fun box ipv6_addr() : (U32 val , U32 val , U32 val , U32 val)","title":"ipv6_addr"},{"location":"net-NetAddress/#returns_11","text":"( U32 val , U32 val , U32 val , U32 val)","title":"Returns"},{"location":"net-NetAddress/#ne","text":"[Source] fun box ne( that: NetAddress val) : Bool val","title":"ne"},{"location":"net-NetAddress/#parameters_3","text":"that: NetAddress val","title":"Parameters"},{"location":"net-NetAddress/#returns_12","text":"Bool val","title":"Returns"},{"location":"net-NetAuth/","text":"NetAuth \u00b6 [Source] primitive val NetAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: AmbientAuth val) : NetAuth val^ Parameters \u00b6 from: AmbientAuth val Returns \u00b6 NetAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: NetAuth val) : Bool val Parameters \u00b6 that: NetAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: NetAuth val) : Bool val Parameters \u00b6 that: NetAuth val Returns \u00b6 Bool val","title":"primitive NetAuth"},{"location":"net-NetAuth/#netauth","text":"[Source] primitive val NetAuth","title":"NetAuth"},{"location":"net-NetAuth/#constructors","text":"","title":"Constructors"},{"location":"net-NetAuth/#create","text":"[Source] new val create( from: AmbientAuth val) : NetAuth val^","title":"create"},{"location":"net-NetAuth/#parameters","text":"from: AmbientAuth val","title":"Parameters"},{"location":"net-NetAuth/#returns","text":"NetAuth val^","title":"Returns"},{"location":"net-NetAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-NetAuth/#eq","text":"[Source] fun box eq( that: NetAuth val) : Bool val","title":"eq"},{"location":"net-NetAuth/#parameters_1","text":"that: NetAuth val","title":"Parameters"},{"location":"net-NetAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-NetAuth/#ne","text":"[Source] fun box ne( that: NetAuth val) : Bool val","title":"ne"},{"location":"net-NetAuth/#parameters_2","text":"that: NetAuth val","title":"Parameters"},{"location":"net-NetAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-NoProxy/","text":"NoProxy \u00b6 [Source] Default implementation of a proxy that does not alter the supplied TCPConnectionNotify . actor MyClient new create(host: String, service: String, proxy: Proxy = NoProxy) => let conn: TCPConnection = TCPConnection.create( env.root as AmbientAuth, proxy.apply(MyConnectionNotify.create()), \"localhost\", \"80\") class val NoProxy is Proxy ref Implements \u00b6 Proxy ref Constructors \u00b6 create \u00b6 [Source] new iso create() : NoProxy iso^ Returns \u00b6 NoProxy iso^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( wrap: TCPConnectionNotify iso) : TCPConnectionNotify iso^ Parameters \u00b6 wrap: TCPConnectionNotify iso Returns \u00b6 TCPConnectionNotify iso^","title":"class NoProxy"},{"location":"net-NoProxy/#noproxy","text":"[Source] Default implementation of a proxy that does not alter the supplied TCPConnectionNotify . actor MyClient new create(host: String, service: String, proxy: Proxy = NoProxy) => let conn: TCPConnection = TCPConnection.create( env.root as AmbientAuth, proxy.apply(MyConnectionNotify.create()), \"localhost\", \"80\") class val NoProxy is Proxy ref","title":"NoProxy"},{"location":"net-NoProxy/#implements","text":"Proxy ref","title":"Implements"},{"location":"net-NoProxy/#constructors","text":"","title":"Constructors"},{"location":"net-NoProxy/#create","text":"[Source] new iso create() : NoProxy iso^","title":"create"},{"location":"net-NoProxy/#returns","text":"NoProxy iso^","title":"Returns"},{"location":"net-NoProxy/#public-functions","text":"","title":"Public Functions"},{"location":"net-NoProxy/#apply","text":"[Source] fun box apply( wrap: TCPConnectionNotify iso) : TCPConnectionNotify iso^","title":"apply"},{"location":"net-NoProxy/#parameters","text":"wrap: TCPConnectionNotify iso","title":"Parameters"},{"location":"net-NoProxy/#returns_1","text":"TCPConnectionNotify iso^","title":"Returns"},{"location":"net-OSSockOpt/","text":"OSSockOpt \u00b6 [Source] Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the getsockopt(2) and setsockopt(2) operating system calls. The values of the option level and option name constants are typically C preprocessor macros, e.g., #define SOMETHING 42 . These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, IP_NAT__XXX ). The function names in this primitive are derived by the C macro name and then: converted to lower case any double underscore ( __ ) is converted to a single underscore ( _ ). These constants are not stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization & deserialization or via direct shared memory). Many functions may return -1 , which means that the constant's value could not be determined at the Pony runtime library compile time. One cause may be that the option truly isn't available, for example, the option level constant IPPROTO_3PC is available on MacOS 10.x but not on Linux 4.4. Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform. A third cause of error is due to the regular expression-based approach used to harvest desirable constants. It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with getsockopt(2) and setsockopt(2) . Please consult your platform's documentation to verify the names of the option level and option name macros. The following code fragments are equivalent: set the socket receive buffer size for the file descriptor fd to 4455 . /* In C */ int option_value = 4455; setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &option_value, 4); /* In Pony */ var option: I32 = 4455; @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), addressof option, I32(4)) primitive val OSSockOpt Constructors \u00b6 create \u00b6 [Source] new val create() : OSSockOpt val^ Returns \u00b6 OSSockOpt val^ Public Functions \u00b6 ipproto_3pc \u00b6 [Source] fun box ipproto_3pc() : I32 val Returns \u00b6 I32 val ipproto_adfs \u00b6 [Source] fun box ipproto_adfs() : I32 val Returns \u00b6 I32 val ipproto_ah \u00b6 [Source] fun box ipproto_ah() : I32 val Returns \u00b6 I32 val ipproto_ahip \u00b6 [Source] fun box ipproto_ahip() : I32 val Returns \u00b6 I32 val ipproto_apes \u00b6 [Source] fun box ipproto_apes() : I32 val Returns \u00b6 I32 val ipproto_argus \u00b6 [Source] fun box ipproto_argus() : I32 val Returns \u00b6 I32 val ipproto_ax25 \u00b6 [Source] fun box ipproto_ax25() : I32 val Returns \u00b6 I32 val ipproto_beetph \u00b6 [Source] fun box ipproto_beetph() : I32 val Returns \u00b6 I32 val ipproto_bha \u00b6 [Source] fun box ipproto_bha() : I32 val Returns \u00b6 I32 val ipproto_blt \u00b6 [Source] fun box ipproto_blt() : I32 val Returns \u00b6 I32 val ipproto_brsatmon \u00b6 [Source] fun box ipproto_brsatmon() : I32 val Returns \u00b6 I32 val ipproto_carp \u00b6 [Source] fun box ipproto_carp() : I32 val Returns \u00b6 I32 val ipproto_cftp \u00b6 [Source] fun box ipproto_cftp() : I32 val Returns \u00b6 I32 val ipproto_chaos \u00b6 [Source] fun box ipproto_chaos() : I32 val Returns \u00b6 I32 val ipproto_cmtp \u00b6 [Source] fun box ipproto_cmtp() : I32 val Returns \u00b6 I32 val ipproto_comp \u00b6 [Source] fun box ipproto_comp() : I32 val Returns \u00b6 I32 val ipproto_cphb \u00b6 [Source] fun box ipproto_cphb() : I32 val Returns \u00b6 I32 val ipproto_cpnx \u00b6 [Source] fun box ipproto_cpnx() : I32 val Returns \u00b6 I32 val ipproto_dccp \u00b6 [Source] fun box ipproto_dccp() : I32 val Returns \u00b6 I32 val ipproto_ddp \u00b6 [Source] fun box ipproto_ddp() : I32 val Returns \u00b6 I32 val ipproto_dgp \u00b6 [Source] fun box ipproto_dgp() : I32 val Returns \u00b6 I32 val ipproto_divert \u00b6 [Source] fun box ipproto_divert() : I32 val Returns \u00b6 I32 val ipproto_done \u00b6 [Source] fun box ipproto_done() : I32 val Returns \u00b6 I32 val ipproto_dstopts \u00b6 [Source] fun box ipproto_dstopts() : I32 val Returns \u00b6 I32 val ipproto_egp \u00b6 [Source] fun box ipproto_egp() : I32 val Returns \u00b6 I32 val ipproto_emcon \u00b6 [Source] fun box ipproto_emcon() : I32 val Returns \u00b6 I32 val ipproto_encap \u00b6 [Source] fun box ipproto_encap() : I32 val Returns \u00b6 I32 val ipproto_eon \u00b6 [Source] fun box ipproto_eon() : I32 val Returns \u00b6 I32 val ipproto_esp \u00b6 [Source] fun box ipproto_esp() : I32 val Returns \u00b6 I32 val ipproto_etherip \u00b6 [Source] fun box ipproto_etherip() : I32 val Returns \u00b6 I32 val ipproto_fragment \u00b6 [Source] fun box ipproto_fragment() : I32 val Returns \u00b6 I32 val ipproto_ggp \u00b6 [Source] fun box ipproto_ggp() : I32 val Returns \u00b6 I32 val ipproto_gmtp \u00b6 [Source] fun box ipproto_gmtp() : I32 val Returns \u00b6 I32 val ipproto_gre \u00b6 [Source] fun box ipproto_gre() : I32 val Returns \u00b6 I32 val ipproto_hello \u00b6 [Source] fun box ipproto_hello() : I32 val Returns \u00b6 I32 val ipproto_hip \u00b6 [Source] fun box ipproto_hip() : I32 val Returns \u00b6 I32 val ipproto_hmp \u00b6 [Source] fun box ipproto_hmp() : I32 val Returns \u00b6 I32 val ipproto_hopopts \u00b6 [Source] fun box ipproto_hopopts() : I32 val Returns \u00b6 I32 val ipproto_icmp \u00b6 [Source] fun box ipproto_icmp() : I32 val Returns \u00b6 I32 val ipproto_icmpv6 \u00b6 [Source] fun box ipproto_icmpv6() : I32 val Returns \u00b6 I32 val ipproto_idp \u00b6 [Source] fun box ipproto_idp() : I32 val Returns \u00b6 I32 val ipproto_idpr \u00b6 [Source] fun box ipproto_idpr() : I32 val Returns \u00b6 I32 val ipproto_idrp \u00b6 [Source] fun box ipproto_idrp() : I32 val Returns \u00b6 I32 val ipproto_igmp \u00b6 [Source] fun box ipproto_igmp() : I32 val Returns \u00b6 I32 val ipproto_igp \u00b6 [Source] fun box ipproto_igp() : I32 val Returns \u00b6 I32 val ipproto_igrp \u00b6 [Source] fun box ipproto_igrp() : I32 val Returns \u00b6 I32 val ipproto_il \u00b6 [Source] fun box ipproto_il() : I32 val Returns \u00b6 I32 val ipproto_inlsp \u00b6 [Source] fun box ipproto_inlsp() : I32 val Returns \u00b6 I32 val ipproto_inp \u00b6 [Source] fun box ipproto_inp() : I32 val Returns \u00b6 I32 val ipproto_ip \u00b6 [Source] fun box ipproto_ip() : I32 val Returns \u00b6 I32 val ipproto_ipcomp \u00b6 [Source] fun box ipproto_ipcomp() : I32 val Returns \u00b6 I32 val ipproto_ipcv \u00b6 [Source] fun box ipproto_ipcv() : I32 val Returns \u00b6 I32 val ipproto_ipeip \u00b6 [Source] fun box ipproto_ipeip() : I32 val Returns \u00b6 I32 val ipproto_ipip \u00b6 [Source] fun box ipproto_ipip() : I32 val Returns \u00b6 I32 val ipproto_ippc \u00b6 [Source] fun box ipproto_ippc() : I32 val Returns \u00b6 I32 val ipproto_ipv4 \u00b6 [Source] fun box ipproto_ipv4() : I32 val Returns \u00b6 I32 val ipproto_ipv6 \u00b6 [Source] fun box ipproto_ipv6() : I32 val Returns \u00b6 I32 val ipproto_irtp \u00b6 [Source] fun box ipproto_irtp() : I32 val Returns \u00b6 I32 val ipproto_kryptolan \u00b6 [Source] fun box ipproto_kryptolan() : I32 val Returns \u00b6 I32 val ipproto_larp \u00b6 [Source] fun box ipproto_larp() : I32 val Returns \u00b6 I32 val ipproto_leaf1 \u00b6 [Source] fun box ipproto_leaf1() : I32 val Returns \u00b6 I32 val ipproto_leaf2 \u00b6 [Source] fun box ipproto_leaf2() : I32 val Returns \u00b6 I32 val ipproto_max \u00b6 [Source] fun box ipproto_max() : I32 val Returns \u00b6 I32 val ipproto_maxid \u00b6 [Source] fun box ipproto_maxid() : I32 val Returns \u00b6 I32 val ipproto_meas \u00b6 [Source] fun box ipproto_meas() : I32 val Returns \u00b6 I32 val ipproto_mh \u00b6 [Source] fun box ipproto_mh() : I32 val Returns \u00b6 I32 val ipproto_mhrp \u00b6 [Source] fun box ipproto_mhrp() : I32 val Returns \u00b6 I32 val ipproto_micp \u00b6 [Source] fun box ipproto_micp() : I32 val Returns \u00b6 I32 val ipproto_mobile \u00b6 [Source] fun box ipproto_mobile() : I32 val Returns \u00b6 I32 val ipproto_mpls \u00b6 [Source] fun box ipproto_mpls() : I32 val Returns \u00b6 I32 val ipproto_mtp \u00b6 [Source] fun box ipproto_mtp() : I32 val Returns \u00b6 I32 val ipproto_mux \u00b6 [Source] fun box ipproto_mux() : I32 val Returns \u00b6 I32 val ipproto_nd \u00b6 [Source] fun box ipproto_nd() : I32 val Returns \u00b6 I32 val ipproto_nhrp \u00b6 [Source] fun box ipproto_nhrp() : I32 val Returns \u00b6 I32 val ipproto_none \u00b6 [Source] fun box ipproto_none() : I32 val Returns \u00b6 I32 val ipproto_nsp \u00b6 [Source] fun box ipproto_nsp() : I32 val Returns \u00b6 I32 val ipproto_nvpii \u00b6 [Source] fun box ipproto_nvpii() : I32 val Returns \u00b6 I32 val ipproto_old_divert \u00b6 [Source] fun box ipproto_old_divert() : I32 val Returns \u00b6 I32 val ipproto_ospfigp \u00b6 [Source] fun box ipproto_ospfigp() : I32 val Returns \u00b6 I32 val ipproto_pfsync \u00b6 [Source] fun box ipproto_pfsync() : I32 val Returns \u00b6 I32 val ipproto_pgm \u00b6 [Source] fun box ipproto_pgm() : I32 val Returns \u00b6 I32 val ipproto_pigp \u00b6 [Source] fun box ipproto_pigp() : I32 val Returns \u00b6 I32 val ipproto_pim \u00b6 [Source] fun box ipproto_pim() : I32 val Returns \u00b6 I32 val ipproto_prm \u00b6 [Source] fun box ipproto_prm() : I32 val Returns \u00b6 I32 val ipproto_pup \u00b6 [Source] fun box ipproto_pup() : I32 val Returns \u00b6 I32 val ipproto_pvp \u00b6 [Source] fun box ipproto_pvp() : I32 val Returns \u00b6 I32 val ipproto_raw \u00b6 [Source] fun box ipproto_raw() : I32 val Returns \u00b6 I32 val ipproto_rccmon \u00b6 [Source] fun box ipproto_rccmon() : I32 val Returns \u00b6 I32 val ipproto_rdp \u00b6 [Source] fun box ipproto_rdp() : I32 val Returns \u00b6 I32 val ipproto_reserved_253 \u00b6 [Source] fun box ipproto_reserved_253() : I32 val Returns \u00b6 I32 val ipproto_reserved_254 \u00b6 [Source] fun box ipproto_reserved_254() : I32 val Returns \u00b6 I32 val ipproto_routing \u00b6 [Source] fun box ipproto_routing() : I32 val Returns \u00b6 I32 val ipproto_rsvp \u00b6 [Source] fun box ipproto_rsvp() : I32 val Returns \u00b6 I32 val ipproto_rvd \u00b6 [Source] fun box ipproto_rvd() : I32 val Returns \u00b6 I32 val ipproto_satexpak \u00b6 [Source] fun box ipproto_satexpak() : I32 val Returns \u00b6 I32 val ipproto_satmon \u00b6 [Source] fun box ipproto_satmon() : I32 val Returns \u00b6 I32 val ipproto_sccsp \u00b6 [Source] fun box ipproto_sccsp() : I32 val Returns \u00b6 I32 val ipproto_sctp \u00b6 [Source] fun box ipproto_sctp() : I32 val Returns \u00b6 I32 val ipproto_sdrp \u00b6 [Source] fun box ipproto_sdrp() : I32 val Returns \u00b6 I32 val ipproto_send \u00b6 [Source] fun box ipproto_send() : I32 val Returns \u00b6 I32 val ipproto_sep \u00b6 [Source] fun box ipproto_sep() : I32 val Returns \u00b6 I32 val ipproto_shim6 \u00b6 [Source] fun box ipproto_shim6() : I32 val Returns \u00b6 I32 val ipproto_skip \u00b6 [Source] fun box ipproto_skip() : I32 val Returns \u00b6 I32 val ipproto_spacer \u00b6 [Source] fun box ipproto_spacer() : I32 val Returns \u00b6 I32 val ipproto_srpc \u00b6 [Source] fun box ipproto_srpc() : I32 val Returns \u00b6 I32 val ipproto_st \u00b6 [Source] fun box ipproto_st() : I32 val Returns \u00b6 I32 val ipproto_svmtp \u00b6 [Source] fun box ipproto_svmtp() : I32 val Returns \u00b6 I32 val ipproto_swipe \u00b6 [Source] fun box ipproto_swipe() : I32 val Returns \u00b6 I32 val ipproto_tcf \u00b6 [Source] fun box ipproto_tcf() : I32 val Returns \u00b6 I32 val ipproto_tcp \u00b6 [Source] fun box ipproto_tcp() : I32 val Returns \u00b6 I32 val ipproto_tlsp \u00b6 [Source] fun box ipproto_tlsp() : I32 val Returns \u00b6 I32 val ipproto_tp \u00b6 [Source] fun box ipproto_tp() : I32 val Returns \u00b6 I32 val ipproto_tpxx \u00b6 [Source] fun box ipproto_tpxx() : I32 val Returns \u00b6 I32 val ipproto_trunk1 \u00b6 [Source] fun box ipproto_trunk1() : I32 val Returns \u00b6 I32 val ipproto_trunk2 \u00b6 [Source] fun box ipproto_trunk2() : I32 val Returns \u00b6 I32 val ipproto_ttp \u00b6 [Source] fun box ipproto_ttp() : I32 val Returns \u00b6 I32 val ipproto_udp \u00b6 [Source] fun box ipproto_udp() : I32 val Returns \u00b6 I32 val ipproto_udplite \u00b6 [Source] fun box ipproto_udplite() : I32 val Returns \u00b6 I32 val ipproto_vines \u00b6 [Source] fun box ipproto_vines() : I32 val Returns \u00b6 I32 val ipproto_visa \u00b6 [Source] fun box ipproto_visa() : I32 val Returns \u00b6 I32 val ipproto_vmtp \u00b6 [Source] fun box ipproto_vmtp() : I32 val Returns \u00b6 I32 val ipproto_wbexpak \u00b6 [Source] fun box ipproto_wbexpak() : I32 val Returns \u00b6 I32 val ipproto_wbmon \u00b6 [Source] fun box ipproto_wbmon() : I32 val Returns \u00b6 I32 val ipproto_wsn \u00b6 [Source] fun box ipproto_wsn() : I32 val Returns \u00b6 I32 val ipproto_xnet \u00b6 [Source] fun box ipproto_xnet() : I32 val Returns \u00b6 I32 val ipproto_xtp \u00b6 [Source] fun box ipproto_xtp() : I32 val Returns \u00b6 I32 val sol_atalk \u00b6 [Source] fun box sol_atalk() : I32 val Returns \u00b6 I32 val sol_ax25 \u00b6 [Source] fun box sol_ax25() : I32 val Returns \u00b6 I32 val sol_hci_raw \u00b6 [Source] fun box sol_hci_raw() : I32 val Returns \u00b6 I32 val sol_ipx \u00b6 [Source] fun box sol_ipx() : I32 val Returns \u00b6 I32 val sol_l2cap \u00b6 [Source] fun box sol_l2cap() : I32 val Returns \u00b6 I32 val sol_local \u00b6 [Source] fun box sol_local() : I32 val Returns \u00b6 I32 val sol_ndrvproto \u00b6 [Source] fun box sol_ndrvproto() : I32 val Returns \u00b6 I32 val sol_netrom \u00b6 [Source] fun box sol_netrom() : I32 val Returns \u00b6 I32 val sol_rds \u00b6 [Source] fun box sol_rds() : I32 val Returns \u00b6 I32 val sol_rfcomm \u00b6 [Source] fun box sol_rfcomm() : I32 val Returns \u00b6 I32 val sol_rose \u00b6 [Source] fun box sol_rose() : I32 val Returns \u00b6 I32 val sol_sco \u00b6 [Source] fun box sol_sco() : I32 val Returns \u00b6 I32 val sol_socket \u00b6 [Source] fun box sol_socket() : I32 val Returns \u00b6 I32 val sol_tipc \u00b6 [Source] fun box sol_tipc() : I32 val Returns \u00b6 I32 val sol_udp \u00b6 [Source] fun box sol_udp() : I32 val Returns \u00b6 I32 val af_coip \u00b6 [Source] fun box af_coip() : I32 val Returns \u00b6 I32 val af_inet \u00b6 [Source] fun box af_inet() : I32 val Returns \u00b6 I32 val af_inet6 \u00b6 [Source] fun box af_inet6() : I32 val Returns \u00b6 I32 val bluetooth_proto_sco \u00b6 [Source] fun box bluetooth_proto_sco() : I32 val Returns \u00b6 I32 val dccp_nr_pkt_types \u00b6 [Source] fun box dccp_nr_pkt_types() : I32 val Returns \u00b6 I32 val dccp_service_list_max_len \u00b6 [Source] fun box dccp_service_list_max_len() : I32 val Returns \u00b6 I32 val dccp_single_opt_maxlen \u00b6 [Source] fun box dccp_single_opt_maxlen() : I32 val Returns \u00b6 I32 val dccp_sockopt_available_ccids \u00b6 [Source] fun box dccp_sockopt_available_ccids() : I32 val Returns \u00b6 I32 val dccp_sockopt_ccid \u00b6 [Source] fun box dccp_sockopt_ccid() : I32 val Returns \u00b6 I32 val dccp_sockopt_ccid_rx_info \u00b6 [Source] fun box dccp_sockopt_ccid_rx_info() : I32 val Returns \u00b6 I32 val dccp_sockopt_ccid_tx_info \u00b6 [Source] fun box dccp_sockopt_ccid_tx_info() : I32 val Returns \u00b6 I32 val dccp_sockopt_change_l \u00b6 [Source] fun box dccp_sockopt_change_l() : I32 val Returns \u00b6 I32 val dccp_sockopt_change_r \u00b6 [Source] fun box dccp_sockopt_change_r() : I32 val Returns \u00b6 I32 val dccp_sockopt_get_cur_mps \u00b6 [Source] fun box dccp_sockopt_get_cur_mps() : I32 val Returns \u00b6 I32 val dccp_sockopt_packet_size \u00b6 [Source] fun box dccp_sockopt_packet_size() : I32 val Returns \u00b6 I32 val dccp_sockopt_qpolicy_id \u00b6 [Source] fun box dccp_sockopt_qpolicy_id() : I32 val Returns \u00b6 I32 val dccp_sockopt_qpolicy_txqlen \u00b6 [Source] fun box dccp_sockopt_qpolicy_txqlen() : I32 val Returns \u00b6 I32 val dccp_sockopt_recv_cscov \u00b6 [Source] fun box dccp_sockopt_recv_cscov() : I32 val Returns \u00b6 I32 val dccp_sockopt_rx_ccid \u00b6 [Source] fun box dccp_sockopt_rx_ccid() : I32 val Returns \u00b6 I32 val dccp_sockopt_send_cscov \u00b6 [Source] fun box dccp_sockopt_send_cscov() : I32 val Returns \u00b6 I32 val dccp_sockopt_server_timewait \u00b6 [Source] fun box dccp_sockopt_server_timewait() : I32 val Returns \u00b6 I32 val dccp_sockopt_service \u00b6 [Source] fun box dccp_sockopt_service() : I32 val Returns \u00b6 I32 val dccp_sockopt_tx_ccid \u00b6 [Source] fun box dccp_sockopt_tx_ccid() : I32 val Returns \u00b6 I32 val dso_acceptmode \u00b6 [Source] fun box dso_acceptmode() : I32 val Returns \u00b6 I32 val dso_conaccept \u00b6 [Source] fun box dso_conaccept() : I32 val Returns \u00b6 I32 val dso_conaccess \u00b6 [Source] fun box dso_conaccess() : I32 val Returns \u00b6 I32 val dso_condata \u00b6 [Source] fun box dso_condata() : I32 val Returns \u00b6 I32 val dso_conreject \u00b6 [Source] fun box dso_conreject() : I32 val Returns \u00b6 I32 val dso_cork \u00b6 [Source] fun box dso_cork() : I32 val Returns \u00b6 I32 val dso_disdata \u00b6 [Source] fun box dso_disdata() : I32 val Returns \u00b6 I32 val dso_info \u00b6 [Source] fun box dso_info() : I32 val Returns \u00b6 I32 val dso_linkinfo \u00b6 [Source] fun box dso_linkinfo() : I32 val Returns \u00b6 I32 val dso_max \u00b6 [Source] fun box dso_max() : I32 val Returns \u00b6 I32 val dso_maxwindow \u00b6 [Source] fun box dso_maxwindow() : I32 val Returns \u00b6 I32 val dso_nodelay \u00b6 [Source] fun box dso_nodelay() : I32 val Returns \u00b6 I32 val dso_seqpacket \u00b6 [Source] fun box dso_seqpacket() : I32 val Returns \u00b6 I32 val dso_services \u00b6 [Source] fun box dso_services() : I32 val Returns \u00b6 I32 val dso_stream \u00b6 [Source] fun box dso_stream() : I32 val Returns \u00b6 I32 val icmp_address \u00b6 [Source] fun box icmp_address() : I32 val Returns \u00b6 I32 val icmp_addressreply \u00b6 [Source] fun box icmp_addressreply() : I32 val Returns \u00b6 I32 val icmp_dest_unreach \u00b6 [Source] fun box icmp_dest_unreach() : I32 val Returns \u00b6 I32 val icmp_echo \u00b6 [Source] fun box icmp_echo() : I32 val Returns \u00b6 I32 val icmp_echoreply \u00b6 [Source] fun box icmp_echoreply() : I32 val Returns \u00b6 I32 val icmp_exc_fragtime \u00b6 [Source] fun box icmp_exc_fragtime() : I32 val Returns \u00b6 I32 val icmp_exc_ttl \u00b6 [Source] fun box icmp_exc_ttl() : I32 val Returns \u00b6 I32 val icmp_filter \u00b6 [Source] fun box icmp_filter() : I32 val Returns \u00b6 I32 val icmp_frag_needed \u00b6 [Source] fun box icmp_frag_needed() : I32 val Returns \u00b6 I32 val icmp_host_ano \u00b6 [Source] fun box icmp_host_ano() : I32 val Returns \u00b6 I32 val icmp_host_isolated \u00b6 [Source] fun box icmp_host_isolated() : I32 val Returns \u00b6 I32 val icmp_host_unknown \u00b6 [Source] fun box icmp_host_unknown() : I32 val Returns \u00b6 I32 val icmp_host_unreach \u00b6 [Source] fun box icmp_host_unreach() : I32 val Returns \u00b6 I32 val icmp_host_unr_tos \u00b6 [Source] fun box icmp_host_unr_tos() : I32 val Returns \u00b6 I32 val icmp_info_reply \u00b6 [Source] fun box icmp_info_reply() : I32 val Returns \u00b6 I32 val icmp_info_request \u00b6 [Source] fun box icmp_info_request() : I32 val Returns \u00b6 I32 val icmp_net_ano \u00b6 [Source] fun box icmp_net_ano() : I32 val Returns \u00b6 I32 val icmp_net_unknown \u00b6 [Source] fun box icmp_net_unknown() : I32 val Returns \u00b6 I32 val icmp_net_unreach \u00b6 [Source] fun box icmp_net_unreach() : I32 val Returns \u00b6 I32 val icmp_net_unr_tos \u00b6 [Source] fun box icmp_net_unr_tos() : I32 val Returns \u00b6 I32 val icmp_parameterprob \u00b6 [Source] fun box icmp_parameterprob() : I32 val Returns \u00b6 I32 val icmp_pkt_filtered \u00b6 [Source] fun box icmp_pkt_filtered() : I32 val Returns \u00b6 I32 val icmp_port_unreach \u00b6 [Source] fun box icmp_port_unreach() : I32 val Returns \u00b6 I32 val icmp_prec_cutoff \u00b6 [Source] fun box icmp_prec_cutoff() : I32 val Returns \u00b6 I32 val icmp_prec_violation \u00b6 [Source] fun box icmp_prec_violation() : I32 val Returns \u00b6 I32 val icmp_prot_unreach \u00b6 [Source] fun box icmp_prot_unreach() : I32 val Returns \u00b6 I32 val icmp_redirect \u00b6 [Source] fun box icmp_redirect() : I32 val Returns \u00b6 I32 val icmp_redir_host \u00b6 [Source] fun box icmp_redir_host() : I32 val Returns \u00b6 I32 val icmp_redir_hosttos \u00b6 [Source] fun box icmp_redir_hosttos() : I32 val Returns \u00b6 I32 val icmp_redir_net \u00b6 [Source] fun box icmp_redir_net() : I32 val Returns \u00b6 I32 val icmp_redir_nettos \u00b6 [Source] fun box icmp_redir_nettos() : I32 val Returns \u00b6 I32 val icmp_source_quench \u00b6 [Source] fun box icmp_source_quench() : I32 val Returns \u00b6 I32 val icmp_sr_failed \u00b6 [Source] fun box icmp_sr_failed() : I32 val Returns \u00b6 I32 val icmp_timestamp \u00b6 [Source] fun box icmp_timestamp() : I32 val Returns \u00b6 I32 val icmp_timestampreply \u00b6 [Source] fun box icmp_timestampreply() : I32 val Returns \u00b6 I32 val icmp_time_exceeded \u00b6 [Source] fun box icmp_time_exceeded() : I32 val Returns \u00b6 I32 val ipctl_acceptsourceroute \u00b6 [Source] fun box ipctl_acceptsourceroute() : I32 val Returns \u00b6 I32 val ipctl_defmtu \u00b6 [Source] fun box ipctl_defmtu() : I32 val Returns \u00b6 I32 val ipctl_defttl \u00b6 [Source] fun box ipctl_defttl() : I32 val Returns \u00b6 I32 val ipctl_directedbroadcast \u00b6 [Source] fun box ipctl_directedbroadcast() : I32 val Returns \u00b6 I32 val ipctl_fastforwarding \u00b6 [Source] fun box ipctl_fastforwarding() : I32 val Returns \u00b6 I32 val ipctl_forwarding \u00b6 [Source] fun box ipctl_forwarding() : I32 val Returns \u00b6 I32 val ipctl_gif_ttl \u00b6 [Source] fun box ipctl_gif_ttl() : I32 val Returns \u00b6 I32 val ipctl_intrdqdrops \u00b6 [Source] fun box ipctl_intrdqdrops() : I32 val Returns \u00b6 I32 val ipctl_intrdqmaxlen \u00b6 [Source] fun box ipctl_intrdqmaxlen() : I32 val Returns \u00b6 I32 val ipctl_intrqdrops \u00b6 [Source] fun box ipctl_intrqdrops() : I32 val Returns \u00b6 I32 val ipctl_intrqmaxlen \u00b6 [Source] fun box ipctl_intrqmaxlen() : I32 val Returns \u00b6 I32 val ipctl_keepfaith \u00b6 [Source] fun box ipctl_keepfaith() : I32 val Returns \u00b6 I32 val ipctl_maxid \u00b6 [Source] fun box ipctl_maxid() : I32 val Returns \u00b6 I32 val ipctl_rtexpire \u00b6 [Source] fun box ipctl_rtexpire() : I32 val Returns \u00b6 I32 val ipctl_rtmaxcache \u00b6 [Source] fun box ipctl_rtmaxcache() : I32 val Returns \u00b6 I32 val ipctl_rtminexpire \u00b6 [Source] fun box ipctl_rtminexpire() : I32 val Returns \u00b6 I32 val ipctl_sendredirects \u00b6 [Source] fun box ipctl_sendredirects() : I32 val Returns \u00b6 I32 val ipctl_sourceroute \u00b6 [Source] fun box ipctl_sourceroute() : I32 val Returns \u00b6 I32 val ipctl_stats \u00b6 [Source] fun box ipctl_stats() : I32 val Returns \u00b6 I32 val ipport_ephemeralfirst \u00b6 [Source] fun box ipport_ephemeralfirst() : I32 val Returns \u00b6 I32 val ipport_ephemerallast \u00b6 [Source] fun box ipport_ephemerallast() : I32 val Returns \u00b6 I32 val ipport_hifirstauto \u00b6 [Source] fun box ipport_hifirstauto() : I32 val Returns \u00b6 I32 val ipport_hilastauto \u00b6 [Source] fun box ipport_hilastauto() : I32 val Returns \u00b6 I32 val ipport_max \u00b6 [Source] fun box ipport_max() : I32 val Returns \u00b6 I32 val ipport_reserved \u00b6 [Source] fun box ipport_reserved() : I32 val Returns \u00b6 I32 val ipport_reservedstart \u00b6 [Source] fun box ipport_reservedstart() : I32 val Returns \u00b6 I32 val ipport_userreserved \u00b6 [Source] fun box ipport_userreserved() : I32 val Returns \u00b6 I32 val ipv6_2292dstopts \u00b6 [Source] fun box ipv6_2292dstopts() : I32 val Returns \u00b6 I32 val ipv6_2292hoplimit \u00b6 [Source] fun box ipv6_2292hoplimit() : I32 val Returns \u00b6 I32 val ipv6_2292hopopts \u00b6 [Source] fun box ipv6_2292hopopts() : I32 val Returns \u00b6 I32 val ipv6_2292pktinfo \u00b6 [Source] fun box ipv6_2292pktinfo() : I32 val Returns \u00b6 I32 val ipv6_2292pktoptions \u00b6 [Source] fun box ipv6_2292pktoptions() : I32 val Returns \u00b6 I32 val ipv6_2292rthdr \u00b6 [Source] fun box ipv6_2292rthdr() : I32 val Returns \u00b6 I32 val ipv6_addrform \u00b6 [Source] fun box ipv6_addrform() : I32 val Returns \u00b6 I32 val ipv6_addr_preferences \u00b6 [Source] fun box ipv6_addr_preferences() : I32 val Returns \u00b6 I32 val ipv6_add_membership \u00b6 [Source] fun box ipv6_add_membership() : I32 val Returns \u00b6 I32 val ipv6_authhdr \u00b6 [Source] fun box ipv6_authhdr() : I32 val Returns \u00b6 I32 val ipv6_autoflowlabel \u00b6 [Source] fun box ipv6_autoflowlabel() : I32 val Returns \u00b6 I32 val ipv6_checksum \u00b6 [Source] fun box ipv6_checksum() : I32 val Returns \u00b6 I32 val ipv6_dontfrag \u00b6 [Source] fun box ipv6_dontfrag() : I32 val Returns \u00b6 I32 val ipv6_drop_membership \u00b6 [Source] fun box ipv6_drop_membership() : I32 val Returns \u00b6 I32 val ipv6_dstopts \u00b6 [Source] fun box ipv6_dstopts() : I32 val Returns \u00b6 I32 val ipv6_flowinfo \u00b6 [Source] fun box ipv6_flowinfo() : I32 val Returns \u00b6 I32 val ipv6_flowinfo_flowlabel \u00b6 [Source] fun box ipv6_flowinfo_flowlabel() : I32 val Returns \u00b6 I32 val ipv6_flowinfo_priority \u00b6 [Source] fun box ipv6_flowinfo_priority() : I32 val Returns \u00b6 I32 val ipv6_flowinfo_send \u00b6 [Source] fun box ipv6_flowinfo_send() : I32 val Returns \u00b6 I32 val ipv6_flowlabel_mgr \u00b6 [Source] fun box ipv6_flowlabel_mgr() : I32 val Returns \u00b6 I32 val ipv6_fl_a_get \u00b6 [Source] fun box ipv6_fl_a_get() : I32 val Returns \u00b6 I32 val ipv6_fl_a_put \u00b6 [Source] fun box ipv6_fl_a_put() : I32 val Returns \u00b6 I32 val ipv6_fl_a_renew \u00b6 [Source] fun box ipv6_fl_a_renew() : I32 val Returns \u00b6 I32 val ipv6_fl_f_create \u00b6 [Source] fun box ipv6_fl_f_create() : I32 val Returns \u00b6 I32 val ipv6_fl_f_excl \u00b6 [Source] fun box ipv6_fl_f_excl() : I32 val Returns \u00b6 I32 val ipv6_fl_f_reflect \u00b6 [Source] fun box ipv6_fl_f_reflect() : I32 val Returns \u00b6 I32 val ipv6_fl_f_remote \u00b6 [Source] fun box ipv6_fl_f_remote() : I32 val Returns \u00b6 I32 val ipv6_fl_s_any \u00b6 [Source] fun box ipv6_fl_s_any() : I32 val Returns \u00b6 I32 val ipv6_fl_s_excl \u00b6 [Source] fun box ipv6_fl_s_excl() : I32 val Returns \u00b6 I32 val ipv6_fl_s_none \u00b6 [Source] fun box ipv6_fl_s_none() : I32 val Returns \u00b6 I32 val ipv6_fl_s_process \u00b6 [Source] fun box ipv6_fl_s_process() : I32 val Returns \u00b6 I32 val ipv6_fl_s_user \u00b6 [Source] fun box ipv6_fl_s_user() : I32 val Returns \u00b6 I32 val ipv6_hoplimit \u00b6 [Source] fun box ipv6_hoplimit() : I32 val Returns \u00b6 I32 val ipv6_hopopts \u00b6 [Source] fun box ipv6_hopopts() : I32 val Returns \u00b6 I32 val ipv6_ipsec_policy \u00b6 [Source] fun box ipv6_ipsec_policy() : I32 val Returns \u00b6 I32 val ipv6_join_anycast \u00b6 [Source] fun box ipv6_join_anycast() : I32 val Returns \u00b6 I32 val ipv6_leave_anycast \u00b6 [Source] fun box ipv6_leave_anycast() : I32 val Returns \u00b6 I32 val ipv6_minhopcount \u00b6 [Source] fun box ipv6_minhopcount() : I32 val Returns \u00b6 I32 val ipv6_mtu \u00b6 [Source] fun box ipv6_mtu() : I32 val Returns \u00b6 I32 val ipv6_mtu_discover \u00b6 [Source] fun box ipv6_mtu_discover() : I32 val Returns \u00b6 I32 val ipv6_multicast_hops \u00b6 [Source] fun box ipv6_multicast_hops() : I32 val Returns \u00b6 I32 val ipv6_multicast_if \u00b6 [Source] fun box ipv6_multicast_if() : I32 val Returns \u00b6 I32 val ipv6_multicast_loop \u00b6 [Source] fun box ipv6_multicast_loop() : I32 val Returns \u00b6 I32 val ipv6_nexthop \u00b6 [Source] fun box ipv6_nexthop() : I32 val Returns \u00b6 I32 val ipv6_origdstaddr \u00b6 [Source] fun box ipv6_origdstaddr() : I32 val Returns \u00b6 I32 val ipv6_pathmtu \u00b6 [Source] fun box ipv6_pathmtu() : I32 val Returns \u00b6 I32 val ipv6_pktinfo \u00b6 [Source] fun box ipv6_pktinfo() : I32 val Returns \u00b6 I32 val ipv6_pmtudisc_do \u00b6 [Source] fun box ipv6_pmtudisc_do() : I32 val Returns \u00b6 I32 val ipv6_pmtudisc_dont \u00b6 [Source] fun box ipv6_pmtudisc_dont() : I32 val Returns \u00b6 I32 val ipv6_pmtudisc_interface \u00b6 [Source] fun box ipv6_pmtudisc_interface() : I32 val Returns \u00b6 I32 val ipv6_pmtudisc_omit \u00b6 [Source] fun box ipv6_pmtudisc_omit() : I32 val Returns \u00b6 I32 val ipv6_pmtudisc_probe \u00b6 [Source] fun box ipv6_pmtudisc_probe() : I32 val Returns \u00b6 I32 val ipv6_pmtudisc_want \u00b6 [Source] fun box ipv6_pmtudisc_want() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_cga \u00b6 [Source] fun box ipv6_prefer_src_cga() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_coa \u00b6 [Source] fun box ipv6_prefer_src_coa() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_home \u00b6 [Source] fun box ipv6_prefer_src_home() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_noncga \u00b6 [Source] fun box ipv6_prefer_src_noncga() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_public \u00b6 [Source] fun box ipv6_prefer_src_public() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_pubtmp_default \u00b6 [Source] fun box ipv6_prefer_src_pubtmp_default() : I32 val Returns \u00b6 I32 val ipv6_prefer_src_tmp \u00b6 [Source] fun box ipv6_prefer_src_tmp() : I32 val Returns \u00b6 I32 val ipv6_priority_10 \u00b6 [Source] fun box ipv6_priority_10() : I32 val Returns \u00b6 I32 val ipv6_priority_11 \u00b6 [Source] fun box ipv6_priority_11() : I32 val Returns \u00b6 I32 val ipv6_priority_12 \u00b6 [Source] fun box ipv6_priority_12() : I32 val Returns \u00b6 I32 val ipv6_priority_13 \u00b6 [Source] fun box ipv6_priority_13() : I32 val Returns \u00b6 I32 val ipv6_priority_14 \u00b6 [Source] fun box ipv6_priority_14() : I32 val Returns \u00b6 I32 val ipv6_priority_15 \u00b6 [Source] fun box ipv6_priority_15() : I32 val Returns \u00b6 I32 val ipv6_priority_8 \u00b6 [Source] fun box ipv6_priority_8() : I32 val Returns \u00b6 I32 val ipv6_priority_9 \u00b6 [Source] fun box ipv6_priority_9() : I32 val Returns \u00b6 I32 val ipv6_priority_bulk \u00b6 [Source] fun box ipv6_priority_bulk() : I32 val Returns \u00b6 I32 val ipv6_priority_control \u00b6 [Source] fun box ipv6_priority_control() : I32 val Returns \u00b6 I32 val ipv6_priority_filler \u00b6 [Source] fun box ipv6_priority_filler() : I32 val Returns \u00b6 I32 val ipv6_priority_interactive \u00b6 [Source] fun box ipv6_priority_interactive() : I32 val Returns \u00b6 I32 val ipv6_priority_reserved1 \u00b6 [Source] fun box ipv6_priority_reserved1() : I32 val Returns \u00b6 I32 val ipv6_priority_reserved2 \u00b6 [Source] fun box ipv6_priority_reserved2() : I32 val Returns \u00b6 I32 val ipv6_priority_unattended \u00b6 [Source] fun box ipv6_priority_unattended() : I32 val Returns \u00b6 I32 val ipv6_priority_uncharacterized \u00b6 [Source] fun box ipv6_priority_uncharacterized() : I32 val Returns \u00b6 I32 val ipv6_recvdstopts \u00b6 [Source] fun box ipv6_recvdstopts() : I32 val Returns \u00b6 I32 val ipv6_recverr \u00b6 [Source] fun box ipv6_recverr() : I32 val Returns \u00b6 I32 val ipv6_recvhoplimit \u00b6 [Source] fun box ipv6_recvhoplimit() : I32 val Returns \u00b6 I32 val ipv6_recvhopopts \u00b6 [Source] fun box ipv6_recvhopopts() : I32 val Returns \u00b6 I32 val ipv6_recvorigdstaddr \u00b6 [Source] fun box ipv6_recvorigdstaddr() : I32 val Returns \u00b6 I32 val ipv6_recvpathmtu \u00b6 [Source] fun box ipv6_recvpathmtu() : I32 val Returns \u00b6 I32 val ipv6_recvpktinfo \u00b6 [Source] fun box ipv6_recvpktinfo() : I32 val Returns \u00b6 I32 val ipv6_recvrthdr \u00b6 [Source] fun box ipv6_recvrthdr() : I32 val Returns \u00b6 I32 val ipv6_recvtclass \u00b6 [Source] fun box ipv6_recvtclass() : I32 val Returns \u00b6 I32 val ipv6_router_alert \u00b6 [Source] fun box ipv6_router_alert() : I32 val Returns \u00b6 I32 val ipv6_rthdr \u00b6 [Source] fun box ipv6_rthdr() : I32 val Returns \u00b6 I32 val ipv6_rthdrdstopts \u00b6 [Source] fun box ipv6_rthdrdstopts() : I32 val Returns \u00b6 I32 val ipv6_tclass \u00b6 [Source] fun box ipv6_tclass() : I32 val Returns \u00b6 I32 val ipv6_tlv_hao \u00b6 [Source] fun box ipv6_tlv_hao() : I32 val Returns \u00b6 I32 val ipv6_tlv_jumbo \u00b6 [Source] fun box ipv6_tlv_jumbo() : I32 val Returns \u00b6 I32 val ipv6_tlv_pad1 \u00b6 [Source] fun box ipv6_tlv_pad1() : I32 val Returns \u00b6 I32 val ipv6_tlv_padn \u00b6 [Source] fun box ipv6_tlv_padn() : I32 val Returns \u00b6 I32 val ipv6_tlv_routeralert \u00b6 [Source] fun box ipv6_tlv_routeralert() : I32 val Returns \u00b6 I32 val ipv6_transparent \u00b6 [Source] fun box ipv6_transparent() : I32 val Returns \u00b6 I32 val ipv6_unicast_hops \u00b6 [Source] fun box ipv6_unicast_hops() : I32 val Returns \u00b6 I32 val ipv6_unicast_if \u00b6 [Source] fun box ipv6_unicast_if() : I32 val Returns \u00b6 I32 val ipv6_use_min_mtu \u00b6 [Source] fun box ipv6_use_min_mtu() : I32 val Returns \u00b6 I32 val ipv6_v6only \u00b6 [Source] fun box ipv6_v6only() : I32 val Returns \u00b6 I32 val ipv6_xfrm_policy \u00b6 [Source] fun box ipv6_xfrm_policy() : I32 val Returns \u00b6 I32 val ipx_address \u00b6 [Source] fun box ipx_address() : I32 val Returns \u00b6 I32 val ipx_address_notify \u00b6 [Source] fun box ipx_address_notify() : I32 val Returns \u00b6 I32 val ipx_crtitf \u00b6 [Source] fun box ipx_crtitf() : I32 val Returns \u00b6 I32 val ipx_dltitf \u00b6 [Source] fun box ipx_dltitf() : I32 val Returns \u00b6 I32 val ipx_dstype \u00b6 [Source] fun box ipx_dstype() : I32 val Returns \u00b6 I32 val ipx_extended_address \u00b6 [Source] fun box ipx_extended_address() : I32 val Returns \u00b6 I32 val ipx_filterptype \u00b6 [Source] fun box ipx_filterptype() : I32 val Returns \u00b6 I32 val ipx_frame_8022 \u00b6 [Source] fun box ipx_frame_8022() : I32 val Returns \u00b6 I32 val ipx_frame_8023 \u00b6 [Source] fun box ipx_frame_8023() : I32 val Returns \u00b6 I32 val ipx_frame_etherii \u00b6 [Source] fun box ipx_frame_etherii() : I32 val Returns \u00b6 I32 val ipx_frame_none \u00b6 [Source] fun box ipx_frame_none() : I32 val Returns \u00b6 I32 val ipx_frame_snap \u00b6 [Source] fun box ipx_frame_snap() : I32 val Returns \u00b6 I32 val ipx_frame_tr_8022 \u00b6 [Source] fun box ipx_frame_tr_8022() : I32 val Returns \u00b6 I32 val ipx_getnetinfo \u00b6 [Source] fun box ipx_getnetinfo() : I32 val Returns \u00b6 I32 val ipx_getnetinfo_norip \u00b6 [Source] fun box ipx_getnetinfo_norip() : I32 val Returns \u00b6 I32 val ipx_immediatespxack \u00b6 [Source] fun box ipx_immediatespxack() : I32 val Returns \u00b6 I32 val ipx_internal \u00b6 [Source] fun box ipx_internal() : I32 val Returns \u00b6 I32 val ipx_maxsize \u00b6 [Source] fun box ipx_maxsize() : I32 val Returns \u00b6 I32 val ipx_max_adapter_num \u00b6 [Source] fun box ipx_max_adapter_num() : I32 val Returns \u00b6 I32 val ipx_mtu \u00b6 [Source] fun box ipx_mtu() : I32 val Returns \u00b6 I32 val ipx_node_len \u00b6 [Source] fun box ipx_node_len() : I32 val Returns \u00b6 I32 val ipx_primary \u00b6 [Source] fun box ipx_primary() : I32 val Returns \u00b6 I32 val ipx_ptype \u00b6 [Source] fun box ipx_ptype() : I32 val Returns \u00b6 I32 val ipx_receive_broadcast \u00b6 [Source] fun box ipx_receive_broadcast() : I32 val Returns \u00b6 I32 val ipx_recvhdr \u00b6 [Source] fun box ipx_recvhdr() : I32 val Returns \u00b6 I32 val ipx_reripnetnumber \u00b6 [Source] fun box ipx_reripnetnumber() : I32 val Returns \u00b6 I32 val ipx_route_no_router \u00b6 [Source] fun box ipx_route_no_router() : I32 val Returns \u00b6 I32 val ipx_rt_8022 \u00b6 [Source] fun box ipx_rt_8022() : I32 val Returns \u00b6 I32 val ipx_rt_bluebook \u00b6 [Source] fun box ipx_rt_bluebook() : I32 val Returns \u00b6 I32 val ipx_rt_routed \u00b6 [Source] fun box ipx_rt_routed() : I32 val Returns \u00b6 I32 val ipx_rt_snap \u00b6 [Source] fun box ipx_rt_snap() : I32 val Returns \u00b6 I32 val ipx_special_none \u00b6 [Source] fun box ipx_special_none() : I32 val Returns \u00b6 I32 val ipx_spxgetconnectionstatus \u00b6 [Source] fun box ipx_spxgetconnectionstatus() : I32 val Returns \u00b6 I32 val ipx_stopfilterptype \u00b6 [Source] fun box ipx_stopfilterptype() : I32 val Returns \u00b6 I32 val ipx_type \u00b6 [Source] fun box ipx_type() : I32 val Returns \u00b6 I32 val ip_add_membership \u00b6 [Source] fun box ip_add_membership() : I32 val Returns \u00b6 I32 val ip_add_source_membership \u00b6 [Source] fun box ip_add_source_membership() : I32 val Returns \u00b6 I32 val ip_bindany \u00b6 [Source] fun box ip_bindany() : I32 val Returns \u00b6 I32 val ip_bindmulti \u00b6 [Source] fun box ip_bindmulti() : I32 val Returns \u00b6 I32 val ip_bind_address_no_port \u00b6 [Source] fun box ip_bind_address_no_port() : I32 val Returns \u00b6 I32 val ip_block_source \u00b6 [Source] fun box ip_block_source() : I32 val Returns \u00b6 I32 val ip_bound_if \u00b6 [Source] fun box ip_bound_if() : I32 val Returns \u00b6 I32 val ip_checksum \u00b6 [Source] fun box ip_checksum() : I32 val Returns \u00b6 I32 val ip_default_multicast_loop \u00b6 [Source] fun box ip_default_multicast_loop() : I32 val Returns \u00b6 I32 val ip_default_multicast_ttl \u00b6 [Source] fun box ip_default_multicast_ttl() : I32 val Returns \u00b6 I32 val ip_dontfrag \u00b6 [Source] fun box ip_dontfrag() : I32 val Returns \u00b6 I32 val ip_drop_membership \u00b6 [Source] fun box ip_drop_membership() : I32 val Returns \u00b6 I32 val ip_drop_source_membership \u00b6 [Source] fun box ip_drop_source_membership() : I32 val Returns \u00b6 I32 val ip_dummynet3 \u00b6 [Source] fun box ip_dummynet3() : I32 val Returns \u00b6 I32 val ip_dummynet_configure \u00b6 [Source] fun box ip_dummynet_configure() : I32 val Returns \u00b6 I32 val ip_dummynet_del \u00b6 [Source] fun box ip_dummynet_del() : I32 val Returns \u00b6 I32 val ip_dummynet_flush \u00b6 [Source] fun box ip_dummynet_flush() : I32 val Returns \u00b6 I32 val ip_dummynet_get \u00b6 [Source] fun box ip_dummynet_get() : I32 val Returns \u00b6 I32 val ip_faith \u00b6 [Source] fun box ip_faith() : I32 val Returns \u00b6 I32 val ip_flowid \u00b6 [Source] fun box ip_flowid() : I32 val Returns \u00b6 I32 val ip_flowtype \u00b6 [Source] fun box ip_flowtype() : I32 val Returns \u00b6 I32 val ip_freebind \u00b6 [Source] fun box ip_freebind() : I32 val Returns \u00b6 I32 val ip_fw3 \u00b6 [Source] fun box ip_fw3() : I32 val Returns \u00b6 I32 val ip_fw_add \u00b6 [Source] fun box ip_fw_add() : I32 val Returns \u00b6 I32 val ip_fw_del \u00b6 [Source] fun box ip_fw_del() : I32 val Returns \u00b6 I32 val ip_fw_flush \u00b6 [Source] fun box ip_fw_flush() : I32 val Returns \u00b6 I32 val ip_fw_get \u00b6 [Source] fun box ip_fw_get() : I32 val Returns \u00b6 I32 val ip_fw_nat_cfg \u00b6 [Source] fun box ip_fw_nat_cfg() : I32 val Returns \u00b6 I32 val ip_fw_nat_del \u00b6 [Source] fun box ip_fw_nat_del() : I32 val Returns \u00b6 I32 val ip_fw_nat_get_config \u00b6 [Source] fun box ip_fw_nat_get_config() : I32 val Returns \u00b6 I32 val ip_fw_nat_get_log \u00b6 [Source] fun box ip_fw_nat_get_log() : I32 val Returns \u00b6 I32 val ip_fw_resetlog \u00b6 [Source] fun box ip_fw_resetlog() : I32 val Returns \u00b6 I32 val ip_fw_table_add \u00b6 [Source] fun box ip_fw_table_add() : I32 val Returns \u00b6 I32 val ip_fw_table_del \u00b6 [Source] fun box ip_fw_table_del() : I32 val Returns \u00b6 I32 val ip_fw_table_flush \u00b6 [Source] fun box ip_fw_table_flush() : I32 val Returns \u00b6 I32 val ip_fw_table_getsize \u00b6 [Source] fun box ip_fw_table_getsize() : I32 val Returns \u00b6 I32 val ip_fw_table_list \u00b6 [Source] fun box ip_fw_table_list() : I32 val Returns \u00b6 I32 val ip_fw_zero \u00b6 [Source] fun box ip_fw_zero() : I32 val Returns \u00b6 I32 val ip_hdrincl \u00b6 [Source] fun box ip_hdrincl() : I32 val Returns \u00b6 I32 val ip_ipsec_policy \u00b6 [Source] fun box ip_ipsec_policy() : I32 val Returns \u00b6 I32 val ip_max_group_src_filter \u00b6 [Source] fun box ip_max_group_src_filter() : I32 val Returns \u00b6 I32 val ip_max_memberships \u00b6 [Source] fun box ip_max_memberships() : I32 val Returns \u00b6 I32 val ip_max_sock_mute_filter \u00b6 [Source] fun box ip_max_sock_mute_filter() : I32 val Returns \u00b6 I32 val ip_max_sock_src_filter \u00b6 [Source] fun box ip_max_sock_src_filter() : I32 val Returns \u00b6 I32 val ip_max_source_filter \u00b6 [Source] fun box ip_max_source_filter() : I32 val Returns \u00b6 I32 val ip_minttl \u00b6 [Source] fun box ip_minttl() : I32 val Returns \u00b6 I32 val ip_min_memberships \u00b6 [Source] fun box ip_min_memberships() : I32 val Returns \u00b6 I32 val ip_msfilter \u00b6 [Source] fun box ip_msfilter() : I32 val Returns \u00b6 I32 val ip_mtu \u00b6 [Source] fun box ip_mtu() : I32 val Returns \u00b6 I32 val ip_mtu_discover \u00b6 [Source] fun box ip_mtu_discover() : I32 val Returns \u00b6 I32 val ip_multicast_all \u00b6 [Source] fun box ip_multicast_all() : I32 val Returns \u00b6 I32 val ip_multicast_if \u00b6 [Source] fun box ip_multicast_if() : I32 val Returns \u00b6 I32 val ip_multicast_ifindex \u00b6 [Source] fun box ip_multicast_ifindex() : I32 val Returns \u00b6 I32 val ip_multicast_loop \u00b6 [Source] fun box ip_multicast_loop() : I32 val Returns \u00b6 I32 val ip_multicast_ttl \u00b6 [Source] fun box ip_multicast_ttl() : I32 val Returns \u00b6 I32 val ip_multicast_vif \u00b6 [Source] fun box ip_multicast_vif() : I32 val Returns \u00b6 I32 val ip_nat_xxx \u00b6 [Source] fun box ip_nat_xxx() : I32 val Returns \u00b6 I32 val ip_nodefrag \u00b6 [Source] fun box ip_nodefrag() : I32 val Returns \u00b6 I32 val ip_old_fw_add \u00b6 [Source] fun box ip_old_fw_add() : I32 val Returns \u00b6 I32 val ip_old_fw_del \u00b6 [Source] fun box ip_old_fw_del() : I32 val Returns \u00b6 I32 val ip_old_fw_flush \u00b6 [Source] fun box ip_old_fw_flush() : I32 val Returns \u00b6 I32 val ip_old_fw_get \u00b6 [Source] fun box ip_old_fw_get() : I32 val Returns \u00b6 I32 val ip_old_fw_resetlog \u00b6 [Source] fun box ip_old_fw_resetlog() : I32 val Returns \u00b6 I32 val ip_old_fw_zero \u00b6 [Source] fun box ip_old_fw_zero() : I32 val Returns \u00b6 I32 val ip_onesbcast \u00b6 [Source] fun box ip_onesbcast() : I32 val Returns \u00b6 I32 val ip_options \u00b6 [Source] fun box ip_options() : I32 val Returns \u00b6 I32 val ip_origdstaddr \u00b6 [Source] fun box ip_origdstaddr() : I32 val Returns \u00b6 I32 val ip_passsec \u00b6 [Source] fun box ip_passsec() : I32 val Returns \u00b6 I32 val ip_pktinfo \u00b6 [Source] fun box ip_pktinfo() : I32 val Returns \u00b6 I32 val ip_pktoptions \u00b6 [Source] fun box ip_pktoptions() : I32 val Returns \u00b6 I32 val ip_pmtudisc_do \u00b6 [Source] fun box ip_pmtudisc_do() : I32 val Returns \u00b6 I32 val ip_pmtudisc_dont \u00b6 [Source] fun box ip_pmtudisc_dont() : I32 val Returns \u00b6 I32 val ip_pmtudisc_interface \u00b6 [Source] fun box ip_pmtudisc_interface() : I32 val Returns \u00b6 I32 val ip_pmtudisc_omit \u00b6 [Source] fun box ip_pmtudisc_omit() : I32 val Returns \u00b6 I32 val ip_pmtudisc_probe \u00b6 [Source] fun box ip_pmtudisc_probe() : I32 val Returns \u00b6 I32 val ip_pmtudisc_want \u00b6 [Source] fun box ip_pmtudisc_want() : I32 val Returns \u00b6 I32 val ip_portrange \u00b6 [Source] fun box ip_portrange() : I32 val Returns \u00b6 I32 val ip_portrange_default \u00b6 [Source] fun box ip_portrange_default() : I32 val Returns \u00b6 I32 val ip_portrange_high \u00b6 [Source] fun box ip_portrange_high() : I32 val Returns \u00b6 I32 val ip_portrange_low \u00b6 [Source] fun box ip_portrange_low() : I32 val Returns \u00b6 I32 val ip_recvdstaddr \u00b6 [Source] fun box ip_recvdstaddr() : I32 val Returns \u00b6 I32 val ip_recverr \u00b6 [Source] fun box ip_recverr() : I32 val Returns \u00b6 I32 val ip_recvflowid \u00b6 [Source] fun box ip_recvflowid() : I32 val Returns \u00b6 I32 val ip_recvif \u00b6 [Source] fun box ip_recvif() : I32 val Returns \u00b6 I32 val ip_recvopts \u00b6 [Source] fun box ip_recvopts() : I32 val Returns \u00b6 I32 val ip_recvorigdstaddr \u00b6 [Source] fun box ip_recvorigdstaddr() : I32 val Returns \u00b6 I32 val ip_recvpktinfo \u00b6 [Source] fun box ip_recvpktinfo() : I32 val Returns \u00b6 I32 val ip_recvretopts \u00b6 [Source] fun box ip_recvretopts() : I32 val Returns \u00b6 I32 val ip_recvrssbucketid \u00b6 [Source] fun box ip_recvrssbucketid() : I32 val Returns \u00b6 I32 val ip_recvtos \u00b6 [Source] fun box ip_recvtos() : I32 val Returns \u00b6 I32 val ip_recvttl \u00b6 [Source] fun box ip_recvttl() : I32 val Returns \u00b6 I32 val ip_retopts \u00b6 [Source] fun box ip_retopts() : I32 val Returns \u00b6 I32 val ip_router_alert \u00b6 [Source] fun box ip_router_alert() : I32 val Returns \u00b6 I32 val ip_rssbucketid \u00b6 [Source] fun box ip_rssbucketid() : I32 val Returns \u00b6 I32 val ip_rss_listen_bucket \u00b6 [Source] fun box ip_rss_listen_bucket() : I32 val Returns \u00b6 I32 val ip_rsvp_off \u00b6 [Source] fun box ip_rsvp_off() : I32 val Returns \u00b6 I32 val ip_rsvp_on \u00b6 [Source] fun box ip_rsvp_on() : I32 val Returns \u00b6 I32 val ip_rsvp_vif_off \u00b6 [Source] fun box ip_rsvp_vif_off() : I32 val Returns \u00b6 I32 val ip_rsvp_vif_on \u00b6 [Source] fun box ip_rsvp_vif_on() : I32 val Returns \u00b6 I32 val ip_sendsrcaddr \u00b6 [Source] fun box ip_sendsrcaddr() : I32 val Returns \u00b6 I32 val ip_striphdr \u00b6 [Source] fun box ip_striphdr() : I32 val Returns \u00b6 I32 val ip_tos \u00b6 [Source] fun box ip_tos() : I32 val Returns \u00b6 I32 val ip_traffic_mgt_background \u00b6 [Source] fun box ip_traffic_mgt_background() : I32 val Returns \u00b6 I32 val ip_transparent \u00b6 [Source] fun box ip_transparent() : I32 val Returns \u00b6 I32 val ip_ttl \u00b6 [Source] fun box ip_ttl() : I32 val Returns \u00b6 I32 val ip_unblock_source \u00b6 [Source] fun box ip_unblock_source() : I32 val Returns \u00b6 I32 val ip_unicast_if \u00b6 [Source] fun box ip_unicast_if() : I32 val Returns \u00b6 I32 val ip_xfrm_policy \u00b6 [Source] fun box ip_xfrm_policy() : I32 val Returns \u00b6 I32 val local_connwait \u00b6 [Source] fun box local_connwait() : I32 val Returns \u00b6 I32 val local_creds \u00b6 [Source] fun box local_creds() : I32 val Returns \u00b6 I32 val local_peercred \u00b6 [Source] fun box local_peercred() : I32 val Returns \u00b6 I32 val local_peerepid \u00b6 [Source] fun box local_peerepid() : I32 val Returns \u00b6 I32 val local_peereuuid \u00b6 [Source] fun box local_peereuuid() : I32 val Returns \u00b6 I32 val local_peerpid \u00b6 [Source] fun box local_peerpid() : I32 val Returns \u00b6 I32 val local_peeruuid \u00b6 [Source] fun box local_peeruuid() : I32 val Returns \u00b6 I32 val local_vendor \u00b6 [Source] fun box local_vendor() : I32 val Returns \u00b6 I32 val max_tcpoptlen \u00b6 [Source] fun box max_tcpoptlen() : I32 val Returns \u00b6 I32 val mcast_block_source \u00b6 [Source] fun box mcast_block_source() : I32 val Returns \u00b6 I32 val mcast_exclude \u00b6 [Source] fun box mcast_exclude() : I32 val Returns \u00b6 I32 val mcast_include \u00b6 [Source] fun box mcast_include() : I32 val Returns \u00b6 I32 val mcast_join_group \u00b6 [Source] fun box mcast_join_group() : I32 val Returns \u00b6 I32 val mcast_join_source_group \u00b6 [Source] fun box mcast_join_source_group() : I32 val Returns \u00b6 I32 val mcast_leave_group \u00b6 [Source] fun box mcast_leave_group() : I32 val Returns \u00b6 I32 val mcast_leave_source_group \u00b6 [Source] fun box mcast_leave_source_group() : I32 val Returns \u00b6 I32 val mcast_msfilter \u00b6 [Source] fun box mcast_msfilter() : I32 val Returns \u00b6 I32 val mcast_unblock_source \u00b6 [Source] fun box mcast_unblock_source() : I32 val Returns \u00b6 I32 val mcast_undefined \u00b6 [Source] fun box mcast_undefined() : I32 val Returns \u00b6 I32 val mrt_add_bw_upcall \u00b6 [Source] fun box mrt_add_bw_upcall() : I32 val Returns \u00b6 I32 val mrt_add_mfc \u00b6 [Source] fun box mrt_add_mfc() : I32 val Returns \u00b6 I32 val mrt_add_vif \u00b6 [Source] fun box mrt_add_vif() : I32 val Returns \u00b6 I32 val mrt_api_config \u00b6 [Source] fun box mrt_api_config() : I32 val Returns \u00b6 I32 val mrt_api_flags_all \u00b6 [Source] fun box mrt_api_flags_all() : I32 val Returns \u00b6 I32 val mrt_api_support \u00b6 [Source] fun box mrt_api_support() : I32 val Returns \u00b6 I32 val mrt_assert \u00b6 [Source] fun box mrt_assert() : I32 val Returns \u00b6 I32 val mrt_del_bw_upcall \u00b6 [Source] fun box mrt_del_bw_upcall() : I32 val Returns \u00b6 I32 val mrt_del_mfc \u00b6 [Source] fun box mrt_del_mfc() : I32 val Returns \u00b6 I32 val mrt_del_vif \u00b6 [Source] fun box mrt_del_vif() : I32 val Returns \u00b6 I32 val mrt_done \u00b6 [Source] fun box mrt_done() : I32 val Returns \u00b6 I32 val mrt_init \u00b6 [Source] fun box mrt_init() : I32 val Returns \u00b6 I32 val mrt_mfc_bw_upcall \u00b6 [Source] fun box mrt_mfc_bw_upcall() : I32 val Returns \u00b6 I32 val mrt_mfc_flags_all \u00b6 [Source] fun box mrt_mfc_flags_all() : I32 val Returns \u00b6 I32 val mrt_mfc_flags_border_vif \u00b6 [Source] fun box mrt_mfc_flags_border_vif() : I32 val Returns \u00b6 I32 val mrt_mfc_flags_disable_wrongvif \u00b6 [Source] fun box mrt_mfc_flags_disable_wrongvif() : I32 val Returns \u00b6 I32 val mrt_mfc_rp \u00b6 [Source] fun box mrt_mfc_rp() : I32 val Returns \u00b6 I32 val mrt_pim \u00b6 [Source] fun box mrt_pim() : I32 val Returns \u00b6 I32 val mrt_version \u00b6 [Source] fun box mrt_version() : I32 val Returns \u00b6 I32 val msg_notification \u00b6 [Source] fun box msg_notification() : I32 val Returns \u00b6 I32 val msg_socallbck \u00b6 [Source] fun box msg_socallbck() : I32 val Returns \u00b6 I32 val ndrvproto_ndrv \u00b6 [Source] fun box ndrvproto_ndrv() : I32 val Returns \u00b6 I32 val ndrv_addmulticast \u00b6 [Source] fun box ndrv_addmulticast() : I32 val Returns \u00b6 I32 val ndrv_deldmxspec \u00b6 [Source] fun box ndrv_deldmxspec() : I32 val Returns \u00b6 I32 val ndrv_delmulticast \u00b6 [Source] fun box ndrv_delmulticast() : I32 val Returns \u00b6 I32 val ndrv_demuxtype_ethertype \u00b6 [Source] fun box ndrv_demuxtype_ethertype() : I32 val Returns \u00b6 I32 val ndrv_demuxtype_sap \u00b6 [Source] fun box ndrv_demuxtype_sap() : I32 val Returns \u00b6 I32 val ndrv_demuxtype_snap \u00b6 [Source] fun box ndrv_demuxtype_snap() : I32 val Returns \u00b6 I32 val ndrv_dmux_max_descr \u00b6 [Source] fun box ndrv_dmux_max_descr() : I32 val Returns \u00b6 I32 val ndrv_protocol_desc_vers \u00b6 [Source] fun box ndrv_protocol_desc_vers() : I32 val Returns \u00b6 I32 val ndrv_setdmxspec \u00b6 [Source] fun box ndrv_setdmxspec() : I32 val Returns \u00b6 I32 val netlink_add_membership \u00b6 [Source] fun box netlink_add_membership() : I32 val Returns \u00b6 I32 val netlink_audit \u00b6 [Source] fun box netlink_audit() : I32 val Returns \u00b6 I32 val netlink_broadcast_error \u00b6 [Source] fun box netlink_broadcast_error() : I32 val Returns \u00b6 I32 val netlink_cap_ack \u00b6 [Source] fun box netlink_cap_ack() : I32 val Returns \u00b6 I32 val netlink_connector \u00b6 [Source] fun box netlink_connector() : I32 val Returns \u00b6 I32 val netlink_crypto \u00b6 [Source] fun box netlink_crypto() : I32 val Returns \u00b6 I32 val netlink_dnrtmsg \u00b6 [Source] fun box netlink_dnrtmsg() : I32 val Returns \u00b6 I32 val netlink_drop_membership \u00b6 [Source] fun box netlink_drop_membership() : I32 val Returns \u00b6 I32 val netlink_ecryptfs \u00b6 [Source] fun box netlink_ecryptfs() : I32 val Returns \u00b6 I32 val netlink_fib_lookup \u00b6 [Source] fun box netlink_fib_lookup() : I32 val Returns \u00b6 I32 val netlink_firewall \u00b6 [Source] fun box netlink_firewall() : I32 val Returns \u00b6 I32 val netlink_generic \u00b6 [Source] fun box netlink_generic() : I32 val Returns \u00b6 I32 val netlink_inet_diag \u00b6 [Source] fun box netlink_inet_diag() : I32 val Returns \u00b6 I32 val netlink_ip6_fw \u00b6 [Source] fun box netlink_ip6_fw() : I32 val Returns \u00b6 I32 val netlink_iscsi \u00b6 [Source] fun box netlink_iscsi() : I32 val Returns \u00b6 I32 val netlink_kobject_uevent \u00b6 [Source] fun box netlink_kobject_uevent() : I32 val Returns \u00b6 I32 val netlink_listen_all_nsid \u00b6 [Source] fun box netlink_listen_all_nsid() : I32 val Returns \u00b6 I32 val netlink_list_memberships \u00b6 [Source] fun box netlink_list_memberships() : I32 val Returns \u00b6 I32 val netlink_netfilter \u00b6 [Source] fun box netlink_netfilter() : I32 val Returns \u00b6 I32 val netlink_nflog \u00b6 [Source] fun box netlink_nflog() : I32 val Returns \u00b6 I32 val netlink_no_enobufs \u00b6 [Source] fun box netlink_no_enobufs() : I32 val Returns \u00b6 I32 val netlink_pktinfo \u00b6 [Source] fun box netlink_pktinfo() : I32 val Returns \u00b6 I32 val netlink_rdma \u00b6 [Source] fun box netlink_rdma() : I32 val Returns \u00b6 I32 val netlink_route \u00b6 [Source] fun box netlink_route() : I32 val Returns \u00b6 I32 val netlink_rx_ring \u00b6 [Source] fun box netlink_rx_ring() : I32 val Returns \u00b6 I32 val netlink_scsitransport \u00b6 [Source] fun box netlink_scsitransport() : I32 val Returns \u00b6 I32 val netlink_selinux \u00b6 [Source] fun box netlink_selinux() : I32 val Returns \u00b6 I32 val netlink_sock_diag \u00b6 [Source] fun box netlink_sock_diag() : I32 val Returns \u00b6 I32 val netlink_tx_ring \u00b6 [Source] fun box netlink_tx_ring() : I32 val Returns \u00b6 I32 val netlink_unused \u00b6 [Source] fun box netlink_unused() : I32 val Returns \u00b6 I32 val netlink_usersock \u00b6 [Source] fun box netlink_usersock() : I32 val Returns \u00b6 I32 val netlink_xfrm \u00b6 [Source] fun box netlink_xfrm() : I32 val Returns \u00b6 I32 val netrom_idle \u00b6 [Source] fun box netrom_idle() : I32 val Returns \u00b6 I32 val netrom_kill \u00b6 [Source] fun box netrom_kill() : I32 val Returns \u00b6 I32 val netrom_n2 \u00b6 [Source] fun box netrom_n2() : I32 val Returns \u00b6 I32 val netrom_neigh \u00b6 [Source] fun box netrom_neigh() : I32 val Returns \u00b6 I32 val netrom_node \u00b6 [Source] fun box netrom_node() : I32 val Returns \u00b6 I32 val netrom_paclen \u00b6 [Source] fun box netrom_paclen() : I32 val Returns \u00b6 I32 val netrom_t1 \u00b6 [Source] fun box netrom_t1() : I32 val Returns \u00b6 I32 val netrom_t2 \u00b6 [Source] fun box netrom_t2() : I32 val Returns \u00b6 I32 val netrom_t4 \u00b6 [Source] fun box netrom_t4() : I32 val Returns \u00b6 I32 val nrdv_multicast_addrs_per_sock \u00b6 [Source] fun box nrdv_multicast_addrs_per_sock() : I32 val Returns \u00b6 I32 val pvd_config \u00b6 [Source] fun box pvd_config() : I32 val Returns \u00b6 I32 val rds_cancel_sent_to \u00b6 [Source] fun box rds_cancel_sent_to() : I32 val Returns \u00b6 I32 val rds_cmsg_atomic_cswp \u00b6 [Source] fun box rds_cmsg_atomic_cswp() : I32 val Returns \u00b6 I32 val rds_cmsg_atomic_fadd \u00b6 [Source] fun box rds_cmsg_atomic_fadd() : I32 val Returns \u00b6 I32 val rds_cmsg_cong_update \u00b6 [Source] fun box rds_cmsg_cong_update() : I32 val Returns \u00b6 I32 val rds_cmsg_masked_atomic_cswp \u00b6 [Source] fun box rds_cmsg_masked_atomic_cswp() : I32 val Returns \u00b6 I32 val rds_cmsg_masked_atomic_fadd \u00b6 [Source] fun box rds_cmsg_masked_atomic_fadd() : I32 val Returns \u00b6 I32 val rds_cmsg_rdma_args \u00b6 [Source] fun box rds_cmsg_rdma_args() : I32 val Returns \u00b6 I32 val rds_cmsg_rdma_dest \u00b6 [Source] fun box rds_cmsg_rdma_dest() : I32 val Returns \u00b6 I32 val rds_cmsg_rdma_map \u00b6 [Source] fun box rds_cmsg_rdma_map() : I32 val Returns \u00b6 I32 val rds_cmsg_rdma_status \u00b6 [Source] fun box rds_cmsg_rdma_status() : I32 val Returns \u00b6 I32 val rds_cong_monitor \u00b6 [Source] fun box rds_cong_monitor() : I32 val Returns \u00b6 I32 val rds_cong_monitor_size \u00b6 [Source] fun box rds_cong_monitor_size() : I32 val Returns \u00b6 I32 val rds_free_mr \u00b6 [Source] fun box rds_free_mr() : I32 val Returns \u00b6 I32 val rds_get_mr \u00b6 [Source] fun box rds_get_mr() : I32 val Returns \u00b6 I32 val rds_get_mr_for_dest \u00b6 [Source] fun box rds_get_mr_for_dest() : I32 val Returns \u00b6 I32 val rds_ib_abi_version \u00b6 [Source] fun box rds_ib_abi_version() : I32 val Returns \u00b6 I32 val rds_ib_gid_len \u00b6 [Source] fun box rds_ib_gid_len() : I32 val Returns \u00b6 I32 val rds_info_connections \u00b6 [Source] fun box rds_info_connections() : I32 val Returns \u00b6 I32 val rds_info_connection_flag_connected \u00b6 [Source] fun box rds_info_connection_flag_connected() : I32 val Returns \u00b6 I32 val rds_info_connection_flag_connecting \u00b6 [Source] fun box rds_info_connection_flag_connecting() : I32 val Returns \u00b6 I32 val rds_info_connection_flag_sending \u00b6 [Source] fun box rds_info_connection_flag_sending() : I32 val Returns \u00b6 I32 val rds_info_connection_stats \u00b6 [Source] fun box rds_info_connection_stats() : I32 val Returns \u00b6 I32 val rds_info_counters \u00b6 [Source] fun box rds_info_counters() : I32 val Returns \u00b6 I32 val rds_info_first \u00b6 [Source] fun box rds_info_first() : I32 val Returns \u00b6 I32 val rds_info_ib_connections \u00b6 [Source] fun box rds_info_ib_connections() : I32 val Returns \u00b6 I32 val rds_info_iwarp_connections \u00b6 [Source] fun box rds_info_iwarp_connections() : I32 val Returns \u00b6 I32 val rds_info_last \u00b6 [Source] fun box rds_info_last() : I32 val Returns \u00b6 I32 val rds_info_message_flag_ack \u00b6 [Source] fun box rds_info_message_flag_ack() : I32 val Returns \u00b6 I32 val rds_info_message_flag_fast_ack \u00b6 [Source] fun box rds_info_message_flag_fast_ack() : I32 val Returns \u00b6 I32 val rds_info_recv_messages \u00b6 [Source] fun box rds_info_recv_messages() : I32 val Returns \u00b6 I32 val rds_info_retrans_messages \u00b6 [Source] fun box rds_info_retrans_messages() : I32 val Returns \u00b6 I32 val rds_info_send_messages \u00b6 [Source] fun box rds_info_send_messages() : I32 val Returns \u00b6 I32 val rds_info_sockets \u00b6 [Source] fun box rds_info_sockets() : I32 val Returns \u00b6 I32 val rds_info_tcp_sockets \u00b6 [Source] fun box rds_info_tcp_sockets() : I32 val Returns \u00b6 I32 val rds_rdma_canceled \u00b6 [Source] fun box rds_rdma_canceled() : I32 val Returns \u00b6 I32 val rds_rdma_dontwait \u00b6 [Source] fun box rds_rdma_dontwait() : I32 val Returns \u00b6 I32 val rds_rdma_dropped \u00b6 [Source] fun box rds_rdma_dropped() : I32 val Returns \u00b6 I32 val rds_rdma_fence \u00b6 [Source] fun box rds_rdma_fence() : I32 val Returns \u00b6 I32 val rds_rdma_invalidate \u00b6 [Source] fun box rds_rdma_invalidate() : I32 val Returns \u00b6 I32 val rds_rdma_notify_me \u00b6 [Source] fun box rds_rdma_notify_me() : I32 val Returns \u00b6 I32 val rds_rdma_other_error \u00b6 [Source] fun box rds_rdma_other_error() : I32 val Returns \u00b6 I32 val rds_rdma_readwrite \u00b6 [Source] fun box rds_rdma_readwrite() : I32 val Returns \u00b6 I32 val rds_rdma_remote_error \u00b6 [Source] fun box rds_rdma_remote_error() : I32 val Returns \u00b6 I32 val rds_rdma_silent \u00b6 [Source] fun box rds_rdma_silent() : I32 val Returns \u00b6 I32 val rds_rdma_success \u00b6 [Source] fun box rds_rdma_success() : I32 val Returns \u00b6 I32 val rds_rdma_use_once \u00b6 [Source] fun box rds_rdma_use_once() : I32 val Returns \u00b6 I32 val rds_recverr \u00b6 [Source] fun box rds_recverr() : I32 val Returns \u00b6 I32 val rds_trans_count \u00b6 [Source] fun box rds_trans_count() : I32 val Returns \u00b6 I32 val rds_trans_ib \u00b6 [Source] fun box rds_trans_ib() : I32 val Returns \u00b6 I32 val rds_trans_iwarp \u00b6 [Source] fun box rds_trans_iwarp() : I32 val Returns \u00b6 I32 val rds_trans_none \u00b6 [Source] fun box rds_trans_none() : I32 val Returns \u00b6 I32 val rds_trans_tcp \u00b6 [Source] fun box rds_trans_tcp() : I32 val Returns \u00b6 I32 val rose_access_barred \u00b6 [Source] fun box rose_access_barred() : I32 val Returns \u00b6 I32 val rose_defer \u00b6 [Source] fun box rose_defer() : I32 val Returns \u00b6 I32 val rose_dte_originated \u00b6 [Source] fun box rose_dte_originated() : I32 val Returns \u00b6 I32 val rose_holdback \u00b6 [Source] fun box rose_holdback() : I32 val Returns \u00b6 I32 val rose_idle \u00b6 [Source] fun box rose_idle() : I32 val Returns \u00b6 I32 val rose_invalid_facility \u00b6 [Source] fun box rose_invalid_facility() : I32 val Returns \u00b6 I32 val rose_local_procedure \u00b6 [Source] fun box rose_local_procedure() : I32 val Returns \u00b6 I32 val rose_max_digis \u00b6 [Source] fun box rose_max_digis() : I32 val Returns \u00b6 I32 val rose_mtu \u00b6 [Source] fun box rose_mtu() : I32 val Returns \u00b6 I32 val rose_network_congestion \u00b6 [Source] fun box rose_network_congestion() : I32 val Returns \u00b6 I32 val rose_not_obtainable \u00b6 [Source] fun box rose_not_obtainable() : I32 val Returns \u00b6 I32 val rose_number_busy \u00b6 [Source] fun box rose_number_busy() : I32 val Returns \u00b6 I32 val rose_out_of_order \u00b6 [Source] fun box rose_out_of_order() : I32 val Returns \u00b6 I32 val rose_qbitincl \u00b6 [Source] fun box rose_qbitincl() : I32 val Returns \u00b6 I32 val rose_remote_procedure \u00b6 [Source] fun box rose_remote_procedure() : I32 val Returns \u00b6 I32 val rose_ship_absent \u00b6 [Source] fun box rose_ship_absent() : I32 val Returns \u00b6 I32 val rose_t1 \u00b6 [Source] fun box rose_t1() : I32 val Returns \u00b6 I32 val rose_t2 \u00b6 [Source] fun box rose_t2() : I32 val Returns \u00b6 I32 val rose_t3 \u00b6 [Source] fun box rose_t3() : I32 val Returns \u00b6 I32 val scm_hci_raw_direction \u00b6 [Source] fun box scm_hci_raw_direction() : I32 val Returns \u00b6 I32 val scm_timestamp \u00b6 [Source] fun box scm_timestamp() : I32 val Returns \u00b6 I32 val scm_timestamping \u00b6 [Source] fun box scm_timestamping() : I32 val Returns \u00b6 I32 val scm_timestampns \u00b6 [Source] fun box scm_timestampns() : I32 val Returns \u00b6 I32 val scm_wifi_status \u00b6 [Source] fun box scm_wifi_status() : I32 val Returns \u00b6 I32 val sctp_abort_association \u00b6 [Source] fun box sctp_abort_association() : I32 val Returns \u00b6 I32 val sctp_adaptation_layer \u00b6 [Source] fun box sctp_adaptation_layer() : I32 val Returns \u00b6 I32 val sctp_adaption_layer \u00b6 [Source] fun box sctp_adaption_layer() : I32 val Returns \u00b6 I32 val sctp_add_streams \u00b6 [Source] fun box sctp_add_streams() : I32 val Returns \u00b6 I32 val sctp_add_vrf_id \u00b6 [Source] fun box sctp_add_vrf_id() : I32 val Returns \u00b6 I32 val sctp_asconf \u00b6 [Source] fun box sctp_asconf() : I32 val Returns \u00b6 I32 val sctp_asconf_ack \u00b6 [Source] fun box sctp_asconf_ack() : I32 val Returns \u00b6 I32 val sctp_asconf_supported \u00b6 [Source] fun box sctp_asconf_supported() : I32 val Returns \u00b6 I32 val sctp_associnfo \u00b6 [Source] fun box sctp_associnfo() : I32 val Returns \u00b6 I32 val sctp_authentication \u00b6 [Source] fun box sctp_authentication() : I32 val Returns \u00b6 I32 val sctp_auth_active_key \u00b6 [Source] fun box sctp_auth_active_key() : I32 val Returns \u00b6 I32 val sctp_auth_chunk \u00b6 [Source] fun box sctp_auth_chunk() : I32 val Returns \u00b6 I32 val sctp_auth_deactivate_key \u00b6 [Source] fun box sctp_auth_deactivate_key() : I32 val Returns \u00b6 I32 val sctp_auth_delete_key \u00b6 [Source] fun box sctp_auth_delete_key() : I32 val Returns \u00b6 I32 val sctp_auth_key \u00b6 [Source] fun box sctp_auth_key() : I32 val Returns \u00b6 I32 val sctp_auth_supported \u00b6 [Source] fun box sctp_auth_supported() : I32 val Returns \u00b6 I32 val sctp_autoclose \u00b6 [Source] fun box sctp_autoclose() : I32 val Returns \u00b6 I32 val sctp_auto_asconf \u00b6 [Source] fun box sctp_auto_asconf() : I32 val Returns \u00b6 I32 val sctp_badcrc \u00b6 [Source] fun box sctp_badcrc() : I32 val Returns \u00b6 I32 val sctp_bindx_add_addr \u00b6 [Source] fun box sctp_bindx_add_addr() : I32 val Returns \u00b6 I32 val sctp_bindx_rem_addr \u00b6 [Source] fun box sctp_bindx_rem_addr() : I32 val Returns \u00b6 I32 val sctp_blk_logging_enable \u00b6 [Source] fun box sctp_blk_logging_enable() : I32 val Returns \u00b6 I32 val sctp_bound \u00b6 [Source] fun box sctp_bound() : I32 val Returns \u00b6 I32 val sctp_cause_cookie_in_shutdown \u00b6 [Source] fun box sctp_cause_cookie_in_shutdown() : I32 val Returns \u00b6 I32 val sctp_cause_deleting_last_addr \u00b6 [Source] fun box sctp_cause_deleting_last_addr() : I32 val Returns \u00b6 I32 val sctp_cause_deleting_src_addr \u00b6 [Source] fun box sctp_cause_deleting_src_addr() : I32 val Returns \u00b6 I32 val sctp_cause_illegal_asconf_ack \u00b6 [Source] fun box sctp_cause_illegal_asconf_ack() : I32 val Returns \u00b6 I32 val sctp_cause_invalid_param \u00b6 [Source] fun box sctp_cause_invalid_param() : I32 val Returns \u00b6 I32 val sctp_cause_invalid_stream \u00b6 [Source] fun box sctp_cause_invalid_stream() : I32 val Returns \u00b6 I32 val sctp_cause_missing_param \u00b6 [Source] fun box sctp_cause_missing_param() : I32 val Returns \u00b6 I32 val sctp_cause_nat_colliding_state \u00b6 [Source] fun box sctp_cause_nat_colliding_state() : I32 val Returns \u00b6 I32 val sctp_cause_nat_missing_state \u00b6 [Source] fun box sctp_cause_nat_missing_state() : I32 val Returns \u00b6 I32 val sctp_cause_no_error \u00b6 [Source] fun box sctp_cause_no_error() : I32 val Returns \u00b6 I32 val sctp_cause_no_user_data \u00b6 [Source] fun box sctp_cause_no_user_data() : I32 val Returns \u00b6 I32 val sctp_cause_out_of_resc \u00b6 [Source] fun box sctp_cause_out_of_resc() : I32 val Returns \u00b6 I32 val sctp_cause_protocol_violation \u00b6 [Source] fun box sctp_cause_protocol_violation() : I32 val Returns \u00b6 I32 val sctp_cause_request_refused \u00b6 [Source] fun box sctp_cause_request_refused() : I32 val Returns \u00b6 I32 val sctp_cause_resource_shortage \u00b6 [Source] fun box sctp_cause_resource_shortage() : I32 val Returns \u00b6 I32 val sctp_cause_restart_w_newaddr \u00b6 [Source] fun box sctp_cause_restart_w_newaddr() : I32 val Returns \u00b6 I32 val sctp_cause_stale_cookie \u00b6 [Source] fun box sctp_cause_stale_cookie() : I32 val Returns \u00b6 I32 val sctp_cause_unrecog_chunk \u00b6 [Source] fun box sctp_cause_unrecog_chunk() : I32 val Returns \u00b6 I32 val sctp_cause_unrecog_param \u00b6 [Source] fun box sctp_cause_unrecog_param() : I32 val Returns \u00b6 I32 val sctp_cause_unresolvable_addr \u00b6 [Source] fun box sctp_cause_unresolvable_addr() : I32 val Returns \u00b6 I32 val sctp_cause_unsupported_hmacid \u00b6 [Source] fun box sctp_cause_unsupported_hmacid() : I32 val Returns \u00b6 I32 val sctp_cause_user_initiated_abt \u00b6 [Source] fun box sctp_cause_user_initiated_abt() : I32 val Returns \u00b6 I32 val sctp_cc_hstcp \u00b6 [Source] fun box sctp_cc_hstcp() : I32 val Returns \u00b6 I32 val sctp_cc_htcp \u00b6 [Source] fun box sctp_cc_htcp() : I32 val Returns \u00b6 I32 val sctp_cc_option \u00b6 [Source] fun box sctp_cc_option() : I32 val Returns \u00b6 I32 val sctp_cc_opt_rtcc_setmode \u00b6 [Source] fun box sctp_cc_opt_rtcc_setmode() : I32 val Returns \u00b6 I32 val sctp_cc_opt_steady_step \u00b6 [Source] fun box sctp_cc_opt_steady_step() : I32 val Returns \u00b6 I32 val sctp_cc_opt_use_dccc_ecn \u00b6 [Source] fun box sctp_cc_opt_use_dccc_ecn() : I32 val Returns \u00b6 I32 val sctp_cc_rfc2581 \u00b6 [Source] fun box sctp_cc_rfc2581() : I32 val Returns \u00b6 I32 val sctp_cc_rtcc \u00b6 [Source] fun box sctp_cc_rtcc() : I32 val Returns \u00b6 I32 val sctp_closed \u00b6 [Source] fun box sctp_closed() : I32 val Returns \u00b6 I32 val sctp_clr_stat_log \u00b6 [Source] fun box sctp_clr_stat_log() : I32 val Returns \u00b6 I32 val sctp_cmt_base \u00b6 [Source] fun box sctp_cmt_base() : I32 val Returns \u00b6 I32 val sctp_cmt_max \u00b6 [Source] fun box sctp_cmt_max() : I32 val Returns \u00b6 I32 val sctp_cmt_mptcp \u00b6 [Source] fun box sctp_cmt_mptcp() : I32 val Returns \u00b6 I32 val sctp_cmt_off \u00b6 [Source] fun box sctp_cmt_off() : I32 val Returns \u00b6 I32 val sctp_cmt_on_off \u00b6 [Source] fun box sctp_cmt_on_off() : I32 val Returns \u00b6 I32 val sctp_cmt_rpv1 \u00b6 [Source] fun box sctp_cmt_rpv1() : I32 val Returns \u00b6 I32 val sctp_cmt_rpv2 \u00b6 [Source] fun box sctp_cmt_rpv2() : I32 val Returns \u00b6 I32 val sctp_cmt_use_dac \u00b6 [Source] fun box sctp_cmt_use_dac() : I32 val Returns \u00b6 I32 val sctp_connect_x \u00b6 [Source] fun box sctp_connect_x() : I32 val Returns \u00b6 I32 val sctp_connect_x_complete \u00b6 [Source] fun box sctp_connect_x_complete() : I32 val Returns \u00b6 I32 val sctp_connect_x_delayed \u00b6 [Source] fun box sctp_connect_x_delayed() : I32 val Returns \u00b6 I32 val sctp_context \u00b6 [Source] fun box sctp_context() : I32 val Returns \u00b6 I32 val sctp_cookie_ack \u00b6 [Source] fun box sctp_cookie_ack() : I32 val Returns \u00b6 I32 val sctp_cookie_echo \u00b6 [Source] fun box sctp_cookie_echo() : I32 val Returns \u00b6 I32 val sctp_cookie_echoed \u00b6 [Source] fun box sctp_cookie_echoed() : I32 val Returns \u00b6 I32 val sctp_cookie_wait \u00b6 [Source] fun box sctp_cookie_wait() : I32 val Returns \u00b6 I32 val sctp_cwnd_logging_enable \u00b6 [Source] fun box sctp_cwnd_logging_enable() : I32 val Returns \u00b6 I32 val sctp_cwnd_monitor_enable \u00b6 [Source] fun box sctp_cwnd_monitor_enable() : I32 val Returns \u00b6 I32 val sctp_cwr_in_same_window \u00b6 [Source] fun box sctp_cwr_in_same_window() : I32 val Returns \u00b6 I32 val sctp_cwr_reduce_override \u00b6 [Source] fun box sctp_cwr_reduce_override() : I32 val Returns \u00b6 I32 val sctp_data \u00b6 [Source] fun box sctp_data() : I32 val Returns \u00b6 I32 val sctp_data_first_frag \u00b6 [Source] fun box sctp_data_first_frag() : I32 val Returns \u00b6 I32 val sctp_data_frag_mask \u00b6 [Source] fun box sctp_data_frag_mask() : I32 val Returns \u00b6 I32 val sctp_data_last_frag \u00b6 [Source] fun box sctp_data_last_frag() : I32 val Returns \u00b6 I32 val sctp_data_middle_frag \u00b6 [Source] fun box sctp_data_middle_frag() : I32 val Returns \u00b6 I32 val sctp_data_not_frag \u00b6 [Source] fun box sctp_data_not_frag() : I32 val Returns \u00b6 I32 val sctp_data_sack_immediately \u00b6 [Source] fun box sctp_data_sack_immediately() : I32 val Returns \u00b6 I32 val sctp_data_unordered \u00b6 [Source] fun box sctp_data_unordered() : I32 val Returns \u00b6 I32 val sctp_default_prinfo \u00b6 [Source] fun box sctp_default_prinfo() : I32 val Returns \u00b6 I32 val sctp_default_send_param \u00b6 [Source] fun box sctp_default_send_param() : I32 val Returns \u00b6 I32 val sctp_default_sndinfo \u00b6 [Source] fun box sctp_default_sndinfo() : I32 val Returns \u00b6 I32 val sctp_delayed_sack \u00b6 [Source] fun box sctp_delayed_sack() : I32 val Returns \u00b6 I32 val sctp_del_vrf_id \u00b6 [Source] fun box sctp_del_vrf_id() : I32 val Returns \u00b6 I32 val sctp_disable_fragments \u00b6 [Source] fun box sctp_disable_fragments() : I32 val Returns \u00b6 I32 val sctp_ecn_cwr \u00b6 [Source] fun box sctp_ecn_cwr() : I32 val Returns \u00b6 I32 val sctp_ecn_echo \u00b6 [Source] fun box sctp_ecn_echo() : I32 val Returns \u00b6 I32 val sctp_ecn_supported \u00b6 [Source] fun box sctp_ecn_supported() : I32 val Returns \u00b6 I32 val sctp_enable_change_assoc_req \u00b6 [Source] fun box sctp_enable_change_assoc_req() : I32 val Returns \u00b6 I32 val sctp_enable_reset_assoc_req \u00b6 [Source] fun box sctp_enable_reset_assoc_req() : I32 val Returns \u00b6 I32 val sctp_enable_reset_stream_req \u00b6 [Source] fun box sctp_enable_reset_stream_req() : I32 val Returns \u00b6 I32 val sctp_enable_stream_reset \u00b6 [Source] fun box sctp_enable_stream_reset() : I32 val Returns \u00b6 I32 val sctp_enable_value_mask \u00b6 [Source] fun box sctp_enable_value_mask() : I32 val Returns \u00b6 I32 val sctp_established \u00b6 [Source] fun box sctp_established() : I32 val Returns \u00b6 I32 val sctp_event \u00b6 [Source] fun box sctp_event() : I32 val Returns \u00b6 I32 val sctp_events \u00b6 [Source] fun box sctp_events() : I32 val Returns \u00b6 I32 val sctp_explicit_eor \u00b6 [Source] fun box sctp_explicit_eor() : I32 val Returns \u00b6 I32 val sctp_flight_logging_enable \u00b6 [Source] fun box sctp_flight_logging_enable() : I32 val Returns \u00b6 I32 val sctp_forward_cum_tsn \u00b6 [Source] fun box sctp_forward_cum_tsn() : I32 val Returns \u00b6 I32 val sctp_fragment_interleave \u00b6 [Source] fun box sctp_fragment_interleave() : I32 val Returns \u00b6 I32 val sctp_frag_level_0 \u00b6 [Source] fun box sctp_frag_level_0() : I32 val Returns \u00b6 I32 val sctp_frag_level_1 \u00b6 [Source] fun box sctp_frag_level_1() : I32 val Returns \u00b6 I32 val sctp_frag_level_2 \u00b6 [Source] fun box sctp_frag_level_2() : I32 val Returns \u00b6 I32 val sctp_from_middle_box \u00b6 [Source] fun box sctp_from_middle_box() : I32 val Returns \u00b6 I32 val sctp_fr_logging_enable \u00b6 [Source] fun box sctp_fr_logging_enable() : I32 val Returns \u00b6 I32 val sctp_get_addr_len \u00b6 [Source] fun box sctp_get_addr_len() : I32 val Returns \u00b6 I32 val sctp_get_asoc_vrf \u00b6 [Source] fun box sctp_get_asoc_vrf() : I32 val Returns \u00b6 I32 val sctp_get_assoc_id_list \u00b6 [Source] fun box sctp_get_assoc_id_list() : I32 val Returns \u00b6 I32 val sctp_get_assoc_number \u00b6 [Source] fun box sctp_get_assoc_number() : I32 val Returns \u00b6 I32 val sctp_get_local_addresses \u00b6 [Source] fun box sctp_get_local_addresses() : I32 val Returns \u00b6 I32 val sctp_get_local_addr_size \u00b6 [Source] fun box sctp_get_local_addr_size() : I32 val Returns \u00b6 I32 val sctp_get_nonce_values \u00b6 [Source] fun box sctp_get_nonce_values() : I32 val Returns \u00b6 I32 val sctp_get_packet_log \u00b6 [Source] fun box sctp_get_packet_log() : I32 val Returns \u00b6 I32 val sctp_get_peer_addresses \u00b6 [Source] fun box sctp_get_peer_addresses() : I32 val Returns \u00b6 I32 val sctp_get_peer_addr_info \u00b6 [Source] fun box sctp_get_peer_addr_info() : I32 val Returns \u00b6 I32 val sctp_get_remote_addr_size \u00b6 [Source] fun box sctp_get_remote_addr_size() : I32 val Returns \u00b6 I32 val sctp_get_sndbuf_use \u00b6 [Source] fun box sctp_get_sndbuf_use() : I32 val Returns \u00b6 I32 val sctp_get_stat_log \u00b6 [Source] fun box sctp_get_stat_log() : I32 val Returns \u00b6 I32 val sctp_get_vrf_ids \u00b6 [Source] fun box sctp_get_vrf_ids() : I32 val Returns \u00b6 I32 val sctp_had_no_tcb \u00b6 [Source] fun box sctp_had_no_tcb() : I32 val Returns \u00b6 I32 val sctp_heartbeat_ack \u00b6 [Source] fun box sctp_heartbeat_ack() : I32 val Returns \u00b6 I32 val sctp_heartbeat_request \u00b6 [Source] fun box sctp_heartbeat_request() : I32 val Returns \u00b6 I32 val sctp_hmac_ident \u00b6 [Source] fun box sctp_hmac_ident() : I32 val Returns \u00b6 I32 val sctp_idata \u00b6 [Source] fun box sctp_idata() : I32 val Returns \u00b6 I32 val sctp_iforward_cum_tsn \u00b6 [Source] fun box sctp_iforward_cum_tsn() : I32 val Returns \u00b6 I32 val sctp_initiation \u00b6 [Source] fun box sctp_initiation() : I32 val Returns \u00b6 I32 val sctp_initiation_ack \u00b6 [Source] fun box sctp_initiation_ack() : I32 val Returns \u00b6 I32 val sctp_initmsg \u00b6 [Source] fun box sctp_initmsg() : I32 val Returns \u00b6 I32 val sctp_interleaving_supported \u00b6 [Source] fun box sctp_interleaving_supported() : I32 val Returns \u00b6 I32 val sctp_i_want_mapped_v4_addr \u00b6 [Source] fun box sctp_i_want_mapped_v4_addr() : I32 val Returns \u00b6 I32 val sctp_last_packet_tracing \u00b6 [Source] fun box sctp_last_packet_tracing() : I32 val Returns \u00b6 I32 val sctp_listen \u00b6 [Source] fun box sctp_listen() : I32 val Returns \u00b6 I32 val sctp_local_auth_chunks \u00b6 [Source] fun box sctp_local_auth_chunks() : I32 val Returns \u00b6 I32 val sctp_lock_logging_enable \u00b6 [Source] fun box sctp_lock_logging_enable() : I32 val Returns \u00b6 I32 val sctp_log_at_send_2_outq \u00b6 [Source] fun box sctp_log_at_send_2_outq() : I32 val Returns \u00b6 I32 val sctp_log_at_send_2_sctp \u00b6 [Source] fun box sctp_log_at_send_2_sctp() : I32 val Returns \u00b6 I32 val sctp_log_maxburst_enable \u00b6 [Source] fun box sctp_log_maxburst_enable() : I32 val Returns \u00b6 I32 val sctp_log_rwnd_enable \u00b6 [Source] fun box sctp_log_rwnd_enable() : I32 val Returns \u00b6 I32 val sctp_log_sack_arrivals_enable \u00b6 [Source] fun box sctp_log_sack_arrivals_enable() : I32 val Returns \u00b6 I32 val sctp_log_try_advance \u00b6 [Source] fun box sctp_log_try_advance() : I32 val Returns \u00b6 I32 val sctp_ltrace_chunk_enable \u00b6 [Source] fun box sctp_ltrace_chunk_enable() : I32 val Returns \u00b6 I32 val sctp_ltrace_error_enable \u00b6 [Source] fun box sctp_ltrace_error_enable() : I32 val Returns \u00b6 I32 val sctp_map_logging_enable \u00b6 [Source] fun box sctp_map_logging_enable() : I32 val Returns \u00b6 I32 val sctp_maxburst \u00b6 [Source] fun box sctp_maxburst() : I32 val Returns \u00b6 I32 val sctp_maxseg \u00b6 [Source] fun box sctp_maxseg() : I32 val Returns \u00b6 I32 val sctp_max_burst \u00b6 [Source] fun box sctp_max_burst() : I32 val Returns \u00b6 I32 val sctp_max_cookie_life \u00b6 [Source] fun box sctp_max_cookie_life() : I32 val Returns \u00b6 I32 val sctp_max_cwnd \u00b6 [Source] fun box sctp_max_cwnd() : I32 val Returns \u00b6 I32 val sctp_max_hb_interval \u00b6 [Source] fun box sctp_max_hb_interval() : I32 val Returns \u00b6 I32 val sctp_max_sack_delay \u00b6 [Source] fun box sctp_max_sack_delay() : I32 val Returns \u00b6 I32 val sctp_mbcnt_logging_enable \u00b6 [Source] fun box sctp_mbcnt_logging_enable() : I32 val Returns \u00b6 I32 val sctp_mbuf_logging_enable \u00b6 [Source] fun box sctp_mbuf_logging_enable() : I32 val Returns \u00b6 I32 val sctp_mobility_base \u00b6 [Source] fun box sctp_mobility_base() : I32 val Returns \u00b6 I32 val sctp_mobility_fasthandoff \u00b6 [Source] fun box sctp_mobility_fasthandoff() : I32 val Returns \u00b6 I32 val sctp_mobility_prim_deleted \u00b6 [Source] fun box sctp_mobility_prim_deleted() : I32 val Returns \u00b6 I32 val sctp_nagle_logging_enable \u00b6 [Source] fun box sctp_nagle_logging_enable() : I32 val Returns \u00b6 I32 val sctp_nodelay \u00b6 [Source] fun box sctp_nodelay() : I32 val Returns \u00b6 I32 val sctp_nrsack_supported \u00b6 [Source] fun box sctp_nrsack_supported() : I32 val Returns \u00b6 I32 val sctp_nr_selective_ack \u00b6 [Source] fun box sctp_nr_selective_ack() : I32 val Returns \u00b6 I32 val sctp_operation_error \u00b6 [Source] fun box sctp_operation_error() : I32 val Returns \u00b6 I32 val sctp_packed \u00b6 [Source] fun box sctp_packed() : I32 val Returns \u00b6 I32 val sctp_packet_dropped \u00b6 [Source] fun box sctp_packet_dropped() : I32 val Returns \u00b6 I32 val sctp_packet_log_size \u00b6 [Source] fun box sctp_packet_log_size() : I32 val Returns \u00b6 I32 val sctp_packet_truncated \u00b6 [Source] fun box sctp_packet_truncated() : I32 val Returns \u00b6 I32 val sctp_pad_chunk \u00b6 [Source] fun box sctp_pad_chunk() : I32 val Returns \u00b6 I32 val sctp_partial_delivery_point \u00b6 [Source] fun box sctp_partial_delivery_point() : I32 val Returns \u00b6 I32 val sctp_pcb_copy_flags \u00b6 [Source] fun box sctp_pcb_copy_flags() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_accepting \u00b6 [Source] fun box sctp_pcb_flags_accepting() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_adaptationevnt \u00b6 [Source] fun box sctp_pcb_flags_adaptationevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_assoc_resetevnt \u00b6 [Source] fun box sctp_pcb_flags_assoc_resetevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_authevnt \u00b6 [Source] fun box sctp_pcb_flags_authevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_autoclose \u00b6 [Source] fun box sctp_pcb_flags_autoclose() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_auto_asconf \u00b6 [Source] fun box sctp_pcb_flags_auto_asconf() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_blocking_io \u00b6 [Source] fun box sctp_pcb_flags_blocking_io() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_boundall \u00b6 [Source] fun box sctp_pcb_flags_boundall() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_bound_v6 \u00b6 [Source] fun box sctp_pcb_flags_bound_v6() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_close_ip \u00b6 [Source] fun box sctp_pcb_flags_close_ip() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_connected \u00b6 [Source] fun box sctp_pcb_flags_connected() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_donot_heartbeat \u00b6 [Source] fun box sctp_pcb_flags_donot_heartbeat() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_dont_wake \u00b6 [Source] fun box sctp_pcb_flags_dont_wake() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_do_asconf \u00b6 [Source] fun box sctp_pcb_flags_do_asconf() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_do_not_pmtud \u00b6 [Source] fun box sctp_pcb_flags_do_not_pmtud() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_dryevnt \u00b6 [Source] fun box sctp_pcb_flags_dryevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_explicit_eor \u00b6 [Source] fun box sctp_pcb_flags_explicit_eor() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_ext_rcvinfo \u00b6 [Source] fun box sctp_pcb_flags_ext_rcvinfo() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_frag_interleave \u00b6 [Source] fun box sctp_pcb_flags_frag_interleave() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_interleave_strms \u00b6 [Source] fun box sctp_pcb_flags_interleave_strms() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_in_tcppool \u00b6 [Source] fun box sctp_pcb_flags_in_tcppool() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_multiple_asconfs \u00b6 [Source] fun box sctp_pcb_flags_multiple_asconfs() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_needs_mapped_v4 \u00b6 [Source] fun box sctp_pcb_flags_needs_mapped_v4() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_nodelay \u00b6 [Source] fun box sctp_pcb_flags_nodelay() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_no_fragment \u00b6 [Source] fun box sctp_pcb_flags_no_fragment() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_pdapievnt \u00b6 [Source] fun box sctp_pcb_flags_pdapievnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_portreuse \u00b6 [Source] fun box sctp_pcb_flags_portreuse() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvassocevnt \u00b6 [Source] fun box sctp_pcb_flags_recvassocevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvdataioevnt \u00b6 [Source] fun box sctp_pcb_flags_recvdataioevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvnsendfailevnt \u00b6 [Source] fun box sctp_pcb_flags_recvnsendfailevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvnxtinfo \u00b6 [Source] fun box sctp_pcb_flags_recvnxtinfo() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvpaddrevnt \u00b6 [Source] fun box sctp_pcb_flags_recvpaddrevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvpeererr \u00b6 [Source] fun box sctp_pcb_flags_recvpeererr() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvrcvinfo \u00b6 [Source] fun box sctp_pcb_flags_recvrcvinfo() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvsendfailevnt \u00b6 [Source] fun box sctp_pcb_flags_recvsendfailevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_recvshutdownevnt \u00b6 [Source] fun box sctp_pcb_flags_recvshutdownevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_socket_allgone \u00b6 [Source] fun box sctp_pcb_flags_socket_allgone() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_socket_cant_read \u00b6 [Source] fun box sctp_pcb_flags_socket_cant_read() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_socket_gone \u00b6 [Source] fun box sctp_pcb_flags_socket_gone() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_stream_changeevnt \u00b6 [Source] fun box sctp_pcb_flags_stream_changeevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_stream_resetevnt \u00b6 [Source] fun box sctp_pcb_flags_stream_resetevnt() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_tcptype \u00b6 [Source] fun box sctp_pcb_flags_tcptype() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_udptype \u00b6 [Source] fun box sctp_pcb_flags_udptype() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_unbound \u00b6 [Source] fun box sctp_pcb_flags_unbound() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_wakeinput \u00b6 [Source] fun box sctp_pcb_flags_wakeinput() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_wakeoutput \u00b6 [Source] fun box sctp_pcb_flags_wakeoutput() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_was_aborted \u00b6 [Source] fun box sctp_pcb_flags_was_aborted() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_was_connected \u00b6 [Source] fun box sctp_pcb_flags_was_connected() : I32 val Returns \u00b6 I32 val sctp_pcb_flags_zero_copy_active \u00b6 [Source] fun box sctp_pcb_flags_zero_copy_active() : I32 val Returns \u00b6 I32 val sctp_pcb_status \u00b6 [Source] fun box sctp_pcb_status() : I32 val Returns \u00b6 I32 val sctp_peeloff \u00b6 [Source] fun box sctp_peeloff() : I32 val Returns \u00b6 I32 val sctp_peer_addr_params \u00b6 [Source] fun box sctp_peer_addr_params() : I32 val Returns \u00b6 I32 val sctp_peer_addr_thlds \u00b6 [Source] fun box sctp_peer_addr_thlds() : I32 val Returns \u00b6 I32 val sctp_peer_auth_chunks \u00b6 [Source] fun box sctp_peer_auth_chunks() : I32 val Returns \u00b6 I32 val sctp_pktdrop_supported \u00b6 [Source] fun box sctp_pktdrop_supported() : I32 val Returns \u00b6 I32 val sctp_pluggable_cc \u00b6 [Source] fun box sctp_pluggable_cc() : I32 val Returns \u00b6 I32 val sctp_pluggable_ss \u00b6 [Source] fun box sctp_pluggable_ss() : I32 val Returns \u00b6 I32 val sctp_primary_addr \u00b6 [Source] fun box sctp_primary_addr() : I32 val Returns \u00b6 I32 val sctp_pr_assoc_status \u00b6 [Source] fun box sctp_pr_assoc_status() : I32 val Returns \u00b6 I32 val sctp_pr_stream_status \u00b6 [Source] fun box sctp_pr_stream_status() : I32 val Returns \u00b6 I32 val sctp_pr_supported \u00b6 [Source] fun box sctp_pr_supported() : I32 val Returns \u00b6 I32 val sctp_reconfig_supported \u00b6 [Source] fun box sctp_reconfig_supported() : I32 val Returns \u00b6 I32 val sctp_recvnxtinfo \u00b6 [Source] fun box sctp_recvnxtinfo() : I32 val Returns \u00b6 I32 val sctp_recvrcvinfo \u00b6 [Source] fun box sctp_recvrcvinfo() : I32 val Returns \u00b6 I32 val sctp_recv_rwnd_logging_enable \u00b6 [Source] fun box sctp_recv_rwnd_logging_enable() : I32 val Returns \u00b6 I32 val sctp_remote_udp_encaps_port \u00b6 [Source] fun box sctp_remote_udp_encaps_port() : I32 val Returns \u00b6 I32 val sctp_reset_assoc \u00b6 [Source] fun box sctp_reset_assoc() : I32 val Returns \u00b6 I32 val sctp_reset_streams \u00b6 [Source] fun box sctp_reset_streams() : I32 val Returns \u00b6 I32 val sctp_reuse_port \u00b6 [Source] fun box sctp_reuse_port() : I32 val Returns \u00b6 I32 val sctp_rtoinfo \u00b6 [Source] fun box sctp_rtoinfo() : I32 val Returns \u00b6 I32 val sctp_rttvar_logging_enable \u00b6 [Source] fun box sctp_rttvar_logging_enable() : I32 val Returns \u00b6 I32 val sctp_sack_cmt_dac \u00b6 [Source] fun box sctp_sack_cmt_dac() : I32 val Returns \u00b6 I32 val sctp_sack_logging_enable \u00b6 [Source] fun box sctp_sack_logging_enable() : I32 val Returns \u00b6 I32 val sctp_sack_nonce_sum \u00b6 [Source] fun box sctp_sack_nonce_sum() : I32 val Returns \u00b6 I32 val sctp_sack_rwnd_logging_enable \u00b6 [Source] fun box sctp_sack_rwnd_logging_enable() : I32 val Returns \u00b6 I32 val sctp_sat_network_burst_incr \u00b6 [Source] fun box sctp_sat_network_burst_incr() : I32 val Returns \u00b6 I32 val sctp_sat_network_min \u00b6 [Source] fun box sctp_sat_network_min() : I32 val Returns \u00b6 I32 val sctp_sb_logging_enable \u00b6 [Source] fun box sctp_sb_logging_enable() : I32 val Returns \u00b6 I32 val sctp_selective_ack \u00b6 [Source] fun box sctp_selective_ack() : I32 val Returns \u00b6 I32 val sctp_set_debug_level \u00b6 [Source] fun box sctp_set_debug_level() : I32 val Returns \u00b6 I32 val sctp_set_dynamic_primary \u00b6 [Source] fun box sctp_set_dynamic_primary() : I32 val Returns \u00b6 I32 val sctp_set_initial_dbg_seq \u00b6 [Source] fun box sctp_set_initial_dbg_seq() : I32 val Returns \u00b6 I32 val sctp_set_peer_primary_addr \u00b6 [Source] fun box sctp_set_peer_primary_addr() : I32 val Returns \u00b6 I32 val sctp_shutdown \u00b6 [Source] fun box sctp_shutdown() : I32 val Returns \u00b6 I32 val sctp_shutdown_ack \u00b6 [Source] fun box sctp_shutdown_ack() : I32 val Returns \u00b6 I32 val sctp_shutdown_ack_sent \u00b6 [Source] fun box sctp_shutdown_ack_sent() : I32 val Returns \u00b6 I32 val sctp_shutdown_complete \u00b6 [Source] fun box sctp_shutdown_complete() : I32 val Returns \u00b6 I32 val sctp_shutdown_pending \u00b6 [Source] fun box sctp_shutdown_pending() : I32 val Returns \u00b6 I32 val sctp_shutdown_received \u00b6 [Source] fun box sctp_shutdown_received() : I32 val Returns \u00b6 I32 val sctp_shutdown_sent \u00b6 [Source] fun box sctp_shutdown_sent() : I32 val Returns \u00b6 I32 val sctp_smallest_pmtu \u00b6 [Source] fun box sctp_smallest_pmtu() : I32 val Returns \u00b6 I32 val sctp_ss_default \u00b6 [Source] fun box sctp_ss_default() : I32 val Returns \u00b6 I32 val sctp_ss_fair_bandwith \u00b6 [Source] fun box sctp_ss_fair_bandwith() : I32 val Returns \u00b6 I32 val sctp_ss_first_come \u00b6 [Source] fun box sctp_ss_first_come() : I32 val Returns \u00b6 I32 val sctp_ss_priority \u00b6 [Source] fun box sctp_ss_priority() : I32 val Returns \u00b6 I32 val sctp_ss_round_robin \u00b6 [Source] fun box sctp_ss_round_robin() : I32 val Returns \u00b6 I32 val sctp_ss_round_robin_packet \u00b6 [Source] fun box sctp_ss_round_robin_packet() : I32 val Returns \u00b6 I32 val sctp_ss_value \u00b6 [Source] fun box sctp_ss_value() : I32 val Returns \u00b6 I32 val sctp_status \u00b6 [Source] fun box sctp_status() : I32 val Returns \u00b6 I32 val sctp_stream_reset \u00b6 [Source] fun box sctp_stream_reset() : I32 val Returns \u00b6 I32 val sctp_stream_reset_incoming \u00b6 [Source] fun box sctp_stream_reset_incoming() : I32 val Returns \u00b6 I32 val sctp_stream_reset_outgoing \u00b6 [Source] fun box sctp_stream_reset_outgoing() : I32 val Returns \u00b6 I32 val sctp_str_logging_enable \u00b6 [Source] fun box sctp_str_logging_enable() : I32 val Returns \u00b6 I32 val sctp_threshold_logging \u00b6 [Source] fun box sctp_threshold_logging() : I32 val Returns \u00b6 I32 val sctp_timeouts \u00b6 [Source] fun box sctp_timeouts() : I32 val Returns \u00b6 I32 val sctp_use_ext_rcvinfo \u00b6 [Source] fun box sctp_use_ext_rcvinfo() : I32 val Returns \u00b6 I32 val sctp_vrf_id \u00b6 [Source] fun box sctp_vrf_id() : I32 val Returns \u00b6 I32 val sctp_wake_logging_enable \u00b6 [Source] fun box sctp_wake_logging_enable() : I32 val Returns \u00b6 I32 val sock_cloexec \u00b6 [Source] fun box sock_cloexec() : I32 val Returns \u00b6 I32 val sock_dgram \u00b6 [Source] fun box sock_dgram() : I32 val Returns \u00b6 I32 val sock_maxaddrlen \u00b6 [Source] fun box sock_maxaddrlen() : I32 val Returns \u00b6 I32 val sock_nonblock \u00b6 [Source] fun box sock_nonblock() : I32 val Returns \u00b6 I32 val sock_raw \u00b6 [Source] fun box sock_raw() : I32 val Returns \u00b6 I32 val sock_rdm \u00b6 [Source] fun box sock_rdm() : I32 val Returns \u00b6 I32 val sock_seqpacket \u00b6 [Source] fun box sock_seqpacket() : I32 val Returns \u00b6 I32 val sock_stream \u00b6 [Source] fun box sock_stream() : I32 val Returns \u00b6 I32 val somaxconn \u00b6 [Source] fun box somaxconn() : I32 val Returns \u00b6 I32 val sonpx_setoptshut \u00b6 [Source] fun box sonpx_setoptshut() : I32 val Returns \u00b6 I32 val so_acceptconn \u00b6 [Source] fun box so_acceptconn() : I32 val Returns \u00b6 I32 val so_acceptfilter \u00b6 [Source] fun box so_acceptfilter() : I32 val Returns \u00b6 I32 val so_atmpvc \u00b6 [Source] fun box so_atmpvc() : I32 val Returns \u00b6 I32 val so_atmqos \u00b6 [Source] fun box so_atmqos() : I32 val Returns \u00b6 I32 val so_atmsap \u00b6 [Source] fun box so_atmsap() : I32 val Returns \u00b6 I32 val so_attach_bpf \u00b6 [Source] fun box so_attach_bpf() : I32 val Returns \u00b6 I32 val so_attach_filter \u00b6 [Source] fun box so_attach_filter() : I32 val Returns \u00b6 I32 val so_bindtodevice \u00b6 [Source] fun box so_bindtodevice() : I32 val Returns \u00b6 I32 val so_bintime \u00b6 [Source] fun box so_bintime() : I32 val Returns \u00b6 I32 val so_bpf_extensions \u00b6 [Source] fun box so_bpf_extensions() : I32 val Returns \u00b6 I32 val so_broadcast \u00b6 [Source] fun box so_broadcast() : I32 val Returns \u00b6 I32 val so_bsdcompat \u00b6 [Source] fun box so_bsdcompat() : I32 val Returns \u00b6 I32 val so_bsp_state \u00b6 [Source] fun box so_bsp_state() : I32 val Returns \u00b6 I32 val so_busy_poll \u00b6 [Source] fun box so_busy_poll() : I32 val Returns \u00b6 I32 val so_conaccess \u00b6 [Source] fun box so_conaccess() : I32 val Returns \u00b6 I32 val so_condata \u00b6 [Source] fun box so_condata() : I32 val Returns \u00b6 I32 val so_conditional_accept \u00b6 [Source] fun box so_conditional_accept() : I32 val Returns \u00b6 I32 val so_connect_time \u00b6 [Source] fun box so_connect_time() : I32 val Returns \u00b6 I32 val so_debug \u00b6 [Source] fun box so_debug() : I32 val Returns \u00b6 I32 val so_detach_bpf \u00b6 [Source] fun box so_detach_bpf() : I32 val Returns \u00b6 I32 val so_detach_filter \u00b6 [Source] fun box so_detach_filter() : I32 val Returns \u00b6 I32 val so_domain \u00b6 [Source] fun box so_domain() : I32 val Returns \u00b6 I32 val so_dontlinger \u00b6 [Source] fun box so_dontlinger() : I32 val Returns \u00b6 I32 val so_dontroute \u00b6 [Source] fun box so_dontroute() : I32 val Returns \u00b6 I32 val so_donttrunc \u00b6 [Source] fun box so_donttrunc() : I32 val Returns \u00b6 I32 val so_error \u00b6 [Source] fun box so_error() : I32 val Returns \u00b6 I32 val so_exclusiveaddruse \u00b6 [Source] fun box so_exclusiveaddruse() : I32 val Returns \u00b6 I32 val so_get_filter \u00b6 [Source] fun box so_get_filter() : I32 val Returns \u00b6 I32 val so_group_id \u00b6 [Source] fun box so_group_id() : I32 val Returns \u00b6 I32 val so_group_priority \u00b6 [Source] fun box so_group_priority() : I32 val Returns \u00b6 I32 val so_hci_raw_direction \u00b6 [Source] fun box so_hci_raw_direction() : I32 val Returns \u00b6 I32 val so_hci_raw_filter \u00b6 [Source] fun box so_hci_raw_filter() : I32 val Returns \u00b6 I32 val so_incoming_cpu \u00b6 [Source] fun box so_incoming_cpu() : I32 val Returns \u00b6 I32 val so_keepalive \u00b6 [Source] fun box so_keepalive() : I32 val Returns \u00b6 I32 val so_l2cap_encrypted \u00b6 [Source] fun box so_l2cap_encrypted() : I32 val Returns \u00b6 I32 val so_l2cap_flush \u00b6 [Source] fun box so_l2cap_flush() : I32 val Returns \u00b6 I32 val so_l2cap_iflow \u00b6 [Source] fun box so_l2cap_iflow() : I32 val Returns \u00b6 I32 val so_l2cap_imtu \u00b6 [Source] fun box so_l2cap_imtu() : I32 val Returns \u00b6 I32 val so_l2cap_oflow \u00b6 [Source] fun box so_l2cap_oflow() : I32 val Returns \u00b6 I32 val so_l2cap_omtu \u00b6 [Source] fun box so_l2cap_omtu() : I32 val Returns \u00b6 I32 val so_label \u00b6 [Source] fun box so_label() : I32 val Returns \u00b6 I32 val so_linger \u00b6 [Source] fun box so_linger() : I32 val Returns \u00b6 I32 val so_linger_sec \u00b6 [Source] fun box so_linger_sec() : I32 val Returns \u00b6 I32 val so_linkinfo \u00b6 [Source] fun box so_linkinfo() : I32 val Returns \u00b6 I32 val so_listenincqlen \u00b6 [Source] fun box so_listenincqlen() : I32 val Returns \u00b6 I32 val so_listenqlen \u00b6 [Source] fun box so_listenqlen() : I32 val Returns \u00b6 I32 val so_listenqlimit \u00b6 [Source] fun box so_listenqlimit() : I32 val Returns \u00b6 I32 val so_lock_filter \u00b6 [Source] fun box so_lock_filter() : I32 val Returns \u00b6 I32 val so_mark \u00b6 [Source] fun box so_mark() : I32 val Returns \u00b6 I32 val so_max_msg_size \u00b6 [Source] fun box so_max_msg_size() : I32 val Returns \u00b6 I32 val so_max_pacing_rate \u00b6 [Source] fun box so_max_pacing_rate() : I32 val Returns \u00b6 I32 val so_multipoint \u00b6 [Source] fun box so_multipoint() : I32 val Returns \u00b6 I32 val so_netsvc_marking_level \u00b6 [Source] fun box so_netsvc_marking_level() : I32 val Returns \u00b6 I32 val so_net_service_type \u00b6 [Source] fun box so_net_service_type() : I32 val Returns \u00b6 I32 val so_nke \u00b6 [Source] fun box so_nke() : I32 val Returns \u00b6 I32 val so_noaddrerr \u00b6 [Source] fun box so_noaddrerr() : I32 val Returns \u00b6 I32 val so_nofcs \u00b6 [Source] fun box so_nofcs() : I32 val Returns \u00b6 I32 val so_nosigpipe \u00b6 [Source] fun box so_nosigpipe() : I32 val Returns \u00b6 I32 val so_notifyconflict \u00b6 [Source] fun box so_notifyconflict() : I32 val Returns \u00b6 I32 val so_no_check \u00b6 [Source] fun box so_no_check() : I32 val Returns \u00b6 I32 val so_no_ddp \u00b6 [Source] fun box so_no_ddp() : I32 val Returns \u00b6 I32 val so_no_offload \u00b6 [Source] fun box so_no_offload() : I32 val Returns \u00b6 I32 val so_np_extensions \u00b6 [Source] fun box so_np_extensions() : I32 val Returns \u00b6 I32 val so_nread \u00b6 [Source] fun box so_nread() : I32 val Returns \u00b6 I32 val so_numrcvpkt \u00b6 [Source] fun box so_numrcvpkt() : I32 val Returns \u00b6 I32 val so_nwrite \u00b6 [Source] fun box so_nwrite() : I32 val Returns \u00b6 I32 val so_oobinline \u00b6 [Source] fun box so_oobinline() : I32 val Returns \u00b6 I32 val so_original_dst \u00b6 [Source] fun box so_original_dst() : I32 val Returns \u00b6 I32 val so_passcred \u00b6 [Source] fun box so_passcred() : I32 val Returns \u00b6 I32 val so_passsec \u00b6 [Source] fun box so_passsec() : I32 val Returns \u00b6 I32 val so_peek_off \u00b6 [Source] fun box so_peek_off() : I32 val Returns \u00b6 I32 val so_peercred \u00b6 [Source] fun box so_peercred() : I32 val Returns \u00b6 I32 val so_peerlabel \u00b6 [Source] fun box so_peerlabel() : I32 val Returns \u00b6 I32 val so_peername \u00b6 [Source] fun box so_peername() : I32 val Returns \u00b6 I32 val so_peersec \u00b6 [Source] fun box so_peersec() : I32 val Returns \u00b6 I32 val so_port_scalability \u00b6 [Source] fun box so_port_scalability() : I32 val Returns \u00b6 I32 val so_priority \u00b6 [Source] fun box so_priority() : I32 val Returns \u00b6 I32 val so_protocol \u00b6 [Source] fun box so_protocol() : I32 val Returns \u00b6 I32 val so_protocol_info \u00b6 [Source] fun box so_protocol_info() : I32 val Returns \u00b6 I32 val so_prototype \u00b6 [Source] fun box so_prototype() : I32 val Returns \u00b6 I32 val so_proxyusr \u00b6 [Source] fun box so_proxyusr() : I32 val Returns \u00b6 I32 val so_randomport \u00b6 [Source] fun box so_randomport() : I32 val Returns \u00b6 I32 val so_rcvbuf \u00b6 [Source] fun box so_rcvbuf() : I32 val Returns \u00b6 I32 val so_rcvbufforce \u00b6 [Source] fun box so_rcvbufforce() : I32 val Returns \u00b6 I32 val so_rcvlowat \u00b6 [Source] fun box so_rcvlowat() : I32 val Returns \u00b6 I32 val so_rcvtimeo \u00b6 [Source] fun box so_rcvtimeo() : I32 val Returns \u00b6 I32 val so_rds_transport \u00b6 [Source] fun box so_rds_transport() : I32 val Returns \u00b6 I32 val so_reuseaddr \u00b6 [Source] fun box so_reuseaddr() : I32 val Returns \u00b6 I32 val so_reuseport \u00b6 [Source] fun box so_reuseport() : I32 val Returns \u00b6 I32 val so_reuseshareuid \u00b6 [Source] fun box so_reuseshareuid() : I32 val Returns \u00b6 I32 val so_rfcomm_fc_info \u00b6 [Source] fun box so_rfcomm_fc_info() : I32 val Returns \u00b6 I32 val so_rfcomm_mtu \u00b6 [Source] fun box so_rfcomm_mtu() : I32 val Returns \u00b6 I32 val so_rxq_ovfl \u00b6 [Source] fun box so_rxq_ovfl() : I32 val Returns \u00b6 I32 val so_sco_conninfo \u00b6 [Source] fun box so_sco_conninfo() : I32 val Returns \u00b6 I32 val so_sco_mtu \u00b6 [Source] fun box so_sco_mtu() : I32 val Returns \u00b6 I32 val so_security_authentication \u00b6 [Source] fun box so_security_authentication() : I32 val Returns \u00b6 I32 val so_security_encryption_network \u00b6 [Source] fun box so_security_encryption_network() : I32 val Returns \u00b6 I32 val so_security_encryption_transport \u00b6 [Source] fun box so_security_encryption_transport() : I32 val Returns \u00b6 I32 val so_select_err_queue \u00b6 [Source] fun box so_select_err_queue() : I32 val Returns \u00b6 I32 val so_setclp \u00b6 [Source] fun box so_setclp() : I32 val Returns \u00b6 I32 val so_setfib \u00b6 [Source] fun box so_setfib() : I32 val Returns \u00b6 I32 val so_sndbuf \u00b6 [Source] fun box so_sndbuf() : I32 val Returns \u00b6 I32 val so_sndbufforce \u00b6 [Source] fun box so_sndbufforce() : I32 val Returns \u00b6 I32 val so_sndlowat \u00b6 [Source] fun box so_sndlowat() : I32 val Returns \u00b6 I32 val so_sndtimeo \u00b6 [Source] fun box so_sndtimeo() : I32 val Returns \u00b6 I32 val so_timestamp \u00b6 [Source] fun box so_timestamp() : I32 val Returns \u00b6 I32 val so_timestamping \u00b6 [Source] fun box so_timestamping() : I32 val Returns \u00b6 I32 val so_timestampns \u00b6 [Source] fun box so_timestampns() : I32 val Returns \u00b6 I32 val so_timestamp_monotonic \u00b6 [Source] fun box so_timestamp_monotonic() : I32 val Returns \u00b6 I32 val so_type \u00b6 [Source] fun box so_type() : I32 val Returns \u00b6 I32 val so_upcallclosewait \u00b6 [Source] fun box so_upcallclosewait() : I32 val Returns \u00b6 I32 val so_update_accept_context \u00b6 [Source] fun box so_update_accept_context() : I32 val Returns \u00b6 I32 val so_useloopback \u00b6 [Source] fun box so_useloopback() : I32 val Returns \u00b6 I32 val so_user_cookie \u00b6 [Source] fun box so_user_cookie() : I32 val Returns \u00b6 I32 val so_vendor \u00b6 [Source] fun box so_vendor() : I32 val Returns \u00b6 I32 val so_vm_sockets_buffer_max_size \u00b6 [Source] fun box so_vm_sockets_buffer_max_size() : I32 val Returns \u00b6 I32 val so_vm_sockets_buffer_min_size \u00b6 [Source] fun box so_vm_sockets_buffer_min_size() : I32 val Returns \u00b6 I32 val so_vm_sockets_buffer_size \u00b6 [Source] fun box so_vm_sockets_buffer_size() : I32 val Returns \u00b6 I32 val so_vm_sockets_connect_timeout \u00b6 [Source] fun box so_vm_sockets_connect_timeout() : I32 val Returns \u00b6 I32 val so_vm_sockets_nonblock_txrx \u00b6 [Source] fun box so_vm_sockets_nonblock_txrx() : I32 val Returns \u00b6 I32 val so_vm_sockets_peer_host_vm_id \u00b6 [Source] fun box so_vm_sockets_peer_host_vm_id() : I32 val Returns \u00b6 I32 val so_vm_sockets_trusted \u00b6 [Source] fun box so_vm_sockets_trusted() : I32 val Returns \u00b6 I32 val so_wantmore \u00b6 [Source] fun box so_wantmore() : I32 val Returns \u00b6 I32 val so_wantoobflag \u00b6 [Source] fun box so_wantoobflag() : I32 val Returns \u00b6 I32 val so_wifi_status \u00b6 [Source] fun box so_wifi_status() : I32 val Returns \u00b6 I32 val tcp6_mss \u00b6 [Source] fun box tcp6_mss() : I32 val Returns \u00b6 I32 val tcpci_flag_lossrecovery \u00b6 [Source] fun box tcpci_flag_lossrecovery() : I32 val Returns \u00b6 I32 val tcpci_flag_reordering_detected \u00b6 [Source] fun box tcpci_flag_reordering_detected() : I32 val Returns \u00b6 I32 val tcpci_opt_ecn \u00b6 [Source] fun box tcpci_opt_ecn() : I32 val Returns \u00b6 I32 val tcpci_opt_sack \u00b6 [Source] fun box tcpci_opt_sack() : I32 val Returns \u00b6 I32 val tcpci_opt_timestamps \u00b6 [Source] fun box tcpci_opt_timestamps() : I32 val Returns \u00b6 I32 val tcpci_opt_wscale \u00b6 [Source] fun box tcpci_opt_wscale() : I32 val Returns \u00b6 I32 val tcpf_ca_cwr \u00b6 [Source] fun box tcpf_ca_cwr() : I32 val Returns \u00b6 I32 val tcpf_ca_disorder \u00b6 [Source] fun box tcpf_ca_disorder() : I32 val Returns \u00b6 I32 val tcpf_ca_loss \u00b6 [Source] fun box tcpf_ca_loss() : I32 val Returns \u00b6 I32 val tcpf_ca_open \u00b6 [Source] fun box tcpf_ca_open() : I32 val Returns \u00b6 I32 val tcpf_ca_recovery \u00b6 [Source] fun box tcpf_ca_recovery() : I32 val Returns \u00b6 I32 val tcpi_opt_ecn \u00b6 [Source] fun box tcpi_opt_ecn() : I32 val Returns \u00b6 I32 val tcpi_opt_ecn_seen \u00b6 [Source] fun box tcpi_opt_ecn_seen() : I32 val Returns \u00b6 I32 val tcpi_opt_sack \u00b6 [Source] fun box tcpi_opt_sack() : I32 val Returns \u00b6 I32 val tcpi_opt_syn_data \u00b6 [Source] fun box tcpi_opt_syn_data() : I32 val Returns \u00b6 I32 val tcpi_opt_timestamps \u00b6 [Source] fun box tcpi_opt_timestamps() : I32 val Returns \u00b6 I32 val tcpi_opt_toe \u00b6 [Source] fun box tcpi_opt_toe() : I32 val Returns \u00b6 I32 val tcpi_opt_wscale \u00b6 [Source] fun box tcpi_opt_wscale() : I32 val Returns \u00b6 I32 val tcpolen_cc \u00b6 [Source] fun box tcpolen_cc() : I32 val Returns \u00b6 I32 val tcpolen_cc_appa \u00b6 [Source] fun box tcpolen_cc_appa() : I32 val Returns \u00b6 I32 val tcpolen_eol \u00b6 [Source] fun box tcpolen_eol() : I32 val Returns \u00b6 I32 val tcpolen_fastopen_req \u00b6 [Source] fun box tcpolen_fastopen_req() : I32 val Returns \u00b6 I32 val tcpolen_fast_open_empty \u00b6 [Source] fun box tcpolen_fast_open_empty() : I32 val Returns \u00b6 I32 val tcpolen_fast_open_max \u00b6 [Source] fun box tcpolen_fast_open_max() : I32 val Returns \u00b6 I32 val tcpolen_fast_open_min \u00b6 [Source] fun box tcpolen_fast_open_min() : I32 val Returns \u00b6 I32 val tcpolen_maxseg \u00b6 [Source] fun box tcpolen_maxseg() : I32 val Returns \u00b6 I32 val tcpolen_nop \u00b6 [Source] fun box tcpolen_nop() : I32 val Returns \u00b6 I32 val tcpolen_pad \u00b6 [Source] fun box tcpolen_pad() : I32 val Returns \u00b6 I32 val tcpolen_sack \u00b6 [Source] fun box tcpolen_sack() : I32 val Returns \u00b6 I32 val tcpolen_sackhdr \u00b6 [Source] fun box tcpolen_sackhdr() : I32 val Returns \u00b6 I32 val tcpolen_sack_permitted \u00b6 [Source] fun box tcpolen_sack_permitted() : I32 val Returns \u00b6 I32 val tcpolen_signature \u00b6 [Source] fun box tcpolen_signature() : I32 val Returns \u00b6 I32 val tcpolen_timestamp \u00b6 [Source] fun box tcpolen_timestamp() : I32 val Returns \u00b6 I32 val tcpolen_tstamp_appa \u00b6 [Source] fun box tcpolen_tstamp_appa() : I32 val Returns \u00b6 I32 val tcpolen_window \u00b6 [Source] fun box tcpolen_window() : I32 val Returns \u00b6 I32 val tcpopt_cc \u00b6 [Source] fun box tcpopt_cc() : I32 val Returns \u00b6 I32 val tcpopt_ccecho \u00b6 [Source] fun box tcpopt_ccecho() : I32 val Returns \u00b6 I32 val tcpopt_ccnew \u00b6 [Source] fun box tcpopt_ccnew() : I32 val Returns \u00b6 I32 val tcpopt_eol \u00b6 [Source] fun box tcpopt_eol() : I32 val Returns \u00b6 I32 val tcpopt_fastopen \u00b6 [Source] fun box tcpopt_fastopen() : I32 val Returns \u00b6 I32 val tcpopt_fast_open \u00b6 [Source] fun box tcpopt_fast_open() : I32 val Returns \u00b6 I32 val tcpopt_maxseg \u00b6 [Source] fun box tcpopt_maxseg() : I32 val Returns \u00b6 I32 val tcpopt_multipath \u00b6 [Source] fun box tcpopt_multipath() : I32 val Returns \u00b6 I32 val tcpopt_nop \u00b6 [Source] fun box tcpopt_nop() : I32 val Returns \u00b6 I32 val tcpopt_pad \u00b6 [Source] fun box tcpopt_pad() : I32 val Returns \u00b6 I32 val tcpopt_sack \u00b6 [Source] fun box tcpopt_sack() : I32 val Returns \u00b6 I32 val tcpopt_sack_hdr \u00b6 [Source] fun box tcpopt_sack_hdr() : I32 val Returns \u00b6 I32 val tcpopt_sack_permitted \u00b6 [Source] fun box tcpopt_sack_permitted() : I32 val Returns \u00b6 I32 val tcpopt_sack_permit_hdr \u00b6 [Source] fun box tcpopt_sack_permit_hdr() : I32 val Returns \u00b6 I32 val tcpopt_signature \u00b6 [Source] fun box tcpopt_signature() : I32 val Returns \u00b6 I32 val tcpopt_timestamp \u00b6 [Source] fun box tcpopt_timestamp() : I32 val Returns \u00b6 I32 val tcpopt_tstamp_hdr \u00b6 [Source] fun box tcpopt_tstamp_hdr() : I32 val Returns \u00b6 I32 val tcpopt_window \u00b6 [Source] fun box tcpopt_window() : I32 val Returns \u00b6 I32 val tcp_ca_name_max \u00b6 [Source] fun box tcp_ca_name_max() : I32 val Returns \u00b6 I32 val tcp_ccalgoopt \u00b6 [Source] fun box tcp_ccalgoopt() : I32 val Returns \u00b6 I32 val tcp_cc_info \u00b6 [Source] fun box tcp_cc_info() : I32 val Returns \u00b6 I32 val tcp_congestion \u00b6 [Source] fun box tcp_congestion() : I32 val Returns \u00b6 I32 val tcp_connectiontimeout \u00b6 [Source] fun box tcp_connectiontimeout() : I32 val Returns \u00b6 I32 val tcp_connection_info \u00b6 [Source] fun box tcp_connection_info() : I32 val Returns \u00b6 I32 val tcp_cookie_in_always \u00b6 [Source] fun box tcp_cookie_in_always() : I32 val Returns \u00b6 I32 val tcp_cookie_max \u00b6 [Source] fun box tcp_cookie_max() : I32 val Returns \u00b6 I32 val tcp_cookie_min \u00b6 [Source] fun box tcp_cookie_min() : I32 val Returns \u00b6 I32 val tcp_cookie_out_never \u00b6 [Source] fun box tcp_cookie_out_never() : I32 val Returns \u00b6 I32 val tcp_cookie_pair_size \u00b6 [Source] fun box tcp_cookie_pair_size() : I32 val Returns \u00b6 I32 val tcp_cookie_transactions \u00b6 [Source] fun box tcp_cookie_transactions() : I32 val Returns \u00b6 I32 val tcp_cork \u00b6 [Source] fun box tcp_cork() : I32 val Returns \u00b6 I32 val tcp_defer_accept \u00b6 [Source] fun box tcp_defer_accept() : I32 val Returns \u00b6 I32 val tcp_enable_ecn \u00b6 [Source] fun box tcp_enable_ecn() : I32 val Returns \u00b6 I32 val tcp_fastopen \u00b6 [Source] fun box tcp_fastopen() : I32 val Returns \u00b6 I32 val tcp_function_blk \u00b6 [Source] fun box tcp_function_blk() : I32 val Returns \u00b6 I32 val tcp_function_name_len_max \u00b6 [Source] fun box tcp_function_name_len_max() : I32 val Returns \u00b6 I32 val tcp_info \u00b6 [Source] fun box tcp_info() : I32 val Returns \u00b6 I32 val tcp_keepalive \u00b6 [Source] fun box tcp_keepalive() : I32 val Returns \u00b6 I32 val tcp_keepcnt \u00b6 [Source] fun box tcp_keepcnt() : I32 val Returns \u00b6 I32 val tcp_keepidle \u00b6 [Source] fun box tcp_keepidle() : I32 val Returns \u00b6 I32 val tcp_keepinit \u00b6 [Source] fun box tcp_keepinit() : I32 val Returns \u00b6 I32 val tcp_keepintvl \u00b6 [Source] fun box tcp_keepintvl() : I32 val Returns \u00b6 I32 val tcp_linger2 \u00b6 [Source] fun box tcp_linger2() : I32 val Returns \u00b6 I32 val tcp_maxburst \u00b6 [Source] fun box tcp_maxburst() : I32 val Returns \u00b6 I32 val tcp_maxhlen \u00b6 [Source] fun box tcp_maxhlen() : I32 val Returns \u00b6 I32 val tcp_maxolen \u00b6 [Source] fun box tcp_maxolen() : I32 val Returns \u00b6 I32 val tcp_maxseg \u00b6 [Source] fun box tcp_maxseg() : I32 val Returns \u00b6 I32 val tcp_maxwin \u00b6 [Source] fun box tcp_maxwin() : I32 val Returns \u00b6 I32 val tcp_max_sack \u00b6 [Source] fun box tcp_max_sack() : I32 val Returns \u00b6 I32 val tcp_max_winshift \u00b6 [Source] fun box tcp_max_winshift() : I32 val Returns \u00b6 I32 val tcp_md5sig \u00b6 [Source] fun box tcp_md5sig() : I32 val Returns \u00b6 I32 val tcp_md5sig_maxkeylen \u00b6 [Source] fun box tcp_md5sig_maxkeylen() : I32 val Returns \u00b6 I32 val tcp_minmss \u00b6 [Source] fun box tcp_minmss() : I32 val Returns \u00b6 I32 val tcp_mss \u00b6 [Source] fun box tcp_mss() : I32 val Returns \u00b6 I32 val tcp_mss_default \u00b6 [Source] fun box tcp_mss_default() : I32 val Returns \u00b6 I32 val tcp_mss_desired \u00b6 [Source] fun box tcp_mss_desired() : I32 val Returns \u00b6 I32 val tcp_nodelay \u00b6 [Source] fun box tcp_nodelay() : I32 val Returns \u00b6 I32 val tcp_noopt \u00b6 [Source] fun box tcp_noopt() : I32 val Returns \u00b6 I32 val tcp_nopush \u00b6 [Source] fun box tcp_nopush() : I32 val Returns \u00b6 I32 val tcp_notsent_lowat \u00b6 [Source] fun box tcp_notsent_lowat() : I32 val Returns \u00b6 I32 val tcp_pcap_in \u00b6 [Source] fun box tcp_pcap_in() : I32 val Returns \u00b6 I32 val tcp_pcap_out \u00b6 [Source] fun box tcp_pcap_out() : I32 val Returns \u00b6 I32 val tcp_queue_seq \u00b6 [Source] fun box tcp_queue_seq() : I32 val Returns \u00b6 I32 val tcp_quickack \u00b6 [Source] fun box tcp_quickack() : I32 val Returns \u00b6 I32 val tcp_repair \u00b6 [Source] fun box tcp_repair() : I32 val Returns \u00b6 I32 val tcp_repair_options \u00b6 [Source] fun box tcp_repair_options() : I32 val Returns \u00b6 I32 val tcp_repair_queue \u00b6 [Source] fun box tcp_repair_queue() : I32 val Returns \u00b6 I32 val tcp_rxt_conndroptime \u00b6 [Source] fun box tcp_rxt_conndroptime() : I32 val Returns \u00b6 I32 val tcp_rxt_findrop \u00b6 [Source] fun box tcp_rxt_findrop() : I32 val Returns \u00b6 I32 val tcp_saved_syn \u00b6 [Source] fun box tcp_saved_syn() : I32 val Returns \u00b6 I32 val tcp_save_syn \u00b6 [Source] fun box tcp_save_syn() : I32 val Returns \u00b6 I32 val tcp_sendmoreacks \u00b6 [Source] fun box tcp_sendmoreacks() : I32 val Returns \u00b6 I32 val tcp_syncnt \u00b6 [Source] fun box tcp_syncnt() : I32 val Returns \u00b6 I32 val tcp_s_data_in \u00b6 [Source] fun box tcp_s_data_in() : I32 val Returns \u00b6 I32 val tcp_s_data_out \u00b6 [Source] fun box tcp_s_data_out() : I32 val Returns \u00b6 I32 val tcp_thin_dupack \u00b6 [Source] fun box tcp_thin_dupack() : I32 val Returns \u00b6 I32 val tcp_thin_linear_timeouts \u00b6 [Source] fun box tcp_thin_linear_timeouts() : I32 val Returns \u00b6 I32 val tcp_timestamp \u00b6 [Source] fun box tcp_timestamp() : I32 val Returns \u00b6 I32 val tcp_user_timeout \u00b6 [Source] fun box tcp_user_timeout() : I32 val Returns \u00b6 I32 val tcp_vendor \u00b6 [Source] fun box tcp_vendor() : I32 val Returns \u00b6 I32 val tcp_window_clamp \u00b6 [Source] fun box tcp_window_clamp() : I32 val Returns \u00b6 I32 val tipc_addr_id \u00b6 [Source] fun box tipc_addr_id() : I32 val Returns \u00b6 I32 val tipc_addr_mcast \u00b6 [Source] fun box tipc_addr_mcast() : I32 val Returns \u00b6 I32 val tipc_addr_name \u00b6 [Source] fun box tipc_addr_name() : I32 val Returns \u00b6 I32 val tipc_addr_nameseq \u00b6 [Source] fun box tipc_addr_nameseq() : I32 val Returns \u00b6 I32 val tipc_cfg_srv \u00b6 [Source] fun box tipc_cfg_srv() : I32 val Returns \u00b6 I32 val tipc_cluster_scope \u00b6 [Source] fun box tipc_cluster_scope() : I32 val Returns \u00b6 I32 val tipc_conn_shutdown \u00b6 [Source] fun box tipc_conn_shutdown() : I32 val Returns \u00b6 I32 val tipc_conn_timeout \u00b6 [Source] fun box tipc_conn_timeout() : I32 val Returns \u00b6 I32 val tipc_critical_importance \u00b6 [Source] fun box tipc_critical_importance() : I32 val Returns \u00b6 I32 val tipc_destname \u00b6 [Source] fun box tipc_destname() : I32 val Returns \u00b6 I32 val tipc_dest_droppable \u00b6 [Source] fun box tipc_dest_droppable() : I32 val Returns \u00b6 I32 val tipc_errinfo \u00b6 [Source] fun box tipc_errinfo() : I32 val Returns \u00b6 I32 val tipc_err_no_name \u00b6 [Source] fun box tipc_err_no_name() : I32 val Returns \u00b6 I32 val tipc_err_no_node \u00b6 [Source] fun box tipc_err_no_node() : I32 val Returns \u00b6 I32 val tipc_err_no_port \u00b6 [Source] fun box tipc_err_no_port() : I32 val Returns \u00b6 I32 val tipc_err_overload \u00b6 [Source] fun box tipc_err_overload() : I32 val Returns \u00b6 I32 val tipc_high_importance \u00b6 [Source] fun box tipc_high_importance() : I32 val Returns \u00b6 I32 val tipc_importance \u00b6 [Source] fun box tipc_importance() : I32 val Returns \u00b6 I32 val tipc_link_state \u00b6 [Source] fun box tipc_link_state() : I32 val Returns \u00b6 I32 val tipc_low_importance \u00b6 [Source] fun box tipc_low_importance() : I32 val Returns \u00b6 I32 val tipc_max_bearer_name \u00b6 [Source] fun box tipc_max_bearer_name() : I32 val Returns \u00b6 I32 val tipc_max_if_name \u00b6 [Source] fun box tipc_max_if_name() : I32 val Returns \u00b6 I32 val tipc_max_link_name \u00b6 [Source] fun box tipc_max_link_name() : I32 val Returns \u00b6 I32 val tipc_max_media_name \u00b6 [Source] fun box tipc_max_media_name() : I32 val Returns \u00b6 I32 val tipc_max_user_msg_size \u00b6 [Source] fun box tipc_max_user_msg_size() : I32 val Returns \u00b6 I32 val tipc_medium_importance \u00b6 [Source] fun box tipc_medium_importance() : I32 val Returns \u00b6 I32 val tipc_node_recvq_depth \u00b6 [Source] fun box tipc_node_recvq_depth() : I32 val Returns \u00b6 I32 val tipc_node_scope \u00b6 [Source] fun box tipc_node_scope() : I32 val Returns \u00b6 I32 val tipc_ok \u00b6 [Source] fun box tipc_ok() : I32 val Returns \u00b6 I32 val tipc_published \u00b6 [Source] fun box tipc_published() : I32 val Returns \u00b6 I32 val tipc_reserved_types \u00b6 [Source] fun box tipc_reserved_types() : I32 val Returns \u00b6 I32 val tipc_retdata \u00b6 [Source] fun box tipc_retdata() : I32 val Returns \u00b6 I32 val tipc_sock_recvq_depth \u00b6 [Source] fun box tipc_sock_recvq_depth() : I32 val Returns \u00b6 I32 val tipc_src_droppable \u00b6 [Source] fun box tipc_src_droppable() : I32 val Returns \u00b6 I32 val tipc_subscr_timeout \u00b6 [Source] fun box tipc_subscr_timeout() : I32 val Returns \u00b6 I32 val tipc_sub_cancel \u00b6 [Source] fun box tipc_sub_cancel() : I32 val Returns \u00b6 I32 val tipc_sub_ports \u00b6 [Source] fun box tipc_sub_ports() : I32 val Returns \u00b6 I32 val tipc_sub_service \u00b6 [Source] fun box tipc_sub_service() : I32 val Returns \u00b6 I32 val tipc_top_srv \u00b6 [Source] fun box tipc_top_srv() : I32 val Returns \u00b6 I32 val tipc_wait_forever \u00b6 [Source] fun box tipc_wait_forever() : I32 val Returns \u00b6 I32 val tipc_withdrawn \u00b6 [Source] fun box tipc_withdrawn() : I32 val Returns \u00b6 I32 val tipc_zone_scope \u00b6 [Source] fun box tipc_zone_scope() : I32 val Returns \u00b6 I32 val ttcp_client_snd_wnd \u00b6 [Source] fun box ttcp_client_snd_wnd() : I32 val Returns \u00b6 I32 val udp_cork \u00b6 [Source] fun box udp_cork() : I32 val Returns \u00b6 I32 val udp_encap \u00b6 [Source] fun box udp_encap() : I32 val Returns \u00b6 I32 val udp_encap_espinudp \u00b6 [Source] fun box udp_encap_espinudp() : I32 val Returns \u00b6 I32 val udp_encap_espinudp_maxfraglen \u00b6 [Source] fun box udp_encap_espinudp_maxfraglen() : I32 val Returns \u00b6 I32 val udp_encap_espinudp_non_ike \u00b6 [Source] fun box udp_encap_espinudp_non_ike() : I32 val Returns \u00b6 I32 val udp_encap_espinudp_port \u00b6 [Source] fun box udp_encap_espinudp_port() : I32 val Returns \u00b6 I32 val udp_encap_l2tpinudp \u00b6 [Source] fun box udp_encap_l2tpinudp() : I32 val Returns \u00b6 I32 val udp_nocksum \u00b6 [Source] fun box udp_nocksum() : I32 val Returns \u00b6 I32 val udp_no_check6_rx \u00b6 [Source] fun box udp_no_check6_rx() : I32 val Returns \u00b6 I32 val udp_no_check6_tx \u00b6 [Source] fun box udp_no_check6_tx() : I32 val Returns \u00b6 I32 val udp_vendor \u00b6 [Source] fun box udp_vendor() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: OSSockOpt val) : Bool val Parameters \u00b6 that: OSSockOpt val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: OSSockOpt val) : Bool val Parameters \u00b6 that: OSSockOpt val Returns \u00b6 Bool val","title":"primitive OSSockOpt"},{"location":"net-OSSockOpt/#ossockopt","text":"[Source] Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the getsockopt(2) and setsockopt(2) operating system calls. The values of the option level and option name constants are typically C preprocessor macros, e.g., #define SOMETHING 42 . These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, IP_NAT__XXX ). The function names in this primitive are derived by the C macro name and then: converted to lower case any double underscore ( __ ) is converted to a single underscore ( _ ). These constants are not stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization & deserialization or via direct shared memory). Many functions may return -1 , which means that the constant's value could not be determined at the Pony runtime library compile time. One cause may be that the option truly isn't available, for example, the option level constant IPPROTO_3PC is available on MacOS 10.x but not on Linux 4.4. Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform. A third cause of error is due to the regular expression-based approach used to harvest desirable constants. It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with getsockopt(2) and setsockopt(2) . Please consult your platform's documentation to verify the names of the option level and option name macros. The following code fragments are equivalent: set the socket receive buffer size for the file descriptor fd to 4455 . /* In C */ int option_value = 4455; setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &option_value, 4); /* In Pony */ var option: I32 = 4455; @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), addressof option, I32(4)) primitive val OSSockOpt","title":"OSSockOpt"},{"location":"net-OSSockOpt/#constructors","text":"","title":"Constructors"},{"location":"net-OSSockOpt/#create","text":"[Source] new val create() : OSSockOpt val^","title":"create"},{"location":"net-OSSockOpt/#returns","text":"OSSockOpt val^","title":"Returns"},{"location":"net-OSSockOpt/#public-functions","text":"","title":"Public Functions"},{"location":"net-OSSockOpt/#ipproto_3pc","text":"[Source] fun box ipproto_3pc() : I32 val","title":"ipproto_3pc"},{"location":"net-OSSockOpt/#returns_1","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_adfs","text":"[Source] fun box ipproto_adfs() : I32 val","title":"ipproto_adfs"},{"location":"net-OSSockOpt/#returns_2","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ah","text":"[Source] fun box ipproto_ah() : I32 val","title":"ipproto_ah"},{"location":"net-OSSockOpt/#returns_3","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ahip","text":"[Source] fun box ipproto_ahip() : I32 val","title":"ipproto_ahip"},{"location":"net-OSSockOpt/#returns_4","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_apes","text":"[Source] fun box ipproto_apes() : I32 val","title":"ipproto_apes"},{"location":"net-OSSockOpt/#returns_5","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_argus","text":"[Source] fun box ipproto_argus() : I32 val","title":"ipproto_argus"},{"location":"net-OSSockOpt/#returns_6","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ax25","text":"[Source] fun box ipproto_ax25() : I32 val","title":"ipproto_ax25"},{"location":"net-OSSockOpt/#returns_7","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_beetph","text":"[Source] fun box ipproto_beetph() : I32 val","title":"ipproto_beetph"},{"location":"net-OSSockOpt/#returns_8","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_bha","text":"[Source] fun box ipproto_bha() : I32 val","title":"ipproto_bha"},{"location":"net-OSSockOpt/#returns_9","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_blt","text":"[Source] fun box ipproto_blt() : I32 val","title":"ipproto_blt"},{"location":"net-OSSockOpt/#returns_10","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_brsatmon","text":"[Source] fun box ipproto_brsatmon() : I32 val","title":"ipproto_brsatmon"},{"location":"net-OSSockOpt/#returns_11","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_carp","text":"[Source] fun box ipproto_carp() : I32 val","title":"ipproto_carp"},{"location":"net-OSSockOpt/#returns_12","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cftp","text":"[Source] fun box ipproto_cftp() : I32 val","title":"ipproto_cftp"},{"location":"net-OSSockOpt/#returns_13","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_chaos","text":"[Source] fun box ipproto_chaos() : I32 val","title":"ipproto_chaos"},{"location":"net-OSSockOpt/#returns_14","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cmtp","text":"[Source] fun box ipproto_cmtp() : I32 val","title":"ipproto_cmtp"},{"location":"net-OSSockOpt/#returns_15","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_comp","text":"[Source] fun box ipproto_comp() : I32 val","title":"ipproto_comp"},{"location":"net-OSSockOpt/#returns_16","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cphb","text":"[Source] fun box ipproto_cphb() : I32 val","title":"ipproto_cphb"},{"location":"net-OSSockOpt/#returns_17","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_cpnx","text":"[Source] fun box ipproto_cpnx() : I32 val","title":"ipproto_cpnx"},{"location":"net-OSSockOpt/#returns_18","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_dccp","text":"[Source] fun box ipproto_dccp() : I32 val","title":"ipproto_dccp"},{"location":"net-OSSockOpt/#returns_19","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ddp","text":"[Source] fun box ipproto_ddp() : I32 val","title":"ipproto_ddp"},{"location":"net-OSSockOpt/#returns_20","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_dgp","text":"[Source] fun box ipproto_dgp() : I32 val","title":"ipproto_dgp"},{"location":"net-OSSockOpt/#returns_21","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_divert","text":"[Source] fun box ipproto_divert() : I32 val","title":"ipproto_divert"},{"location":"net-OSSockOpt/#returns_22","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_done","text":"[Source] fun box ipproto_done() : I32 val","title":"ipproto_done"},{"location":"net-OSSockOpt/#returns_23","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_dstopts","text":"[Source] fun box ipproto_dstopts() : I32 val","title":"ipproto_dstopts"},{"location":"net-OSSockOpt/#returns_24","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_egp","text":"[Source] fun box ipproto_egp() : I32 val","title":"ipproto_egp"},{"location":"net-OSSockOpt/#returns_25","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_emcon","text":"[Source] fun box ipproto_emcon() : I32 val","title":"ipproto_emcon"},{"location":"net-OSSockOpt/#returns_26","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_encap","text":"[Source] fun box ipproto_encap() : I32 val","title":"ipproto_encap"},{"location":"net-OSSockOpt/#returns_27","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_eon","text":"[Source] fun box ipproto_eon() : I32 val","title":"ipproto_eon"},{"location":"net-OSSockOpt/#returns_28","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_esp","text":"[Source] fun box ipproto_esp() : I32 val","title":"ipproto_esp"},{"location":"net-OSSockOpt/#returns_29","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_etherip","text":"[Source] fun box ipproto_etherip() : I32 val","title":"ipproto_etherip"},{"location":"net-OSSockOpt/#returns_30","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_fragment","text":"[Source] fun box ipproto_fragment() : I32 val","title":"ipproto_fragment"},{"location":"net-OSSockOpt/#returns_31","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ggp","text":"[Source] fun box ipproto_ggp() : I32 val","title":"ipproto_ggp"},{"location":"net-OSSockOpt/#returns_32","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_gmtp","text":"[Source] fun box ipproto_gmtp() : I32 val","title":"ipproto_gmtp"},{"location":"net-OSSockOpt/#returns_33","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_gre","text":"[Source] fun box ipproto_gre() : I32 val","title":"ipproto_gre"},{"location":"net-OSSockOpt/#returns_34","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hello","text":"[Source] fun box ipproto_hello() : I32 val","title":"ipproto_hello"},{"location":"net-OSSockOpt/#returns_35","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hip","text":"[Source] fun box ipproto_hip() : I32 val","title":"ipproto_hip"},{"location":"net-OSSockOpt/#returns_36","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hmp","text":"[Source] fun box ipproto_hmp() : I32 val","title":"ipproto_hmp"},{"location":"net-OSSockOpt/#returns_37","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_hopopts","text":"[Source] fun box ipproto_hopopts() : I32 val","title":"ipproto_hopopts"},{"location":"net-OSSockOpt/#returns_38","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_icmp","text":"[Source] fun box ipproto_icmp() : I32 val","title":"ipproto_icmp"},{"location":"net-OSSockOpt/#returns_39","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_icmpv6","text":"[Source] fun box ipproto_icmpv6() : I32 val","title":"ipproto_icmpv6"},{"location":"net-OSSockOpt/#returns_40","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_idp","text":"[Source] fun box ipproto_idp() : I32 val","title":"ipproto_idp"},{"location":"net-OSSockOpt/#returns_41","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_idpr","text":"[Source] fun box ipproto_idpr() : I32 val","title":"ipproto_idpr"},{"location":"net-OSSockOpt/#returns_42","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_idrp","text":"[Source] fun box ipproto_idrp() : I32 val","title":"ipproto_idrp"},{"location":"net-OSSockOpt/#returns_43","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_igmp","text":"[Source] fun box ipproto_igmp() : I32 val","title":"ipproto_igmp"},{"location":"net-OSSockOpt/#returns_44","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_igp","text":"[Source] fun box ipproto_igp() : I32 val","title":"ipproto_igp"},{"location":"net-OSSockOpt/#returns_45","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_igrp","text":"[Source] fun box ipproto_igrp() : I32 val","title":"ipproto_igrp"},{"location":"net-OSSockOpt/#returns_46","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_il","text":"[Source] fun box ipproto_il() : I32 val","title":"ipproto_il"},{"location":"net-OSSockOpt/#returns_47","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_inlsp","text":"[Source] fun box ipproto_inlsp() : I32 val","title":"ipproto_inlsp"},{"location":"net-OSSockOpt/#returns_48","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_inp","text":"[Source] fun box ipproto_inp() : I32 val","title":"ipproto_inp"},{"location":"net-OSSockOpt/#returns_49","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ip","text":"[Source] fun box ipproto_ip() : I32 val","title":"ipproto_ip"},{"location":"net-OSSockOpt/#returns_50","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipcomp","text":"[Source] fun box ipproto_ipcomp() : I32 val","title":"ipproto_ipcomp"},{"location":"net-OSSockOpt/#returns_51","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipcv","text":"[Source] fun box ipproto_ipcv() : I32 val","title":"ipproto_ipcv"},{"location":"net-OSSockOpt/#returns_52","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipeip","text":"[Source] fun box ipproto_ipeip() : I32 val","title":"ipproto_ipeip"},{"location":"net-OSSockOpt/#returns_53","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipip","text":"[Source] fun box ipproto_ipip() : I32 val","title":"ipproto_ipip"},{"location":"net-OSSockOpt/#returns_54","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ippc","text":"[Source] fun box ipproto_ippc() : I32 val","title":"ipproto_ippc"},{"location":"net-OSSockOpt/#returns_55","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipv4","text":"[Source] fun box ipproto_ipv4() : I32 val","title":"ipproto_ipv4"},{"location":"net-OSSockOpt/#returns_56","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ipv6","text":"[Source] fun box ipproto_ipv6() : I32 val","title":"ipproto_ipv6"},{"location":"net-OSSockOpt/#returns_57","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_irtp","text":"[Source] fun box ipproto_irtp() : I32 val","title":"ipproto_irtp"},{"location":"net-OSSockOpt/#returns_58","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_kryptolan","text":"[Source] fun box ipproto_kryptolan() : I32 val","title":"ipproto_kryptolan"},{"location":"net-OSSockOpt/#returns_59","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_larp","text":"[Source] fun box ipproto_larp() : I32 val","title":"ipproto_larp"},{"location":"net-OSSockOpt/#returns_60","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_leaf1","text":"[Source] fun box ipproto_leaf1() : I32 val","title":"ipproto_leaf1"},{"location":"net-OSSockOpt/#returns_61","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_leaf2","text":"[Source] fun box ipproto_leaf2() : I32 val","title":"ipproto_leaf2"},{"location":"net-OSSockOpt/#returns_62","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_max","text":"[Source] fun box ipproto_max() : I32 val","title":"ipproto_max"},{"location":"net-OSSockOpt/#returns_63","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_maxid","text":"[Source] fun box ipproto_maxid() : I32 val","title":"ipproto_maxid"},{"location":"net-OSSockOpt/#returns_64","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_meas","text":"[Source] fun box ipproto_meas() : I32 val","title":"ipproto_meas"},{"location":"net-OSSockOpt/#returns_65","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mh","text":"[Source] fun box ipproto_mh() : I32 val","title":"ipproto_mh"},{"location":"net-OSSockOpt/#returns_66","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mhrp","text":"[Source] fun box ipproto_mhrp() : I32 val","title":"ipproto_mhrp"},{"location":"net-OSSockOpt/#returns_67","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_micp","text":"[Source] fun box ipproto_micp() : I32 val","title":"ipproto_micp"},{"location":"net-OSSockOpt/#returns_68","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mobile","text":"[Source] fun box ipproto_mobile() : I32 val","title":"ipproto_mobile"},{"location":"net-OSSockOpt/#returns_69","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mpls","text":"[Source] fun box ipproto_mpls() : I32 val","title":"ipproto_mpls"},{"location":"net-OSSockOpt/#returns_70","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mtp","text":"[Source] fun box ipproto_mtp() : I32 val","title":"ipproto_mtp"},{"location":"net-OSSockOpt/#returns_71","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_mux","text":"[Source] fun box ipproto_mux() : I32 val","title":"ipproto_mux"},{"location":"net-OSSockOpt/#returns_72","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nd","text":"[Source] fun box ipproto_nd() : I32 val","title":"ipproto_nd"},{"location":"net-OSSockOpt/#returns_73","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nhrp","text":"[Source] fun box ipproto_nhrp() : I32 val","title":"ipproto_nhrp"},{"location":"net-OSSockOpt/#returns_74","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_none","text":"[Source] fun box ipproto_none() : I32 val","title":"ipproto_none"},{"location":"net-OSSockOpt/#returns_75","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nsp","text":"[Source] fun box ipproto_nsp() : I32 val","title":"ipproto_nsp"},{"location":"net-OSSockOpt/#returns_76","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_nvpii","text":"[Source] fun box ipproto_nvpii() : I32 val","title":"ipproto_nvpii"},{"location":"net-OSSockOpt/#returns_77","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_old_divert","text":"[Source] fun box ipproto_old_divert() : I32 val","title":"ipproto_old_divert"},{"location":"net-OSSockOpt/#returns_78","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ospfigp","text":"[Source] fun box ipproto_ospfigp() : I32 val","title":"ipproto_ospfigp"},{"location":"net-OSSockOpt/#returns_79","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pfsync","text":"[Source] fun box ipproto_pfsync() : I32 val","title":"ipproto_pfsync"},{"location":"net-OSSockOpt/#returns_80","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pgm","text":"[Source] fun box ipproto_pgm() : I32 val","title":"ipproto_pgm"},{"location":"net-OSSockOpt/#returns_81","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pigp","text":"[Source] fun box ipproto_pigp() : I32 val","title":"ipproto_pigp"},{"location":"net-OSSockOpt/#returns_82","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pim","text":"[Source] fun box ipproto_pim() : I32 val","title":"ipproto_pim"},{"location":"net-OSSockOpt/#returns_83","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_prm","text":"[Source] fun box ipproto_prm() : I32 val","title":"ipproto_prm"},{"location":"net-OSSockOpt/#returns_84","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pup","text":"[Source] fun box ipproto_pup() : I32 val","title":"ipproto_pup"},{"location":"net-OSSockOpt/#returns_85","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_pvp","text":"[Source] fun box ipproto_pvp() : I32 val","title":"ipproto_pvp"},{"location":"net-OSSockOpt/#returns_86","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_raw","text":"[Source] fun box ipproto_raw() : I32 val","title":"ipproto_raw"},{"location":"net-OSSockOpt/#returns_87","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rccmon","text":"[Source] fun box ipproto_rccmon() : I32 val","title":"ipproto_rccmon"},{"location":"net-OSSockOpt/#returns_88","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rdp","text":"[Source] fun box ipproto_rdp() : I32 val","title":"ipproto_rdp"},{"location":"net-OSSockOpt/#returns_89","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_reserved_253","text":"[Source] fun box ipproto_reserved_253() : I32 val","title":"ipproto_reserved_253"},{"location":"net-OSSockOpt/#returns_90","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_reserved_254","text":"[Source] fun box ipproto_reserved_254() : I32 val","title":"ipproto_reserved_254"},{"location":"net-OSSockOpt/#returns_91","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_routing","text":"[Source] fun box ipproto_routing() : I32 val","title":"ipproto_routing"},{"location":"net-OSSockOpt/#returns_92","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rsvp","text":"[Source] fun box ipproto_rsvp() : I32 val","title":"ipproto_rsvp"},{"location":"net-OSSockOpt/#returns_93","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_rvd","text":"[Source] fun box ipproto_rvd() : I32 val","title":"ipproto_rvd"},{"location":"net-OSSockOpt/#returns_94","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_satexpak","text":"[Source] fun box ipproto_satexpak() : I32 val","title":"ipproto_satexpak"},{"location":"net-OSSockOpt/#returns_95","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_satmon","text":"[Source] fun box ipproto_satmon() : I32 val","title":"ipproto_satmon"},{"location":"net-OSSockOpt/#returns_96","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sccsp","text":"[Source] fun box ipproto_sccsp() : I32 val","title":"ipproto_sccsp"},{"location":"net-OSSockOpt/#returns_97","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sctp","text":"[Source] fun box ipproto_sctp() : I32 val","title":"ipproto_sctp"},{"location":"net-OSSockOpt/#returns_98","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sdrp","text":"[Source] fun box ipproto_sdrp() : I32 val","title":"ipproto_sdrp"},{"location":"net-OSSockOpt/#returns_99","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_send","text":"[Source] fun box ipproto_send() : I32 val","title":"ipproto_send"},{"location":"net-OSSockOpt/#returns_100","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_sep","text":"[Source] fun box ipproto_sep() : I32 val","title":"ipproto_sep"},{"location":"net-OSSockOpt/#returns_101","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_shim6","text":"[Source] fun box ipproto_shim6() : I32 val","title":"ipproto_shim6"},{"location":"net-OSSockOpt/#returns_102","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_skip","text":"[Source] fun box ipproto_skip() : I32 val","title":"ipproto_skip"},{"location":"net-OSSockOpt/#returns_103","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_spacer","text":"[Source] fun box ipproto_spacer() : I32 val","title":"ipproto_spacer"},{"location":"net-OSSockOpt/#returns_104","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_srpc","text":"[Source] fun box ipproto_srpc() : I32 val","title":"ipproto_srpc"},{"location":"net-OSSockOpt/#returns_105","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_st","text":"[Source] fun box ipproto_st() : I32 val","title":"ipproto_st"},{"location":"net-OSSockOpt/#returns_106","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_svmtp","text":"[Source] fun box ipproto_svmtp() : I32 val","title":"ipproto_svmtp"},{"location":"net-OSSockOpt/#returns_107","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_swipe","text":"[Source] fun box ipproto_swipe() : I32 val","title":"ipproto_swipe"},{"location":"net-OSSockOpt/#returns_108","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tcf","text":"[Source] fun box ipproto_tcf() : I32 val","title":"ipproto_tcf"},{"location":"net-OSSockOpt/#returns_109","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tcp","text":"[Source] fun box ipproto_tcp() : I32 val","title":"ipproto_tcp"},{"location":"net-OSSockOpt/#returns_110","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tlsp","text":"[Source] fun box ipproto_tlsp() : I32 val","title":"ipproto_tlsp"},{"location":"net-OSSockOpt/#returns_111","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tp","text":"[Source] fun box ipproto_tp() : I32 val","title":"ipproto_tp"},{"location":"net-OSSockOpt/#returns_112","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_tpxx","text":"[Source] fun box ipproto_tpxx() : I32 val","title":"ipproto_tpxx"},{"location":"net-OSSockOpt/#returns_113","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_trunk1","text":"[Source] fun box ipproto_trunk1() : I32 val","title":"ipproto_trunk1"},{"location":"net-OSSockOpt/#returns_114","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_trunk2","text":"[Source] fun box ipproto_trunk2() : I32 val","title":"ipproto_trunk2"},{"location":"net-OSSockOpt/#returns_115","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_ttp","text":"[Source] fun box ipproto_ttp() : I32 val","title":"ipproto_ttp"},{"location":"net-OSSockOpt/#returns_116","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_udp","text":"[Source] fun box ipproto_udp() : I32 val","title":"ipproto_udp"},{"location":"net-OSSockOpt/#returns_117","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_udplite","text":"[Source] fun box ipproto_udplite() : I32 val","title":"ipproto_udplite"},{"location":"net-OSSockOpt/#returns_118","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_vines","text":"[Source] fun box ipproto_vines() : I32 val","title":"ipproto_vines"},{"location":"net-OSSockOpt/#returns_119","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_visa","text":"[Source] fun box ipproto_visa() : I32 val","title":"ipproto_visa"},{"location":"net-OSSockOpt/#returns_120","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_vmtp","text":"[Source] fun box ipproto_vmtp() : I32 val","title":"ipproto_vmtp"},{"location":"net-OSSockOpt/#returns_121","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_wbexpak","text":"[Source] fun box ipproto_wbexpak() : I32 val","title":"ipproto_wbexpak"},{"location":"net-OSSockOpt/#returns_122","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_wbmon","text":"[Source] fun box ipproto_wbmon() : I32 val","title":"ipproto_wbmon"},{"location":"net-OSSockOpt/#returns_123","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_wsn","text":"[Source] fun box ipproto_wsn() : I32 val","title":"ipproto_wsn"},{"location":"net-OSSockOpt/#returns_124","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_xnet","text":"[Source] fun box ipproto_xnet() : I32 val","title":"ipproto_xnet"},{"location":"net-OSSockOpt/#returns_125","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipproto_xtp","text":"[Source] fun box ipproto_xtp() : I32 val","title":"ipproto_xtp"},{"location":"net-OSSockOpt/#returns_126","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_atalk","text":"[Source] fun box sol_atalk() : I32 val","title":"sol_atalk"},{"location":"net-OSSockOpt/#returns_127","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_ax25","text":"[Source] fun box sol_ax25() : I32 val","title":"sol_ax25"},{"location":"net-OSSockOpt/#returns_128","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_hci_raw","text":"[Source] fun box sol_hci_raw() : I32 val","title":"sol_hci_raw"},{"location":"net-OSSockOpt/#returns_129","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_ipx","text":"[Source] fun box sol_ipx() : I32 val","title":"sol_ipx"},{"location":"net-OSSockOpt/#returns_130","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_l2cap","text":"[Source] fun box sol_l2cap() : I32 val","title":"sol_l2cap"},{"location":"net-OSSockOpt/#returns_131","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_local","text":"[Source] fun box sol_local() : I32 val","title":"sol_local"},{"location":"net-OSSockOpt/#returns_132","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_ndrvproto","text":"[Source] fun box sol_ndrvproto() : I32 val","title":"sol_ndrvproto"},{"location":"net-OSSockOpt/#returns_133","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_netrom","text":"[Source] fun box sol_netrom() : I32 val","title":"sol_netrom"},{"location":"net-OSSockOpt/#returns_134","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_rds","text":"[Source] fun box sol_rds() : I32 val","title":"sol_rds"},{"location":"net-OSSockOpt/#returns_135","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_rfcomm","text":"[Source] fun box sol_rfcomm() : I32 val","title":"sol_rfcomm"},{"location":"net-OSSockOpt/#returns_136","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_rose","text":"[Source] fun box sol_rose() : I32 val","title":"sol_rose"},{"location":"net-OSSockOpt/#returns_137","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_sco","text":"[Source] fun box sol_sco() : I32 val","title":"sol_sco"},{"location":"net-OSSockOpt/#returns_138","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_socket","text":"[Source] fun box sol_socket() : I32 val","title":"sol_socket"},{"location":"net-OSSockOpt/#returns_139","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_tipc","text":"[Source] fun box sol_tipc() : I32 val","title":"sol_tipc"},{"location":"net-OSSockOpt/#returns_140","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sol_udp","text":"[Source] fun box sol_udp() : I32 val","title":"sol_udp"},{"location":"net-OSSockOpt/#returns_141","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#af_coip","text":"[Source] fun box af_coip() : I32 val","title":"af_coip"},{"location":"net-OSSockOpt/#returns_142","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#af_inet","text":"[Source] fun box af_inet() : I32 val","title":"af_inet"},{"location":"net-OSSockOpt/#returns_143","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#af_inet6","text":"[Source] fun box af_inet6() : I32 val","title":"af_inet6"},{"location":"net-OSSockOpt/#returns_144","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#bluetooth_proto_sco","text":"[Source] fun box bluetooth_proto_sco() : I32 val","title":"bluetooth_proto_sco"},{"location":"net-OSSockOpt/#returns_145","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_nr_pkt_types","text":"[Source] fun box dccp_nr_pkt_types() : I32 val","title":"dccp_nr_pkt_types"},{"location":"net-OSSockOpt/#returns_146","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_service_list_max_len","text":"[Source] fun box dccp_service_list_max_len() : I32 val","title":"dccp_service_list_max_len"},{"location":"net-OSSockOpt/#returns_147","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_single_opt_maxlen","text":"[Source] fun box dccp_single_opt_maxlen() : I32 val","title":"dccp_single_opt_maxlen"},{"location":"net-OSSockOpt/#returns_148","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_available_ccids","text":"[Source] fun box dccp_sockopt_available_ccids() : I32 val","title":"dccp_sockopt_available_ccids"},{"location":"net-OSSockOpt/#returns_149","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid","text":"[Source] fun box dccp_sockopt_ccid() : I32 val","title":"dccp_sockopt_ccid"},{"location":"net-OSSockOpt/#returns_150","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_rx_info","text":"[Source] fun box dccp_sockopt_ccid_rx_info() : I32 val","title":"dccp_sockopt_ccid_rx_info"},{"location":"net-OSSockOpt/#returns_151","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_ccid_tx_info","text":"[Source] fun box dccp_sockopt_ccid_tx_info() : I32 val","title":"dccp_sockopt_ccid_tx_info"},{"location":"net-OSSockOpt/#returns_152","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_change_l","text":"[Source] fun box dccp_sockopt_change_l() : I32 val","title":"dccp_sockopt_change_l"},{"location":"net-OSSockOpt/#returns_153","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_change_r","text":"[Source] fun box dccp_sockopt_change_r() : I32 val","title":"dccp_sockopt_change_r"},{"location":"net-OSSockOpt/#returns_154","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_get_cur_mps","text":"[Source] fun box dccp_sockopt_get_cur_mps() : I32 val","title":"dccp_sockopt_get_cur_mps"},{"location":"net-OSSockOpt/#returns_155","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_packet_size","text":"[Source] fun box dccp_sockopt_packet_size() : I32 val","title":"dccp_sockopt_packet_size"},{"location":"net-OSSockOpt/#returns_156","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_id","text":"[Source] fun box dccp_sockopt_qpolicy_id() : I32 val","title":"dccp_sockopt_qpolicy_id"},{"location":"net-OSSockOpt/#returns_157","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_qpolicy_txqlen","text":"[Source] fun box dccp_sockopt_qpolicy_txqlen() : I32 val","title":"dccp_sockopt_qpolicy_txqlen"},{"location":"net-OSSockOpt/#returns_158","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_recv_cscov","text":"[Source] fun box dccp_sockopt_recv_cscov() : I32 val","title":"dccp_sockopt_recv_cscov"},{"location":"net-OSSockOpt/#returns_159","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_rx_ccid","text":"[Source] fun box dccp_sockopt_rx_ccid() : I32 val","title":"dccp_sockopt_rx_ccid"},{"location":"net-OSSockOpt/#returns_160","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_send_cscov","text":"[Source] fun box dccp_sockopt_send_cscov() : I32 val","title":"dccp_sockopt_send_cscov"},{"location":"net-OSSockOpt/#returns_161","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_server_timewait","text":"[Source] fun box dccp_sockopt_server_timewait() : I32 val","title":"dccp_sockopt_server_timewait"},{"location":"net-OSSockOpt/#returns_162","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_service","text":"[Source] fun box dccp_sockopt_service() : I32 val","title":"dccp_sockopt_service"},{"location":"net-OSSockOpt/#returns_163","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dccp_sockopt_tx_ccid","text":"[Source] fun box dccp_sockopt_tx_ccid() : I32 val","title":"dccp_sockopt_tx_ccid"},{"location":"net-OSSockOpt/#returns_164","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_acceptmode","text":"[Source] fun box dso_acceptmode() : I32 val","title":"dso_acceptmode"},{"location":"net-OSSockOpt/#returns_165","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_conaccept","text":"[Source] fun box dso_conaccept() : I32 val","title":"dso_conaccept"},{"location":"net-OSSockOpt/#returns_166","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_conaccess","text":"[Source] fun box dso_conaccess() : I32 val","title":"dso_conaccess"},{"location":"net-OSSockOpt/#returns_167","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_condata","text":"[Source] fun box dso_condata() : I32 val","title":"dso_condata"},{"location":"net-OSSockOpt/#returns_168","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_conreject","text":"[Source] fun box dso_conreject() : I32 val","title":"dso_conreject"},{"location":"net-OSSockOpt/#returns_169","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_cork","text":"[Source] fun box dso_cork() : I32 val","title":"dso_cork"},{"location":"net-OSSockOpt/#returns_170","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_disdata","text":"[Source] fun box dso_disdata() : I32 val","title":"dso_disdata"},{"location":"net-OSSockOpt/#returns_171","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_info","text":"[Source] fun box dso_info() : I32 val","title":"dso_info"},{"location":"net-OSSockOpt/#returns_172","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_linkinfo","text":"[Source] fun box dso_linkinfo() : I32 val","title":"dso_linkinfo"},{"location":"net-OSSockOpt/#returns_173","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_max","text":"[Source] fun box dso_max() : I32 val","title":"dso_max"},{"location":"net-OSSockOpt/#returns_174","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_maxwindow","text":"[Source] fun box dso_maxwindow() : I32 val","title":"dso_maxwindow"},{"location":"net-OSSockOpt/#returns_175","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_nodelay","text":"[Source] fun box dso_nodelay() : I32 val","title":"dso_nodelay"},{"location":"net-OSSockOpt/#returns_176","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_seqpacket","text":"[Source] fun box dso_seqpacket() : I32 val","title":"dso_seqpacket"},{"location":"net-OSSockOpt/#returns_177","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_services","text":"[Source] fun box dso_services() : I32 val","title":"dso_services"},{"location":"net-OSSockOpt/#returns_178","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#dso_stream","text":"[Source] fun box dso_stream() : I32 val","title":"dso_stream"},{"location":"net-OSSockOpt/#returns_179","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_address","text":"[Source] fun box icmp_address() : I32 val","title":"icmp_address"},{"location":"net-OSSockOpt/#returns_180","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_addressreply","text":"[Source] fun box icmp_addressreply() : I32 val","title":"icmp_addressreply"},{"location":"net-OSSockOpt/#returns_181","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_dest_unreach","text":"[Source] fun box icmp_dest_unreach() : I32 val","title":"icmp_dest_unreach"},{"location":"net-OSSockOpt/#returns_182","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_echo","text":"[Source] fun box icmp_echo() : I32 val","title":"icmp_echo"},{"location":"net-OSSockOpt/#returns_183","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_echoreply","text":"[Source] fun box icmp_echoreply() : I32 val","title":"icmp_echoreply"},{"location":"net-OSSockOpt/#returns_184","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_exc_fragtime","text":"[Source] fun box icmp_exc_fragtime() : I32 val","title":"icmp_exc_fragtime"},{"location":"net-OSSockOpt/#returns_185","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_exc_ttl","text":"[Source] fun box icmp_exc_ttl() : I32 val","title":"icmp_exc_ttl"},{"location":"net-OSSockOpt/#returns_186","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_filter","text":"[Source] fun box icmp_filter() : I32 val","title":"icmp_filter"},{"location":"net-OSSockOpt/#returns_187","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_frag_needed","text":"[Source] fun box icmp_frag_needed() : I32 val","title":"icmp_frag_needed"},{"location":"net-OSSockOpt/#returns_188","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_ano","text":"[Source] fun box icmp_host_ano() : I32 val","title":"icmp_host_ano"},{"location":"net-OSSockOpt/#returns_189","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_isolated","text":"[Source] fun box icmp_host_isolated() : I32 val","title":"icmp_host_isolated"},{"location":"net-OSSockOpt/#returns_190","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_unknown","text":"[Source] fun box icmp_host_unknown() : I32 val","title":"icmp_host_unknown"},{"location":"net-OSSockOpt/#returns_191","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_unreach","text":"[Source] fun box icmp_host_unreach() : I32 val","title":"icmp_host_unreach"},{"location":"net-OSSockOpt/#returns_192","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_host_unr_tos","text":"[Source] fun box icmp_host_unr_tos() : I32 val","title":"icmp_host_unr_tos"},{"location":"net-OSSockOpt/#returns_193","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_info_reply","text":"[Source] fun box icmp_info_reply() : I32 val","title":"icmp_info_reply"},{"location":"net-OSSockOpt/#returns_194","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_info_request","text":"[Source] fun box icmp_info_request() : I32 val","title":"icmp_info_request"},{"location":"net-OSSockOpt/#returns_195","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_ano","text":"[Source] fun box icmp_net_ano() : I32 val","title":"icmp_net_ano"},{"location":"net-OSSockOpt/#returns_196","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_unknown","text":"[Source] fun box icmp_net_unknown() : I32 val","title":"icmp_net_unknown"},{"location":"net-OSSockOpt/#returns_197","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_unreach","text":"[Source] fun box icmp_net_unreach() : I32 val","title":"icmp_net_unreach"},{"location":"net-OSSockOpt/#returns_198","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_net_unr_tos","text":"[Source] fun box icmp_net_unr_tos() : I32 val","title":"icmp_net_unr_tos"},{"location":"net-OSSockOpt/#returns_199","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_parameterprob","text":"[Source] fun box icmp_parameterprob() : I32 val","title":"icmp_parameterprob"},{"location":"net-OSSockOpt/#returns_200","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_pkt_filtered","text":"[Source] fun box icmp_pkt_filtered() : I32 val","title":"icmp_pkt_filtered"},{"location":"net-OSSockOpt/#returns_201","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_port_unreach","text":"[Source] fun box icmp_port_unreach() : I32 val","title":"icmp_port_unreach"},{"location":"net-OSSockOpt/#returns_202","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_prec_cutoff","text":"[Source] fun box icmp_prec_cutoff() : I32 val","title":"icmp_prec_cutoff"},{"location":"net-OSSockOpt/#returns_203","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_prec_violation","text":"[Source] fun box icmp_prec_violation() : I32 val","title":"icmp_prec_violation"},{"location":"net-OSSockOpt/#returns_204","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_prot_unreach","text":"[Source] fun box icmp_prot_unreach() : I32 val","title":"icmp_prot_unreach"},{"location":"net-OSSockOpt/#returns_205","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redirect","text":"[Source] fun box icmp_redirect() : I32 val","title":"icmp_redirect"},{"location":"net-OSSockOpt/#returns_206","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_host","text":"[Source] fun box icmp_redir_host() : I32 val","title":"icmp_redir_host"},{"location":"net-OSSockOpt/#returns_207","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_hosttos","text":"[Source] fun box icmp_redir_hosttos() : I32 val","title":"icmp_redir_hosttos"},{"location":"net-OSSockOpt/#returns_208","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_net","text":"[Source] fun box icmp_redir_net() : I32 val","title":"icmp_redir_net"},{"location":"net-OSSockOpt/#returns_209","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_redir_nettos","text":"[Source] fun box icmp_redir_nettos() : I32 val","title":"icmp_redir_nettos"},{"location":"net-OSSockOpt/#returns_210","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_source_quench","text":"[Source] fun box icmp_source_quench() : I32 val","title":"icmp_source_quench"},{"location":"net-OSSockOpt/#returns_211","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_sr_failed","text":"[Source] fun box icmp_sr_failed() : I32 val","title":"icmp_sr_failed"},{"location":"net-OSSockOpt/#returns_212","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_timestamp","text":"[Source] fun box icmp_timestamp() : I32 val","title":"icmp_timestamp"},{"location":"net-OSSockOpt/#returns_213","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_timestampreply","text":"[Source] fun box icmp_timestampreply() : I32 val","title":"icmp_timestampreply"},{"location":"net-OSSockOpt/#returns_214","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#icmp_time_exceeded","text":"[Source] fun box icmp_time_exceeded() : I32 val","title":"icmp_time_exceeded"},{"location":"net-OSSockOpt/#returns_215","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_acceptsourceroute","text":"[Source] fun box ipctl_acceptsourceroute() : I32 val","title":"ipctl_acceptsourceroute"},{"location":"net-OSSockOpt/#returns_216","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_defmtu","text":"[Source] fun box ipctl_defmtu() : I32 val","title":"ipctl_defmtu"},{"location":"net-OSSockOpt/#returns_217","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_defttl","text":"[Source] fun box ipctl_defttl() : I32 val","title":"ipctl_defttl"},{"location":"net-OSSockOpt/#returns_218","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_directedbroadcast","text":"[Source] fun box ipctl_directedbroadcast() : I32 val","title":"ipctl_directedbroadcast"},{"location":"net-OSSockOpt/#returns_219","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_fastforwarding","text":"[Source] fun box ipctl_fastforwarding() : I32 val","title":"ipctl_fastforwarding"},{"location":"net-OSSockOpt/#returns_220","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_forwarding","text":"[Source] fun box ipctl_forwarding() : I32 val","title":"ipctl_forwarding"},{"location":"net-OSSockOpt/#returns_221","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_gif_ttl","text":"[Source] fun box ipctl_gif_ttl() : I32 val","title":"ipctl_gif_ttl"},{"location":"net-OSSockOpt/#returns_222","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrdqdrops","text":"[Source] fun box ipctl_intrdqdrops() : I32 val","title":"ipctl_intrdqdrops"},{"location":"net-OSSockOpt/#returns_223","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrdqmaxlen","text":"[Source] fun box ipctl_intrdqmaxlen() : I32 val","title":"ipctl_intrdqmaxlen"},{"location":"net-OSSockOpt/#returns_224","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrqdrops","text":"[Source] fun box ipctl_intrqdrops() : I32 val","title":"ipctl_intrqdrops"},{"location":"net-OSSockOpt/#returns_225","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_intrqmaxlen","text":"[Source] fun box ipctl_intrqmaxlen() : I32 val","title":"ipctl_intrqmaxlen"},{"location":"net-OSSockOpt/#returns_226","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_keepfaith","text":"[Source] fun box ipctl_keepfaith() : I32 val","title":"ipctl_keepfaith"},{"location":"net-OSSockOpt/#returns_227","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_maxid","text":"[Source] fun box ipctl_maxid() : I32 val","title":"ipctl_maxid"},{"location":"net-OSSockOpt/#returns_228","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_rtexpire","text":"[Source] fun box ipctl_rtexpire() : I32 val","title":"ipctl_rtexpire"},{"location":"net-OSSockOpt/#returns_229","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_rtmaxcache","text":"[Source] fun box ipctl_rtmaxcache() : I32 val","title":"ipctl_rtmaxcache"},{"location":"net-OSSockOpt/#returns_230","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_rtminexpire","text":"[Source] fun box ipctl_rtminexpire() : I32 val","title":"ipctl_rtminexpire"},{"location":"net-OSSockOpt/#returns_231","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_sendredirects","text":"[Source] fun box ipctl_sendredirects() : I32 val","title":"ipctl_sendredirects"},{"location":"net-OSSockOpt/#returns_232","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_sourceroute","text":"[Source] fun box ipctl_sourceroute() : I32 val","title":"ipctl_sourceroute"},{"location":"net-OSSockOpt/#returns_233","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipctl_stats","text":"[Source] fun box ipctl_stats() : I32 val","title":"ipctl_stats"},{"location":"net-OSSockOpt/#returns_234","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_ephemeralfirst","text":"[Source] fun box ipport_ephemeralfirst() : I32 val","title":"ipport_ephemeralfirst"},{"location":"net-OSSockOpt/#returns_235","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_ephemerallast","text":"[Source] fun box ipport_ephemerallast() : I32 val","title":"ipport_ephemerallast"},{"location":"net-OSSockOpt/#returns_236","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_hifirstauto","text":"[Source] fun box ipport_hifirstauto() : I32 val","title":"ipport_hifirstauto"},{"location":"net-OSSockOpt/#returns_237","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_hilastauto","text":"[Source] fun box ipport_hilastauto() : I32 val","title":"ipport_hilastauto"},{"location":"net-OSSockOpt/#returns_238","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_max","text":"[Source] fun box ipport_max() : I32 val","title":"ipport_max"},{"location":"net-OSSockOpt/#returns_239","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_reserved","text":"[Source] fun box ipport_reserved() : I32 val","title":"ipport_reserved"},{"location":"net-OSSockOpt/#returns_240","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_reservedstart","text":"[Source] fun box ipport_reservedstart() : I32 val","title":"ipport_reservedstart"},{"location":"net-OSSockOpt/#returns_241","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipport_userreserved","text":"[Source] fun box ipport_userreserved() : I32 val","title":"ipport_userreserved"},{"location":"net-OSSockOpt/#returns_242","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292dstopts","text":"[Source] fun box ipv6_2292dstopts() : I32 val","title":"ipv6_2292dstopts"},{"location":"net-OSSockOpt/#returns_243","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292hoplimit","text":"[Source] fun box ipv6_2292hoplimit() : I32 val","title":"ipv6_2292hoplimit"},{"location":"net-OSSockOpt/#returns_244","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292hopopts","text":"[Source] fun box ipv6_2292hopopts() : I32 val","title":"ipv6_2292hopopts"},{"location":"net-OSSockOpt/#returns_245","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292pktinfo","text":"[Source] fun box ipv6_2292pktinfo() : I32 val","title":"ipv6_2292pktinfo"},{"location":"net-OSSockOpt/#returns_246","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292pktoptions","text":"[Source] fun box ipv6_2292pktoptions() : I32 val","title":"ipv6_2292pktoptions"},{"location":"net-OSSockOpt/#returns_247","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_2292rthdr","text":"[Source] fun box ipv6_2292rthdr() : I32 val","title":"ipv6_2292rthdr"},{"location":"net-OSSockOpt/#returns_248","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_addrform","text":"[Source] fun box ipv6_addrform() : I32 val","title":"ipv6_addrform"},{"location":"net-OSSockOpt/#returns_249","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_addr_preferences","text":"[Source] fun box ipv6_addr_preferences() : I32 val","title":"ipv6_addr_preferences"},{"location":"net-OSSockOpt/#returns_250","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_add_membership","text":"[Source] fun box ipv6_add_membership() : I32 val","title":"ipv6_add_membership"},{"location":"net-OSSockOpt/#returns_251","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_authhdr","text":"[Source] fun box ipv6_authhdr() : I32 val","title":"ipv6_authhdr"},{"location":"net-OSSockOpt/#returns_252","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_autoflowlabel","text":"[Source] fun box ipv6_autoflowlabel() : I32 val","title":"ipv6_autoflowlabel"},{"location":"net-OSSockOpt/#returns_253","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_checksum","text":"[Source] fun box ipv6_checksum() : I32 val","title":"ipv6_checksum"},{"location":"net-OSSockOpt/#returns_254","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_dontfrag","text":"[Source] fun box ipv6_dontfrag() : I32 val","title":"ipv6_dontfrag"},{"location":"net-OSSockOpt/#returns_255","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_drop_membership","text":"[Source] fun box ipv6_drop_membership() : I32 val","title":"ipv6_drop_membership"},{"location":"net-OSSockOpt/#returns_256","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_dstopts","text":"[Source] fun box ipv6_dstopts() : I32 val","title":"ipv6_dstopts"},{"location":"net-OSSockOpt/#returns_257","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo","text":"[Source] fun box ipv6_flowinfo() : I32 val","title":"ipv6_flowinfo"},{"location":"net-OSSockOpt/#returns_258","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo_flowlabel","text":"[Source] fun box ipv6_flowinfo_flowlabel() : I32 val","title":"ipv6_flowinfo_flowlabel"},{"location":"net-OSSockOpt/#returns_259","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo_priority","text":"[Source] fun box ipv6_flowinfo_priority() : I32 val","title":"ipv6_flowinfo_priority"},{"location":"net-OSSockOpt/#returns_260","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowinfo_send","text":"[Source] fun box ipv6_flowinfo_send() : I32 val","title":"ipv6_flowinfo_send"},{"location":"net-OSSockOpt/#returns_261","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_flowlabel_mgr","text":"[Source] fun box ipv6_flowlabel_mgr() : I32 val","title":"ipv6_flowlabel_mgr"},{"location":"net-OSSockOpt/#returns_262","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_a_get","text":"[Source] fun box ipv6_fl_a_get() : I32 val","title":"ipv6_fl_a_get"},{"location":"net-OSSockOpt/#returns_263","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_a_put","text":"[Source] fun box ipv6_fl_a_put() : I32 val","title":"ipv6_fl_a_put"},{"location":"net-OSSockOpt/#returns_264","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_a_renew","text":"[Source] fun box ipv6_fl_a_renew() : I32 val","title":"ipv6_fl_a_renew"},{"location":"net-OSSockOpt/#returns_265","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_create","text":"[Source] fun box ipv6_fl_f_create() : I32 val","title":"ipv6_fl_f_create"},{"location":"net-OSSockOpt/#returns_266","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_excl","text":"[Source] fun box ipv6_fl_f_excl() : I32 val","title":"ipv6_fl_f_excl"},{"location":"net-OSSockOpt/#returns_267","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_reflect","text":"[Source] fun box ipv6_fl_f_reflect() : I32 val","title":"ipv6_fl_f_reflect"},{"location":"net-OSSockOpt/#returns_268","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_f_remote","text":"[Source] fun box ipv6_fl_f_remote() : I32 val","title":"ipv6_fl_f_remote"},{"location":"net-OSSockOpt/#returns_269","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_any","text":"[Source] fun box ipv6_fl_s_any() : I32 val","title":"ipv6_fl_s_any"},{"location":"net-OSSockOpt/#returns_270","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_excl","text":"[Source] fun box ipv6_fl_s_excl() : I32 val","title":"ipv6_fl_s_excl"},{"location":"net-OSSockOpt/#returns_271","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_none","text":"[Source] fun box ipv6_fl_s_none() : I32 val","title":"ipv6_fl_s_none"},{"location":"net-OSSockOpt/#returns_272","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_process","text":"[Source] fun box ipv6_fl_s_process() : I32 val","title":"ipv6_fl_s_process"},{"location":"net-OSSockOpt/#returns_273","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_fl_s_user","text":"[Source] fun box ipv6_fl_s_user() : I32 val","title":"ipv6_fl_s_user"},{"location":"net-OSSockOpt/#returns_274","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_hoplimit","text":"[Source] fun box ipv6_hoplimit() : I32 val","title":"ipv6_hoplimit"},{"location":"net-OSSockOpt/#returns_275","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_hopopts","text":"[Source] fun box ipv6_hopopts() : I32 val","title":"ipv6_hopopts"},{"location":"net-OSSockOpt/#returns_276","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_ipsec_policy","text":"[Source] fun box ipv6_ipsec_policy() : I32 val","title":"ipv6_ipsec_policy"},{"location":"net-OSSockOpt/#returns_277","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_join_anycast","text":"[Source] fun box ipv6_join_anycast() : I32 val","title":"ipv6_join_anycast"},{"location":"net-OSSockOpt/#returns_278","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_leave_anycast","text":"[Source] fun box ipv6_leave_anycast() : I32 val","title":"ipv6_leave_anycast"},{"location":"net-OSSockOpt/#returns_279","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_minhopcount","text":"[Source] fun box ipv6_minhopcount() : I32 val","title":"ipv6_minhopcount"},{"location":"net-OSSockOpt/#returns_280","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_mtu","text":"[Source] fun box ipv6_mtu() : I32 val","title":"ipv6_mtu"},{"location":"net-OSSockOpt/#returns_281","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_mtu_discover","text":"[Source] fun box ipv6_mtu_discover() : I32 val","title":"ipv6_mtu_discover"},{"location":"net-OSSockOpt/#returns_282","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_multicast_hops","text":"[Source] fun box ipv6_multicast_hops() : I32 val","title":"ipv6_multicast_hops"},{"location":"net-OSSockOpt/#returns_283","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_multicast_if","text":"[Source] fun box ipv6_multicast_if() : I32 val","title":"ipv6_multicast_if"},{"location":"net-OSSockOpt/#returns_284","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_multicast_loop","text":"[Source] fun box ipv6_multicast_loop() : I32 val","title":"ipv6_multicast_loop"},{"location":"net-OSSockOpt/#returns_285","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_nexthop","text":"[Source] fun box ipv6_nexthop() : I32 val","title":"ipv6_nexthop"},{"location":"net-OSSockOpt/#returns_286","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_origdstaddr","text":"[Source] fun box ipv6_origdstaddr() : I32 val","title":"ipv6_origdstaddr"},{"location":"net-OSSockOpt/#returns_287","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pathmtu","text":"[Source] fun box ipv6_pathmtu() : I32 val","title":"ipv6_pathmtu"},{"location":"net-OSSockOpt/#returns_288","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pktinfo","text":"[Source] fun box ipv6_pktinfo() : I32 val","title":"ipv6_pktinfo"},{"location":"net-OSSockOpt/#returns_289","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_do","text":"[Source] fun box ipv6_pmtudisc_do() : I32 val","title":"ipv6_pmtudisc_do"},{"location":"net-OSSockOpt/#returns_290","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_dont","text":"[Source] fun box ipv6_pmtudisc_dont() : I32 val","title":"ipv6_pmtudisc_dont"},{"location":"net-OSSockOpt/#returns_291","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_interface","text":"[Source] fun box ipv6_pmtudisc_interface() : I32 val","title":"ipv6_pmtudisc_interface"},{"location":"net-OSSockOpt/#returns_292","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_omit","text":"[Source] fun box ipv6_pmtudisc_omit() : I32 val","title":"ipv6_pmtudisc_omit"},{"location":"net-OSSockOpt/#returns_293","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_probe","text":"[Source] fun box ipv6_pmtudisc_probe() : I32 val","title":"ipv6_pmtudisc_probe"},{"location":"net-OSSockOpt/#returns_294","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_pmtudisc_want","text":"[Source] fun box ipv6_pmtudisc_want() : I32 val","title":"ipv6_pmtudisc_want"},{"location":"net-OSSockOpt/#returns_295","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_cga","text":"[Source] fun box ipv6_prefer_src_cga() : I32 val","title":"ipv6_prefer_src_cga"},{"location":"net-OSSockOpt/#returns_296","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_coa","text":"[Source] fun box ipv6_prefer_src_coa() : I32 val","title":"ipv6_prefer_src_coa"},{"location":"net-OSSockOpt/#returns_297","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_home","text":"[Source] fun box ipv6_prefer_src_home() : I32 val","title":"ipv6_prefer_src_home"},{"location":"net-OSSockOpt/#returns_298","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_noncga","text":"[Source] fun box ipv6_prefer_src_noncga() : I32 val","title":"ipv6_prefer_src_noncga"},{"location":"net-OSSockOpt/#returns_299","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_public","text":"[Source] fun box ipv6_prefer_src_public() : I32 val","title":"ipv6_prefer_src_public"},{"location":"net-OSSockOpt/#returns_300","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_pubtmp_default","text":"[Source] fun box ipv6_prefer_src_pubtmp_default() : I32 val","title":"ipv6_prefer_src_pubtmp_default"},{"location":"net-OSSockOpt/#returns_301","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_prefer_src_tmp","text":"[Source] fun box ipv6_prefer_src_tmp() : I32 val","title":"ipv6_prefer_src_tmp"},{"location":"net-OSSockOpt/#returns_302","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_10","text":"[Source] fun box ipv6_priority_10() : I32 val","title":"ipv6_priority_10"},{"location":"net-OSSockOpt/#returns_303","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_11","text":"[Source] fun box ipv6_priority_11() : I32 val","title":"ipv6_priority_11"},{"location":"net-OSSockOpt/#returns_304","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_12","text":"[Source] fun box ipv6_priority_12() : I32 val","title":"ipv6_priority_12"},{"location":"net-OSSockOpt/#returns_305","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_13","text":"[Source] fun box ipv6_priority_13() : I32 val","title":"ipv6_priority_13"},{"location":"net-OSSockOpt/#returns_306","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_14","text":"[Source] fun box ipv6_priority_14() : I32 val","title":"ipv6_priority_14"},{"location":"net-OSSockOpt/#returns_307","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_15","text":"[Source] fun box ipv6_priority_15() : I32 val","title":"ipv6_priority_15"},{"location":"net-OSSockOpt/#returns_308","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_8","text":"[Source] fun box ipv6_priority_8() : I32 val","title":"ipv6_priority_8"},{"location":"net-OSSockOpt/#returns_309","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_9","text":"[Source] fun box ipv6_priority_9() : I32 val","title":"ipv6_priority_9"},{"location":"net-OSSockOpt/#returns_310","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_bulk","text":"[Source] fun box ipv6_priority_bulk() : I32 val","title":"ipv6_priority_bulk"},{"location":"net-OSSockOpt/#returns_311","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_control","text":"[Source] fun box ipv6_priority_control() : I32 val","title":"ipv6_priority_control"},{"location":"net-OSSockOpt/#returns_312","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_filler","text":"[Source] fun box ipv6_priority_filler() : I32 val","title":"ipv6_priority_filler"},{"location":"net-OSSockOpt/#returns_313","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_interactive","text":"[Source] fun box ipv6_priority_interactive() : I32 val","title":"ipv6_priority_interactive"},{"location":"net-OSSockOpt/#returns_314","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_reserved1","text":"[Source] fun box ipv6_priority_reserved1() : I32 val","title":"ipv6_priority_reserved1"},{"location":"net-OSSockOpt/#returns_315","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_reserved2","text":"[Source] fun box ipv6_priority_reserved2() : I32 val","title":"ipv6_priority_reserved2"},{"location":"net-OSSockOpt/#returns_316","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_unattended","text":"[Source] fun box ipv6_priority_unattended() : I32 val","title":"ipv6_priority_unattended"},{"location":"net-OSSockOpt/#returns_317","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_priority_uncharacterized","text":"[Source] fun box ipv6_priority_uncharacterized() : I32 val","title":"ipv6_priority_uncharacterized"},{"location":"net-OSSockOpt/#returns_318","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvdstopts","text":"[Source] fun box ipv6_recvdstopts() : I32 val","title":"ipv6_recvdstopts"},{"location":"net-OSSockOpt/#returns_319","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recverr","text":"[Source] fun box ipv6_recverr() : I32 val","title":"ipv6_recverr"},{"location":"net-OSSockOpt/#returns_320","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvhoplimit","text":"[Source] fun box ipv6_recvhoplimit() : I32 val","title":"ipv6_recvhoplimit"},{"location":"net-OSSockOpt/#returns_321","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvhopopts","text":"[Source] fun box ipv6_recvhopopts() : I32 val","title":"ipv6_recvhopopts"},{"location":"net-OSSockOpt/#returns_322","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvorigdstaddr","text":"[Source] fun box ipv6_recvorigdstaddr() : I32 val","title":"ipv6_recvorigdstaddr"},{"location":"net-OSSockOpt/#returns_323","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvpathmtu","text":"[Source] fun box ipv6_recvpathmtu() : I32 val","title":"ipv6_recvpathmtu"},{"location":"net-OSSockOpt/#returns_324","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvpktinfo","text":"[Source] fun box ipv6_recvpktinfo() : I32 val","title":"ipv6_recvpktinfo"},{"location":"net-OSSockOpt/#returns_325","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvrthdr","text":"[Source] fun box ipv6_recvrthdr() : I32 val","title":"ipv6_recvrthdr"},{"location":"net-OSSockOpt/#returns_326","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_recvtclass","text":"[Source] fun box ipv6_recvtclass() : I32 val","title":"ipv6_recvtclass"},{"location":"net-OSSockOpt/#returns_327","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_router_alert","text":"[Source] fun box ipv6_router_alert() : I32 val","title":"ipv6_router_alert"},{"location":"net-OSSockOpt/#returns_328","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_rthdr","text":"[Source] fun box ipv6_rthdr() : I32 val","title":"ipv6_rthdr"},{"location":"net-OSSockOpt/#returns_329","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_rthdrdstopts","text":"[Source] fun box ipv6_rthdrdstopts() : I32 val","title":"ipv6_rthdrdstopts"},{"location":"net-OSSockOpt/#returns_330","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tclass","text":"[Source] fun box ipv6_tclass() : I32 val","title":"ipv6_tclass"},{"location":"net-OSSockOpt/#returns_331","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_hao","text":"[Source] fun box ipv6_tlv_hao() : I32 val","title":"ipv6_tlv_hao"},{"location":"net-OSSockOpt/#returns_332","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_jumbo","text":"[Source] fun box ipv6_tlv_jumbo() : I32 val","title":"ipv6_tlv_jumbo"},{"location":"net-OSSockOpt/#returns_333","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_pad1","text":"[Source] fun box ipv6_tlv_pad1() : I32 val","title":"ipv6_tlv_pad1"},{"location":"net-OSSockOpt/#returns_334","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_padn","text":"[Source] fun box ipv6_tlv_padn() : I32 val","title":"ipv6_tlv_padn"},{"location":"net-OSSockOpt/#returns_335","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_tlv_routeralert","text":"[Source] fun box ipv6_tlv_routeralert() : I32 val","title":"ipv6_tlv_routeralert"},{"location":"net-OSSockOpt/#returns_336","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_transparent","text":"[Source] fun box ipv6_transparent() : I32 val","title":"ipv6_transparent"},{"location":"net-OSSockOpt/#returns_337","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_unicast_hops","text":"[Source] fun box ipv6_unicast_hops() : I32 val","title":"ipv6_unicast_hops"},{"location":"net-OSSockOpt/#returns_338","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_unicast_if","text":"[Source] fun box ipv6_unicast_if() : I32 val","title":"ipv6_unicast_if"},{"location":"net-OSSockOpt/#returns_339","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_use_min_mtu","text":"[Source] fun box ipv6_use_min_mtu() : I32 val","title":"ipv6_use_min_mtu"},{"location":"net-OSSockOpt/#returns_340","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_v6only","text":"[Source] fun box ipv6_v6only() : I32 val","title":"ipv6_v6only"},{"location":"net-OSSockOpt/#returns_341","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipv6_xfrm_policy","text":"[Source] fun box ipv6_xfrm_policy() : I32 val","title":"ipv6_xfrm_policy"},{"location":"net-OSSockOpt/#returns_342","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_address","text":"[Source] fun box ipx_address() : I32 val","title":"ipx_address"},{"location":"net-OSSockOpt/#returns_343","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_address_notify","text":"[Source] fun box ipx_address_notify() : I32 val","title":"ipx_address_notify"},{"location":"net-OSSockOpt/#returns_344","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_crtitf","text":"[Source] fun box ipx_crtitf() : I32 val","title":"ipx_crtitf"},{"location":"net-OSSockOpt/#returns_345","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_dltitf","text":"[Source] fun box ipx_dltitf() : I32 val","title":"ipx_dltitf"},{"location":"net-OSSockOpt/#returns_346","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_dstype","text":"[Source] fun box ipx_dstype() : I32 val","title":"ipx_dstype"},{"location":"net-OSSockOpt/#returns_347","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_extended_address","text":"[Source] fun box ipx_extended_address() : I32 val","title":"ipx_extended_address"},{"location":"net-OSSockOpt/#returns_348","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_filterptype","text":"[Source] fun box ipx_filterptype() : I32 val","title":"ipx_filterptype"},{"location":"net-OSSockOpt/#returns_349","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_8022","text":"[Source] fun box ipx_frame_8022() : I32 val","title":"ipx_frame_8022"},{"location":"net-OSSockOpt/#returns_350","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_8023","text":"[Source] fun box ipx_frame_8023() : I32 val","title":"ipx_frame_8023"},{"location":"net-OSSockOpt/#returns_351","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_etherii","text":"[Source] fun box ipx_frame_etherii() : I32 val","title":"ipx_frame_etherii"},{"location":"net-OSSockOpt/#returns_352","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_none","text":"[Source] fun box ipx_frame_none() : I32 val","title":"ipx_frame_none"},{"location":"net-OSSockOpt/#returns_353","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_snap","text":"[Source] fun box ipx_frame_snap() : I32 val","title":"ipx_frame_snap"},{"location":"net-OSSockOpt/#returns_354","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_frame_tr_8022","text":"[Source] fun box ipx_frame_tr_8022() : I32 val","title":"ipx_frame_tr_8022"},{"location":"net-OSSockOpt/#returns_355","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_getnetinfo","text":"[Source] fun box ipx_getnetinfo() : I32 val","title":"ipx_getnetinfo"},{"location":"net-OSSockOpt/#returns_356","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_getnetinfo_norip","text":"[Source] fun box ipx_getnetinfo_norip() : I32 val","title":"ipx_getnetinfo_norip"},{"location":"net-OSSockOpt/#returns_357","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_immediatespxack","text":"[Source] fun box ipx_immediatespxack() : I32 val","title":"ipx_immediatespxack"},{"location":"net-OSSockOpt/#returns_358","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_internal","text":"[Source] fun box ipx_internal() : I32 val","title":"ipx_internal"},{"location":"net-OSSockOpt/#returns_359","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_maxsize","text":"[Source] fun box ipx_maxsize() : I32 val","title":"ipx_maxsize"},{"location":"net-OSSockOpt/#returns_360","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_max_adapter_num","text":"[Source] fun box ipx_max_adapter_num() : I32 val","title":"ipx_max_adapter_num"},{"location":"net-OSSockOpt/#returns_361","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_mtu","text":"[Source] fun box ipx_mtu() : I32 val","title":"ipx_mtu"},{"location":"net-OSSockOpt/#returns_362","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_node_len","text":"[Source] fun box ipx_node_len() : I32 val","title":"ipx_node_len"},{"location":"net-OSSockOpt/#returns_363","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_primary","text":"[Source] fun box ipx_primary() : I32 val","title":"ipx_primary"},{"location":"net-OSSockOpt/#returns_364","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_ptype","text":"[Source] fun box ipx_ptype() : I32 val","title":"ipx_ptype"},{"location":"net-OSSockOpt/#returns_365","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_receive_broadcast","text":"[Source] fun box ipx_receive_broadcast() : I32 val","title":"ipx_receive_broadcast"},{"location":"net-OSSockOpt/#returns_366","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_recvhdr","text":"[Source] fun box ipx_recvhdr() : I32 val","title":"ipx_recvhdr"},{"location":"net-OSSockOpt/#returns_367","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_reripnetnumber","text":"[Source] fun box ipx_reripnetnumber() : I32 val","title":"ipx_reripnetnumber"},{"location":"net-OSSockOpt/#returns_368","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_route_no_router","text":"[Source] fun box ipx_route_no_router() : I32 val","title":"ipx_route_no_router"},{"location":"net-OSSockOpt/#returns_369","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_8022","text":"[Source] fun box ipx_rt_8022() : I32 val","title":"ipx_rt_8022"},{"location":"net-OSSockOpt/#returns_370","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_bluebook","text":"[Source] fun box ipx_rt_bluebook() : I32 val","title":"ipx_rt_bluebook"},{"location":"net-OSSockOpt/#returns_371","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_routed","text":"[Source] fun box ipx_rt_routed() : I32 val","title":"ipx_rt_routed"},{"location":"net-OSSockOpt/#returns_372","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_rt_snap","text":"[Source] fun box ipx_rt_snap() : I32 val","title":"ipx_rt_snap"},{"location":"net-OSSockOpt/#returns_373","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_special_none","text":"[Source] fun box ipx_special_none() : I32 val","title":"ipx_special_none"},{"location":"net-OSSockOpt/#returns_374","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_spxgetconnectionstatus","text":"[Source] fun box ipx_spxgetconnectionstatus() : I32 val","title":"ipx_spxgetconnectionstatus"},{"location":"net-OSSockOpt/#returns_375","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_stopfilterptype","text":"[Source] fun box ipx_stopfilterptype() : I32 val","title":"ipx_stopfilterptype"},{"location":"net-OSSockOpt/#returns_376","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ipx_type","text":"[Source] fun box ipx_type() : I32 val","title":"ipx_type"},{"location":"net-OSSockOpt/#returns_377","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_add_membership","text":"[Source] fun box ip_add_membership() : I32 val","title":"ip_add_membership"},{"location":"net-OSSockOpt/#returns_378","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_add_source_membership","text":"[Source] fun box ip_add_source_membership() : I32 val","title":"ip_add_source_membership"},{"location":"net-OSSockOpt/#returns_379","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bindany","text":"[Source] fun box ip_bindany() : I32 val","title":"ip_bindany"},{"location":"net-OSSockOpt/#returns_380","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bindmulti","text":"[Source] fun box ip_bindmulti() : I32 val","title":"ip_bindmulti"},{"location":"net-OSSockOpt/#returns_381","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bind_address_no_port","text":"[Source] fun box ip_bind_address_no_port() : I32 val","title":"ip_bind_address_no_port"},{"location":"net-OSSockOpt/#returns_382","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_block_source","text":"[Source] fun box ip_block_source() : I32 val","title":"ip_block_source"},{"location":"net-OSSockOpt/#returns_383","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_bound_if","text":"[Source] fun box ip_bound_if() : I32 val","title":"ip_bound_if"},{"location":"net-OSSockOpt/#returns_384","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_checksum","text":"[Source] fun box ip_checksum() : I32 val","title":"ip_checksum"},{"location":"net-OSSockOpt/#returns_385","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_default_multicast_loop","text":"[Source] fun box ip_default_multicast_loop() : I32 val","title":"ip_default_multicast_loop"},{"location":"net-OSSockOpt/#returns_386","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_default_multicast_ttl","text":"[Source] fun box ip_default_multicast_ttl() : I32 val","title":"ip_default_multicast_ttl"},{"location":"net-OSSockOpt/#returns_387","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dontfrag","text":"[Source] fun box ip_dontfrag() : I32 val","title":"ip_dontfrag"},{"location":"net-OSSockOpt/#returns_388","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_drop_membership","text":"[Source] fun box ip_drop_membership() : I32 val","title":"ip_drop_membership"},{"location":"net-OSSockOpt/#returns_389","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_drop_source_membership","text":"[Source] fun box ip_drop_source_membership() : I32 val","title":"ip_drop_source_membership"},{"location":"net-OSSockOpt/#returns_390","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet3","text":"[Source] fun box ip_dummynet3() : I32 val","title":"ip_dummynet3"},{"location":"net-OSSockOpt/#returns_391","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_configure","text":"[Source] fun box ip_dummynet_configure() : I32 val","title":"ip_dummynet_configure"},{"location":"net-OSSockOpt/#returns_392","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_del","text":"[Source] fun box ip_dummynet_del() : I32 val","title":"ip_dummynet_del"},{"location":"net-OSSockOpt/#returns_393","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_flush","text":"[Source] fun box ip_dummynet_flush() : I32 val","title":"ip_dummynet_flush"},{"location":"net-OSSockOpt/#returns_394","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_dummynet_get","text":"[Source] fun box ip_dummynet_get() : I32 val","title":"ip_dummynet_get"},{"location":"net-OSSockOpt/#returns_395","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_faith","text":"[Source] fun box ip_faith() : I32 val","title":"ip_faith"},{"location":"net-OSSockOpt/#returns_396","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_flowid","text":"[Source] fun box ip_flowid() : I32 val","title":"ip_flowid"},{"location":"net-OSSockOpt/#returns_397","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_flowtype","text":"[Source] fun box ip_flowtype() : I32 val","title":"ip_flowtype"},{"location":"net-OSSockOpt/#returns_398","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_freebind","text":"[Source] fun box ip_freebind() : I32 val","title":"ip_freebind"},{"location":"net-OSSockOpt/#returns_399","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw3","text":"[Source] fun box ip_fw3() : I32 val","title":"ip_fw3"},{"location":"net-OSSockOpt/#returns_400","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_add","text":"[Source] fun box ip_fw_add() : I32 val","title":"ip_fw_add"},{"location":"net-OSSockOpt/#returns_401","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_del","text":"[Source] fun box ip_fw_del() : I32 val","title":"ip_fw_del"},{"location":"net-OSSockOpt/#returns_402","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_flush","text":"[Source] fun box ip_fw_flush() : I32 val","title":"ip_fw_flush"},{"location":"net-OSSockOpt/#returns_403","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_get","text":"[Source] fun box ip_fw_get() : I32 val","title":"ip_fw_get"},{"location":"net-OSSockOpt/#returns_404","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_cfg","text":"[Source] fun box ip_fw_nat_cfg() : I32 val","title":"ip_fw_nat_cfg"},{"location":"net-OSSockOpt/#returns_405","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_del","text":"[Source] fun box ip_fw_nat_del() : I32 val","title":"ip_fw_nat_del"},{"location":"net-OSSockOpt/#returns_406","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_get_config","text":"[Source] fun box ip_fw_nat_get_config() : I32 val","title":"ip_fw_nat_get_config"},{"location":"net-OSSockOpt/#returns_407","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_nat_get_log","text":"[Source] fun box ip_fw_nat_get_log() : I32 val","title":"ip_fw_nat_get_log"},{"location":"net-OSSockOpt/#returns_408","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_resetlog","text":"[Source] fun box ip_fw_resetlog() : I32 val","title":"ip_fw_resetlog"},{"location":"net-OSSockOpt/#returns_409","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_add","text":"[Source] fun box ip_fw_table_add() : I32 val","title":"ip_fw_table_add"},{"location":"net-OSSockOpt/#returns_410","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_del","text":"[Source] fun box ip_fw_table_del() : I32 val","title":"ip_fw_table_del"},{"location":"net-OSSockOpt/#returns_411","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_flush","text":"[Source] fun box ip_fw_table_flush() : I32 val","title":"ip_fw_table_flush"},{"location":"net-OSSockOpt/#returns_412","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_getsize","text":"[Source] fun box ip_fw_table_getsize() : I32 val","title":"ip_fw_table_getsize"},{"location":"net-OSSockOpt/#returns_413","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_table_list","text":"[Source] fun box ip_fw_table_list() : I32 val","title":"ip_fw_table_list"},{"location":"net-OSSockOpt/#returns_414","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_fw_zero","text":"[Source] fun box ip_fw_zero() : I32 val","title":"ip_fw_zero"},{"location":"net-OSSockOpt/#returns_415","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_hdrincl","text":"[Source] fun box ip_hdrincl() : I32 val","title":"ip_hdrincl"},{"location":"net-OSSockOpt/#returns_416","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_ipsec_policy","text":"[Source] fun box ip_ipsec_policy() : I32 val","title":"ip_ipsec_policy"},{"location":"net-OSSockOpt/#returns_417","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_group_src_filter","text":"[Source] fun box ip_max_group_src_filter() : I32 val","title":"ip_max_group_src_filter"},{"location":"net-OSSockOpt/#returns_418","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_memberships","text":"[Source] fun box ip_max_memberships() : I32 val","title":"ip_max_memberships"},{"location":"net-OSSockOpt/#returns_419","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_sock_mute_filter","text":"[Source] fun box ip_max_sock_mute_filter() : I32 val","title":"ip_max_sock_mute_filter"},{"location":"net-OSSockOpt/#returns_420","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_sock_src_filter","text":"[Source] fun box ip_max_sock_src_filter() : I32 val","title":"ip_max_sock_src_filter"},{"location":"net-OSSockOpt/#returns_421","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_max_source_filter","text":"[Source] fun box ip_max_source_filter() : I32 val","title":"ip_max_source_filter"},{"location":"net-OSSockOpt/#returns_422","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_minttl","text":"[Source] fun box ip_minttl() : I32 val","title":"ip_minttl"},{"location":"net-OSSockOpt/#returns_423","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_min_memberships","text":"[Source] fun box ip_min_memberships() : I32 val","title":"ip_min_memberships"},{"location":"net-OSSockOpt/#returns_424","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_msfilter","text":"[Source] fun box ip_msfilter() : I32 val","title":"ip_msfilter"},{"location":"net-OSSockOpt/#returns_425","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_mtu","text":"[Source] fun box ip_mtu() : I32 val","title":"ip_mtu"},{"location":"net-OSSockOpt/#returns_426","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_mtu_discover","text":"[Source] fun box ip_mtu_discover() : I32 val","title":"ip_mtu_discover"},{"location":"net-OSSockOpt/#returns_427","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_all","text":"[Source] fun box ip_multicast_all() : I32 val","title":"ip_multicast_all"},{"location":"net-OSSockOpt/#returns_428","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_if","text":"[Source] fun box ip_multicast_if() : I32 val","title":"ip_multicast_if"},{"location":"net-OSSockOpt/#returns_429","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_ifindex","text":"[Source] fun box ip_multicast_ifindex() : I32 val","title":"ip_multicast_ifindex"},{"location":"net-OSSockOpt/#returns_430","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_loop","text":"[Source] fun box ip_multicast_loop() : I32 val","title":"ip_multicast_loop"},{"location":"net-OSSockOpt/#returns_431","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_ttl","text":"[Source] fun box ip_multicast_ttl() : I32 val","title":"ip_multicast_ttl"},{"location":"net-OSSockOpt/#returns_432","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_multicast_vif","text":"[Source] fun box ip_multicast_vif() : I32 val","title":"ip_multicast_vif"},{"location":"net-OSSockOpt/#returns_433","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_nat_xxx","text":"[Source] fun box ip_nat_xxx() : I32 val","title":"ip_nat_xxx"},{"location":"net-OSSockOpt/#returns_434","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_nodefrag","text":"[Source] fun box ip_nodefrag() : I32 val","title":"ip_nodefrag"},{"location":"net-OSSockOpt/#returns_435","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_add","text":"[Source] fun box ip_old_fw_add() : I32 val","title":"ip_old_fw_add"},{"location":"net-OSSockOpt/#returns_436","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_del","text":"[Source] fun box ip_old_fw_del() : I32 val","title":"ip_old_fw_del"},{"location":"net-OSSockOpt/#returns_437","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_flush","text":"[Source] fun box ip_old_fw_flush() : I32 val","title":"ip_old_fw_flush"},{"location":"net-OSSockOpt/#returns_438","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_get","text":"[Source] fun box ip_old_fw_get() : I32 val","title":"ip_old_fw_get"},{"location":"net-OSSockOpt/#returns_439","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_resetlog","text":"[Source] fun box ip_old_fw_resetlog() : I32 val","title":"ip_old_fw_resetlog"},{"location":"net-OSSockOpt/#returns_440","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_old_fw_zero","text":"[Source] fun box ip_old_fw_zero() : I32 val","title":"ip_old_fw_zero"},{"location":"net-OSSockOpt/#returns_441","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_onesbcast","text":"[Source] fun box ip_onesbcast() : I32 val","title":"ip_onesbcast"},{"location":"net-OSSockOpt/#returns_442","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_options","text":"[Source] fun box ip_options() : I32 val","title":"ip_options"},{"location":"net-OSSockOpt/#returns_443","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_origdstaddr","text":"[Source] fun box ip_origdstaddr() : I32 val","title":"ip_origdstaddr"},{"location":"net-OSSockOpt/#returns_444","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_passsec","text":"[Source] fun box ip_passsec() : I32 val","title":"ip_passsec"},{"location":"net-OSSockOpt/#returns_445","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pktinfo","text":"[Source] fun box ip_pktinfo() : I32 val","title":"ip_pktinfo"},{"location":"net-OSSockOpt/#returns_446","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pktoptions","text":"[Source] fun box ip_pktoptions() : I32 val","title":"ip_pktoptions"},{"location":"net-OSSockOpt/#returns_447","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_do","text":"[Source] fun box ip_pmtudisc_do() : I32 val","title":"ip_pmtudisc_do"},{"location":"net-OSSockOpt/#returns_448","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_dont","text":"[Source] fun box ip_pmtudisc_dont() : I32 val","title":"ip_pmtudisc_dont"},{"location":"net-OSSockOpt/#returns_449","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_interface","text":"[Source] fun box ip_pmtudisc_interface() : I32 val","title":"ip_pmtudisc_interface"},{"location":"net-OSSockOpt/#returns_450","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_omit","text":"[Source] fun box ip_pmtudisc_omit() : I32 val","title":"ip_pmtudisc_omit"},{"location":"net-OSSockOpt/#returns_451","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_probe","text":"[Source] fun box ip_pmtudisc_probe() : I32 val","title":"ip_pmtudisc_probe"},{"location":"net-OSSockOpt/#returns_452","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_pmtudisc_want","text":"[Source] fun box ip_pmtudisc_want() : I32 val","title":"ip_pmtudisc_want"},{"location":"net-OSSockOpt/#returns_453","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange","text":"[Source] fun box ip_portrange() : I32 val","title":"ip_portrange"},{"location":"net-OSSockOpt/#returns_454","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange_default","text":"[Source] fun box ip_portrange_default() : I32 val","title":"ip_portrange_default"},{"location":"net-OSSockOpt/#returns_455","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange_high","text":"[Source] fun box ip_portrange_high() : I32 val","title":"ip_portrange_high"},{"location":"net-OSSockOpt/#returns_456","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_portrange_low","text":"[Source] fun box ip_portrange_low() : I32 val","title":"ip_portrange_low"},{"location":"net-OSSockOpt/#returns_457","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvdstaddr","text":"[Source] fun box ip_recvdstaddr() : I32 val","title":"ip_recvdstaddr"},{"location":"net-OSSockOpt/#returns_458","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recverr","text":"[Source] fun box ip_recverr() : I32 val","title":"ip_recverr"},{"location":"net-OSSockOpt/#returns_459","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvflowid","text":"[Source] fun box ip_recvflowid() : I32 val","title":"ip_recvflowid"},{"location":"net-OSSockOpt/#returns_460","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvif","text":"[Source] fun box ip_recvif() : I32 val","title":"ip_recvif"},{"location":"net-OSSockOpt/#returns_461","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvopts","text":"[Source] fun box ip_recvopts() : I32 val","title":"ip_recvopts"},{"location":"net-OSSockOpt/#returns_462","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvorigdstaddr","text":"[Source] fun box ip_recvorigdstaddr() : I32 val","title":"ip_recvorigdstaddr"},{"location":"net-OSSockOpt/#returns_463","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvpktinfo","text":"[Source] fun box ip_recvpktinfo() : I32 val","title":"ip_recvpktinfo"},{"location":"net-OSSockOpt/#returns_464","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvretopts","text":"[Source] fun box ip_recvretopts() : I32 val","title":"ip_recvretopts"},{"location":"net-OSSockOpt/#returns_465","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvrssbucketid","text":"[Source] fun box ip_recvrssbucketid() : I32 val","title":"ip_recvrssbucketid"},{"location":"net-OSSockOpt/#returns_466","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvtos","text":"[Source] fun box ip_recvtos() : I32 val","title":"ip_recvtos"},{"location":"net-OSSockOpt/#returns_467","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_recvttl","text":"[Source] fun box ip_recvttl() : I32 val","title":"ip_recvttl"},{"location":"net-OSSockOpt/#returns_468","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_retopts","text":"[Source] fun box ip_retopts() : I32 val","title":"ip_retopts"},{"location":"net-OSSockOpt/#returns_469","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_router_alert","text":"[Source] fun box ip_router_alert() : I32 val","title":"ip_router_alert"},{"location":"net-OSSockOpt/#returns_470","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rssbucketid","text":"[Source] fun box ip_rssbucketid() : I32 val","title":"ip_rssbucketid"},{"location":"net-OSSockOpt/#returns_471","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rss_listen_bucket","text":"[Source] fun box ip_rss_listen_bucket() : I32 val","title":"ip_rss_listen_bucket"},{"location":"net-OSSockOpt/#returns_472","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_off","text":"[Source] fun box ip_rsvp_off() : I32 val","title":"ip_rsvp_off"},{"location":"net-OSSockOpt/#returns_473","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_on","text":"[Source] fun box ip_rsvp_on() : I32 val","title":"ip_rsvp_on"},{"location":"net-OSSockOpt/#returns_474","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_vif_off","text":"[Source] fun box ip_rsvp_vif_off() : I32 val","title":"ip_rsvp_vif_off"},{"location":"net-OSSockOpt/#returns_475","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_rsvp_vif_on","text":"[Source] fun box ip_rsvp_vif_on() : I32 val","title":"ip_rsvp_vif_on"},{"location":"net-OSSockOpt/#returns_476","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_sendsrcaddr","text":"[Source] fun box ip_sendsrcaddr() : I32 val","title":"ip_sendsrcaddr"},{"location":"net-OSSockOpt/#returns_477","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_striphdr","text":"[Source] fun box ip_striphdr() : I32 val","title":"ip_striphdr"},{"location":"net-OSSockOpt/#returns_478","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_tos","text":"[Source] fun box ip_tos() : I32 val","title":"ip_tos"},{"location":"net-OSSockOpt/#returns_479","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_traffic_mgt_background","text":"[Source] fun box ip_traffic_mgt_background() : I32 val","title":"ip_traffic_mgt_background"},{"location":"net-OSSockOpt/#returns_480","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_transparent","text":"[Source] fun box ip_transparent() : I32 val","title":"ip_transparent"},{"location":"net-OSSockOpt/#returns_481","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_ttl","text":"[Source] fun box ip_ttl() : I32 val","title":"ip_ttl"},{"location":"net-OSSockOpt/#returns_482","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_unblock_source","text":"[Source] fun box ip_unblock_source() : I32 val","title":"ip_unblock_source"},{"location":"net-OSSockOpt/#returns_483","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_unicast_if","text":"[Source] fun box ip_unicast_if() : I32 val","title":"ip_unicast_if"},{"location":"net-OSSockOpt/#returns_484","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ip_xfrm_policy","text":"[Source] fun box ip_xfrm_policy() : I32 val","title":"ip_xfrm_policy"},{"location":"net-OSSockOpt/#returns_485","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_connwait","text":"[Source] fun box local_connwait() : I32 val","title":"local_connwait"},{"location":"net-OSSockOpt/#returns_486","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_creds","text":"[Source] fun box local_creds() : I32 val","title":"local_creds"},{"location":"net-OSSockOpt/#returns_487","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peercred","text":"[Source] fun box local_peercred() : I32 val","title":"local_peercred"},{"location":"net-OSSockOpt/#returns_488","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peerepid","text":"[Source] fun box local_peerepid() : I32 val","title":"local_peerepid"},{"location":"net-OSSockOpt/#returns_489","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peereuuid","text":"[Source] fun box local_peereuuid() : I32 val","title":"local_peereuuid"},{"location":"net-OSSockOpt/#returns_490","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peerpid","text":"[Source] fun box local_peerpid() : I32 val","title":"local_peerpid"},{"location":"net-OSSockOpt/#returns_491","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_peeruuid","text":"[Source] fun box local_peeruuid() : I32 val","title":"local_peeruuid"},{"location":"net-OSSockOpt/#returns_492","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#local_vendor","text":"[Source] fun box local_vendor() : I32 val","title":"local_vendor"},{"location":"net-OSSockOpt/#returns_493","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#max_tcpoptlen","text":"[Source] fun box max_tcpoptlen() : I32 val","title":"max_tcpoptlen"},{"location":"net-OSSockOpt/#returns_494","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_block_source","text":"[Source] fun box mcast_block_source() : I32 val","title":"mcast_block_source"},{"location":"net-OSSockOpt/#returns_495","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_exclude","text":"[Source] fun box mcast_exclude() : I32 val","title":"mcast_exclude"},{"location":"net-OSSockOpt/#returns_496","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_include","text":"[Source] fun box mcast_include() : I32 val","title":"mcast_include"},{"location":"net-OSSockOpt/#returns_497","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_join_group","text":"[Source] fun box mcast_join_group() : I32 val","title":"mcast_join_group"},{"location":"net-OSSockOpt/#returns_498","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_join_source_group","text":"[Source] fun box mcast_join_source_group() : I32 val","title":"mcast_join_source_group"},{"location":"net-OSSockOpt/#returns_499","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_leave_group","text":"[Source] fun box mcast_leave_group() : I32 val","title":"mcast_leave_group"},{"location":"net-OSSockOpt/#returns_500","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_leave_source_group","text":"[Source] fun box mcast_leave_source_group() : I32 val","title":"mcast_leave_source_group"},{"location":"net-OSSockOpt/#returns_501","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_msfilter","text":"[Source] fun box mcast_msfilter() : I32 val","title":"mcast_msfilter"},{"location":"net-OSSockOpt/#returns_502","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_unblock_source","text":"[Source] fun box mcast_unblock_source() : I32 val","title":"mcast_unblock_source"},{"location":"net-OSSockOpt/#returns_503","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mcast_undefined","text":"[Source] fun box mcast_undefined() : I32 val","title":"mcast_undefined"},{"location":"net-OSSockOpt/#returns_504","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_add_bw_upcall","text":"[Source] fun box mrt_add_bw_upcall() : I32 val","title":"mrt_add_bw_upcall"},{"location":"net-OSSockOpt/#returns_505","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_add_mfc","text":"[Source] fun box mrt_add_mfc() : I32 val","title":"mrt_add_mfc"},{"location":"net-OSSockOpt/#returns_506","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_add_vif","text":"[Source] fun box mrt_add_vif() : I32 val","title":"mrt_add_vif"},{"location":"net-OSSockOpt/#returns_507","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_api_config","text":"[Source] fun box mrt_api_config() : I32 val","title":"mrt_api_config"},{"location":"net-OSSockOpt/#returns_508","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_api_flags_all","text":"[Source] fun box mrt_api_flags_all() : I32 val","title":"mrt_api_flags_all"},{"location":"net-OSSockOpt/#returns_509","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_api_support","text":"[Source] fun box mrt_api_support() : I32 val","title":"mrt_api_support"},{"location":"net-OSSockOpt/#returns_510","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_assert","text":"[Source] fun box mrt_assert() : I32 val","title":"mrt_assert"},{"location":"net-OSSockOpt/#returns_511","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_del_bw_upcall","text":"[Source] fun box mrt_del_bw_upcall() : I32 val","title":"mrt_del_bw_upcall"},{"location":"net-OSSockOpt/#returns_512","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_del_mfc","text":"[Source] fun box mrt_del_mfc() : I32 val","title":"mrt_del_mfc"},{"location":"net-OSSockOpt/#returns_513","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_del_vif","text":"[Source] fun box mrt_del_vif() : I32 val","title":"mrt_del_vif"},{"location":"net-OSSockOpt/#returns_514","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_done","text":"[Source] fun box mrt_done() : I32 val","title":"mrt_done"},{"location":"net-OSSockOpt/#returns_515","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_init","text":"[Source] fun box mrt_init() : I32 val","title":"mrt_init"},{"location":"net-OSSockOpt/#returns_516","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_bw_upcall","text":"[Source] fun box mrt_mfc_bw_upcall() : I32 val","title":"mrt_mfc_bw_upcall"},{"location":"net-OSSockOpt/#returns_517","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_flags_all","text":"[Source] fun box mrt_mfc_flags_all() : I32 val","title":"mrt_mfc_flags_all"},{"location":"net-OSSockOpt/#returns_518","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_flags_border_vif","text":"[Source] fun box mrt_mfc_flags_border_vif() : I32 val","title":"mrt_mfc_flags_border_vif"},{"location":"net-OSSockOpt/#returns_519","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_flags_disable_wrongvif","text":"[Source] fun box mrt_mfc_flags_disable_wrongvif() : I32 val","title":"mrt_mfc_flags_disable_wrongvif"},{"location":"net-OSSockOpt/#returns_520","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_mfc_rp","text":"[Source] fun box mrt_mfc_rp() : I32 val","title":"mrt_mfc_rp"},{"location":"net-OSSockOpt/#returns_521","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_pim","text":"[Source] fun box mrt_pim() : I32 val","title":"mrt_pim"},{"location":"net-OSSockOpt/#returns_522","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#mrt_version","text":"[Source] fun box mrt_version() : I32 val","title":"mrt_version"},{"location":"net-OSSockOpt/#returns_523","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#msg_notification","text":"[Source] fun box msg_notification() : I32 val","title":"msg_notification"},{"location":"net-OSSockOpt/#returns_524","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#msg_socallbck","text":"[Source] fun box msg_socallbck() : I32 val","title":"msg_socallbck"},{"location":"net-OSSockOpt/#returns_525","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrvproto_ndrv","text":"[Source] fun box ndrvproto_ndrv() : I32 val","title":"ndrvproto_ndrv"},{"location":"net-OSSockOpt/#returns_526","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_addmulticast","text":"[Source] fun box ndrv_addmulticast() : I32 val","title":"ndrv_addmulticast"},{"location":"net-OSSockOpt/#returns_527","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_deldmxspec","text":"[Source] fun box ndrv_deldmxspec() : I32 val","title":"ndrv_deldmxspec"},{"location":"net-OSSockOpt/#returns_528","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_delmulticast","text":"[Source] fun box ndrv_delmulticast() : I32 val","title":"ndrv_delmulticast"},{"location":"net-OSSockOpt/#returns_529","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_demuxtype_ethertype","text":"[Source] fun box ndrv_demuxtype_ethertype() : I32 val","title":"ndrv_demuxtype_ethertype"},{"location":"net-OSSockOpt/#returns_530","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_demuxtype_sap","text":"[Source] fun box ndrv_demuxtype_sap() : I32 val","title":"ndrv_demuxtype_sap"},{"location":"net-OSSockOpt/#returns_531","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_demuxtype_snap","text":"[Source] fun box ndrv_demuxtype_snap() : I32 val","title":"ndrv_demuxtype_snap"},{"location":"net-OSSockOpt/#returns_532","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_dmux_max_descr","text":"[Source] fun box ndrv_dmux_max_descr() : I32 val","title":"ndrv_dmux_max_descr"},{"location":"net-OSSockOpt/#returns_533","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_protocol_desc_vers","text":"[Source] fun box ndrv_protocol_desc_vers() : I32 val","title":"ndrv_protocol_desc_vers"},{"location":"net-OSSockOpt/#returns_534","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ndrv_setdmxspec","text":"[Source] fun box ndrv_setdmxspec() : I32 val","title":"ndrv_setdmxspec"},{"location":"net-OSSockOpt/#returns_535","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_add_membership","text":"[Source] fun box netlink_add_membership() : I32 val","title":"netlink_add_membership"},{"location":"net-OSSockOpt/#returns_536","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_audit","text":"[Source] fun box netlink_audit() : I32 val","title":"netlink_audit"},{"location":"net-OSSockOpt/#returns_537","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_broadcast_error","text":"[Source] fun box netlink_broadcast_error() : I32 val","title":"netlink_broadcast_error"},{"location":"net-OSSockOpt/#returns_538","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_cap_ack","text":"[Source] fun box netlink_cap_ack() : I32 val","title":"netlink_cap_ack"},{"location":"net-OSSockOpt/#returns_539","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_connector","text":"[Source] fun box netlink_connector() : I32 val","title":"netlink_connector"},{"location":"net-OSSockOpt/#returns_540","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_crypto","text":"[Source] fun box netlink_crypto() : I32 val","title":"netlink_crypto"},{"location":"net-OSSockOpt/#returns_541","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_dnrtmsg","text":"[Source] fun box netlink_dnrtmsg() : I32 val","title":"netlink_dnrtmsg"},{"location":"net-OSSockOpt/#returns_542","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_drop_membership","text":"[Source] fun box netlink_drop_membership() : I32 val","title":"netlink_drop_membership"},{"location":"net-OSSockOpt/#returns_543","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_ecryptfs","text":"[Source] fun box netlink_ecryptfs() : I32 val","title":"netlink_ecryptfs"},{"location":"net-OSSockOpt/#returns_544","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_fib_lookup","text":"[Source] fun box netlink_fib_lookup() : I32 val","title":"netlink_fib_lookup"},{"location":"net-OSSockOpt/#returns_545","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_firewall","text":"[Source] fun box netlink_firewall() : I32 val","title":"netlink_firewall"},{"location":"net-OSSockOpt/#returns_546","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_generic","text":"[Source] fun box netlink_generic() : I32 val","title":"netlink_generic"},{"location":"net-OSSockOpt/#returns_547","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_inet_diag","text":"[Source] fun box netlink_inet_diag() : I32 val","title":"netlink_inet_diag"},{"location":"net-OSSockOpt/#returns_548","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_ip6_fw","text":"[Source] fun box netlink_ip6_fw() : I32 val","title":"netlink_ip6_fw"},{"location":"net-OSSockOpt/#returns_549","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_iscsi","text":"[Source] fun box netlink_iscsi() : I32 val","title":"netlink_iscsi"},{"location":"net-OSSockOpt/#returns_550","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_kobject_uevent","text":"[Source] fun box netlink_kobject_uevent() : I32 val","title":"netlink_kobject_uevent"},{"location":"net-OSSockOpt/#returns_551","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_listen_all_nsid","text":"[Source] fun box netlink_listen_all_nsid() : I32 val","title":"netlink_listen_all_nsid"},{"location":"net-OSSockOpt/#returns_552","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_list_memberships","text":"[Source] fun box netlink_list_memberships() : I32 val","title":"netlink_list_memberships"},{"location":"net-OSSockOpt/#returns_553","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_netfilter","text":"[Source] fun box netlink_netfilter() : I32 val","title":"netlink_netfilter"},{"location":"net-OSSockOpt/#returns_554","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_nflog","text":"[Source] fun box netlink_nflog() : I32 val","title":"netlink_nflog"},{"location":"net-OSSockOpt/#returns_555","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_no_enobufs","text":"[Source] fun box netlink_no_enobufs() : I32 val","title":"netlink_no_enobufs"},{"location":"net-OSSockOpt/#returns_556","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_pktinfo","text":"[Source] fun box netlink_pktinfo() : I32 val","title":"netlink_pktinfo"},{"location":"net-OSSockOpt/#returns_557","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_rdma","text":"[Source] fun box netlink_rdma() : I32 val","title":"netlink_rdma"},{"location":"net-OSSockOpt/#returns_558","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_route","text":"[Source] fun box netlink_route() : I32 val","title":"netlink_route"},{"location":"net-OSSockOpt/#returns_559","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_rx_ring","text":"[Source] fun box netlink_rx_ring() : I32 val","title":"netlink_rx_ring"},{"location":"net-OSSockOpt/#returns_560","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_scsitransport","text":"[Source] fun box netlink_scsitransport() : I32 val","title":"netlink_scsitransport"},{"location":"net-OSSockOpt/#returns_561","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_selinux","text":"[Source] fun box netlink_selinux() : I32 val","title":"netlink_selinux"},{"location":"net-OSSockOpt/#returns_562","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_sock_diag","text":"[Source] fun box netlink_sock_diag() : I32 val","title":"netlink_sock_diag"},{"location":"net-OSSockOpt/#returns_563","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_tx_ring","text":"[Source] fun box netlink_tx_ring() : I32 val","title":"netlink_tx_ring"},{"location":"net-OSSockOpt/#returns_564","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_unused","text":"[Source] fun box netlink_unused() : I32 val","title":"netlink_unused"},{"location":"net-OSSockOpt/#returns_565","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_usersock","text":"[Source] fun box netlink_usersock() : I32 val","title":"netlink_usersock"},{"location":"net-OSSockOpt/#returns_566","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netlink_xfrm","text":"[Source] fun box netlink_xfrm() : I32 val","title":"netlink_xfrm"},{"location":"net-OSSockOpt/#returns_567","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_idle","text":"[Source] fun box netrom_idle() : I32 val","title":"netrom_idle"},{"location":"net-OSSockOpt/#returns_568","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_kill","text":"[Source] fun box netrom_kill() : I32 val","title":"netrom_kill"},{"location":"net-OSSockOpt/#returns_569","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_n2","text":"[Source] fun box netrom_n2() : I32 val","title":"netrom_n2"},{"location":"net-OSSockOpt/#returns_570","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_neigh","text":"[Source] fun box netrom_neigh() : I32 val","title":"netrom_neigh"},{"location":"net-OSSockOpt/#returns_571","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_node","text":"[Source] fun box netrom_node() : I32 val","title":"netrom_node"},{"location":"net-OSSockOpt/#returns_572","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_paclen","text":"[Source] fun box netrom_paclen() : I32 val","title":"netrom_paclen"},{"location":"net-OSSockOpt/#returns_573","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_t1","text":"[Source] fun box netrom_t1() : I32 val","title":"netrom_t1"},{"location":"net-OSSockOpt/#returns_574","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_t2","text":"[Source] fun box netrom_t2() : I32 val","title":"netrom_t2"},{"location":"net-OSSockOpt/#returns_575","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#netrom_t4","text":"[Source] fun box netrom_t4() : I32 val","title":"netrom_t4"},{"location":"net-OSSockOpt/#returns_576","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#nrdv_multicast_addrs_per_sock","text":"[Source] fun box nrdv_multicast_addrs_per_sock() : I32 val","title":"nrdv_multicast_addrs_per_sock"},{"location":"net-OSSockOpt/#returns_577","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#pvd_config","text":"[Source] fun box pvd_config() : I32 val","title":"pvd_config"},{"location":"net-OSSockOpt/#returns_578","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cancel_sent_to","text":"[Source] fun box rds_cancel_sent_to() : I32 val","title":"rds_cancel_sent_to"},{"location":"net-OSSockOpt/#returns_579","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_cswp","text":"[Source] fun box rds_cmsg_atomic_cswp() : I32 val","title":"rds_cmsg_atomic_cswp"},{"location":"net-OSSockOpt/#returns_580","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_atomic_fadd","text":"[Source] fun box rds_cmsg_atomic_fadd() : I32 val","title":"rds_cmsg_atomic_fadd"},{"location":"net-OSSockOpt/#returns_581","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_cong_update","text":"[Source] fun box rds_cmsg_cong_update() : I32 val","title":"rds_cmsg_cong_update"},{"location":"net-OSSockOpt/#returns_582","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_cswp","text":"[Source] fun box rds_cmsg_masked_atomic_cswp() : I32 val","title":"rds_cmsg_masked_atomic_cswp"},{"location":"net-OSSockOpt/#returns_583","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_masked_atomic_fadd","text":"[Source] fun box rds_cmsg_masked_atomic_fadd() : I32 val","title":"rds_cmsg_masked_atomic_fadd"},{"location":"net-OSSockOpt/#returns_584","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_args","text":"[Source] fun box rds_cmsg_rdma_args() : I32 val","title":"rds_cmsg_rdma_args"},{"location":"net-OSSockOpt/#returns_585","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_dest","text":"[Source] fun box rds_cmsg_rdma_dest() : I32 val","title":"rds_cmsg_rdma_dest"},{"location":"net-OSSockOpt/#returns_586","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_map","text":"[Source] fun box rds_cmsg_rdma_map() : I32 val","title":"rds_cmsg_rdma_map"},{"location":"net-OSSockOpt/#returns_587","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cmsg_rdma_status","text":"[Source] fun box rds_cmsg_rdma_status() : I32 val","title":"rds_cmsg_rdma_status"},{"location":"net-OSSockOpt/#returns_588","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cong_monitor","text":"[Source] fun box rds_cong_monitor() : I32 val","title":"rds_cong_monitor"},{"location":"net-OSSockOpt/#returns_589","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_cong_monitor_size","text":"[Source] fun box rds_cong_monitor_size() : I32 val","title":"rds_cong_monitor_size"},{"location":"net-OSSockOpt/#returns_590","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_free_mr","text":"[Source] fun box rds_free_mr() : I32 val","title":"rds_free_mr"},{"location":"net-OSSockOpt/#returns_591","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_get_mr","text":"[Source] fun box rds_get_mr() : I32 val","title":"rds_get_mr"},{"location":"net-OSSockOpt/#returns_592","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_get_mr_for_dest","text":"[Source] fun box rds_get_mr_for_dest() : I32 val","title":"rds_get_mr_for_dest"},{"location":"net-OSSockOpt/#returns_593","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_ib_abi_version","text":"[Source] fun box rds_ib_abi_version() : I32 val","title":"rds_ib_abi_version"},{"location":"net-OSSockOpt/#returns_594","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_ib_gid_len","text":"[Source] fun box rds_ib_gid_len() : I32 val","title":"rds_ib_gid_len"},{"location":"net-OSSockOpt/#returns_595","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connections","text":"[Source] fun box rds_info_connections() : I32 val","title":"rds_info_connections"},{"location":"net-OSSockOpt/#returns_596","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connected","text":"[Source] fun box rds_info_connection_flag_connected() : I32 val","title":"rds_info_connection_flag_connected"},{"location":"net-OSSockOpt/#returns_597","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_flag_connecting","text":"[Source] fun box rds_info_connection_flag_connecting() : I32 val","title":"rds_info_connection_flag_connecting"},{"location":"net-OSSockOpt/#returns_598","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_flag_sending","text":"[Source] fun box rds_info_connection_flag_sending() : I32 val","title":"rds_info_connection_flag_sending"},{"location":"net-OSSockOpt/#returns_599","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_connection_stats","text":"[Source] fun box rds_info_connection_stats() : I32 val","title":"rds_info_connection_stats"},{"location":"net-OSSockOpt/#returns_600","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_counters","text":"[Source] fun box rds_info_counters() : I32 val","title":"rds_info_counters"},{"location":"net-OSSockOpt/#returns_601","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_first","text":"[Source] fun box rds_info_first() : I32 val","title":"rds_info_first"},{"location":"net-OSSockOpt/#returns_602","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_ib_connections","text":"[Source] fun box rds_info_ib_connections() : I32 val","title":"rds_info_ib_connections"},{"location":"net-OSSockOpt/#returns_603","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_iwarp_connections","text":"[Source] fun box rds_info_iwarp_connections() : I32 val","title":"rds_info_iwarp_connections"},{"location":"net-OSSockOpt/#returns_604","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_last","text":"[Source] fun box rds_info_last() : I32 val","title":"rds_info_last"},{"location":"net-OSSockOpt/#returns_605","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_message_flag_ack","text":"[Source] fun box rds_info_message_flag_ack() : I32 val","title":"rds_info_message_flag_ack"},{"location":"net-OSSockOpt/#returns_606","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_message_flag_fast_ack","text":"[Source] fun box rds_info_message_flag_fast_ack() : I32 val","title":"rds_info_message_flag_fast_ack"},{"location":"net-OSSockOpt/#returns_607","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_recv_messages","text":"[Source] fun box rds_info_recv_messages() : I32 val","title":"rds_info_recv_messages"},{"location":"net-OSSockOpt/#returns_608","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_retrans_messages","text":"[Source] fun box rds_info_retrans_messages() : I32 val","title":"rds_info_retrans_messages"},{"location":"net-OSSockOpt/#returns_609","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_send_messages","text":"[Source] fun box rds_info_send_messages() : I32 val","title":"rds_info_send_messages"},{"location":"net-OSSockOpt/#returns_610","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_sockets","text":"[Source] fun box rds_info_sockets() : I32 val","title":"rds_info_sockets"},{"location":"net-OSSockOpt/#returns_611","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_info_tcp_sockets","text":"[Source] fun box rds_info_tcp_sockets() : I32 val","title":"rds_info_tcp_sockets"},{"location":"net-OSSockOpt/#returns_612","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_canceled","text":"[Source] fun box rds_rdma_canceled() : I32 val","title":"rds_rdma_canceled"},{"location":"net-OSSockOpt/#returns_613","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_dontwait","text":"[Source] fun box rds_rdma_dontwait() : I32 val","title":"rds_rdma_dontwait"},{"location":"net-OSSockOpt/#returns_614","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_dropped","text":"[Source] fun box rds_rdma_dropped() : I32 val","title":"rds_rdma_dropped"},{"location":"net-OSSockOpt/#returns_615","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_fence","text":"[Source] fun box rds_rdma_fence() : I32 val","title":"rds_rdma_fence"},{"location":"net-OSSockOpt/#returns_616","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_invalidate","text":"[Source] fun box rds_rdma_invalidate() : I32 val","title":"rds_rdma_invalidate"},{"location":"net-OSSockOpt/#returns_617","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_notify_me","text":"[Source] fun box rds_rdma_notify_me() : I32 val","title":"rds_rdma_notify_me"},{"location":"net-OSSockOpt/#returns_618","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_other_error","text":"[Source] fun box rds_rdma_other_error() : I32 val","title":"rds_rdma_other_error"},{"location":"net-OSSockOpt/#returns_619","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_readwrite","text":"[Source] fun box rds_rdma_readwrite() : I32 val","title":"rds_rdma_readwrite"},{"location":"net-OSSockOpt/#returns_620","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_remote_error","text":"[Source] fun box rds_rdma_remote_error() : I32 val","title":"rds_rdma_remote_error"},{"location":"net-OSSockOpt/#returns_621","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_silent","text":"[Source] fun box rds_rdma_silent() : I32 val","title":"rds_rdma_silent"},{"location":"net-OSSockOpt/#returns_622","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_success","text":"[Source] fun box rds_rdma_success() : I32 val","title":"rds_rdma_success"},{"location":"net-OSSockOpt/#returns_623","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_rdma_use_once","text":"[Source] fun box rds_rdma_use_once() : I32 val","title":"rds_rdma_use_once"},{"location":"net-OSSockOpt/#returns_624","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_recverr","text":"[Source] fun box rds_recverr() : I32 val","title":"rds_recverr"},{"location":"net-OSSockOpt/#returns_625","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_count","text":"[Source] fun box rds_trans_count() : I32 val","title":"rds_trans_count"},{"location":"net-OSSockOpt/#returns_626","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_ib","text":"[Source] fun box rds_trans_ib() : I32 val","title":"rds_trans_ib"},{"location":"net-OSSockOpt/#returns_627","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_iwarp","text":"[Source] fun box rds_trans_iwarp() : I32 val","title":"rds_trans_iwarp"},{"location":"net-OSSockOpt/#returns_628","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_none","text":"[Source] fun box rds_trans_none() : I32 val","title":"rds_trans_none"},{"location":"net-OSSockOpt/#returns_629","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rds_trans_tcp","text":"[Source] fun box rds_trans_tcp() : I32 val","title":"rds_trans_tcp"},{"location":"net-OSSockOpt/#returns_630","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_access_barred","text":"[Source] fun box rose_access_barred() : I32 val","title":"rose_access_barred"},{"location":"net-OSSockOpt/#returns_631","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_defer","text":"[Source] fun box rose_defer() : I32 val","title":"rose_defer"},{"location":"net-OSSockOpt/#returns_632","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_dte_originated","text":"[Source] fun box rose_dte_originated() : I32 val","title":"rose_dte_originated"},{"location":"net-OSSockOpt/#returns_633","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_holdback","text":"[Source] fun box rose_holdback() : I32 val","title":"rose_holdback"},{"location":"net-OSSockOpt/#returns_634","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_idle","text":"[Source] fun box rose_idle() : I32 val","title":"rose_idle"},{"location":"net-OSSockOpt/#returns_635","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_invalid_facility","text":"[Source] fun box rose_invalid_facility() : I32 val","title":"rose_invalid_facility"},{"location":"net-OSSockOpt/#returns_636","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_local_procedure","text":"[Source] fun box rose_local_procedure() : I32 val","title":"rose_local_procedure"},{"location":"net-OSSockOpt/#returns_637","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_max_digis","text":"[Source] fun box rose_max_digis() : I32 val","title":"rose_max_digis"},{"location":"net-OSSockOpt/#returns_638","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_mtu","text":"[Source] fun box rose_mtu() : I32 val","title":"rose_mtu"},{"location":"net-OSSockOpt/#returns_639","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_network_congestion","text":"[Source] fun box rose_network_congestion() : I32 val","title":"rose_network_congestion"},{"location":"net-OSSockOpt/#returns_640","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_not_obtainable","text":"[Source] fun box rose_not_obtainable() : I32 val","title":"rose_not_obtainable"},{"location":"net-OSSockOpt/#returns_641","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_number_busy","text":"[Source] fun box rose_number_busy() : I32 val","title":"rose_number_busy"},{"location":"net-OSSockOpt/#returns_642","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_out_of_order","text":"[Source] fun box rose_out_of_order() : I32 val","title":"rose_out_of_order"},{"location":"net-OSSockOpt/#returns_643","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_qbitincl","text":"[Source] fun box rose_qbitincl() : I32 val","title":"rose_qbitincl"},{"location":"net-OSSockOpt/#returns_644","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_remote_procedure","text":"[Source] fun box rose_remote_procedure() : I32 val","title":"rose_remote_procedure"},{"location":"net-OSSockOpt/#returns_645","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_ship_absent","text":"[Source] fun box rose_ship_absent() : I32 val","title":"rose_ship_absent"},{"location":"net-OSSockOpt/#returns_646","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_t1","text":"[Source] fun box rose_t1() : I32 val","title":"rose_t1"},{"location":"net-OSSockOpt/#returns_647","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_t2","text":"[Source] fun box rose_t2() : I32 val","title":"rose_t2"},{"location":"net-OSSockOpt/#returns_648","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#rose_t3","text":"[Source] fun box rose_t3() : I32 val","title":"rose_t3"},{"location":"net-OSSockOpt/#returns_649","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_hci_raw_direction","text":"[Source] fun box scm_hci_raw_direction() : I32 val","title":"scm_hci_raw_direction"},{"location":"net-OSSockOpt/#returns_650","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_timestamp","text":"[Source] fun box scm_timestamp() : I32 val","title":"scm_timestamp"},{"location":"net-OSSockOpt/#returns_651","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_timestamping","text":"[Source] fun box scm_timestamping() : I32 val","title":"scm_timestamping"},{"location":"net-OSSockOpt/#returns_652","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_timestampns","text":"[Source] fun box scm_timestampns() : I32 val","title":"scm_timestampns"},{"location":"net-OSSockOpt/#returns_653","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#scm_wifi_status","text":"[Source] fun box scm_wifi_status() : I32 val","title":"scm_wifi_status"},{"location":"net-OSSockOpt/#returns_654","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_abort_association","text":"[Source] fun box sctp_abort_association() : I32 val","title":"sctp_abort_association"},{"location":"net-OSSockOpt/#returns_655","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_adaptation_layer","text":"[Source] fun box sctp_adaptation_layer() : I32 val","title":"sctp_adaptation_layer"},{"location":"net-OSSockOpt/#returns_656","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_adaption_layer","text":"[Source] fun box sctp_adaption_layer() : I32 val","title":"sctp_adaption_layer"},{"location":"net-OSSockOpt/#returns_657","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_add_streams","text":"[Source] fun box sctp_add_streams() : I32 val","title":"sctp_add_streams"},{"location":"net-OSSockOpt/#returns_658","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_add_vrf_id","text":"[Source] fun box sctp_add_vrf_id() : I32 val","title":"sctp_add_vrf_id"},{"location":"net-OSSockOpt/#returns_659","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_asconf","text":"[Source] fun box sctp_asconf() : I32 val","title":"sctp_asconf"},{"location":"net-OSSockOpt/#returns_660","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_asconf_ack","text":"[Source] fun box sctp_asconf_ack() : I32 val","title":"sctp_asconf_ack"},{"location":"net-OSSockOpt/#returns_661","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_asconf_supported","text":"[Source] fun box sctp_asconf_supported() : I32 val","title":"sctp_asconf_supported"},{"location":"net-OSSockOpt/#returns_662","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_associnfo","text":"[Source] fun box sctp_associnfo() : I32 val","title":"sctp_associnfo"},{"location":"net-OSSockOpt/#returns_663","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_authentication","text":"[Source] fun box sctp_authentication() : I32 val","title":"sctp_authentication"},{"location":"net-OSSockOpt/#returns_664","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_active_key","text":"[Source] fun box sctp_auth_active_key() : I32 val","title":"sctp_auth_active_key"},{"location":"net-OSSockOpt/#returns_665","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_chunk","text":"[Source] fun box sctp_auth_chunk() : I32 val","title":"sctp_auth_chunk"},{"location":"net-OSSockOpt/#returns_666","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_deactivate_key","text":"[Source] fun box sctp_auth_deactivate_key() : I32 val","title":"sctp_auth_deactivate_key"},{"location":"net-OSSockOpt/#returns_667","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_delete_key","text":"[Source] fun box sctp_auth_delete_key() : I32 val","title":"sctp_auth_delete_key"},{"location":"net-OSSockOpt/#returns_668","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_key","text":"[Source] fun box sctp_auth_key() : I32 val","title":"sctp_auth_key"},{"location":"net-OSSockOpt/#returns_669","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auth_supported","text":"[Source] fun box sctp_auth_supported() : I32 val","title":"sctp_auth_supported"},{"location":"net-OSSockOpt/#returns_670","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_autoclose","text":"[Source] fun box sctp_autoclose() : I32 val","title":"sctp_autoclose"},{"location":"net-OSSockOpt/#returns_671","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_auto_asconf","text":"[Source] fun box sctp_auto_asconf() : I32 val","title":"sctp_auto_asconf"},{"location":"net-OSSockOpt/#returns_672","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_badcrc","text":"[Source] fun box sctp_badcrc() : I32 val","title":"sctp_badcrc"},{"location":"net-OSSockOpt/#returns_673","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_bindx_add_addr","text":"[Source] fun box sctp_bindx_add_addr() : I32 val","title":"sctp_bindx_add_addr"},{"location":"net-OSSockOpt/#returns_674","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_bindx_rem_addr","text":"[Source] fun box sctp_bindx_rem_addr() : I32 val","title":"sctp_bindx_rem_addr"},{"location":"net-OSSockOpt/#returns_675","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_blk_logging_enable","text":"[Source] fun box sctp_blk_logging_enable() : I32 val","title":"sctp_blk_logging_enable"},{"location":"net-OSSockOpt/#returns_676","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_bound","text":"[Source] fun box sctp_bound() : I32 val","title":"sctp_bound"},{"location":"net-OSSockOpt/#returns_677","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_cookie_in_shutdown","text":"[Source] fun box sctp_cause_cookie_in_shutdown() : I32 val","title":"sctp_cause_cookie_in_shutdown"},{"location":"net-OSSockOpt/#returns_678","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_deleting_last_addr","text":"[Source] fun box sctp_cause_deleting_last_addr() : I32 val","title":"sctp_cause_deleting_last_addr"},{"location":"net-OSSockOpt/#returns_679","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_deleting_src_addr","text":"[Source] fun box sctp_cause_deleting_src_addr() : I32 val","title":"sctp_cause_deleting_src_addr"},{"location":"net-OSSockOpt/#returns_680","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_illegal_asconf_ack","text":"[Source] fun box sctp_cause_illegal_asconf_ack() : I32 val","title":"sctp_cause_illegal_asconf_ack"},{"location":"net-OSSockOpt/#returns_681","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_invalid_param","text":"[Source] fun box sctp_cause_invalid_param() : I32 val","title":"sctp_cause_invalid_param"},{"location":"net-OSSockOpt/#returns_682","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_invalid_stream","text":"[Source] fun box sctp_cause_invalid_stream() : I32 val","title":"sctp_cause_invalid_stream"},{"location":"net-OSSockOpt/#returns_683","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_missing_param","text":"[Source] fun box sctp_cause_missing_param() : I32 val","title":"sctp_cause_missing_param"},{"location":"net-OSSockOpt/#returns_684","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_nat_colliding_state","text":"[Source] fun box sctp_cause_nat_colliding_state() : I32 val","title":"sctp_cause_nat_colliding_state"},{"location":"net-OSSockOpt/#returns_685","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_nat_missing_state","text":"[Source] fun box sctp_cause_nat_missing_state() : I32 val","title":"sctp_cause_nat_missing_state"},{"location":"net-OSSockOpt/#returns_686","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_no_error","text":"[Source] fun box sctp_cause_no_error() : I32 val","title":"sctp_cause_no_error"},{"location":"net-OSSockOpt/#returns_687","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_no_user_data","text":"[Source] fun box sctp_cause_no_user_data() : I32 val","title":"sctp_cause_no_user_data"},{"location":"net-OSSockOpt/#returns_688","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_out_of_resc","text":"[Source] fun box sctp_cause_out_of_resc() : I32 val","title":"sctp_cause_out_of_resc"},{"location":"net-OSSockOpt/#returns_689","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_protocol_violation","text":"[Source] fun box sctp_cause_protocol_violation() : I32 val","title":"sctp_cause_protocol_violation"},{"location":"net-OSSockOpt/#returns_690","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_request_refused","text":"[Source] fun box sctp_cause_request_refused() : I32 val","title":"sctp_cause_request_refused"},{"location":"net-OSSockOpt/#returns_691","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_resource_shortage","text":"[Source] fun box sctp_cause_resource_shortage() : I32 val","title":"sctp_cause_resource_shortage"},{"location":"net-OSSockOpt/#returns_692","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_restart_w_newaddr","text":"[Source] fun box sctp_cause_restart_w_newaddr() : I32 val","title":"sctp_cause_restart_w_newaddr"},{"location":"net-OSSockOpt/#returns_693","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_stale_cookie","text":"[Source] fun box sctp_cause_stale_cookie() : I32 val","title":"sctp_cause_stale_cookie"},{"location":"net-OSSockOpt/#returns_694","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_chunk","text":"[Source] fun box sctp_cause_unrecog_chunk() : I32 val","title":"sctp_cause_unrecog_chunk"},{"location":"net-OSSockOpt/#returns_695","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unrecog_param","text":"[Source] fun box sctp_cause_unrecog_param() : I32 val","title":"sctp_cause_unrecog_param"},{"location":"net-OSSockOpt/#returns_696","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unresolvable_addr","text":"[Source] fun box sctp_cause_unresolvable_addr() : I32 val","title":"sctp_cause_unresolvable_addr"},{"location":"net-OSSockOpt/#returns_697","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_unsupported_hmacid","text":"[Source] fun box sctp_cause_unsupported_hmacid() : I32 val","title":"sctp_cause_unsupported_hmacid"},{"location":"net-OSSockOpt/#returns_698","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cause_user_initiated_abt","text":"[Source] fun box sctp_cause_user_initiated_abt() : I32 val","title":"sctp_cause_user_initiated_abt"},{"location":"net-OSSockOpt/#returns_699","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_hstcp","text":"[Source] fun box sctp_cc_hstcp() : I32 val","title":"sctp_cc_hstcp"},{"location":"net-OSSockOpt/#returns_700","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_htcp","text":"[Source] fun box sctp_cc_htcp() : I32 val","title":"sctp_cc_htcp"},{"location":"net-OSSockOpt/#returns_701","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_option","text":"[Source] fun box sctp_cc_option() : I32 val","title":"sctp_cc_option"},{"location":"net-OSSockOpt/#returns_702","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_opt_rtcc_setmode","text":"[Source] fun box sctp_cc_opt_rtcc_setmode() : I32 val","title":"sctp_cc_opt_rtcc_setmode"},{"location":"net-OSSockOpt/#returns_703","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_opt_steady_step","text":"[Source] fun box sctp_cc_opt_steady_step() : I32 val","title":"sctp_cc_opt_steady_step"},{"location":"net-OSSockOpt/#returns_704","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_opt_use_dccc_ecn","text":"[Source] fun box sctp_cc_opt_use_dccc_ecn() : I32 val","title":"sctp_cc_opt_use_dccc_ecn"},{"location":"net-OSSockOpt/#returns_705","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_rfc2581","text":"[Source] fun box sctp_cc_rfc2581() : I32 val","title":"sctp_cc_rfc2581"},{"location":"net-OSSockOpt/#returns_706","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cc_rtcc","text":"[Source] fun box sctp_cc_rtcc() : I32 val","title":"sctp_cc_rtcc"},{"location":"net-OSSockOpt/#returns_707","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_closed","text":"[Source] fun box sctp_closed() : I32 val","title":"sctp_closed"},{"location":"net-OSSockOpt/#returns_708","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_clr_stat_log","text":"[Source] fun box sctp_clr_stat_log() : I32 val","title":"sctp_clr_stat_log"},{"location":"net-OSSockOpt/#returns_709","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_base","text":"[Source] fun box sctp_cmt_base() : I32 val","title":"sctp_cmt_base"},{"location":"net-OSSockOpt/#returns_710","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_max","text":"[Source] fun box sctp_cmt_max() : I32 val","title":"sctp_cmt_max"},{"location":"net-OSSockOpt/#returns_711","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_mptcp","text":"[Source] fun box sctp_cmt_mptcp() : I32 val","title":"sctp_cmt_mptcp"},{"location":"net-OSSockOpt/#returns_712","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_off","text":"[Source] fun box sctp_cmt_off() : I32 val","title":"sctp_cmt_off"},{"location":"net-OSSockOpt/#returns_713","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_on_off","text":"[Source] fun box sctp_cmt_on_off() : I32 val","title":"sctp_cmt_on_off"},{"location":"net-OSSockOpt/#returns_714","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_rpv1","text":"[Source] fun box sctp_cmt_rpv1() : I32 val","title":"sctp_cmt_rpv1"},{"location":"net-OSSockOpt/#returns_715","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_rpv2","text":"[Source] fun box sctp_cmt_rpv2() : I32 val","title":"sctp_cmt_rpv2"},{"location":"net-OSSockOpt/#returns_716","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cmt_use_dac","text":"[Source] fun box sctp_cmt_use_dac() : I32 val","title":"sctp_cmt_use_dac"},{"location":"net-OSSockOpt/#returns_717","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_connect_x","text":"[Source] fun box sctp_connect_x() : I32 val","title":"sctp_connect_x"},{"location":"net-OSSockOpt/#returns_718","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_connect_x_complete","text":"[Source] fun box sctp_connect_x_complete() : I32 val","title":"sctp_connect_x_complete"},{"location":"net-OSSockOpt/#returns_719","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_connect_x_delayed","text":"[Source] fun box sctp_connect_x_delayed() : I32 val","title":"sctp_connect_x_delayed"},{"location":"net-OSSockOpt/#returns_720","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_context","text":"[Source] fun box sctp_context() : I32 val","title":"sctp_context"},{"location":"net-OSSockOpt/#returns_721","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_ack","text":"[Source] fun box sctp_cookie_ack() : I32 val","title":"sctp_cookie_ack"},{"location":"net-OSSockOpt/#returns_722","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_echo","text":"[Source] fun box sctp_cookie_echo() : I32 val","title":"sctp_cookie_echo"},{"location":"net-OSSockOpt/#returns_723","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_echoed","text":"[Source] fun box sctp_cookie_echoed() : I32 val","title":"sctp_cookie_echoed"},{"location":"net-OSSockOpt/#returns_724","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cookie_wait","text":"[Source] fun box sctp_cookie_wait() : I32 val","title":"sctp_cookie_wait"},{"location":"net-OSSockOpt/#returns_725","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwnd_logging_enable","text":"[Source] fun box sctp_cwnd_logging_enable() : I32 val","title":"sctp_cwnd_logging_enable"},{"location":"net-OSSockOpt/#returns_726","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwnd_monitor_enable","text":"[Source] fun box sctp_cwnd_monitor_enable() : I32 val","title":"sctp_cwnd_monitor_enable"},{"location":"net-OSSockOpt/#returns_727","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwr_in_same_window","text":"[Source] fun box sctp_cwr_in_same_window() : I32 val","title":"sctp_cwr_in_same_window"},{"location":"net-OSSockOpt/#returns_728","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_cwr_reduce_override","text":"[Source] fun box sctp_cwr_reduce_override() : I32 val","title":"sctp_cwr_reduce_override"},{"location":"net-OSSockOpt/#returns_729","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data","text":"[Source] fun box sctp_data() : I32 val","title":"sctp_data"},{"location":"net-OSSockOpt/#returns_730","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_first_frag","text":"[Source] fun box sctp_data_first_frag() : I32 val","title":"sctp_data_first_frag"},{"location":"net-OSSockOpt/#returns_731","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_frag_mask","text":"[Source] fun box sctp_data_frag_mask() : I32 val","title":"sctp_data_frag_mask"},{"location":"net-OSSockOpt/#returns_732","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_last_frag","text":"[Source] fun box sctp_data_last_frag() : I32 val","title":"sctp_data_last_frag"},{"location":"net-OSSockOpt/#returns_733","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_middle_frag","text":"[Source] fun box sctp_data_middle_frag() : I32 val","title":"sctp_data_middle_frag"},{"location":"net-OSSockOpt/#returns_734","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_not_frag","text":"[Source] fun box sctp_data_not_frag() : I32 val","title":"sctp_data_not_frag"},{"location":"net-OSSockOpt/#returns_735","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_sack_immediately","text":"[Source] fun box sctp_data_sack_immediately() : I32 val","title":"sctp_data_sack_immediately"},{"location":"net-OSSockOpt/#returns_736","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_data_unordered","text":"[Source] fun box sctp_data_unordered() : I32 val","title":"sctp_data_unordered"},{"location":"net-OSSockOpt/#returns_737","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_default_prinfo","text":"[Source] fun box sctp_default_prinfo() : I32 val","title":"sctp_default_prinfo"},{"location":"net-OSSockOpt/#returns_738","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_default_send_param","text":"[Source] fun box sctp_default_send_param() : I32 val","title":"sctp_default_send_param"},{"location":"net-OSSockOpt/#returns_739","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_default_sndinfo","text":"[Source] fun box sctp_default_sndinfo() : I32 val","title":"sctp_default_sndinfo"},{"location":"net-OSSockOpt/#returns_740","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_delayed_sack","text":"[Source] fun box sctp_delayed_sack() : I32 val","title":"sctp_delayed_sack"},{"location":"net-OSSockOpt/#returns_741","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_del_vrf_id","text":"[Source] fun box sctp_del_vrf_id() : I32 val","title":"sctp_del_vrf_id"},{"location":"net-OSSockOpt/#returns_742","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_disable_fragments","text":"[Source] fun box sctp_disable_fragments() : I32 val","title":"sctp_disable_fragments"},{"location":"net-OSSockOpt/#returns_743","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ecn_cwr","text":"[Source] fun box sctp_ecn_cwr() : I32 val","title":"sctp_ecn_cwr"},{"location":"net-OSSockOpt/#returns_744","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ecn_echo","text":"[Source] fun box sctp_ecn_echo() : I32 val","title":"sctp_ecn_echo"},{"location":"net-OSSockOpt/#returns_745","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ecn_supported","text":"[Source] fun box sctp_ecn_supported() : I32 val","title":"sctp_ecn_supported"},{"location":"net-OSSockOpt/#returns_746","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_change_assoc_req","text":"[Source] fun box sctp_enable_change_assoc_req() : I32 val","title":"sctp_enable_change_assoc_req"},{"location":"net-OSSockOpt/#returns_747","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_reset_assoc_req","text":"[Source] fun box sctp_enable_reset_assoc_req() : I32 val","title":"sctp_enable_reset_assoc_req"},{"location":"net-OSSockOpt/#returns_748","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_reset_stream_req","text":"[Source] fun box sctp_enable_reset_stream_req() : I32 val","title":"sctp_enable_reset_stream_req"},{"location":"net-OSSockOpt/#returns_749","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_stream_reset","text":"[Source] fun box sctp_enable_stream_reset() : I32 val","title":"sctp_enable_stream_reset"},{"location":"net-OSSockOpt/#returns_750","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_enable_value_mask","text":"[Source] fun box sctp_enable_value_mask() : I32 val","title":"sctp_enable_value_mask"},{"location":"net-OSSockOpt/#returns_751","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_established","text":"[Source] fun box sctp_established() : I32 val","title":"sctp_established"},{"location":"net-OSSockOpt/#returns_752","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_event","text":"[Source] fun box sctp_event() : I32 val","title":"sctp_event"},{"location":"net-OSSockOpt/#returns_753","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_events","text":"[Source] fun box sctp_events() : I32 val","title":"sctp_events"},{"location":"net-OSSockOpt/#returns_754","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_explicit_eor","text":"[Source] fun box sctp_explicit_eor() : I32 val","title":"sctp_explicit_eor"},{"location":"net-OSSockOpt/#returns_755","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_flight_logging_enable","text":"[Source] fun box sctp_flight_logging_enable() : I32 val","title":"sctp_flight_logging_enable"},{"location":"net-OSSockOpt/#returns_756","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_forward_cum_tsn","text":"[Source] fun box sctp_forward_cum_tsn() : I32 val","title":"sctp_forward_cum_tsn"},{"location":"net-OSSockOpt/#returns_757","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_fragment_interleave","text":"[Source] fun box sctp_fragment_interleave() : I32 val","title":"sctp_fragment_interleave"},{"location":"net-OSSockOpt/#returns_758","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_frag_level_0","text":"[Source] fun box sctp_frag_level_0() : I32 val","title":"sctp_frag_level_0"},{"location":"net-OSSockOpt/#returns_759","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_frag_level_1","text":"[Source] fun box sctp_frag_level_1() : I32 val","title":"sctp_frag_level_1"},{"location":"net-OSSockOpt/#returns_760","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_frag_level_2","text":"[Source] fun box sctp_frag_level_2() : I32 val","title":"sctp_frag_level_2"},{"location":"net-OSSockOpt/#returns_761","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_from_middle_box","text":"[Source] fun box sctp_from_middle_box() : I32 val","title":"sctp_from_middle_box"},{"location":"net-OSSockOpt/#returns_762","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_fr_logging_enable","text":"[Source] fun box sctp_fr_logging_enable() : I32 val","title":"sctp_fr_logging_enable"},{"location":"net-OSSockOpt/#returns_763","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_addr_len","text":"[Source] fun box sctp_get_addr_len() : I32 val","title":"sctp_get_addr_len"},{"location":"net-OSSockOpt/#returns_764","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_asoc_vrf","text":"[Source] fun box sctp_get_asoc_vrf() : I32 val","title":"sctp_get_asoc_vrf"},{"location":"net-OSSockOpt/#returns_765","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_assoc_id_list","text":"[Source] fun box sctp_get_assoc_id_list() : I32 val","title":"sctp_get_assoc_id_list"},{"location":"net-OSSockOpt/#returns_766","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_assoc_number","text":"[Source] fun box sctp_get_assoc_number() : I32 val","title":"sctp_get_assoc_number"},{"location":"net-OSSockOpt/#returns_767","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_local_addresses","text":"[Source] fun box sctp_get_local_addresses() : I32 val","title":"sctp_get_local_addresses"},{"location":"net-OSSockOpt/#returns_768","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_local_addr_size","text":"[Source] fun box sctp_get_local_addr_size() : I32 val","title":"sctp_get_local_addr_size"},{"location":"net-OSSockOpt/#returns_769","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_nonce_values","text":"[Source] fun box sctp_get_nonce_values() : I32 val","title":"sctp_get_nonce_values"},{"location":"net-OSSockOpt/#returns_770","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_packet_log","text":"[Source] fun box sctp_get_packet_log() : I32 val","title":"sctp_get_packet_log"},{"location":"net-OSSockOpt/#returns_771","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_peer_addresses","text":"[Source] fun box sctp_get_peer_addresses() : I32 val","title":"sctp_get_peer_addresses"},{"location":"net-OSSockOpt/#returns_772","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_peer_addr_info","text":"[Source] fun box sctp_get_peer_addr_info() : I32 val","title":"sctp_get_peer_addr_info"},{"location":"net-OSSockOpt/#returns_773","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_remote_addr_size","text":"[Source] fun box sctp_get_remote_addr_size() : I32 val","title":"sctp_get_remote_addr_size"},{"location":"net-OSSockOpt/#returns_774","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_sndbuf_use","text":"[Source] fun box sctp_get_sndbuf_use() : I32 val","title":"sctp_get_sndbuf_use"},{"location":"net-OSSockOpt/#returns_775","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_stat_log","text":"[Source] fun box sctp_get_stat_log() : I32 val","title":"sctp_get_stat_log"},{"location":"net-OSSockOpt/#returns_776","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_get_vrf_ids","text":"[Source] fun box sctp_get_vrf_ids() : I32 val","title":"sctp_get_vrf_ids"},{"location":"net-OSSockOpt/#returns_777","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_had_no_tcb","text":"[Source] fun box sctp_had_no_tcb() : I32 val","title":"sctp_had_no_tcb"},{"location":"net-OSSockOpt/#returns_778","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_heartbeat_ack","text":"[Source] fun box sctp_heartbeat_ack() : I32 val","title":"sctp_heartbeat_ack"},{"location":"net-OSSockOpt/#returns_779","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_heartbeat_request","text":"[Source] fun box sctp_heartbeat_request() : I32 val","title":"sctp_heartbeat_request"},{"location":"net-OSSockOpt/#returns_780","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_hmac_ident","text":"[Source] fun box sctp_hmac_ident() : I32 val","title":"sctp_hmac_ident"},{"location":"net-OSSockOpt/#returns_781","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_idata","text":"[Source] fun box sctp_idata() : I32 val","title":"sctp_idata"},{"location":"net-OSSockOpt/#returns_782","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_iforward_cum_tsn","text":"[Source] fun box sctp_iforward_cum_tsn() : I32 val","title":"sctp_iforward_cum_tsn"},{"location":"net-OSSockOpt/#returns_783","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_initiation","text":"[Source] fun box sctp_initiation() : I32 val","title":"sctp_initiation"},{"location":"net-OSSockOpt/#returns_784","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_initiation_ack","text":"[Source] fun box sctp_initiation_ack() : I32 val","title":"sctp_initiation_ack"},{"location":"net-OSSockOpt/#returns_785","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_initmsg","text":"[Source] fun box sctp_initmsg() : I32 val","title":"sctp_initmsg"},{"location":"net-OSSockOpt/#returns_786","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_interleaving_supported","text":"[Source] fun box sctp_interleaving_supported() : I32 val","title":"sctp_interleaving_supported"},{"location":"net-OSSockOpt/#returns_787","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_i_want_mapped_v4_addr","text":"[Source] fun box sctp_i_want_mapped_v4_addr() : I32 val","title":"sctp_i_want_mapped_v4_addr"},{"location":"net-OSSockOpt/#returns_788","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_last_packet_tracing","text":"[Source] fun box sctp_last_packet_tracing() : I32 val","title":"sctp_last_packet_tracing"},{"location":"net-OSSockOpt/#returns_789","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_listen","text":"[Source] fun box sctp_listen() : I32 val","title":"sctp_listen"},{"location":"net-OSSockOpt/#returns_790","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_local_auth_chunks","text":"[Source] fun box sctp_local_auth_chunks() : I32 val","title":"sctp_local_auth_chunks"},{"location":"net-OSSockOpt/#returns_791","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_lock_logging_enable","text":"[Source] fun box sctp_lock_logging_enable() : I32 val","title":"sctp_lock_logging_enable"},{"location":"net-OSSockOpt/#returns_792","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_outq","text":"[Source] fun box sctp_log_at_send_2_outq() : I32 val","title":"sctp_log_at_send_2_outq"},{"location":"net-OSSockOpt/#returns_793","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_at_send_2_sctp","text":"[Source] fun box sctp_log_at_send_2_sctp() : I32 val","title":"sctp_log_at_send_2_sctp"},{"location":"net-OSSockOpt/#returns_794","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_maxburst_enable","text":"[Source] fun box sctp_log_maxburst_enable() : I32 val","title":"sctp_log_maxburst_enable"},{"location":"net-OSSockOpt/#returns_795","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_rwnd_enable","text":"[Source] fun box sctp_log_rwnd_enable() : I32 val","title":"sctp_log_rwnd_enable"},{"location":"net-OSSockOpt/#returns_796","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_sack_arrivals_enable","text":"[Source] fun box sctp_log_sack_arrivals_enable() : I32 val","title":"sctp_log_sack_arrivals_enable"},{"location":"net-OSSockOpt/#returns_797","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_log_try_advance","text":"[Source] fun box sctp_log_try_advance() : I32 val","title":"sctp_log_try_advance"},{"location":"net-OSSockOpt/#returns_798","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ltrace_chunk_enable","text":"[Source] fun box sctp_ltrace_chunk_enable() : I32 val","title":"sctp_ltrace_chunk_enable"},{"location":"net-OSSockOpt/#returns_799","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ltrace_error_enable","text":"[Source] fun box sctp_ltrace_error_enable() : I32 val","title":"sctp_ltrace_error_enable"},{"location":"net-OSSockOpt/#returns_800","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_map_logging_enable","text":"[Source] fun box sctp_map_logging_enable() : I32 val","title":"sctp_map_logging_enable"},{"location":"net-OSSockOpt/#returns_801","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_maxburst","text":"[Source] fun box sctp_maxburst() : I32 val","title":"sctp_maxburst"},{"location":"net-OSSockOpt/#returns_802","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_maxseg","text":"[Source] fun box sctp_maxseg() : I32 val","title":"sctp_maxseg"},{"location":"net-OSSockOpt/#returns_803","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_burst","text":"[Source] fun box sctp_max_burst() : I32 val","title":"sctp_max_burst"},{"location":"net-OSSockOpt/#returns_804","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_cookie_life","text":"[Source] fun box sctp_max_cookie_life() : I32 val","title":"sctp_max_cookie_life"},{"location":"net-OSSockOpt/#returns_805","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_cwnd","text":"[Source] fun box sctp_max_cwnd() : I32 val","title":"sctp_max_cwnd"},{"location":"net-OSSockOpt/#returns_806","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_hb_interval","text":"[Source] fun box sctp_max_hb_interval() : I32 val","title":"sctp_max_hb_interval"},{"location":"net-OSSockOpt/#returns_807","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_max_sack_delay","text":"[Source] fun box sctp_max_sack_delay() : I32 val","title":"sctp_max_sack_delay"},{"location":"net-OSSockOpt/#returns_808","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mbcnt_logging_enable","text":"[Source] fun box sctp_mbcnt_logging_enable() : I32 val","title":"sctp_mbcnt_logging_enable"},{"location":"net-OSSockOpt/#returns_809","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mbuf_logging_enable","text":"[Source] fun box sctp_mbuf_logging_enable() : I32 val","title":"sctp_mbuf_logging_enable"},{"location":"net-OSSockOpt/#returns_810","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mobility_base","text":"[Source] fun box sctp_mobility_base() : I32 val","title":"sctp_mobility_base"},{"location":"net-OSSockOpt/#returns_811","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mobility_fasthandoff","text":"[Source] fun box sctp_mobility_fasthandoff() : I32 val","title":"sctp_mobility_fasthandoff"},{"location":"net-OSSockOpt/#returns_812","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_mobility_prim_deleted","text":"[Source] fun box sctp_mobility_prim_deleted() : I32 val","title":"sctp_mobility_prim_deleted"},{"location":"net-OSSockOpt/#returns_813","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nagle_logging_enable","text":"[Source] fun box sctp_nagle_logging_enable() : I32 val","title":"sctp_nagle_logging_enable"},{"location":"net-OSSockOpt/#returns_814","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nodelay","text":"[Source] fun box sctp_nodelay() : I32 val","title":"sctp_nodelay"},{"location":"net-OSSockOpt/#returns_815","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nrsack_supported","text":"[Source] fun box sctp_nrsack_supported() : I32 val","title":"sctp_nrsack_supported"},{"location":"net-OSSockOpt/#returns_816","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_nr_selective_ack","text":"[Source] fun box sctp_nr_selective_ack() : I32 val","title":"sctp_nr_selective_ack"},{"location":"net-OSSockOpt/#returns_817","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_operation_error","text":"[Source] fun box sctp_operation_error() : I32 val","title":"sctp_operation_error"},{"location":"net-OSSockOpt/#returns_818","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packed","text":"[Source] fun box sctp_packed() : I32 val","title":"sctp_packed"},{"location":"net-OSSockOpt/#returns_819","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packet_dropped","text":"[Source] fun box sctp_packet_dropped() : I32 val","title":"sctp_packet_dropped"},{"location":"net-OSSockOpt/#returns_820","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packet_log_size","text":"[Source] fun box sctp_packet_log_size() : I32 val","title":"sctp_packet_log_size"},{"location":"net-OSSockOpt/#returns_821","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_packet_truncated","text":"[Source] fun box sctp_packet_truncated() : I32 val","title":"sctp_packet_truncated"},{"location":"net-OSSockOpt/#returns_822","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pad_chunk","text":"[Source] fun box sctp_pad_chunk() : I32 val","title":"sctp_pad_chunk"},{"location":"net-OSSockOpt/#returns_823","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_partial_delivery_point","text":"[Source] fun box sctp_partial_delivery_point() : I32 val","title":"sctp_partial_delivery_point"},{"location":"net-OSSockOpt/#returns_824","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_copy_flags","text":"[Source] fun box sctp_pcb_copy_flags() : I32 val","title":"sctp_pcb_copy_flags"},{"location":"net-OSSockOpt/#returns_825","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_accepting","text":"[Source] fun box sctp_pcb_flags_accepting() : I32 val","title":"sctp_pcb_flags_accepting"},{"location":"net-OSSockOpt/#returns_826","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_adaptationevnt","text":"[Source] fun box sctp_pcb_flags_adaptationevnt() : I32 val","title":"sctp_pcb_flags_adaptationevnt"},{"location":"net-OSSockOpt/#returns_827","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_assoc_resetevnt","text":"[Source] fun box sctp_pcb_flags_assoc_resetevnt() : I32 val","title":"sctp_pcb_flags_assoc_resetevnt"},{"location":"net-OSSockOpt/#returns_828","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_authevnt","text":"[Source] fun box sctp_pcb_flags_authevnt() : I32 val","title":"sctp_pcb_flags_authevnt"},{"location":"net-OSSockOpt/#returns_829","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_autoclose","text":"[Source] fun box sctp_pcb_flags_autoclose() : I32 val","title":"sctp_pcb_flags_autoclose"},{"location":"net-OSSockOpt/#returns_830","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_auto_asconf","text":"[Source] fun box sctp_pcb_flags_auto_asconf() : I32 val","title":"sctp_pcb_flags_auto_asconf"},{"location":"net-OSSockOpt/#returns_831","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_blocking_io","text":"[Source] fun box sctp_pcb_flags_blocking_io() : I32 val","title":"sctp_pcb_flags_blocking_io"},{"location":"net-OSSockOpt/#returns_832","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_boundall","text":"[Source] fun box sctp_pcb_flags_boundall() : I32 val","title":"sctp_pcb_flags_boundall"},{"location":"net-OSSockOpt/#returns_833","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_bound_v6","text":"[Source] fun box sctp_pcb_flags_bound_v6() : I32 val","title":"sctp_pcb_flags_bound_v6"},{"location":"net-OSSockOpt/#returns_834","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_close_ip","text":"[Source] fun box sctp_pcb_flags_close_ip() : I32 val","title":"sctp_pcb_flags_close_ip"},{"location":"net-OSSockOpt/#returns_835","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_connected","text":"[Source] fun box sctp_pcb_flags_connected() : I32 val","title":"sctp_pcb_flags_connected"},{"location":"net-OSSockOpt/#returns_836","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_donot_heartbeat","text":"[Source] fun box sctp_pcb_flags_donot_heartbeat() : I32 val","title":"sctp_pcb_flags_donot_heartbeat"},{"location":"net-OSSockOpt/#returns_837","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dont_wake","text":"[Source] fun box sctp_pcb_flags_dont_wake() : I32 val","title":"sctp_pcb_flags_dont_wake"},{"location":"net-OSSockOpt/#returns_838","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_asconf","text":"[Source] fun box sctp_pcb_flags_do_asconf() : I32 val","title":"sctp_pcb_flags_do_asconf"},{"location":"net-OSSockOpt/#returns_839","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_do_not_pmtud","text":"[Source] fun box sctp_pcb_flags_do_not_pmtud() : I32 val","title":"sctp_pcb_flags_do_not_pmtud"},{"location":"net-OSSockOpt/#returns_840","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_dryevnt","text":"[Source] fun box sctp_pcb_flags_dryevnt() : I32 val","title":"sctp_pcb_flags_dryevnt"},{"location":"net-OSSockOpt/#returns_841","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_explicit_eor","text":"[Source] fun box sctp_pcb_flags_explicit_eor() : I32 val","title":"sctp_pcb_flags_explicit_eor"},{"location":"net-OSSockOpt/#returns_842","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_ext_rcvinfo","text":"[Source] fun box sctp_pcb_flags_ext_rcvinfo() : I32 val","title":"sctp_pcb_flags_ext_rcvinfo"},{"location":"net-OSSockOpt/#returns_843","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_frag_interleave","text":"[Source] fun box sctp_pcb_flags_frag_interleave() : I32 val","title":"sctp_pcb_flags_frag_interleave"},{"location":"net-OSSockOpt/#returns_844","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_interleave_strms","text":"[Source] fun box sctp_pcb_flags_interleave_strms() : I32 val","title":"sctp_pcb_flags_interleave_strms"},{"location":"net-OSSockOpt/#returns_845","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_in_tcppool","text":"[Source] fun box sctp_pcb_flags_in_tcppool() : I32 val","title":"sctp_pcb_flags_in_tcppool"},{"location":"net-OSSockOpt/#returns_846","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_multiple_asconfs","text":"[Source] fun box sctp_pcb_flags_multiple_asconfs() : I32 val","title":"sctp_pcb_flags_multiple_asconfs"},{"location":"net-OSSockOpt/#returns_847","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_needs_mapped_v4","text":"[Source] fun box sctp_pcb_flags_needs_mapped_v4() : I32 val","title":"sctp_pcb_flags_needs_mapped_v4"},{"location":"net-OSSockOpt/#returns_848","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_nodelay","text":"[Source] fun box sctp_pcb_flags_nodelay() : I32 val","title":"sctp_pcb_flags_nodelay"},{"location":"net-OSSockOpt/#returns_849","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_no_fragment","text":"[Source] fun box sctp_pcb_flags_no_fragment() : I32 val","title":"sctp_pcb_flags_no_fragment"},{"location":"net-OSSockOpt/#returns_850","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_pdapievnt","text":"[Source] fun box sctp_pcb_flags_pdapievnt() : I32 val","title":"sctp_pcb_flags_pdapievnt"},{"location":"net-OSSockOpt/#returns_851","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_portreuse","text":"[Source] fun box sctp_pcb_flags_portreuse() : I32 val","title":"sctp_pcb_flags_portreuse"},{"location":"net-OSSockOpt/#returns_852","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvassocevnt","text":"[Source] fun box sctp_pcb_flags_recvassocevnt() : I32 val","title":"sctp_pcb_flags_recvassocevnt"},{"location":"net-OSSockOpt/#returns_853","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvdataioevnt","text":"[Source] fun box sctp_pcb_flags_recvdataioevnt() : I32 val","title":"sctp_pcb_flags_recvdataioevnt"},{"location":"net-OSSockOpt/#returns_854","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnsendfailevnt","text":"[Source] fun box sctp_pcb_flags_recvnsendfailevnt() : I32 val","title":"sctp_pcb_flags_recvnsendfailevnt"},{"location":"net-OSSockOpt/#returns_855","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvnxtinfo","text":"[Source] fun box sctp_pcb_flags_recvnxtinfo() : I32 val","title":"sctp_pcb_flags_recvnxtinfo"},{"location":"net-OSSockOpt/#returns_856","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpaddrevnt","text":"[Source] fun box sctp_pcb_flags_recvpaddrevnt() : I32 val","title":"sctp_pcb_flags_recvpaddrevnt"},{"location":"net-OSSockOpt/#returns_857","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvpeererr","text":"[Source] fun box sctp_pcb_flags_recvpeererr() : I32 val","title":"sctp_pcb_flags_recvpeererr"},{"location":"net-OSSockOpt/#returns_858","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvrcvinfo","text":"[Source] fun box sctp_pcb_flags_recvrcvinfo() : I32 val","title":"sctp_pcb_flags_recvrcvinfo"},{"location":"net-OSSockOpt/#returns_859","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvsendfailevnt","text":"[Source] fun box sctp_pcb_flags_recvsendfailevnt() : I32 val","title":"sctp_pcb_flags_recvsendfailevnt"},{"location":"net-OSSockOpt/#returns_860","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_recvshutdownevnt","text":"[Source] fun box sctp_pcb_flags_recvshutdownevnt() : I32 val","title":"sctp_pcb_flags_recvshutdownevnt"},{"location":"net-OSSockOpt/#returns_861","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_allgone","text":"[Source] fun box sctp_pcb_flags_socket_allgone() : I32 val","title":"sctp_pcb_flags_socket_allgone"},{"location":"net-OSSockOpt/#returns_862","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_cant_read","text":"[Source] fun box sctp_pcb_flags_socket_cant_read() : I32 val","title":"sctp_pcb_flags_socket_cant_read"},{"location":"net-OSSockOpt/#returns_863","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_socket_gone","text":"[Source] fun box sctp_pcb_flags_socket_gone() : I32 val","title":"sctp_pcb_flags_socket_gone"},{"location":"net-OSSockOpt/#returns_864","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_changeevnt","text":"[Source] fun box sctp_pcb_flags_stream_changeevnt() : I32 val","title":"sctp_pcb_flags_stream_changeevnt"},{"location":"net-OSSockOpt/#returns_865","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_stream_resetevnt","text":"[Source] fun box sctp_pcb_flags_stream_resetevnt() : I32 val","title":"sctp_pcb_flags_stream_resetevnt"},{"location":"net-OSSockOpt/#returns_866","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_tcptype","text":"[Source] fun box sctp_pcb_flags_tcptype() : I32 val","title":"sctp_pcb_flags_tcptype"},{"location":"net-OSSockOpt/#returns_867","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_udptype","text":"[Source] fun box sctp_pcb_flags_udptype() : I32 val","title":"sctp_pcb_flags_udptype"},{"location":"net-OSSockOpt/#returns_868","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_unbound","text":"[Source] fun box sctp_pcb_flags_unbound() : I32 val","title":"sctp_pcb_flags_unbound"},{"location":"net-OSSockOpt/#returns_869","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeinput","text":"[Source] fun box sctp_pcb_flags_wakeinput() : I32 val","title":"sctp_pcb_flags_wakeinput"},{"location":"net-OSSockOpt/#returns_870","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_wakeoutput","text":"[Source] fun box sctp_pcb_flags_wakeoutput() : I32 val","title":"sctp_pcb_flags_wakeoutput"},{"location":"net-OSSockOpt/#returns_871","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_aborted","text":"[Source] fun box sctp_pcb_flags_was_aborted() : I32 val","title":"sctp_pcb_flags_was_aborted"},{"location":"net-OSSockOpt/#returns_872","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_was_connected","text":"[Source] fun box sctp_pcb_flags_was_connected() : I32 val","title":"sctp_pcb_flags_was_connected"},{"location":"net-OSSockOpt/#returns_873","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_flags_zero_copy_active","text":"[Source] fun box sctp_pcb_flags_zero_copy_active() : I32 val","title":"sctp_pcb_flags_zero_copy_active"},{"location":"net-OSSockOpt/#returns_874","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pcb_status","text":"[Source] fun box sctp_pcb_status() : I32 val","title":"sctp_pcb_status"},{"location":"net-OSSockOpt/#returns_875","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peeloff","text":"[Source] fun box sctp_peeloff() : I32 val","title":"sctp_peeloff"},{"location":"net-OSSockOpt/#returns_876","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peer_addr_params","text":"[Source] fun box sctp_peer_addr_params() : I32 val","title":"sctp_peer_addr_params"},{"location":"net-OSSockOpt/#returns_877","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peer_addr_thlds","text":"[Source] fun box sctp_peer_addr_thlds() : I32 val","title":"sctp_peer_addr_thlds"},{"location":"net-OSSockOpt/#returns_878","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_peer_auth_chunks","text":"[Source] fun box sctp_peer_auth_chunks() : I32 val","title":"sctp_peer_auth_chunks"},{"location":"net-OSSockOpt/#returns_879","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pktdrop_supported","text":"[Source] fun box sctp_pktdrop_supported() : I32 val","title":"sctp_pktdrop_supported"},{"location":"net-OSSockOpt/#returns_880","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pluggable_cc","text":"[Source] fun box sctp_pluggable_cc() : I32 val","title":"sctp_pluggable_cc"},{"location":"net-OSSockOpt/#returns_881","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pluggable_ss","text":"[Source] fun box sctp_pluggable_ss() : I32 val","title":"sctp_pluggable_ss"},{"location":"net-OSSockOpt/#returns_882","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_primary_addr","text":"[Source] fun box sctp_primary_addr() : I32 val","title":"sctp_primary_addr"},{"location":"net-OSSockOpt/#returns_883","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pr_assoc_status","text":"[Source] fun box sctp_pr_assoc_status() : I32 val","title":"sctp_pr_assoc_status"},{"location":"net-OSSockOpt/#returns_884","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pr_stream_status","text":"[Source] fun box sctp_pr_stream_status() : I32 val","title":"sctp_pr_stream_status"},{"location":"net-OSSockOpt/#returns_885","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_pr_supported","text":"[Source] fun box sctp_pr_supported() : I32 val","title":"sctp_pr_supported"},{"location":"net-OSSockOpt/#returns_886","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reconfig_supported","text":"[Source] fun box sctp_reconfig_supported() : I32 val","title":"sctp_reconfig_supported"},{"location":"net-OSSockOpt/#returns_887","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_recvnxtinfo","text":"[Source] fun box sctp_recvnxtinfo() : I32 val","title":"sctp_recvnxtinfo"},{"location":"net-OSSockOpt/#returns_888","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_recvrcvinfo","text":"[Source] fun box sctp_recvrcvinfo() : I32 val","title":"sctp_recvrcvinfo"},{"location":"net-OSSockOpt/#returns_889","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_recv_rwnd_logging_enable","text":"[Source] fun box sctp_recv_rwnd_logging_enable() : I32 val","title":"sctp_recv_rwnd_logging_enable"},{"location":"net-OSSockOpt/#returns_890","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_remote_udp_encaps_port","text":"[Source] fun box sctp_remote_udp_encaps_port() : I32 val","title":"sctp_remote_udp_encaps_port"},{"location":"net-OSSockOpt/#returns_891","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reset_assoc","text":"[Source] fun box sctp_reset_assoc() : I32 val","title":"sctp_reset_assoc"},{"location":"net-OSSockOpt/#returns_892","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reset_streams","text":"[Source] fun box sctp_reset_streams() : I32 val","title":"sctp_reset_streams"},{"location":"net-OSSockOpt/#returns_893","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_reuse_port","text":"[Source] fun box sctp_reuse_port() : I32 val","title":"sctp_reuse_port"},{"location":"net-OSSockOpt/#returns_894","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_rtoinfo","text":"[Source] fun box sctp_rtoinfo() : I32 val","title":"sctp_rtoinfo"},{"location":"net-OSSockOpt/#returns_895","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_rttvar_logging_enable","text":"[Source] fun box sctp_rttvar_logging_enable() : I32 val","title":"sctp_rttvar_logging_enable"},{"location":"net-OSSockOpt/#returns_896","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_cmt_dac","text":"[Source] fun box sctp_sack_cmt_dac() : I32 val","title":"sctp_sack_cmt_dac"},{"location":"net-OSSockOpt/#returns_897","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_logging_enable","text":"[Source] fun box sctp_sack_logging_enable() : I32 val","title":"sctp_sack_logging_enable"},{"location":"net-OSSockOpt/#returns_898","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_nonce_sum","text":"[Source] fun box sctp_sack_nonce_sum() : I32 val","title":"sctp_sack_nonce_sum"},{"location":"net-OSSockOpt/#returns_899","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sack_rwnd_logging_enable","text":"[Source] fun box sctp_sack_rwnd_logging_enable() : I32 val","title":"sctp_sack_rwnd_logging_enable"},{"location":"net-OSSockOpt/#returns_900","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sat_network_burst_incr","text":"[Source] fun box sctp_sat_network_burst_incr() : I32 val","title":"sctp_sat_network_burst_incr"},{"location":"net-OSSockOpt/#returns_901","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sat_network_min","text":"[Source] fun box sctp_sat_network_min() : I32 val","title":"sctp_sat_network_min"},{"location":"net-OSSockOpt/#returns_902","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_sb_logging_enable","text":"[Source] fun box sctp_sb_logging_enable() : I32 val","title":"sctp_sb_logging_enable"},{"location":"net-OSSockOpt/#returns_903","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_selective_ack","text":"[Source] fun box sctp_selective_ack() : I32 val","title":"sctp_selective_ack"},{"location":"net-OSSockOpt/#returns_904","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_debug_level","text":"[Source] fun box sctp_set_debug_level() : I32 val","title":"sctp_set_debug_level"},{"location":"net-OSSockOpt/#returns_905","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_dynamic_primary","text":"[Source] fun box sctp_set_dynamic_primary() : I32 val","title":"sctp_set_dynamic_primary"},{"location":"net-OSSockOpt/#returns_906","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_initial_dbg_seq","text":"[Source] fun box sctp_set_initial_dbg_seq() : I32 val","title":"sctp_set_initial_dbg_seq"},{"location":"net-OSSockOpt/#returns_907","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_set_peer_primary_addr","text":"[Source] fun box sctp_set_peer_primary_addr() : I32 val","title":"sctp_set_peer_primary_addr"},{"location":"net-OSSockOpt/#returns_908","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown","text":"[Source] fun box sctp_shutdown() : I32 val","title":"sctp_shutdown"},{"location":"net-OSSockOpt/#returns_909","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_ack","text":"[Source] fun box sctp_shutdown_ack() : I32 val","title":"sctp_shutdown_ack"},{"location":"net-OSSockOpt/#returns_910","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_ack_sent","text":"[Source] fun box sctp_shutdown_ack_sent() : I32 val","title":"sctp_shutdown_ack_sent"},{"location":"net-OSSockOpt/#returns_911","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_complete","text":"[Source] fun box sctp_shutdown_complete() : I32 val","title":"sctp_shutdown_complete"},{"location":"net-OSSockOpt/#returns_912","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_pending","text":"[Source] fun box sctp_shutdown_pending() : I32 val","title":"sctp_shutdown_pending"},{"location":"net-OSSockOpt/#returns_913","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_received","text":"[Source] fun box sctp_shutdown_received() : I32 val","title":"sctp_shutdown_received"},{"location":"net-OSSockOpt/#returns_914","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_shutdown_sent","text":"[Source] fun box sctp_shutdown_sent() : I32 val","title":"sctp_shutdown_sent"},{"location":"net-OSSockOpt/#returns_915","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_smallest_pmtu","text":"[Source] fun box sctp_smallest_pmtu() : I32 val","title":"sctp_smallest_pmtu"},{"location":"net-OSSockOpt/#returns_916","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_default","text":"[Source] fun box sctp_ss_default() : I32 val","title":"sctp_ss_default"},{"location":"net-OSSockOpt/#returns_917","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_fair_bandwith","text":"[Source] fun box sctp_ss_fair_bandwith() : I32 val","title":"sctp_ss_fair_bandwith"},{"location":"net-OSSockOpt/#returns_918","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_first_come","text":"[Source] fun box sctp_ss_first_come() : I32 val","title":"sctp_ss_first_come"},{"location":"net-OSSockOpt/#returns_919","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_priority","text":"[Source] fun box sctp_ss_priority() : I32 val","title":"sctp_ss_priority"},{"location":"net-OSSockOpt/#returns_920","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_round_robin","text":"[Source] fun box sctp_ss_round_robin() : I32 val","title":"sctp_ss_round_robin"},{"location":"net-OSSockOpt/#returns_921","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_round_robin_packet","text":"[Source] fun box sctp_ss_round_robin_packet() : I32 val","title":"sctp_ss_round_robin_packet"},{"location":"net-OSSockOpt/#returns_922","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_ss_value","text":"[Source] fun box sctp_ss_value() : I32 val","title":"sctp_ss_value"},{"location":"net-OSSockOpt/#returns_923","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_status","text":"[Source] fun box sctp_status() : I32 val","title":"sctp_status"},{"location":"net-OSSockOpt/#returns_924","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_stream_reset","text":"[Source] fun box sctp_stream_reset() : I32 val","title":"sctp_stream_reset"},{"location":"net-OSSockOpt/#returns_925","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_stream_reset_incoming","text":"[Source] fun box sctp_stream_reset_incoming() : I32 val","title":"sctp_stream_reset_incoming"},{"location":"net-OSSockOpt/#returns_926","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_stream_reset_outgoing","text":"[Source] fun box sctp_stream_reset_outgoing() : I32 val","title":"sctp_stream_reset_outgoing"},{"location":"net-OSSockOpt/#returns_927","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_str_logging_enable","text":"[Source] fun box sctp_str_logging_enable() : I32 val","title":"sctp_str_logging_enable"},{"location":"net-OSSockOpt/#returns_928","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_threshold_logging","text":"[Source] fun box sctp_threshold_logging() : I32 val","title":"sctp_threshold_logging"},{"location":"net-OSSockOpt/#returns_929","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_timeouts","text":"[Source] fun box sctp_timeouts() : I32 val","title":"sctp_timeouts"},{"location":"net-OSSockOpt/#returns_930","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_use_ext_rcvinfo","text":"[Source] fun box sctp_use_ext_rcvinfo() : I32 val","title":"sctp_use_ext_rcvinfo"},{"location":"net-OSSockOpt/#returns_931","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_vrf_id","text":"[Source] fun box sctp_vrf_id() : I32 val","title":"sctp_vrf_id"},{"location":"net-OSSockOpt/#returns_932","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sctp_wake_logging_enable","text":"[Source] fun box sctp_wake_logging_enable() : I32 val","title":"sctp_wake_logging_enable"},{"location":"net-OSSockOpt/#returns_933","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_cloexec","text":"[Source] fun box sock_cloexec() : I32 val","title":"sock_cloexec"},{"location":"net-OSSockOpt/#returns_934","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_dgram","text":"[Source] fun box sock_dgram() : I32 val","title":"sock_dgram"},{"location":"net-OSSockOpt/#returns_935","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_maxaddrlen","text":"[Source] fun box sock_maxaddrlen() : I32 val","title":"sock_maxaddrlen"},{"location":"net-OSSockOpt/#returns_936","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_nonblock","text":"[Source] fun box sock_nonblock() : I32 val","title":"sock_nonblock"},{"location":"net-OSSockOpt/#returns_937","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_raw","text":"[Source] fun box sock_raw() : I32 val","title":"sock_raw"},{"location":"net-OSSockOpt/#returns_938","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_rdm","text":"[Source] fun box sock_rdm() : I32 val","title":"sock_rdm"},{"location":"net-OSSockOpt/#returns_939","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_seqpacket","text":"[Source] fun box sock_seqpacket() : I32 val","title":"sock_seqpacket"},{"location":"net-OSSockOpt/#returns_940","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sock_stream","text":"[Source] fun box sock_stream() : I32 val","title":"sock_stream"},{"location":"net-OSSockOpt/#returns_941","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#somaxconn","text":"[Source] fun box somaxconn() : I32 val","title":"somaxconn"},{"location":"net-OSSockOpt/#returns_942","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#sonpx_setoptshut","text":"[Source] fun box sonpx_setoptshut() : I32 val","title":"sonpx_setoptshut"},{"location":"net-OSSockOpt/#returns_943","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_acceptconn","text":"[Source] fun box so_acceptconn() : I32 val","title":"so_acceptconn"},{"location":"net-OSSockOpt/#returns_944","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_acceptfilter","text":"[Source] fun box so_acceptfilter() : I32 val","title":"so_acceptfilter"},{"location":"net-OSSockOpt/#returns_945","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_atmpvc","text":"[Source] fun box so_atmpvc() : I32 val","title":"so_atmpvc"},{"location":"net-OSSockOpt/#returns_946","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_atmqos","text":"[Source] fun box so_atmqos() : I32 val","title":"so_atmqos"},{"location":"net-OSSockOpt/#returns_947","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_atmsap","text":"[Source] fun box so_atmsap() : I32 val","title":"so_atmsap"},{"location":"net-OSSockOpt/#returns_948","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_attach_bpf","text":"[Source] fun box so_attach_bpf() : I32 val","title":"so_attach_bpf"},{"location":"net-OSSockOpt/#returns_949","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_attach_filter","text":"[Source] fun box so_attach_filter() : I32 val","title":"so_attach_filter"},{"location":"net-OSSockOpt/#returns_950","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bindtodevice","text":"[Source] fun box so_bindtodevice() : I32 val","title":"so_bindtodevice"},{"location":"net-OSSockOpt/#returns_951","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bintime","text":"[Source] fun box so_bintime() : I32 val","title":"so_bintime"},{"location":"net-OSSockOpt/#returns_952","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bpf_extensions","text":"[Source] fun box so_bpf_extensions() : I32 val","title":"so_bpf_extensions"},{"location":"net-OSSockOpt/#returns_953","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_broadcast","text":"[Source] fun box so_broadcast() : I32 val","title":"so_broadcast"},{"location":"net-OSSockOpt/#returns_954","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bsdcompat","text":"[Source] fun box so_bsdcompat() : I32 val","title":"so_bsdcompat"},{"location":"net-OSSockOpt/#returns_955","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_bsp_state","text":"[Source] fun box so_bsp_state() : I32 val","title":"so_bsp_state"},{"location":"net-OSSockOpt/#returns_956","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_busy_poll","text":"[Source] fun box so_busy_poll() : I32 val","title":"so_busy_poll"},{"location":"net-OSSockOpt/#returns_957","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_conaccess","text":"[Source] fun box so_conaccess() : I32 val","title":"so_conaccess"},{"location":"net-OSSockOpt/#returns_958","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_condata","text":"[Source] fun box so_condata() : I32 val","title":"so_condata"},{"location":"net-OSSockOpt/#returns_959","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_conditional_accept","text":"[Source] fun box so_conditional_accept() : I32 val","title":"so_conditional_accept"},{"location":"net-OSSockOpt/#returns_960","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_connect_time","text":"[Source] fun box so_connect_time() : I32 val","title":"so_connect_time"},{"location":"net-OSSockOpt/#returns_961","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_debug","text":"[Source] fun box so_debug() : I32 val","title":"so_debug"},{"location":"net-OSSockOpt/#returns_962","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_detach_bpf","text":"[Source] fun box so_detach_bpf() : I32 val","title":"so_detach_bpf"},{"location":"net-OSSockOpt/#returns_963","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_detach_filter","text":"[Source] fun box so_detach_filter() : I32 val","title":"so_detach_filter"},{"location":"net-OSSockOpt/#returns_964","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_domain","text":"[Source] fun box so_domain() : I32 val","title":"so_domain"},{"location":"net-OSSockOpt/#returns_965","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_dontlinger","text":"[Source] fun box so_dontlinger() : I32 val","title":"so_dontlinger"},{"location":"net-OSSockOpt/#returns_966","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_dontroute","text":"[Source] fun box so_dontroute() : I32 val","title":"so_dontroute"},{"location":"net-OSSockOpt/#returns_967","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_donttrunc","text":"[Source] fun box so_donttrunc() : I32 val","title":"so_donttrunc"},{"location":"net-OSSockOpt/#returns_968","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_error","text":"[Source] fun box so_error() : I32 val","title":"so_error"},{"location":"net-OSSockOpt/#returns_969","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_exclusiveaddruse","text":"[Source] fun box so_exclusiveaddruse() : I32 val","title":"so_exclusiveaddruse"},{"location":"net-OSSockOpt/#returns_970","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_get_filter","text":"[Source] fun box so_get_filter() : I32 val","title":"so_get_filter"},{"location":"net-OSSockOpt/#returns_971","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_group_id","text":"[Source] fun box so_group_id() : I32 val","title":"so_group_id"},{"location":"net-OSSockOpt/#returns_972","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_group_priority","text":"[Source] fun box so_group_priority() : I32 val","title":"so_group_priority"},{"location":"net-OSSockOpt/#returns_973","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_hci_raw_direction","text":"[Source] fun box so_hci_raw_direction() : I32 val","title":"so_hci_raw_direction"},{"location":"net-OSSockOpt/#returns_974","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_hci_raw_filter","text":"[Source] fun box so_hci_raw_filter() : I32 val","title":"so_hci_raw_filter"},{"location":"net-OSSockOpt/#returns_975","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_incoming_cpu","text":"[Source] fun box so_incoming_cpu() : I32 val","title":"so_incoming_cpu"},{"location":"net-OSSockOpt/#returns_976","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_keepalive","text":"[Source] fun box so_keepalive() : I32 val","title":"so_keepalive"},{"location":"net-OSSockOpt/#returns_977","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_encrypted","text":"[Source] fun box so_l2cap_encrypted() : I32 val","title":"so_l2cap_encrypted"},{"location":"net-OSSockOpt/#returns_978","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_flush","text":"[Source] fun box so_l2cap_flush() : I32 val","title":"so_l2cap_flush"},{"location":"net-OSSockOpt/#returns_979","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_iflow","text":"[Source] fun box so_l2cap_iflow() : I32 val","title":"so_l2cap_iflow"},{"location":"net-OSSockOpt/#returns_980","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_imtu","text":"[Source] fun box so_l2cap_imtu() : I32 val","title":"so_l2cap_imtu"},{"location":"net-OSSockOpt/#returns_981","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_oflow","text":"[Source] fun box so_l2cap_oflow() : I32 val","title":"so_l2cap_oflow"},{"location":"net-OSSockOpt/#returns_982","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_l2cap_omtu","text":"[Source] fun box so_l2cap_omtu() : I32 val","title":"so_l2cap_omtu"},{"location":"net-OSSockOpt/#returns_983","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_label","text":"[Source] fun box so_label() : I32 val","title":"so_label"},{"location":"net-OSSockOpt/#returns_984","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_linger","text":"[Source] fun box so_linger() : I32 val","title":"so_linger"},{"location":"net-OSSockOpt/#returns_985","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_linger_sec","text":"[Source] fun box so_linger_sec() : I32 val","title":"so_linger_sec"},{"location":"net-OSSockOpt/#returns_986","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_linkinfo","text":"[Source] fun box so_linkinfo() : I32 val","title":"so_linkinfo"},{"location":"net-OSSockOpt/#returns_987","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_listenincqlen","text":"[Source] fun box so_listenincqlen() : I32 val","title":"so_listenincqlen"},{"location":"net-OSSockOpt/#returns_988","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_listenqlen","text":"[Source] fun box so_listenqlen() : I32 val","title":"so_listenqlen"},{"location":"net-OSSockOpt/#returns_989","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_listenqlimit","text":"[Source] fun box so_listenqlimit() : I32 val","title":"so_listenqlimit"},{"location":"net-OSSockOpt/#returns_990","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_lock_filter","text":"[Source] fun box so_lock_filter() : I32 val","title":"so_lock_filter"},{"location":"net-OSSockOpt/#returns_991","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_mark","text":"[Source] fun box so_mark() : I32 val","title":"so_mark"},{"location":"net-OSSockOpt/#returns_992","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_max_msg_size","text":"[Source] fun box so_max_msg_size() : I32 val","title":"so_max_msg_size"},{"location":"net-OSSockOpt/#returns_993","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_max_pacing_rate","text":"[Source] fun box so_max_pacing_rate() : I32 val","title":"so_max_pacing_rate"},{"location":"net-OSSockOpt/#returns_994","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_multipoint","text":"[Source] fun box so_multipoint() : I32 val","title":"so_multipoint"},{"location":"net-OSSockOpt/#returns_995","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_netsvc_marking_level","text":"[Source] fun box so_netsvc_marking_level() : I32 val","title":"so_netsvc_marking_level"},{"location":"net-OSSockOpt/#returns_996","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_net_service_type","text":"[Source] fun box so_net_service_type() : I32 val","title":"so_net_service_type"},{"location":"net-OSSockOpt/#returns_997","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nke","text":"[Source] fun box so_nke() : I32 val","title":"so_nke"},{"location":"net-OSSockOpt/#returns_998","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_noaddrerr","text":"[Source] fun box so_noaddrerr() : I32 val","title":"so_noaddrerr"},{"location":"net-OSSockOpt/#returns_999","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nofcs","text":"[Source] fun box so_nofcs() : I32 val","title":"so_nofcs"},{"location":"net-OSSockOpt/#returns_1000","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nosigpipe","text":"[Source] fun box so_nosigpipe() : I32 val","title":"so_nosigpipe"},{"location":"net-OSSockOpt/#returns_1001","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_notifyconflict","text":"[Source] fun box so_notifyconflict() : I32 val","title":"so_notifyconflict"},{"location":"net-OSSockOpt/#returns_1002","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_no_check","text":"[Source] fun box so_no_check() : I32 val","title":"so_no_check"},{"location":"net-OSSockOpt/#returns_1003","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_no_ddp","text":"[Source] fun box so_no_ddp() : I32 val","title":"so_no_ddp"},{"location":"net-OSSockOpt/#returns_1004","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_no_offload","text":"[Source] fun box so_no_offload() : I32 val","title":"so_no_offload"},{"location":"net-OSSockOpt/#returns_1005","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_np_extensions","text":"[Source] fun box so_np_extensions() : I32 val","title":"so_np_extensions"},{"location":"net-OSSockOpt/#returns_1006","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nread","text":"[Source] fun box so_nread() : I32 val","title":"so_nread"},{"location":"net-OSSockOpt/#returns_1007","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_numrcvpkt","text":"[Source] fun box so_numrcvpkt() : I32 val","title":"so_numrcvpkt"},{"location":"net-OSSockOpt/#returns_1008","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_nwrite","text":"[Source] fun box so_nwrite() : I32 val","title":"so_nwrite"},{"location":"net-OSSockOpt/#returns_1009","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_oobinline","text":"[Source] fun box so_oobinline() : I32 val","title":"so_oobinline"},{"location":"net-OSSockOpt/#returns_1010","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_original_dst","text":"[Source] fun box so_original_dst() : I32 val","title":"so_original_dst"},{"location":"net-OSSockOpt/#returns_1011","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_passcred","text":"[Source] fun box so_passcred() : I32 val","title":"so_passcred"},{"location":"net-OSSockOpt/#returns_1012","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_passsec","text":"[Source] fun box so_passsec() : I32 val","title":"so_passsec"},{"location":"net-OSSockOpt/#returns_1013","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peek_off","text":"[Source] fun box so_peek_off() : I32 val","title":"so_peek_off"},{"location":"net-OSSockOpt/#returns_1014","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peercred","text":"[Source] fun box so_peercred() : I32 val","title":"so_peercred"},{"location":"net-OSSockOpt/#returns_1015","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peerlabel","text":"[Source] fun box so_peerlabel() : I32 val","title":"so_peerlabel"},{"location":"net-OSSockOpt/#returns_1016","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peername","text":"[Source] fun box so_peername() : I32 val","title":"so_peername"},{"location":"net-OSSockOpt/#returns_1017","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_peersec","text":"[Source] fun box so_peersec() : I32 val","title":"so_peersec"},{"location":"net-OSSockOpt/#returns_1018","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_port_scalability","text":"[Source] fun box so_port_scalability() : I32 val","title":"so_port_scalability"},{"location":"net-OSSockOpt/#returns_1019","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_priority","text":"[Source] fun box so_priority() : I32 val","title":"so_priority"},{"location":"net-OSSockOpt/#returns_1020","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_protocol","text":"[Source] fun box so_protocol() : I32 val","title":"so_protocol"},{"location":"net-OSSockOpt/#returns_1021","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_protocol_info","text":"[Source] fun box so_protocol_info() : I32 val","title":"so_protocol_info"},{"location":"net-OSSockOpt/#returns_1022","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_prototype","text":"[Source] fun box so_prototype() : I32 val","title":"so_prototype"},{"location":"net-OSSockOpt/#returns_1023","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_proxyusr","text":"[Source] fun box so_proxyusr() : I32 val","title":"so_proxyusr"},{"location":"net-OSSockOpt/#returns_1024","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_randomport","text":"[Source] fun box so_randomport() : I32 val","title":"so_randomport"},{"location":"net-OSSockOpt/#returns_1025","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvbuf","text":"[Source] fun box so_rcvbuf() : I32 val","title":"so_rcvbuf"},{"location":"net-OSSockOpt/#returns_1026","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvbufforce","text":"[Source] fun box so_rcvbufforce() : I32 val","title":"so_rcvbufforce"},{"location":"net-OSSockOpt/#returns_1027","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvlowat","text":"[Source] fun box so_rcvlowat() : I32 val","title":"so_rcvlowat"},{"location":"net-OSSockOpt/#returns_1028","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rcvtimeo","text":"[Source] fun box so_rcvtimeo() : I32 val","title":"so_rcvtimeo"},{"location":"net-OSSockOpt/#returns_1029","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rds_transport","text":"[Source] fun box so_rds_transport() : I32 val","title":"so_rds_transport"},{"location":"net-OSSockOpt/#returns_1030","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_reuseaddr","text":"[Source] fun box so_reuseaddr() : I32 val","title":"so_reuseaddr"},{"location":"net-OSSockOpt/#returns_1031","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_reuseport","text":"[Source] fun box so_reuseport() : I32 val","title":"so_reuseport"},{"location":"net-OSSockOpt/#returns_1032","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_reuseshareuid","text":"[Source] fun box so_reuseshareuid() : I32 val","title":"so_reuseshareuid"},{"location":"net-OSSockOpt/#returns_1033","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rfcomm_fc_info","text":"[Source] fun box so_rfcomm_fc_info() : I32 val","title":"so_rfcomm_fc_info"},{"location":"net-OSSockOpt/#returns_1034","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rfcomm_mtu","text":"[Source] fun box so_rfcomm_mtu() : I32 val","title":"so_rfcomm_mtu"},{"location":"net-OSSockOpt/#returns_1035","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_rxq_ovfl","text":"[Source] fun box so_rxq_ovfl() : I32 val","title":"so_rxq_ovfl"},{"location":"net-OSSockOpt/#returns_1036","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sco_conninfo","text":"[Source] fun box so_sco_conninfo() : I32 val","title":"so_sco_conninfo"},{"location":"net-OSSockOpt/#returns_1037","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sco_mtu","text":"[Source] fun box so_sco_mtu() : I32 val","title":"so_sco_mtu"},{"location":"net-OSSockOpt/#returns_1038","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_security_authentication","text":"[Source] fun box so_security_authentication() : I32 val","title":"so_security_authentication"},{"location":"net-OSSockOpt/#returns_1039","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_security_encryption_network","text":"[Source] fun box so_security_encryption_network() : I32 val","title":"so_security_encryption_network"},{"location":"net-OSSockOpt/#returns_1040","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_security_encryption_transport","text":"[Source] fun box so_security_encryption_transport() : I32 val","title":"so_security_encryption_transport"},{"location":"net-OSSockOpt/#returns_1041","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_select_err_queue","text":"[Source] fun box so_select_err_queue() : I32 val","title":"so_select_err_queue"},{"location":"net-OSSockOpt/#returns_1042","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_setclp","text":"[Source] fun box so_setclp() : I32 val","title":"so_setclp"},{"location":"net-OSSockOpt/#returns_1043","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_setfib","text":"[Source] fun box so_setfib() : I32 val","title":"so_setfib"},{"location":"net-OSSockOpt/#returns_1044","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndbuf","text":"[Source] fun box so_sndbuf() : I32 val","title":"so_sndbuf"},{"location":"net-OSSockOpt/#returns_1045","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndbufforce","text":"[Source] fun box so_sndbufforce() : I32 val","title":"so_sndbufforce"},{"location":"net-OSSockOpt/#returns_1046","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndlowat","text":"[Source] fun box so_sndlowat() : I32 val","title":"so_sndlowat"},{"location":"net-OSSockOpt/#returns_1047","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_sndtimeo","text":"[Source] fun box so_sndtimeo() : I32 val","title":"so_sndtimeo"},{"location":"net-OSSockOpt/#returns_1048","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestamp","text":"[Source] fun box so_timestamp() : I32 val","title":"so_timestamp"},{"location":"net-OSSockOpt/#returns_1049","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestamping","text":"[Source] fun box so_timestamping() : I32 val","title":"so_timestamping"},{"location":"net-OSSockOpt/#returns_1050","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestampns","text":"[Source] fun box so_timestampns() : I32 val","title":"so_timestampns"},{"location":"net-OSSockOpt/#returns_1051","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_timestamp_monotonic","text":"[Source] fun box so_timestamp_monotonic() : I32 val","title":"so_timestamp_monotonic"},{"location":"net-OSSockOpt/#returns_1052","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_type","text":"[Source] fun box so_type() : I32 val","title":"so_type"},{"location":"net-OSSockOpt/#returns_1053","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_upcallclosewait","text":"[Source] fun box so_upcallclosewait() : I32 val","title":"so_upcallclosewait"},{"location":"net-OSSockOpt/#returns_1054","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_update_accept_context","text":"[Source] fun box so_update_accept_context() : I32 val","title":"so_update_accept_context"},{"location":"net-OSSockOpt/#returns_1055","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_useloopback","text":"[Source] fun box so_useloopback() : I32 val","title":"so_useloopback"},{"location":"net-OSSockOpt/#returns_1056","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_user_cookie","text":"[Source] fun box so_user_cookie() : I32 val","title":"so_user_cookie"},{"location":"net-OSSockOpt/#returns_1057","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vendor","text":"[Source] fun box so_vendor() : I32 val","title":"so_vendor"},{"location":"net-OSSockOpt/#returns_1058","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_max_size","text":"[Source] fun box so_vm_sockets_buffer_max_size() : I32 val","title":"so_vm_sockets_buffer_max_size"},{"location":"net-OSSockOpt/#returns_1059","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_min_size","text":"[Source] fun box so_vm_sockets_buffer_min_size() : I32 val","title":"so_vm_sockets_buffer_min_size"},{"location":"net-OSSockOpt/#returns_1060","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_buffer_size","text":"[Source] fun box so_vm_sockets_buffer_size() : I32 val","title":"so_vm_sockets_buffer_size"},{"location":"net-OSSockOpt/#returns_1061","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_connect_timeout","text":"[Source] fun box so_vm_sockets_connect_timeout() : I32 val","title":"so_vm_sockets_connect_timeout"},{"location":"net-OSSockOpt/#returns_1062","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_nonblock_txrx","text":"[Source] fun box so_vm_sockets_nonblock_txrx() : I32 val","title":"so_vm_sockets_nonblock_txrx"},{"location":"net-OSSockOpt/#returns_1063","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_peer_host_vm_id","text":"[Source] fun box so_vm_sockets_peer_host_vm_id() : I32 val","title":"so_vm_sockets_peer_host_vm_id"},{"location":"net-OSSockOpt/#returns_1064","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_vm_sockets_trusted","text":"[Source] fun box so_vm_sockets_trusted() : I32 val","title":"so_vm_sockets_trusted"},{"location":"net-OSSockOpt/#returns_1065","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_wantmore","text":"[Source] fun box so_wantmore() : I32 val","title":"so_wantmore"},{"location":"net-OSSockOpt/#returns_1066","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_wantoobflag","text":"[Source] fun box so_wantoobflag() : I32 val","title":"so_wantoobflag"},{"location":"net-OSSockOpt/#returns_1067","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#so_wifi_status","text":"[Source] fun box so_wifi_status() : I32 val","title":"so_wifi_status"},{"location":"net-OSSockOpt/#returns_1068","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp6_mss","text":"[Source] fun box tcp6_mss() : I32 val","title":"tcp6_mss"},{"location":"net-OSSockOpt/#returns_1069","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_flag_lossrecovery","text":"[Source] fun box tcpci_flag_lossrecovery() : I32 val","title":"tcpci_flag_lossrecovery"},{"location":"net-OSSockOpt/#returns_1070","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_flag_reordering_detected","text":"[Source] fun box tcpci_flag_reordering_detected() : I32 val","title":"tcpci_flag_reordering_detected"},{"location":"net-OSSockOpt/#returns_1071","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_ecn","text":"[Source] fun box tcpci_opt_ecn() : I32 val","title":"tcpci_opt_ecn"},{"location":"net-OSSockOpt/#returns_1072","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_sack","text":"[Source] fun box tcpci_opt_sack() : I32 val","title":"tcpci_opt_sack"},{"location":"net-OSSockOpt/#returns_1073","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_timestamps","text":"[Source] fun box tcpci_opt_timestamps() : I32 val","title":"tcpci_opt_timestamps"},{"location":"net-OSSockOpt/#returns_1074","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpci_opt_wscale","text":"[Source] fun box tcpci_opt_wscale() : I32 val","title":"tcpci_opt_wscale"},{"location":"net-OSSockOpt/#returns_1075","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_cwr","text":"[Source] fun box tcpf_ca_cwr() : I32 val","title":"tcpf_ca_cwr"},{"location":"net-OSSockOpt/#returns_1076","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_disorder","text":"[Source] fun box tcpf_ca_disorder() : I32 val","title":"tcpf_ca_disorder"},{"location":"net-OSSockOpt/#returns_1077","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_loss","text":"[Source] fun box tcpf_ca_loss() : I32 val","title":"tcpf_ca_loss"},{"location":"net-OSSockOpt/#returns_1078","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_open","text":"[Source] fun box tcpf_ca_open() : I32 val","title":"tcpf_ca_open"},{"location":"net-OSSockOpt/#returns_1079","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpf_ca_recovery","text":"[Source] fun box tcpf_ca_recovery() : I32 val","title":"tcpf_ca_recovery"},{"location":"net-OSSockOpt/#returns_1080","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_ecn","text":"[Source] fun box tcpi_opt_ecn() : I32 val","title":"tcpi_opt_ecn"},{"location":"net-OSSockOpt/#returns_1081","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_ecn_seen","text":"[Source] fun box tcpi_opt_ecn_seen() : I32 val","title":"tcpi_opt_ecn_seen"},{"location":"net-OSSockOpt/#returns_1082","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_sack","text":"[Source] fun box tcpi_opt_sack() : I32 val","title":"tcpi_opt_sack"},{"location":"net-OSSockOpt/#returns_1083","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_syn_data","text":"[Source] fun box tcpi_opt_syn_data() : I32 val","title":"tcpi_opt_syn_data"},{"location":"net-OSSockOpt/#returns_1084","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_timestamps","text":"[Source] fun box tcpi_opt_timestamps() : I32 val","title":"tcpi_opt_timestamps"},{"location":"net-OSSockOpt/#returns_1085","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_toe","text":"[Source] fun box tcpi_opt_toe() : I32 val","title":"tcpi_opt_toe"},{"location":"net-OSSockOpt/#returns_1086","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpi_opt_wscale","text":"[Source] fun box tcpi_opt_wscale() : I32 val","title":"tcpi_opt_wscale"},{"location":"net-OSSockOpt/#returns_1087","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_cc","text":"[Source] fun box tcpolen_cc() : I32 val","title":"tcpolen_cc"},{"location":"net-OSSockOpt/#returns_1088","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_cc_appa","text":"[Source] fun box tcpolen_cc_appa() : I32 val","title":"tcpolen_cc_appa"},{"location":"net-OSSockOpt/#returns_1089","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_eol","text":"[Source] fun box tcpolen_eol() : I32 val","title":"tcpolen_eol"},{"location":"net-OSSockOpt/#returns_1090","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fastopen_req","text":"[Source] fun box tcpolen_fastopen_req() : I32 val","title":"tcpolen_fastopen_req"},{"location":"net-OSSockOpt/#returns_1091","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fast_open_empty","text":"[Source] fun box tcpolen_fast_open_empty() : I32 val","title":"tcpolen_fast_open_empty"},{"location":"net-OSSockOpt/#returns_1092","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fast_open_max","text":"[Source] fun box tcpolen_fast_open_max() : I32 val","title":"tcpolen_fast_open_max"},{"location":"net-OSSockOpt/#returns_1093","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_fast_open_min","text":"[Source] fun box tcpolen_fast_open_min() : I32 val","title":"tcpolen_fast_open_min"},{"location":"net-OSSockOpt/#returns_1094","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_maxseg","text":"[Source] fun box tcpolen_maxseg() : I32 val","title":"tcpolen_maxseg"},{"location":"net-OSSockOpt/#returns_1095","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_nop","text":"[Source] fun box tcpolen_nop() : I32 val","title":"tcpolen_nop"},{"location":"net-OSSockOpt/#returns_1096","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_pad","text":"[Source] fun box tcpolen_pad() : I32 val","title":"tcpolen_pad"},{"location":"net-OSSockOpt/#returns_1097","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_sack","text":"[Source] fun box tcpolen_sack() : I32 val","title":"tcpolen_sack"},{"location":"net-OSSockOpt/#returns_1098","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_sackhdr","text":"[Source] fun box tcpolen_sackhdr() : I32 val","title":"tcpolen_sackhdr"},{"location":"net-OSSockOpt/#returns_1099","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_sack_permitted","text":"[Source] fun box tcpolen_sack_permitted() : I32 val","title":"tcpolen_sack_permitted"},{"location":"net-OSSockOpt/#returns_1100","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_signature","text":"[Source] fun box tcpolen_signature() : I32 val","title":"tcpolen_signature"},{"location":"net-OSSockOpt/#returns_1101","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_timestamp","text":"[Source] fun box tcpolen_timestamp() : I32 val","title":"tcpolen_timestamp"},{"location":"net-OSSockOpt/#returns_1102","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_tstamp_appa","text":"[Source] fun box tcpolen_tstamp_appa() : I32 val","title":"tcpolen_tstamp_appa"},{"location":"net-OSSockOpt/#returns_1103","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpolen_window","text":"[Source] fun box tcpolen_window() : I32 val","title":"tcpolen_window"},{"location":"net-OSSockOpt/#returns_1104","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_cc","text":"[Source] fun box tcpopt_cc() : I32 val","title":"tcpopt_cc"},{"location":"net-OSSockOpt/#returns_1105","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_ccecho","text":"[Source] fun box tcpopt_ccecho() : I32 val","title":"tcpopt_ccecho"},{"location":"net-OSSockOpt/#returns_1106","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_ccnew","text":"[Source] fun box tcpopt_ccnew() : I32 val","title":"tcpopt_ccnew"},{"location":"net-OSSockOpt/#returns_1107","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_eol","text":"[Source] fun box tcpopt_eol() : I32 val","title":"tcpopt_eol"},{"location":"net-OSSockOpt/#returns_1108","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_fastopen","text":"[Source] fun box tcpopt_fastopen() : I32 val","title":"tcpopt_fastopen"},{"location":"net-OSSockOpt/#returns_1109","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_fast_open","text":"[Source] fun box tcpopt_fast_open() : I32 val","title":"tcpopt_fast_open"},{"location":"net-OSSockOpt/#returns_1110","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_maxseg","text":"[Source] fun box tcpopt_maxseg() : I32 val","title":"tcpopt_maxseg"},{"location":"net-OSSockOpt/#returns_1111","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_multipath","text":"[Source] fun box tcpopt_multipath() : I32 val","title":"tcpopt_multipath"},{"location":"net-OSSockOpt/#returns_1112","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_nop","text":"[Source] fun box tcpopt_nop() : I32 val","title":"tcpopt_nop"},{"location":"net-OSSockOpt/#returns_1113","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_pad","text":"[Source] fun box tcpopt_pad() : I32 val","title":"tcpopt_pad"},{"location":"net-OSSockOpt/#returns_1114","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack","text":"[Source] fun box tcpopt_sack() : I32 val","title":"tcpopt_sack"},{"location":"net-OSSockOpt/#returns_1115","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack_hdr","text":"[Source] fun box tcpopt_sack_hdr() : I32 val","title":"tcpopt_sack_hdr"},{"location":"net-OSSockOpt/#returns_1116","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack_permitted","text":"[Source] fun box tcpopt_sack_permitted() : I32 val","title":"tcpopt_sack_permitted"},{"location":"net-OSSockOpt/#returns_1117","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_sack_permit_hdr","text":"[Source] fun box tcpopt_sack_permit_hdr() : I32 val","title":"tcpopt_sack_permit_hdr"},{"location":"net-OSSockOpt/#returns_1118","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_signature","text":"[Source] fun box tcpopt_signature() : I32 val","title":"tcpopt_signature"},{"location":"net-OSSockOpt/#returns_1119","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_timestamp","text":"[Source] fun box tcpopt_timestamp() : I32 val","title":"tcpopt_timestamp"},{"location":"net-OSSockOpt/#returns_1120","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_tstamp_hdr","text":"[Source] fun box tcpopt_tstamp_hdr() : I32 val","title":"tcpopt_tstamp_hdr"},{"location":"net-OSSockOpt/#returns_1121","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcpopt_window","text":"[Source] fun box tcpopt_window() : I32 val","title":"tcpopt_window"},{"location":"net-OSSockOpt/#returns_1122","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_ca_name_max","text":"[Source] fun box tcp_ca_name_max() : I32 val","title":"tcp_ca_name_max"},{"location":"net-OSSockOpt/#returns_1123","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_ccalgoopt","text":"[Source] fun box tcp_ccalgoopt() : I32 val","title":"tcp_ccalgoopt"},{"location":"net-OSSockOpt/#returns_1124","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cc_info","text":"[Source] fun box tcp_cc_info() : I32 val","title":"tcp_cc_info"},{"location":"net-OSSockOpt/#returns_1125","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_congestion","text":"[Source] fun box tcp_congestion() : I32 val","title":"tcp_congestion"},{"location":"net-OSSockOpt/#returns_1126","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_connectiontimeout","text":"[Source] fun box tcp_connectiontimeout() : I32 val","title":"tcp_connectiontimeout"},{"location":"net-OSSockOpt/#returns_1127","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_connection_info","text":"[Source] fun box tcp_connection_info() : I32 val","title":"tcp_connection_info"},{"location":"net-OSSockOpt/#returns_1128","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_in_always","text":"[Source] fun box tcp_cookie_in_always() : I32 val","title":"tcp_cookie_in_always"},{"location":"net-OSSockOpt/#returns_1129","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_max","text":"[Source] fun box tcp_cookie_max() : I32 val","title":"tcp_cookie_max"},{"location":"net-OSSockOpt/#returns_1130","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_min","text":"[Source] fun box tcp_cookie_min() : I32 val","title":"tcp_cookie_min"},{"location":"net-OSSockOpt/#returns_1131","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_out_never","text":"[Source] fun box tcp_cookie_out_never() : I32 val","title":"tcp_cookie_out_never"},{"location":"net-OSSockOpt/#returns_1132","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_pair_size","text":"[Source] fun box tcp_cookie_pair_size() : I32 val","title":"tcp_cookie_pair_size"},{"location":"net-OSSockOpt/#returns_1133","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cookie_transactions","text":"[Source] fun box tcp_cookie_transactions() : I32 val","title":"tcp_cookie_transactions"},{"location":"net-OSSockOpt/#returns_1134","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_cork","text":"[Source] fun box tcp_cork() : I32 val","title":"tcp_cork"},{"location":"net-OSSockOpt/#returns_1135","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_defer_accept","text":"[Source] fun box tcp_defer_accept() : I32 val","title":"tcp_defer_accept"},{"location":"net-OSSockOpt/#returns_1136","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_enable_ecn","text":"[Source] fun box tcp_enable_ecn() : I32 val","title":"tcp_enable_ecn"},{"location":"net-OSSockOpt/#returns_1137","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_fastopen","text":"[Source] fun box tcp_fastopen() : I32 val","title":"tcp_fastopen"},{"location":"net-OSSockOpt/#returns_1138","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_function_blk","text":"[Source] fun box tcp_function_blk() : I32 val","title":"tcp_function_blk"},{"location":"net-OSSockOpt/#returns_1139","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_function_name_len_max","text":"[Source] fun box tcp_function_name_len_max() : I32 val","title":"tcp_function_name_len_max"},{"location":"net-OSSockOpt/#returns_1140","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_info","text":"[Source] fun box tcp_info() : I32 val","title":"tcp_info"},{"location":"net-OSSockOpt/#returns_1141","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepalive","text":"[Source] fun box tcp_keepalive() : I32 val","title":"tcp_keepalive"},{"location":"net-OSSockOpt/#returns_1142","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepcnt","text":"[Source] fun box tcp_keepcnt() : I32 val","title":"tcp_keepcnt"},{"location":"net-OSSockOpt/#returns_1143","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepidle","text":"[Source] fun box tcp_keepidle() : I32 val","title":"tcp_keepidle"},{"location":"net-OSSockOpt/#returns_1144","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepinit","text":"[Source] fun box tcp_keepinit() : I32 val","title":"tcp_keepinit"},{"location":"net-OSSockOpt/#returns_1145","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_keepintvl","text":"[Source] fun box tcp_keepintvl() : I32 val","title":"tcp_keepintvl"},{"location":"net-OSSockOpt/#returns_1146","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_linger2","text":"[Source] fun box tcp_linger2() : I32 val","title":"tcp_linger2"},{"location":"net-OSSockOpt/#returns_1147","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxburst","text":"[Source] fun box tcp_maxburst() : I32 val","title":"tcp_maxburst"},{"location":"net-OSSockOpt/#returns_1148","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxhlen","text":"[Source] fun box tcp_maxhlen() : I32 val","title":"tcp_maxhlen"},{"location":"net-OSSockOpt/#returns_1149","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxolen","text":"[Source] fun box tcp_maxolen() : I32 val","title":"tcp_maxolen"},{"location":"net-OSSockOpt/#returns_1150","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxseg","text":"[Source] fun box tcp_maxseg() : I32 val","title":"tcp_maxseg"},{"location":"net-OSSockOpt/#returns_1151","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_maxwin","text":"[Source] fun box tcp_maxwin() : I32 val","title":"tcp_maxwin"},{"location":"net-OSSockOpt/#returns_1152","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_max_sack","text":"[Source] fun box tcp_max_sack() : I32 val","title":"tcp_max_sack"},{"location":"net-OSSockOpt/#returns_1153","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_max_winshift","text":"[Source] fun box tcp_max_winshift() : I32 val","title":"tcp_max_winshift"},{"location":"net-OSSockOpt/#returns_1154","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_md5sig","text":"[Source] fun box tcp_md5sig() : I32 val","title":"tcp_md5sig"},{"location":"net-OSSockOpt/#returns_1155","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_md5sig_maxkeylen","text":"[Source] fun box tcp_md5sig_maxkeylen() : I32 val","title":"tcp_md5sig_maxkeylen"},{"location":"net-OSSockOpt/#returns_1156","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_minmss","text":"[Source] fun box tcp_minmss() : I32 val","title":"tcp_minmss"},{"location":"net-OSSockOpt/#returns_1157","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_mss","text":"[Source] fun box tcp_mss() : I32 val","title":"tcp_mss"},{"location":"net-OSSockOpt/#returns_1158","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_mss_default","text":"[Source] fun box tcp_mss_default() : I32 val","title":"tcp_mss_default"},{"location":"net-OSSockOpt/#returns_1159","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_mss_desired","text":"[Source] fun box tcp_mss_desired() : I32 val","title":"tcp_mss_desired"},{"location":"net-OSSockOpt/#returns_1160","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_nodelay","text":"[Source] fun box tcp_nodelay() : I32 val","title":"tcp_nodelay"},{"location":"net-OSSockOpt/#returns_1161","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_noopt","text":"[Source] fun box tcp_noopt() : I32 val","title":"tcp_noopt"},{"location":"net-OSSockOpt/#returns_1162","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_nopush","text":"[Source] fun box tcp_nopush() : I32 val","title":"tcp_nopush"},{"location":"net-OSSockOpt/#returns_1163","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_notsent_lowat","text":"[Source] fun box tcp_notsent_lowat() : I32 val","title":"tcp_notsent_lowat"},{"location":"net-OSSockOpt/#returns_1164","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_pcap_in","text":"[Source] fun box tcp_pcap_in() : I32 val","title":"tcp_pcap_in"},{"location":"net-OSSockOpt/#returns_1165","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_pcap_out","text":"[Source] fun box tcp_pcap_out() : I32 val","title":"tcp_pcap_out"},{"location":"net-OSSockOpt/#returns_1166","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_queue_seq","text":"[Source] fun box tcp_queue_seq() : I32 val","title":"tcp_queue_seq"},{"location":"net-OSSockOpt/#returns_1167","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_quickack","text":"[Source] fun box tcp_quickack() : I32 val","title":"tcp_quickack"},{"location":"net-OSSockOpt/#returns_1168","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_repair","text":"[Source] fun box tcp_repair() : I32 val","title":"tcp_repair"},{"location":"net-OSSockOpt/#returns_1169","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_repair_options","text":"[Source] fun box tcp_repair_options() : I32 val","title":"tcp_repair_options"},{"location":"net-OSSockOpt/#returns_1170","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_repair_queue","text":"[Source] fun box tcp_repair_queue() : I32 val","title":"tcp_repair_queue"},{"location":"net-OSSockOpt/#returns_1171","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_rxt_conndroptime","text":"[Source] fun box tcp_rxt_conndroptime() : I32 val","title":"tcp_rxt_conndroptime"},{"location":"net-OSSockOpt/#returns_1172","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_rxt_findrop","text":"[Source] fun box tcp_rxt_findrop() : I32 val","title":"tcp_rxt_findrop"},{"location":"net-OSSockOpt/#returns_1173","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_saved_syn","text":"[Source] fun box tcp_saved_syn() : I32 val","title":"tcp_saved_syn"},{"location":"net-OSSockOpt/#returns_1174","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_save_syn","text":"[Source] fun box tcp_save_syn() : I32 val","title":"tcp_save_syn"},{"location":"net-OSSockOpt/#returns_1175","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_sendmoreacks","text":"[Source] fun box tcp_sendmoreacks() : I32 val","title":"tcp_sendmoreacks"},{"location":"net-OSSockOpt/#returns_1176","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_syncnt","text":"[Source] fun box tcp_syncnt() : I32 val","title":"tcp_syncnt"},{"location":"net-OSSockOpt/#returns_1177","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_s_data_in","text":"[Source] fun box tcp_s_data_in() : I32 val","title":"tcp_s_data_in"},{"location":"net-OSSockOpt/#returns_1178","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_s_data_out","text":"[Source] fun box tcp_s_data_out() : I32 val","title":"tcp_s_data_out"},{"location":"net-OSSockOpt/#returns_1179","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_thin_dupack","text":"[Source] fun box tcp_thin_dupack() : I32 val","title":"tcp_thin_dupack"},{"location":"net-OSSockOpt/#returns_1180","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_thin_linear_timeouts","text":"[Source] fun box tcp_thin_linear_timeouts() : I32 val","title":"tcp_thin_linear_timeouts"},{"location":"net-OSSockOpt/#returns_1181","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_timestamp","text":"[Source] fun box tcp_timestamp() : I32 val","title":"tcp_timestamp"},{"location":"net-OSSockOpt/#returns_1182","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_user_timeout","text":"[Source] fun box tcp_user_timeout() : I32 val","title":"tcp_user_timeout"},{"location":"net-OSSockOpt/#returns_1183","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_vendor","text":"[Source] fun box tcp_vendor() : I32 val","title":"tcp_vendor"},{"location":"net-OSSockOpt/#returns_1184","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tcp_window_clamp","text":"[Source] fun box tcp_window_clamp() : I32 val","title":"tcp_window_clamp"},{"location":"net-OSSockOpt/#returns_1185","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_id","text":"[Source] fun box tipc_addr_id() : I32 val","title":"tipc_addr_id"},{"location":"net-OSSockOpt/#returns_1186","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_mcast","text":"[Source] fun box tipc_addr_mcast() : I32 val","title":"tipc_addr_mcast"},{"location":"net-OSSockOpt/#returns_1187","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_name","text":"[Source] fun box tipc_addr_name() : I32 val","title":"tipc_addr_name"},{"location":"net-OSSockOpt/#returns_1188","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_addr_nameseq","text":"[Source] fun box tipc_addr_nameseq() : I32 val","title":"tipc_addr_nameseq"},{"location":"net-OSSockOpt/#returns_1189","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_cfg_srv","text":"[Source] fun box tipc_cfg_srv() : I32 val","title":"tipc_cfg_srv"},{"location":"net-OSSockOpt/#returns_1190","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_cluster_scope","text":"[Source] fun box tipc_cluster_scope() : I32 val","title":"tipc_cluster_scope"},{"location":"net-OSSockOpt/#returns_1191","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_conn_shutdown","text":"[Source] fun box tipc_conn_shutdown() : I32 val","title":"tipc_conn_shutdown"},{"location":"net-OSSockOpt/#returns_1192","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_conn_timeout","text":"[Source] fun box tipc_conn_timeout() : I32 val","title":"tipc_conn_timeout"},{"location":"net-OSSockOpt/#returns_1193","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_critical_importance","text":"[Source] fun box tipc_critical_importance() : I32 val","title":"tipc_critical_importance"},{"location":"net-OSSockOpt/#returns_1194","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_destname","text":"[Source] fun box tipc_destname() : I32 val","title":"tipc_destname"},{"location":"net-OSSockOpt/#returns_1195","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_dest_droppable","text":"[Source] fun box tipc_dest_droppable() : I32 val","title":"tipc_dest_droppable"},{"location":"net-OSSockOpt/#returns_1196","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_errinfo","text":"[Source] fun box tipc_errinfo() : I32 val","title":"tipc_errinfo"},{"location":"net-OSSockOpt/#returns_1197","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_no_name","text":"[Source] fun box tipc_err_no_name() : I32 val","title":"tipc_err_no_name"},{"location":"net-OSSockOpt/#returns_1198","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_no_node","text":"[Source] fun box tipc_err_no_node() : I32 val","title":"tipc_err_no_node"},{"location":"net-OSSockOpt/#returns_1199","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_no_port","text":"[Source] fun box tipc_err_no_port() : I32 val","title":"tipc_err_no_port"},{"location":"net-OSSockOpt/#returns_1200","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_err_overload","text":"[Source] fun box tipc_err_overload() : I32 val","title":"tipc_err_overload"},{"location":"net-OSSockOpt/#returns_1201","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_high_importance","text":"[Source] fun box tipc_high_importance() : I32 val","title":"tipc_high_importance"},{"location":"net-OSSockOpt/#returns_1202","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_importance","text":"[Source] fun box tipc_importance() : I32 val","title":"tipc_importance"},{"location":"net-OSSockOpt/#returns_1203","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_link_state","text":"[Source] fun box tipc_link_state() : I32 val","title":"tipc_link_state"},{"location":"net-OSSockOpt/#returns_1204","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_low_importance","text":"[Source] fun box tipc_low_importance() : I32 val","title":"tipc_low_importance"},{"location":"net-OSSockOpt/#returns_1205","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_bearer_name","text":"[Source] fun box tipc_max_bearer_name() : I32 val","title":"tipc_max_bearer_name"},{"location":"net-OSSockOpt/#returns_1206","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_if_name","text":"[Source] fun box tipc_max_if_name() : I32 val","title":"tipc_max_if_name"},{"location":"net-OSSockOpt/#returns_1207","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_link_name","text":"[Source] fun box tipc_max_link_name() : I32 val","title":"tipc_max_link_name"},{"location":"net-OSSockOpt/#returns_1208","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_media_name","text":"[Source] fun box tipc_max_media_name() : I32 val","title":"tipc_max_media_name"},{"location":"net-OSSockOpt/#returns_1209","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_max_user_msg_size","text":"[Source] fun box tipc_max_user_msg_size() : I32 val","title":"tipc_max_user_msg_size"},{"location":"net-OSSockOpt/#returns_1210","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_medium_importance","text":"[Source] fun box tipc_medium_importance() : I32 val","title":"tipc_medium_importance"},{"location":"net-OSSockOpt/#returns_1211","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_node_recvq_depth","text":"[Source] fun box tipc_node_recvq_depth() : I32 val","title":"tipc_node_recvq_depth"},{"location":"net-OSSockOpt/#returns_1212","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_node_scope","text":"[Source] fun box tipc_node_scope() : I32 val","title":"tipc_node_scope"},{"location":"net-OSSockOpt/#returns_1213","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_ok","text":"[Source] fun box tipc_ok() : I32 val","title":"tipc_ok"},{"location":"net-OSSockOpt/#returns_1214","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_published","text":"[Source] fun box tipc_published() : I32 val","title":"tipc_published"},{"location":"net-OSSockOpt/#returns_1215","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_reserved_types","text":"[Source] fun box tipc_reserved_types() : I32 val","title":"tipc_reserved_types"},{"location":"net-OSSockOpt/#returns_1216","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_retdata","text":"[Source] fun box tipc_retdata() : I32 val","title":"tipc_retdata"},{"location":"net-OSSockOpt/#returns_1217","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sock_recvq_depth","text":"[Source] fun box tipc_sock_recvq_depth() : I32 val","title":"tipc_sock_recvq_depth"},{"location":"net-OSSockOpt/#returns_1218","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_src_droppable","text":"[Source] fun box tipc_src_droppable() : I32 val","title":"tipc_src_droppable"},{"location":"net-OSSockOpt/#returns_1219","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_subscr_timeout","text":"[Source] fun box tipc_subscr_timeout() : I32 val","title":"tipc_subscr_timeout"},{"location":"net-OSSockOpt/#returns_1220","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sub_cancel","text":"[Source] fun box tipc_sub_cancel() : I32 val","title":"tipc_sub_cancel"},{"location":"net-OSSockOpt/#returns_1221","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sub_ports","text":"[Source] fun box tipc_sub_ports() : I32 val","title":"tipc_sub_ports"},{"location":"net-OSSockOpt/#returns_1222","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_sub_service","text":"[Source] fun box tipc_sub_service() : I32 val","title":"tipc_sub_service"},{"location":"net-OSSockOpt/#returns_1223","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_top_srv","text":"[Source] fun box tipc_top_srv() : I32 val","title":"tipc_top_srv"},{"location":"net-OSSockOpt/#returns_1224","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_wait_forever","text":"[Source] fun box tipc_wait_forever() : I32 val","title":"tipc_wait_forever"},{"location":"net-OSSockOpt/#returns_1225","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_withdrawn","text":"[Source] fun box tipc_withdrawn() : I32 val","title":"tipc_withdrawn"},{"location":"net-OSSockOpt/#returns_1226","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#tipc_zone_scope","text":"[Source] fun box tipc_zone_scope() : I32 val","title":"tipc_zone_scope"},{"location":"net-OSSockOpt/#returns_1227","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#ttcp_client_snd_wnd","text":"[Source] fun box ttcp_client_snd_wnd() : I32 val","title":"ttcp_client_snd_wnd"},{"location":"net-OSSockOpt/#returns_1228","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_cork","text":"[Source] fun box udp_cork() : I32 val","title":"udp_cork"},{"location":"net-OSSockOpt/#returns_1229","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap","text":"[Source] fun box udp_encap() : I32 val","title":"udp_encap"},{"location":"net-OSSockOpt/#returns_1230","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp","text":"[Source] fun box udp_encap_espinudp() : I32 val","title":"udp_encap_espinudp"},{"location":"net-OSSockOpt/#returns_1231","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp_maxfraglen","text":"[Source] fun box udp_encap_espinudp_maxfraglen() : I32 val","title":"udp_encap_espinudp_maxfraglen"},{"location":"net-OSSockOpt/#returns_1232","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp_non_ike","text":"[Source] fun box udp_encap_espinudp_non_ike() : I32 val","title":"udp_encap_espinudp_non_ike"},{"location":"net-OSSockOpt/#returns_1233","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_espinudp_port","text":"[Source] fun box udp_encap_espinudp_port() : I32 val","title":"udp_encap_espinudp_port"},{"location":"net-OSSockOpt/#returns_1234","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_encap_l2tpinudp","text":"[Source] fun box udp_encap_l2tpinudp() : I32 val","title":"udp_encap_l2tpinudp"},{"location":"net-OSSockOpt/#returns_1235","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_nocksum","text":"[Source] fun box udp_nocksum() : I32 val","title":"udp_nocksum"},{"location":"net-OSSockOpt/#returns_1236","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_no_check6_rx","text":"[Source] fun box udp_no_check6_rx() : I32 val","title":"udp_no_check6_rx"},{"location":"net-OSSockOpt/#returns_1237","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_no_check6_tx","text":"[Source] fun box udp_no_check6_tx() : I32 val","title":"udp_no_check6_tx"},{"location":"net-OSSockOpt/#returns_1238","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#udp_vendor","text":"[Source] fun box udp_vendor() : I32 val","title":"udp_vendor"},{"location":"net-OSSockOpt/#returns_1239","text":"I32 val","title":"Returns"},{"location":"net-OSSockOpt/#eq","text":"[Source] fun box eq( that: OSSockOpt val) : Bool val","title":"eq"},{"location":"net-OSSockOpt/#parameters","text":"that: OSSockOpt val","title":"Parameters"},{"location":"net-OSSockOpt/#returns_1240","text":"Bool val","title":"Returns"},{"location":"net-OSSockOpt/#ne","text":"[Source] fun box ne( that: OSSockOpt val) : Bool val","title":"ne"},{"location":"net-OSSockOpt/#parameters_1","text":"that: OSSockOpt val","title":"Parameters"},{"location":"net-OSSockOpt/#returns_1241","text":"Bool val","title":"Returns"},{"location":"net-Proxy/","text":"Proxy \u00b6 [Source] interface ref Proxy Public Functions \u00b6 apply \u00b6 [Source] fun box apply( wrap: TCPConnectionNotify iso) : TCPConnectionNotify iso^ Parameters \u00b6 wrap: TCPConnectionNotify iso Returns \u00b6 TCPConnectionNotify iso^","title":"interface Proxy"},{"location":"net-Proxy/#proxy","text":"[Source] interface ref Proxy","title":"Proxy"},{"location":"net-Proxy/#public-functions","text":"","title":"Public Functions"},{"location":"net-Proxy/#apply","text":"[Source] fun box apply( wrap: TCPConnectionNotify iso) : TCPConnectionNotify iso^","title":"apply"},{"location":"net-Proxy/#parameters","text":"wrap: TCPConnectionNotify iso","title":"Parameters"},{"location":"net-Proxy/#returns","text":"TCPConnectionNotify iso^","title":"Returns"},{"location":"net-TCPAuth/","text":"TCPAuth \u00b6 [Source] primitive val TCPAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: (AmbientAuth val | NetAuth val)) : TCPAuth val^ Parameters \u00b6 from: ( AmbientAuth val | NetAuth val) Returns \u00b6 TCPAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: TCPAuth val) : Bool val Parameters \u00b6 that: TCPAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TCPAuth val) : Bool val Parameters \u00b6 that: TCPAuth val Returns \u00b6 Bool val","title":"primitive TCPAuth"},{"location":"net-TCPAuth/#tcpauth","text":"[Source] primitive val TCPAuth","title":"TCPAuth"},{"location":"net-TCPAuth/#constructors","text":"","title":"Constructors"},{"location":"net-TCPAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val)) : TCPAuth val^","title":"create"},{"location":"net-TCPAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val)","title":"Parameters"},{"location":"net-TCPAuth/#returns","text":"TCPAuth val^","title":"Returns"},{"location":"net-TCPAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPAuth/#eq","text":"[Source] fun box eq( that: TCPAuth val) : Bool val","title":"eq"},{"location":"net-TCPAuth/#parameters_1","text":"that: TCPAuth val","title":"Parameters"},{"location":"net-TCPAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-TCPAuth/#ne","text":"[Source] fun box ne( that: TCPAuth val) : Bool val","title":"ne"},{"location":"net-TCPAuth/#parameters_2","text":"that: TCPAuth val","title":"Parameters"},{"location":"net-TCPAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-TCPConnectAuth/","text":"TCPConnectAuth \u00b6 [Source] primitive val TCPConnectAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPConnectAuth val^ Parameters \u00b6 from: ( AmbientAuth val | NetAuth val | TCPAuth val) Returns \u00b6 TCPConnectAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: TCPConnectAuth val) : Bool val Parameters \u00b6 that: TCPConnectAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TCPConnectAuth val) : Bool val Parameters \u00b6 that: TCPConnectAuth val Returns \u00b6 Bool val","title":"primitive TCPConnectAuth"},{"location":"net-TCPConnectAuth/#tcpconnectauth","text":"[Source] primitive val TCPConnectAuth","title":"TCPConnectAuth"},{"location":"net-TCPConnectAuth/#constructors","text":"","title":"Constructors"},{"location":"net-TCPConnectAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPConnectAuth val^","title":"create"},{"location":"net-TCPConnectAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val | TCPAuth val)","title":"Parameters"},{"location":"net-TCPConnectAuth/#returns","text":"TCPConnectAuth val^","title":"Returns"},{"location":"net-TCPConnectAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPConnectAuth/#eq","text":"[Source] fun box eq( that: TCPConnectAuth val) : Bool val","title":"eq"},{"location":"net-TCPConnectAuth/#parameters_1","text":"that: TCPConnectAuth val","title":"Parameters"},{"location":"net-TCPConnectAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-TCPConnectAuth/#ne","text":"[Source] fun box ne( that: TCPConnectAuth val) : Bool val","title":"ne"},{"location":"net-TCPConnectAuth/#parameters_2","text":"that: TCPConnectAuth val","title":"Parameters"},{"location":"net-TCPConnectAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-TCPConnection/","text":"TCPConnection \u00b6 [Source] A TCP connection. When connecting, the Happy Eyeballs algorithm is used. The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints. use \"net\" class MyTCPConnectionNotify is TCPConnectionNotify let _out: OutStream new create(out: OutStream) => _out = out fun ref connected(conn: TCPConnection ref) => conn.write(\"hello world\") fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => _out.print(\"GOT:\" + String.from_array(consume data)) conn.close() true fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try TCPConnection(env.root as AmbientAuth, recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\") end Note: when writing to the connection data will be silently discarded if the connection has not yet been established. Backpressure support \u00b6 Write \u00b6 The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In TCPConnection , this is hidden from the programmer. When this occurs, TCPConnection will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, TCPConnectionNotify implements two methods throttled and unthrottled that are called when backpressure is applied and released. Upon receiving a throttled notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like: // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use \"backpressure\" use \"collections\" use \"net\" class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) => _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) => _out.print(\"Experiencing backpressure!\") Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) => _out.print(\"Releasing backpressure!\") Backpressure.release(_auth) fun ref closed(connection: TCPConnection ref) => // if backpressure has been applied, make sure we release // when shutting down _out.print(\"Releasing backpressure if applied!\") Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, \"\", \"7669\") end Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like: use \"net\" class ThrowItAway is TCPConnectionNotify var _throttled: Bool = false fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq => if not _throttled then data else \"\" end fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter => if not _throttled then data else recover Array[String] end end fun ref throttled(connection: TCPConnection ref) => _throttled = true fun ref unthrottled(connection: TCPConnection ref) => _throttled = false fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try TCPConnection(env.root as AmbientAuth, recover ThrowItAway end, \"\", \"7669\") end In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data. Read \u00b6 If your application is unable to keep up with data being sent to it over a TCPConnection you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket. The mute behavior allow any other actors in your application to request the cessation of additional reads until such time as unmute is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the TCPConnection 's mailbox to be handled. On non-windows platforms, your TCPConnection will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you must call unmute on a muted connection to have it close. Without calling unmute the TCPConnection actor will never exit. Proxy support \u00b6 Using the proxy_via callback in a TCPConnectionNotify it is possible to implement proxies. The function takes the intended destination host and service as parameters and returns a 2-tuple of the proxy host and service. The proxy TCPConnectionNotify should decorate another implementation of TCPConnectionNotify passing relevent data through. Example proxy implementation \u00b6 actor Main new create(env: Env) => MyClient.create( \"example.com\", // we actually want to connect to this host \"80\", ExampleProxy.create(\"proxy.example.com\", \"80\")) // we connect via this proxy actor MyClient new create(host: String, service: String, proxy: Proxy = NoProxy) => let conn: TCPConnection = TCPConnection.create( env.root as AmbientAuth, proxy.apply(MyConnectionNotify.create()), host, service) class ExampleProxy is Proxy let _proxy_host: String let _proxy_service: String new create(proxy_host: String, proxy_service: String) => _proxy_host = proxy_host _proxy_service = proxy_service fun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ => ExampleProxyNotify.create(consume wrap, _proxy_service, _proxy_service) class iso ExampleProxyNotify is TCPConnectionNotify // Fictional proxy implementation that has no error // conditions, and always forwards the connection. let _proxy_host: String let _proxy_service: String var _destination_host: (None | String) = None var _destination_service: (None | String) = None let _wrapped: TCPConnectionNotify iso new iso create(wrap: TCPConnectionNotify iso, proxy_host: String, proxy_service: String) => _wrapped = wrap _proxy_host = proxy_host _proxy_service = proxy_service fun ref proxy_via(host: String, service: String): (String, String) => // Stash the original host & service; return the host & service // for the proxy; indicating that the initial TCP connection should // be made to the proxy _destination_host = host _destination_service = service (_proxy_host, _proxy_service) fun ref connected(conn: TCPConnection ref) => // conn is the connection to the *proxy* server. We need to ask the // proxy server to forward this connection to our intended final // destination. conn.write((_destination_host + \"\\n\").array()) conn.write((_destination_service + \"\\n\").array()) wrapped.connected(conn) fun ref received(conn, data, times) => _wrapped.received(conn, data, times) fun ref connect_failed(conn: TCPConnection ref) => None actor tag TCPConnection Constructors \u00b6 create \u00b6 [Source] Connect via IPv4 or IPv6. If from is a non-empty string, the connection will be made from the specified interface. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = \"\", read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = \"\" read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPConnection tag^ ip4 \u00b6 [Source] Connect via IPv4. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = \"\", read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = \"\" read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPConnection tag^ ip6 \u00b6 [Source] Connect via IPv6. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = \"\", read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = \"\" read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPConnection tag^ _accept \u00b6 [Source] A new connection accepted on a server. new tag _accept( listen: TCPListener tag, notify: TCPConnectionNotify iso, fd: U32 val, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^ Parameters \u00b6 listen: TCPListener tag notify: TCPConnectionNotify iso fd: U32 val read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPConnection tag^ Public Behaviours \u00b6 write \u00b6 [Source] Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) writev \u00b6 [Source] Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val mute \u00b6 [Source] Temporarily suspend reading off this TCPConnection until such time as unmute is called. be mute() unmute \u00b6 [Source] Start reading off this TCPConnection again after having been muted. be unmute() set_notify \u00b6 [Source] Change the notifier. be set_notify( notify: TCPConnectionNotify iso) Parameters \u00b6 notify: TCPConnectionNotify iso dispose \u00b6 [Source] Close the connection gracefully once all writes are sent. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Return the local IP address. If this TCPConnection is closed then the address returned is invalid. fun box local_address() : NetAddress val Returns \u00b6 NetAddress val remote_address \u00b6 [Source] Return the remote IP address. If this TCPConnection is closed then the address returned is invalid. fun box remote_address() : NetAddress val Returns \u00b6 NetAddress val expect \u00b6 [Source] A received call on the notifier must contain exactly qty bytes. If qty is zero, the call can contain any amount of data. This has no effect if called in the sent notifier callback. Errors if qty exceeds the max buffer size as indicated by the read_buffer_size supplied when the connection was created. fun ref expect( qty: USize val = 0) : None val ? Parameters \u00b6 qty: USize val = 0 Returns \u00b6 None val ? set_nodelay \u00b6 [Source] Turn Nagle on/off. Defaults to on. This can only be set on a connected socket. fun ref set_nodelay( state: Bool val) : None val Parameters \u00b6 state: Bool val Returns \u00b6 None val set_keepalive \u00b6 [Source] Sets the TCP keepalive timeout to approximately secs seconds. Exact timing is OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket. fun ref set_keepalive( secs: U32 val) : None val Parameters \u00b6 secs: U32 val Returns \u00b6 None val write_final \u00b6 [Source] Write as much as possible to the socket. Set _writeable to false if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though. fun ref write_final( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val close \u00b6 [Source] Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately. fun ref close() : None val Returns \u00b6 None val hard_close \u00b6 [Source] When an error happens, do a non-graceful close. fun ref hard_close() : None val Returns \u00b6 None val getsockopt \u00b6 [Source] General wrapper for TCP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) => match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) => try let br = Reader.create().>append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) => // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = 4) : (U32 val , Array[U8 val] iso^) Parameters \u00b6 level: I32 val option_name: I32 val option_max_size: USize val = 4 Returns \u00b6 ( U32 val , Array [ U8 val] iso^) getsockopt_u32 \u00b6 [Source] Wrapper for TCP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val) Parameters \u00b6 level: I32 val option_name: I32 val Returns \u00b6 ( U32 val , U32 val) setsockopt \u00b6 [Source] General wrapper for TCP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate machine endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) => let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 => // System call was successful | let errno: U32 => // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters \u00b6 level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns \u00b6 U32 val setsockopt_u32 \u00b6 [Source] General wrapper for TCP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val Parameters \u00b6 level: I32 val option_name: I32 val option: U32 val Returns \u00b6 U32 val get_so_error \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) get_so_rcvbuf \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) get_so_sndbuf \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) get_tcp_nodelay \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref get_tcp_nodelay() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) set_so_rcvbuf \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val Parameters \u00b6 bufsize: U32 val Returns \u00b6 U32 val set_so_sndbuf \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val Parameters \u00b6 bufsize: U32 val Returns \u00b6 U32 val set_tcp_nodelay \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref set_tcp_nodelay( state: Bool val) : U32 val Parameters \u00b6 state: Bool val Returns \u00b6 U32 val Private Behaviours \u00b6 _event_notify \u00b6 [Source] Handle socket events. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again \u00b6 [Source] Resume reading. be _read_again() _write_again \u00b6 [Source] Resume writing. be _write_again() Private Functions \u00b6 _complete_writes \u00b6 [Source] The OS has informed us that len bytes of pending writes have completed. This occurs only with IOCP on Windows. fun ref _complete_writes( len: U32 val) : None val Parameters \u00b6 len: U32 val Returns \u00b6 None val _pending_writes \u00b6 [Source] Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not. fun ref _pending_writes() : Bool val Returns \u00b6 Bool val _manage_pending_buffer \u00b6 [Source] Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not. fun ref _manage_pending_buffer( bytes_sent: USize val, bytes_to_send: USize val, num_to_send: USize val) : Bool val ? Parameters \u00b6 bytes_sent: USize val bytes_to_send: USize val num_to_send: USize val Returns \u00b6 Bool val ? _complete_reads \u00b6 [Source] The OS has informed us that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val Parameters \u00b6 len: U32 val Returns \u00b6 None val _read_buf_size \u00b6 [Source] Resize the read buffer if it is empty or smaller than the next payload size fun ref _read_buf_size() : None val Returns \u00b6 None val _queue_read \u00b6 [Source] Begin an IOCP read on Windows. fun ref _queue_read() : None val Returns \u00b6 None val _pending_reads \u00b6 [Source] Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 5 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. Currently we can handle a varying value of _expect (greater than 0) and constant _expect of 0 but we cannot handle switching between these two cases. fun ref _pending_reads() : None val Returns \u00b6 None val _notify_connecting \u00b6 [Source] Inform the notifier that we're connecting. fun ref _notify_connecting() : None val Returns \u00b6 None val _close \u00b6 [Source] fun ref _close() : None val Returns \u00b6 None val _try_shutdown \u00b6 [Source] If we have closed and we have no remaining writes or pending connections, then shutdown. fun ref _try_shutdown() : None val Returns \u00b6 None val _is_sock_connected \u00b6 [Source] fun box _is_sock_connected( fd: U32 val) : Bool val Parameters \u00b6 fd: U32 val Returns \u00b6 Bool val _apply_backpressure \u00b6 [Source] fun ref _apply_backpressure() : None val Returns \u00b6 None val _release_backpressure \u00b6 [Source] fun ref _release_backpressure() : None val Returns \u00b6 None val","title":"actor TCPConnection"},{"location":"net-TCPConnection/#tcpconnection","text":"[Source] A TCP connection. When connecting, the Happy Eyeballs algorithm is used. The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints. use \"net\" class MyTCPConnectionNotify is TCPConnectionNotify let _out: OutStream new create(out: OutStream) => _out = out fun ref connected(conn: TCPConnection ref) => conn.write(\"hello world\") fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => _out.print(\"GOT:\" + String.from_array(consume data)) conn.close() true fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try TCPConnection(env.root as AmbientAuth, recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\") end Note: when writing to the connection data will be silently discarded if the connection has not yet been established.","title":"TCPConnection"},{"location":"net-TCPConnection/#backpressure-support","text":"","title":"Backpressure support"},{"location":"net-TCPConnection/#write","text":"The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In TCPConnection , this is hidden from the programmer. When this occurs, TCPConnection will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, TCPConnectionNotify implements two methods throttled and unthrottled that are called when backpressure is applied and released. Upon receiving a throttled notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like: // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use \"backpressure\" use \"collections\" use \"net\" class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) => _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) => _out.print(\"Experiencing backpressure!\") Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) => _out.print(\"Releasing backpressure!\") Backpressure.release(_auth) fun ref closed(connection: TCPConnection ref) => // if backpressure has been applied, make sure we release // when shutting down _out.print(\"Releasing backpressure if applied!\") Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, \"\", \"7669\") end Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like: use \"net\" class ThrowItAway is TCPConnectionNotify var _throttled: Bool = false fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq => if not _throttled then data else \"\" end fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter => if not _throttled then data else recover Array[String] end end fun ref throttled(connection: TCPConnection ref) => _throttled = true fun ref unthrottled(connection: TCPConnection ref) => _throttled = false fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try TCPConnection(env.root as AmbientAuth, recover ThrowItAway end, \"\", \"7669\") end In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data.","title":"Write"},{"location":"net-TCPConnection/#read","text":"If your application is unable to keep up with data being sent to it over a TCPConnection you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket. The mute behavior allow any other actors in your application to request the cessation of additional reads until such time as unmute is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the TCPConnection 's mailbox to be handled. On non-windows platforms, your TCPConnection will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you must call unmute on a muted connection to have it close. Without calling unmute the TCPConnection actor will never exit.","title":"Read"},{"location":"net-TCPConnection/#proxy-support","text":"Using the proxy_via callback in a TCPConnectionNotify it is possible to implement proxies. The function takes the intended destination host and service as parameters and returns a 2-tuple of the proxy host and service. The proxy TCPConnectionNotify should decorate another implementation of TCPConnectionNotify passing relevent data through.","title":"Proxy support"},{"location":"net-TCPConnection/#example-proxy-implementation","text":"actor Main new create(env: Env) => MyClient.create( \"example.com\", // we actually want to connect to this host \"80\", ExampleProxy.create(\"proxy.example.com\", \"80\")) // we connect via this proxy actor MyClient new create(host: String, service: String, proxy: Proxy = NoProxy) => let conn: TCPConnection = TCPConnection.create( env.root as AmbientAuth, proxy.apply(MyConnectionNotify.create()), host, service) class ExampleProxy is Proxy let _proxy_host: String let _proxy_service: String new create(proxy_host: String, proxy_service: String) => _proxy_host = proxy_host _proxy_service = proxy_service fun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ => ExampleProxyNotify.create(consume wrap, _proxy_service, _proxy_service) class iso ExampleProxyNotify is TCPConnectionNotify // Fictional proxy implementation that has no error // conditions, and always forwards the connection. let _proxy_host: String let _proxy_service: String var _destination_host: (None | String) = None var _destination_service: (None | String) = None let _wrapped: TCPConnectionNotify iso new iso create(wrap: TCPConnectionNotify iso, proxy_host: String, proxy_service: String) => _wrapped = wrap _proxy_host = proxy_host _proxy_service = proxy_service fun ref proxy_via(host: String, service: String): (String, String) => // Stash the original host & service; return the host & service // for the proxy; indicating that the initial TCP connection should // be made to the proxy _destination_host = host _destination_service = service (_proxy_host, _proxy_service) fun ref connected(conn: TCPConnection ref) => // conn is the connection to the *proxy* server. We need to ask the // proxy server to forward this connection to our intended final // destination. conn.write((_destination_host + \"\\n\").array()) conn.write((_destination_service + \"\\n\").array()) wrapped.connected(conn) fun ref received(conn, data, times) => _wrapped.received(conn, data, times) fun ref connect_failed(conn: TCPConnection ref) => None actor tag TCPConnection","title":"Example proxy implementation"},{"location":"net-TCPConnection/#constructors","text":"","title":"Constructors"},{"location":"net-TCPConnection/#create","text":"[Source] Connect via IPv4 or IPv6. If from is a non-empty string, the connection will be made from the specified interface. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = \"\", read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^","title":"create"},{"location":"net-TCPConnection/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = \"\" read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPConnection/#returns","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#ip4","text":"[Source] Connect via IPv4. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = \"\", read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^","title":"ip4"},{"location":"net-TCPConnection/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = \"\" read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPConnection/#returns_1","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#ip6","text":"[Source] Connect via IPv6. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val), notify: TCPConnectionNotify iso, host: String val, service: String val, from: String val = \"\", read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^","title":"ip6"},{"location":"net-TCPConnection/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) notify: TCPConnectionNotify iso host: String val service: String val from: String val = \"\" read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPConnection/#returns_2","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#_accept","text":"[Source] A new connection accepted on a server. new tag _accept( listen: TCPListener tag, notify: TCPConnectionNotify iso, fd: U32 val, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPConnection tag^","title":"_accept"},{"location":"net-TCPConnection/#parameters_3","text":"listen: TCPListener tag notify: TCPConnectionNotify iso fd: U32 val read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPConnection/#returns_3","text":"TCPConnection tag^","title":"Returns"},{"location":"net-TCPConnection/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"net-TCPConnection/#write_1","text":"[Source] Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"net-TCPConnection/#parameters_4","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-TCPConnection/#writev","text":"[Source] Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"net-TCPConnection/#parameters_5","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"net-TCPConnection/#mute","text":"[Source] Temporarily suspend reading off this TCPConnection until such time as unmute is called. be mute()","title":"mute"},{"location":"net-TCPConnection/#unmute","text":"[Source] Start reading off this TCPConnection again after having been muted. be unmute()","title":"unmute"},{"location":"net-TCPConnection/#set_notify","text":"[Source] Change the notifier. be set_notify( notify: TCPConnectionNotify iso)","title":"set_notify"},{"location":"net-TCPConnection/#parameters_6","text":"notify: TCPConnectionNotify iso","title":"Parameters"},{"location":"net-TCPConnection/#dispose","text":"[Source] Close the connection gracefully once all writes are sent. be dispose()","title":"dispose"},{"location":"net-TCPConnection/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPConnection/#local_address","text":"[Source] Return the local IP address. If this TCPConnection is closed then the address returned is invalid. fun box local_address() : NetAddress val","title":"local_address"},{"location":"net-TCPConnection/#returns_4","text":"NetAddress val","title":"Returns"},{"location":"net-TCPConnection/#remote_address","text":"[Source] Return the remote IP address. If this TCPConnection is closed then the address returned is invalid. fun box remote_address() : NetAddress val","title":"remote_address"},{"location":"net-TCPConnection/#returns_5","text":"NetAddress val","title":"Returns"},{"location":"net-TCPConnection/#expect","text":"[Source] A received call on the notifier must contain exactly qty bytes. If qty is zero, the call can contain any amount of data. This has no effect if called in the sent notifier callback. Errors if qty exceeds the max buffer size as indicated by the read_buffer_size supplied when the connection was created. fun ref expect( qty: USize val = 0) : None val ?","title":"expect"},{"location":"net-TCPConnection/#parameters_7","text":"qty: USize val = 0","title":"Parameters"},{"location":"net-TCPConnection/#returns_6","text":"None val ?","title":"Returns"},{"location":"net-TCPConnection/#set_nodelay","text":"[Source] Turn Nagle on/off. Defaults to on. This can only be set on a connected socket. fun ref set_nodelay( state: Bool val) : None val","title":"set_nodelay"},{"location":"net-TCPConnection/#parameters_8","text":"state: Bool val","title":"Parameters"},{"location":"net-TCPConnection/#returns_7","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#set_keepalive","text":"[Source] Sets the TCP keepalive timeout to approximately secs seconds. Exact timing is OS dependent. If secs is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket. fun ref set_keepalive( secs: U32 val) : None val","title":"set_keepalive"},{"location":"net-TCPConnection/#parameters_9","text":"secs: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_8","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#write_final","text":"[Source] Write as much as possible to the socket. Set _writeable to false if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though. fun ref write_final( data: (String val | Array[U8 val] val)) : None val","title":"write_final"},{"location":"net-TCPConnection/#parameters_10","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-TCPConnection/#returns_9","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#close","text":"[Source] Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately. fun ref close() : None val","title":"close"},{"location":"net-TCPConnection/#returns_10","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#hard_close","text":"[Source] When an error happens, do a non-graceful close. fun ref hard_close() : None val","title":"hard_close"},{"location":"net-TCPConnection/#returns_11","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#getsockopt","text":"[Source] General wrapper for TCP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) => match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) => try let br = Reader.create().>append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) => // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = 4) : (U32 val , Array[U8 val] iso^)","title":"getsockopt"},{"location":"net-TCPConnection/#parameters_11","text":"level: I32 val option_name: I32 val option_max_size: USize val = 4","title":"Parameters"},{"location":"net-TCPConnection/#returns_12","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-TCPConnection/#getsockopt_u32","text":"[Source] Wrapper for TCP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val)","title":"getsockopt_u32"},{"location":"net-TCPConnection/#parameters_12","text":"level: I32 val option_name: I32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_13","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#setsockopt","text":"[Source] General wrapper for TCP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate machine endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) => let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 => // System call was successful | let errno: U32 => // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"setsockopt"},{"location":"net-TCPConnection/#parameters_13","text":"level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-TCPConnection/#returns_14","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#setsockopt_u32","text":"[Source] General wrapper for TCP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val","title":"setsockopt_u32"},{"location":"net-TCPConnection/#parameters_14","text":"level: I32 val option_name: I32 val option: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_15","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#get_so_error","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val)","title":"get_so_error"},{"location":"net-TCPConnection/#returns_16","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#get_so_rcvbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val)","title":"get_so_rcvbuf"},{"location":"net-TCPConnection/#returns_17","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#get_so_sndbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val)","title":"get_so_sndbuf"},{"location":"net-TCPConnection/#returns_18","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#get_tcp_nodelay","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref get_tcp_nodelay() : (U32 val , U32 val)","title":"get_tcp_nodelay"},{"location":"net-TCPConnection/#returns_19","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-TCPConnection/#set_so_rcvbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val","title":"set_so_rcvbuf"},{"location":"net-TCPConnection/#parameters_15","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_20","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#set_so_sndbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val","title":"set_so_sndbuf"},{"location":"net-TCPConnection/#parameters_16","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_21","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#set_tcp_nodelay","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...) fun ref set_tcp_nodelay( state: Bool val) : U32 val","title":"set_tcp_nodelay"},{"location":"net-TCPConnection/#parameters_17","text":"state: Bool val","title":"Parameters"},{"location":"net-TCPConnection/#returns_22","text":"U32 val","title":"Returns"},{"location":"net-TCPConnection/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"net-TCPConnection/#_event_notify","text":"[Source] Handle socket events. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"net-TCPConnection/#parameters_18","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"net-TCPConnection/#_write_again","text":"[Source] Resume writing. be _write_again()","title":"_write_again"},{"location":"net-TCPConnection/#private-functions","text":"","title":"Private Functions"},{"location":"net-TCPConnection/#_complete_writes","text":"[Source] The OS has informed us that len bytes of pending writes have completed. This occurs only with IOCP on Windows. fun ref _complete_writes( len: U32 val) : None val","title":"_complete_writes"},{"location":"net-TCPConnection/#parameters_19","text":"len: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_23","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_pending_writes","text":"[Source] Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not. fun ref _pending_writes() : Bool val","title":"_pending_writes"},{"location":"net-TCPConnection/#returns_24","text":"Bool val","title":"Returns"},{"location":"net-TCPConnection/#_manage_pending_buffer","text":"[Source] Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not. fun ref _manage_pending_buffer( bytes_sent: USize val, bytes_to_send: USize val, num_to_send: USize val) : Bool val ?","title":"_manage_pending_buffer"},{"location":"net-TCPConnection/#parameters_20","text":"bytes_sent: USize val bytes_to_send: USize val num_to_send: USize val","title":"Parameters"},{"location":"net-TCPConnection/#returns_25","text":"Bool val ?","title":"Returns"},{"location":"net-TCPConnection/#_complete_reads","text":"[Source] The OS has informed us that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val","title":"_complete_reads"},{"location":"net-TCPConnection/#parameters_21","text":"len: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_26","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_read_buf_size","text":"[Source] Resize the read buffer if it is empty or smaller than the next payload size fun ref _read_buf_size() : None val","title":"_read_buf_size"},{"location":"net-TCPConnection/#returns_27","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_queue_read","text":"[Source] Begin an IOCP read on Windows. fun ref _queue_read() : None val","title":"_queue_read"},{"location":"net-TCPConnection/#returns_28","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_pending_reads","text":"[Source] Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 5 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. Currently we can handle a varying value of _expect (greater than 0) and constant _expect of 0 but we cannot handle switching between these two cases. fun ref _pending_reads() : None val","title":"_pending_reads"},{"location":"net-TCPConnection/#returns_29","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_notify_connecting","text":"[Source] Inform the notifier that we're connecting. fun ref _notify_connecting() : None val","title":"_notify_connecting"},{"location":"net-TCPConnection/#returns_30","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_close","text":"[Source] fun ref _close() : None val","title":"_close"},{"location":"net-TCPConnection/#returns_31","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_try_shutdown","text":"[Source] If we have closed and we have no remaining writes or pending connections, then shutdown. fun ref _try_shutdown() : None val","title":"_try_shutdown"},{"location":"net-TCPConnection/#returns_32","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_is_sock_connected","text":"[Source] fun box _is_sock_connected( fd: U32 val) : Bool val","title":"_is_sock_connected"},{"location":"net-TCPConnection/#parameters_22","text":"fd: U32 val","title":"Parameters"},{"location":"net-TCPConnection/#returns_33","text":"Bool val","title":"Returns"},{"location":"net-TCPConnection/#_apply_backpressure","text":"[Source] fun ref _apply_backpressure() : None val","title":"_apply_backpressure"},{"location":"net-TCPConnection/#returns_34","text":"None val","title":"Returns"},{"location":"net-TCPConnection/#_release_backpressure","text":"[Source] fun ref _release_backpressure() : None val","title":"_release_backpressure"},{"location":"net-TCPConnection/#returns_35","text":"None val","title":"Returns"},{"location":"net-TCPConnectionAuth/","text":"TCPConnectionAuth \u00b6 [Source] type TCPConnectionAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val) Type Alias For \u00b6 ( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)","title":"type TCPConnectionAuth"},{"location":"net-TCPConnectionAuth/#tcpconnectionauth","text":"[Source] type TCPConnectionAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)","title":"TCPConnectionAuth"},{"location":"net-TCPConnectionAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)","title":"Type Alias For"},{"location":"net-TCPConnectionNotify/","text":"TCPConnectionNotify \u00b6 [Source] Notifications for TCP connections. For an example of using this class please see the documentation for the TCPConnection and TCPListener actors. interface ref TCPConnectionNotify Public Functions \u00b6 accepted \u00b6 [Source] Called when a TCPConnection is accepted by a TCPListener. fun ref accepted( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val proxy_via \u00b6 [Source] Called before before attempting to connect to the destination server In order to connect via proxy, return the host & service for the proxy server. An implementation of this function might look like: let _proxy_host = \"some-proxy.example.com\" let _proxy_service = \"80\" var _destination_host: ( None | String ) var _destination_service: ( None | String ) fun ref proxy_via(host: String, service: String): (String, String) => _destination_host = host _destination_service = service ( _proxy_host, _proxy_service ) fun ref proxy_via( host: String val, service: String val) : (String val , String val) Parameters \u00b6 host: String val service: String val Returns \u00b6 ( String val , String val) connecting \u00b6 [Source] Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called. fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val Parameters \u00b6 conn: TCPConnection ref count: U32 val Returns \u00b6 None val connected \u00b6 [Source] Called when we have successfully connected to the server. fun ref connected( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val connect_failed \u00b6 [Source] Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref connect_failed(conn: TCPConnection ref) => None fun ref connect_failed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val auth_failed \u00b6 [Source] A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL). fun ref auth_failed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val sent \u00b6 [Source] Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string. fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val) Parameters \u00b6 conn: TCPConnection ref data: ( String val | Array [ U8 val] val) Returns \u00b6 ( String val | Array [ U8 val] val) sentv \u00b6 [Source] Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String]. fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val Parameters \u00b6 conn: TCPConnection ref data: ByteSeqIter val Returns \u00b6 ByteSeqIter val received \u00b6 [Source] Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now. Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val Parameters \u00b6 conn: TCPConnection ref data: Array [ U8 val] iso times: USize val Returns \u00b6 Bool val expect \u00b6 [Source] Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL). fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val Parameters \u00b6 conn: TCPConnection ref qty: USize val Returns \u00b6 USize val closed \u00b6 [Source] Called when the connection is closed. fun ref closed( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val throttled \u00b6 [Source] Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to write and writev until you are informed that pressure has been released. Failure to respond to the throttled notification will result in outgoing data queuing in the connection and increasing memory usage. fun ref throttled( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val unthrottled \u00b6 [Source] Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to write and writev again. fun ref unthrottled( conn: TCPConnection ref) : None val Parameters \u00b6 conn: TCPConnection ref Returns \u00b6 None val","title":"interface TCPConnectionNotify"},{"location":"net-TCPConnectionNotify/#tcpconnectionnotify","text":"[Source] Notifications for TCP connections. For an example of using this class please see the documentation for the TCPConnection and TCPListener actors. interface ref TCPConnectionNotify","title":"TCPConnectionNotify"},{"location":"net-TCPConnectionNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPConnectionNotify/#accepted","text":"[Source] Called when a TCPConnection is accepted by a TCPListener. fun ref accepted( conn: TCPConnection ref) : None val","title":"accepted"},{"location":"net-TCPConnectionNotify/#parameters","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#proxy_via","text":"[Source] Called before before attempting to connect to the destination server In order to connect via proxy, return the host & service for the proxy server. An implementation of this function might look like: let _proxy_host = \"some-proxy.example.com\" let _proxy_service = \"80\" var _destination_host: ( None | String ) var _destination_service: ( None | String ) fun ref proxy_via(host: String, service: String): (String, String) => _destination_host = host _destination_service = service ( _proxy_host, _proxy_service ) fun ref proxy_via( host: String val, service: String val) : (String val , String val)","title":"proxy_via"},{"location":"net-TCPConnectionNotify/#parameters_1","text":"host: String val service: String val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_1","text":"( String val , String val)","title":"Returns"},{"location":"net-TCPConnectionNotify/#connecting","text":"[Source] Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called. fun ref connecting( conn: TCPConnection ref, count: U32 val) : None val","title":"connecting"},{"location":"net-TCPConnectionNotify/#parameters_2","text":"conn: TCPConnection ref count: U32 val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_2","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#connected","text":"[Source] Called when we have successfully connected to the server. fun ref connected( conn: TCPConnection ref) : None val","title":"connected"},{"location":"net-TCPConnectionNotify/#parameters_3","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_3","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#connect_failed","text":"[Source] Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref connect_failed(conn: TCPConnection ref) => None fun ref connect_failed( conn: TCPConnection ref) : None val","title":"connect_failed"},{"location":"net-TCPConnectionNotify/#parameters_4","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_4","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#auth_failed","text":"[Source] A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL). fun ref auth_failed( conn: TCPConnection ref) : None val","title":"auth_failed"},{"location":"net-TCPConnectionNotify/#parameters_5","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_5","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#sent","text":"[Source] Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string. fun ref sent( conn: TCPConnection ref, data: (String val | Array[U8 val] val)) : (String val | Array[U8 val] val)","title":"sent"},{"location":"net-TCPConnectionNotify/#parameters_6","text":"conn: TCPConnection ref data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_6","text":"( String val | Array [ U8 val] val)","title":"Returns"},{"location":"net-TCPConnectionNotify/#sentv","text":"[Source] Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String]. fun ref sentv( conn: TCPConnection ref, data: ByteSeqIter val) : ByteSeqIter val","title":"sentv"},{"location":"net-TCPConnectionNotify/#parameters_7","text":"conn: TCPConnection ref data: ByteSeqIter val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_7","text":"ByteSeqIter val","title":"Returns"},{"location":"net-TCPConnectionNotify/#received","text":"[Source] Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now. Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis. fun ref received( conn: TCPConnection ref, data: Array[U8 val] iso, times: USize val) : Bool val","title":"received"},{"location":"net-TCPConnectionNotify/#parameters_8","text":"conn: TCPConnection ref data: Array [ U8 val] iso times: USize val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_8","text":"Bool val","title":"Returns"},{"location":"net-TCPConnectionNotify/#expect","text":"[Source] Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL). fun ref expect( conn: TCPConnection ref, qty: USize val) : USize val","title":"expect"},{"location":"net-TCPConnectionNotify/#parameters_9","text":"conn: TCPConnection ref qty: USize val","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_9","text":"USize val","title":"Returns"},{"location":"net-TCPConnectionNotify/#closed","text":"[Source] Called when the connection is closed. fun ref closed( conn: TCPConnection ref) : None val","title":"closed"},{"location":"net-TCPConnectionNotify/#parameters_10","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_10","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#throttled","text":"[Source] Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to write and writev until you are informed that pressure has been released. Failure to respond to the throttled notification will result in outgoing data queuing in the connection and increasing memory usage. fun ref throttled( conn: TCPConnection ref) : None val","title":"throttled"},{"location":"net-TCPConnectionNotify/#parameters_11","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_11","text":"None val","title":"Returns"},{"location":"net-TCPConnectionNotify/#unthrottled","text":"[Source] Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to write and writev again. fun ref unthrottled( conn: TCPConnection ref) : None val","title":"unthrottled"},{"location":"net-TCPConnectionNotify/#parameters_12","text":"conn: TCPConnection ref","title":"Parameters"},{"location":"net-TCPConnectionNotify/#returns_12","text":"None val","title":"Returns"},{"location":"net-TCPListenAuth/","text":"TCPListenAuth \u00b6 [Source] primitive val TCPListenAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPListenAuth val^ Parameters \u00b6 from: ( AmbientAuth val | NetAuth val | TCPAuth val) Returns \u00b6 TCPListenAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: TCPListenAuth val) : Bool val Parameters \u00b6 that: TCPListenAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TCPListenAuth val) : Bool val Parameters \u00b6 that: TCPListenAuth val Returns \u00b6 Bool val","title":"primitive TCPListenAuth"},{"location":"net-TCPListenAuth/#tcplistenauth","text":"[Source] primitive val TCPListenAuth","title":"TCPListenAuth"},{"location":"net-TCPListenAuth/#constructors","text":"","title":"Constructors"},{"location":"net-TCPListenAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val | TCPAuth val)) : TCPListenAuth val^","title":"create"},{"location":"net-TCPListenAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val | TCPAuth val)","title":"Parameters"},{"location":"net-TCPListenAuth/#returns","text":"TCPListenAuth val^","title":"Returns"},{"location":"net-TCPListenAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPListenAuth/#eq","text":"[Source] fun box eq( that: TCPListenAuth val) : Bool val","title":"eq"},{"location":"net-TCPListenAuth/#parameters_1","text":"that: TCPListenAuth val","title":"Parameters"},{"location":"net-TCPListenAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-TCPListenAuth/#ne","text":"[Source] fun box ne( that: TCPListenAuth val) : Bool val","title":"ne"},{"location":"net-TCPListenAuth/#parameters_2","text":"that: TCPListenAuth val","title":"Parameters"},{"location":"net-TCPListenAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-TCPListenNotify/","text":"TCPListenNotify \u00b6 [Source] Notifications for TCP listeners. For an example of using this class, please see the documentation for the TCPListener actor. interface ref TCPListenNotify Public Functions \u00b6 listening \u00b6 [Source] Called when the listener has been bound to an address. fun ref listening( listen: TCPListener ref) : None val Parameters \u00b6 listen: TCPListener ref Returns \u00b6 None val not_listening \u00b6 [Source] Called if it wasn't possible to bind the listener to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(listen: TCPListener ref) => None fun ref not_listening( listen: TCPListener ref) : None val Parameters \u00b6 listen: TCPListener ref Returns \u00b6 None val closed \u00b6 [Source] Called when the listener is closed. fun ref closed( listen: TCPListener ref) : None val Parameters \u00b6 listen: TCPListener ref Returns \u00b6 None val connected \u00b6 [Source] Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server. fun ref connected( listen: TCPListener ref) : TCPConnectionNotify iso^ ? Parameters \u00b6 listen: TCPListener ref Returns \u00b6 TCPConnectionNotify iso^ ?","title":"interface TCPListenNotify"},{"location":"net-TCPListenNotify/#tcplistennotify","text":"[Source] Notifications for TCP listeners. For an example of using this class, please see the documentation for the TCPListener actor. interface ref TCPListenNotify","title":"TCPListenNotify"},{"location":"net-TCPListenNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPListenNotify/#listening","text":"[Source] Called when the listener has been bound to an address. fun ref listening( listen: TCPListener ref) : None val","title":"listening"},{"location":"net-TCPListenNotify/#parameters","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns","text":"None val","title":"Returns"},{"location":"net-TCPListenNotify/#not_listening","text":"[Source] Called if it wasn't possible to bind the listener to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(listen: TCPListener ref) => None fun ref not_listening( listen: TCPListener ref) : None val","title":"not_listening"},{"location":"net-TCPListenNotify/#parameters_1","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns_1","text":"None val","title":"Returns"},{"location":"net-TCPListenNotify/#closed","text":"[Source] Called when the listener is closed. fun ref closed( listen: TCPListener ref) : None val","title":"closed"},{"location":"net-TCPListenNotify/#parameters_2","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns_2","text":"None val","title":"Returns"},{"location":"net-TCPListenNotify/#connected","text":"[Source] Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server. fun ref connected( listen: TCPListener ref) : TCPConnectionNotify iso^ ?","title":"connected"},{"location":"net-TCPListenNotify/#parameters_3","text":"listen: TCPListener ref","title":"Parameters"},{"location":"net-TCPListenNotify/#returns_3","text":"TCPConnectionNotify iso^ ?","title":"Returns"},{"location":"net-TCPListener/","text":"TCPListener \u00b6 [Source] Listens for new network connections. The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives. use \"net\" class MyTCPConnectionNotify is TCPConnectionNotify fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => conn.write(String.from_array(consume data)) true fun ref connect_failed(conn: TCPConnection ref) => None class MyTCPListenNotify is TCPListenNotify fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ => MyTCPConnectionNotify fun ref not_listening(listen: TCPListener ref) => None actor Main new create(env: Env) => try TCPListener(env.root as AmbientAuth, recover MyTCPListenNotify end, \"\", \"8989\") end actor tag TCPListener Constructors \u00b6 create \u00b6 [Source] Listens for both IPv4 and IPv6 connections. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPListener tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = \"\" service: String val = \"0\" limit: USize val = 0 read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPListener tag^ ip4 \u00b6 [Source] Listens for IPv4 connections. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPListener tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = \"\" service: String val = \"0\" limit: USize val = 0 read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPListener tag^ ip6 \u00b6 [Source] Listens for IPv6 connections. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPListener tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = \"\" service: String val = \"0\" limit: USize val = 0 read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384 Returns \u00b6 TCPListener tag^ Public Behaviours \u00b6 set_notify \u00b6 [Source] Change the notifier. be set_notify( notify: TCPListenNotify iso) Parameters \u00b6 notify: TCPListenNotify iso dispose \u00b6 [Source] Stop listening. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Return the bound IP address. fun box local_address() : NetAddress val Returns \u00b6 NetAddress val close \u00b6 [Source] Dispose of resources. fun ref close() : None val Returns \u00b6 None val Private Behaviours \u00b6 _event_notify \u00b6 [Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _conn_closed \u00b6 [Source] An accepted connection has closed. If we have dropped below the limit, try to accept new connections. be _conn_closed() Private Functions \u00b6 _accept \u00b6 [Source] Accept connections as long as we have spawned fewer than our limit. fun ref _accept( ns: U32 val = 0) : None val Parameters \u00b6 ns: U32 val = 0 Returns \u00b6 None val _spawn \u00b6 [Source] Spawn a new connection. fun ref _spawn( ns: U32 val) : None val Parameters \u00b6 ns: U32 val Returns \u00b6 None val _notify_listening \u00b6 [Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val Returns \u00b6 None val","title":"actor TCPListener"},{"location":"net-TCPListener/#tcplistener","text":"[Source] Listens for new network connections. The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives. use \"net\" class MyTCPConnectionNotify is TCPConnectionNotify fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => conn.write(String.from_array(consume data)) true fun ref connect_failed(conn: TCPConnection ref) => None class MyTCPListenNotify is TCPListenNotify fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ => MyTCPConnectionNotify fun ref not_listening(listen: TCPListener ref) => None actor Main new create(env: Env) => try TCPListener(env.root as AmbientAuth, recover MyTCPListenNotify end, \"\", \"8989\") end actor tag TCPListener","title":"TCPListener"},{"location":"net-TCPListener/#constructors","text":"","title":"Constructors"},{"location":"net-TCPListener/#create","text":"[Source] Listens for both IPv4 and IPv6 connections. new tag create( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPListener tag^","title":"create"},{"location":"net-TCPListener/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = \"\" service: String val = \"0\" limit: USize val = 0 read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPListener/#returns","text":"TCPListener tag^","title":"Returns"},{"location":"net-TCPListener/#ip4","text":"[Source] Listens for IPv4 connections. new tag ip4( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPListener tag^","title":"ip4"},{"location":"net-TCPListener/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = \"\" service: String val = \"0\" limit: USize val = 0 read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPListener/#returns_1","text":"TCPListener tag^","title":"Returns"},{"location":"net-TCPListener/#ip6","text":"[Source] Listens for IPv6 connections. new tag ip6( auth: (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val), notify: TCPListenNotify iso, host: String val = \"\", service: String val = \"0\", limit: USize val = 0, read_buffer_size: USize val = 16384, yield_after_reading: USize val = 16384, yield_after_writing: USize val = 16384) : TCPListener tag^","title":"ip6"},{"location":"net-TCPListener/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) notify: TCPListenNotify iso host: String val = \"\" service: String val = \"0\" limit: USize val = 0 read_buffer_size: USize val = 16384 yield_after_reading: USize val = 16384 yield_after_writing: USize val = 16384","title":"Parameters"},{"location":"net-TCPListener/#returns_2","text":"TCPListener tag^","title":"Returns"},{"location":"net-TCPListener/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"net-TCPListener/#set_notify","text":"[Source] Change the notifier. be set_notify( notify: TCPListenNotify iso)","title":"set_notify"},{"location":"net-TCPListener/#parameters_3","text":"notify: TCPListenNotify iso","title":"Parameters"},{"location":"net-TCPListener/#dispose","text":"[Source] Stop listening. be dispose()","title":"dispose"},{"location":"net-TCPListener/#public-functions","text":"","title":"Public Functions"},{"location":"net-TCPListener/#local_address","text":"[Source] Return the bound IP address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"net-TCPListener/#returns_3","text":"NetAddress val","title":"Returns"},{"location":"net-TCPListener/#close","text":"[Source] Dispose of resources. fun ref close() : None val","title":"close"},{"location":"net-TCPListener/#returns_4","text":"None val","title":"Returns"},{"location":"net-TCPListener/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"net-TCPListener/#_event_notify","text":"[Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"net-TCPListener/#parameters_4","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"net-TCPListener/#_conn_closed","text":"[Source] An accepted connection has closed. If we have dropped below the limit, try to accept new connections. be _conn_closed()","title":"_conn_closed"},{"location":"net-TCPListener/#private-functions","text":"","title":"Private Functions"},{"location":"net-TCPListener/#_accept","text":"[Source] Accept connections as long as we have spawned fewer than our limit. fun ref _accept( ns: U32 val = 0) : None val","title":"_accept"},{"location":"net-TCPListener/#parameters_5","text":"ns: U32 val = 0","title":"Parameters"},{"location":"net-TCPListener/#returns_5","text":"None val","title":"Returns"},{"location":"net-TCPListener/#_spawn","text":"[Source] Spawn a new connection. fun ref _spawn( ns: U32 val) : None val","title":"_spawn"},{"location":"net-TCPListener/#parameters_6","text":"ns: U32 val","title":"Parameters"},{"location":"net-TCPListener/#returns_6","text":"None val","title":"Returns"},{"location":"net-TCPListener/#_notify_listening","text":"[Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val","title":"_notify_listening"},{"location":"net-TCPListener/#returns_7","text":"None val","title":"Returns"},{"location":"net-TCPListenerAuth/","text":"TCPListenerAuth \u00b6 [Source] type TCPListenerAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val) Type Alias For \u00b6 ( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)","title":"type TCPListenerAuth"},{"location":"net-TCPListenerAuth/#tcplistenerauth","text":"[Source] type TCPListenerAuth is (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)","title":"TCPListenerAuth"},{"location":"net-TCPListenerAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)","title":"Type Alias For"},{"location":"net-UDPAuth/","text":"UDPAuth \u00b6 [Source] primitive val UDPAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: (AmbientAuth val | NetAuth val)) : UDPAuth val^ Parameters \u00b6 from: ( AmbientAuth val | NetAuth val) Returns \u00b6 UDPAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: UDPAuth val) : Bool val Parameters \u00b6 that: UDPAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: UDPAuth val) : Bool val Parameters \u00b6 that: UDPAuth val Returns \u00b6 Bool val","title":"primitive UDPAuth"},{"location":"net-UDPAuth/#udpauth","text":"[Source] primitive val UDPAuth","title":"UDPAuth"},{"location":"net-UDPAuth/#constructors","text":"","title":"Constructors"},{"location":"net-UDPAuth/#create","text":"[Source] new val create( from: (AmbientAuth val | NetAuth val)) : UDPAuth val^","title":"create"},{"location":"net-UDPAuth/#parameters","text":"from: ( AmbientAuth val | NetAuth val)","title":"Parameters"},{"location":"net-UDPAuth/#returns","text":"UDPAuth val^","title":"Returns"},{"location":"net-UDPAuth/#public-functions","text":"","title":"Public Functions"},{"location":"net-UDPAuth/#eq","text":"[Source] fun box eq( that: UDPAuth val) : Bool val","title":"eq"},{"location":"net-UDPAuth/#parameters_1","text":"that: UDPAuth val","title":"Parameters"},{"location":"net-UDPAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"net-UDPAuth/#ne","text":"[Source] fun box ne( that: UDPAuth val) : Bool val","title":"ne"},{"location":"net-UDPAuth/#parameters_2","text":"that: UDPAuth val","title":"Parameters"},{"location":"net-UDPAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"net-UDPNotify/","text":"UDPNotify \u00b6 [Source] Notifications for UDP connections. For an example of using this class please see the documentatoin for the UDPSocket actor. interface ref UDPNotify Public Functions \u00b6 listening \u00b6 [Source] Called when the socket has been bound to an address. fun ref listening( sock: UDPSocket ref) : None val Parameters \u00b6 sock: UDPSocket ref Returns \u00b6 None val not_listening \u00b6 [Source] Called if it wasn't possible to bind the socket to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(sock: UDPSocket ref) => None fun ref not_listening( sock: UDPSocket ref) : None val Parameters \u00b6 sock: UDPSocket ref Returns \u00b6 None val received \u00b6 [Source] Called when new data is received on the socket. fun ref received( sock: UDPSocket ref, data: Array[U8 val] iso, from: NetAddress val) : None val Parameters \u00b6 sock: UDPSocket ref data: Array [ U8 val] iso from: NetAddress val Returns \u00b6 None val closed \u00b6 [Source] Called when the socket is closed. fun ref closed( sock: UDPSocket ref) : None val Parameters \u00b6 sock: UDPSocket ref Returns \u00b6 None val","title":"interface UDPNotify"},{"location":"net-UDPNotify/#udpnotify","text":"[Source] Notifications for UDP connections. For an example of using this class please see the documentatoin for the UDPSocket actor. interface ref UDPNotify","title":"UDPNotify"},{"location":"net-UDPNotify/#public-functions","text":"","title":"Public Functions"},{"location":"net-UDPNotify/#listening","text":"[Source] Called when the socket has been bound to an address. fun ref listening( sock: UDPSocket ref) : None val","title":"listening"},{"location":"net-UDPNotify/#parameters","text":"sock: UDPSocket ref","title":"Parameters"},{"location":"net-UDPNotify/#returns","text":"None val","title":"Returns"},{"location":"net-UDPNotify/#not_listening","text":"[Source] Called if it wasn't possible to bind the socket to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: fun ref not_listening(sock: UDPSocket ref) => None fun ref not_listening( sock: UDPSocket ref) : None val","title":"not_listening"},{"location":"net-UDPNotify/#parameters_1","text":"sock: UDPSocket ref","title":"Parameters"},{"location":"net-UDPNotify/#returns_1","text":"None val","title":"Returns"},{"location":"net-UDPNotify/#received","text":"[Source] Called when new data is received on the socket. fun ref received( sock: UDPSocket ref, data: Array[U8 val] iso, from: NetAddress val) : None val","title":"received"},{"location":"net-UDPNotify/#parameters_2","text":"sock: UDPSocket ref data: Array [ U8 val] iso from: NetAddress val","title":"Parameters"},{"location":"net-UDPNotify/#returns_2","text":"None val","title":"Returns"},{"location":"net-UDPNotify/#closed","text":"[Source] Called when the socket is closed. fun ref closed( sock: UDPSocket ref) : None val","title":"closed"},{"location":"net-UDPNotify/#parameters_3","text":"sock: UDPSocket ref","title":"Parameters"},{"location":"net-UDPNotify/#returns_3","text":"None val","title":"Returns"},{"location":"net-UDPSocket/","text":"UDPSocket \u00b6 [Source] Creates a UDP socket that can be used for sending and receiving UDP messages. The following examples create: * an echo server that listens for connections and returns whatever message it receives * a client that connects to the server, sends a message, and prints the message it receives in response The server is implemented like this: use \"net\" class MyUDPNotify is UDPNotify fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => sock.write(consume data, from) fun ref not_listening(sock: UDPSocket ref) => None actor Main new create(env: Env) => try UDPSocket(env.root as AmbientAuth, MyUDPNotify, \"\", \"8989\") end The client is implemented like this: use \"net\" class MyUDPNotify is UDPNotify let _out: OutStream let _destination: NetAddress new create( out: OutStream, destination: NetAddress) => _out = out _destination = destination fun ref listening(sock: UDPSocket ref) => sock.write(\"hello world\", _destination) fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => _out.print(\"GOT:\" + String.from_array(consume data)) sock.dispose() fun ref not_listening(sock: UDPSocket ref) => None actor Main new create(env: Env) => try let destination = DNS.ip4(env.root as AmbientAuth, \"localhost\", \"8989\")(0)? UDPSocket(env.root as AmbientAuth, recover MyUDPNotify(env.out, consume destination) end) end actor tag UDPSocket Constructors \u00b6 create \u00b6 [Source] Listens for both IPv4 and IPv6 datagrams. new tag create( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = \"\", service: String val = \"0\", size: USize val = 1024) : UDPSocket tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = \"\" service: String val = \"0\" size: USize val = 1024 Returns \u00b6 UDPSocket tag^ ip4 \u00b6 [Source] Listens for IPv4 datagrams. new tag ip4( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = \"\", service: String val = \"0\", size: USize val = 1024) : UDPSocket tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = \"\" service: String val = \"0\" size: USize val = 1024 Returns \u00b6 UDPSocket tag^ ip6 \u00b6 [Source] Listens for IPv6 datagrams. new tag ip6( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = \"\", service: String val = \"0\", size: USize val = 1024) : UDPSocket tag^ Parameters \u00b6 auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = \"\" service: String val = \"0\" size: USize val = 1024 Returns \u00b6 UDPSocket tag^ Public Behaviours \u00b6 write \u00b6 [Source] Write a single sequence of bytes. be write( data: (String val | Array[U8 val] val), to: NetAddress val) Parameters \u00b6 data: ( String val | Array [ U8 val] val) to: NetAddress val writev \u00b6 [Source] Write a sequence of sequences of bytes. be writev( data: ByteSeqIter val, to: NetAddress val) Parameters \u00b6 data: ByteSeqIter val to: NetAddress val set_notify \u00b6 [Source] Change the notifier. be set_notify( notify: UDPNotify iso) Parameters \u00b6 notify: UDPNotify iso set_broadcast \u00b6 [Source] Enable or disable broadcasting from this socket. be set_broadcast( state: Bool val) Parameters \u00b6 state: Bool val set_multicast_interface \u00b6 [Source] By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string. be set_multicast_interface( from: String val = \"\") Parameters \u00b6 from: String val = \"\" set_multicast_loopback \u00b6 [Source] By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this. be set_multicast_loopback( loopback: Bool val) Parameters \u00b6 loopback: Bool val set_multicast_ttl \u00b6 [Source] Set the TTL for multicast sends. Defaults to 1. be set_multicast_ttl( ttl: U8 val) Parameters \u00b6 ttl: U8 val multicast_join \u00b6 [Source] Add a multicast group. This can be limited to packets arriving on a specific interface. be multicast_join( group: String val, to: String val = \"\") Parameters \u00b6 group: String val to: String val = \"\" multicast_leave \u00b6 [Source] Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group. be multicast_leave( group: String val, to: String val = \"\") Parameters \u00b6 group: String val to: String val = \"\" dispose \u00b6 [Source] Stop listening. be dispose() Public Functions \u00b6 local_address \u00b6 [Source] Return the bound IP address. fun box local_address() : NetAddress val Returns \u00b6 NetAddress val getsockopt \u00b6 [Source] General wrapper for UDP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) => match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) => try let br = Reader.create().>append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) => // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = 4) : (U32 val , Array[U8 val] iso^) Parameters \u00b6 level: I32 val option_name: I32 val option_max_size: USize val = 4 Returns \u00b6 ( U32 val , Array [ U8 val] iso^) getsockopt_u32 \u00b6 [Source] Wrapper for UDP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val) Parameters \u00b6 level: I32 val option_name: I32 val Returns \u00b6 ( U32 val , U32 val) setsockopt \u00b6 [Source] General wrapper for UDP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) => let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 => // System call was successful | let errno: U32 => // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters \u00b6 level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns \u00b6 U32 val setsockopt_u32 \u00b6 [Source] Wrapper for UDP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val Parameters \u00b6 level: I32 val option_name: I32 val option: U32 val Returns \u00b6 U32 val get_so_error \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) get_so_rcvbuf \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) get_so_sndbuf \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val) Returns \u00b6 ( U32 val , U32 val) set_ip_multicast_loop \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...) fun ref set_ip_multicast_loop( loopback: Bool val) : U32 val Parameters \u00b6 loopback: Bool val Returns \u00b6 U32 val set_ip_multicast_ttl \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...) fun ref set_ip_multicast_ttl( ttl: U8 val) : U32 val Parameters \u00b6 ttl: U8 val Returns \u00b6 U32 val set_so_broadcast \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...) fun ref set_so_broadcast( state: Bool val) : U32 val Parameters \u00b6 state: Bool val Returns \u00b6 U32 val set_so_rcvbuf \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val Parameters \u00b6 bufsize: U32 val Returns \u00b6 U32 val set_so_sndbuf \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val Parameters \u00b6 bufsize: U32 val Returns \u00b6 U32 val Private Behaviours \u00b6 _event_notify \u00b6 [Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again \u00b6 [Source] Resume reading. be _read_again() Private Functions \u00b6 _pending_reads \u00b6 [Source] Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. fun ref _pending_reads() : None val Returns \u00b6 None val _complete_reads \u00b6 [Source] The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val Parameters \u00b6 len: U32 val Returns \u00b6 None val _start_next_read \u00b6 [Source] Start our next receive. This is used only with IOCP on Windows. fun ref _start_next_read() : None val Returns \u00b6 None val _write \u00b6 [Source] Write the datagram to the socket. fun ref _write( data: (String val | Array[U8 val] val), to: NetAddress val) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) to: NetAddress val Returns \u00b6 None val _notify_listening \u00b6 [Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val Returns \u00b6 None val _close \u00b6 [Source] Inform the notifier that we've closed. fun ref _close() : None val Returns \u00b6 None val","title":"actor UDPSocket"},{"location":"net-UDPSocket/#udpsocket","text":"[Source] Creates a UDP socket that can be used for sending and receiving UDP messages. The following examples create: * an echo server that listens for connections and returns whatever message it receives * a client that connects to the server, sends a message, and prints the message it receives in response The server is implemented like this: use \"net\" class MyUDPNotify is UDPNotify fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => sock.write(consume data, from) fun ref not_listening(sock: UDPSocket ref) => None actor Main new create(env: Env) => try UDPSocket(env.root as AmbientAuth, MyUDPNotify, \"\", \"8989\") end The client is implemented like this: use \"net\" class MyUDPNotify is UDPNotify let _out: OutStream let _destination: NetAddress new create( out: OutStream, destination: NetAddress) => _out = out _destination = destination fun ref listening(sock: UDPSocket ref) => sock.write(\"hello world\", _destination) fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => _out.print(\"GOT:\" + String.from_array(consume data)) sock.dispose() fun ref not_listening(sock: UDPSocket ref) => None actor Main new create(env: Env) => try let destination = DNS.ip4(env.root as AmbientAuth, \"localhost\", \"8989\")(0)? UDPSocket(env.root as AmbientAuth, recover MyUDPNotify(env.out, consume destination) end) end actor tag UDPSocket","title":"UDPSocket"},{"location":"net-UDPSocket/#constructors","text":"","title":"Constructors"},{"location":"net-UDPSocket/#create","text":"[Source] Listens for both IPv4 and IPv6 datagrams. new tag create( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = \"\", service: String val = \"0\", size: USize val = 1024) : UDPSocket tag^","title":"create"},{"location":"net-UDPSocket/#parameters","text":"auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = \"\" service: String val = \"0\" size: USize val = 1024","title":"Parameters"},{"location":"net-UDPSocket/#returns","text":"UDPSocket tag^","title":"Returns"},{"location":"net-UDPSocket/#ip4","text":"[Source] Listens for IPv4 datagrams. new tag ip4( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = \"\", service: String val = \"0\", size: USize val = 1024) : UDPSocket tag^","title":"ip4"},{"location":"net-UDPSocket/#parameters_1","text":"auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = \"\" service: String val = \"0\" size: USize val = 1024","title":"Parameters"},{"location":"net-UDPSocket/#returns_1","text":"UDPSocket tag^","title":"Returns"},{"location":"net-UDPSocket/#ip6","text":"[Source] Listens for IPv6 datagrams. new tag ip6( auth: (AmbientAuth val | NetAuth val | UDPAuth val), notify: UDPNotify iso, host: String val = \"\", service: String val = \"0\", size: USize val = 1024) : UDPSocket tag^","title":"ip6"},{"location":"net-UDPSocket/#parameters_2","text":"auth: ( AmbientAuth val | NetAuth val | UDPAuth val) notify: UDPNotify iso host: String val = \"\" service: String val = \"0\" size: USize val = 1024","title":"Parameters"},{"location":"net-UDPSocket/#returns_2","text":"UDPSocket tag^","title":"Returns"},{"location":"net-UDPSocket/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"net-UDPSocket/#write","text":"[Source] Write a single sequence of bytes. be write( data: (String val | Array[U8 val] val), to: NetAddress val)","title":"write"},{"location":"net-UDPSocket/#parameters_3","text":"data: ( String val | Array [ U8 val] val) to: NetAddress val","title":"Parameters"},{"location":"net-UDPSocket/#writev","text":"[Source] Write a sequence of sequences of bytes. be writev( data: ByteSeqIter val, to: NetAddress val)","title":"writev"},{"location":"net-UDPSocket/#parameters_4","text":"data: ByteSeqIter val to: NetAddress val","title":"Parameters"},{"location":"net-UDPSocket/#set_notify","text":"[Source] Change the notifier. be set_notify( notify: UDPNotify iso)","title":"set_notify"},{"location":"net-UDPSocket/#parameters_5","text":"notify: UDPNotify iso","title":"Parameters"},{"location":"net-UDPSocket/#set_broadcast","text":"[Source] Enable or disable broadcasting from this socket. be set_broadcast( state: Bool val)","title":"set_broadcast"},{"location":"net-UDPSocket/#parameters_6","text":"state: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#set_multicast_interface","text":"[Source] By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string. be set_multicast_interface( from: String val = \"\")","title":"set_multicast_interface"},{"location":"net-UDPSocket/#parameters_7","text":"from: String val = \"\"","title":"Parameters"},{"location":"net-UDPSocket/#set_multicast_loopback","text":"[Source] By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this. be set_multicast_loopback( loopback: Bool val)","title":"set_multicast_loopback"},{"location":"net-UDPSocket/#parameters_8","text":"loopback: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#set_multicast_ttl","text":"[Source] Set the TTL for multicast sends. Defaults to 1. be set_multicast_ttl( ttl: U8 val)","title":"set_multicast_ttl"},{"location":"net-UDPSocket/#parameters_9","text":"ttl: U8 val","title":"Parameters"},{"location":"net-UDPSocket/#multicast_join","text":"[Source] Add a multicast group. This can be limited to packets arriving on a specific interface. be multicast_join( group: String val, to: String val = \"\")","title":"multicast_join"},{"location":"net-UDPSocket/#parameters_10","text":"group: String val to: String val = \"\"","title":"Parameters"},{"location":"net-UDPSocket/#multicast_leave","text":"[Source] Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group. be multicast_leave( group: String val, to: String val = \"\")","title":"multicast_leave"},{"location":"net-UDPSocket/#parameters_11","text":"group: String val to: String val = \"\"","title":"Parameters"},{"location":"net-UDPSocket/#dispose","text":"[Source] Stop listening. be dispose()","title":"dispose"},{"location":"net-UDPSocket/#public-functions","text":"","title":"Public Functions"},{"location":"net-UDPSocket/#local_address","text":"[Source] Return the bound IP address. fun box local_address() : NetAddress val","title":"local_address"},{"location":"net-UDPSocket/#returns_3","text":"NetAddress val","title":"Returns"},{"location":"net-UDPSocket/#getsockopt","text":"[Source] General wrapper for UDP sockets to the getsockopt(2) system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) => match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) => try let br = Reader.create().>append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) => // System call failed end fun ref getsockopt( level: I32 val, option_name: I32 val, option_max_size: USize val = 4) : (U32 val , Array[U8 val] iso^)","title":"getsockopt"},{"location":"net-UDPSocket/#parameters_12","text":"level: I32 val option_name: I32 val option_max_size: USize val = 4","title":"Parameters"},{"location":"net-UDPSocket/#returns_4","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-UDPSocket/#getsockopt_u32","text":"[Source] Wrapper for UDP sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun ref getsockopt_u32( level: I32 val, option_name: I32 val) : (U32 val , U32 val)","title":"getsockopt_u32"},{"location":"net-UDPSocket/#parameters_13","text":"level: I32 val option_name: I32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_5","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#setsockopt","text":"[Source] General wrapper for UDP sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. Usage example: // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) => let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 => // System call was successful | let errno: U32 => // System call failed end fun ref setsockopt( level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"setsockopt"},{"location":"net-UDPSocket/#parameters_14","text":"level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-UDPSocket/#returns_6","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#setsockopt_u32","text":"[Source] Wrapper for UDP sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun ref setsockopt_u32( level: I32 val, option_name: I32 val, option: U32 val) : U32 val","title":"setsockopt_u32"},{"location":"net-UDPSocket/#parameters_15","text":"level: I32 val option_name: I32 val option: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_7","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#get_so_error","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun ref get_so_error() : (U32 val , U32 val)","title":"get_so_error"},{"location":"net-UDPSocket/#returns_8","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#get_so_rcvbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref get_so_rcvbuf() : (U32 val , U32 val)","title":"get_so_rcvbuf"},{"location":"net-UDPSocket/#returns_9","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#get_so_sndbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref get_so_sndbuf() : (U32 val , U32 val)","title":"get_so_sndbuf"},{"location":"net-UDPSocket/#returns_10","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-UDPSocket/#set_ip_multicast_loop","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...) fun ref set_ip_multicast_loop( loopback: Bool val) : U32 val","title":"set_ip_multicast_loop"},{"location":"net-UDPSocket/#parameters_16","text":"loopback: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#returns_11","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_ip_multicast_ttl","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...) fun ref set_ip_multicast_ttl( ttl: U8 val) : U32 val","title":"set_ip_multicast_ttl"},{"location":"net-UDPSocket/#parameters_17","text":"ttl: U8 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_12","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_so_broadcast","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...) fun ref set_so_broadcast( state: Bool val) : U32 val","title":"set_so_broadcast"},{"location":"net-UDPSocket/#parameters_18","text":"state: Bool val","title":"Parameters"},{"location":"net-UDPSocket/#returns_13","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_so_rcvbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun ref set_so_rcvbuf( bufsize: U32 val) : U32 val","title":"set_so_rcvbuf"},{"location":"net-UDPSocket/#parameters_19","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_14","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#set_so_sndbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun ref set_so_sndbuf( bufsize: U32 val) : U32 val","title":"set_so_sndbuf"},{"location":"net-UDPSocket/#parameters_20","text":"bufsize: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_15","text":"U32 val","title":"Returns"},{"location":"net-UDPSocket/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"net-UDPSocket/#_event_notify","text":"[Source] When we are readable, we accept new connections until none remain. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"net-UDPSocket/#parameters_21","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#_read_again","text":"[Source] Resume reading. be _read_again()","title":"_read_again"},{"location":"net-UDPSocket/#private-functions","text":"","title":"Private Functions"},{"location":"net-UDPSocket/#_pending_reads","text":"[Source] Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. fun ref _pending_reads() : None val","title":"_pending_reads"},{"location":"net-UDPSocket/#returns_16","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_complete_reads","text":"[Source] The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows. fun ref _complete_reads( len: U32 val) : None val","title":"_complete_reads"},{"location":"net-UDPSocket/#parameters_22","text":"len: U32 val","title":"Parameters"},{"location":"net-UDPSocket/#returns_17","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_start_next_read","text":"[Source] Start our next receive. This is used only with IOCP on Windows. fun ref _start_next_read() : None val","title":"_start_next_read"},{"location":"net-UDPSocket/#returns_18","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_write","text":"[Source] Write the datagram to the socket. fun ref _write( data: (String val | Array[U8 val] val), to: NetAddress val) : None val","title":"_write"},{"location":"net-UDPSocket/#parameters_23","text":"data: ( String val | Array [ U8 val] val) to: NetAddress val","title":"Parameters"},{"location":"net-UDPSocket/#returns_19","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_notify_listening","text":"[Source] Inform the notifier that we're listening. fun ref _notify_listening() : None val","title":"_notify_listening"},{"location":"net-UDPSocket/#returns_20","text":"None val","title":"Returns"},{"location":"net-UDPSocket/#_close","text":"[Source] Inform the notifier that we've closed. fun ref _close() : None val","title":"_close"},{"location":"net-UDPSocket/#returns_21","text":"None val","title":"Returns"},{"location":"net-UDPSocketAuth/","text":"UDPSocketAuth \u00b6 [Source] type UDPSocketAuth is (AmbientAuth val | NetAuth val | UDPAuth val) Type Alias For \u00b6 ( AmbientAuth val | NetAuth val | UDPAuth val)","title":"type UDPSocketAuth"},{"location":"net-UDPSocketAuth/#udpsocketauth","text":"[Source] type UDPSocketAuth is (AmbientAuth val | NetAuth val | UDPAuth val)","title":"UDPSocketAuth"},{"location":"net-UDPSocketAuth/#type-alias-for","text":"( AmbientAuth val | NetAuth val | UDPAuth val)","title":"Type Alias For"},{"location":"net-_OSSocket/","text":"_OSSocket \u00b6 [Source] Socket type-independent wrapper functions for getsockopt(2) and setsockopt(2) system calls for internal net package use. primitive val _OSSocket Constructors \u00b6 create \u00b6 [Source] new val create() : _OSSocket val^ Returns \u00b6 _OSSocket val^ Public Functions \u00b6 get_so_error \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun box get_so_error( fd: U32 val) : (U32 val , U32 val) Parameters \u00b6 fd: U32 val Returns \u00b6 ( U32 val , U32 val) get_so_rcvbuf \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box get_so_rcvbuf( fd: U32 val) : (U32 val , U32 val) Parameters \u00b6 fd: U32 val Returns \u00b6 ( U32 val , U32 val) get_so_sndbuf \u00b6 [Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box get_so_sndbuf( fd: U32 val) : (U32 val , U32 val) Parameters \u00b6 fd: U32 val Returns \u00b6 ( U32 val , U32 val) set_so_rcvbuf \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box set_so_rcvbuf( fd: U32 val, bufsize: U32 val) : U32 val Parameters \u00b6 fd: U32 val bufsize: U32 val Returns \u00b6 U32 val set_so_sndbuf \u00b6 [Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box set_so_sndbuf( fd: U32 val, bufsize: U32 val) : U32 val Parameters \u00b6 fd: U32 val bufsize: U32 val Returns \u00b6 U32 val getsockopt \u00b6 [Source] General wrapper for sockets to the getsockopt(2) system call. The option_max_size argument is the maximum number of bytes that the caller expects the kernel to return via the system call's void * 4th argument. This function will allocate a Pony Array[U8] array of size option_max_size prior to calling getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val = 4) : (U32 val , Array[U8 val] iso^) Parameters \u00b6 fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val = 4 Returns \u00b6 ( U32 val , Array [ U8 val] iso^) getsockopt_u32 \u00b6 [Source] Wrapper for sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val) : (U32 val , U32 val) Parameters \u00b6 fd: U32 val level: I32 val option_name: I32 val Returns \u00b6 ( U32 val , U32 val) setsockopt \u00b6 [Source] General wrapper for sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. fun box setsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters \u00b6 fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns \u00b6 U32 val setsockopt_u32 \u00b6 [Source] Wrapper for sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun box setsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val, option: U32 val) : U32 val Parameters \u00b6 fd: U32 val level: I32 val option_name: I32 val option: U32 val Returns \u00b6 U32 val get_so \u00b6 [Source] Low-level interface to getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, errno is returned in the first element of the 2-tuple, and the second element's value is junk. fun box get_so( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val) : (U32 val , Array[U8 val] iso^) Parameters \u00b6 fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val Returns \u00b6 ( U32 val , Array [ U8 val] iso^) set_so \u00b6 [Source] fun box set_so( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val Parameters \u00b6 fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref Returns \u00b6 U32 val bytes4_to_u32 \u00b6 [Source] fun box bytes4_to_u32( b: Array[U8 val] ref) : U32 val ? Parameters \u00b6 b: Array [ U8 val] ref Returns \u00b6 U32 val ? u32_to_bytes4 \u00b6 [Source] fun box u32_to_bytes4( option: U32 val) : Array[U8 val] ref Parameters \u00b6 option: U32 val Returns \u00b6 Array [ U8 val] ref eq \u00b6 [Source] fun box eq( that: _OSSocket val) : Bool val Parameters \u00b6 that: _OSSocket val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _OSSocket val) : Bool val Parameters \u00b6 that: _OSSocket val Returns \u00b6 Bool val","title":"primitive _OSSocket"},{"location":"net-_OSSocket/#_ossocket","text":"[Source] Socket type-independent wrapper functions for getsockopt(2) and setsockopt(2) system calls for internal net package use. primitive val _OSSocket","title":"_OSSocket"},{"location":"net-_OSSocket/#constructors","text":"","title":"Constructors"},{"location":"net-_OSSocket/#create","text":"[Source] new val create() : _OSSocket val^","title":"create"},{"location":"net-_OSSocket/#returns","text":"_OSSocket val^","title":"Returns"},{"location":"net-_OSSocket/#public-functions","text":"","title":"Public Functions"},{"location":"net-_OSSocket/#get_so_error","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_ERROR, ...) fun box get_so_error( fd: U32 val) : (U32 val , U32 val)","title":"get_so_error"},{"location":"net-_OSSocket/#parameters","text":"fd: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_1","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#get_so_rcvbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box get_so_rcvbuf( fd: U32 val) : (U32 val , U32 val)","title":"get_so_rcvbuf"},{"location":"net-_OSSocket/#parameters_1","text":"fd: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_2","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#get_so_sndbuf","text":"[Source] Wrapper for the FFI call getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box get_so_sndbuf( fd: U32 val) : (U32 val , U32 val)","title":"get_so_sndbuf"},{"location":"net-_OSSocket/#parameters_2","text":"fd: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_3","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#set_so_rcvbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...) fun box set_so_rcvbuf( fd: U32 val, bufsize: U32 val) : U32 val","title":"set_so_rcvbuf"},{"location":"net-_OSSocket/#parameters_3","text":"fd: U32 val bufsize: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_4","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#set_so_sndbuf","text":"[Source] Wrapper for the FFI call setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...) fun box set_so_sndbuf( fd: U32 val, bufsize: U32 val) : U32 val","title":"set_so_sndbuf"},{"location":"net-_OSSocket/#parameters_4","text":"fd: U32 val bufsize: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_5","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#getsockopt","text":"[Source] General wrapper for sockets to the getsockopt(2) system call. The option_max_size argument is the maximum number of bytes that the caller expects the kernel to return via the system call's void * 4th argument. This function will allocate a Pony Array[U8] array of size option_max_size prior to calling getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val = 4) : (U32 val , Array[U8 val] iso^)","title":"getsockopt"},{"location":"net-_OSSocket/#parameters_5","text":"fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val = 4","title":"Parameters"},{"location":"net-_OSSocket/#returns_6","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-_OSSocket/#getsockopt_u32","text":"[Source] Wrapper for sockets to the getsockopt(2) system call where the kernel's returned option value is a C uint32_t type / Pony type U32 . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. The *option_value returned by the kernel converted to a Pony U32 . In case of system call failure, this function returns the 2-tuple: 1. The value of errno . 2. An undefined value that must be ignored. fun box getsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val) : (U32 val , U32 val)","title":"getsockopt_u32"},{"location":"net-_OSSocket/#parameters_6","text":"fd: U32 val level: I32 val option_name: I32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_7","text":"( U32 val , U32 val)","title":"Returns"},{"location":"net-_OSSocket/#setsockopt","text":"[Source] General wrapper for sockets to the setsockopt(2) system call. The caller is responsible for the correct size and byte contents of the option array for the requested level and option_name , including using the appropriate CPU endian byte order. This function returns 0 on success, else the value of errno on failure. fun box setsockopt( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"setsockopt"},{"location":"net-_OSSocket/#parameters_7","text":"fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-_OSSocket/#returns_8","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#setsockopt_u32","text":"[Source] Wrapper for sockets to the setsockopt(2) system call where the kernel expects an option value of a C uint32_t type / Pony type U32 . This function returns 0 on success, else the value of errno on failure. fun box setsockopt_u32( fd: U32 val, level: I32 val, option_name: I32 val, option: U32 val) : U32 val","title":"setsockopt_u32"},{"location":"net-_OSSocket/#parameters_8","text":"fd: U32 val level: I32 val option_name: I32 val option: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_9","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#get_so","text":"[Source] Low-level interface to getsockopt(2) . In case of system call success, this function returns the 2-tuple: 1. The integer 0 . 2. An Array[U8] of data returned by the system call's void * 4th argument. Its size is specified by the kernel via the system call's sockopt_len_t * 5th argument. In case of system call failure, errno is returned in the first element of the 2-tuple, and the second element's value is junk. fun box get_so( fd: U32 val, level: I32 val, option_name: I32 val, option_max_size: USize val) : (U32 val , Array[U8 val] iso^)","title":"get_so"},{"location":"net-_OSSocket/#parameters_9","text":"fd: U32 val level: I32 val option_name: I32 val option_max_size: USize val","title":"Parameters"},{"location":"net-_OSSocket/#returns_10","text":"( U32 val , Array [ U8 val] iso^)","title":"Returns"},{"location":"net-_OSSocket/#set_so","text":"[Source] fun box set_so( fd: U32 val, level: I32 val, option_name: I32 val, option: Array[U8 val] ref) : U32 val","title":"set_so"},{"location":"net-_OSSocket/#parameters_10","text":"fd: U32 val level: I32 val option_name: I32 val option: Array [ U8 val] ref","title":"Parameters"},{"location":"net-_OSSocket/#returns_11","text":"U32 val","title":"Returns"},{"location":"net-_OSSocket/#bytes4_to_u32","text":"[Source] fun box bytes4_to_u32( b: Array[U8 val] ref) : U32 val ?","title":"bytes4_to_u32"},{"location":"net-_OSSocket/#parameters_11","text":"b: Array [ U8 val] ref","title":"Parameters"},{"location":"net-_OSSocket/#returns_12","text":"U32 val ?","title":"Returns"},{"location":"net-_OSSocket/#u32_to_bytes4","text":"[Source] fun box u32_to_bytes4( option: U32 val) : Array[U8 val] ref","title":"u32_to_bytes4"},{"location":"net-_OSSocket/#parameters_12","text":"option: U32 val","title":"Parameters"},{"location":"net-_OSSocket/#returns_13","text":"Array [ U8 val] ref","title":"Returns"},{"location":"net-_OSSocket/#eq","text":"[Source] fun box eq( that: _OSSocket val) : Bool val","title":"eq"},{"location":"net-_OSSocket/#parameters_13","text":"that: _OSSocket val","title":"Parameters"},{"location":"net-_OSSocket/#returns_14","text":"Bool val","title":"Returns"},{"location":"net-_OSSocket/#ne","text":"[Source] fun box ne( that: _OSSocket val) : Bool val","title":"ne"},{"location":"net-_OSSocket/#parameters_14","text":"that: _OSSocket val","title":"Parameters"},{"location":"net-_OSSocket/#returns_15","text":"Bool val","title":"Returns"},{"location":"options--index/","text":"Options package \u00b6 The Options package provides support for parsing command line arguments. Deprectation warning \u00b6 This package is deprecated and will be removed in a future release. Use the cli package instead. Example program \u00b6 use \"options\" actor Main let _env: Env // Some values we can set via command line options var _a_string: String = \"default\" var _a_number: USize = 0 var _a_unumber: USize = 0 var _a_float: Float = F64(0.0) new create(env: Env) => _env = env try arguments()? end _env.out.print(\"The String is \" + _a_string) _env.out.print(\"The Number is \" + _a_number.string()) _env.out.print(\"The UNumber is \" + _a_unumber.string()) _env.out.print(\"The Float is \" + _a_float.string()) fun ref arguments() ? => var options = Options(_env.args) options .add(\"string\", \"t\", StringArgument) .add(\"number\", \"i\", I64Argument) .add(\"unumber\", \"u\", U64Argument) .add(\"float\", \"c\", F64Argument) for option in options do match option | (\"string\", let arg: String) => _a_string = arg | (\"number\", let arg: I64) => _a_number = arg.usize() | (\"unumber\", let arg: U64) => _a_unumber = arg.usize() | (\"float\", let arg: F64) => _a_float = arg | let err: ParseError => err.report(_env.out) ; usage() ; error end end fun ref usage() => // this exists inside a doc-string to create the docs you are reading // in real code, we would use a single string literal for this but // docstrings are themselves string literals and you can't put a // string literal in a string literal. That would lead to total // protonic reversal. In your own code, use a string literal instead // of string concatenation for this. _env.out.print( \"program [OPTIONS]\\n\" + \" --string N a string argument. Defaults to 'default'.\\n\" + \" --number N a number argument. Defaults to 0.\\n\" + \" --unumber N a unsigned number argument. Defaults to 0.\\n\" + \" --float N a floating point argument. Defaults to 0.0.\\n\" ) Public Types \u00b6 primitive StringArgument primitive I64Argument primitive U64Argument primitive F64Argument primitive Required primitive Optional primitive UnrecognisedOption primitive AmbiguousMatch primitive MissingArgument primitive InvalidArgument type ArgumentType type ErrorReason type ParsedOption interface ParseError class Options primitive EnvVars Private Types \u00b6 class _Option class _ErrorPrinter","title":"Package"},{"location":"options--index/#options-package","text":"The Options package provides support for parsing command line arguments.","title":"Options package"},{"location":"options--index/#deprectation-warning","text":"This package is deprecated and will be removed in a future release. Use the cli package instead.","title":"Deprectation warning"},{"location":"options--index/#example-program","text":"use \"options\" actor Main let _env: Env // Some values we can set via command line options var _a_string: String = \"default\" var _a_number: USize = 0 var _a_unumber: USize = 0 var _a_float: Float = F64(0.0) new create(env: Env) => _env = env try arguments()? end _env.out.print(\"The String is \" + _a_string) _env.out.print(\"The Number is \" + _a_number.string()) _env.out.print(\"The UNumber is \" + _a_unumber.string()) _env.out.print(\"The Float is \" + _a_float.string()) fun ref arguments() ? => var options = Options(_env.args) options .add(\"string\", \"t\", StringArgument) .add(\"number\", \"i\", I64Argument) .add(\"unumber\", \"u\", U64Argument) .add(\"float\", \"c\", F64Argument) for option in options do match option | (\"string\", let arg: String) => _a_string = arg | (\"number\", let arg: I64) => _a_number = arg.usize() | (\"unumber\", let arg: U64) => _a_unumber = arg.usize() | (\"float\", let arg: F64) => _a_float = arg | let err: ParseError => err.report(_env.out) ; usage() ; error end end fun ref usage() => // this exists inside a doc-string to create the docs you are reading // in real code, we would use a single string literal for this but // docstrings are themselves string literals and you can't put a // string literal in a string literal. That would lead to total // protonic reversal. In your own code, use a string literal instead // of string concatenation for this. _env.out.print( \"program [OPTIONS]\\n\" + \" --string N a string argument. Defaults to 'default'.\\n\" + \" --number N a number argument. Defaults to 0.\\n\" + \" --unumber N a unsigned number argument. Defaults to 0.\\n\" + \" --float N a floating point argument. Defaults to 0.0.\\n\" )","title":"Example program"},{"location":"options--index/#public-types","text":"primitive StringArgument primitive I64Argument primitive U64Argument primitive F64Argument primitive Required primitive Optional primitive UnrecognisedOption primitive AmbiguousMatch primitive MissingArgument primitive InvalidArgument type ArgumentType type ErrorReason type ParsedOption interface ParseError class Options primitive EnvVars","title":"Public Types"},{"location":"options--index/#private-types","text":"class _Option class _ErrorPrinter","title":"Private Types"},{"location":"options-AmbiguousMatch/","text":"AmbiguousMatch \u00b6 [Source] primitive val AmbiguousMatch Constructors \u00b6 create \u00b6 [Source] new val create() : AmbiguousMatch val^ Returns \u00b6 AmbiguousMatch val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: AmbiguousMatch val) : Bool val Parameters \u00b6 that: AmbiguousMatch val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: AmbiguousMatch val) : Bool val Parameters \u00b6 that: AmbiguousMatch val Returns \u00b6 Bool val","title":"primitive AmbiguousMatch"},{"location":"options-AmbiguousMatch/#ambiguousmatch","text":"[Source] primitive val AmbiguousMatch","title":"AmbiguousMatch"},{"location":"options-AmbiguousMatch/#constructors","text":"","title":"Constructors"},{"location":"options-AmbiguousMatch/#create","text":"[Source] new val create() : AmbiguousMatch val^","title":"create"},{"location":"options-AmbiguousMatch/#returns","text":"AmbiguousMatch val^","title":"Returns"},{"location":"options-AmbiguousMatch/#public-functions","text":"","title":"Public Functions"},{"location":"options-AmbiguousMatch/#eq","text":"[Source] fun box eq( that: AmbiguousMatch val) : Bool val","title":"eq"},{"location":"options-AmbiguousMatch/#parameters","text":"that: AmbiguousMatch val","title":"Parameters"},{"location":"options-AmbiguousMatch/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-AmbiguousMatch/#ne","text":"[Source] fun box ne( that: AmbiguousMatch val) : Bool val","title":"ne"},{"location":"options-AmbiguousMatch/#parameters_1","text":"that: AmbiguousMatch val","title":"Parameters"},{"location":"options-AmbiguousMatch/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-ArgumentType/","text":"ArgumentType \u00b6 [Source] type ArgumentType is (None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) Type Alias For \u00b6 ( None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val)","title":"type ArgumentType"},{"location":"options-ArgumentType/#argumenttype","text":"[Source] type ArgumentType is (None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val)","title":"ArgumentType"},{"location":"options-ArgumentType/#type-alias-for","text":"( None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val)","title":"Type Alias For"},{"location":"options-EnvVars/","text":"EnvVars \u00b6 [Source] primitive val EnvVars Constructors \u00b6 create \u00b6 [Source] new val create() : EnvVars val^ Returns \u00b6 EnvVars val^ Public Functions \u00b6 apply \u00b6 [Source] Turns an array of strings that look like environment variables, ie key=value, into a map from string to string. fun box apply( from: Array[String val] val) : HashMap[String val, String val, HashEq[String val] val] val Parameters \u00b6 from: Array [ String val] val Returns \u00b6 HashMap [ String val, String val, HashEq [ String val] val] val eq \u00b6 [Source] fun box eq( that: EnvVars val) : Bool val Parameters \u00b6 that: EnvVars val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: EnvVars val) : Bool val Parameters \u00b6 that: EnvVars val Returns \u00b6 Bool val","title":"primitive EnvVars"},{"location":"options-EnvVars/#envvars","text":"[Source] primitive val EnvVars","title":"EnvVars"},{"location":"options-EnvVars/#constructors","text":"","title":"Constructors"},{"location":"options-EnvVars/#create","text":"[Source] new val create() : EnvVars val^","title":"create"},{"location":"options-EnvVars/#returns","text":"EnvVars val^","title":"Returns"},{"location":"options-EnvVars/#public-functions","text":"","title":"Public Functions"},{"location":"options-EnvVars/#apply","text":"[Source] Turns an array of strings that look like environment variables, ie key=value, into a map from string to string. fun box apply( from: Array[String val] val) : HashMap[String val, String val, HashEq[String val] val] val","title":"apply"},{"location":"options-EnvVars/#parameters","text":"from: Array [ String val] val","title":"Parameters"},{"location":"options-EnvVars/#returns_1","text":"HashMap [ String val, String val, HashEq [ String val] val] val","title":"Returns"},{"location":"options-EnvVars/#eq","text":"[Source] fun box eq( that: EnvVars val) : Bool val","title":"eq"},{"location":"options-EnvVars/#parameters_1","text":"that: EnvVars val","title":"Parameters"},{"location":"options-EnvVars/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-EnvVars/#ne","text":"[Source] fun box ne( that: EnvVars val) : Bool val","title":"ne"},{"location":"options-EnvVars/#parameters_2","text":"that: EnvVars val","title":"Parameters"},{"location":"options-EnvVars/#returns_3","text":"Bool val","title":"Returns"},{"location":"options-ErrorReason/","text":"ErrorReason \u00b6 [Source] type ErrorReason is (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val) Type Alias For \u00b6 ( UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"type ErrorReason"},{"location":"options-ErrorReason/#errorreason","text":"[Source] type ErrorReason is (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"ErrorReason"},{"location":"options-ErrorReason/#type-alias-for","text":"( UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"Type Alias For"},{"location":"options-F64Argument/","text":"F64Argument \u00b6 [Source] primitive val F64Argument Constructors \u00b6 create \u00b6 [Source] new val create() : F64Argument val^ Returns \u00b6 F64Argument val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: F64Argument val) : Bool val Parameters \u00b6 that: F64Argument val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: F64Argument val) : Bool val Parameters \u00b6 that: F64Argument val Returns \u00b6 Bool val","title":"primitive F64Argument"},{"location":"options-F64Argument/#f64argument","text":"[Source] primitive val F64Argument","title":"F64Argument"},{"location":"options-F64Argument/#constructors","text":"","title":"Constructors"},{"location":"options-F64Argument/#create","text":"[Source] new val create() : F64Argument val^","title":"create"},{"location":"options-F64Argument/#returns","text":"F64Argument val^","title":"Returns"},{"location":"options-F64Argument/#public-functions","text":"","title":"Public Functions"},{"location":"options-F64Argument/#eq","text":"[Source] fun box eq( that: F64Argument val) : Bool val","title":"eq"},{"location":"options-F64Argument/#parameters","text":"that: F64Argument val","title":"Parameters"},{"location":"options-F64Argument/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-F64Argument/#ne","text":"[Source] fun box ne( that: F64Argument val) : Bool val","title":"ne"},{"location":"options-F64Argument/#parameters_1","text":"that: F64Argument val","title":"Parameters"},{"location":"options-F64Argument/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-I64Argument/","text":"I64Argument \u00b6 [Source] primitive val I64Argument Constructors \u00b6 create \u00b6 [Source] new val create() : I64Argument val^ Returns \u00b6 I64Argument val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: I64Argument val) : Bool val Parameters \u00b6 that: I64Argument val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: I64Argument val) : Bool val Parameters \u00b6 that: I64Argument val Returns \u00b6 Bool val","title":"primitive I64Argument"},{"location":"options-I64Argument/#i64argument","text":"[Source] primitive val I64Argument","title":"I64Argument"},{"location":"options-I64Argument/#constructors","text":"","title":"Constructors"},{"location":"options-I64Argument/#create","text":"[Source] new val create() : I64Argument val^","title":"create"},{"location":"options-I64Argument/#returns","text":"I64Argument val^","title":"Returns"},{"location":"options-I64Argument/#public-functions","text":"","title":"Public Functions"},{"location":"options-I64Argument/#eq","text":"[Source] fun box eq( that: I64Argument val) : Bool val","title":"eq"},{"location":"options-I64Argument/#parameters","text":"that: I64Argument val","title":"Parameters"},{"location":"options-I64Argument/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-I64Argument/#ne","text":"[Source] fun box ne( that: I64Argument val) : Bool val","title":"ne"},{"location":"options-I64Argument/#parameters_1","text":"that: I64Argument val","title":"Parameters"},{"location":"options-I64Argument/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-InvalidArgument/","text":"InvalidArgument \u00b6 [Source] primitive val InvalidArgument Constructors \u00b6 create \u00b6 [Source] new val create() : InvalidArgument val^ Returns \u00b6 InvalidArgument val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: InvalidArgument val) : Bool val Parameters \u00b6 that: InvalidArgument val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InvalidArgument val) : Bool val Parameters \u00b6 that: InvalidArgument val Returns \u00b6 Bool val","title":"primitive InvalidArgument"},{"location":"options-InvalidArgument/#invalidargument","text":"[Source] primitive val InvalidArgument","title":"InvalidArgument"},{"location":"options-InvalidArgument/#constructors","text":"","title":"Constructors"},{"location":"options-InvalidArgument/#create","text":"[Source] new val create() : InvalidArgument val^","title":"create"},{"location":"options-InvalidArgument/#returns","text":"InvalidArgument val^","title":"Returns"},{"location":"options-InvalidArgument/#public-functions","text":"","title":"Public Functions"},{"location":"options-InvalidArgument/#eq","text":"[Source] fun box eq( that: InvalidArgument val) : Bool val","title":"eq"},{"location":"options-InvalidArgument/#parameters","text":"that: InvalidArgument val","title":"Parameters"},{"location":"options-InvalidArgument/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-InvalidArgument/#ne","text":"[Source] fun box ne( that: InvalidArgument val) : Bool val","title":"ne"},{"location":"options-InvalidArgument/#parameters_1","text":"that: InvalidArgument val","title":"Parameters"},{"location":"options-InvalidArgument/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-MissingArgument/","text":"MissingArgument \u00b6 [Source] primitive val MissingArgument Constructors \u00b6 create \u00b6 [Source] new val create() : MissingArgument val^ Returns \u00b6 MissingArgument val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: MissingArgument val) : Bool val Parameters \u00b6 that: MissingArgument val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MissingArgument val) : Bool val Parameters \u00b6 that: MissingArgument val Returns \u00b6 Bool val","title":"primitive MissingArgument"},{"location":"options-MissingArgument/#missingargument","text":"[Source] primitive val MissingArgument","title":"MissingArgument"},{"location":"options-MissingArgument/#constructors","text":"","title":"Constructors"},{"location":"options-MissingArgument/#create","text":"[Source] new val create() : MissingArgument val^","title":"create"},{"location":"options-MissingArgument/#returns","text":"MissingArgument val^","title":"Returns"},{"location":"options-MissingArgument/#public-functions","text":"","title":"Public Functions"},{"location":"options-MissingArgument/#eq","text":"[Source] fun box eq( that: MissingArgument val) : Bool val","title":"eq"},{"location":"options-MissingArgument/#parameters","text":"that: MissingArgument val","title":"Parameters"},{"location":"options-MissingArgument/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-MissingArgument/#ne","text":"[Source] fun box ne( that: MissingArgument val) : Bool val","title":"ne"},{"location":"options-MissingArgument/#parameters_1","text":"that: MissingArgument val","title":"Parameters"},{"location":"options-MissingArgument/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-Optional/","text":"Optional \u00b6 [Source] primitive val Optional Constructors \u00b6 create \u00b6 [Source] new val create() : Optional val^ Returns \u00b6 Optional val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: Optional val) : Bool val Parameters \u00b6 that: Optional val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Optional val) : Bool val Parameters \u00b6 that: Optional val Returns \u00b6 Bool val","title":"primitive Optional"},{"location":"options-Optional/#optional","text":"[Source] primitive val Optional","title":"Optional"},{"location":"options-Optional/#constructors","text":"","title":"Constructors"},{"location":"options-Optional/#create","text":"[Source] new val create() : Optional val^","title":"create"},{"location":"options-Optional/#returns","text":"Optional val^","title":"Returns"},{"location":"options-Optional/#public-functions","text":"","title":"Public Functions"},{"location":"options-Optional/#eq","text":"[Source] fun box eq( that: Optional val) : Bool val","title":"eq"},{"location":"options-Optional/#parameters","text":"that: Optional val","title":"Parameters"},{"location":"options-Optional/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-Optional/#ne","text":"[Source] fun box ne( that: Optional val) : Bool val","title":"ne"},{"location":"options-Optional/#parameters_1","text":"that: Optional val","title":"Parameters"},{"location":"options-Optional/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-Options/","text":"Options \u00b6 [Source] class ref Options is Iterator[((String val , (None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val)] ref Implements \u00b6 Iterator [(( String val , ( None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val)] ref Constructors \u00b6 create \u00b6 [Source] new ref create( args: Array[String val] box, fatal: Bool val = true) : Options ref^ Parameters \u00b6 args: Array [ String val] box fatal: Bool val = true Returns \u00b6 Options ref^ Public Functions \u00b6 add \u00b6 [Source] Adds a new named option to the parser configuration. fun ref add( long: String val, short: (None val | String val) = reference, arg: (None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) = reference, mode: (Required val | Optional val) = reference) : Options ref Parameters \u00b6 long: String val short: ( None val | String val) = reference arg: ( None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) = reference mode: ( Required val | Optional val) = reference Returns \u00b6 Options ref remaining \u00b6 [Source] Returns all unprocessed command line arguments. After parsing all options, this will only include positional arguments, potentially unrecognised and ambiguous options and invalid arguments. fun ref remaining() : Array[String ref] ref Returns \u00b6 Array [ String ref] ref has_next \u00b6 [Source] Parsing options is done if either an error occurs and fatal error reporting is turned on, or if all command line arguments have been processed. fun box has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] Skips all positional arguments and attemps to match named options. Returns a ParsedOption on success, a ParseError on error, or None if no named options are found. fun ref next() : ((String val , (None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val) Returns \u00b6 (( String val , ( None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val) Private Functions \u00b6 _strip \u00b6 [Source] Strips accepted options from the copied array of command line arguments. fun ref _strip( opt: _Option ref, matched: String ref, start: ISize val, finish: ISize val) : None val Parameters \u00b6 opt: _Option ref matched: String ref start: ISize val finish: ISize val Returns \u00b6 None val _select \u00b6 [Source] Selects an option from the configuration depending on the current command line argument. fun ref _select( candidate: String ref, start: ISize val, offset: ISize val, finish: ISize val) : (_Option ref | ParseError ref) Parameters \u00b6 candidate: String ref start: ISize val offset: ISize val finish: ISize val Returns \u00b6 ( _Option ref | ParseError ref) _skip \u00b6 [Source] Skips all non-options. Returns true if a named option has been found, false otherwise. fun ref _skip() : Bool val Returns \u00b6 Bool val _verify \u00b6 [Source] Verifies whether a parsed option from the command line is well-formed. That is, checking whether required or optional arguments are supplied. Returns a ParsedOption on success, a ParseError otherwise. fun ref _verify( opt: _Option ref, combined: Bool val) : ((String val , (None val | String val | I64 val | U64 val | F64 val)) | ParseError ref) Parameters \u00b6 opt: _Option ref combined: Bool val Returns \u00b6 (( String val , ( None val | String val | I64 val | U64 val | F64 val)) | ParseError ref)","title":"class Options"},{"location":"options-Options/#options","text":"[Source] class ref Options is Iterator[((String val , (None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val)] ref","title":"Options"},{"location":"options-Options/#implements","text":"Iterator [(( String val , ( None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val)] ref","title":"Implements"},{"location":"options-Options/#constructors","text":"","title":"Constructors"},{"location":"options-Options/#create","text":"[Source] new ref create( args: Array[String val] box, fatal: Bool val = true) : Options ref^","title":"create"},{"location":"options-Options/#parameters","text":"args: Array [ String val] box fatal: Bool val = true","title":"Parameters"},{"location":"options-Options/#returns","text":"Options ref^","title":"Returns"},{"location":"options-Options/#public-functions","text":"","title":"Public Functions"},{"location":"options-Options/#add","text":"[Source] Adds a new named option to the parser configuration. fun ref add( long: String val, short: (None val | String val) = reference, arg: (None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) = reference, mode: (Required val | Optional val) = reference) : Options ref","title":"add"},{"location":"options-Options/#parameters_1","text":"long: String val short: ( None val | String val) = reference arg: ( None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) = reference mode: ( Required val | Optional val) = reference","title":"Parameters"},{"location":"options-Options/#returns_1","text":"Options ref","title":"Returns"},{"location":"options-Options/#remaining","text":"[Source] Returns all unprocessed command line arguments. After parsing all options, this will only include positional arguments, potentially unrecognised and ambiguous options and invalid arguments. fun ref remaining() : Array[String ref] ref","title":"remaining"},{"location":"options-Options/#returns_2","text":"Array [ String ref] ref","title":"Returns"},{"location":"options-Options/#has_next","text":"[Source] Parsing options is done if either an error occurs and fatal error reporting is turned on, or if all command line arguments have been processed. fun box has_next() : Bool val","title":"has_next"},{"location":"options-Options/#returns_3","text":"Bool val","title":"Returns"},{"location":"options-Options/#next","text":"[Source] Skips all positional arguments and attemps to match named options. Returns a ParsedOption on success, a ParseError on error, or None if no named options are found. fun ref next() : ((String val , (None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val)","title":"next"},{"location":"options-Options/#returns_4","text":"(( String val , ( None val | String val | I64 val | U64 val | F64 val)) | ParseError ref | None val)","title":"Returns"},{"location":"options-Options/#private-functions","text":"","title":"Private Functions"},{"location":"options-Options/#_strip","text":"[Source] Strips accepted options from the copied array of command line arguments. fun ref _strip( opt: _Option ref, matched: String ref, start: ISize val, finish: ISize val) : None val","title":"_strip"},{"location":"options-Options/#parameters_2","text":"opt: _Option ref matched: String ref start: ISize val finish: ISize val","title":"Parameters"},{"location":"options-Options/#returns_5","text":"None val","title":"Returns"},{"location":"options-Options/#_select","text":"[Source] Selects an option from the configuration depending on the current command line argument. fun ref _select( candidate: String ref, start: ISize val, offset: ISize val, finish: ISize val) : (_Option ref | ParseError ref)","title":"_select"},{"location":"options-Options/#parameters_3","text":"candidate: String ref start: ISize val offset: ISize val finish: ISize val","title":"Parameters"},{"location":"options-Options/#returns_6","text":"( _Option ref | ParseError ref)","title":"Returns"},{"location":"options-Options/#_skip","text":"[Source] Skips all non-options. Returns true if a named option has been found, false otherwise. fun ref _skip() : Bool val","title":"_skip"},{"location":"options-Options/#returns_7","text":"Bool val","title":"Returns"},{"location":"options-Options/#_verify","text":"[Source] Verifies whether a parsed option from the command line is well-formed. That is, checking whether required or optional arguments are supplied. Returns a ParsedOption on success, a ParseError otherwise. fun ref _verify( opt: _Option ref, combined: Bool val) : ((String val , (None val | String val | I64 val | U64 val | F64 val)) | ParseError ref)","title":"_verify"},{"location":"options-Options/#parameters_4","text":"opt: _Option ref combined: Bool val","title":"Parameters"},{"location":"options-Options/#returns_8","text":"(( String val , ( None val | String val | I64 val | U64 val | F64 val)) | ParseError ref)","title":"Returns"},{"location":"options-ParseError/","text":"ParseError \u00b6 [Source] interface ref ParseError Public Functions \u00b6 reason \u00b6 [Source] fun box reason() : (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val) Returns \u00b6 ( UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val) report \u00b6 [Source] fun box report( out: OutStream tag) : None val Parameters \u00b6 out: OutStream tag Returns \u00b6 None val","title":"interface ParseError"},{"location":"options-ParseError/#parseerror","text":"[Source] interface ref ParseError","title":"ParseError"},{"location":"options-ParseError/#public-functions","text":"","title":"Public Functions"},{"location":"options-ParseError/#reason","text":"[Source] fun box reason() : (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"reason"},{"location":"options-ParseError/#returns","text":"( UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"Returns"},{"location":"options-ParseError/#report","text":"[Source] fun box report( out: OutStream tag) : None val","title":"report"},{"location":"options-ParseError/#parameters","text":"out: OutStream tag","title":"Parameters"},{"location":"options-ParseError/#returns_1","text":"None val","title":"Returns"},{"location":"options-ParsedOption/","text":"ParsedOption \u00b6 [Source] type ParsedOption is (String val , (None val | String val | I64 val | U64 val | F64 val)) Type Alias For \u00b6 ( String val , ( None val | String val | I64 val | U64 val | F64 val))","title":"type ParsedOption"},{"location":"options-ParsedOption/#parsedoption","text":"[Source] type ParsedOption is (String val , (None val | String val | I64 val | U64 val | F64 val))","title":"ParsedOption"},{"location":"options-ParsedOption/#type-alias-for","text":"( String val , ( None val | String val | I64 val | U64 val | F64 val))","title":"Type Alias For"},{"location":"options-Required/","text":"Required \u00b6 [Source] primitive val Required Constructors \u00b6 create \u00b6 [Source] new val create() : Required val^ Returns \u00b6 Required val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: Required val) : Bool val Parameters \u00b6 that: Required val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Required val) : Bool val Parameters \u00b6 that: Required val Returns \u00b6 Bool val","title":"primitive Required"},{"location":"options-Required/#required","text":"[Source] primitive val Required","title":"Required"},{"location":"options-Required/#constructors","text":"","title":"Constructors"},{"location":"options-Required/#create","text":"[Source] new val create() : Required val^","title":"create"},{"location":"options-Required/#returns","text":"Required val^","title":"Returns"},{"location":"options-Required/#public-functions","text":"","title":"Public Functions"},{"location":"options-Required/#eq","text":"[Source] fun box eq( that: Required val) : Bool val","title":"eq"},{"location":"options-Required/#parameters","text":"that: Required val","title":"Parameters"},{"location":"options-Required/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-Required/#ne","text":"[Source] fun box ne( that: Required val) : Bool val","title":"ne"},{"location":"options-Required/#parameters_1","text":"that: Required val","title":"Parameters"},{"location":"options-Required/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-StringArgument/","text":"StringArgument \u00b6 [Source] primitive val StringArgument Constructors \u00b6 create \u00b6 [Source] new val create() : StringArgument val^ Returns \u00b6 StringArgument val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: StringArgument val) : Bool val Parameters \u00b6 that: StringArgument val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StringArgument val) : Bool val Parameters \u00b6 that: StringArgument val Returns \u00b6 Bool val","title":"primitive StringArgument"},{"location":"options-StringArgument/#stringargument","text":"[Source] primitive val StringArgument","title":"StringArgument"},{"location":"options-StringArgument/#constructors","text":"","title":"Constructors"},{"location":"options-StringArgument/#create","text":"[Source] new val create() : StringArgument val^","title":"create"},{"location":"options-StringArgument/#returns","text":"StringArgument val^","title":"Returns"},{"location":"options-StringArgument/#public-functions","text":"","title":"Public Functions"},{"location":"options-StringArgument/#eq","text":"[Source] fun box eq( that: StringArgument val) : Bool val","title":"eq"},{"location":"options-StringArgument/#parameters","text":"that: StringArgument val","title":"Parameters"},{"location":"options-StringArgument/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-StringArgument/#ne","text":"[Source] fun box ne( that: StringArgument val) : Bool val","title":"ne"},{"location":"options-StringArgument/#parameters_1","text":"that: StringArgument val","title":"Parameters"},{"location":"options-StringArgument/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-U64Argument/","text":"U64Argument \u00b6 [Source] primitive val U64Argument Constructors \u00b6 create \u00b6 [Source] new val create() : U64Argument val^ Returns \u00b6 U64Argument val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: U64Argument val) : Bool val Parameters \u00b6 that: U64Argument val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: U64Argument val) : Bool val Parameters \u00b6 that: U64Argument val Returns \u00b6 Bool val","title":"primitive U64Argument"},{"location":"options-U64Argument/#u64argument","text":"[Source] primitive val U64Argument","title":"U64Argument"},{"location":"options-U64Argument/#constructors","text":"","title":"Constructors"},{"location":"options-U64Argument/#create","text":"[Source] new val create() : U64Argument val^","title":"create"},{"location":"options-U64Argument/#returns","text":"U64Argument val^","title":"Returns"},{"location":"options-U64Argument/#public-functions","text":"","title":"Public Functions"},{"location":"options-U64Argument/#eq","text":"[Source] fun box eq( that: U64Argument val) : Bool val","title":"eq"},{"location":"options-U64Argument/#parameters","text":"that: U64Argument val","title":"Parameters"},{"location":"options-U64Argument/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-U64Argument/#ne","text":"[Source] fun box ne( that: U64Argument val) : Bool val","title":"ne"},{"location":"options-U64Argument/#parameters_1","text":"that: U64Argument val","title":"Parameters"},{"location":"options-U64Argument/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-UnrecognisedOption/","text":"UnrecognisedOption \u00b6 [Source] primitive val UnrecognisedOption Constructors \u00b6 create \u00b6 [Source] new val create() : UnrecognisedOption val^ Returns \u00b6 UnrecognisedOption val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: UnrecognisedOption val) : Bool val Parameters \u00b6 that: UnrecognisedOption val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: UnrecognisedOption val) : Bool val Parameters \u00b6 that: UnrecognisedOption val Returns \u00b6 Bool val","title":"primitive UnrecognisedOption"},{"location":"options-UnrecognisedOption/#unrecognisedoption","text":"[Source] primitive val UnrecognisedOption","title":"UnrecognisedOption"},{"location":"options-UnrecognisedOption/#constructors","text":"","title":"Constructors"},{"location":"options-UnrecognisedOption/#create","text":"[Source] new val create() : UnrecognisedOption val^","title":"create"},{"location":"options-UnrecognisedOption/#returns","text":"UnrecognisedOption val^","title":"Returns"},{"location":"options-UnrecognisedOption/#public-functions","text":"","title":"Public Functions"},{"location":"options-UnrecognisedOption/#eq","text":"[Source] fun box eq( that: UnrecognisedOption val) : Bool val","title":"eq"},{"location":"options-UnrecognisedOption/#parameters","text":"that: UnrecognisedOption val","title":"Parameters"},{"location":"options-UnrecognisedOption/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-UnrecognisedOption/#ne","text":"[Source] fun box ne( that: UnrecognisedOption val) : Bool val","title":"ne"},{"location":"options-UnrecognisedOption/#parameters_1","text":"that: UnrecognisedOption val","title":"Parameters"},{"location":"options-UnrecognisedOption/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-_ErrorPrinter/","text":"_ErrorPrinter \u00b6 [Source] class ref _ErrorPrinter Constructors \u00b6 _ambiguous \u00b6 [Source] new ref _ambiguous( matches: Array[_Option ref] ref) : _ErrorPrinter ref^ Parameters \u00b6 matches: Array [ _Option ref] ref Returns \u00b6 _ErrorPrinter ref^ _unrecognised \u00b6 [Source] new ref _unrecognised( option: String box) : _ErrorPrinter ref^ Parameters \u00b6 option: String box Returns \u00b6 _ErrorPrinter ref^ _invalid \u00b6 [Source] new ref _invalid( argument: String box, option: _Option ref) : _ErrorPrinter ref^ Parameters \u00b6 argument: String box option: _Option ref Returns \u00b6 _ErrorPrinter ref^ _missing \u00b6 [Source] new ref _missing( option: _Option ref) : _ErrorPrinter ref^ Parameters \u00b6 option: _Option ref Returns \u00b6 _ErrorPrinter ref^ Public Functions \u00b6 reason \u00b6 [Source] fun box reason() : (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val) Returns \u00b6 ( UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val) report \u00b6 [Source] fun box report( out: OutStream tag) : None val Parameters \u00b6 out: OutStream tag Returns \u00b6 None val","title":"class _ErrorPrinter"},{"location":"options-_ErrorPrinter/#_errorprinter","text":"[Source] class ref _ErrorPrinter","title":"_ErrorPrinter"},{"location":"options-_ErrorPrinter/#constructors","text":"","title":"Constructors"},{"location":"options-_ErrorPrinter/#_ambiguous","text":"[Source] new ref _ambiguous( matches: Array[_Option ref] ref) : _ErrorPrinter ref^","title":"_ambiguous"},{"location":"options-_ErrorPrinter/#parameters","text":"matches: Array [ _Option ref] ref","title":"Parameters"},{"location":"options-_ErrorPrinter/#returns","text":"_ErrorPrinter ref^","title":"Returns"},{"location":"options-_ErrorPrinter/#_unrecognised","text":"[Source] new ref _unrecognised( option: String box) : _ErrorPrinter ref^","title":"_unrecognised"},{"location":"options-_ErrorPrinter/#parameters_1","text":"option: String box","title":"Parameters"},{"location":"options-_ErrorPrinter/#returns_1","text":"_ErrorPrinter ref^","title":"Returns"},{"location":"options-_ErrorPrinter/#_invalid","text":"[Source] new ref _invalid( argument: String box, option: _Option ref) : _ErrorPrinter ref^","title":"_invalid"},{"location":"options-_ErrorPrinter/#parameters_2","text":"argument: String box option: _Option ref","title":"Parameters"},{"location":"options-_ErrorPrinter/#returns_2","text":"_ErrorPrinter ref^","title":"Returns"},{"location":"options-_ErrorPrinter/#_missing","text":"[Source] new ref _missing( option: _Option ref) : _ErrorPrinter ref^","title":"_missing"},{"location":"options-_ErrorPrinter/#parameters_3","text":"option: _Option ref","title":"Parameters"},{"location":"options-_ErrorPrinter/#returns_3","text":"_ErrorPrinter ref^","title":"Returns"},{"location":"options-_ErrorPrinter/#public-functions","text":"","title":"Public Functions"},{"location":"options-_ErrorPrinter/#reason","text":"[Source] fun box reason() : (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"reason"},{"location":"options-_ErrorPrinter/#returns_4","text":"( UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)","title":"Returns"},{"location":"options-_ErrorPrinter/#report","text":"[Source] fun box report( out: OutStream tag) : None val","title":"report"},{"location":"options-_ErrorPrinter/#parameters_4","text":"out: OutStream tag","title":"Parameters"},{"location":"options-_ErrorPrinter/#returns_5","text":"None val","title":"Returns"},{"location":"options-_Option/","text":"_Option \u00b6 [Source] class ref _Option Constructors \u00b6 create \u00b6 [Source] new ref create( long': String val, short': (String val | None val), arg': (None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val), mode': (Required val | Optional val)) : _Option ref^ Parameters \u00b6 long': String val short': ( String val | None val) arg': ( None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) mode': ( Required val | Optional val) Returns \u00b6 _Option ref^ Public fields \u00b6 let long: String val \u00b6 [Source] Long option name. E.g. \"help\" for a \"--help\" option. let short: ( String val | None val) \u00b6 [Source] Short option name (if any). E.g. \"h\" for a \"-h\" option. let arg: ( None val | StringArgument val | I64Argument val | \u00b6 [U64Argument](options-U64Argument.md) val | [F64Argument](options-F64Argument.md) val) [Source] The type of the expected argument. None, if this option is a flag. E.g. \"--help\" let mode: ( Required val | Optional val) \u00b6 [Source] determining if this Option is required or optional Public Functions \u00b6 matches \u00b6 [Source] fun box matches( name: String box, shortmatch: Bool val) : Bool val Parameters \u00b6 name: String box shortmatch: Bool val Returns \u00b6 Bool val has_argument \u00b6 [Source] fun box has_argument() : Bool val Returns \u00b6 Bool val requires_argument \u00b6 [Source] fun box requires_argument() : Bool val Returns \u00b6 Bool val accepts \u00b6 [Source] fun box accepts( argument: String box) : Bool val Parameters \u00b6 argument: String box Returns \u00b6 Bool val","title":"class _Option"},{"location":"options-_Option/#_option","text":"[Source] class ref _Option","title":"_Option"},{"location":"options-_Option/#constructors","text":"","title":"Constructors"},{"location":"options-_Option/#create","text":"[Source] new ref create( long': String val, short': (String val | None val), arg': (None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val), mode': (Required val | Optional val)) : _Option ref^","title":"create"},{"location":"options-_Option/#parameters","text":"long': String val short': ( String val | None val) arg': ( None val | StringArgument val | I64Argument val | U64Argument val | F64Argument val) mode': ( Required val | Optional val)","title":"Parameters"},{"location":"options-_Option/#returns","text":"_Option ref^","title":"Returns"},{"location":"options-_Option/#public-fields","text":"","title":"Public fields"},{"location":"options-_Option/#let-long-string-val","text":"[Source] Long option name. E.g. \"help\" for a \"--help\" option.","title":"let long: String val"},{"location":"options-_Option/#let-short-string-val-none-val","text":"[Source] Short option name (if any). E.g. \"h\" for a \"-h\" option.","title":"let short: (String val | None val)"},{"location":"options-_Option/#let-arg-none-val-stringargument-val-i64argument-val","text":"[U64Argument](options-U64Argument.md) val | [F64Argument](options-F64Argument.md) val) [Source] The type of the expected argument. None, if this option is a flag. E.g. \"--help\"","title":"let arg: (None val | StringArgument val | I64Argument val |"},{"location":"options-_Option/#let-mode-required-val-optional-val","text":"[Source] determining if this Option is required or optional","title":"let mode: (Required val | Optional val)"},{"location":"options-_Option/#public-functions","text":"","title":"Public Functions"},{"location":"options-_Option/#matches","text":"[Source] fun box matches( name: String box, shortmatch: Bool val) : Bool val","title":"matches"},{"location":"options-_Option/#parameters_1","text":"name: String box shortmatch: Bool val","title":"Parameters"},{"location":"options-_Option/#returns_1","text":"Bool val","title":"Returns"},{"location":"options-_Option/#has_argument","text":"[Source] fun box has_argument() : Bool val","title":"has_argument"},{"location":"options-_Option/#returns_2","text":"Bool val","title":"Returns"},{"location":"options-_Option/#requires_argument","text":"[Source] fun box requires_argument() : Bool val","title":"requires_argument"},{"location":"options-_Option/#returns_3","text":"Bool val","title":"Returns"},{"location":"options-_Option/#accepts","text":"[Source] fun box accepts( argument: String box) : Bool val","title":"accepts"},{"location":"options-_Option/#parameters_2","text":"argument: String box","title":"Parameters"},{"location":"options-_Option/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponybench--index/","text":"PonyBench provides a microbenchmarking framework. It is designed to measure the runtime of synchronous and asynchronous operations. Example Program \u00b6 The following is a complete program with multiple trivial benchmarks followed by their output. use \"time\" actor Main is BenchmarkList new create(env: Env) => PonyBench(env, this) fun tag benchmarks(bench: PonyBench) => bench(_Nothing) bench(_Fib(5)) bench(_Fib(10)) bench(_Fib(20)) bench(_Timer(10_000)) class iso _Nothing is MicroBenchmark // Benchmark absolutely nothing. fun name(): String => \"Nothing\" fun apply() => // prevent compiler from optimizing out this operation DoNotOptimise[None](None) DoNotOptimise.observe() class iso _Fib is MicroBenchmark // Benchmark non-tail-recursive fibonacci let _n: U64 new iso create(n: U64) => _n = n fun name(): String => \"_Fib(\" + _n.string() + \")\" fun apply() => DoNotOptimise[U64](_fib(_n)) DoNotOptimise.observe() fun _fib(n: U64): U64 => if n < 2 then 1 else _fib(n - 1) + _fib(n - 2) end class iso _Timer is AsyncMicroBenchmark // Asynchronous benchmark of timer. let _ts: Timers = Timers let _ns: U64 new iso create(ns: U64) => _ns = ns fun name(): String => \"_Timer (\" + _ns.string() + \" ns)\" fun apply(c: AsyncBenchContinue) => _ts(Timer( object iso is TimerNotify fun apply(timer: Timer, count: U64 = 0): Bool => // signal completion of async benchmark iteration when timer fires c.complete() false end, _ns)) By default, the results are printed to stdout like so: Benchmark results will have their mean and median adjusted for overhead. You may disable this with --noadjust. Benchmark mean median deviation iterations Nothing 1 ns 1 ns \u00b10.87% 3000000 _Fib(5) 12 ns 12 ns \u00b11.02% 2000000 _Fib(10) 185 ns 184 ns \u00b11.03% 1000000 _Fib(20) 23943 ns 23898 ns \u00b11.11% 10000 _Timer (10000ns) 10360 ns 10238 ns \u00b13.25% 10000 The --noadjust option outputs results of the overhead measured prior to each benchmark run followed by the unadjusted benchmark result. An example of the output of this program with --noadjust is as follows: Benchmark mean median deviation iterations Benchmark Overhead 604 ns 603 ns \u00b10.58% 300000 Nothing 553 ns 553 ns \u00b10.30% 300000 Benchmark Overhead 555 ns 555 ns \u00b10.51% 300000 _Fib(5) 574 ns 574 ns \u00b10.43% 300000 Benchmark Overhead 554 ns 556 ns \u00b10.48% 300000 _Fib(10) 822 ns 821 ns \u00b10.39% 200000 Benchmark Overhead 554 ns 553 ns \u00b10.65% 300000 _Fib(20) 30470 ns 30304 ns \u00b11.55% 5000 Benchmark Overhead 552 ns 552 ns \u00b10.39% 300000 _Timer (10000 ns) 10780 ns 10800 ns \u00b13.60% 10000 It is recommended that a PonyBench program is compiled with the --runtimebc option, if possible, and run with the --ponynoyield option. Public Types \u00b6 actor PonyBench type Benchmark trait MicroBenchmark trait AsyncMicroBenchmark interface BenchmarkList class BenchConfig class OverheadBenchmark class AsyncOverheadBenchmark class AsyncBenchContinue Private Types \u00b6 trait _Runner actor _RunSync actor _RunAsync class _Results interface _OutputManager class _TerminalOutput class _CSVOutput class _Aggregator","title":"Package"},{"location":"ponybench--index/#example-program","text":"The following is a complete program with multiple trivial benchmarks followed by their output. use \"time\" actor Main is BenchmarkList new create(env: Env) => PonyBench(env, this) fun tag benchmarks(bench: PonyBench) => bench(_Nothing) bench(_Fib(5)) bench(_Fib(10)) bench(_Fib(20)) bench(_Timer(10_000)) class iso _Nothing is MicroBenchmark // Benchmark absolutely nothing. fun name(): String => \"Nothing\" fun apply() => // prevent compiler from optimizing out this operation DoNotOptimise[None](None) DoNotOptimise.observe() class iso _Fib is MicroBenchmark // Benchmark non-tail-recursive fibonacci let _n: U64 new iso create(n: U64) => _n = n fun name(): String => \"_Fib(\" + _n.string() + \")\" fun apply() => DoNotOptimise[U64](_fib(_n)) DoNotOptimise.observe() fun _fib(n: U64): U64 => if n < 2 then 1 else _fib(n - 1) + _fib(n - 2) end class iso _Timer is AsyncMicroBenchmark // Asynchronous benchmark of timer. let _ts: Timers = Timers let _ns: U64 new iso create(ns: U64) => _ns = ns fun name(): String => \"_Timer (\" + _ns.string() + \" ns)\" fun apply(c: AsyncBenchContinue) => _ts(Timer( object iso is TimerNotify fun apply(timer: Timer, count: U64 = 0): Bool => // signal completion of async benchmark iteration when timer fires c.complete() false end, _ns)) By default, the results are printed to stdout like so: Benchmark results will have their mean and median adjusted for overhead. You may disable this with --noadjust. Benchmark mean median deviation iterations Nothing 1 ns 1 ns \u00b10.87% 3000000 _Fib(5) 12 ns 12 ns \u00b11.02% 2000000 _Fib(10) 185 ns 184 ns \u00b11.03% 1000000 _Fib(20) 23943 ns 23898 ns \u00b11.11% 10000 _Timer (10000ns) 10360 ns 10238 ns \u00b13.25% 10000 The --noadjust option outputs results of the overhead measured prior to each benchmark run followed by the unadjusted benchmark result. An example of the output of this program with --noadjust is as follows: Benchmark mean median deviation iterations Benchmark Overhead 604 ns 603 ns \u00b10.58% 300000 Nothing 553 ns 553 ns \u00b10.30% 300000 Benchmark Overhead 555 ns 555 ns \u00b10.51% 300000 _Fib(5) 574 ns 574 ns \u00b10.43% 300000 Benchmark Overhead 554 ns 556 ns \u00b10.48% 300000 _Fib(10) 822 ns 821 ns \u00b10.39% 200000 Benchmark Overhead 554 ns 553 ns \u00b10.65% 300000 _Fib(20) 30470 ns 30304 ns \u00b11.55% 5000 Benchmark Overhead 552 ns 552 ns \u00b10.39% 300000 _Timer (10000 ns) 10780 ns 10800 ns \u00b13.60% 10000 It is recommended that a PonyBench program is compiled with the --runtimebc option, if possible, and run with the --ponynoyield option.","title":"Example Program"},{"location":"ponybench--index/#public-types","text":"actor PonyBench type Benchmark trait MicroBenchmark trait AsyncMicroBenchmark interface BenchmarkList class BenchConfig class OverheadBenchmark class AsyncOverheadBenchmark class AsyncBenchContinue","title":"Public Types"},{"location":"ponybench--index/#private-types","text":"trait _Runner actor _RunSync actor _RunAsync class _Results interface _OutputManager class _TerminalOutput class _CSVOutput class _Aggregator","title":"Private Types"},{"location":"ponybench-AsyncBenchContinue/","text":"AsyncBenchContinue \u00b6 [Source] class val AsyncBenchContinue Constructors \u00b6 _create \u00b6 [Source] new val _create( run_async: _RunAsync tag, f: {(U64)} val) : AsyncBenchContinue val^ Parameters \u00b6 run_async: _RunAsync tag f: {(U64)} val Returns \u00b6 AsyncBenchContinue val^ Public Functions \u00b6 complete \u00b6 [Source] fun box complete() : None val Returns \u00b6 None val fail \u00b6 [Source] fun box fail() : None val Returns \u00b6 None val","title":"class AsyncBenchContinue"},{"location":"ponybench-AsyncBenchContinue/#asyncbenchcontinue","text":"[Source] class val AsyncBenchContinue","title":"AsyncBenchContinue"},{"location":"ponybench-AsyncBenchContinue/#constructors","text":"","title":"Constructors"},{"location":"ponybench-AsyncBenchContinue/#_create","text":"[Source] new val _create( run_async: _RunAsync tag, f: {(U64)} val) : AsyncBenchContinue val^","title":"_create"},{"location":"ponybench-AsyncBenchContinue/#parameters","text":"run_async: _RunAsync tag f: {(U64)} val","title":"Parameters"},{"location":"ponybench-AsyncBenchContinue/#returns","text":"AsyncBenchContinue val^","title":"Returns"},{"location":"ponybench-AsyncBenchContinue/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-AsyncBenchContinue/#complete","text":"[Source] fun box complete() : None val","title":"complete"},{"location":"ponybench-AsyncBenchContinue/#returns_1","text":"None val","title":"Returns"},{"location":"ponybench-AsyncBenchContinue/#fail","text":"[Source] fun box fail() : None val","title":"fail"},{"location":"ponybench-AsyncBenchContinue/#returns_2","text":"None val","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/","text":"AsyncMicroBenchmark \u00b6 [Source] Asynchronous benchmarks must provide this trait. The apply method defines a single iteration in a sample. Each phase of the sample completes when the given AsyncBenchContinue has its complete method invoked. Setup and Teardown are defined by the before and after methods respectively. The before method runs before a sample of benchmarks and after runs after the all iterations in the sample have completed. If your benchmark requires setup and/or teardown to occur beween each iteration of the benchmark, then you can use before_iteration and after_iteration methods respectively that run before/after each iteration. trait iso AsyncMicroBenchmark Public Functions \u00b6 name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val config \u00b6 [Source] fun box config() : BenchConfig val Returns \u00b6 BenchConfig val overhead \u00b6 [Source] fun box overhead() : AsyncMicroBenchmark iso^ Returns \u00b6 AsyncMicroBenchmark iso^ before \u00b6 [Source] fun ref before( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val before_iteration \u00b6 [Source] fun ref before_iteration( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val apply \u00b6 [Source] fun ref apply( c: AsyncBenchContinue val) : None val ? Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val ? after \u00b6 [Source] fun ref after( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val after_iteration \u00b6 [Source] fun ref after_iteration( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val","title":"trait AsyncMicroBenchmark"},{"location":"ponybench-AsyncMicroBenchmark/#asyncmicrobenchmark","text":"[Source] Asynchronous benchmarks must provide this trait. The apply method defines a single iteration in a sample. Each phase of the sample completes when the given AsyncBenchContinue has its complete method invoked. Setup and Teardown are defined by the before and after methods respectively. The before method runs before a sample of benchmarks and after runs after the all iterations in the sample have completed. If your benchmark requires setup and/or teardown to occur beween each iteration of the benchmark, then you can use before_iteration and after_iteration methods respectively that run before/after each iteration. trait iso AsyncMicroBenchmark","title":"AsyncMicroBenchmark"},{"location":"ponybench-AsyncMicroBenchmark/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-AsyncMicroBenchmark/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponybench-AsyncMicroBenchmark/#returns","text":"String val","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#config","text":"[Source] fun box config() : BenchConfig val","title":"config"},{"location":"ponybench-AsyncMicroBenchmark/#returns_1","text":"BenchConfig val","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#overhead","text":"[Source] fun box overhead() : AsyncMicroBenchmark iso^","title":"overhead"},{"location":"ponybench-AsyncMicroBenchmark/#returns_2","text":"AsyncMicroBenchmark iso^","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#before","text":"[Source] fun ref before( c: AsyncBenchContinue val) : None val","title":"before"},{"location":"ponybench-AsyncMicroBenchmark/#parameters","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncMicroBenchmark/#returns_3","text":"None val","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#before_iteration","text":"[Source] fun ref before_iteration( c: AsyncBenchContinue val) : None val","title":"before_iteration"},{"location":"ponybench-AsyncMicroBenchmark/#parameters_1","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncMicroBenchmark/#returns_4","text":"None val","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#apply","text":"[Source] fun ref apply( c: AsyncBenchContinue val) : None val ?","title":"apply"},{"location":"ponybench-AsyncMicroBenchmark/#parameters_2","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncMicroBenchmark/#returns_5","text":"None val ?","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#after","text":"[Source] fun ref after( c: AsyncBenchContinue val) : None val","title":"after"},{"location":"ponybench-AsyncMicroBenchmark/#parameters_3","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncMicroBenchmark/#returns_6","text":"None val","title":"Returns"},{"location":"ponybench-AsyncMicroBenchmark/#after_iteration","text":"[Source] fun ref after_iteration( c: AsyncBenchContinue val) : None val","title":"after_iteration"},{"location":"ponybench-AsyncMicroBenchmark/#parameters_4","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncMicroBenchmark/#returns_7","text":"None val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/","text":"AsyncOverheadBenchmark \u00b6 [Source] Default benchmark for measuring asynchronous overhead. class iso AsyncOverheadBenchmark is AsyncMicroBenchmark iso Implements \u00b6 AsyncMicroBenchmark iso Constructors \u00b6 create \u00b6 [Source] new iso create() : AsyncOverheadBenchmark iso^ Returns \u00b6 AsyncOverheadBenchmark iso^ Public Functions \u00b6 name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val apply \u00b6 [Source] fun ref apply( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val config \u00b6 [Source] fun box config() : BenchConfig val Returns \u00b6 BenchConfig val overhead \u00b6 [Source] fun box overhead() : AsyncMicroBenchmark iso^ Returns \u00b6 AsyncMicroBenchmark iso^ before \u00b6 [Source] fun ref before( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val before_iteration \u00b6 [Source] fun ref before_iteration( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val after \u00b6 [Source] fun ref after( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val after_iteration \u00b6 [Source] fun ref after_iteration( c: AsyncBenchContinue val) : None val Parameters \u00b6 c: AsyncBenchContinue val Returns \u00b6 None val","title":"class AsyncOverheadBenchmark"},{"location":"ponybench-AsyncOverheadBenchmark/#asyncoverheadbenchmark","text":"[Source] Default benchmark for measuring asynchronous overhead. class iso AsyncOverheadBenchmark is AsyncMicroBenchmark iso","title":"AsyncOverheadBenchmark"},{"location":"ponybench-AsyncOverheadBenchmark/#implements","text":"AsyncMicroBenchmark iso","title":"Implements"},{"location":"ponybench-AsyncOverheadBenchmark/#constructors","text":"","title":"Constructors"},{"location":"ponybench-AsyncOverheadBenchmark/#create","text":"[Source] new iso create() : AsyncOverheadBenchmark iso^","title":"create"},{"location":"ponybench-AsyncOverheadBenchmark/#returns","text":"AsyncOverheadBenchmark iso^","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-AsyncOverheadBenchmark/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_1","text":"String val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#apply","text":"[Source] fun ref apply( c: AsyncBenchContinue val) : None val","title":"apply"},{"location":"ponybench-AsyncOverheadBenchmark/#parameters","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_2","text":"None val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#config","text":"[Source] fun box config() : BenchConfig val","title":"config"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_3","text":"BenchConfig val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#overhead","text":"[Source] fun box overhead() : AsyncMicroBenchmark iso^","title":"overhead"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_4","text":"AsyncMicroBenchmark iso^","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#before","text":"[Source] fun ref before( c: AsyncBenchContinue val) : None val","title":"before"},{"location":"ponybench-AsyncOverheadBenchmark/#parameters_1","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_5","text":"None val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#before_iteration","text":"[Source] fun ref before_iteration( c: AsyncBenchContinue val) : None val","title":"before_iteration"},{"location":"ponybench-AsyncOverheadBenchmark/#parameters_2","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_6","text":"None val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#after","text":"[Source] fun ref after( c: AsyncBenchContinue val) : None val","title":"after"},{"location":"ponybench-AsyncOverheadBenchmark/#parameters_3","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_7","text":"None val","title":"Returns"},{"location":"ponybench-AsyncOverheadBenchmark/#after_iteration","text":"[Source] fun ref after_iteration( c: AsyncBenchContinue val) : None val","title":"after_iteration"},{"location":"ponybench-AsyncOverheadBenchmark/#parameters_4","text":"c: AsyncBenchContinue val","title":"Parameters"},{"location":"ponybench-AsyncOverheadBenchmark/#returns_8","text":"None val","title":"Returns"},{"location":"ponybench-BenchConfig/","text":"BenchConfig \u00b6 [Source] Configuration of a benchmark. class val BenchConfig Constructors \u00b6 create \u00b6 [Source] new val create( samples': USize val = 20, max_iterations': U64 val = 1000000000, max_sample_time': U64 val = 100000000) : BenchConfig val^ Parameters \u00b6 samples': USize val = 20 max_iterations': U64 val = 1000000000 max_sample_time': U64 val = 100000000 Returns \u00b6 BenchConfig val^ Public fields \u00b6 let samples: USize val \u00b6 [Source] Total number of samples to be measured. (Default: 20) let max_iterations: U64 val \u00b6 [Source] Maximum number of iterations to execute per sample. (Default: 1_000_000_000) let max_sample_time: U64 val \u00b6 [Source] Maximum time to execute a sample in Nanoseconds. (Default: 100_000_000)","title":"class BenchConfig"},{"location":"ponybench-BenchConfig/#benchconfig","text":"[Source] Configuration of a benchmark. class val BenchConfig","title":"BenchConfig"},{"location":"ponybench-BenchConfig/#constructors","text":"","title":"Constructors"},{"location":"ponybench-BenchConfig/#create","text":"[Source] new val create( samples': USize val = 20, max_iterations': U64 val = 1000000000, max_sample_time': U64 val = 100000000) : BenchConfig val^","title":"create"},{"location":"ponybench-BenchConfig/#parameters","text":"samples': USize val = 20 max_iterations': U64 val = 1000000000 max_sample_time': U64 val = 100000000","title":"Parameters"},{"location":"ponybench-BenchConfig/#returns","text":"BenchConfig val^","title":"Returns"},{"location":"ponybench-BenchConfig/#public-fields","text":"","title":"Public fields"},{"location":"ponybench-BenchConfig/#let-samples-usize-val","text":"[Source] Total number of samples to be measured. (Default: 20)","title":"let samples: USize val"},{"location":"ponybench-BenchConfig/#let-max_iterations-u64-val","text":"[Source] Maximum number of iterations to execute per sample. (Default: 1_000_000_000)","title":"let max_iterations: U64 val"},{"location":"ponybench-BenchConfig/#let-max_sample_time-u64-val","text":"[Source] Maximum time to execute a sample in Nanoseconds. (Default: 100_000_000)","title":"let max_sample_time: U64 val"},{"location":"ponybench-Benchmark/","text":"Benchmark \u00b6 [Source] type Benchmark is (MicroBenchmark iso | AsyncMicroBenchmark iso) Type Alias For \u00b6 ( MicroBenchmark iso | AsyncMicroBenchmark iso)","title":"type Benchmark"},{"location":"ponybench-Benchmark/#benchmark","text":"[Source] type Benchmark is (MicroBenchmark iso | AsyncMicroBenchmark iso)","title":"Benchmark"},{"location":"ponybench-Benchmark/#type-alias-for","text":"( MicroBenchmark iso | AsyncMicroBenchmark iso)","title":"Type Alias For"},{"location":"ponybench-BenchmarkList/","text":"BenchmarkList \u00b6 [Source] interface tag BenchmarkList Public Functions \u00b6 benchmarks \u00b6 [Source] fun tag benchmarks( bench: PonyBench tag) : None val Parameters \u00b6 bench: PonyBench tag Returns \u00b6 None val","title":"interface BenchmarkList"},{"location":"ponybench-BenchmarkList/#benchmarklist","text":"[Source] interface tag BenchmarkList","title":"BenchmarkList"},{"location":"ponybench-BenchmarkList/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-BenchmarkList/#benchmarks","text":"[Source] fun tag benchmarks( bench: PonyBench tag) : None val","title":"benchmarks"},{"location":"ponybench-BenchmarkList/#parameters","text":"bench: PonyBench tag","title":"Parameters"},{"location":"ponybench-BenchmarkList/#returns","text":"None val","title":"Returns"},{"location":"ponybench-MicroBenchmark/","text":"MicroBenchmark \u00b6 [Source] Synchronous benchmarks must provide this trait. The apply method defines a single iteration in a sample. Setup and Teardown are defined by the before and after methods respectively. The before method runs before a sample of benchmarks and after runs after the all iterations in the sample have completed. If your benchmark requires setup and/or teardown to occur beween each iteration of the benchmark, then you can use before_iteration and after_iteration methods respectively that run before/after each iteration. trait iso MicroBenchmark Public Functions \u00b6 name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val config \u00b6 [Source] fun box config() : BenchConfig val Returns \u00b6 BenchConfig val overhead \u00b6 [Source] fun box overhead() : MicroBenchmark iso^ Returns \u00b6 MicroBenchmark iso^ before \u00b6 [Source] fun ref before() : None val ? Returns \u00b6 None val ? before_iteration \u00b6 [Source] fun ref before_iteration() : None val ? Returns \u00b6 None val ? apply \u00b6 [Source] fun ref apply() : None val ? Returns \u00b6 None val ? after \u00b6 [Source] fun ref after() : None val ? Returns \u00b6 None val ? after_iteration \u00b6 [Source] fun ref after_iteration() : None val ? Returns \u00b6 None val ?","title":"trait MicroBenchmark"},{"location":"ponybench-MicroBenchmark/#microbenchmark","text":"[Source] Synchronous benchmarks must provide this trait. The apply method defines a single iteration in a sample. Setup and Teardown are defined by the before and after methods respectively. The before method runs before a sample of benchmarks and after runs after the all iterations in the sample have completed. If your benchmark requires setup and/or teardown to occur beween each iteration of the benchmark, then you can use before_iteration and after_iteration methods respectively that run before/after each iteration. trait iso MicroBenchmark","title":"MicroBenchmark"},{"location":"ponybench-MicroBenchmark/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-MicroBenchmark/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponybench-MicroBenchmark/#returns","text":"String val","title":"Returns"},{"location":"ponybench-MicroBenchmark/#config","text":"[Source] fun box config() : BenchConfig val","title":"config"},{"location":"ponybench-MicroBenchmark/#returns_1","text":"BenchConfig val","title":"Returns"},{"location":"ponybench-MicroBenchmark/#overhead","text":"[Source] fun box overhead() : MicroBenchmark iso^","title":"overhead"},{"location":"ponybench-MicroBenchmark/#returns_2","text":"MicroBenchmark iso^","title":"Returns"},{"location":"ponybench-MicroBenchmark/#before","text":"[Source] fun ref before() : None val ?","title":"before"},{"location":"ponybench-MicroBenchmark/#returns_3","text":"None val ?","title":"Returns"},{"location":"ponybench-MicroBenchmark/#before_iteration","text":"[Source] fun ref before_iteration() : None val ?","title":"before_iteration"},{"location":"ponybench-MicroBenchmark/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponybench-MicroBenchmark/#apply","text":"[Source] fun ref apply() : None val ?","title":"apply"},{"location":"ponybench-MicroBenchmark/#returns_5","text":"None val ?","title":"Returns"},{"location":"ponybench-MicroBenchmark/#after","text":"[Source] fun ref after() : None val ?","title":"after"},{"location":"ponybench-MicroBenchmark/#returns_6","text":"None val ?","title":"Returns"},{"location":"ponybench-MicroBenchmark/#after_iteration","text":"[Source] fun ref after_iteration() : None val ?","title":"after_iteration"},{"location":"ponybench-MicroBenchmark/#returns_7","text":"None val ?","title":"Returns"},{"location":"ponybench-OverheadBenchmark/","text":"OverheadBenchmark \u00b6 [Source] Default benchmark for measuring synchronous overhead. class iso OverheadBenchmark is MicroBenchmark iso Implements \u00b6 MicroBenchmark iso Constructors \u00b6 create \u00b6 [Source] new iso create() : OverheadBenchmark iso^ Returns \u00b6 OverheadBenchmark iso^ Public Functions \u00b6 name \u00b6 [Source] fun box name() : String val Returns \u00b6 String val apply \u00b6 [Source] fun ref apply() : None val Returns \u00b6 None val config \u00b6 [Source] fun box config() : BenchConfig val Returns \u00b6 BenchConfig val overhead \u00b6 [Source] fun box overhead() : MicroBenchmark iso^ Returns \u00b6 MicroBenchmark iso^ before \u00b6 [Source] fun ref before() : None val ? Returns \u00b6 None val ? before_iteration \u00b6 [Source] fun ref before_iteration() : None val ? Returns \u00b6 None val ? after \u00b6 [Source] fun ref after() : None val ? Returns \u00b6 None val ? after_iteration \u00b6 [Source] fun ref after_iteration() : None val ? Returns \u00b6 None val ?","title":"class OverheadBenchmark"},{"location":"ponybench-OverheadBenchmark/#overheadbenchmark","text":"[Source] Default benchmark for measuring synchronous overhead. class iso OverheadBenchmark is MicroBenchmark iso","title":"OverheadBenchmark"},{"location":"ponybench-OverheadBenchmark/#implements","text":"MicroBenchmark iso","title":"Implements"},{"location":"ponybench-OverheadBenchmark/#constructors","text":"","title":"Constructors"},{"location":"ponybench-OverheadBenchmark/#create","text":"[Source] new iso create() : OverheadBenchmark iso^","title":"create"},{"location":"ponybench-OverheadBenchmark/#returns","text":"OverheadBenchmark iso^","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-OverheadBenchmark/#name","text":"[Source] fun box name() : String val","title":"name"},{"location":"ponybench-OverheadBenchmark/#returns_1","text":"String val","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#apply","text":"[Source] fun ref apply() : None val","title":"apply"},{"location":"ponybench-OverheadBenchmark/#returns_2","text":"None val","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#config","text":"[Source] fun box config() : BenchConfig val","title":"config"},{"location":"ponybench-OverheadBenchmark/#returns_3","text":"BenchConfig val","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#overhead","text":"[Source] fun box overhead() : MicroBenchmark iso^","title":"overhead"},{"location":"ponybench-OverheadBenchmark/#returns_4","text":"MicroBenchmark iso^","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#before","text":"[Source] fun ref before() : None val ?","title":"before"},{"location":"ponybench-OverheadBenchmark/#returns_5","text":"None val ?","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#before_iteration","text":"[Source] fun ref before_iteration() : None val ?","title":"before_iteration"},{"location":"ponybench-OverheadBenchmark/#returns_6","text":"None val ?","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#after","text":"[Source] fun ref after() : None val ?","title":"after"},{"location":"ponybench-OverheadBenchmark/#returns_7","text":"None val ?","title":"Returns"},{"location":"ponybench-OverheadBenchmark/#after_iteration","text":"[Source] fun ref after_iteration() : None val ?","title":"after_iteration"},{"location":"ponybench-OverheadBenchmark/#returns_8","text":"None val ?","title":"Returns"},{"location":"ponybench-PonyBench/","text":"PonyBench \u00b6 [Source] actor tag PonyBench Constructors \u00b6 create \u00b6 [Source] new tag create( env: Env val, list: BenchmarkList tag) : PonyBench tag^ Parameters \u00b6 env: Env val list: BenchmarkList tag Returns \u00b6 PonyBench tag^ Public Behaviours \u00b6 apply \u00b6 [Source] be apply( bench: (MicroBenchmark iso | AsyncMicroBenchmark iso)) Parameters \u00b6 bench: ( MicroBenchmark iso | AsyncMicroBenchmark iso) Private Behaviours \u00b6 _next_benchmark \u00b6 [Source] be _next_benchmark() _complete \u00b6 [Source] be _complete( results: _Results val) Parameters \u00b6 results: _Results val _fail \u00b6 [Source] be _fail( name: String val) Parameters \u00b6 name: String val","title":"actor PonyBench"},{"location":"ponybench-PonyBench/#ponybench","text":"[Source] actor tag PonyBench","title":"PonyBench"},{"location":"ponybench-PonyBench/#constructors","text":"","title":"Constructors"},{"location":"ponybench-PonyBench/#create","text":"[Source] new tag create( env: Env val, list: BenchmarkList tag) : PonyBench tag^","title":"create"},{"location":"ponybench-PonyBench/#parameters","text":"env: Env val list: BenchmarkList tag","title":"Parameters"},{"location":"ponybench-PonyBench/#returns","text":"PonyBench tag^","title":"Returns"},{"location":"ponybench-PonyBench/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponybench-PonyBench/#apply","text":"[Source] be apply( bench: (MicroBenchmark iso | AsyncMicroBenchmark iso))","title":"apply"},{"location":"ponybench-PonyBench/#parameters_1","text":"bench: ( MicroBenchmark iso | AsyncMicroBenchmark iso)","title":"Parameters"},{"location":"ponybench-PonyBench/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponybench-PonyBench/#_next_benchmark","text":"[Source] be _next_benchmark()","title":"_next_benchmark"},{"location":"ponybench-PonyBench/#_complete","text":"[Source] be _complete( results: _Results val)","title":"_complete"},{"location":"ponybench-PonyBench/#parameters_2","text":"results: _Results val","title":"Parameters"},{"location":"ponybench-PonyBench/#_fail","text":"[Source] be _fail( name: String val)","title":"_fail"},{"location":"ponybench-PonyBench/#parameters_3","text":"name: String val","title":"Parameters"},{"location":"ponybench-_Aggregator/","text":"_Aggregator \u00b6 [Source] class ref _Aggregator Constructors \u00b6 create \u00b6 [Source] new ref create( ponybench: PonyBench tag, runner: _Runner tag, config: BenchConfig val, overhead: Bool val) : _Aggregator ref^ Parameters \u00b6 ponybench: PonyBench tag runner: _Runner tag config: BenchConfig val overhead: Bool val Returns \u00b6 _Aggregator ref^ Public fields \u00b6 var iterations: U64 val \u00b6 [Source] Public Functions \u00b6 complete \u00b6 [Source] fun ref complete( name: String val, t: U64 val) : None val Parameters \u00b6 name: String val t: U64 val Returns \u00b6 None val Private Functions \u00b6 _calc_iterations \u00b6 [Source] fun ref _calc_iterations( runtime: U64 val) : (U64 val | None val) Parameters \u00b6 runtime: U64 val Returns \u00b6 ( U64 val | None val) _round_up \u00b6 [Source] Round x up to a number of the form [1^x, 2^x, 3^x, 5^x]. fun box _round_up( x: U64 val) : U64 val Parameters \u00b6 x: U64 val Returns \u00b6 U64 val _round_down_10 \u00b6 [Source] Round down to the nearest power of 10. fun box _round_down_10( x: U64 val) : U64 val Parameters \u00b6 x: U64 val Returns \u00b6 U64 val","title":"class _Aggregator"},{"location":"ponybench-_Aggregator/#_aggregator","text":"[Source] class ref _Aggregator","title":"_Aggregator"},{"location":"ponybench-_Aggregator/#constructors","text":"","title":"Constructors"},{"location":"ponybench-_Aggregator/#create","text":"[Source] new ref create( ponybench: PonyBench tag, runner: _Runner tag, config: BenchConfig val, overhead: Bool val) : _Aggregator ref^","title":"create"},{"location":"ponybench-_Aggregator/#parameters","text":"ponybench: PonyBench tag runner: _Runner tag config: BenchConfig val overhead: Bool val","title":"Parameters"},{"location":"ponybench-_Aggregator/#returns","text":"_Aggregator ref^","title":"Returns"},{"location":"ponybench-_Aggregator/#public-fields","text":"","title":"Public fields"},{"location":"ponybench-_Aggregator/#var-iterations-u64-val","text":"[Source]","title":"var iterations: U64 val"},{"location":"ponybench-_Aggregator/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-_Aggregator/#complete","text":"[Source] fun ref complete( name: String val, t: U64 val) : None val","title":"complete"},{"location":"ponybench-_Aggregator/#parameters_1","text":"name: String val t: U64 val","title":"Parameters"},{"location":"ponybench-_Aggregator/#returns_1","text":"None val","title":"Returns"},{"location":"ponybench-_Aggregator/#private-functions","text":"","title":"Private Functions"},{"location":"ponybench-_Aggregator/#_calc_iterations","text":"[Source] fun ref _calc_iterations( runtime: U64 val) : (U64 val | None val)","title":"_calc_iterations"},{"location":"ponybench-_Aggregator/#parameters_2","text":"runtime: U64 val","title":"Parameters"},{"location":"ponybench-_Aggregator/#returns_2","text":"( U64 val | None val)","title":"Returns"},{"location":"ponybench-_Aggregator/#_round_up","text":"[Source] Round x up to a number of the form [1^x, 2^x, 3^x, 5^x]. fun box _round_up( x: U64 val) : U64 val","title":"_round_up"},{"location":"ponybench-_Aggregator/#parameters_3","text":"x: U64 val","title":"Parameters"},{"location":"ponybench-_Aggregator/#returns_3","text":"U64 val","title":"Returns"},{"location":"ponybench-_Aggregator/#_round_down_10","text":"[Source] Round down to the nearest power of 10. fun box _round_down_10( x: U64 val) : U64 val","title":"_round_down_10"},{"location":"ponybench-_Aggregator/#parameters_4","text":"x: U64 val","title":"Parameters"},{"location":"ponybench-_Aggregator/#returns_4","text":"U64 val","title":"Returns"},{"location":"ponybench-_CSVOutput/","text":"_CSVOutput \u00b6 [Source] class ref _CSVOutput Constructors \u00b6 create \u00b6 [Source] new ref create( env: Env val) : _CSVOutput ref^ Parameters \u00b6 env: Env val Returns \u00b6 _CSVOutput ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( results: _Results val) : None val Parameters \u00b6 results: _Results val Returns \u00b6 None val Private Functions \u00b6 _print \u00b6 [Source] fun box _print( msg: String val) : None val Parameters \u00b6 msg: String val Returns \u00b6 None val","title":"class _CSVOutput"},{"location":"ponybench-_CSVOutput/#_csvoutput","text":"[Source] class ref _CSVOutput","title":"_CSVOutput"},{"location":"ponybench-_CSVOutput/#constructors","text":"","title":"Constructors"},{"location":"ponybench-_CSVOutput/#create","text":"[Source] new ref create( env: Env val) : _CSVOutput ref^","title":"create"},{"location":"ponybench-_CSVOutput/#parameters","text":"env: Env val","title":"Parameters"},{"location":"ponybench-_CSVOutput/#returns","text":"_CSVOutput ref^","title":"Returns"},{"location":"ponybench-_CSVOutput/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-_CSVOutput/#apply","text":"[Source] fun ref apply( results: _Results val) : None val","title":"apply"},{"location":"ponybench-_CSVOutput/#parameters_1","text":"results: _Results val","title":"Parameters"},{"location":"ponybench-_CSVOutput/#returns_1","text":"None val","title":"Returns"},{"location":"ponybench-_CSVOutput/#private-functions","text":"","title":"Private Functions"},{"location":"ponybench-_CSVOutput/#_print","text":"[Source] fun box _print( msg: String val) : None val","title":"_print"},{"location":"ponybench-_CSVOutput/#parameters_2","text":"msg: String val","title":"Parameters"},{"location":"ponybench-_CSVOutput/#returns_2","text":"None val","title":"Returns"},{"location":"ponybench-_OutputManager/","text":"_OutputManager \u00b6 [Source] interface ref _OutputManager Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( results: _Results val) : None val Parameters \u00b6 results: _Results val Returns \u00b6 None val","title":"interface _OutputManager"},{"location":"ponybench-_OutputManager/#_outputmanager","text":"[Source] interface ref _OutputManager","title":"_OutputManager"},{"location":"ponybench-_OutputManager/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-_OutputManager/#apply","text":"[Source] fun ref apply( results: _Results val) : None val","title":"apply"},{"location":"ponybench-_OutputManager/#parameters","text":"results: _Results val","title":"Parameters"},{"location":"ponybench-_OutputManager/#returns","text":"None val","title":"Returns"},{"location":"ponybench-_Results/","text":"_Results \u00b6 [Source] class val _Results Constructors \u00b6 create \u00b6 [Source] new val create( name': String val, samples': Array[U64 val] iso, iterations': U64 val, overhead': Bool val) : _Results val^ Parameters \u00b6 name': String val samples': Array [ U64 val] iso iterations': U64 val overhead': Bool val Returns \u00b6 _Results val^ Public fields \u00b6 let name: String val \u00b6 [Source] let samples: Array [ U64 val] ref \u00b6 [Source] let iterations: U64 val \u00b6 [Source] let overhead: Bool val \u00b6 [Source] Public Functions \u00b6 raw_str \u00b6 [Source] fun box raw_str() : String val Returns \u00b6 String val sum \u00b6 [Source] fun box sum() : U64 val Returns \u00b6 U64 val mean \u00b6 [Source] fun box mean() : F64 val Returns \u00b6 F64 val median \u00b6 [Source] fun box median() : F64 val Returns \u00b6 F64 val std_dev \u00b6 [Source] fun box std_dev() : F64 val Returns \u00b6 F64 val","title":"class _Results"},{"location":"ponybench-_Results/#_results","text":"[Source] class val _Results","title":"_Results"},{"location":"ponybench-_Results/#constructors","text":"","title":"Constructors"},{"location":"ponybench-_Results/#create","text":"[Source] new val create( name': String val, samples': Array[U64 val] iso, iterations': U64 val, overhead': Bool val) : _Results val^","title":"create"},{"location":"ponybench-_Results/#parameters","text":"name': String val samples': Array [ U64 val] iso iterations': U64 val overhead': Bool val","title":"Parameters"},{"location":"ponybench-_Results/#returns","text":"_Results val^","title":"Returns"},{"location":"ponybench-_Results/#public-fields","text":"","title":"Public fields"},{"location":"ponybench-_Results/#let-name-string-val","text":"[Source]","title":"let name: String val"},{"location":"ponybench-_Results/#let-samples-array91u64-val93-ref","text":"[Source]","title":"let samples: Array[U64 val] ref"},{"location":"ponybench-_Results/#let-iterations-u64-val","text":"[Source]","title":"let iterations: U64 val"},{"location":"ponybench-_Results/#let-overhead-bool-val","text":"[Source]","title":"let overhead: Bool val"},{"location":"ponybench-_Results/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-_Results/#raw_str","text":"[Source] fun box raw_str() : String val","title":"raw_str"},{"location":"ponybench-_Results/#returns_1","text":"String val","title":"Returns"},{"location":"ponybench-_Results/#sum","text":"[Source] fun box sum() : U64 val","title":"sum"},{"location":"ponybench-_Results/#returns_2","text":"U64 val","title":"Returns"},{"location":"ponybench-_Results/#mean","text":"[Source] fun box mean() : F64 val","title":"mean"},{"location":"ponybench-_Results/#returns_3","text":"F64 val","title":"Returns"},{"location":"ponybench-_Results/#median","text":"[Source] fun box median() : F64 val","title":"median"},{"location":"ponybench-_Results/#returns_4","text":"F64 val","title":"Returns"},{"location":"ponybench-_Results/#std_dev","text":"[Source] fun box std_dev() : F64 val","title":"std_dev"},{"location":"ponybench-_Results/#returns_5","text":"F64 val","title":"Returns"},{"location":"ponybench-_RunAsync/","text":"_RunAsync \u00b6 [Source] actor tag _RunAsync is _Runner tag Implements \u00b6 _Runner tag Constructors \u00b6 create \u00b6 [Source] new tag create( ponybench: PonyBench tag, benchmark: AsyncMicroBenchmark iso, overhead: Bool val) : _RunAsync tag^ Parameters \u00b6 ponybench: PonyBench tag benchmark: AsyncMicroBenchmark iso overhead: Bool val Returns \u00b6 _RunAsync tag^ Public Behaviours \u00b6 apply \u00b6 [Source] be apply() Private Behaviours \u00b6 _before_done_cont \u00b6 [Source] be _before_done_cont( e: U64 val) Parameters \u00b6 e: U64 val _before_iteration_done_cont \u00b6 [Source] be _before_iteration_done_cont( e: U64 val) Parameters \u00b6 e: U64 val _run_iteration \u00b6 [Source] be _run_iteration() _iteration_done_cont \u00b6 [Source] be _iteration_done_cont( e: U64 val) Parameters \u00b6 e: U64 val _after_iteration_done_cont \u00b6 [Source] be _after_iteration_done_cont( e: U64 val) Parameters \u00b6 e: U64 val _after_done_cont \u00b6 [Source] be _after_done_cont( e: U64 val) Parameters \u00b6 e: U64 val _fail \u00b6 [Source] be _fail() Private Functions \u00b6 _gc_next_behavior \u00b6 [Source] fun ref _gc_next_behavior() : None val Returns \u00b6 None val","title":"actor _RunAsync"},{"location":"ponybench-_RunAsync/#_runasync","text":"[Source] actor tag _RunAsync is _Runner tag","title":"_RunAsync"},{"location":"ponybench-_RunAsync/#implements","text":"_Runner tag","title":"Implements"},{"location":"ponybench-_RunAsync/#constructors","text":"","title":"Constructors"},{"location":"ponybench-_RunAsync/#create","text":"[Source] new tag create( ponybench: PonyBench tag, benchmark: AsyncMicroBenchmark iso, overhead: Bool val) : _RunAsync tag^","title":"create"},{"location":"ponybench-_RunAsync/#parameters","text":"ponybench: PonyBench tag benchmark: AsyncMicroBenchmark iso overhead: Bool val","title":"Parameters"},{"location":"ponybench-_RunAsync/#returns","text":"_RunAsync tag^","title":"Returns"},{"location":"ponybench-_RunAsync/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponybench-_RunAsync/#apply","text":"[Source] be apply()","title":"apply"},{"location":"ponybench-_RunAsync/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponybench-_RunAsync/#_before_done_cont","text":"[Source] be _before_done_cont( e: U64 val)","title":"_before_done_cont"},{"location":"ponybench-_RunAsync/#parameters_1","text":"e: U64 val","title":"Parameters"},{"location":"ponybench-_RunAsync/#_before_iteration_done_cont","text":"[Source] be _before_iteration_done_cont( e: U64 val)","title":"_before_iteration_done_cont"},{"location":"ponybench-_RunAsync/#parameters_2","text":"e: U64 val","title":"Parameters"},{"location":"ponybench-_RunAsync/#_run_iteration","text":"[Source] be _run_iteration()","title":"_run_iteration"},{"location":"ponybench-_RunAsync/#_iteration_done_cont","text":"[Source] be _iteration_done_cont( e: U64 val)","title":"_iteration_done_cont"},{"location":"ponybench-_RunAsync/#parameters_3","text":"e: U64 val","title":"Parameters"},{"location":"ponybench-_RunAsync/#_after_iteration_done_cont","text":"[Source] be _after_iteration_done_cont( e: U64 val)","title":"_after_iteration_done_cont"},{"location":"ponybench-_RunAsync/#parameters_4","text":"e: U64 val","title":"Parameters"},{"location":"ponybench-_RunAsync/#_after_done_cont","text":"[Source] be _after_done_cont( e: U64 val)","title":"_after_done_cont"},{"location":"ponybench-_RunAsync/#parameters_5","text":"e: U64 val","title":"Parameters"},{"location":"ponybench-_RunAsync/#_fail","text":"[Source] be _fail()","title":"_fail"},{"location":"ponybench-_RunAsync/#private-functions","text":"","title":"Private Functions"},{"location":"ponybench-_RunAsync/#_gc_next_behavior","text":"[Source] fun ref _gc_next_behavior() : None val","title":"_gc_next_behavior"},{"location":"ponybench-_RunAsync/#returns_1","text":"None val","title":"Returns"},{"location":"ponybench-_RunSync/","text":"_RunSync \u00b6 [Source] actor tag _RunSync is _Runner tag Implements \u00b6 _Runner tag Constructors \u00b6 create \u00b6 [Source] new tag create( ponybench: PonyBench tag, benchmark: MicroBenchmark iso, overhead: Bool val) : _RunSync tag^ Parameters \u00b6 ponybench: PonyBench tag benchmark: MicroBenchmark iso overhead: Bool val Returns \u00b6 _RunSync tag^ Public Behaviours \u00b6 apply \u00b6 [Source] be apply() Private Behaviours \u00b6 _run_iteration \u00b6 [Source] be _run_iteration( n: U64 val = 0, a: U64 val = 0) Parameters \u00b6 n: U64 val = 0 a: U64 val = 0 _complete \u00b6 [Source] be _complete( t: U64 val) Parameters \u00b6 t: U64 val _fail \u00b6 [Source] be _fail() Private Functions \u00b6 _gc_next_behavior \u00b6 [Source] fun ref _gc_next_behavior() : None val Returns \u00b6 None val","title":"actor _RunSync"},{"location":"ponybench-_RunSync/#_runsync","text":"[Source] actor tag _RunSync is _Runner tag","title":"_RunSync"},{"location":"ponybench-_RunSync/#implements","text":"_Runner tag","title":"Implements"},{"location":"ponybench-_RunSync/#constructors","text":"","title":"Constructors"},{"location":"ponybench-_RunSync/#create","text":"[Source] new tag create( ponybench: PonyBench tag, benchmark: MicroBenchmark iso, overhead: Bool val) : _RunSync tag^","title":"create"},{"location":"ponybench-_RunSync/#parameters","text":"ponybench: PonyBench tag benchmark: MicroBenchmark iso overhead: Bool val","title":"Parameters"},{"location":"ponybench-_RunSync/#returns","text":"_RunSync tag^","title":"Returns"},{"location":"ponybench-_RunSync/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponybench-_RunSync/#apply","text":"[Source] be apply()","title":"apply"},{"location":"ponybench-_RunSync/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponybench-_RunSync/#_run_iteration","text":"[Source] be _run_iteration( n: U64 val = 0, a: U64 val = 0)","title":"_run_iteration"},{"location":"ponybench-_RunSync/#parameters_1","text":"n: U64 val = 0 a: U64 val = 0","title":"Parameters"},{"location":"ponybench-_RunSync/#_complete","text":"[Source] be _complete( t: U64 val)","title":"_complete"},{"location":"ponybench-_RunSync/#parameters_2","text":"t: U64 val","title":"Parameters"},{"location":"ponybench-_RunSync/#_fail","text":"[Source] be _fail()","title":"_fail"},{"location":"ponybench-_RunSync/#private-functions","text":"","title":"Private Functions"},{"location":"ponybench-_RunSync/#_gc_next_behavior","text":"[Source] fun ref _gc_next_behavior() : None val","title":"_gc_next_behavior"},{"location":"ponybench-_RunSync/#returns_1","text":"None val","title":"Returns"},{"location":"ponybench-_Runner/","text":"_Runner \u00b6 [Source] trait tag _Runner Public Behaviours \u00b6 apply \u00b6 [Source] be apply()","title":"trait _Runner"},{"location":"ponybench-_Runner/#_runner","text":"[Source] trait tag _Runner","title":"_Runner"},{"location":"ponybench-_Runner/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponybench-_Runner/#apply","text":"[Source] be apply()","title":"apply"},{"location":"ponybench-_TerminalOutput/","text":"_TerminalOutput \u00b6 [Source] class ref _TerminalOutput is _OutputManager ref Implements \u00b6 _OutputManager ref Constructors \u00b6 create \u00b6 [Source] new ref create( env: Env val) : _TerminalOutput ref^ Parameters \u00b6 env: Env val Returns \u00b6 _TerminalOutput ref^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( results: _Results val) : None val Parameters \u00b6 results: _Results val Returns \u00b6 None val Private Functions \u00b6 _print_benchmark \u00b6 [Source] fun ref _print_benchmark( results: _Results val, adjust: Bool val) : None val Parameters \u00b6 results: _Results val adjust: Bool val Returns \u00b6 None val _print_heading \u00b6 [Source] fun box _print_heading() : None val Returns \u00b6 None val _print_result \u00b6 [Source] fun box _print_result( name: String val, mean: String val, median: String val, dev: String val, iters: String val) : None val Parameters \u00b6 name: String val mean: String val median: String val dev: String val iters: String val Returns \u00b6 None val _print \u00b6 [Source] fun box _print( msg: String val) : None val Parameters \u00b6 msg: String val Returns \u00b6 None val _warn \u00b6 [Source] fun box _warn( msg: String val) : None val Parameters \u00b6 msg: String val Returns \u00b6 None val","title":"class _TerminalOutput"},{"location":"ponybench-_TerminalOutput/#_terminaloutput","text":"[Source] class ref _TerminalOutput is _OutputManager ref","title":"_TerminalOutput"},{"location":"ponybench-_TerminalOutput/#implements","text":"_OutputManager ref","title":"Implements"},{"location":"ponybench-_TerminalOutput/#constructors","text":"","title":"Constructors"},{"location":"ponybench-_TerminalOutput/#create","text":"[Source] new ref create( env: Env val) : _TerminalOutput ref^","title":"create"},{"location":"ponybench-_TerminalOutput/#parameters","text":"env: Env val","title":"Parameters"},{"location":"ponybench-_TerminalOutput/#returns","text":"_TerminalOutput ref^","title":"Returns"},{"location":"ponybench-_TerminalOutput/#public-functions","text":"","title":"Public Functions"},{"location":"ponybench-_TerminalOutput/#apply","text":"[Source] fun ref apply( results: _Results val) : None val","title":"apply"},{"location":"ponybench-_TerminalOutput/#parameters_1","text":"results: _Results val","title":"Parameters"},{"location":"ponybench-_TerminalOutput/#returns_1","text":"None val","title":"Returns"},{"location":"ponybench-_TerminalOutput/#private-functions","text":"","title":"Private Functions"},{"location":"ponybench-_TerminalOutput/#_print_benchmark","text":"[Source] fun ref _print_benchmark( results: _Results val, adjust: Bool val) : None val","title":"_print_benchmark"},{"location":"ponybench-_TerminalOutput/#parameters_2","text":"results: _Results val adjust: Bool val","title":"Parameters"},{"location":"ponybench-_TerminalOutput/#returns_2","text":"None val","title":"Returns"},{"location":"ponybench-_TerminalOutput/#_print_heading","text":"[Source] fun box _print_heading() : None val","title":"_print_heading"},{"location":"ponybench-_TerminalOutput/#returns_3","text":"None val","title":"Returns"},{"location":"ponybench-_TerminalOutput/#_print_result","text":"[Source] fun box _print_result( name: String val, mean: String val, median: String val, dev: String val, iters: String val) : None val","title":"_print_result"},{"location":"ponybench-_TerminalOutput/#parameters_3","text":"name: String val mean: String val median: String val dev: String val iters: String val","title":"Parameters"},{"location":"ponybench-_TerminalOutput/#returns_4","text":"None val","title":"Returns"},{"location":"ponybench-_TerminalOutput/#_print","text":"[Source] fun box _print( msg: String val) : None val","title":"_print"},{"location":"ponybench-_TerminalOutput/#parameters_4","text":"msg: String val","title":"Parameters"},{"location":"ponybench-_TerminalOutput/#returns_5","text":"None val","title":"Returns"},{"location":"ponybench-_TerminalOutput/#_warn","text":"[Source] fun box _warn( msg: String val) : None val","title":"_warn"},{"location":"ponybench-_TerminalOutput/#parameters_5","text":"msg: String val","title":"Parameters"},{"location":"ponybench-_TerminalOutput/#returns_6","text":"None val","title":"Returns"},{"location":"ponytest--index/","text":"PonyTest package \u00b6 The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. Example program \u00b6 To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String => \"addition\" fun apply(h: TestHelper) => h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String => \"subtraction\" fun apply(h: TestHelper) => h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. Test names \u00b6 Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option. Aggregation \u00b6 Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use \"ponytest\" use foo = \"foo\" use bar = \"bar\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. Long tests \u00b6 Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. Exclusion groups \u00b6 By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. Labels \u00b6 Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use \"ponytest\" class iso _I8AddTest is UnitTest fun name(): String => \"_I8AddTest\" fun label(): String => \"simple\" fun apply(h: TestHelper) => h.assert_eq[I8](1, 1) Setting up and tearing down a test environment \u00b6 Set Up \u00b6 Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env . Tear Down \u00b6 Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down. Example \u00b6 The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use \"ponytest\" use \"files\" class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String => \"temp-dir\" fun ref set_up(h: TestHelper)? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"temp-dir\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? => let dir = tmp_dir as FilePath // do something inside the temporary directory Public Types \u00b6 trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest Private Types \u00b6 trait _Group actor _ExclusiveGroup actor _SimultaneousGroup primitive _Color","title":"Package"},{"location":"ponytest--index/#ponytest-package","text":"The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: builtin time collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function.","title":"PonyTest package"},{"location":"ponytest--index/#example-program","text":"To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String => \"addition\" fun apply(h: TestHelper) => h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String => \"subtraction\" fun apply(h: TestHelper) => h.assert_eq[U32](2, 4 - 2) The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks.","title":"Example program"},{"location":"ponytest--index/#test-names","text":"Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the --exclude=[prefix] command line option. You can run only tests whose names start with a given string by using the --only=[prefix] command line option.","title":"Test names"},{"location":"ponytest--index/#aggregation","text":"Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages foo and bar . use \"ponytest\" use foo = \"foo\" use bar = \"bar\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => foo.Main.make().tests(test) bar.Main.make().tests(test) Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists.","title":"Aggregation"},{"location":"ponytest--index/#long-tests","text":"Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed.","title":"Long tests"},{"location":"ponytest--index/#exclusion-groups","text":"By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use.","title":"Exclusion groups"},{"location":"ponytest--index/#labels","text":"Test can have label. Labels are used to filter which tests are run, by setting command line argument --label=[some custom label] . It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding label(): String method in unit test. use \"ponytest\" class iso _I8AddTest is UnitTest fun name(): String => \"_I8AddTest\" fun label(): String => \"simple\" fun apply(h: TestHelper) => h.assert_eq[I8](1, 1)","title":"Labels"},{"location":"ponytest--index/#setting-up-and-tearing-down-a-test-environment","text":"","title":"Setting up and tearing down a test environment"},{"location":"ponytest--index/#set-up","text":"Any kind of fixture or environment necessary for executing a UnitTest can be set up either in the tests constructor or in a function called set_up() . set_up() is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's TestHelper is handed to set_up() in order to log messages or access the tests Env via TestHelper.env .","title":"Set Up"},{"location":"ponytest--index/#tear-down","text":"Each unit test object may define a tear_down() function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The tear_down() function is called for each test regardless of whether it passed or failed. If a test times out tear_down() will be called after timed_out() returns. When a test is in an exclusion group, the tear_down() call is considered part of the tests run. The next test in the exclusion group will not start until after tear_down() returns on the current test. The test's TestHelper is handed to tear_down() and it is permitted to log messages and call assert functions during tear down.","title":"Tear Down"},{"location":"ponytest--index/#example","text":"The following example creates a temporary directory in the set_up() function and removes it in the tear_down() function, thus simplifying the test function itself: use \"ponytest\" use \"files\" class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String => \"temp-dir\" fun ref set_up(h: TestHelper)? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"temp-dir\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? => let dir = tmp_dir as FilePath // do something inside the temporary directory","title":"Example"},{"location":"ponytest--index/#public-types","text":"trait UnitTest trait TestList interface ITest class TestHelper actor PonyTest","title":"Public Types"},{"location":"ponytest--index/#private-types","text":"trait _Group actor _ExclusiveGroup actor _SimultaneousGroup primitive _Color","title":"Private Types"},{"location":"ponytest-ITest/","text":"ITest \u00b6 [Source] interface ref ITest Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : None val ? Returns \u00b6 None val ?","title":"interface ITest"},{"location":"ponytest-ITest/#itest","text":"[Source] interface ref ITest","title":"ITest"},{"location":"ponytest-ITest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-ITest/#apply","text":"[Source] fun box apply() : None val ?","title":"apply"},{"location":"ponytest-ITest/#returns","text":"None val ?","title":"Returns"},{"location":"ponytest-PonyTest/","text":"PonyTest \u00b6 [Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest Constructors \u00b6 create \u00b6 [Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^ Parameters \u00b6 env: Env val list: TestList tag Returns \u00b6 PonyTest tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso) Parameters \u00b6 test: UnitTest iso Private Behaviours \u00b6 _test_started \u00b6 [Source] A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. be _test_started( id: USize val) Parameters \u00b6 id: USize val _test_complete \u00b6 [Source] A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. be _test_complete( id: USize val, pass: Bool val, log: Array[String val] val) Parameters \u00b6 id: USize val pass: Bool val log: Array [ String val] val _all_tests_applied \u00b6 [Source] All our tests have been handed to apply(), setup for finishing be _all_tests_applied() Private Functions \u00b6 _find_group \u00b6 [Source] Find the group to use for the given group name, subject to the --sequential flag. fun ref _find_group( group_name: String val) : _Group tag Parameters \u00b6 group_name: String val Returns \u00b6 _Group tag _process_opts \u00b6 [Source] Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. fun ref _process_opts() : None val Returns \u00b6 None val _print_report \u00b6 [Source] The tests are all complete, print out the results. fun box _print_report() : None val Returns \u00b6 None val _plural \u00b6 [Source] Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". fun box _plural( n: USize val) : String val Parameters \u00b6 n: USize val Returns \u00b6 String val","title":"actor PonyTest"},{"location":"ponytest-PonyTest/#ponytest","text":"[Source] Main test framework actor that organises tests, collates information and prints results. actor tag PonyTest","title":"PonyTest"},{"location":"ponytest-PonyTest/#constructors","text":"","title":"Constructors"},{"location":"ponytest-PonyTest/#create","text":"[Source] Create a PonyTest object and use it to run the tests from the given TestList new tag create( env: Env val, list: TestList tag) : PonyTest tag^","title":"create"},{"location":"ponytest-PonyTest/#parameters","text":"env: Env val list: TestList tag","title":"Parameters"},{"location":"ponytest-PonyTest/#returns","text":"PonyTest tag^","title":"Returns"},{"location":"ponytest-PonyTest/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-PonyTest/#apply","text":"[Source] Run the given test, subject to our filters and options. be apply( test: UnitTest iso)","title":"apply"},{"location":"ponytest-PonyTest/#parameters_1","text":"test: UnitTest iso","title":"Parameters"},{"location":"ponytest-PonyTest/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-PonyTest/#_test_started","text":"[Source] A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. be _test_started( id: USize val)","title":"_test_started"},{"location":"ponytest-PonyTest/#parameters_2","text":"id: USize val","title":"Parameters"},{"location":"ponytest-PonyTest/#_test_complete","text":"[Source] A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. be _test_complete( id: USize val, pass: Bool val, log: Array[String val] val)","title":"_test_complete"},{"location":"ponytest-PonyTest/#parameters_3","text":"id: USize val pass: Bool val log: Array [ String val] val","title":"Parameters"},{"location":"ponytest-PonyTest/#_all_tests_applied","text":"[Source] All our tests have been handed to apply(), setup for finishing be _all_tests_applied()","title":"_all_tests_applied"},{"location":"ponytest-PonyTest/#private-functions","text":"","title":"Private Functions"},{"location":"ponytest-PonyTest/#_find_group","text":"[Source] Find the group to use for the given group name, subject to the --sequential flag. fun ref _find_group( group_name: String val) : _Group tag","title":"_find_group"},{"location":"ponytest-PonyTest/#parameters_4","text":"group_name: String val","title":"Parameters"},{"location":"ponytest-PonyTest/#returns_1","text":"_Group tag","title":"Returns"},{"location":"ponytest-PonyTest/#_process_opts","text":"[Source] Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. fun ref _process_opts() : None val","title":"_process_opts"},{"location":"ponytest-PonyTest/#returns_2","text":"None val","title":"Returns"},{"location":"ponytest-PonyTest/#_print_report","text":"[Source] The tests are all complete, print out the results. fun box _print_report() : None val","title":"_print_report"},{"location":"ponytest-PonyTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-PonyTest/#_plural","text":"[Source] Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". fun box _plural( n: USize val) : String val","title":"_plural"},{"location":"ponytest-PonyTest/#parameters_5","text":"n: USize val","title":"Parameters"},{"location":"ponytest-PonyTest/#returns_4","text":"String val","title":"Returns"},{"location":"ponytest-TestHelper/","text":"TestHelper \u00b6 [Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper Constructors \u00b6 _create \u00b6 [Source] Create a new TestHelper. new val _create( runner: _TestRunner tag, env': Env val) : TestHelper val^ Parameters \u00b6 runner: _TestRunner tag env': Env val Returns \u00b6 TestHelper val^ Public fields \u00b6 let env: Env val \u00b6 [Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests. Public Functions \u00b6 log \u00b6 [Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = false) : None val Parameters \u00b6 msg: String val verbose: Bool val = false Returns \u00b6 None val fail \u00b6 [Source] Flag the test as having failed. fun box fail( msg: String val = \"Test failed\") : None val Parameters \u00b6 msg: String val = \"Test failed\" Returns \u00b6 None val assert_true \u00b6 [Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_false \u00b6 [Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_error \u00b6 [Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_no_error \u00b6 [Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_is[A: A] \u00b6 [Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_eq[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_isnt[A: A] \u00b6 [Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_ne[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_array_eq[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the contents of the 2 given ReadSeqs are equal. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 2; 3] h.assert_array_eq[U8](a, b) fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val assert_array_eq_unordered[A: ( Equatable [A] #read & Stringable #read)] \u00b6 [Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 3; 2] h.assert_array_eq_unordered[U8](a, b) fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val Parameters \u00b6 expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc Returns \u00b6 Bool val long_test \u00b6 [Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val Parameters \u00b6 timeout: U64 val Returns \u00b6 None val complete \u00b6 [Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val Parameters \u00b6 success: Bool val Returns \u00b6 None val expect_action \u00b6 [Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val complete_action \u00b6 [Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val fail_action \u00b6 [Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val Parameters \u00b6 name: String val Returns \u00b6 None val dispose_when_done \u00b6 [Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val Parameters \u00b6 disposable: DisposableActor tag Returns \u00b6 None val Private Functions \u00b6 _check_is[A: A] \u00b6 [Source] Check that the 2 given expressions resolve to the same instance fun box _check_is[A: A]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters \u00b6 check: String val expect: A actual: A msg: String val loc: SourceLoc val Returns \u00b6 Bool val _check_eq[A: ( Equatable [A] #read & Stringable )] \u00b6 [Source] Check that the 2 given expressions are equal. fun box _check_eq[A: (Equatable[A] #read & Stringable)]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters \u00b6 check: String val expect: A actual: A msg: String val loc: SourceLoc val Returns \u00b6 Bool val _check_isnt[A: A] \u00b6 [Source] Check that the 2 given expressions resolve to different instances. fun box _check_isnt[A: A]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters \u00b6 check: String val not_expect: A actual: A msg: String val loc: SourceLoc val Returns \u00b6 Bool val _check_ne[A: ( Equatable [A] #read & Stringable )] \u00b6 [Source] Check that the 2 given expressions are not equal. fun box _check_ne[A: (Equatable[A] #read & Stringable)]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val Parameters \u00b6 check: String val not_expect: A actual: A msg: String val loc: SourceLoc val Returns \u00b6 Bool val _format_loc \u00b6 [Source] fun box _format_loc( loc: SourceLoc val) : String val Parameters \u00b6 loc: SourceLoc val Returns \u00b6 String val _print_array[A: Stringable #read] \u00b6 [Source] Generate a printable string of the contents of the given readseq to use in error messages. The type parameter of this function is the type parameter of the elements in the ReadSeq. fun box _print_array[A: Stringable #read]( array: ReadSeq[A] box) : String val Parameters \u00b6 array: ReadSeq [A] box Returns \u00b6 String val","title":"class TestHelper"},{"location":"ponytest-TestHelper/#testhelper","text":"[Source] Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. class val TestHelper","title":"TestHelper"},{"location":"ponytest-TestHelper/#constructors","text":"","title":"Constructors"},{"location":"ponytest-TestHelper/#_create","text":"[Source] Create a new TestHelper. new val _create( runner: _TestRunner tag, env': Env val) : TestHelper val^","title":"_create"},{"location":"ponytest-TestHelper/#parameters","text":"runner: _TestRunner tag env': Env val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns","text":"TestHelper val^","title":"Returns"},{"location":"ponytest-TestHelper/#public-fields","text":"","title":"Public fields"},{"location":"ponytest-TestHelper/#let-env-env-val","text":"[Source] The process environment. This is useful for getting the root authority in order to access the filesystem (See files ) or the network (See net ) in your tests.","title":"let env: Env val"},{"location":"ponytest-TestHelper/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestHelper/#log","text":"[Source] Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. fun box log( msg: String val, verbose: Bool val = false) : None val","title":"log"},{"location":"ponytest-TestHelper/#parameters_1","text":"msg: String val verbose: Bool val = false","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_1","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail","text":"[Source] Flag the test as having failed. fun box fail( msg: String val = \"Test failed\") : None val","title":"fail"},{"location":"ponytest-TestHelper/#parameters_2","text":"msg: String val = \"Test failed\"","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_2","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_true","text":"[Source] Assert that the given expression is true. fun box assert_true( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_true"},{"location":"ponytest-TestHelper/#parameters_3","text":"actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_3","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_false","text":"[Source] Assert that the given expression is false. fun box assert_false( actual: Bool val, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_false"},{"location":"ponytest-TestHelper/#parameters_4","text":"actual: Bool val msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_error","text":"[Source] Assert that the given test function throws an error when run. fun box assert_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_error"},{"location":"ponytest-TestHelper/#parameters_5","text":"test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_no_error","text":"[Source] Assert that the gived test function does not throw an error when run. fun box assert_no_error( test: ITest box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_no_error"},{"location":"ponytest-TestHelper/#parameters_6","text":"test: ITest box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_6","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_is91a-a93","text":"[Source] Assert that the 2 given expressions resolve to the same instance fun box assert_is[A: A]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_7","text":"expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_7","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_eq91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the 2 given expressions are equal. fun box assert_eq[A: (Equatable[A] #read & Stringable #read)]( expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_8","text":"expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_8","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_isnt91a-a93","text":"[Source] Assert that the 2 given expressions resolve to different instances. fun box assert_isnt[A: A]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_9","text":"not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_9","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_ne91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the 2 given expressions are not equal. fun box assert_ne[A: (Equatable[A] #read & Stringable #read)]( not_expect: A, actual: A, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_10","text":"not_expect: A actual: A msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_10","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 2; 3] h.assert_array_eq[U8](a, b) fun box assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_11","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_11","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#assert_array_eq_unordered91a-equatable91a93-read-stringable-read93","text":"[Source] Assert that the contents of the 2 given ReadSeqs are equal ignoring order. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two Array[U8] , you should call this method as follows: fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 3; 2] h.assert_array_eq_unordered[U8](a, b) fun box assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A] box, actual: ReadSeq[A] box, msg: String val = \"\", loc: SourceLoc val = __loc) : Bool val","title":"assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"},{"location":"ponytest-TestHelper/#parameters_12","text":"expect: ReadSeq [A] box actual: ReadSeq [A] box msg: String val = \"\" loc: SourceLoc val = __loc","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_12","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#long_test","text":"[Source] Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. fun box long_test( timeout: U64 val) : None val","title":"long_test"},{"location":"ponytest-TestHelper/#parameters_13","text":"timeout: U64 val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_13","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete","text":"[Source] MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. fun box complete( success: Bool val) : None val","title":"complete"},{"location":"ponytest-TestHelper/#parameters_14","text":"success: Bool val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_14","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#expect_action","text":"[Source] Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. fun box expect_action( name: String val) : None val","title":"expect_action"},{"location":"ponytest-TestHelper/#parameters_15","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_15","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#complete_action","text":"[Source] MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. fun box complete_action( name: String val) : None val","title":"complete_action"},{"location":"ponytest-TestHelper/#parameters_16","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_16","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#fail_action","text":"[Source] Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. fun box fail_action( name: String val) : None val","title":"fail_action"},{"location":"ponytest-TestHelper/#parameters_17","text":"name: String val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_17","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#dispose_when_done","text":"[Source] Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. fun box dispose_when_done( disposable: DisposableActor tag) : None val","title":"dispose_when_done"},{"location":"ponytest-TestHelper/#parameters_18","text":"disposable: DisposableActor tag","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_18","text":"None val","title":"Returns"},{"location":"ponytest-TestHelper/#private-functions","text":"","title":"Private Functions"},{"location":"ponytest-TestHelper/#_check_is91a-a93","text":"[Source] Check that the 2 given expressions resolve to the same instance fun box _check_is[A: A]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_is[A: A]"},{"location":"ponytest-TestHelper/#parameters_19","text":"check: String val expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_19","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_eq91a-equatable91a93-read-stringable93","text":"[Source] Check that the 2 given expressions are equal. fun box _check_eq[A: (Equatable[A] #read & Stringable)]( check: String val, expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_eq[A: (Equatable[A] #read &amp; Stringable)]"},{"location":"ponytest-TestHelper/#parameters_20","text":"check: String val expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_20","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_isnt91a-a93","text":"[Source] Check that the 2 given expressions resolve to different instances. fun box _check_isnt[A: A]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_isnt[A: A]"},{"location":"ponytest-TestHelper/#parameters_21","text":"check: String val not_expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_21","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_check_ne91a-equatable91a93-read-stringable93","text":"[Source] Check that the 2 given expressions are not equal. fun box _check_ne[A: (Equatable[A] #read & Stringable)]( check: String val, not_expect: A, actual: A, msg: String val, loc: SourceLoc val) : Bool val","title":"_check_ne[A: (Equatable[A] #read &amp; Stringable)]"},{"location":"ponytest-TestHelper/#parameters_22","text":"check: String val not_expect: A actual: A msg: String val loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_22","text":"Bool val","title":"Returns"},{"location":"ponytest-TestHelper/#_format_loc","text":"[Source] fun box _format_loc( loc: SourceLoc val) : String val","title":"_format_loc"},{"location":"ponytest-TestHelper/#parameters_23","text":"loc: SourceLoc val","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_23","text":"String val","title":"Returns"},{"location":"ponytest-TestHelper/#_print_array91a-stringable-read93","text":"[Source] Generate a printable string of the contents of the given readseq to use in error messages. The type parameter of this function is the type parameter of the elements in the ReadSeq. fun box _print_array[A: Stringable #read]( array: ReadSeq[A] box) : String val","title":"_print_array[A: Stringable #read]"},{"location":"ponytest-TestHelper/#parameters_24","text":"array: ReadSeq [A] box","title":"Parameters"},{"location":"ponytest-TestHelper/#returns_24","text":"String val","title":"Returns"},{"location":"ponytest-TestList/","text":"TestList \u00b6 [Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList Public Functions \u00b6 tests \u00b6 [Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) => test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val Parameters \u00b6 test: PonyTest tag Returns \u00b6 None val","title":"trait TestList"},{"location":"ponytest-TestList/#testlist","text":"[Source] Source of unit tests for a PonyTest object. See package doc string for further information and example use. trait ref TestList","title":"TestList"},{"location":"ponytest-TestList/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-TestList/#tests","text":"[Source] Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: fun tests(test: PonyTest) => test(_TestClass1) test(_TestClass2) test(_TestClass3) fun tag tests( test: PonyTest tag) : None val","title":"tests"},{"location":"ponytest-TestList/#parameters","text":"test: PonyTest tag","title":"Parameters"},{"location":"ponytest-TestList/#returns","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/","text":"UnitTest \u00b6 [Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest Public Functions \u00b6 name \u00b6 [Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val Returns \u00b6 String val exclusion_group \u00b6 [Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val Returns \u00b6 String val apply \u00b6 [Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ? Parameters \u00b6 h: TestHelper val Returns \u00b6 None val ? timed_out \u00b6 [Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val Parameters \u00b6 h: TestHelper val Returns \u00b6 None val set_up \u00b6 [Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ? Parameters \u00b6 h: TestHelper val Returns \u00b6 None val ? tear_down \u00b6 [Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val Parameters \u00b6 h: TestHelper val Returns \u00b6 None val label \u00b6 [Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val Returns \u00b6 String val","title":"trait UnitTest"},{"location":"ponytest-UnitTest/#unittest","text":"[Source] Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. trait ref UnitTest","title":"UnitTest"},{"location":"ponytest-UnitTest/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-UnitTest/#name","text":"[Source] Report the test name, which is used when printing test results and on the command line to select tests to run. fun box name() : String val","title":"name"},{"location":"ponytest-UnitTest/#returns","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#exclusion_group","text":"[Source] Report the test exclusion group, returning an empty string for none. The default body returns an empty string. fun box exclusion_group() : String val","title":"exclusion_group"},{"location":"ponytest-UnitTest/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-UnitTest/#apply","text":"[Source] Run the test. Raising an error is interpreted as a test failure. fun ref apply( h: TestHelper val) : None val ?","title":"apply"},{"location":"ponytest-UnitTest/#parameters","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_2","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#timed_out","text":"[Source] Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. fun ref timed_out( h: TestHelper val) : None val","title":"timed_out"},{"location":"ponytest-UnitTest/#parameters_1","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_3","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#set_up","text":"[Source] Set up the testing environment before a test method is called. Default is to do nothing. fun ref set_up( h: TestHelper val) : None val ?","title":"set_up"},{"location":"ponytest-UnitTest/#parameters_2","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_4","text":"None val ?","title":"Returns"},{"location":"ponytest-UnitTest/#tear_down","text":"[Source] Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. fun ref tear_down( h: TestHelper val) : None val","title":"tear_down"},{"location":"ponytest-UnitTest/#parameters_3","text":"h: TestHelper val","title":"Parameters"},{"location":"ponytest-UnitTest/#returns_5","text":"None val","title":"Returns"},{"location":"ponytest-UnitTest/#label","text":"[Source] Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. fun box label() : String val","title":"label"},{"location":"ponytest-UnitTest/#returns_6","text":"String val","title":"Returns"},{"location":"ponytest-_Color/","text":"_Color \u00b6 [Source] Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. primitive val _Color Constructors \u00b6 create \u00b6 [Source] new val create() : _Color val^ Returns \u00b6 _Color val^ Public Functions \u00b6 reset \u00b6 [Source] Resets all colours and text styles to the default. fun box reset() : String val Returns \u00b6 String val red \u00b6 [Source] Bright red text. fun box red() : String val Returns \u00b6 String val green \u00b6 [Source] Bright green text. fun box green() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: _Color val) : Bool val Parameters \u00b6 that: _Color val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _Color val) : Bool val Parameters \u00b6 that: _Color val Returns \u00b6 Bool val","title":"primitive _Color"},{"location":"ponytest-_Color/#_color","text":"[Source] Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. primitive val _Color","title":"_Color"},{"location":"ponytest-_Color/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_Color/#create","text":"[Source] new val create() : _Color val^","title":"create"},{"location":"ponytest-_Color/#returns","text":"_Color val^","title":"Returns"},{"location":"ponytest-_Color/#public-functions","text":"","title":"Public Functions"},{"location":"ponytest-_Color/#reset","text":"[Source] Resets all colours and text styles to the default. fun box reset() : String val","title":"reset"},{"location":"ponytest-_Color/#returns_1","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#red","text":"[Source] Bright red text. fun box red() : String val","title":"red"},{"location":"ponytest-_Color/#returns_2","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#green","text":"[Source] Bright green text. fun box green() : String val","title":"green"},{"location":"ponytest-_Color/#returns_3","text":"String val","title":"Returns"},{"location":"ponytest-_Color/#eq","text":"[Source] fun box eq( that: _Color val) : Bool val","title":"eq"},{"location":"ponytest-_Color/#parameters","text":"that: _Color val","title":"Parameters"},{"location":"ponytest-_Color/#returns_4","text":"Bool val","title":"Returns"},{"location":"ponytest-_Color/#ne","text":"[Source] fun box ne( that: _Color val) : Bool val","title":"ne"},{"location":"ponytest-_Color/#parameters_1","text":"that: _Color val","title":"Parameters"},{"location":"ponytest-_Color/#returns_5","text":"Bool val","title":"Returns"},{"location":"ponytest-_ExclusiveGroup/","text":"_ExclusiveGroup \u00b6 [Source] Test group in which we only ever have one test running at a time. actor tag _ExclusiveGroup is _Group tag Implements \u00b6 _Group tag Constructors \u00b6 create \u00b6 [Source] new tag create() : _ExclusiveGroup tag^ Returns \u00b6 _ExclusiveGroup tag^ Public Behaviours \u00b6 apply \u00b6 [Source] be apply( runner: _TestRunner tag) Parameters \u00b6 runner: _TestRunner tag Private Behaviours \u00b6 _test_complete \u00b6 [Source] be _test_complete( runner: _TestRunner tag) Parameters \u00b6 runner: _TestRunner tag","title":"actor _ExclusiveGroup"},{"location":"ponytest-_ExclusiveGroup/#_exclusivegroup","text":"[Source] Test group in which we only ever have one test running at a time. actor tag _ExclusiveGroup is _Group tag","title":"_ExclusiveGroup"},{"location":"ponytest-_ExclusiveGroup/#implements","text":"_Group tag","title":"Implements"},{"location":"ponytest-_ExclusiveGroup/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_ExclusiveGroup/#create","text":"[Source] new tag create() : _ExclusiveGroup tag^","title":"create"},{"location":"ponytest-_ExclusiveGroup/#returns","text":"_ExclusiveGroup tag^","title":"Returns"},{"location":"ponytest-_ExclusiveGroup/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_ExclusiveGroup/#apply","text":"[Source] be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_ExclusiveGroup/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_ExclusiveGroup/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_ExclusiveGroup/#_test_complete","text":"[Source] be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_ExclusiveGroup/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_Group/","text":"_Group \u00b6 [Source] Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. trait tag _Group Public Behaviours \u00b6 apply \u00b6 [Source] Run the given test, or queue it and run later, as appropriate. be apply( runner: _TestRunner tag) Parameters \u00b6 runner: _TestRunner tag Private Behaviours \u00b6 _test_complete \u00b6 [Source] The specified test has completed. be _test_complete( runner: _TestRunner tag) Parameters \u00b6 runner: _TestRunner tag","title":"trait _Group"},{"location":"ponytest-_Group/#_group","text":"[Source] Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. trait tag _Group","title":"_Group"},{"location":"ponytest-_Group/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_Group/#apply","text":"[Source] Run the given test, or queue it and run later, as appropriate. be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_Group/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_Group/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_Group/#_test_complete","text":"[Source] The specified test has completed. be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_Group/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_SimultaneousGroup/","text":"_SimultaneousGroup \u00b6 [Source] Test group in which all tests can run concurrently. actor tag _SimultaneousGroup is _Group tag Implements \u00b6 _Group tag Constructors \u00b6 create \u00b6 [Source] new tag create() : _SimultaneousGroup tag^ Returns \u00b6 _SimultaneousGroup tag^ Public Behaviours \u00b6 apply \u00b6 [Source] be apply( runner: _TestRunner tag) Parameters \u00b6 runner: _TestRunner tag Private Behaviours \u00b6 _test_complete \u00b6 [Source] be _test_complete( runner: _TestRunner tag) Parameters \u00b6 runner: _TestRunner tag","title":"actor _SimultaneousGroup"},{"location":"ponytest-_SimultaneousGroup/#_simultaneousgroup","text":"[Source] Test group in which all tests can run concurrently. actor tag _SimultaneousGroup is _Group tag","title":"_SimultaneousGroup"},{"location":"ponytest-_SimultaneousGroup/#implements","text":"_Group tag","title":"Implements"},{"location":"ponytest-_SimultaneousGroup/#constructors","text":"","title":"Constructors"},{"location":"ponytest-_SimultaneousGroup/#create","text":"[Source] new tag create() : _SimultaneousGroup tag^","title":"create"},{"location":"ponytest-_SimultaneousGroup/#returns","text":"_SimultaneousGroup tag^","title":"Returns"},{"location":"ponytest-_SimultaneousGroup/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"ponytest-_SimultaneousGroup/#apply","text":"[Source] be apply( runner: _TestRunner tag)","title":"apply"},{"location":"ponytest-_SimultaneousGroup/#parameters","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"ponytest-_SimultaneousGroup/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"ponytest-_SimultaneousGroup/#_test_complete","text":"[Source] be _test_complete( runner: _TestRunner tag)","title":"_test_complete"},{"location":"ponytest-_SimultaneousGroup/#parameters_1","text":"runner: _TestRunner tag","title":"Parameters"},{"location":"process--index/","text":"Process package \u00b6 The Process package provides support for handling Unix style processes. For each external process that you want to handle, you need to create a ProcessMonitor and a corresponding ProcessNotify object. Each ProcessMonitor runs as it own actor and upon receiving data will call its corresponding ProcessNotify 's method. Example program \u00b6 The following program will spawn an external program and write to it's STDIN. Output received on STDOUT of the child process is forwarded to the ProcessNotify client and printed. use \"process\" use \"files\" actor Main new create(env: Env) => // create a notifier let client = ProcessClient(env) let notifier: ProcessNotify iso = consume client // define the binary to run try let path = FilePath(env.root as AmbientAuth, \"/bin/cat\")? // define the arguments; first arg is always the binary name let args: Array[String] val = [\"cat\"] // define the environment variable for the execution let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] // create a ProcessMonitor and spawn the child process let auth = env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) // write to STDIN of the child process pm.write(\"one, two, three\") pm.done_writing() // closing stdin allows cat to terminate else env.out.print(\"Could not create FilePath!\") end // define a client that implements the ProcessNotify interface class ProcessClient is ProcessNotify let _env: Env new iso create(env: Env) => _env = env fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) => let out = String.from_array(consume data) _env.out.print(\"STDOUT: \" + out) fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) => let err = String.from_array(consume data) _env.out.print(\"STDERR: \" + err) fun ref failed(process: ProcessMonitor ref, err: ProcessError) => match err | ExecveError => _env.out.print(\"ProcessError: ExecveError\") | PipeError => _env.out.print(\"ProcessError: PipeError\") | ForkError => _env.out.print(\"ProcessError: ForkError\") | WaitpidError => _env.out.print(\"ProcessError: WaitpidError\") | WriteError => _env.out.print(\"ProcessError: WriteError\") | KillError => _env.out.print(\"ProcessError: KillError\") | CapError => _env.out.print(\"ProcessError: CapError\") | Unsupported => _env.out.print(\"ProcessError: Unsupported\") else _env.out.print(\"Unknown ProcessError!\") end fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => let code: I32 = consume child_exit_code _env.out.print(\"Child exit code: \" + code.string()) Process portability \u00b6 The ProcessMonitor supports spawning processes on Linux, FreeBSD and OSX. Processes are not supported on Windows and attempting to use them will cause a runtime error. Shutting down ProcessMonitor and external process \u00b6 Document waitpid behaviour (stops world) Public Types \u00b6 interface ProcessNotify primitive ExecveError primitive PipeError primitive ForkError primitive WaitpidError primitive WriteError primitive KillError primitive Unsupported primitive CapError type ProcessError type ProcessMonitorAuth actor ProcessMonitor primitive StartProcessAuth primitive CatPath primitive CatArgs primitive EchoPath Private Types \u00b6 class _ProcessClient primitive _STDINFILENO primitive _STDOUTFILENO primitive _STDERRFILENO primitive _EPERM primitive _ESRCH primitive _EINTR primitive _EAGAIN primitive _EINVAL interface _Process class _ProcessNone class _ProcessPosix class _ProcessWindows primitive _FSETFL primitive _FGETFL primitive _FSETFD primitive _FGETFD primitive _FDCLOEXEC primitive _ONONBLOCK primitive _ERRORBROKENPIPE primitive _ERRORNODATA class _Pipe","title":"Package"},{"location":"process--index/#process-package","text":"The Process package provides support for handling Unix style processes. For each external process that you want to handle, you need to create a ProcessMonitor and a corresponding ProcessNotify object. Each ProcessMonitor runs as it own actor and upon receiving data will call its corresponding ProcessNotify 's method.","title":"Process package"},{"location":"process--index/#example-program","text":"The following program will spawn an external program and write to it's STDIN. Output received on STDOUT of the child process is forwarded to the ProcessNotify client and printed. use \"process\" use \"files\" actor Main new create(env: Env) => // create a notifier let client = ProcessClient(env) let notifier: ProcessNotify iso = consume client // define the binary to run try let path = FilePath(env.root as AmbientAuth, \"/bin/cat\")? // define the arguments; first arg is always the binary name let args: Array[String] val = [\"cat\"] // define the environment variable for the execution let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] // create a ProcessMonitor and spawn the child process let auth = env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) // write to STDIN of the child process pm.write(\"one, two, three\") pm.done_writing() // closing stdin allows cat to terminate else env.out.print(\"Could not create FilePath!\") end // define a client that implements the ProcessNotify interface class ProcessClient is ProcessNotify let _env: Env new iso create(env: Env) => _env = env fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) => let out = String.from_array(consume data) _env.out.print(\"STDOUT: \" + out) fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) => let err = String.from_array(consume data) _env.out.print(\"STDERR: \" + err) fun ref failed(process: ProcessMonitor ref, err: ProcessError) => match err | ExecveError => _env.out.print(\"ProcessError: ExecveError\") | PipeError => _env.out.print(\"ProcessError: PipeError\") | ForkError => _env.out.print(\"ProcessError: ForkError\") | WaitpidError => _env.out.print(\"ProcessError: WaitpidError\") | WriteError => _env.out.print(\"ProcessError: WriteError\") | KillError => _env.out.print(\"ProcessError: KillError\") | CapError => _env.out.print(\"ProcessError: CapError\") | Unsupported => _env.out.print(\"ProcessError: Unsupported\") else _env.out.print(\"Unknown ProcessError!\") end fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => let code: I32 = consume child_exit_code _env.out.print(\"Child exit code: \" + code.string())","title":"Example program"},{"location":"process--index/#process-portability","text":"The ProcessMonitor supports spawning processes on Linux, FreeBSD and OSX. Processes are not supported on Windows and attempting to use them will cause a runtime error.","title":"Process portability"},{"location":"process--index/#shutting-down-processmonitor-and-external-process","text":"Document waitpid behaviour (stops world)","title":"Shutting down ProcessMonitor and external process"},{"location":"process--index/#public-types","text":"interface ProcessNotify primitive ExecveError primitive PipeError primitive ForkError primitive WaitpidError primitive WriteError primitive KillError primitive Unsupported primitive CapError type ProcessError type ProcessMonitorAuth actor ProcessMonitor primitive StartProcessAuth primitive CatPath primitive CatArgs primitive EchoPath","title":"Public Types"},{"location":"process--index/#private-types","text":"class _ProcessClient primitive _STDINFILENO primitive _STDOUTFILENO primitive _STDERRFILENO primitive _EPERM primitive _ESRCH primitive _EINTR primitive _EAGAIN primitive _EINVAL interface _Process class _ProcessNone class _ProcessPosix class _ProcessWindows primitive _FSETFL primitive _FGETFL primitive _FSETFD primitive _FGETFD primitive _FDCLOEXEC primitive _ONONBLOCK primitive _ERRORBROKENPIPE primitive _ERRORNODATA class _Pipe","title":"Private Types"},{"location":"process-CapError/","text":"CapError \u00b6 [Source] primitive val CapError Constructors \u00b6 create \u00b6 [Source] new val create() : CapError val^ Returns \u00b6 CapError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: CapError val) : Bool val Parameters \u00b6 that: CapError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CapError val) : Bool val Parameters \u00b6 that: CapError val Returns \u00b6 Bool val","title":"primitive CapError"},{"location":"process-CapError/#caperror","text":"[Source] primitive val CapError","title":"CapError"},{"location":"process-CapError/#constructors","text":"","title":"Constructors"},{"location":"process-CapError/#create","text":"[Source] new val create() : CapError val^","title":"create"},{"location":"process-CapError/#returns","text":"CapError val^","title":"Returns"},{"location":"process-CapError/#public-functions","text":"","title":"Public Functions"},{"location":"process-CapError/#eq","text":"[Source] fun box eq( that: CapError val) : Bool val","title":"eq"},{"location":"process-CapError/#parameters","text":"that: CapError val","title":"Parameters"},{"location":"process-CapError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-CapError/#ne","text":"[Source] fun box ne( that: CapError val) : Bool val","title":"ne"},{"location":"process-CapError/#parameters_1","text":"that: CapError val","title":"Parameters"},{"location":"process-CapError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-CatArgs/","text":"CatArgs \u00b6 [Source] primitive val CatArgs Constructors \u00b6 create \u00b6 [Source] new val create() : CatArgs val^ Returns \u00b6 CatArgs val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : Array[String val] val Returns \u00b6 Array [ String val] val eq \u00b6 [Source] fun box eq( that: CatArgs val) : Bool val Parameters \u00b6 that: CatArgs val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CatArgs val) : Bool val Parameters \u00b6 that: CatArgs val Returns \u00b6 Bool val","title":"primitive CatArgs"},{"location":"process-CatArgs/#catargs","text":"[Source] primitive val CatArgs","title":"CatArgs"},{"location":"process-CatArgs/#constructors","text":"","title":"Constructors"},{"location":"process-CatArgs/#create","text":"[Source] new val create() : CatArgs val^","title":"create"},{"location":"process-CatArgs/#returns","text":"CatArgs val^","title":"Returns"},{"location":"process-CatArgs/#public-functions","text":"","title":"Public Functions"},{"location":"process-CatArgs/#apply","text":"[Source] fun box apply() : Array[String val] val","title":"apply"},{"location":"process-CatArgs/#returns_1","text":"Array [ String val] val","title":"Returns"},{"location":"process-CatArgs/#eq","text":"[Source] fun box eq( that: CatArgs val) : Bool val","title":"eq"},{"location":"process-CatArgs/#parameters","text":"that: CatArgs val","title":"Parameters"},{"location":"process-CatArgs/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-CatArgs/#ne","text":"[Source] fun box ne( that: CatArgs val) : Bool val","title":"ne"},{"location":"process-CatArgs/#parameters_1","text":"that: CatArgs val","title":"Parameters"},{"location":"process-CatArgs/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-CatPath/","text":"CatPath \u00b6 [Source] primitive val CatPath Constructors \u00b6 create \u00b6 [Source] new val create() : CatPath val^ Returns \u00b6 CatPath val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: CatPath val) : Bool val Parameters \u00b6 that: CatPath val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CatPath val) : Bool val Parameters \u00b6 that: CatPath val Returns \u00b6 Bool val","title":"primitive CatPath"},{"location":"process-CatPath/#catpath","text":"[Source] primitive val CatPath","title":"CatPath"},{"location":"process-CatPath/#constructors","text":"","title":"Constructors"},{"location":"process-CatPath/#create","text":"[Source] new val create() : CatPath val^","title":"create"},{"location":"process-CatPath/#returns","text":"CatPath val^","title":"Returns"},{"location":"process-CatPath/#public-functions","text":"","title":"Public Functions"},{"location":"process-CatPath/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"process-CatPath/#returns_1","text":"String val","title":"Returns"},{"location":"process-CatPath/#eq","text":"[Source] fun box eq( that: CatPath val) : Bool val","title":"eq"},{"location":"process-CatPath/#parameters","text":"that: CatPath val","title":"Parameters"},{"location":"process-CatPath/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-CatPath/#ne","text":"[Source] fun box ne( that: CatPath val) : Bool val","title":"ne"},{"location":"process-CatPath/#parameters_1","text":"that: CatPath val","title":"Parameters"},{"location":"process-CatPath/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-EchoPath/","text":"EchoPath \u00b6 [Source] primitive val EchoPath Constructors \u00b6 create \u00b6 [Source] new val create() : EchoPath val^ Returns \u00b6 EchoPath val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: EchoPath val) : Bool val Parameters \u00b6 that: EchoPath val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: EchoPath val) : Bool val Parameters \u00b6 that: EchoPath val Returns \u00b6 Bool val","title":"primitive EchoPath"},{"location":"process-EchoPath/#echopath","text":"[Source] primitive val EchoPath","title":"EchoPath"},{"location":"process-EchoPath/#constructors","text":"","title":"Constructors"},{"location":"process-EchoPath/#create","text":"[Source] new val create() : EchoPath val^","title":"create"},{"location":"process-EchoPath/#returns","text":"EchoPath val^","title":"Returns"},{"location":"process-EchoPath/#public-functions","text":"","title":"Public Functions"},{"location":"process-EchoPath/#apply","text":"[Source] fun box apply() : String val","title":"apply"},{"location":"process-EchoPath/#returns_1","text":"String val","title":"Returns"},{"location":"process-EchoPath/#eq","text":"[Source] fun box eq( that: EchoPath val) : Bool val","title":"eq"},{"location":"process-EchoPath/#parameters","text":"that: EchoPath val","title":"Parameters"},{"location":"process-EchoPath/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-EchoPath/#ne","text":"[Source] fun box ne( that: EchoPath val) : Bool val","title":"ne"},{"location":"process-EchoPath/#parameters_1","text":"that: EchoPath val","title":"Parameters"},{"location":"process-EchoPath/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-ExecveError/","text":"ExecveError \u00b6 [Source] primitive val ExecveError Constructors \u00b6 create \u00b6 [Source] new val create() : ExecveError val^ Returns \u00b6 ExecveError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ExecveError val) : Bool val Parameters \u00b6 that: ExecveError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ExecveError val) : Bool val Parameters \u00b6 that: ExecveError val Returns \u00b6 Bool val","title":"primitive ExecveError"},{"location":"process-ExecveError/#execveerror","text":"[Source] primitive val ExecveError","title":"ExecveError"},{"location":"process-ExecveError/#constructors","text":"","title":"Constructors"},{"location":"process-ExecveError/#create","text":"[Source] new val create() : ExecveError val^","title":"create"},{"location":"process-ExecveError/#returns","text":"ExecveError val^","title":"Returns"},{"location":"process-ExecveError/#public-functions","text":"","title":"Public Functions"},{"location":"process-ExecveError/#eq","text":"[Source] fun box eq( that: ExecveError val) : Bool val","title":"eq"},{"location":"process-ExecveError/#parameters","text":"that: ExecveError val","title":"Parameters"},{"location":"process-ExecveError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-ExecveError/#ne","text":"[Source] fun box ne( that: ExecveError val) : Bool val","title":"ne"},{"location":"process-ExecveError/#parameters_1","text":"that: ExecveError val","title":"Parameters"},{"location":"process-ExecveError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-ForkError/","text":"ForkError \u00b6 [Source] primitive val ForkError Constructors \u00b6 create \u00b6 [Source] new val create() : ForkError val^ Returns \u00b6 ForkError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: ForkError val) : Bool val Parameters \u00b6 that: ForkError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ForkError val) : Bool val Parameters \u00b6 that: ForkError val Returns \u00b6 Bool val","title":"primitive ForkError"},{"location":"process-ForkError/#forkerror","text":"[Source] primitive val ForkError","title":"ForkError"},{"location":"process-ForkError/#constructors","text":"","title":"Constructors"},{"location":"process-ForkError/#create","text":"[Source] new val create() : ForkError val^","title":"create"},{"location":"process-ForkError/#returns","text":"ForkError val^","title":"Returns"},{"location":"process-ForkError/#public-functions","text":"","title":"Public Functions"},{"location":"process-ForkError/#eq","text":"[Source] fun box eq( that: ForkError val) : Bool val","title":"eq"},{"location":"process-ForkError/#parameters","text":"that: ForkError val","title":"Parameters"},{"location":"process-ForkError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-ForkError/#ne","text":"[Source] fun box ne( that: ForkError val) : Bool val","title":"ne"},{"location":"process-ForkError/#parameters_1","text":"that: ForkError val","title":"Parameters"},{"location":"process-ForkError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-KillError/","text":"KillError \u00b6 [Source] primitive val KillError Constructors \u00b6 create \u00b6 [Source] new val create() : KillError val^ Returns \u00b6 KillError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: KillError val) : Bool val Parameters \u00b6 that: KillError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: KillError val) : Bool val Parameters \u00b6 that: KillError val Returns \u00b6 Bool val","title":"primitive KillError"},{"location":"process-KillError/#killerror","text":"[Source] primitive val KillError","title":"KillError"},{"location":"process-KillError/#constructors","text":"","title":"Constructors"},{"location":"process-KillError/#create","text":"[Source] new val create() : KillError val^","title":"create"},{"location":"process-KillError/#returns","text":"KillError val^","title":"Returns"},{"location":"process-KillError/#public-functions","text":"","title":"Public Functions"},{"location":"process-KillError/#eq","text":"[Source] fun box eq( that: KillError val) : Bool val","title":"eq"},{"location":"process-KillError/#parameters","text":"that: KillError val","title":"Parameters"},{"location":"process-KillError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-KillError/#ne","text":"[Source] fun box ne( that: KillError val) : Bool val","title":"ne"},{"location":"process-KillError/#parameters_1","text":"that: KillError val","title":"Parameters"},{"location":"process-KillError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-PipeError/","text":"PipeError \u00b6 [Source] primitive val PipeError Constructors \u00b6 create \u00b6 [Source] new val create() : PipeError val^ Returns \u00b6 PipeError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: PipeError val) : Bool val Parameters \u00b6 that: PipeError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PipeError val) : Bool val Parameters \u00b6 that: PipeError val Returns \u00b6 Bool val","title":"primitive PipeError"},{"location":"process-PipeError/#pipeerror","text":"[Source] primitive val PipeError","title":"PipeError"},{"location":"process-PipeError/#constructors","text":"","title":"Constructors"},{"location":"process-PipeError/#create","text":"[Source] new val create() : PipeError val^","title":"create"},{"location":"process-PipeError/#returns","text":"PipeError val^","title":"Returns"},{"location":"process-PipeError/#public-functions","text":"","title":"Public Functions"},{"location":"process-PipeError/#eq","text":"[Source] fun box eq( that: PipeError val) : Bool val","title":"eq"},{"location":"process-PipeError/#parameters","text":"that: PipeError val","title":"Parameters"},{"location":"process-PipeError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-PipeError/#ne","text":"[Source] fun box ne( that: PipeError val) : Bool val","title":"ne"},{"location":"process-PipeError/#parameters_1","text":"that: PipeError val","title":"Parameters"},{"location":"process-PipeError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-ProcessError/","text":"ProcessError \u00b6 [Source] type ProcessError is (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val) Type Alias For \u00b6 ( ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)","title":"type ProcessError"},{"location":"process-ProcessError/#processerror","text":"[Source] type ProcessError is (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)","title":"ProcessError"},{"location":"process-ProcessError/#type-alias-for","text":"( ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)","title":"Type Alias For"},{"location":"process-ProcessMonitor/","text":"ProcessMonitor \u00b6 [Source] Fork+execs / creates a child process and monitors it. Notifies a client about STDOUT / STDERR events. actor tag ProcessMonitor Constructors \u00b6 create \u00b6 [Source] Create infrastructure to communicate with a forked child process and register the asio events. Fork child process and notify our user about incoming data via the notifier. new tag create( auth: (AmbientAuth val | StartProcessAuth val), backpressure_auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val), notifier: ProcessNotify iso, filepath: FilePath val, args: Array[String val] val, vars: Array[String val] val) : ProcessMonitor tag^ Parameters \u00b6 auth: ( AmbientAuth val | StartProcessAuth val) backpressure_auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val) notifier: ProcessNotify iso filepath: FilePath val args: Array [ String val] val vars: Array [ String val] val Returns \u00b6 ProcessMonitor tag^ Public Behaviours \u00b6 print \u00b6 [Source] Print some bytes and append a newline. be print( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) write \u00b6 [Source] Write to STDIN of the child process. be write( data: (String val | Array[U8 val] val)) Parameters \u00b6 data: ( String val | Array [ U8 val] val) printv \u00b6 [Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val writev \u00b6 [Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val) Parameters \u00b6 data: ByteSeqIter val done_writing \u00b6 [Source] Set the _done_writing flag to true. If _pending is empty we can close the _stdin pipe. be done_writing() dispose \u00b6 [Source] Terminate child and close down everything. be dispose() timer_notify \u00b6 [Source] Windows IO polling timer has fired be timer_notify() Public Functions \u00b6 expect \u00b6 [Source] A stdout call on the notifier must contain exactly qty bytes. If qty is zero, the call can contain any amount of data. fun ref expect( qty: USize val = 0) : None val Parameters \u00b6 qty: USize val = 0 Returns \u00b6 None val Private Behaviours \u00b6 _event_notify \u00b6 [Source] Handle the incoming Asio event from one of the pipes. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val _read_again \u00b6 [Source] Resume reading on file descriptor. be _read_again( near_fd: U32 val) Parameters \u00b6 near_fd: U32 val Private Functions \u00b6 _close \u00b6 [Source] Close all pipes and wait for the child process to exit. fun ref _close() : None val Returns \u00b6 None val _try_shutdown \u00b6 [Source] If neither stdout nor stderr are open we close down and exit. fun ref _try_shutdown() : None val Returns \u00b6 None val _pending_reads \u00b6 [Source] Read from stdout or stderr while data is available. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. It's safe to use the same buffer for stdout and stderr because of causal messaging. Events get processed one after another. fun ref _pending_reads( pipe: _Pipe ref) : None val Parameters \u00b6 pipe: _Pipe ref Returns \u00b6 None val _read_buf_size \u00b6 [Source] fun ref _read_buf_size() : None val Returns \u00b6 None val _write_final \u00b6 [Source] Write as much as possible to the pipe if it is open and there are no pending writes. Save everything unwritten into _pending and apply backpressure. fun ref _write_final( data: (String val | Array[U8 val] val)) : None val Parameters \u00b6 data: ( String val | Array [ U8 val] val) Returns \u00b6 None val _pending_writes \u00b6 [Source] Send any pending data. If any data can't be sent, keep it in _pending. Once _pending is non-empty, direct writes will get queued there, and they can only be written here. If the _done_writing flag is set, close the pipe once we've processed pending writes. fun ref _pending_writes() : None val Returns \u00b6 None val","title":"actor ProcessMonitor"},{"location":"process-ProcessMonitor/#processmonitor","text":"[Source] Fork+execs / creates a child process and monitors it. Notifies a client about STDOUT / STDERR events. actor tag ProcessMonitor","title":"ProcessMonitor"},{"location":"process-ProcessMonitor/#constructors","text":"","title":"Constructors"},{"location":"process-ProcessMonitor/#create","text":"[Source] Create infrastructure to communicate with a forked child process and register the asio events. Fork child process and notify our user about incoming data via the notifier. new tag create( auth: (AmbientAuth val | StartProcessAuth val), backpressure_auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val), notifier: ProcessNotify iso, filepath: FilePath val, args: Array[String val] val, vars: Array[String val] val) : ProcessMonitor tag^","title":"create"},{"location":"process-ProcessMonitor/#parameters","text":"auth: ( AmbientAuth val | StartProcessAuth val) backpressure_auth: ( AmbientAuth val | ApplyReleaseBackpressureAuth val) notifier: ProcessNotify iso filepath: FilePath val args: Array [ String val] val vars: Array [ String val] val","title":"Parameters"},{"location":"process-ProcessMonitor/#returns","text":"ProcessMonitor tag^","title":"Returns"},{"location":"process-ProcessMonitor/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"process-ProcessMonitor/#print","text":"[Source] Print some bytes and append a newline. be print( data: (String val | Array[U8 val] val))","title":"print"},{"location":"process-ProcessMonitor/#parameters_1","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"process-ProcessMonitor/#write","text":"[Source] Write to STDIN of the child process. be write( data: (String val | Array[U8 val] val))","title":"write"},{"location":"process-ProcessMonitor/#parameters_2","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"process-ProcessMonitor/#printv","text":"[Source] Print an iterable collection of ByteSeqs. be printv( data: ByteSeqIter val)","title":"printv"},{"location":"process-ProcessMonitor/#parameters_3","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"process-ProcessMonitor/#writev","text":"[Source] Write an iterable collection of ByteSeqs. be writev( data: ByteSeqIter val)","title":"writev"},{"location":"process-ProcessMonitor/#parameters_4","text":"data: ByteSeqIter val","title":"Parameters"},{"location":"process-ProcessMonitor/#done_writing","text":"[Source] Set the _done_writing flag to true. If _pending is empty we can close the _stdin pipe. be done_writing()","title":"done_writing"},{"location":"process-ProcessMonitor/#dispose","text":"[Source] Terminate child and close down everything. be dispose()","title":"dispose"},{"location":"process-ProcessMonitor/#timer_notify","text":"[Source] Windows IO polling timer has fired be timer_notify()","title":"timer_notify"},{"location":"process-ProcessMonitor/#public-functions","text":"","title":"Public Functions"},{"location":"process-ProcessMonitor/#expect","text":"[Source] A stdout call on the notifier must contain exactly qty bytes. If qty is zero, the call can contain any amount of data. fun ref expect( qty: USize val = 0) : None val","title":"expect"},{"location":"process-ProcessMonitor/#parameters_5","text":"qty: USize val = 0","title":"Parameters"},{"location":"process-ProcessMonitor/#returns_1","text":"None val","title":"Returns"},{"location":"process-ProcessMonitor/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"process-ProcessMonitor/#_event_notify","text":"[Source] Handle the incoming Asio event from one of the pipes. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"process-ProcessMonitor/#parameters_6","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"process-ProcessMonitor/#_read_again","text":"[Source] Resume reading on file descriptor. be _read_again( near_fd: U32 val)","title":"_read_again"},{"location":"process-ProcessMonitor/#parameters_7","text":"near_fd: U32 val","title":"Parameters"},{"location":"process-ProcessMonitor/#private-functions","text":"","title":"Private Functions"},{"location":"process-ProcessMonitor/#_close","text":"[Source] Close all pipes and wait for the child process to exit. fun ref _close() : None val","title":"_close"},{"location":"process-ProcessMonitor/#returns_2","text":"None val","title":"Returns"},{"location":"process-ProcessMonitor/#_try_shutdown","text":"[Source] If neither stdout nor stderr are open we close down and exit. fun ref _try_shutdown() : None val","title":"_try_shutdown"},{"location":"process-ProcessMonitor/#returns_3","text":"None val","title":"Returns"},{"location":"process-ProcessMonitor/#_pending_reads","text":"[Source] Read from stdout or stderr while data is available. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. It's safe to use the same buffer for stdout and stderr because of causal messaging. Events get processed one after another. fun ref _pending_reads( pipe: _Pipe ref) : None val","title":"_pending_reads"},{"location":"process-ProcessMonitor/#parameters_8","text":"pipe: _Pipe ref","title":"Parameters"},{"location":"process-ProcessMonitor/#returns_4","text":"None val","title":"Returns"},{"location":"process-ProcessMonitor/#_read_buf_size","text":"[Source] fun ref _read_buf_size() : None val","title":"_read_buf_size"},{"location":"process-ProcessMonitor/#returns_5","text":"None val","title":"Returns"},{"location":"process-ProcessMonitor/#_write_final","text":"[Source] Write as much as possible to the pipe if it is open and there are no pending writes. Save everything unwritten into _pending and apply backpressure. fun ref _write_final( data: (String val | Array[U8 val] val)) : None val","title":"_write_final"},{"location":"process-ProcessMonitor/#parameters_9","text":"data: ( String val | Array [ U8 val] val)","title":"Parameters"},{"location":"process-ProcessMonitor/#returns_6","text":"None val","title":"Returns"},{"location":"process-ProcessMonitor/#_pending_writes","text":"[Source] Send any pending data. If any data can't be sent, keep it in _pending. Once _pending is non-empty, direct writes will get queued there, and they can only be written here. If the _done_writing flag is set, close the pipe once we've processed pending writes. fun ref _pending_writes() : None val","title":"_pending_writes"},{"location":"process-ProcessMonitor/#returns_7","text":"None val","title":"Returns"},{"location":"process-ProcessMonitorAuth/","text":"ProcessMonitorAuth \u00b6 [Source] type ProcessMonitorAuth is (AmbientAuth val | StartProcessAuth val) Type Alias For \u00b6 ( AmbientAuth val | StartProcessAuth val)","title":"type ProcessMonitorAuth"},{"location":"process-ProcessMonitorAuth/#processmonitorauth","text":"[Source] type ProcessMonitorAuth is (AmbientAuth val | StartProcessAuth val)","title":"ProcessMonitorAuth"},{"location":"process-ProcessMonitorAuth/#type-alias-for","text":"( AmbientAuth val | StartProcessAuth val)","title":"Type Alias For"},{"location":"process-ProcessNotify/","text":"ProcessNotify \u00b6 [Source] Notifications for Process connections. interface ref ProcessNotify Public Functions \u00b6 created \u00b6 [Source] ProcessMonitor calls this when it is created. fun ref created( process: ProcessMonitor ref) : None val Parameters \u00b6 process: ProcessMonitor ref Returns \u00b6 None val stdout \u00b6 [Source] ProcessMonitor calls this when new data is received on STDOUT of the forked process fun ref stdout( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val Parameters \u00b6 process: ProcessMonitor ref data: Array [ U8 val] iso Returns \u00b6 None val stderr \u00b6 [Source] ProcessMonitor calls this when new data is received on STDERR of the forked process fun ref stderr( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val Parameters \u00b6 process: ProcessMonitor ref data: Array [ U8 val] iso Returns \u00b6 None val failed \u00b6 [Source] ProcessMonitor calls this if we run into errors communicating with the forked process. fun ref failed( process: ProcessMonitor ref, err: (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)) : None val Parameters \u00b6 process: ProcessMonitor ref err: ( ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val) Returns \u00b6 None val expect \u00b6 [Source] Called when the process monitor has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing. fun ref expect( process: ProcessMonitor ref, qty: USize val) : USize val Parameters \u00b6 process: ProcessMonitor ref qty: USize val Returns \u00b6 USize val dispose \u00b6 [Source] Call when ProcessMonitor terminates to cleanup ProcessNotify. We return the exit code of the child process. fun ref dispose( process: ProcessMonitor ref, child_exit_code: I32 val) : None val Parameters \u00b6 process: ProcessMonitor ref child_exit_code: I32 val Returns \u00b6 None val","title":"interface ProcessNotify"},{"location":"process-ProcessNotify/#processnotify","text":"[Source] Notifications for Process connections. interface ref ProcessNotify","title":"ProcessNotify"},{"location":"process-ProcessNotify/#public-functions","text":"","title":"Public Functions"},{"location":"process-ProcessNotify/#created","text":"[Source] ProcessMonitor calls this when it is created. fun ref created( process: ProcessMonitor ref) : None val","title":"created"},{"location":"process-ProcessNotify/#parameters","text":"process: ProcessMonitor ref","title":"Parameters"},{"location":"process-ProcessNotify/#returns","text":"None val","title":"Returns"},{"location":"process-ProcessNotify/#stdout","text":"[Source] ProcessMonitor calls this when new data is received on STDOUT of the forked process fun ref stdout( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val","title":"stdout"},{"location":"process-ProcessNotify/#parameters_1","text":"process: ProcessMonitor ref data: Array [ U8 val] iso","title":"Parameters"},{"location":"process-ProcessNotify/#returns_1","text":"None val","title":"Returns"},{"location":"process-ProcessNotify/#stderr","text":"[Source] ProcessMonitor calls this when new data is received on STDERR of the forked process fun ref stderr( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val","title":"stderr"},{"location":"process-ProcessNotify/#parameters_2","text":"process: ProcessMonitor ref data: Array [ U8 val] iso","title":"Parameters"},{"location":"process-ProcessNotify/#returns_2","text":"None val","title":"Returns"},{"location":"process-ProcessNotify/#failed","text":"[Source] ProcessMonitor calls this if we run into errors communicating with the forked process. fun ref failed( process: ProcessMonitor ref, err: (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)) : None val","title":"failed"},{"location":"process-ProcessNotify/#parameters_3","text":"process: ProcessMonitor ref err: ( ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)","title":"Parameters"},{"location":"process-ProcessNotify/#returns_3","text":"None val","title":"Returns"},{"location":"process-ProcessNotify/#expect","text":"[Source] Called when the process monitor has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing. fun ref expect( process: ProcessMonitor ref, qty: USize val) : USize val","title":"expect"},{"location":"process-ProcessNotify/#parameters_4","text":"process: ProcessMonitor ref qty: USize val","title":"Parameters"},{"location":"process-ProcessNotify/#returns_4","text":"USize val","title":"Returns"},{"location":"process-ProcessNotify/#dispose","text":"[Source] Call when ProcessMonitor terminates to cleanup ProcessNotify. We return the exit code of the child process. fun ref dispose( process: ProcessMonitor ref, child_exit_code: I32 val) : None val","title":"dispose"},{"location":"process-ProcessNotify/#parameters_5","text":"process: ProcessMonitor ref child_exit_code: I32 val","title":"Parameters"},{"location":"process-ProcessNotify/#returns_5","text":"None val","title":"Returns"},{"location":"process-StartProcessAuth/","text":"StartProcessAuth \u00b6 [Source] primitive val StartProcessAuth Constructors \u00b6 create \u00b6 [Source] new val create( from: AmbientAuth val) : StartProcessAuth val^ Parameters \u00b6 from: AmbientAuth val Returns \u00b6 StartProcessAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: StartProcessAuth val) : Bool val Parameters \u00b6 that: StartProcessAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: StartProcessAuth val) : Bool val Parameters \u00b6 that: StartProcessAuth val Returns \u00b6 Bool val","title":"primitive StartProcessAuth"},{"location":"process-StartProcessAuth/#startprocessauth","text":"[Source] primitive val StartProcessAuth","title":"StartProcessAuth"},{"location":"process-StartProcessAuth/#constructors","text":"","title":"Constructors"},{"location":"process-StartProcessAuth/#create","text":"[Source] new val create( from: AmbientAuth val) : StartProcessAuth val^","title":"create"},{"location":"process-StartProcessAuth/#parameters","text":"from: AmbientAuth val","title":"Parameters"},{"location":"process-StartProcessAuth/#returns","text":"StartProcessAuth val^","title":"Returns"},{"location":"process-StartProcessAuth/#public-functions","text":"","title":"Public Functions"},{"location":"process-StartProcessAuth/#eq","text":"[Source] fun box eq( that: StartProcessAuth val) : Bool val","title":"eq"},{"location":"process-StartProcessAuth/#parameters_1","text":"that: StartProcessAuth val","title":"Parameters"},{"location":"process-StartProcessAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-StartProcessAuth/#ne","text":"[Source] fun box ne( that: StartProcessAuth val) : Bool val","title":"ne"},{"location":"process-StartProcessAuth/#parameters_2","text":"that: StartProcessAuth val","title":"Parameters"},{"location":"process-StartProcessAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-Unsupported/","text":"Unsupported \u00b6 [Source] primitive val Unsupported Constructors \u00b6 create \u00b6 [Source] new val create() : Unsupported val^ Returns \u00b6 Unsupported val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: Unsupported val) : Bool val Parameters \u00b6 that: Unsupported val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Unsupported val) : Bool val Parameters \u00b6 that: Unsupported val Returns \u00b6 Bool val","title":"primitive Unsupported"},{"location":"process-Unsupported/#unsupported","text":"[Source] primitive val Unsupported","title":"Unsupported"},{"location":"process-Unsupported/#constructors","text":"","title":"Constructors"},{"location":"process-Unsupported/#create","text":"[Source] new val create() : Unsupported val^","title":"create"},{"location":"process-Unsupported/#returns","text":"Unsupported val^","title":"Returns"},{"location":"process-Unsupported/#public-functions","text":"","title":"Public Functions"},{"location":"process-Unsupported/#eq","text":"[Source] fun box eq( that: Unsupported val) : Bool val","title":"eq"},{"location":"process-Unsupported/#parameters","text":"that: Unsupported val","title":"Parameters"},{"location":"process-Unsupported/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-Unsupported/#ne","text":"[Source] fun box ne( that: Unsupported val) : Bool val","title":"ne"},{"location":"process-Unsupported/#parameters_1","text":"that: Unsupported val","title":"Parameters"},{"location":"process-Unsupported/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-WaitpidError/","text":"WaitpidError \u00b6 [Source] primitive val WaitpidError Constructors \u00b6 create \u00b6 [Source] new val create() : WaitpidError val^ Returns \u00b6 WaitpidError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: WaitpidError val) : Bool val Parameters \u00b6 that: WaitpidError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: WaitpidError val) : Bool val Parameters \u00b6 that: WaitpidError val Returns \u00b6 Bool val","title":"primitive WaitpidError"},{"location":"process-WaitpidError/#waitpiderror","text":"[Source] primitive val WaitpidError","title":"WaitpidError"},{"location":"process-WaitpidError/#constructors","text":"","title":"Constructors"},{"location":"process-WaitpidError/#create","text":"[Source] new val create() : WaitpidError val^","title":"create"},{"location":"process-WaitpidError/#returns","text":"WaitpidError val^","title":"Returns"},{"location":"process-WaitpidError/#public-functions","text":"","title":"Public Functions"},{"location":"process-WaitpidError/#eq","text":"[Source] fun box eq( that: WaitpidError val) : Bool val","title":"eq"},{"location":"process-WaitpidError/#parameters","text":"that: WaitpidError val","title":"Parameters"},{"location":"process-WaitpidError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-WaitpidError/#ne","text":"[Source] fun box ne( that: WaitpidError val) : Bool val","title":"ne"},{"location":"process-WaitpidError/#parameters_1","text":"that: WaitpidError val","title":"Parameters"},{"location":"process-WaitpidError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-WriteError/","text":"WriteError \u00b6 [Source] primitive val WriteError Constructors \u00b6 create \u00b6 [Source] new val create() : WriteError val^ Returns \u00b6 WriteError val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: WriteError val) : Bool val Parameters \u00b6 that: WriteError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: WriteError val) : Bool val Parameters \u00b6 that: WriteError val Returns \u00b6 Bool val","title":"primitive WriteError"},{"location":"process-WriteError/#writeerror","text":"[Source] primitive val WriteError","title":"WriteError"},{"location":"process-WriteError/#constructors","text":"","title":"Constructors"},{"location":"process-WriteError/#create","text":"[Source] new val create() : WriteError val^","title":"create"},{"location":"process-WriteError/#returns","text":"WriteError val^","title":"Returns"},{"location":"process-WriteError/#public-functions","text":"","title":"Public Functions"},{"location":"process-WriteError/#eq","text":"[Source] fun box eq( that: WriteError val) : Bool val","title":"eq"},{"location":"process-WriteError/#parameters","text":"that: WriteError val","title":"Parameters"},{"location":"process-WriteError/#returns_1","text":"Bool val","title":"Returns"},{"location":"process-WriteError/#ne","text":"[Source] fun box ne( that: WriteError val) : Bool val","title":"ne"},{"location":"process-WriteError/#parameters_1","text":"that: WriteError val","title":"Parameters"},{"location":"process-WriteError/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_EAGAIN/","text":"_EAGAIN \u00b6 [Source] primitive val _EAGAIN Constructors \u00b6 create \u00b6 [Source] new val create() : _EAGAIN val^ Returns \u00b6 _EAGAIN val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EAGAIN val) : Bool val Parameters \u00b6 that: _EAGAIN val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EAGAIN val) : Bool val Parameters \u00b6 that: _EAGAIN val Returns \u00b6 Bool val","title":"primitive _EAGAIN"},{"location":"process-_EAGAIN/#_eagain","text":"[Source] primitive val _EAGAIN","title":"_EAGAIN"},{"location":"process-_EAGAIN/#constructors","text":"","title":"Constructors"},{"location":"process-_EAGAIN/#create","text":"[Source] new val create() : _EAGAIN val^","title":"create"},{"location":"process-_EAGAIN/#returns","text":"_EAGAIN val^","title":"Returns"},{"location":"process-_EAGAIN/#public-functions","text":"","title":"Public Functions"},{"location":"process-_EAGAIN/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_EAGAIN/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_EAGAIN/#eq","text":"[Source] fun box eq( that: _EAGAIN val) : Bool val","title":"eq"},{"location":"process-_EAGAIN/#parameters","text":"that: _EAGAIN val","title":"Parameters"},{"location":"process-_EAGAIN/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_EAGAIN/#ne","text":"[Source] fun box ne( that: _EAGAIN val) : Bool val","title":"ne"},{"location":"process-_EAGAIN/#parameters_1","text":"that: _EAGAIN val","title":"Parameters"},{"location":"process-_EAGAIN/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_EINTR/","text":"_EINTR \u00b6 [Source] primitive val _EINTR Constructors \u00b6 create \u00b6 [Source] new val create() : _EINTR val^ Returns \u00b6 _EINTR val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EINTR val) : Bool val Parameters \u00b6 that: _EINTR val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EINTR val) : Bool val Parameters \u00b6 that: _EINTR val Returns \u00b6 Bool val","title":"primitive _EINTR"},{"location":"process-_EINTR/#_eintr","text":"[Source] primitive val _EINTR","title":"_EINTR"},{"location":"process-_EINTR/#constructors","text":"","title":"Constructors"},{"location":"process-_EINTR/#create","text":"[Source] new val create() : _EINTR val^","title":"create"},{"location":"process-_EINTR/#returns","text":"_EINTR val^","title":"Returns"},{"location":"process-_EINTR/#public-functions","text":"","title":"Public Functions"},{"location":"process-_EINTR/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_EINTR/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_EINTR/#eq","text":"[Source] fun box eq( that: _EINTR val) : Bool val","title":"eq"},{"location":"process-_EINTR/#parameters","text":"that: _EINTR val","title":"Parameters"},{"location":"process-_EINTR/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_EINTR/#ne","text":"[Source] fun box ne( that: _EINTR val) : Bool val","title":"ne"},{"location":"process-_EINTR/#parameters_1","text":"that: _EINTR val","title":"Parameters"},{"location":"process-_EINTR/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_EINVAL/","text":"_EINVAL \u00b6 [Source] primitive val _EINVAL Constructors \u00b6 create \u00b6 [Source] new val create() : _EINVAL val^ Returns \u00b6 _EINVAL val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EINVAL val) : Bool val Parameters \u00b6 that: _EINVAL val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EINVAL val) : Bool val Parameters \u00b6 that: _EINVAL val Returns \u00b6 Bool val","title":"primitive _EINVAL"},{"location":"process-_EINVAL/#_einval","text":"[Source] primitive val _EINVAL","title":"_EINVAL"},{"location":"process-_EINVAL/#constructors","text":"","title":"Constructors"},{"location":"process-_EINVAL/#create","text":"[Source] new val create() : _EINVAL val^","title":"create"},{"location":"process-_EINVAL/#returns","text":"_EINVAL val^","title":"Returns"},{"location":"process-_EINVAL/#public-functions","text":"","title":"Public Functions"},{"location":"process-_EINVAL/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_EINVAL/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_EINVAL/#eq","text":"[Source] fun box eq( that: _EINVAL val) : Bool val","title":"eq"},{"location":"process-_EINVAL/#parameters","text":"that: _EINVAL val","title":"Parameters"},{"location":"process-_EINVAL/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_EINVAL/#ne","text":"[Source] fun box ne( that: _EINVAL val) : Bool val","title":"ne"},{"location":"process-_EINVAL/#parameters_1","text":"that: _EINVAL val","title":"Parameters"},{"location":"process-_EINVAL/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_EPERM/","text":"_EPERM \u00b6 [Source] primitive val _EPERM Constructors \u00b6 create \u00b6 [Source] new val create() : _EPERM val^ Returns \u00b6 _EPERM val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _EPERM val) : Bool val Parameters \u00b6 that: _EPERM val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EPERM val) : Bool val Parameters \u00b6 that: _EPERM val Returns \u00b6 Bool val","title":"primitive _EPERM"},{"location":"process-_EPERM/#_eperm","text":"[Source] primitive val _EPERM","title":"_EPERM"},{"location":"process-_EPERM/#constructors","text":"","title":"Constructors"},{"location":"process-_EPERM/#create","text":"[Source] new val create() : _EPERM val^","title":"create"},{"location":"process-_EPERM/#returns","text":"_EPERM val^","title":"Returns"},{"location":"process-_EPERM/#public-functions","text":"","title":"Public Functions"},{"location":"process-_EPERM/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_EPERM/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_EPERM/#eq","text":"[Source] fun box eq( that: _EPERM val) : Bool val","title":"eq"},{"location":"process-_EPERM/#parameters","text":"that: _EPERM val","title":"Parameters"},{"location":"process-_EPERM/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_EPERM/#ne","text":"[Source] fun box ne( that: _EPERM val) : Bool val","title":"ne"},{"location":"process-_EPERM/#parameters_1","text":"that: _EPERM val","title":"Parameters"},{"location":"process-_EPERM/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_ERRORBROKENPIPE/","text":"_ERRORBROKENPIPE \u00b6 [Source] primitive val _ERRORBROKENPIPE Constructors \u00b6 create \u00b6 [Source] new val create() : _ERRORBROKENPIPE val^ Returns \u00b6 _ERRORBROKENPIPE val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _ERRORBROKENPIPE val) : Bool val Parameters \u00b6 that: _ERRORBROKENPIPE val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ERRORBROKENPIPE val) : Bool val Parameters \u00b6 that: _ERRORBROKENPIPE val Returns \u00b6 Bool val","title":"primitive _ERRORBROKENPIPE"},{"location":"process-_ERRORBROKENPIPE/#_errorbrokenpipe","text":"[Source] primitive val _ERRORBROKENPIPE","title":"_ERRORBROKENPIPE"},{"location":"process-_ERRORBROKENPIPE/#constructors","text":"","title":"Constructors"},{"location":"process-_ERRORBROKENPIPE/#create","text":"[Source] new val create() : _ERRORBROKENPIPE val^","title":"create"},{"location":"process-_ERRORBROKENPIPE/#returns","text":"_ERRORBROKENPIPE val^","title":"Returns"},{"location":"process-_ERRORBROKENPIPE/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ERRORBROKENPIPE/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_ERRORBROKENPIPE/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_ERRORBROKENPIPE/#eq","text":"[Source] fun box eq( that: _ERRORBROKENPIPE val) : Bool val","title":"eq"},{"location":"process-_ERRORBROKENPIPE/#parameters","text":"that: _ERRORBROKENPIPE val","title":"Parameters"},{"location":"process-_ERRORBROKENPIPE/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_ERRORBROKENPIPE/#ne","text":"[Source] fun box ne( that: _ERRORBROKENPIPE val) : Bool val","title":"ne"},{"location":"process-_ERRORBROKENPIPE/#parameters_1","text":"that: _ERRORBROKENPIPE val","title":"Parameters"},{"location":"process-_ERRORBROKENPIPE/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_ERRORNODATA/","text":"_ERRORNODATA \u00b6 [Source] primitive val _ERRORNODATA Constructors \u00b6 create \u00b6 [Source] new val create() : _ERRORNODATA val^ Returns \u00b6 _ERRORNODATA val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _ERRORNODATA val) : Bool val Parameters \u00b6 that: _ERRORNODATA val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ERRORNODATA val) : Bool val Parameters \u00b6 that: _ERRORNODATA val Returns \u00b6 Bool val","title":"primitive _ERRORNODATA"},{"location":"process-_ERRORNODATA/#_errornodata","text":"[Source] primitive val _ERRORNODATA","title":"_ERRORNODATA"},{"location":"process-_ERRORNODATA/#constructors","text":"","title":"Constructors"},{"location":"process-_ERRORNODATA/#create","text":"[Source] new val create() : _ERRORNODATA val^","title":"create"},{"location":"process-_ERRORNODATA/#returns","text":"_ERRORNODATA val^","title":"Returns"},{"location":"process-_ERRORNODATA/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ERRORNODATA/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_ERRORNODATA/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_ERRORNODATA/#eq","text":"[Source] fun box eq( that: _ERRORNODATA val) : Bool val","title":"eq"},{"location":"process-_ERRORNODATA/#parameters","text":"that: _ERRORNODATA val","title":"Parameters"},{"location":"process-_ERRORNODATA/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_ERRORNODATA/#ne","text":"[Source] fun box ne( that: _ERRORNODATA val) : Bool val","title":"ne"},{"location":"process-_ERRORNODATA/#parameters_1","text":"that: _ERRORNODATA val","title":"Parameters"},{"location":"process-_ERRORNODATA/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_ESRCH/","text":"_ESRCH \u00b6 [Source] primitive val _ESRCH Constructors \u00b6 create \u00b6 [Source] new val create() : _ESRCH val^ Returns \u00b6 _ESRCH val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _ESRCH val) : Bool val Parameters \u00b6 that: _ESRCH val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ESRCH val) : Bool val Parameters \u00b6 that: _ESRCH val Returns \u00b6 Bool val","title":"primitive _ESRCH"},{"location":"process-_ESRCH/#_esrch","text":"[Source] primitive val _ESRCH","title":"_ESRCH"},{"location":"process-_ESRCH/#constructors","text":"","title":"Constructors"},{"location":"process-_ESRCH/#create","text":"[Source] new val create() : _ESRCH val^","title":"create"},{"location":"process-_ESRCH/#returns","text":"_ESRCH val^","title":"Returns"},{"location":"process-_ESRCH/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ESRCH/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_ESRCH/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_ESRCH/#eq","text":"[Source] fun box eq( that: _ESRCH val) : Bool val","title":"eq"},{"location":"process-_ESRCH/#parameters","text":"that: _ESRCH val","title":"Parameters"},{"location":"process-_ESRCH/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_ESRCH/#ne","text":"[Source] fun box ne( that: _ESRCH val) : Bool val","title":"ne"},{"location":"process-_ESRCH/#parameters_1","text":"that: _ESRCH val","title":"Parameters"},{"location":"process-_ESRCH/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_FDCLOEXEC/","text":"_FDCLOEXEC \u00b6 [Source] primitive val _FDCLOEXEC Constructors \u00b6 create \u00b6 [Source] new val create() : _FDCLOEXEC val^ Returns \u00b6 _FDCLOEXEC val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _FDCLOEXEC val) : Bool val Parameters \u00b6 that: _FDCLOEXEC val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FDCLOEXEC val) : Bool val Parameters \u00b6 that: _FDCLOEXEC val Returns \u00b6 Bool val","title":"primitive _FDCLOEXEC"},{"location":"process-_FDCLOEXEC/#_fdcloexec","text":"[Source] primitive val _FDCLOEXEC","title":"_FDCLOEXEC"},{"location":"process-_FDCLOEXEC/#constructors","text":"","title":"Constructors"},{"location":"process-_FDCLOEXEC/#create","text":"[Source] new val create() : _FDCLOEXEC val^","title":"create"},{"location":"process-_FDCLOEXEC/#returns","text":"_FDCLOEXEC val^","title":"Returns"},{"location":"process-_FDCLOEXEC/#public-functions","text":"","title":"Public Functions"},{"location":"process-_FDCLOEXEC/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_FDCLOEXEC/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_FDCLOEXEC/#eq","text":"[Source] fun box eq( that: _FDCLOEXEC val) : Bool val","title":"eq"},{"location":"process-_FDCLOEXEC/#parameters","text":"that: _FDCLOEXEC val","title":"Parameters"},{"location":"process-_FDCLOEXEC/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_FDCLOEXEC/#ne","text":"[Source] fun box ne( that: _FDCLOEXEC val) : Bool val","title":"ne"},{"location":"process-_FDCLOEXEC/#parameters_1","text":"that: _FDCLOEXEC val","title":"Parameters"},{"location":"process-_FDCLOEXEC/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_FGETFD/","text":"_FGETFD \u00b6 [Source] primitive val _FGETFD Constructors \u00b6 create \u00b6 [Source] new val create() : _FGETFD val^ Returns \u00b6 _FGETFD val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _FGETFD val) : Bool val Parameters \u00b6 that: _FGETFD val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FGETFD val) : Bool val Parameters \u00b6 that: _FGETFD val Returns \u00b6 Bool val","title":"primitive _FGETFD"},{"location":"process-_FGETFD/#_fgetfd","text":"[Source] primitive val _FGETFD","title":"_FGETFD"},{"location":"process-_FGETFD/#constructors","text":"","title":"Constructors"},{"location":"process-_FGETFD/#create","text":"[Source] new val create() : _FGETFD val^","title":"create"},{"location":"process-_FGETFD/#returns","text":"_FGETFD val^","title":"Returns"},{"location":"process-_FGETFD/#public-functions","text":"","title":"Public Functions"},{"location":"process-_FGETFD/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_FGETFD/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_FGETFD/#eq","text":"[Source] fun box eq( that: _FGETFD val) : Bool val","title":"eq"},{"location":"process-_FGETFD/#parameters","text":"that: _FGETFD val","title":"Parameters"},{"location":"process-_FGETFD/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_FGETFD/#ne","text":"[Source] fun box ne( that: _FGETFD val) : Bool val","title":"ne"},{"location":"process-_FGETFD/#parameters_1","text":"that: _FGETFD val","title":"Parameters"},{"location":"process-_FGETFD/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_FGETFL/","text":"_FGETFL \u00b6 [Source] primitive val _FGETFL Constructors \u00b6 create \u00b6 [Source] new val create() : _FGETFL val^ Returns \u00b6 _FGETFL val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _FGETFL val) : Bool val Parameters \u00b6 that: _FGETFL val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FGETFL val) : Bool val Parameters \u00b6 that: _FGETFL val Returns \u00b6 Bool val","title":"primitive _FGETFL"},{"location":"process-_FGETFL/#_fgetfl","text":"[Source] primitive val _FGETFL","title":"_FGETFL"},{"location":"process-_FGETFL/#constructors","text":"","title":"Constructors"},{"location":"process-_FGETFL/#create","text":"[Source] new val create() : _FGETFL val^","title":"create"},{"location":"process-_FGETFL/#returns","text":"_FGETFL val^","title":"Returns"},{"location":"process-_FGETFL/#public-functions","text":"","title":"Public Functions"},{"location":"process-_FGETFL/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_FGETFL/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_FGETFL/#eq","text":"[Source] fun box eq( that: _FGETFL val) : Bool val","title":"eq"},{"location":"process-_FGETFL/#parameters","text":"that: _FGETFL val","title":"Parameters"},{"location":"process-_FGETFL/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_FGETFL/#ne","text":"[Source] fun box ne( that: _FGETFL val) : Bool val","title":"ne"},{"location":"process-_FGETFL/#parameters_1","text":"that: _FGETFL val","title":"Parameters"},{"location":"process-_FGETFL/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_FSETFD/","text":"_FSETFD \u00b6 [Source] primitive val _FSETFD Constructors \u00b6 create \u00b6 [Source] new val create() : _FSETFD val^ Returns \u00b6 _FSETFD val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _FSETFD val) : Bool val Parameters \u00b6 that: _FSETFD val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FSETFD val) : Bool val Parameters \u00b6 that: _FSETFD val Returns \u00b6 Bool val","title":"primitive _FSETFD"},{"location":"process-_FSETFD/#_fsetfd","text":"[Source] primitive val _FSETFD","title":"_FSETFD"},{"location":"process-_FSETFD/#constructors","text":"","title":"Constructors"},{"location":"process-_FSETFD/#create","text":"[Source] new val create() : _FSETFD val^","title":"create"},{"location":"process-_FSETFD/#returns","text":"_FSETFD val^","title":"Returns"},{"location":"process-_FSETFD/#public-functions","text":"","title":"Public Functions"},{"location":"process-_FSETFD/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_FSETFD/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_FSETFD/#eq","text":"[Source] fun box eq( that: _FSETFD val) : Bool val","title":"eq"},{"location":"process-_FSETFD/#parameters","text":"that: _FSETFD val","title":"Parameters"},{"location":"process-_FSETFD/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_FSETFD/#ne","text":"[Source] fun box ne( that: _FSETFD val) : Bool val","title":"ne"},{"location":"process-_FSETFD/#parameters_1","text":"that: _FSETFD val","title":"Parameters"},{"location":"process-_FSETFD/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_FSETFL/","text":"_FSETFL \u00b6 [Source] primitive val _FSETFL Constructors \u00b6 create \u00b6 [Source] new val create() : _FSETFL val^ Returns \u00b6 _FSETFL val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _FSETFL val) : Bool val Parameters \u00b6 that: _FSETFL val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _FSETFL val) : Bool val Parameters \u00b6 that: _FSETFL val Returns \u00b6 Bool val","title":"primitive _FSETFL"},{"location":"process-_FSETFL/#_fsetfl","text":"[Source] primitive val _FSETFL","title":"_FSETFL"},{"location":"process-_FSETFL/#constructors","text":"","title":"Constructors"},{"location":"process-_FSETFL/#create","text":"[Source] new val create() : _FSETFL val^","title":"create"},{"location":"process-_FSETFL/#returns","text":"_FSETFL val^","title":"Returns"},{"location":"process-_FSETFL/#public-functions","text":"","title":"Public Functions"},{"location":"process-_FSETFL/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_FSETFL/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_FSETFL/#eq","text":"[Source] fun box eq( that: _FSETFL val) : Bool val","title":"eq"},{"location":"process-_FSETFL/#parameters","text":"that: _FSETFL val","title":"Parameters"},{"location":"process-_FSETFL/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_FSETFL/#ne","text":"[Source] fun box ne( that: _FSETFL val) : Bool val","title":"ne"},{"location":"process-_FSETFL/#parameters_1","text":"that: _FSETFL val","title":"Parameters"},{"location":"process-_FSETFL/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_ONONBLOCK/","text":"_ONONBLOCK \u00b6 [Source] primitive val _ONONBLOCK Constructors \u00b6 create \u00b6 [Source] new val create() : _ONONBLOCK val^ Returns \u00b6 _ONONBLOCK val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : I32 val Returns \u00b6 I32 val eq \u00b6 [Source] fun box eq( that: _ONONBLOCK val) : Bool val Parameters \u00b6 that: _ONONBLOCK val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ONONBLOCK val) : Bool val Parameters \u00b6 that: _ONONBLOCK val Returns \u00b6 Bool val","title":"primitive _ONONBLOCK"},{"location":"process-_ONONBLOCK/#_ononblock","text":"[Source] primitive val _ONONBLOCK","title":"_ONONBLOCK"},{"location":"process-_ONONBLOCK/#constructors","text":"","title":"Constructors"},{"location":"process-_ONONBLOCK/#create","text":"[Source] new val create() : _ONONBLOCK val^","title":"create"},{"location":"process-_ONONBLOCK/#returns","text":"_ONONBLOCK val^","title":"Returns"},{"location":"process-_ONONBLOCK/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ONONBLOCK/#apply","text":"[Source] fun box apply() : I32 val","title":"apply"},{"location":"process-_ONONBLOCK/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_ONONBLOCK/#eq","text":"[Source] fun box eq( that: _ONONBLOCK val) : Bool val","title":"eq"},{"location":"process-_ONONBLOCK/#parameters","text":"that: _ONONBLOCK val","title":"Parameters"},{"location":"process-_ONONBLOCK/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_ONONBLOCK/#ne","text":"[Source] fun box ne( that: _ONONBLOCK val) : Bool val","title":"ne"},{"location":"process-_ONONBLOCK/#parameters_1","text":"that: _ONONBLOCK val","title":"Parameters"},{"location":"process-_ONONBLOCK/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_Pipe/","text":"_Pipe \u00b6 [Source] A pipe is a unidirectional data channel that can be used for interprocess communication. Outgoing pipes are written to by this process, incoming pipes are read from by this process. class ref _Pipe Constructors \u00b6 none \u00b6 [Source] Creates a nil pipe for use as a placeholder. new ref none() : _Pipe ref^ Returns \u00b6 _Pipe ref^ outgoing \u00b6 [Source] Creates an outgoing pipe. new ref outgoing() : _Pipe ref^ ? Returns \u00b6 _Pipe ref^ ? incoming \u00b6 [Source] Creates an incoming pipe. new ref incoming() : _Pipe ref^ ? Returns \u00b6 _Pipe ref^ ? Public fields \u00b6 var near_fd: U32 val \u00b6 [Source] var far_fd: U32 val \u00b6 [Source] var event: Pointer [ AsioEvent val] tag \u00b6 [Source] Public Functions \u00b6 begin \u00b6 [Source] Prepare the pipe for read or write, and listening, after the far end has been handed to the other process. fun ref begin( owner: AsioEventNotify tag) : None val Parameters \u00b6 owner: AsioEventNotify tag Returns \u00b6 None val close_far \u00b6 [Source] Close the far end of the pipe--the end that the other process will be using. This is used to cleanup this process' handles that it wont use. fun ref close_far() : None val Returns \u00b6 None val read \u00b6 [Source] fun ref read( read_buf: Array[U8 val] iso, offset: USize val) : (Array[U8 val] iso^ , ISize val , I32 val) Parameters \u00b6 read_buf: Array [ U8 val] iso offset: USize val Returns \u00b6 ( Array [ U8 val] iso^ , ISize val , I32 val) write \u00b6 [Source] fun ref write( data: (String box | Array[U8 val] box), offset: USize val) : (ISize val , I32 val) Parameters \u00b6 data: ( String box | Array [ U8 val] box) offset: USize val Returns \u00b6 ( ISize val , I32 val) is_closed \u00b6 [Source] fun ref is_closed() : Bool val Returns \u00b6 Bool val close_near \u00b6 [Source] Close the near end of the pipe--the end that this process is using directly. Also handle unsubscribing the asio event (if there was one). File descriptors should always be closed after unsubscribing its event, otherwise there is the possibility of reusing the file descriptor in another thread and then unsubscribing the reused file descriptor here! Unsubscribing and closing the file descriptor should be treated as one operation. fun ref close_near() : None val Returns \u00b6 None val close \u00b6 [Source] fun ref close() : None val Returns \u00b6 None val dispose \u00b6 [Source] fun ref dispose() : None val Returns \u00b6 None val Private Functions \u00b6 _create \u00b6 [Source] Do the actual system object creation for the pipe. fun ref _create() : None val ? Returns \u00b6 None val ? _set_fd \u00b6 [Source] fun box _set_fd( fd: U32 val, flags: I32 val) : None val ? Parameters \u00b6 fd: U32 val flags: I32 val Returns \u00b6 None val ? _set_fl \u00b6 [Source] fun box _set_fl( fd: U32 val, flags: I32 val) : None val ? Parameters \u00b6 fd: U32 val flags: I32 val Returns \u00b6 None val ?","title":"class _Pipe"},{"location":"process-_Pipe/#_pipe","text":"[Source] A pipe is a unidirectional data channel that can be used for interprocess communication. Outgoing pipes are written to by this process, incoming pipes are read from by this process. class ref _Pipe","title":"_Pipe"},{"location":"process-_Pipe/#constructors","text":"","title":"Constructors"},{"location":"process-_Pipe/#none","text":"[Source] Creates a nil pipe for use as a placeholder. new ref none() : _Pipe ref^","title":"none"},{"location":"process-_Pipe/#returns","text":"_Pipe ref^","title":"Returns"},{"location":"process-_Pipe/#outgoing","text":"[Source] Creates an outgoing pipe. new ref outgoing() : _Pipe ref^ ?","title":"outgoing"},{"location":"process-_Pipe/#returns_1","text":"_Pipe ref^ ?","title":"Returns"},{"location":"process-_Pipe/#incoming","text":"[Source] Creates an incoming pipe. new ref incoming() : _Pipe ref^ ?","title":"incoming"},{"location":"process-_Pipe/#returns_2","text":"_Pipe ref^ ?","title":"Returns"},{"location":"process-_Pipe/#public-fields","text":"","title":"Public fields"},{"location":"process-_Pipe/#var-near_fd-u32-val","text":"[Source]","title":"var near_fd: U32 val"},{"location":"process-_Pipe/#var-far_fd-u32-val","text":"[Source]","title":"var far_fd: U32 val"},{"location":"process-_Pipe/#var-event-pointer91asioevent-val93-tag","text":"[Source]","title":"var event: Pointer[AsioEvent val] tag"},{"location":"process-_Pipe/#public-functions","text":"","title":"Public Functions"},{"location":"process-_Pipe/#begin","text":"[Source] Prepare the pipe for read or write, and listening, after the far end has been handed to the other process. fun ref begin( owner: AsioEventNotify tag) : None val","title":"begin"},{"location":"process-_Pipe/#parameters","text":"owner: AsioEventNotify tag","title":"Parameters"},{"location":"process-_Pipe/#returns_3","text":"None val","title":"Returns"},{"location":"process-_Pipe/#close_far","text":"[Source] Close the far end of the pipe--the end that the other process will be using. This is used to cleanup this process' handles that it wont use. fun ref close_far() : None val","title":"close_far"},{"location":"process-_Pipe/#returns_4","text":"None val","title":"Returns"},{"location":"process-_Pipe/#read","text":"[Source] fun ref read( read_buf: Array[U8 val] iso, offset: USize val) : (Array[U8 val] iso^ , ISize val , I32 val)","title":"read"},{"location":"process-_Pipe/#parameters_1","text":"read_buf: Array [ U8 val] iso offset: USize val","title":"Parameters"},{"location":"process-_Pipe/#returns_5","text":"( Array [ U8 val] iso^ , ISize val , I32 val)","title":"Returns"},{"location":"process-_Pipe/#write","text":"[Source] fun ref write( data: (String box | Array[U8 val] box), offset: USize val) : (ISize val , I32 val)","title":"write"},{"location":"process-_Pipe/#parameters_2","text":"data: ( String box | Array [ U8 val] box) offset: USize val","title":"Parameters"},{"location":"process-_Pipe/#returns_6","text":"( ISize val , I32 val)","title":"Returns"},{"location":"process-_Pipe/#is_closed","text":"[Source] fun ref is_closed() : Bool val","title":"is_closed"},{"location":"process-_Pipe/#returns_7","text":"Bool val","title":"Returns"},{"location":"process-_Pipe/#close_near","text":"[Source] Close the near end of the pipe--the end that this process is using directly. Also handle unsubscribing the asio event (if there was one). File descriptors should always be closed after unsubscribing its event, otherwise there is the possibility of reusing the file descriptor in another thread and then unsubscribing the reused file descriptor here! Unsubscribing and closing the file descriptor should be treated as one operation. fun ref close_near() : None val","title":"close_near"},{"location":"process-_Pipe/#returns_8","text":"None val","title":"Returns"},{"location":"process-_Pipe/#close","text":"[Source] fun ref close() : None val","title":"close"},{"location":"process-_Pipe/#returns_9","text":"None val","title":"Returns"},{"location":"process-_Pipe/#dispose","text":"[Source] fun ref dispose() : None val","title":"dispose"},{"location":"process-_Pipe/#returns_10","text":"None val","title":"Returns"},{"location":"process-_Pipe/#private-functions","text":"","title":"Private Functions"},{"location":"process-_Pipe/#_create","text":"[Source] Do the actual system object creation for the pipe. fun ref _create() : None val ?","title":"_create"},{"location":"process-_Pipe/#returns_11","text":"None val ?","title":"Returns"},{"location":"process-_Pipe/#_set_fd","text":"[Source] fun box _set_fd( fd: U32 val, flags: I32 val) : None val ?","title":"_set_fd"},{"location":"process-_Pipe/#parameters_3","text":"fd: U32 val flags: I32 val","title":"Parameters"},{"location":"process-_Pipe/#returns_12","text":"None val ?","title":"Returns"},{"location":"process-_Pipe/#_set_fl","text":"[Source] fun box _set_fl( fd: U32 val, flags: I32 val) : None val ?","title":"_set_fl"},{"location":"process-_Pipe/#parameters_4","text":"fd: U32 val flags: I32 val","title":"Parameters"},{"location":"process-_Pipe/#returns_13","text":"None val ?","title":"Returns"},{"location":"process-_Process/","text":"_Process \u00b6 [Source] interface ref _Process Public Functions \u00b6 kill \u00b6 [Source] fun box kill() : None val Returns \u00b6 None val wait \u00b6 [Source] fun ref wait() : I32 val Returns \u00b6 I32 val","title":"interface _Process"},{"location":"process-_Process/#_process","text":"[Source] interface ref _Process","title":"_Process"},{"location":"process-_Process/#public-functions","text":"","title":"Public Functions"},{"location":"process-_Process/#kill","text":"[Source] fun box kill() : None val","title":"kill"},{"location":"process-_Process/#returns","text":"None val","title":"Returns"},{"location":"process-_Process/#wait","text":"[Source] fun ref wait() : I32 val","title":"wait"},{"location":"process-_Process/#returns_1","text":"I32 val","title":"Returns"},{"location":"process-_ProcessClient/","text":"_ProcessClient \u00b6 [Source] Notifications for Process connections. class ref _ProcessClient is ProcessNotify ref Implements \u00b6 ProcessNotify ref Constructors \u00b6 create \u00b6 [Source] new iso create( out: USize val, err: String val, exit_code: I32 val, h: TestHelper val) : _ProcessClient iso^ Parameters \u00b6 out: USize val err: String val exit_code: I32 val h: TestHelper val Returns \u00b6 _ProcessClient iso^ Public Functions \u00b6 stdout \u00b6 [Source] Called when new data is received on STDOUT of the forked process fun ref stdout( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val Parameters \u00b6 process: ProcessMonitor ref data: Array [ U8 val] iso Returns \u00b6 None val stderr \u00b6 [Source] Called when new data is received on STDERR of the forked process fun ref stderr( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val Parameters \u00b6 process: ProcessMonitor ref data: Array [ U8 val] iso Returns \u00b6 None val failed \u00b6 [Source] ProcessMonitor calls this if we run into errors with the forked process. fun ref failed( process: ProcessMonitor ref, err: (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)) : None val Parameters \u00b6 process: ProcessMonitor ref err: ( ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val) Returns \u00b6 None val dispose \u00b6 [Source] Called when ProcessMonitor terminates to cleanup ProcessNotify We receive the exit code of the child process from ProcessMonitor. fun ref dispose( process: ProcessMonitor ref, child_exit_code: I32 val) : None val Parameters \u00b6 process: ProcessMonitor ref child_exit_code: I32 val Returns \u00b6 None val created \u00b6 [Source] fun ref created( process: ProcessMonitor ref) : None val Parameters \u00b6 process: ProcessMonitor ref Returns \u00b6 None val expect \u00b6 [Source] fun ref expect( process: ProcessMonitor ref, qty: USize val) : USize val Parameters \u00b6 process: ProcessMonitor ref qty: USize val Returns \u00b6 USize val","title":"class _ProcessClient"},{"location":"process-_ProcessClient/#_processclient","text":"[Source] Notifications for Process connections. class ref _ProcessClient is ProcessNotify ref","title":"_ProcessClient"},{"location":"process-_ProcessClient/#implements","text":"ProcessNotify ref","title":"Implements"},{"location":"process-_ProcessClient/#constructors","text":"","title":"Constructors"},{"location":"process-_ProcessClient/#create","text":"[Source] new iso create( out: USize val, err: String val, exit_code: I32 val, h: TestHelper val) : _ProcessClient iso^","title":"create"},{"location":"process-_ProcessClient/#parameters","text":"out: USize val err: String val exit_code: I32 val h: TestHelper val","title":"Parameters"},{"location":"process-_ProcessClient/#returns","text":"_ProcessClient iso^","title":"Returns"},{"location":"process-_ProcessClient/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ProcessClient/#stdout","text":"[Source] Called when new data is received on STDOUT of the forked process fun ref stdout( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val","title":"stdout"},{"location":"process-_ProcessClient/#parameters_1","text":"process: ProcessMonitor ref data: Array [ U8 val] iso","title":"Parameters"},{"location":"process-_ProcessClient/#returns_1","text":"None val","title":"Returns"},{"location":"process-_ProcessClient/#stderr","text":"[Source] Called when new data is received on STDERR of the forked process fun ref stderr( process: ProcessMonitor ref, data: Array[U8 val] iso) : None val","title":"stderr"},{"location":"process-_ProcessClient/#parameters_2","text":"process: ProcessMonitor ref data: Array [ U8 val] iso","title":"Parameters"},{"location":"process-_ProcessClient/#returns_2","text":"None val","title":"Returns"},{"location":"process-_ProcessClient/#failed","text":"[Source] ProcessMonitor calls this if we run into errors with the forked process. fun ref failed( process: ProcessMonitor ref, err: (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)) : None val","title":"failed"},{"location":"process-_ProcessClient/#parameters_3","text":"process: ProcessMonitor ref err: ( ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)","title":"Parameters"},{"location":"process-_ProcessClient/#returns_3","text":"None val","title":"Returns"},{"location":"process-_ProcessClient/#dispose","text":"[Source] Called when ProcessMonitor terminates to cleanup ProcessNotify We receive the exit code of the child process from ProcessMonitor. fun ref dispose( process: ProcessMonitor ref, child_exit_code: I32 val) : None val","title":"dispose"},{"location":"process-_ProcessClient/#parameters_4","text":"process: ProcessMonitor ref child_exit_code: I32 val","title":"Parameters"},{"location":"process-_ProcessClient/#returns_4","text":"None val","title":"Returns"},{"location":"process-_ProcessClient/#created","text":"[Source] fun ref created( process: ProcessMonitor ref) : None val","title":"created"},{"location":"process-_ProcessClient/#parameters_5","text":"process: ProcessMonitor ref","title":"Parameters"},{"location":"process-_ProcessClient/#returns_5","text":"None val","title":"Returns"},{"location":"process-_ProcessClient/#expect","text":"[Source] fun ref expect( process: ProcessMonitor ref, qty: USize val) : USize val","title":"expect"},{"location":"process-_ProcessClient/#parameters_6","text":"process: ProcessMonitor ref qty: USize val","title":"Parameters"},{"location":"process-_ProcessClient/#returns_6","text":"USize val","title":"Returns"},{"location":"process-_ProcessNone/","text":"_ProcessNone \u00b6 [Source] class ref _ProcessNone is _Process ref Implements \u00b6 _Process ref Constructors \u00b6 create \u00b6 [Source] new iso create() : _ProcessNone iso^ Returns \u00b6 _ProcessNone iso^ Public Functions \u00b6 kill \u00b6 [Source] fun box kill() : None val Returns \u00b6 None val wait \u00b6 [Source] fun ref wait() : I32 val Returns \u00b6 I32 val","title":"class _ProcessNone"},{"location":"process-_ProcessNone/#_processnone","text":"[Source] class ref _ProcessNone is _Process ref","title":"_ProcessNone"},{"location":"process-_ProcessNone/#implements","text":"_Process ref","title":"Implements"},{"location":"process-_ProcessNone/#constructors","text":"","title":"Constructors"},{"location":"process-_ProcessNone/#create","text":"[Source] new iso create() : _ProcessNone iso^","title":"create"},{"location":"process-_ProcessNone/#returns","text":"_ProcessNone iso^","title":"Returns"},{"location":"process-_ProcessNone/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ProcessNone/#kill","text":"[Source] fun box kill() : None val","title":"kill"},{"location":"process-_ProcessNone/#returns_1","text":"None val","title":"Returns"},{"location":"process-_ProcessNone/#wait","text":"[Source] fun ref wait() : I32 val","title":"wait"},{"location":"process-_ProcessNone/#returns_2","text":"I32 val","title":"Returns"},{"location":"process-_ProcessPosix/","text":"_ProcessPosix \u00b6 [Source] class ref _ProcessPosix is _Process ref Implements \u00b6 _Process ref Constructors \u00b6 create \u00b6 [Source] new ref create( path: String val, args: Array[String val] val, vars: Array[String val] val, stdin: _Pipe ref, stdout: _Pipe ref, stderr: _Pipe ref) : _ProcessPosix ref^ ? Parameters \u00b6 path: String val args: Array [ String val] val vars: Array [ String val] val stdin: _Pipe ref stdout: _Pipe ref stderr: _Pipe ref Returns \u00b6 _ProcessPosix ref^ ? Public fields \u00b6 let pid: I32 val \u00b6 [Source] Public Functions \u00b6 kill \u00b6 [Source] Terminate the process, first trying SIGTERM and if that fails, try SIGKILL. fun box kill() : None val Returns \u00b6 None val wait \u00b6 [Source] fun ref wait() : I32 val Returns \u00b6 I32 val Private Functions \u00b6 _make_argv \u00b6 [Source] Convert an array of String parameters into an array of C pointers to same strings. fun tag _make_argv( args: Array[String val] box) : Array[Pointer[U8 val] tag] ref Parameters \u00b6 args: Array [ String val] box Returns \u00b6 Array [ Pointer [ U8 val] tag] ref _child_fork \u00b6 [Source] We are now in the child process. We redirect STDIN, STDOUT and STDERR to their pipes and execute the command. The command is executed via execve which does not return on success, and the text, data, bss, and stack of the calling process are overwritten by that of the program loaded. We've set the FD_CLOEXEC flag on all file descriptors to ensure that they are all closed automatically once @execve gets called. fun box _child_fork( path: String val, argp: Array[Pointer[U8 val] tag] ref, envp: Array[Pointer[U8 val] tag] ref, stdin: _Pipe ref, stdout: _Pipe ref, stderr: _Pipe ref) : None val Parameters \u00b6 path: String val argp: Array [ Pointer [ U8 val] tag] ref envp: Array [ Pointer [ U8 val] tag] ref stdin: _Pipe ref stdout: _Pipe ref stderr: _Pipe ref Returns \u00b6 None val _dup2 \u00b6 [Source] Creates a copy of the file descriptor oldfd using the file descriptor number specified in newfd. If the file descriptor newfd was previously open, it is silently closed before being reused. If dup2() fails because of EINTR we retry. fun tag _dup2( oldfd: U32 val, newfd: U32 val) : None val Parameters \u00b6 oldfd: U32 val newfd: U32 val Returns \u00b6 None val","title":"class _ProcessPosix"},{"location":"process-_ProcessPosix/#_processposix","text":"[Source] class ref _ProcessPosix is _Process ref","title":"_ProcessPosix"},{"location":"process-_ProcessPosix/#implements","text":"_Process ref","title":"Implements"},{"location":"process-_ProcessPosix/#constructors","text":"","title":"Constructors"},{"location":"process-_ProcessPosix/#create","text":"[Source] new ref create( path: String val, args: Array[String val] val, vars: Array[String val] val, stdin: _Pipe ref, stdout: _Pipe ref, stderr: _Pipe ref) : _ProcessPosix ref^ ?","title":"create"},{"location":"process-_ProcessPosix/#parameters","text":"path: String val args: Array [ String val] val vars: Array [ String val] val stdin: _Pipe ref stdout: _Pipe ref stderr: _Pipe ref","title":"Parameters"},{"location":"process-_ProcessPosix/#returns","text":"_ProcessPosix ref^ ?","title":"Returns"},{"location":"process-_ProcessPosix/#public-fields","text":"","title":"Public fields"},{"location":"process-_ProcessPosix/#let-pid-i32-val","text":"[Source]","title":"let pid: I32 val"},{"location":"process-_ProcessPosix/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ProcessPosix/#kill","text":"[Source] Terminate the process, first trying SIGTERM and if that fails, try SIGKILL. fun box kill() : None val","title":"kill"},{"location":"process-_ProcessPosix/#returns_1","text":"None val","title":"Returns"},{"location":"process-_ProcessPosix/#wait","text":"[Source] fun ref wait() : I32 val","title":"wait"},{"location":"process-_ProcessPosix/#returns_2","text":"I32 val","title":"Returns"},{"location":"process-_ProcessPosix/#private-functions","text":"","title":"Private Functions"},{"location":"process-_ProcessPosix/#_make_argv","text":"[Source] Convert an array of String parameters into an array of C pointers to same strings. fun tag _make_argv( args: Array[String val] box) : Array[Pointer[U8 val] tag] ref","title":"_make_argv"},{"location":"process-_ProcessPosix/#parameters_1","text":"args: Array [ String val] box","title":"Parameters"},{"location":"process-_ProcessPosix/#returns_3","text":"Array [ Pointer [ U8 val] tag] ref","title":"Returns"},{"location":"process-_ProcessPosix/#_child_fork","text":"[Source] We are now in the child process. We redirect STDIN, STDOUT and STDERR to their pipes and execute the command. The command is executed via execve which does not return on success, and the text, data, bss, and stack of the calling process are overwritten by that of the program loaded. We've set the FD_CLOEXEC flag on all file descriptors to ensure that they are all closed automatically once @execve gets called. fun box _child_fork( path: String val, argp: Array[Pointer[U8 val] tag] ref, envp: Array[Pointer[U8 val] tag] ref, stdin: _Pipe ref, stdout: _Pipe ref, stderr: _Pipe ref) : None val","title":"_child_fork"},{"location":"process-_ProcessPosix/#parameters_2","text":"path: String val argp: Array [ Pointer [ U8 val] tag] ref envp: Array [ Pointer [ U8 val] tag] ref stdin: _Pipe ref stdout: _Pipe ref stderr: _Pipe ref","title":"Parameters"},{"location":"process-_ProcessPosix/#returns_4","text":"None val","title":"Returns"},{"location":"process-_ProcessPosix/#_dup2","text":"[Source] Creates a copy of the file descriptor oldfd using the file descriptor number specified in newfd. If the file descriptor newfd was previously open, it is silently closed before being reused. If dup2() fails because of EINTR we retry. fun tag _dup2( oldfd: U32 val, newfd: U32 val) : None val","title":"_dup2"},{"location":"process-_ProcessPosix/#parameters_3","text":"oldfd: U32 val newfd: U32 val","title":"Parameters"},{"location":"process-_ProcessPosix/#returns_5","text":"None val","title":"Returns"},{"location":"process-_ProcessWindows/","text":"_ProcessWindows \u00b6 [Source] class ref _ProcessWindows is _Process ref Implements \u00b6 _Process ref Constructors \u00b6 create \u00b6 [Source] new ref create( path: String val, args: Array[String val] val, vars: Array[String val] val, stdin: _Pipe ref, stdout: _Pipe ref, stderr: _Pipe ref) : _ProcessWindows ref^ Parameters \u00b6 path: String val args: Array [ String val] val vars: Array [ String val] val stdin: _Pipe ref stdout: _Pipe ref stderr: _Pipe ref Returns \u00b6 _ProcessWindows ref^ Public fields \u00b6 let hProcess: USize val \u00b6 [Source] Public Functions \u00b6 kill \u00b6 [Source] fun box kill() : None val Returns \u00b6 None val wait \u00b6 [Source] fun ref wait() : I32 val Returns \u00b6 I32 val Private Functions \u00b6 _make_cmdline \u00b6 [Source] fun tag _make_cmdline( args: Array[String val] val) : String val Parameters \u00b6 args: Array [ String val] val Returns \u00b6 String val _make_environ \u00b6 [Source] fun tag _make_environ( vars: Array[String val] val) : Array[U8 val] ref Parameters \u00b6 vars: Array [ String val] val Returns \u00b6 Array [ U8 val] ref","title":"class _ProcessWindows"},{"location":"process-_ProcessWindows/#_processwindows","text":"[Source] class ref _ProcessWindows is _Process ref","title":"_ProcessWindows"},{"location":"process-_ProcessWindows/#implements","text":"_Process ref","title":"Implements"},{"location":"process-_ProcessWindows/#constructors","text":"","title":"Constructors"},{"location":"process-_ProcessWindows/#create","text":"[Source] new ref create( path: String val, args: Array[String val] val, vars: Array[String val] val, stdin: _Pipe ref, stdout: _Pipe ref, stderr: _Pipe ref) : _ProcessWindows ref^","title":"create"},{"location":"process-_ProcessWindows/#parameters","text":"path: String val args: Array [ String val] val vars: Array [ String val] val stdin: _Pipe ref stdout: _Pipe ref stderr: _Pipe ref","title":"Parameters"},{"location":"process-_ProcessWindows/#returns","text":"_ProcessWindows ref^","title":"Returns"},{"location":"process-_ProcessWindows/#public-fields","text":"","title":"Public fields"},{"location":"process-_ProcessWindows/#let-hprocess-usize-val","text":"[Source]","title":"let hProcess: USize val"},{"location":"process-_ProcessWindows/#public-functions","text":"","title":"Public Functions"},{"location":"process-_ProcessWindows/#kill","text":"[Source] fun box kill() : None val","title":"kill"},{"location":"process-_ProcessWindows/#returns_1","text":"None val","title":"Returns"},{"location":"process-_ProcessWindows/#wait","text":"[Source] fun ref wait() : I32 val","title":"wait"},{"location":"process-_ProcessWindows/#returns_2","text":"I32 val","title":"Returns"},{"location":"process-_ProcessWindows/#private-functions","text":"","title":"Private Functions"},{"location":"process-_ProcessWindows/#_make_cmdline","text":"[Source] fun tag _make_cmdline( args: Array[String val] val) : String val","title":"_make_cmdline"},{"location":"process-_ProcessWindows/#parameters_1","text":"args: Array [ String val] val","title":"Parameters"},{"location":"process-_ProcessWindows/#returns_3","text":"String val","title":"Returns"},{"location":"process-_ProcessWindows/#_make_environ","text":"[Source] fun tag _make_environ( vars: Array[String val] val) : Array[U8 val] ref","title":"_make_environ"},{"location":"process-_ProcessWindows/#parameters_2","text":"vars: Array [ String val] val","title":"Parameters"},{"location":"process-_ProcessWindows/#returns_4","text":"Array [ U8 val] ref","title":"Returns"},{"location":"process-_STDERRFILENO/","text":"_STDERRFILENO \u00b6 [Source] primitive val _STDERRFILENO Constructors \u00b6 create \u00b6 [Source] new val create() : _STDERRFILENO val^ Returns \u00b6 _STDERRFILENO val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: _STDERRFILENO val) : Bool val Parameters \u00b6 that: _STDERRFILENO val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _STDERRFILENO val) : Bool val Parameters \u00b6 that: _STDERRFILENO val Returns \u00b6 Bool val","title":"primitive _STDERRFILENO"},{"location":"process-_STDERRFILENO/#_stderrfileno","text":"[Source] primitive val _STDERRFILENO","title":"_STDERRFILENO"},{"location":"process-_STDERRFILENO/#constructors","text":"","title":"Constructors"},{"location":"process-_STDERRFILENO/#create","text":"[Source] new val create() : _STDERRFILENO val^","title":"create"},{"location":"process-_STDERRFILENO/#returns","text":"_STDERRFILENO val^","title":"Returns"},{"location":"process-_STDERRFILENO/#public-functions","text":"","title":"Public Functions"},{"location":"process-_STDERRFILENO/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"process-_STDERRFILENO/#returns_1","text":"U32 val","title":"Returns"},{"location":"process-_STDERRFILENO/#eq","text":"[Source] fun box eq( that: _STDERRFILENO val) : Bool val","title":"eq"},{"location":"process-_STDERRFILENO/#parameters","text":"that: _STDERRFILENO val","title":"Parameters"},{"location":"process-_STDERRFILENO/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_STDERRFILENO/#ne","text":"[Source] fun box ne( that: _STDERRFILENO val) : Bool val","title":"ne"},{"location":"process-_STDERRFILENO/#parameters_1","text":"that: _STDERRFILENO val","title":"Parameters"},{"location":"process-_STDERRFILENO/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_STDINFILENO/","text":"_STDINFILENO \u00b6 [Source] primitive val _STDINFILENO Constructors \u00b6 create \u00b6 [Source] new val create() : _STDINFILENO val^ Returns \u00b6 _STDINFILENO val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: _STDINFILENO val) : Bool val Parameters \u00b6 that: _STDINFILENO val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _STDINFILENO val) : Bool val Parameters \u00b6 that: _STDINFILENO val Returns \u00b6 Bool val","title":"primitive _STDINFILENO"},{"location":"process-_STDINFILENO/#_stdinfileno","text":"[Source] primitive val _STDINFILENO","title":"_STDINFILENO"},{"location":"process-_STDINFILENO/#constructors","text":"","title":"Constructors"},{"location":"process-_STDINFILENO/#create","text":"[Source] new val create() : _STDINFILENO val^","title":"create"},{"location":"process-_STDINFILENO/#returns","text":"_STDINFILENO val^","title":"Returns"},{"location":"process-_STDINFILENO/#public-functions","text":"","title":"Public Functions"},{"location":"process-_STDINFILENO/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"process-_STDINFILENO/#returns_1","text":"U32 val","title":"Returns"},{"location":"process-_STDINFILENO/#eq","text":"[Source] fun box eq( that: _STDINFILENO val) : Bool val","title":"eq"},{"location":"process-_STDINFILENO/#parameters","text":"that: _STDINFILENO val","title":"Parameters"},{"location":"process-_STDINFILENO/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_STDINFILENO/#ne","text":"[Source] fun box ne( that: _STDINFILENO val) : Bool val","title":"ne"},{"location":"process-_STDINFILENO/#parameters_1","text":"that: _STDINFILENO val","title":"Parameters"},{"location":"process-_STDINFILENO/#returns_3","text":"Bool val","title":"Returns"},{"location":"process-_STDOUTFILENO/","text":"_STDOUTFILENO \u00b6 [Source] primitive val _STDOUTFILENO Constructors \u00b6 create \u00b6 [Source] new val create() : _STDOUTFILENO val^ Returns \u00b6 _STDOUTFILENO val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: _STDOUTFILENO val) : Bool val Parameters \u00b6 that: _STDOUTFILENO val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _STDOUTFILENO val) : Bool val Parameters \u00b6 that: _STDOUTFILENO val Returns \u00b6 Bool val","title":"primitive _STDOUTFILENO"},{"location":"process-_STDOUTFILENO/#_stdoutfileno","text":"[Source] primitive val _STDOUTFILENO","title":"_STDOUTFILENO"},{"location":"process-_STDOUTFILENO/#constructors","text":"","title":"Constructors"},{"location":"process-_STDOUTFILENO/#create","text":"[Source] new val create() : _STDOUTFILENO val^","title":"create"},{"location":"process-_STDOUTFILENO/#returns","text":"_STDOUTFILENO val^","title":"Returns"},{"location":"process-_STDOUTFILENO/#public-functions","text":"","title":"Public Functions"},{"location":"process-_STDOUTFILENO/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"process-_STDOUTFILENO/#returns_1","text":"U32 val","title":"Returns"},{"location":"process-_STDOUTFILENO/#eq","text":"[Source] fun box eq( that: _STDOUTFILENO val) : Bool val","title":"eq"},{"location":"process-_STDOUTFILENO/#parameters","text":"that: _STDOUTFILENO val","title":"Parameters"},{"location":"process-_STDOUTFILENO/#returns_2","text":"Bool val","title":"Returns"},{"location":"process-_STDOUTFILENO/#ne","text":"[Source] fun box ne( that: _STDOUTFILENO val) : Bool val","title":"ne"},{"location":"process-_STDOUTFILENO/#parameters_1","text":"that: _STDOUTFILENO val","title":"Parameters"},{"location":"process-_STDOUTFILENO/#returns_3","text":"Bool val","title":"Returns"},{"location":"promises--index/","text":"Promises Package \u00b6 A Promise represents a value that will be available at a later time. Promise s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the Promise , to be called when the Promise is fulfilled or rejected. These handlers themselves are also wrapped in Promise s so that they can be chained together in order for the fulfilled value of one Promise to be used to compute a value which will be used to fulfill the next Promise in the chain, or so that if the Promise is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new. Fulfill and reject handlers can either be specified as classes that implment the Fulfill and Reject interfaces, or as functions with the same signatures as the apply methods in Fulfill and Reject . In the following code, the fulfillment of the Promise causes the execution of several fulfillment functions. The output is: fulfilled + foo fulfilled + bar fulfilled + baz use \"promises\" class PrintFulfill is Fulfill[String, String] let _env: Env let _msg: String new create(env: Env, msg: String) => _env = env _msg = msg fun apply(s: String): String => _env.out.print(\" + \".join([s; _msg].values())) s actor Main new create(env: Env) => let promise = Promise[String] promise.next[String](recover PrintFulfill(env, \"foo\") end) promise.next[String](recover PrintFulfill(env, \"bar\") end) promise.next[String](recover PrintFulfill(env, \"baz\") end) promise(\"fulfilled\") In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or 0 if there are no command line arguments. use \"promises\" primitive Computation fun tag string_to_strings(s: String): Array[String] val => recover s.split() end fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val => recover let len = Array[USize] for s in sa.values() do len.push(s.size()) end len end fun tag sizes_to_avg(sza: Array[USize] val): USize => var acc = USize(0) for sz in sza.values() do acc = acc + sz end acc / sza.size() fun tag output(env: Env, sz: USize): None => env.out.print(sz.string()) actor Main new create(env: Env) => let promise = Promise[String] promise.next[Array[String] val](recover Computation~string_to_strings() end) .next[Array[USize] val](recover Computation~strings_to_sizes() end) .next[USize](recover Computation~sizes_to_avg() end) .next[None](recover Computation~output(env) end) promise(\" \".join(env.args.slice(1).values())) Public Types \u00b6 actor Promise primitive Promises interface Fulfill interface Reject class FulfillIdentity class RejectAlways Private Types \u00b6 actor _Join primitive _None primitive _Pending primitive _Reject class _Then interface _IThen","title":"Package"},{"location":"promises--index/#promises-package","text":"A Promise represents a value that will be available at a later time. Promise s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the Promise , to be called when the Promise is fulfilled or rejected. These handlers themselves are also wrapped in Promise s so that they can be chained together in order for the fulfilled value of one Promise to be used to compute a value which will be used to fulfill the next Promise in the chain, or so that if the Promise is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new. Fulfill and reject handlers can either be specified as classes that implment the Fulfill and Reject interfaces, or as functions with the same signatures as the apply methods in Fulfill and Reject . In the following code, the fulfillment of the Promise causes the execution of several fulfillment functions. The output is: fulfilled + foo fulfilled + bar fulfilled + baz use \"promises\" class PrintFulfill is Fulfill[String, String] let _env: Env let _msg: String new create(env: Env, msg: String) => _env = env _msg = msg fun apply(s: String): String => _env.out.print(\" + \".join([s; _msg].values())) s actor Main new create(env: Env) => let promise = Promise[String] promise.next[String](recover PrintFulfill(env, \"foo\") end) promise.next[String](recover PrintFulfill(env, \"bar\") end) promise.next[String](recover PrintFulfill(env, \"baz\") end) promise(\"fulfilled\") In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or 0 if there are no command line arguments. use \"promises\" primitive Computation fun tag string_to_strings(s: String): Array[String] val => recover s.split() end fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val => recover let len = Array[USize] for s in sa.values() do len.push(s.size()) end len end fun tag sizes_to_avg(sza: Array[USize] val): USize => var acc = USize(0) for sz in sza.values() do acc = acc + sz end acc / sza.size() fun tag output(env: Env, sz: USize): None => env.out.print(sz.string()) actor Main new create(env: Env) => let promise = Promise[String] promise.next[Array[String] val](recover Computation~string_to_strings() end) .next[Array[USize] val](recover Computation~strings_to_sizes() end) .next[USize](recover Computation~sizes_to_avg() end) .next[None](recover Computation~output(env) end) promise(\" \".join(env.args.slice(1).values()))","title":"Promises Package"},{"location":"promises--index/#public-types","text":"actor Promise primitive Promises interface Fulfill interface Reject class FulfillIdentity class RejectAlways","title":"Public Types"},{"location":"promises--index/#private-types","text":"actor _Join primitive _None primitive _Pending primitive _Reject class _Then interface _IThen","title":"Private Types"},{"location":"promises-Fulfill/","text":"Fulfill[A: Any #share, B: Any #share] \u00b6 [Source] A function from A to B that is called when a promise is fulfilled. interface iso Fulfill[A: Any #share, B: Any #share] Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( value: A) : B ? Parameters \u00b6 value: A Returns \u00b6 B ?","title":"interface Fulfill"},{"location":"promises-Fulfill/#fulfill91a-any-share-b-any-share93","text":"[Source] A function from A to B that is called when a promise is fulfilled. interface iso Fulfill[A: Any #share, B: Any #share]","title":"Fulfill[A: Any #share, B: Any #share]"},{"location":"promises-Fulfill/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Fulfill/#apply","text":"[Source] fun ref apply( value: A) : B ?","title":"apply"},{"location":"promises-Fulfill/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-Fulfill/#returns","text":"B ?","title":"Returns"},{"location":"promises-FulfillIdentity/","text":"FulfillIdentity[A: Any #share] \u00b6 [Source] An identity function for fulfilling promises. class iso FulfillIdentity[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new iso create() : FulfillIdentity[A] iso^ Returns \u00b6 FulfillIdentity [A] iso^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( value: A) : A Parameters \u00b6 value: A Returns \u00b6 A","title":"class FulfillIdentity"},{"location":"promises-FulfillIdentity/#fulfillidentity91a-any-share93","text":"[Source] An identity function for fulfilling promises. class iso FulfillIdentity[A: Any #share]","title":"FulfillIdentity[A: Any #share]"},{"location":"promises-FulfillIdentity/#constructors","text":"","title":"Constructors"},{"location":"promises-FulfillIdentity/#create","text":"[Source] new iso create() : FulfillIdentity[A] iso^","title":"create"},{"location":"promises-FulfillIdentity/#returns","text":"FulfillIdentity [A] iso^","title":"Returns"},{"location":"promises-FulfillIdentity/#public-functions","text":"","title":"Public Functions"},{"location":"promises-FulfillIdentity/#apply","text":"[Source] fun ref apply( value: A) : A","title":"apply"},{"location":"promises-FulfillIdentity/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-FulfillIdentity/#returns_1","text":"A","title":"Returns"},{"location":"promises-Promise/","text":"Promise[A: Any #share] \u00b6 [Source] A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected. Any number of promises can be chained after this one. actor tag Promise[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new tag create() : Promise[A] tag^ Returns \u00b6 Promise [A] tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Fulfill the promise. be apply( value: A) Parameters \u00b6 value: A reject \u00b6 [Source] Reject the promise. be reject() Public Functions \u00b6 next[B: Any #share] \u00b6 [Source] Chain a promise after this one. When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain. If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected. If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain. If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected. fun tag next[B: Any #share]( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso = qualify) : Promise[B] tag Parameters \u00b6 fulfill: Fulfill [A, B] iso rejected: Reject [B] iso = qualify Returns \u00b6 Promise [B] tag add[optional B: Any #share] \u00b6 [Source] Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected. fun tag add[optional B: Any #share]( p: Promise[B] tag) : Promise[(A , B)] tag Parameters \u00b6 p: Promise [B] tag Returns \u00b6 Promise [(A , B)] tag join \u00b6 [Source] Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected. Join p1 and p2 with an existing promise, p3 . use \"promises\" actor Main new create(env: Env) => let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] p3.join([p1; p2].values()) .next[None]({(a: Array[String val] val) => for s in a.values() do env.out.print(s) end }) p2(\"second\") p3(\"third\") p1(\"first\") fun tag join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag Parameters \u00b6 ps: Iterator [ Promise [A] tag] ref Returns \u00b6 Promise [ Array [A] val] tag select \u00b6 [Source] Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise. fun tag select( p: Promise[A] tag) : Promise[(A , Promise[A] tag)] tag Parameters \u00b6 p: Promise [A] tag Returns \u00b6 Promise [(A , Promise [A] tag)] tag timeout \u00b6 [Source] Reject the promise after the given expiration in nanoseconds. fun tag timeout( expiration: U64 val) : None val Parameters \u00b6 expiration: U64 val Returns \u00b6 None val Private Behaviours \u00b6 _attach \u00b6 [Source] Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list. be _attach( attach: _IThen[A] iso) Parameters \u00b6 attach: _IThen [A] iso","title":"actor Promise"},{"location":"promises-Promise/#promise91a-any-share93","text":"[Source] A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected. Any number of promises can be chained after this one. actor tag Promise[A: Any #share]","title":"Promise[A: Any #share]"},{"location":"promises-Promise/#constructors","text":"","title":"Constructors"},{"location":"promises-Promise/#create","text":"[Source] new tag create() : Promise[A] tag^","title":"create"},{"location":"promises-Promise/#returns","text":"Promise [A] tag^","title":"Returns"},{"location":"promises-Promise/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"promises-Promise/#apply","text":"[Source] Fulfill the promise. be apply( value: A)","title":"apply"},{"location":"promises-Promise/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-Promise/#reject","text":"[Source] Reject the promise. be reject()","title":"reject"},{"location":"promises-Promise/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Promise/#next91b-any-share93","text":"[Source] Chain a promise after this one. When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain. If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected. If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain. If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected. fun tag next[B: Any #share]( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso = qualify) : Promise[B] tag","title":"next[B: Any #share]"},{"location":"promises-Promise/#parameters_1","text":"fulfill: Fulfill [A, B] iso rejected: Reject [B] iso = qualify","title":"Parameters"},{"location":"promises-Promise/#returns_1","text":"Promise [B] tag","title":"Returns"},{"location":"promises-Promise/#add91optional-b-any-share93","text":"[Source] Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected. fun tag add[optional B: Any #share]( p: Promise[B] tag) : Promise[(A , B)] tag","title":"add[optional B: Any #share]"},{"location":"promises-Promise/#parameters_2","text":"p: Promise [B] tag","title":"Parameters"},{"location":"promises-Promise/#returns_2","text":"Promise [(A , B)] tag","title":"Returns"},{"location":"promises-Promise/#join","text":"[Source] Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected. Join p1 and p2 with an existing promise, p3 . use \"promises\" actor Main new create(env: Env) => let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] p3.join([p1; p2].values()) .next[None]({(a: Array[String val] val) => for s in a.values() do env.out.print(s) end }) p2(\"second\") p3(\"third\") p1(\"first\") fun tag join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag","title":"join"},{"location":"promises-Promise/#parameters_3","text":"ps: Iterator [ Promise [A] tag] ref","title":"Parameters"},{"location":"promises-Promise/#returns_3","text":"Promise [ Array [A] val] tag","title":"Returns"},{"location":"promises-Promise/#select","text":"[Source] Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise. fun tag select( p: Promise[A] tag) : Promise[(A , Promise[A] tag)] tag","title":"select"},{"location":"promises-Promise/#parameters_4","text":"p: Promise [A] tag","title":"Parameters"},{"location":"promises-Promise/#returns_4","text":"Promise [(A , Promise [A] tag)] tag","title":"Returns"},{"location":"promises-Promise/#timeout","text":"[Source] Reject the promise after the given expiration in nanoseconds. fun tag timeout( expiration: U64 val) : None val","title":"timeout"},{"location":"promises-Promise/#parameters_5","text":"expiration: U64 val","title":"Parameters"},{"location":"promises-Promise/#returns_5","text":"None val","title":"Returns"},{"location":"promises-Promise/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"promises-Promise/#_attach","text":"[Source] Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list. be _attach( attach: _IThen[A] iso)","title":"_attach"},{"location":"promises-Promise/#parameters_6","text":"attach: _IThen [A] iso","title":"Parameters"},{"location":"promises-Promises/","text":"Promises[A: Any #share] \u00b6 [Source] primitive val Promises[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new val create() : Promises[A] val^ Returns \u00b6 Promises [A] val^ Public Functions \u00b6 join \u00b6 [Source] Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given. Join three existing promises to make a fourth. use \"promises\" actor Main new create(env: Env) => let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] Promises[String val].join([p1; p2; p3].values()) .next[None]({(a: Array[String val] val) => for s in a.values() do env.out.print(s) end }) p2(\"second\") p3(\"third\") p1(\"first\") fun box join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag Parameters \u00b6 ps: Iterator [ Promise [A] tag] ref Returns \u00b6 Promise [ Array [A] val] tag eq \u00b6 [Source] fun box eq( that: Promises[A] val) : Bool val Parameters \u00b6 that: Promises [A] val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Promises[A] val) : Bool val Parameters \u00b6 that: Promises [A] val Returns \u00b6 Bool val","title":"primitive Promises"},{"location":"promises-Promises/#promises91a-any-share93","text":"[Source] primitive val Promises[A: Any #share]","title":"Promises[A: Any #share]"},{"location":"promises-Promises/#constructors","text":"","title":"Constructors"},{"location":"promises-Promises/#create","text":"[Source] new val create() : Promises[A] val^","title":"create"},{"location":"promises-Promises/#returns","text":"Promises [A] val^","title":"Returns"},{"location":"promises-Promises/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Promises/#join","text":"[Source] Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given. Join three existing promises to make a fourth. use \"promises\" actor Main new create(env: Env) => let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] Promises[String val].join([p1; p2; p3].values()) .next[None]({(a: Array[String val] val) => for s in a.values() do env.out.print(s) end }) p2(\"second\") p3(\"third\") p1(\"first\") fun box join( ps: Iterator[Promise[A] tag] ref) : Promise[Array[A] val] tag","title":"join"},{"location":"promises-Promises/#parameters","text":"ps: Iterator [ Promise [A] tag] ref","title":"Parameters"},{"location":"promises-Promises/#returns_1","text":"Promise [ Array [A] val] tag","title":"Returns"},{"location":"promises-Promises/#eq","text":"[Source] fun box eq( that: Promises[A] val) : Bool val","title":"eq"},{"location":"promises-Promises/#parameters_1","text":"that: Promises [A] val","title":"Parameters"},{"location":"promises-Promises/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-Promises/#ne","text":"[Source] fun box ne( that: Promises[A] val) : Bool val","title":"ne"},{"location":"promises-Promises/#parameters_2","text":"that: Promises [A] val","title":"Parameters"},{"location":"promises-Promises/#returns_3","text":"Bool val","title":"Returns"},{"location":"promises-Reject/","text":"Reject[A: Any #share] \u00b6 [Source] A function on A that is called when a promise is rejected. interface iso Reject[A: Any #share] Public Functions \u00b6 apply \u00b6 [Source] fun ref apply() : A ? Returns \u00b6 A ?","title":"interface Reject"},{"location":"promises-Reject/#reject91a-any-share93","text":"[Source] A function on A that is called when a promise is rejected. interface iso Reject[A: Any #share]","title":"Reject[A: Any #share]"},{"location":"promises-Reject/#public-functions","text":"","title":"Public Functions"},{"location":"promises-Reject/#apply","text":"[Source] fun ref apply() : A ?","title":"apply"},{"location":"promises-Reject/#returns","text":"A ?","title":"Returns"},{"location":"promises-RejectAlways/","text":"RejectAlways[A: Any #share] \u00b6 [Source] A reject that always raises an error. class iso RejectAlways[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new iso create() : RejectAlways[A] iso^ Returns \u00b6 RejectAlways [A] iso^ Public Functions \u00b6 apply \u00b6 [Source] fun ref apply() : A ? Returns \u00b6 A ?","title":"class RejectAlways"},{"location":"promises-RejectAlways/#rejectalways91a-any-share93","text":"[Source] A reject that always raises an error. class iso RejectAlways[A: Any #share]","title":"RejectAlways[A: Any #share]"},{"location":"promises-RejectAlways/#constructors","text":"","title":"Constructors"},{"location":"promises-RejectAlways/#create","text":"[Source] new iso create() : RejectAlways[A] iso^","title":"create"},{"location":"promises-RejectAlways/#returns","text":"RejectAlways [A] iso^","title":"Returns"},{"location":"promises-RejectAlways/#public-functions","text":"","title":"Public Functions"},{"location":"promises-RejectAlways/#apply","text":"[Source] fun ref apply() : A ?","title":"apply"},{"location":"promises-RejectAlways/#returns_1","text":"A ?","title":"Returns"},{"location":"promises-_IThen/","text":"_IThen[A: Any #share] \u00b6 [Source] An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type. interface ref _IThen[A: Any #share] Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val reject \u00b6 [Source] fun ref reject() : None val Returns \u00b6 None val","title":"interface _IThen"},{"location":"promises-_IThen/#_ithen91a-any-share93","text":"[Source] An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type. interface ref _IThen[A: Any #share]","title":"_IThen[A: Any #share]"},{"location":"promises-_IThen/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_IThen/#apply","text":"[Source] fun ref apply( value: A) : None val","title":"apply"},{"location":"promises-_IThen/#parameters","text":"value: A","title":"Parameters"},{"location":"promises-_IThen/#returns","text":"None val","title":"Returns"},{"location":"promises-_IThen/#reject","text":"[Source] fun ref reject() : None val","title":"reject"},{"location":"promises-_IThen/#returns_1","text":"None val","title":"Returns"},{"location":"promises-_Join/","text":"_Join[A: Any #share] \u00b6 [Source] actor tag _Join[A: Any #share] Constructors \u00b6 create \u00b6 [Source] new tag create( p: Promise[Array[A] val] tag, space: USize val) : _Join[A] tag^ Parameters \u00b6 p: Promise [ Array [A] val] tag space: USize val Returns \u00b6 _Join [A] tag^ Public Behaviours \u00b6 apply \u00b6 [Source] be apply( a: A) Parameters \u00b6 a: A","title":"actor _Join"},{"location":"promises-_Join/#_join91a-any-share93","text":"[Source] actor tag _Join[A: Any #share]","title":"_Join[A: Any #share]"},{"location":"promises-_Join/#constructors","text":"","title":"Constructors"},{"location":"promises-_Join/#create","text":"[Source] new tag create( p: Promise[Array[A] val] tag, space: USize val) : _Join[A] tag^","title":"create"},{"location":"promises-_Join/#parameters","text":"p: Promise [ Array [A] val] tag space: USize val","title":"Parameters"},{"location":"promises-_Join/#returns","text":"_Join [A] tag^","title":"Returns"},{"location":"promises-_Join/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"promises-_Join/#apply","text":"[Source] be apply( a: A)","title":"apply"},{"location":"promises-_Join/#parameters_1","text":"a: A","title":"Parameters"},{"location":"promises-_None/","text":"_None \u00b6 [Source] primitive val _None Constructors \u00b6 create \u00b6 [Source] new val create() : _None val^ Returns \u00b6 _None val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _None val) : Bool val Parameters \u00b6 that: _None val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _None val) : Bool val Parameters \u00b6 that: _None val Returns \u00b6 Bool val","title":"primitive _None"},{"location":"promises-_None/#_none","text":"[Source] primitive val _None","title":"_None"},{"location":"promises-_None/#constructors","text":"","title":"Constructors"},{"location":"promises-_None/#create","text":"[Source] new val create() : _None val^","title":"create"},{"location":"promises-_None/#returns","text":"_None val^","title":"Returns"},{"location":"promises-_None/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_None/#eq","text":"[Source] fun box eq( that: _None val) : Bool val","title":"eq"},{"location":"promises-_None/#parameters","text":"that: _None val","title":"Parameters"},{"location":"promises-_None/#returns_1","text":"Bool val","title":"Returns"},{"location":"promises-_None/#ne","text":"[Source] fun box ne( that: _None val) : Bool val","title":"ne"},{"location":"promises-_None/#parameters_1","text":"that: _None val","title":"Parameters"},{"location":"promises-_None/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-_Pending/","text":"_Pending \u00b6 [Source] primitive val _Pending Constructors \u00b6 create \u00b6 [Source] new val create() : _Pending val^ Returns \u00b6 _Pending val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _Pending val) : Bool val Parameters \u00b6 that: _Pending val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _Pending val) : Bool val Parameters \u00b6 that: _Pending val Returns \u00b6 Bool val","title":"primitive _Pending"},{"location":"promises-_Pending/#_pending","text":"[Source] primitive val _Pending","title":"_Pending"},{"location":"promises-_Pending/#constructors","text":"","title":"Constructors"},{"location":"promises-_Pending/#create","text":"[Source] new val create() : _Pending val^","title":"create"},{"location":"promises-_Pending/#returns","text":"_Pending val^","title":"Returns"},{"location":"promises-_Pending/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_Pending/#eq","text":"[Source] fun box eq( that: _Pending val) : Bool val","title":"eq"},{"location":"promises-_Pending/#parameters","text":"that: _Pending val","title":"Parameters"},{"location":"promises-_Pending/#returns_1","text":"Bool val","title":"Returns"},{"location":"promises-_Pending/#ne","text":"[Source] fun box ne( that: _Pending val) : Bool val","title":"ne"},{"location":"promises-_Pending/#parameters_1","text":"that: _Pending val","title":"Parameters"},{"location":"promises-_Pending/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-_Reject/","text":"_Reject \u00b6 [Source] primitive val _Reject Constructors \u00b6 create \u00b6 [Source] new val create() : _Reject val^ Returns \u00b6 _Reject val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _Reject val) : Bool val Parameters \u00b6 that: _Reject val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _Reject val) : Bool val Parameters \u00b6 that: _Reject val Returns \u00b6 Bool val","title":"primitive _Reject"},{"location":"promises-_Reject/#_reject","text":"[Source] primitive val _Reject","title":"_Reject"},{"location":"promises-_Reject/#constructors","text":"","title":"Constructors"},{"location":"promises-_Reject/#create","text":"[Source] new val create() : _Reject val^","title":"create"},{"location":"promises-_Reject/#returns","text":"_Reject val^","title":"Returns"},{"location":"promises-_Reject/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_Reject/#eq","text":"[Source] fun box eq( that: _Reject val) : Bool val","title":"eq"},{"location":"promises-_Reject/#parameters","text":"that: _Reject val","title":"Parameters"},{"location":"promises-_Reject/#returns_1","text":"Bool val","title":"Returns"},{"location":"promises-_Reject/#ne","text":"[Source] fun box ne( that: _Reject val) : Bool val","title":"ne"},{"location":"promises-_Reject/#parameters_1","text":"that: _Reject val","title":"Parameters"},{"location":"promises-_Reject/#returns_2","text":"Bool val","title":"Returns"},{"location":"promises-_Then/","text":"_Then[A: Any #share, B: Any #share] \u00b6 [Source] A step in a promise pipeline. class ref _Then[A: Any #share, B: Any #share] Constructors \u00b6 create \u00b6 [Source] A step is represented by a fulfill function and a reject function. new iso create( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso) : _Then[A, B] iso^ Parameters \u00b6 fulfill: Fulfill [A, B] iso rejected: Reject [B] iso Returns \u00b6 _Then [A, B] iso^ Public Functions \u00b6 promise \u00b6 [Source] Returns the next promise in the chain. fun box promise() : Promise[B] tag Returns \u00b6 Promise [B] tag apply \u00b6 [Source] Called with the result of the previous promise when it is fulfilled. fun ref apply( value: A) : None val Parameters \u00b6 value: A Returns \u00b6 None val reject \u00b6 [Source] Called when the previous promise is rejected. fun ref reject() : None val Returns \u00b6 None val","title":"class _Then"},{"location":"promises-_Then/#_then91a-any-share-b-any-share93","text":"[Source] A step in a promise pipeline. class ref _Then[A: Any #share, B: Any #share]","title":"_Then[A: Any #share, B: Any #share]"},{"location":"promises-_Then/#constructors","text":"","title":"Constructors"},{"location":"promises-_Then/#create","text":"[Source] A step is represented by a fulfill function and a reject function. new iso create( fulfill: Fulfill[A, B] iso, rejected: Reject[B] iso) : _Then[A, B] iso^","title":"create"},{"location":"promises-_Then/#parameters","text":"fulfill: Fulfill [A, B] iso rejected: Reject [B] iso","title":"Parameters"},{"location":"promises-_Then/#returns","text":"_Then [A, B] iso^","title":"Returns"},{"location":"promises-_Then/#public-functions","text":"","title":"Public Functions"},{"location":"promises-_Then/#promise","text":"[Source] Returns the next promise in the chain. fun box promise() : Promise[B] tag","title":"promise"},{"location":"promises-_Then/#returns_1","text":"Promise [B] tag","title":"Returns"},{"location":"promises-_Then/#apply","text":"[Source] Called with the result of the previous promise when it is fulfilled. fun ref apply( value: A) : None val","title":"apply"},{"location":"promises-_Then/#parameters_1","text":"value: A","title":"Parameters"},{"location":"promises-_Then/#returns_2","text":"None val","title":"Returns"},{"location":"promises-_Then/#reject","text":"[Source] Called when the previous promise is rejected. fun ref reject() : None val","title":"reject"},{"location":"promises-_Then/#returns_3","text":"None val","title":"Returns"},{"location":"random--index/","text":"Random package \u00b6 The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with Time.now . let rand = Rand let n = rand.next() Public Types \u00b6 class XorShift128Plus class XorOshiro128Plus class XorOshiro128StarStar class SplitMix64 type Rand trait Random class MT class Dice","title":"Package"},{"location":"random--index/#random-package","text":"The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with Time.now . let rand = Rand let n = rand.next()","title":"Random package"},{"location":"random--index/#public-types","text":"class XorShift128Plus class XorOshiro128Plus class XorOshiro128StarStar class SplitMix64 type Rand trait Random class MT class Dice","title":"Public Types"},{"location":"random-Dice/","text":"Dice \u00b6 [Source] A simple dice roller. class ref Dice Constructors \u00b6 create \u00b6 [Source] Initialise with a random number generator. new ref create( from: Random ref) : Dice ref^ Parameters \u00b6 from: Random ref Returns \u00b6 Dice ref^ Public fields \u00b6 var r: Random ref \u00b6 [Source] Public Functions \u00b6 apply \u00b6 [Source] Return the sum of count rolls of a die with the given number of sides . The die is numbered from 1 to sides . For example, count = 2 and sides = 6 will return a value between 2 and 12. fun ref apply( count: U64 val, sides: U64 val) : U64 val Parameters \u00b6 count: U64 val sides: U64 val Returns \u00b6 U64 val","title":"class Dice"},{"location":"random-Dice/#dice","text":"[Source] A simple dice roller. class ref Dice","title":"Dice"},{"location":"random-Dice/#constructors","text":"","title":"Constructors"},{"location":"random-Dice/#create","text":"[Source] Initialise with a random number generator. new ref create( from: Random ref) : Dice ref^","title":"create"},{"location":"random-Dice/#parameters","text":"from: Random ref","title":"Parameters"},{"location":"random-Dice/#returns","text":"Dice ref^","title":"Returns"},{"location":"random-Dice/#public-fields","text":"","title":"Public fields"},{"location":"random-Dice/#var-r-random-ref","text":"[Source]","title":"var r: Random ref"},{"location":"random-Dice/#public-functions","text":"","title":"Public Functions"},{"location":"random-Dice/#apply","text":"[Source] Return the sum of count rolls of a die with the given number of sides . The die is numbered from 1 to sides . For example, count = 2 and sides = 6 will return a value between 2 and 12. fun ref apply( count: U64 val, sides: U64 val) : U64 val","title":"apply"},{"location":"random-Dice/#parameters_1","text":"count: U64 val sides: U64 val","title":"Parameters"},{"location":"random-Dice/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-MT/","text":"MT \u00b6 [Source] A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. class ref MT is Random ref Implements \u00b6 Random ref Constructors \u00b6 create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : MT ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 MT ref^ Public Functions \u00b6 next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 [Source] fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 [Source] fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 [Source] fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 [Source] fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 [Source] fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val Private Functions \u00b6 _populate \u00b6 [Source] Repopulates the state array. fun ref _populate() : None val Returns \u00b6 None val _n \u00b6 [Source] fun tag _n() : USize val Returns \u00b6 USize val _m \u00b6 [Source] fun tag _m() : USize val Returns \u00b6 USize val _n1 \u00b6 [Source] fun tag _n1() : USize val Returns \u00b6 USize val _mask \u00b6 [Source] fun tag _mask( x: U64 val, y: U64 val) : U64 val Parameters \u00b6 x: U64 val y: U64 val Returns \u00b6 U64 val _matrix \u00b6 [Source] fun tag _matrix( x: U64 val) : U64 val Parameters \u00b6 x: U64 val Returns \u00b6 U64 val _mix \u00b6 [Source] fun tag _mix( x: U64 val, y: U64 val) : U64 val Parameters \u00b6 x: U64 val y: U64 val Returns \u00b6 U64 val _lower \u00b6 [Source] fun ref _lower( i: USize val, x: U64 val) : U64 val ? Parameters \u00b6 i: USize val x: U64 val Returns \u00b6 U64 val ? _upper \u00b6 [Source] fun ref _upper( i: USize val, x: U64 val) : U64 val ? Parameters \u00b6 i: USize val x: U64 val Returns \u00b6 U64 val ? _wrap \u00b6 [Source] fun ref _wrap() : U64 val ? Returns \u00b6 U64 val ? _u64_unbiased \u00b6 [Source] fun ref _u64_unbiased( range: U64 val) : U64 val Parameters \u00b6 range: U64 val Returns \u00b6 U64 val","title":"class MT"},{"location":"random-MT/#mt","text":"[Source] A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. class ref MT is Random ref","title":"MT"},{"location":"random-MT/#implements","text":"Random ref","title":"Implements"},{"location":"random-MT/#constructors","text":"","title":"Constructors"},{"location":"random-MT/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : MT ref^","title":"create"},{"location":"random-MT/#parameters","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-MT/#returns","text":"MT ref^","title":"Returns"},{"location":"random-MT/#public-functions","text":"","title":"Public Functions"},{"location":"random-MT/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-MT/#returns_1","text":"U64 val","title":"Returns"},{"location":"random-MT/#has_next","text":"[Source] fun tag has_next() : Bool val","title":"has_next"},{"location":"random-MT/#returns_2","text":"Bool val","title":"Returns"},{"location":"random-MT/#u8","text":"[Source] fun ref u8() : U8 val","title":"u8"},{"location":"random-MT/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-MT/#u16","text":"[Source] fun ref u16() : U16 val","title":"u16"},{"location":"random-MT/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-MT/#u32","text":"[Source] fun ref u32() : U32 val","title":"u32"},{"location":"random-MT/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-MT/#u64","text":"[Source] fun ref u64() : U64 val","title":"u64"},{"location":"random-MT/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-MT/#u128","text":"[Source] fun ref u128() : U128 val","title":"u128"},{"location":"random-MT/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-MT/#ulong","text":"[Source] fun ref ulong() : ULong val","title":"ulong"},{"location":"random-MT/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-MT/#usize","text":"[Source] fun ref usize() : USize val","title":"usize"},{"location":"random-MT/#returns_9","text":"USize val","title":"Returns"},{"location":"random-MT/#i8","text":"[Source] fun ref i8() : I8 val","title":"i8"},{"location":"random-MT/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-MT/#i16","text":"[Source] fun ref i16() : I16 val","title":"i16"},{"location":"random-MT/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-MT/#i32","text":"[Source] fun ref i32() : I32 val","title":"i32"},{"location":"random-MT/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-MT/#i64","text":"[Source] fun ref i64() : I64 val","title":"i64"},{"location":"random-MT/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-MT/#i128","text":"[Source] fun ref i128() : I128 val","title":"i128"},{"location":"random-MT/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-MT/#ilong","text":"[Source] fun ref ilong() : ILong val","title":"ilong"},{"location":"random-MT/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-MT/#isize","text":"[Source] fun ref isize() : ISize val","title":"isize"},{"location":"random-MT/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-MT/#int_fp_mult91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_17","text":"N","title":"Returns"},{"location":"random-MT/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_18","text":"N","title":"Returns"},{"location":"random-MT/#int_unbiased91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-MT/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-MT/#returns_19","text":"N","title":"Returns"},{"location":"random-MT/#real","text":"[Source] fun ref real() : F64 val","title":"real"},{"location":"random-MT/#returns_20","text":"F64 val","title":"Returns"},{"location":"random-MT/#shuffle91a-a93","text":"[Source] fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-MT/#parameters_4","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-MT/#returns_21","text":"None val","title":"Returns"},{"location":"random-MT/#private-functions","text":"","title":"Private Functions"},{"location":"random-MT/#_populate","text":"[Source] Repopulates the state array. fun ref _populate() : None val","title":"_populate"},{"location":"random-MT/#returns_22","text":"None val","title":"Returns"},{"location":"random-MT/#_n","text":"[Source] fun tag _n() : USize val","title":"_n"},{"location":"random-MT/#returns_23","text":"USize val","title":"Returns"},{"location":"random-MT/#_m","text":"[Source] fun tag _m() : USize val","title":"_m"},{"location":"random-MT/#returns_24","text":"USize val","title":"Returns"},{"location":"random-MT/#_n1","text":"[Source] fun tag _n1() : USize val","title":"_n1"},{"location":"random-MT/#returns_25","text":"USize val","title":"Returns"},{"location":"random-MT/#_mask","text":"[Source] fun tag _mask( x: U64 val, y: U64 val) : U64 val","title":"_mask"},{"location":"random-MT/#parameters_5","text":"x: U64 val y: U64 val","title":"Parameters"},{"location":"random-MT/#returns_26","text":"U64 val","title":"Returns"},{"location":"random-MT/#_matrix","text":"[Source] fun tag _matrix( x: U64 val) : U64 val","title":"_matrix"},{"location":"random-MT/#parameters_6","text":"x: U64 val","title":"Parameters"},{"location":"random-MT/#returns_27","text":"U64 val","title":"Returns"},{"location":"random-MT/#_mix","text":"[Source] fun tag _mix( x: U64 val, y: U64 val) : U64 val","title":"_mix"},{"location":"random-MT/#parameters_7","text":"x: U64 val y: U64 val","title":"Parameters"},{"location":"random-MT/#returns_28","text":"U64 val","title":"Returns"},{"location":"random-MT/#_lower","text":"[Source] fun ref _lower( i: USize val, x: U64 val) : U64 val ?","title":"_lower"},{"location":"random-MT/#parameters_8","text":"i: USize val x: U64 val","title":"Parameters"},{"location":"random-MT/#returns_29","text":"U64 val ?","title":"Returns"},{"location":"random-MT/#_upper","text":"[Source] fun ref _upper( i: USize val, x: U64 val) : U64 val ?","title":"_upper"},{"location":"random-MT/#parameters_9","text":"i: USize val x: U64 val","title":"Parameters"},{"location":"random-MT/#returns_30","text":"U64 val ?","title":"Returns"},{"location":"random-MT/#_wrap","text":"[Source] fun ref _wrap() : U64 val ?","title":"_wrap"},{"location":"random-MT/#returns_31","text":"U64 val ?","title":"Returns"},{"location":"random-MT/#_u64_unbiased","text":"[Source] fun ref _u64_unbiased( range: U64 val) : U64 val","title":"_u64_unbiased"},{"location":"random-MT/#parameters_10","text":"range: U64 val","title":"Parameters"},{"location":"random-MT/#returns_32","text":"U64 val","title":"Returns"},{"location":"random-Rand/","text":"Rand \u00b6 [Source] type Rand is XorOshiro128Plus ref Type Alias For \u00b6 XorOshiro128Plus ref","title":"type Rand"},{"location":"random-Rand/#rand","text":"[Source] type Rand is XorOshiro128Plus ref","title":"Rand"},{"location":"random-Rand/#type-alias-for","text":"XorOshiro128Plus ref","title":"Type Alias For"},{"location":"random-Random/","text":"Random \u00b6 [Source] The Random trait should be implemented by all random number generators. The only method you need to implement is fun ref next(): 64 . Once that method has been implemented, the Random trait provides default implementations of conversions to other number types. trait ref Random Constructors \u00b6 create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : Random ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 Random ref^ Public Functions \u00b6 has_next \u00b6 [Source] If used as an iterator, this always has another value. fun tag has_next() : Bool val Returns \u00b6 Bool val next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val u8 \u00b6 [Source] A random integer in [0, 2^8) fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 [Source] A random integer in [0, 2^16) fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 [Source] A random integer in [0, 2^32) fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 [Source] A random integer in [0, 2^64) fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 [Source] A random integer in [0, 2^128) fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 [Source] A random integer in [0, ULong.max_value()] fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 [Source] A random integer in [0, USize.max_value()] fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 [Source] A random integer in [-2^7, 2^7) fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 [Source] A random integer in [-2^15, 2^15) fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 [Source] A random integer in [-2^31, 2^31) fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 [Source] A random integer in [-2^63, 2^63) fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 [Source] A random integer in [-2^127, 2^127) fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 [Source] A random integer in [ILong.min_value(), ILong.max_value()] fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 [Source] A random integer in [ISize.min_value(), ISize.max_value()] fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] A random integer in [0, n) fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] A random integer in [0, n) Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication. fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 [Source] A random integer in [0, n) Not biased with small values of n like int . fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 [Source] A random number in [0, 1) fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 [Source] Shuffle the elements of the array into a random order, mutating the array. fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val Private Functions \u00b6 _u64_unbiased \u00b6 [Source] Generates a U64 in the range [0, n) while avoiding bias. See: - https://arxiv.org/abs/1805.10941 - http://www.pcg-random.org/posts/bounded-rands.html fun ref _u64_unbiased( range: U64 val) : U64 val Parameters \u00b6 range: U64 val Returns \u00b6 U64 val","title":"trait Random"},{"location":"random-Random/#random","text":"[Source] The Random trait should be implemented by all random number generators. The only method you need to implement is fun ref next(): 64 . Once that method has been implemented, the Random trait provides default implementations of conversions to other number types. trait ref Random","title":"Random"},{"location":"random-Random/#constructors","text":"","title":"Constructors"},{"location":"random-Random/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : Random ref^","title":"create"},{"location":"random-Random/#parameters","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-Random/#returns","text":"Random ref^","title":"Returns"},{"location":"random-Random/#public-functions","text":"","title":"Public Functions"},{"location":"random-Random/#has_next","text":"[Source] If used as an iterator, this always has another value. fun tag has_next() : Bool val","title":"has_next"},{"location":"random-Random/#returns_1","text":"Bool val","title":"Returns"},{"location":"random-Random/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-Random/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-Random/#u8","text":"[Source] A random integer in [0, 2^8) fun ref u8() : U8 val","title":"u8"},{"location":"random-Random/#returns_3","text":"U8 val","title":"Returns"},{"location":"random-Random/#u16","text":"[Source] A random integer in [0, 2^16) fun ref u16() : U16 val","title":"u16"},{"location":"random-Random/#returns_4","text":"U16 val","title":"Returns"},{"location":"random-Random/#u32","text":"[Source] A random integer in [0, 2^32) fun ref u32() : U32 val","title":"u32"},{"location":"random-Random/#returns_5","text":"U32 val","title":"Returns"},{"location":"random-Random/#u64","text":"[Source] A random integer in [0, 2^64) fun ref u64() : U64 val","title":"u64"},{"location":"random-Random/#returns_6","text":"U64 val","title":"Returns"},{"location":"random-Random/#u128","text":"[Source] A random integer in [0, 2^128) fun ref u128() : U128 val","title":"u128"},{"location":"random-Random/#returns_7","text":"U128 val","title":"Returns"},{"location":"random-Random/#ulong","text":"[Source] A random integer in [0, ULong.max_value()] fun ref ulong() : ULong val","title":"ulong"},{"location":"random-Random/#returns_8","text":"ULong val","title":"Returns"},{"location":"random-Random/#usize","text":"[Source] A random integer in [0, USize.max_value()] fun ref usize() : USize val","title":"usize"},{"location":"random-Random/#returns_9","text":"USize val","title":"Returns"},{"location":"random-Random/#i8","text":"[Source] A random integer in [-2^7, 2^7) fun ref i8() : I8 val","title":"i8"},{"location":"random-Random/#returns_10","text":"I8 val","title":"Returns"},{"location":"random-Random/#i16","text":"[Source] A random integer in [-2^15, 2^15) fun ref i16() : I16 val","title":"i16"},{"location":"random-Random/#returns_11","text":"I16 val","title":"Returns"},{"location":"random-Random/#i32","text":"[Source] A random integer in [-2^31, 2^31) fun ref i32() : I32 val","title":"i32"},{"location":"random-Random/#returns_12","text":"I32 val","title":"Returns"},{"location":"random-Random/#i64","text":"[Source] A random integer in [-2^63, 2^63) fun ref i64() : I64 val","title":"i64"},{"location":"random-Random/#returns_13","text":"I64 val","title":"Returns"},{"location":"random-Random/#i128","text":"[Source] A random integer in [-2^127, 2^127) fun ref i128() : I128 val","title":"i128"},{"location":"random-Random/#returns_14","text":"I128 val","title":"Returns"},{"location":"random-Random/#ilong","text":"[Source] A random integer in [ILong.min_value(), ILong.max_value()] fun ref ilong() : ILong val","title":"ilong"},{"location":"random-Random/#returns_15","text":"ILong val","title":"Returns"},{"location":"random-Random/#isize","text":"[Source] A random integer in [ISize.min_value(), ISize.max_value()] fun ref isize() : ISize val","title":"isize"},{"location":"random-Random/#returns_16","text":"ISize val","title":"Returns"},{"location":"random-Random/#int_fp_mult91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] A random integer in [0, n) fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_1","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_17","text":"N","title":"Returns"},{"location":"random-Random/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] A random integer in [0, n) Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication. fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_18","text":"N","title":"Returns"},{"location":"random-Random/#int_unbiased91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"[Source] A random integer in [0, n) Not biased with small values of n like int . fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-Random/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-Random/#returns_19","text":"N","title":"Returns"},{"location":"random-Random/#real","text":"[Source] A random number in [0, 1) fun ref real() : F64 val","title":"real"},{"location":"random-Random/#returns_20","text":"F64 val","title":"Returns"},{"location":"random-Random/#shuffle91a-a93","text":"[Source] Shuffle the elements of the array into a random order, mutating the array. fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-Random/#parameters_4","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-Random/#returns_21","text":"None val","title":"Returns"},{"location":"random-Random/#private-functions","text":"","title":"Private Functions"},{"location":"random-Random/#_u64_unbiased","text":"[Source] Generates a U64 in the range [0, n) while avoiding bias. See: - https://arxiv.org/abs/1805.10941 - http://www.pcg-random.org/posts/bounded-rands.html fun ref _u64_unbiased( range: U64 val) : U64 val","title":"_u64_unbiased"},{"location":"random-Random/#parameters_5","text":"range: U64 val","title":"Parameters"},{"location":"random-Random/#returns_22","text":"U64 val","title":"Returns"},{"location":"random-SplitMix64/","text":"SplitMix64 \u00b6 [Source] Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at: http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement. class ref SplitMix64 is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] new ref from_u64( x: U64 val = 5489) : SplitMix64 ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 SplitMix64 ref^ create \u00b6 [Source] Only x is used, y is discarded. new ref create( x: U64 val = 5489, y: U64 val = 0) : SplitMix64 ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 SplitMix64 ref^ Public Functions \u00b6 next \u00b6 [Source] fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val Private Functions \u00b6 _u64_unbiased \u00b6 fun ref _u64_unbiased( range: U64 val) : U64 val Parameters \u00b6 range: U64 val Returns \u00b6 U64 val","title":"class SplitMix64"},{"location":"random-SplitMix64/#splitmix64","text":"[Source] Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at: http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf Using XorOshiro128StarStar or XorOshiro128Plus should be prefered unless using only 64 bit of state is a requirement. class ref SplitMix64 is Random ref","title":"SplitMix64"},{"location":"random-SplitMix64/#implements","text":"Random ref","title":"Implements"},{"location":"random-SplitMix64/#constructors","text":"","title":"Constructors"},{"location":"random-SplitMix64/#from_u64","text":"[Source] new ref from_u64( x: U64 val = 5489) : SplitMix64 ref^","title":"from_u64"},{"location":"random-SplitMix64/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-SplitMix64/#returns","text":"SplitMix64 ref^","title":"Returns"},{"location":"random-SplitMix64/#create","text":"[Source] Only x is used, y is discarded. new ref create( x: U64 val = 5489, y: U64 val = 0) : SplitMix64 ref^","title":"create"},{"location":"random-SplitMix64/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-SplitMix64/#returns_1","text":"SplitMix64 ref^","title":"Returns"},{"location":"random-SplitMix64/#public-functions","text":"","title":"Public Functions"},{"location":"random-SplitMix64/#next","text":"[Source] fun ref next() : U64 val","title":"next"},{"location":"random-SplitMix64/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-SplitMix64/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-SplitMix64/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-SplitMix64/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-SplitMix64/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-SplitMix64/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-SplitMix64/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-SplitMix64/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-SplitMix64/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-SplitMix64/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-SplitMix64/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-SplitMix64/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-SplitMix64/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-SplitMix64/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-SplitMix64/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-SplitMix64/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-SplitMix64/#returns_10","text":"USize val","title":"Returns"},{"location":"random-SplitMix64/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-SplitMix64/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-SplitMix64/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-SplitMix64/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-SplitMix64/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-SplitMix64/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-SplitMix64/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-SplitMix64/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-SplitMix64/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-SplitMix64/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-SplitMix64/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-SplitMix64/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-SplitMix64/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-SplitMix64/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-SplitMix64/#int_fp_mult91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-SplitMix64/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-SplitMix64/#returns_18","text":"N","title":"Returns"},{"location":"random-SplitMix64/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-SplitMix64/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-SplitMix64/#returns_19","text":"N","title":"Returns"},{"location":"random-SplitMix64/#int_unbiased91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-SplitMix64/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-SplitMix64/#returns_20","text":"N","title":"Returns"},{"location":"random-SplitMix64/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-SplitMix64/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-SplitMix64/#shuffle91a-a93","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-SplitMix64/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-SplitMix64/#returns_22","text":"None val","title":"Returns"},{"location":"random-SplitMix64/#private-functions","text":"","title":"Private Functions"},{"location":"random-SplitMix64/#_u64_unbiased","text":"fun ref _u64_unbiased( range: U64 val) : U64 val","title":"_u64_unbiased"},{"location":"random-SplitMix64/#parameters_6","text":"range: U64 val","title":"Parameters"},{"location":"random-SplitMix64/#returns_23","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/","text":"XorOshiro128Plus \u00b6 [Source] This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. class ref XorOshiro128Plus is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128Plus ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 XorOshiro128Plus ref^ create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128Plus ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 XorOshiro128Plus ref^ Public Functions \u00b6 next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val Private Functions \u00b6 _u64_unbiased \u00b6 fun ref _u64_unbiased( range: U64 val) : U64 val Parameters \u00b6 range: U64 val Returns \u00b6 U64 val","title":"class XorOshiro128Plus"},{"location":"random-XorOshiro128Plus/#xoroshiro128plus","text":"[Source] This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. class ref XorOshiro128Plus is Random ref","title":"XorOshiro128Plus"},{"location":"random-XorOshiro128Plus/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorOshiro128Plus/#constructors","text":"","title":"Constructors"},{"location":"random-XorOshiro128Plus/#from_u64","text":"[Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128Plus ref^","title":"from_u64"},{"location":"random-XorOshiro128Plus/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns","text":"XorOshiro128Plus ref^","title":"Returns"},{"location":"random-XorOshiro128Plus/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128Plus ref^","title":"create"},{"location":"random-XorOshiro128Plus/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_1","text":"XorOshiro128Plus ref^","title":"Returns"},{"location":"random-XorOshiro128Plus/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorOshiro128Plus/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-XorOshiro128Plus/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorOshiro128Plus/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorOshiro128Plus/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorOshiro128Plus/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorOshiro128Plus/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorOshiro128Plus/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorOshiro128Plus/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorOshiro128Plus/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-XorOshiro128Plus/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorOshiro128Plus/#returns_10","text":"USize val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorOshiro128Plus/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorOshiro128Plus/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorOshiro128Plus/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorOshiro128Plus/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorOshiro128Plus/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorOshiro128Plus/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-XorOshiro128Plus/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorOshiro128Plus/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-XorOshiro128Plus/#int_fp_mult91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_18","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_19","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#int_unbiased91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128Plus/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_20","text":"N","title":"Returns"},{"location":"random-XorOshiro128Plus/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorOshiro128Plus/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-XorOshiro128Plus/#shuffle91a-a93","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorOshiro128Plus/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_22","text":"None val","title":"Returns"},{"location":"random-XorOshiro128Plus/#private-functions","text":"","title":"Private Functions"},{"location":"random-XorOshiro128Plus/#_u64_unbiased","text":"fun ref _u64_unbiased( range: U64 val) : U64 val","title":"_u64_unbiased"},{"location":"random-XorOshiro128Plus/#parameters_6","text":"range: U64 val","title":"Parameters"},{"location":"random-XorOshiro128Plus/#returns_23","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/","text":"XorOshiro128StarStar \u00b6 [Source] This is an implementation of xoroshiro128**, as detailed at: http://xoshiro.di.unimi.it/ This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests). class ref XorOshiro128StarStar is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128StarStar ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 XorOshiro128StarStar ref^ create \u00b6 [Source] new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128StarStar ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 XorOshiro128StarStar ref^ Public Functions \u00b6 next \u00b6 [Source] fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val Private Functions \u00b6 _u64_unbiased \u00b6 fun ref _u64_unbiased( range: U64 val) : U64 val Parameters \u00b6 range: U64 val Returns \u00b6 U64 val","title":"class XorOshiro128StarStar"},{"location":"random-XorOshiro128StarStar/#xoroshiro128starstar","text":"[Source] This is an implementation of xoroshiro128**, as detailed at: http://xoshiro.di.unimi.it/ This Rand implementation is slightly slower than XorOshiro128Plus but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests). class ref XorOshiro128StarStar is Random ref","title":"XorOshiro128StarStar"},{"location":"random-XorOshiro128StarStar/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorOshiro128StarStar/#constructors","text":"","title":"Constructors"},{"location":"random-XorOshiro128StarStar/#from_u64","text":"[Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorOshiro128StarStar ref^","title":"from_u64"},{"location":"random-XorOshiro128StarStar/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns","text":"XorOshiro128StarStar ref^","title":"Returns"},{"location":"random-XorOshiro128StarStar/#create","text":"[Source] new ref create( x: U64 val = 5489, y: U64 val = 0) : XorOshiro128StarStar ref^","title":"create"},{"location":"random-XorOshiro128StarStar/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_1","text":"XorOshiro128StarStar ref^","title":"Returns"},{"location":"random-XorOshiro128StarStar/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorOshiro128StarStar/#next","text":"[Source] fun ref next() : U64 val","title":"next"},{"location":"random-XorOshiro128StarStar/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorOshiro128StarStar/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorOshiro128StarStar/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorOshiro128StarStar/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorOshiro128StarStar/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorOshiro128StarStar/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorOshiro128StarStar/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorOshiro128StarStar/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorOshiro128StarStar/#returns_10","text":"USize val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorOshiro128StarStar/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorOshiro128StarStar/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorOshiro128StarStar/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorOshiro128StarStar/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorOshiro128StarStar/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorOshiro128StarStar/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorOshiro128StarStar/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#int_fp_mult91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128StarStar/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_18","text":"N","title":"Returns"},{"location":"random-XorOshiro128StarStar/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128StarStar/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_19","text":"N","title":"Returns"},{"location":"random-XorOshiro128StarStar/#int_unbiased91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorOshiro128StarStar/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_20","text":"N","title":"Returns"},{"location":"random-XorOshiro128StarStar/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorOshiro128StarStar/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#shuffle91a-a93","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorOshiro128StarStar/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_22","text":"None val","title":"Returns"},{"location":"random-XorOshiro128StarStar/#private-functions","text":"","title":"Private Functions"},{"location":"random-XorOshiro128StarStar/#_u64_unbiased","text":"fun ref _u64_unbiased( range: U64 val) : U64 val","title":"_u64_unbiased"},{"location":"random-XorOshiro128StarStar/#parameters_6","text":"range: U64 val","title":"Parameters"},{"location":"random-XorOshiro128StarStar/#returns_23","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/","text":"XorShift128Plus \u00b6 [Source] This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. class ref XorShift128Plus is Random ref Implements \u00b6 Random ref Constructors \u00b6 from_u64 \u00b6 [Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorShift128Plus ref^ Parameters \u00b6 x: U64 val = 5489 Returns \u00b6 XorShift128Plus ref^ create \u00b6 [Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorShift128Plus ref^ Parameters \u00b6 x: U64 val = 5489 y: U64 val = 0 Returns \u00b6 XorShift128Plus ref^ Public Functions \u00b6 next \u00b6 [Source] A random integer in [0, 2^64) fun ref next() : U64 val Returns \u00b6 U64 val has_next \u00b6 fun tag has_next() : Bool val Returns \u00b6 Bool val u8 \u00b6 fun ref u8() : U8 val Returns \u00b6 U8 val u16 \u00b6 fun ref u16() : U16 val Returns \u00b6 U16 val u32 \u00b6 fun ref u32() : U32 val Returns \u00b6 U32 val u64 \u00b6 fun ref u64() : U64 val Returns \u00b6 U64 val u128 \u00b6 fun ref u128() : U128 val Returns \u00b6 U128 val ulong \u00b6 fun ref ulong() : ULong val Returns \u00b6 ULong val usize \u00b6 fun ref usize() : USize val Returns \u00b6 USize val i8 \u00b6 fun ref i8() : I8 val Returns \u00b6 I8 val i16 \u00b6 fun ref i16() : I16 val Returns \u00b6 I16 val i32 \u00b6 fun ref i32() : I32 val Returns \u00b6 I32 val i64 \u00b6 fun ref i64() : I64 val Returns \u00b6 I64 val i128 \u00b6 fun ref i128() : I128 val Returns \u00b6 I128 val ilong \u00b6 fun ref ilong() : ILong val Returns \u00b6 ILong val isize \u00b6 fun ref isize() : ISize val Returns \u00b6 ISize val int_fp_mult[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N int_unbiased[optional N: (( U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real [N] val)] \u00b6 fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N Parameters \u00b6 n: N Returns \u00b6 N real \u00b6 fun ref real() : F64 val Returns \u00b6 F64 val shuffle[A: A] \u00b6 fun ref shuffle[A: A]( array: Array[A] ref) : None val Parameters \u00b6 array: Array [A] ref Returns \u00b6 None val Private Functions \u00b6 _u64_unbiased \u00b6 fun ref _u64_unbiased( range: U64 val) : U64 val Parameters \u00b6 range: U64 val Returns \u00b6 U64 val","title":"class XorShift128Plus"},{"location":"random-XorShift128Plus/#xorshift128plus","text":"[Source] This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. class ref XorShift128Plus is Random ref","title":"XorShift128Plus"},{"location":"random-XorShift128Plus/#implements","text":"Random ref","title":"Implements"},{"location":"random-XorShift128Plus/#constructors","text":"","title":"Constructors"},{"location":"random-XorShift128Plus/#from_u64","text":"[Source] Use seed x to seed a SplitMix64 and use this to initialize the 128 bits of state. new ref from_u64( x: U64 val = 5489) : XorShift128Plus ref^","title":"from_u64"},{"location":"random-XorShift128Plus/#parameters","text":"x: U64 val = 5489","title":"Parameters"},{"location":"random-XorShift128Plus/#returns","text":"XorShift128Plus ref^","title":"Returns"},{"location":"random-XorShift128Plus/#create","text":"[Source] Create with the specified seed. Returned values are deterministic for a given seed. new ref create( x: U64 val = 5489, y: U64 val = 0) : XorShift128Plus ref^","title":"create"},{"location":"random-XorShift128Plus/#parameters_1","text":"x: U64 val = 5489 y: U64 val = 0","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_1","text":"XorShift128Plus ref^","title":"Returns"},{"location":"random-XorShift128Plus/#public-functions","text":"","title":"Public Functions"},{"location":"random-XorShift128Plus/#next","text":"[Source] A random integer in [0, 2^64) fun ref next() : U64 val","title":"next"},{"location":"random-XorShift128Plus/#returns_2","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/#has_next","text":"fun tag has_next() : Bool val","title":"has_next"},{"location":"random-XorShift128Plus/#returns_3","text":"Bool val","title":"Returns"},{"location":"random-XorShift128Plus/#u8","text":"fun ref u8() : U8 val","title":"u8"},{"location":"random-XorShift128Plus/#returns_4","text":"U8 val","title":"Returns"},{"location":"random-XorShift128Plus/#u16","text":"fun ref u16() : U16 val","title":"u16"},{"location":"random-XorShift128Plus/#returns_5","text":"U16 val","title":"Returns"},{"location":"random-XorShift128Plus/#u32","text":"fun ref u32() : U32 val","title":"u32"},{"location":"random-XorShift128Plus/#returns_6","text":"U32 val","title":"Returns"},{"location":"random-XorShift128Plus/#u64","text":"fun ref u64() : U64 val","title":"u64"},{"location":"random-XorShift128Plus/#returns_7","text":"U64 val","title":"Returns"},{"location":"random-XorShift128Plus/#u128","text":"fun ref u128() : U128 val","title":"u128"},{"location":"random-XorShift128Plus/#returns_8","text":"U128 val","title":"Returns"},{"location":"random-XorShift128Plus/#ulong","text":"fun ref ulong() : ULong val","title":"ulong"},{"location":"random-XorShift128Plus/#returns_9","text":"ULong val","title":"Returns"},{"location":"random-XorShift128Plus/#usize","text":"fun ref usize() : USize val","title":"usize"},{"location":"random-XorShift128Plus/#returns_10","text":"USize val","title":"Returns"},{"location":"random-XorShift128Plus/#i8","text":"fun ref i8() : I8 val","title":"i8"},{"location":"random-XorShift128Plus/#returns_11","text":"I8 val","title":"Returns"},{"location":"random-XorShift128Plus/#i16","text":"fun ref i16() : I16 val","title":"i16"},{"location":"random-XorShift128Plus/#returns_12","text":"I16 val","title":"Returns"},{"location":"random-XorShift128Plus/#i32","text":"fun ref i32() : I32 val","title":"i32"},{"location":"random-XorShift128Plus/#returns_13","text":"I32 val","title":"Returns"},{"location":"random-XorShift128Plus/#i64","text":"fun ref i64() : I64 val","title":"i64"},{"location":"random-XorShift128Plus/#returns_14","text":"I64 val","title":"Returns"},{"location":"random-XorShift128Plus/#i128","text":"fun ref i128() : I128 val","title":"i128"},{"location":"random-XorShift128Plus/#returns_15","text":"I128 val","title":"Returns"},{"location":"random-XorShift128Plus/#ilong","text":"fun ref ilong() : ILong val","title":"ilong"},{"location":"random-XorShift128Plus/#returns_16","text":"ILong val","title":"Returns"},{"location":"random-XorShift128Plus/#isize","text":"fun ref isize() : ISize val","title":"isize"},{"location":"random-XorShift128Plus/#returns_17","text":"ISize val","title":"Returns"},{"location":"random-XorShift128Plus/#int_fp_mult91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_fp_mult[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_2","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_18","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_3","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_19","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#int_unbiased91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93","text":"fun ref int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) & Real[N] val)]( n: N) : N","title":"int_unbiased[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"},{"location":"random-XorShift128Plus/#parameters_4","text":"n: N","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_20","text":"N","title":"Returns"},{"location":"random-XorShift128Plus/#real","text":"fun ref real() : F64 val","title":"real"},{"location":"random-XorShift128Plus/#returns_21","text":"F64 val","title":"Returns"},{"location":"random-XorShift128Plus/#shuffle91a-a93","text":"fun ref shuffle[A: A]( array: Array[A] ref) : None val","title":"shuffle[A: A]"},{"location":"random-XorShift128Plus/#parameters_5","text":"array: Array [A] ref","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_22","text":"None val","title":"Returns"},{"location":"random-XorShift128Plus/#private-functions","text":"","title":"Private Functions"},{"location":"random-XorShift128Plus/#_u64_unbiased","text":"fun ref _u64_unbiased( range: U64 val) : U64 val","title":"_u64_unbiased"},{"location":"random-XorShift128Plus/#parameters_6","text":"range: U64 val","title":"Parameters"},{"location":"random-XorShift128Plus/#returns_23","text":"U64 val","title":"Returns"},{"location":"serialise--index/","text":"Serialise package \u00b6 This package provides support for serialising and deserialising arbitrary data structures. The API is designed to require capability tokens, as otherwise serialising would leak the bit patterns of all private information in a type (since the resulting Array[U8] could be examined. Deserialisation is fundamentally unsafe currently: there isn't yet a verification pass to check that the resulting object graph maintains a well-formed heap or that individual objects maintain any expected local invariants. However, if only \"trusted\" data (i.e. data produced by Pony serialisation from the same binary) is deserialised, it will always maintain a well-formed heap and all object invariants. Note that serialised data is not usable between different Pony binaries. This is due to the use of type identifiers rather than a heavy-weight self-describing serialisation schema. This also means it isn't safe to deserialise something serialised by the same program compiled for a different platform. The Serialise.signature method is provided for the purposes of comparing communicating Pony binaries to determine if they are the same. Confirming this before deserialising data can help mitigate the risk of accidental serialisation across different Pony binaries, but does not on its own address the security issues of accepting data from untrusted sources. Public Types \u00b6 primitive Serialise primitive SerialiseAuth primitive DeserialiseAuth primitive OutputSerialisedAuth primitive InputSerialisedAuth class Serialised Private Types \u00b6 class _MachineWords class _StructWords class _Simple actor _EmptyActor class _HasActor class _BoxedWord","title":"Package"},{"location":"serialise--index/#serialise-package","text":"This package provides support for serialising and deserialising arbitrary data structures. The API is designed to require capability tokens, as otherwise serialising would leak the bit patterns of all private information in a type (since the resulting Array[U8] could be examined. Deserialisation is fundamentally unsafe currently: there isn't yet a verification pass to check that the resulting object graph maintains a well-formed heap or that individual objects maintain any expected local invariants. However, if only \"trusted\" data (i.e. data produced by Pony serialisation from the same binary) is deserialised, it will always maintain a well-formed heap and all object invariants. Note that serialised data is not usable between different Pony binaries. This is due to the use of type identifiers rather than a heavy-weight self-describing serialisation schema. This also means it isn't safe to deserialise something serialised by the same program compiled for a different platform. The Serialise.signature method is provided for the purposes of comparing communicating Pony binaries to determine if they are the same. Confirming this before deserialising data can help mitigate the risk of accidental serialisation across different Pony binaries, but does not on its own address the security issues of accepting data from untrusted sources.","title":"Serialise package"},{"location":"serialise--index/#public-types","text":"primitive Serialise primitive SerialiseAuth primitive DeserialiseAuth primitive OutputSerialisedAuth primitive InputSerialisedAuth class Serialised","title":"Public Types"},{"location":"serialise--index/#private-types","text":"class _MachineWords class _StructWords class _Simple actor _EmptyActor class _HasActor class _BoxedWord","title":"Private Types"},{"location":"serialise-DeserialiseAuth/","text":"DeserialiseAuth \u00b6 [Source] This is a capability token that allows the holder to deserialise objects. It does not allow the holder to serialise objects or examine serialised. primitive val DeserialiseAuth Constructors \u00b6 create \u00b6 [Source] new val create( auth: AmbientAuth val) : DeserialiseAuth val^ Parameters \u00b6 auth: AmbientAuth val Returns \u00b6 DeserialiseAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: DeserialiseAuth val) : Bool val Parameters \u00b6 that: DeserialiseAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: DeserialiseAuth val) : Bool val Parameters \u00b6 that: DeserialiseAuth val Returns \u00b6 Bool val","title":"primitive DeserialiseAuth"},{"location":"serialise-DeserialiseAuth/#deserialiseauth","text":"[Source] This is a capability token that allows the holder to deserialise objects. It does not allow the holder to serialise objects or examine serialised. primitive val DeserialiseAuth","title":"DeserialiseAuth"},{"location":"serialise-DeserialiseAuth/#constructors","text":"","title":"Constructors"},{"location":"serialise-DeserialiseAuth/#create","text":"[Source] new val create( auth: AmbientAuth val) : DeserialiseAuth val^","title":"create"},{"location":"serialise-DeserialiseAuth/#parameters","text":"auth: AmbientAuth val","title":"Parameters"},{"location":"serialise-DeserialiseAuth/#returns","text":"DeserialiseAuth val^","title":"Returns"},{"location":"serialise-DeserialiseAuth/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-DeserialiseAuth/#eq","text":"[Source] fun box eq( that: DeserialiseAuth val) : Bool val","title":"eq"},{"location":"serialise-DeserialiseAuth/#parameters_1","text":"that: DeserialiseAuth val","title":"Parameters"},{"location":"serialise-DeserialiseAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"serialise-DeserialiseAuth/#ne","text":"[Source] fun box ne( that: DeserialiseAuth val) : Bool val","title":"ne"},{"location":"serialise-DeserialiseAuth/#parameters_2","text":"that: DeserialiseAuth val","title":"Parameters"},{"location":"serialise-DeserialiseAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"serialise-InputSerialisedAuth/","text":"InputSerialisedAuth \u00b6 [Source] This is a capability token that allows the holder to treat data arbitrary bytes as serialised data. This is the most dangerous capability, as currently it is possible for a malformed chunk of data to crash your program if it is deserialised. primitive val InputSerialisedAuth Constructors \u00b6 create \u00b6 [Source] new val create( auth: AmbientAuth val) : InputSerialisedAuth val^ Parameters \u00b6 auth: AmbientAuth val Returns \u00b6 InputSerialisedAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: InputSerialisedAuth val) : Bool val Parameters \u00b6 that: InputSerialisedAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: InputSerialisedAuth val) : Bool val Parameters \u00b6 that: InputSerialisedAuth val Returns \u00b6 Bool val","title":"primitive InputSerialisedAuth"},{"location":"serialise-InputSerialisedAuth/#inputserialisedauth","text":"[Source] This is a capability token that allows the holder to treat data arbitrary bytes as serialised data. This is the most dangerous capability, as currently it is possible for a malformed chunk of data to crash your program if it is deserialised. primitive val InputSerialisedAuth","title":"InputSerialisedAuth"},{"location":"serialise-InputSerialisedAuth/#constructors","text":"","title":"Constructors"},{"location":"serialise-InputSerialisedAuth/#create","text":"[Source] new val create( auth: AmbientAuth val) : InputSerialisedAuth val^","title":"create"},{"location":"serialise-InputSerialisedAuth/#parameters","text":"auth: AmbientAuth val","title":"Parameters"},{"location":"serialise-InputSerialisedAuth/#returns","text":"InputSerialisedAuth val^","title":"Returns"},{"location":"serialise-InputSerialisedAuth/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-InputSerialisedAuth/#eq","text":"[Source] fun box eq( that: InputSerialisedAuth val) : Bool val","title":"eq"},{"location":"serialise-InputSerialisedAuth/#parameters_1","text":"that: InputSerialisedAuth val","title":"Parameters"},{"location":"serialise-InputSerialisedAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"serialise-InputSerialisedAuth/#ne","text":"[Source] fun box ne( that: InputSerialisedAuth val) : Bool val","title":"ne"},{"location":"serialise-InputSerialisedAuth/#parameters_2","text":"that: InputSerialisedAuth val","title":"Parameters"},{"location":"serialise-InputSerialisedAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"serialise-OutputSerialisedAuth/","text":"OutputSerialisedAuth \u00b6 [Source] This is a capability token that allows the holder to examine serialised data. This should only be provided to types that need to write serialised data to some output stream, such as a file or socket. A type with the SerialiseAuth capability should usually not also have OutputSerialisedAuth, as the combination gives the holder the ability to examine the bitwise contents of any object it has a reference to. primitive val OutputSerialisedAuth Constructors \u00b6 create \u00b6 [Source] new val create( auth: AmbientAuth val) : OutputSerialisedAuth val^ Parameters \u00b6 auth: AmbientAuth val Returns \u00b6 OutputSerialisedAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: OutputSerialisedAuth val) : Bool val Parameters \u00b6 that: OutputSerialisedAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: OutputSerialisedAuth val) : Bool val Parameters \u00b6 that: OutputSerialisedAuth val Returns \u00b6 Bool val","title":"primitive OutputSerialisedAuth"},{"location":"serialise-OutputSerialisedAuth/#outputserialisedauth","text":"[Source] This is a capability token that allows the holder to examine serialised data. This should only be provided to types that need to write serialised data to some output stream, such as a file or socket. A type with the SerialiseAuth capability should usually not also have OutputSerialisedAuth, as the combination gives the holder the ability to examine the bitwise contents of any object it has a reference to. primitive val OutputSerialisedAuth","title":"OutputSerialisedAuth"},{"location":"serialise-OutputSerialisedAuth/#constructors","text":"","title":"Constructors"},{"location":"serialise-OutputSerialisedAuth/#create","text":"[Source] new val create( auth: AmbientAuth val) : OutputSerialisedAuth val^","title":"create"},{"location":"serialise-OutputSerialisedAuth/#parameters","text":"auth: AmbientAuth val","title":"Parameters"},{"location":"serialise-OutputSerialisedAuth/#returns","text":"OutputSerialisedAuth val^","title":"Returns"},{"location":"serialise-OutputSerialisedAuth/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-OutputSerialisedAuth/#eq","text":"[Source] fun box eq( that: OutputSerialisedAuth val) : Bool val","title":"eq"},{"location":"serialise-OutputSerialisedAuth/#parameters_1","text":"that: OutputSerialisedAuth val","title":"Parameters"},{"location":"serialise-OutputSerialisedAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"serialise-OutputSerialisedAuth/#ne","text":"[Source] fun box ne( that: OutputSerialisedAuth val) : Bool val","title":"ne"},{"location":"serialise-OutputSerialisedAuth/#parameters_2","text":"that: OutputSerialisedAuth val","title":"Parameters"},{"location":"serialise-OutputSerialisedAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"serialise-Serialise/","text":"Serialise \u00b6 [Source] primitive val Serialise Constructors \u00b6 create \u00b6 [Source] new val create() : Serialise val^ Returns \u00b6 Serialise val^ Public Functions \u00b6 signature \u00b6 [Source] Returns a byte array that is unique to this compiled Pony binary, for the purposes of comparing before deserialising any data from that source. It is statistically impossible for two serialisation-incompatible Pony binaries to have the same serialise signature. fun box signature() : Array[U8 val] val Returns \u00b6 Array [ U8 val] val eq \u00b6 [Source] fun box eq( that: Serialise val) : Bool val Parameters \u00b6 that: Serialise val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Serialise val) : Bool val Parameters \u00b6 that: Serialise val Returns \u00b6 Bool val","title":"primitive Serialise"},{"location":"serialise-Serialise/#serialise","text":"[Source] primitive val Serialise","title":"Serialise"},{"location":"serialise-Serialise/#constructors","text":"","title":"Constructors"},{"location":"serialise-Serialise/#create","text":"[Source] new val create() : Serialise val^","title":"create"},{"location":"serialise-Serialise/#returns","text":"Serialise val^","title":"Returns"},{"location":"serialise-Serialise/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-Serialise/#signature","text":"[Source] Returns a byte array that is unique to this compiled Pony binary, for the purposes of comparing before deserialising any data from that source. It is statistically impossible for two serialisation-incompatible Pony binaries to have the same serialise signature. fun box signature() : Array[U8 val] val","title":"signature"},{"location":"serialise-Serialise/#returns_1","text":"Array [ U8 val] val","title":"Returns"},{"location":"serialise-Serialise/#eq","text":"[Source] fun box eq( that: Serialise val) : Bool val","title":"eq"},{"location":"serialise-Serialise/#parameters","text":"that: Serialise val","title":"Parameters"},{"location":"serialise-Serialise/#returns_2","text":"Bool val","title":"Returns"},{"location":"serialise-Serialise/#ne","text":"[Source] fun box ne( that: Serialise val) : Bool val","title":"ne"},{"location":"serialise-Serialise/#parameters_1","text":"that: Serialise val","title":"Parameters"},{"location":"serialise-Serialise/#returns_3","text":"Bool val","title":"Returns"},{"location":"serialise-SerialiseAuth/","text":"SerialiseAuth \u00b6 [Source] This is a capability that allows the holder to serialise objects. It does not allow the holder to examine serialised data or to deserialise objects. primitive val SerialiseAuth Constructors \u00b6 create \u00b6 [Source] new val create( auth: AmbientAuth val) : SerialiseAuth val^ Parameters \u00b6 auth: AmbientAuth val Returns \u00b6 SerialiseAuth val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: SerialiseAuth val) : Bool val Parameters \u00b6 that: SerialiseAuth val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SerialiseAuth val) : Bool val Parameters \u00b6 that: SerialiseAuth val Returns \u00b6 Bool val","title":"primitive SerialiseAuth"},{"location":"serialise-SerialiseAuth/#serialiseauth","text":"[Source] This is a capability that allows the holder to serialise objects. It does not allow the holder to examine serialised data or to deserialise objects. primitive val SerialiseAuth","title":"SerialiseAuth"},{"location":"serialise-SerialiseAuth/#constructors","text":"","title":"Constructors"},{"location":"serialise-SerialiseAuth/#create","text":"[Source] new val create( auth: AmbientAuth val) : SerialiseAuth val^","title":"create"},{"location":"serialise-SerialiseAuth/#parameters","text":"auth: AmbientAuth val","title":"Parameters"},{"location":"serialise-SerialiseAuth/#returns","text":"SerialiseAuth val^","title":"Returns"},{"location":"serialise-SerialiseAuth/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-SerialiseAuth/#eq","text":"[Source] fun box eq( that: SerialiseAuth val) : Bool val","title":"eq"},{"location":"serialise-SerialiseAuth/#parameters_1","text":"that: SerialiseAuth val","title":"Parameters"},{"location":"serialise-SerialiseAuth/#returns_1","text":"Bool val","title":"Returns"},{"location":"serialise-SerialiseAuth/#ne","text":"[Source] fun box ne( that: SerialiseAuth val) : Bool val","title":"ne"},{"location":"serialise-SerialiseAuth/#parameters_2","text":"that: SerialiseAuth val","title":"Parameters"},{"location":"serialise-SerialiseAuth/#returns_2","text":"Bool val","title":"Returns"},{"location":"serialise-Serialised/","text":"Serialised \u00b6 [Source] This represents serialised data. How it can be used depends on the other capabilities a caller holds. class val Serialised Constructors \u00b6 create \u00b6 [Source] A caller with SerialiseAuth can create serialised data from any object. new ref create( auth: SerialiseAuth val, data: Any box) : Serialised ref^ ? Parameters \u00b6 auth: SerialiseAuth val data: Any box Returns \u00b6 Serialised ref^ ? input \u00b6 [Source] A caller with InputSerialisedAuth can create serialised data from any arbitrary set of bytes. It is the caller's responsibility to ensure that the data is in fact well-formed serialised data. This is currently the most dangerous method, as there is currently no way to check validity at runtime. new ref input( auth: InputSerialisedAuth val, data: Array[U8 val] val) : Serialised ref^ Parameters \u00b6 auth: InputSerialisedAuth val data: Array [ U8 val] val Returns \u00b6 Serialised ref^ Public Functions \u00b6 apply \u00b6 [Source] A caller with DeserialiseAuth can create an object graph from serialised data. fun box apply( auth: DeserialiseAuth val) : Any iso^ ? Parameters \u00b6 auth: DeserialiseAuth val Returns \u00b6 Any iso^ ? output \u00b6 [Source] A caller with OutputSerialisedAuth can gain access to the underlying bytes that contain the serialised data. This can be used to write those bytes to, for example, a file or socket. fun box output( auth: OutputSerialisedAuth val) : Array[U8 val] val Parameters \u00b6 auth: OutputSerialisedAuth val Returns \u00b6 Array [ U8 val] val","title":"class Serialised"},{"location":"serialise-Serialised/#serialised","text":"[Source] This represents serialised data. How it can be used depends on the other capabilities a caller holds. class val Serialised","title":"Serialised"},{"location":"serialise-Serialised/#constructors","text":"","title":"Constructors"},{"location":"serialise-Serialised/#create","text":"[Source] A caller with SerialiseAuth can create serialised data from any object. new ref create( auth: SerialiseAuth val, data: Any box) : Serialised ref^ ?","title":"create"},{"location":"serialise-Serialised/#parameters","text":"auth: SerialiseAuth val data: Any box","title":"Parameters"},{"location":"serialise-Serialised/#returns","text":"Serialised ref^ ?","title":"Returns"},{"location":"serialise-Serialised/#input","text":"[Source] A caller with InputSerialisedAuth can create serialised data from any arbitrary set of bytes. It is the caller's responsibility to ensure that the data is in fact well-formed serialised data. This is currently the most dangerous method, as there is currently no way to check validity at runtime. new ref input( auth: InputSerialisedAuth val, data: Array[U8 val] val) : Serialised ref^","title":"input"},{"location":"serialise-Serialised/#parameters_1","text":"auth: InputSerialisedAuth val data: Array [ U8 val] val","title":"Parameters"},{"location":"serialise-Serialised/#returns_1","text":"Serialised ref^","title":"Returns"},{"location":"serialise-Serialised/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-Serialised/#apply","text":"[Source] A caller with DeserialiseAuth can create an object graph from serialised data. fun box apply( auth: DeserialiseAuth val) : Any iso^ ?","title":"apply"},{"location":"serialise-Serialised/#parameters_2","text":"auth: DeserialiseAuth val","title":"Parameters"},{"location":"serialise-Serialised/#returns_2","text":"Any iso^ ?","title":"Returns"},{"location":"serialise-Serialised/#output","text":"[Source] A caller with OutputSerialisedAuth can gain access to the underlying bytes that contain the serialised data. This can be used to write those bytes to, for example, a file or socket. fun box output( auth: OutputSerialisedAuth val) : Array[U8 val] val","title":"output"},{"location":"serialise-Serialised/#parameters_3","text":"auth: OutputSerialisedAuth val","title":"Parameters"},{"location":"serialise-Serialised/#returns_3","text":"Array [ U8 val] val","title":"Returns"},{"location":"serialise-_BoxedWord/","text":"_BoxedWord \u00b6 [Source] class ref _BoxedWord Constructors \u00b6 create \u00b6 [Source] new iso create() : _BoxedWord iso^ Returns \u00b6 _BoxedWord iso^ Public fields \u00b6 var f: Any val \u00b6 [Source]","title":"class _BoxedWord"},{"location":"serialise-_BoxedWord/#_boxedword","text":"[Source] class ref _BoxedWord","title":"_BoxedWord"},{"location":"serialise-_BoxedWord/#constructors","text":"","title":"Constructors"},{"location":"serialise-_BoxedWord/#create","text":"[Source] new iso create() : _BoxedWord iso^","title":"create"},{"location":"serialise-_BoxedWord/#returns","text":"_BoxedWord iso^","title":"Returns"},{"location":"serialise-_BoxedWord/#public-fields","text":"","title":"Public fields"},{"location":"serialise-_BoxedWord/#var-f-any-val","text":"[Source]","title":"var f: Any val"},{"location":"serialise-_EmptyActor/","text":"_EmptyActor \u00b6 [Source] actor tag _EmptyActor Constructors \u00b6 create \u00b6 [Source] new tag create() : _EmptyActor tag^ Returns \u00b6 _EmptyActor tag^","title":"actor _EmptyActor"},{"location":"serialise-_EmptyActor/#_emptyactor","text":"[Source] actor tag _EmptyActor","title":"_EmptyActor"},{"location":"serialise-_EmptyActor/#constructors","text":"","title":"Constructors"},{"location":"serialise-_EmptyActor/#create","text":"[Source] new tag create() : _EmptyActor tag^","title":"create"},{"location":"serialise-_EmptyActor/#returns","text":"_EmptyActor tag^","title":"Returns"},{"location":"serialise-_HasActor/","text":"_HasActor \u00b6 [Source] class ref _HasActor Constructors \u00b6 create \u00b6 [Source] new iso create() : _HasActor iso^ Returns \u00b6 _HasActor iso^ Public fields \u00b6 var x: _EmptyActor tag \u00b6 [Source]","title":"class _HasActor"},{"location":"serialise-_HasActor/#_hasactor","text":"[Source] class ref _HasActor","title":"_HasActor"},{"location":"serialise-_HasActor/#constructors","text":"","title":"Constructors"},{"location":"serialise-_HasActor/#create","text":"[Source] new iso create() : _HasActor iso^","title":"create"},{"location":"serialise-_HasActor/#returns","text":"_HasActor iso^","title":"Returns"},{"location":"serialise-_HasActor/#public-fields","text":"","title":"Public fields"},{"location":"serialise-_HasActor/#var-x-_emptyactor-tag","text":"[Source]","title":"var x: _EmptyActor tag"},{"location":"serialise-_MachineWords/","text":"_MachineWords \u00b6 [Source] class ref _MachineWords Constructors \u00b6 create \u00b6 [Source] new iso create() : _MachineWords iso^ Returns \u00b6 _MachineWords iso^ Public fields \u00b6 var bool1: Bool val \u00b6 [Source] var bool2: Bool val \u00b6 [Source] var i8: I8 val \u00b6 [Source] var i16: I16 val \u00b6 [Source] var i32: I32 val \u00b6 [Source] var i64: I64 val \u00b6 [Source] var i128: I128 val \u00b6 [Source] var ilong: ILong val \u00b6 [Source] var isize: ISize val \u00b6 [Source] var f32: F32 val \u00b6 [Source] var f64: F64 val \u00b6 [Source] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _MachineWords box) : Bool val Parameters \u00b6 that: _MachineWords box Returns \u00b6 Bool val","title":"class _MachineWords"},{"location":"serialise-_MachineWords/#_machinewords","text":"[Source] class ref _MachineWords","title":"_MachineWords"},{"location":"serialise-_MachineWords/#constructors","text":"","title":"Constructors"},{"location":"serialise-_MachineWords/#create","text":"[Source] new iso create() : _MachineWords iso^","title":"create"},{"location":"serialise-_MachineWords/#returns","text":"_MachineWords iso^","title":"Returns"},{"location":"serialise-_MachineWords/#public-fields","text":"","title":"Public fields"},{"location":"serialise-_MachineWords/#var-bool1-bool-val","text":"[Source]","title":"var bool1: Bool val"},{"location":"serialise-_MachineWords/#var-bool2-bool-val","text":"[Source]","title":"var bool2: Bool val"},{"location":"serialise-_MachineWords/#var-i8-i8-val","text":"[Source]","title":"var i8: I8 val"},{"location":"serialise-_MachineWords/#var-i16-i16-val","text":"[Source]","title":"var i16: I16 val"},{"location":"serialise-_MachineWords/#var-i32-i32-val","text":"[Source]","title":"var i32: I32 val"},{"location":"serialise-_MachineWords/#var-i64-i64-val","text":"[Source]","title":"var i64: I64 val"},{"location":"serialise-_MachineWords/#var-i128-i128-val","text":"[Source]","title":"var i128: I128 val"},{"location":"serialise-_MachineWords/#var-ilong-ilong-val","text":"[Source]","title":"var ilong: ILong val"},{"location":"serialise-_MachineWords/#var-isize-isize-val","text":"[Source]","title":"var isize: ISize val"},{"location":"serialise-_MachineWords/#var-f32-f32-val","text":"[Source]","title":"var f32: F32 val"},{"location":"serialise-_MachineWords/#var-f64-f64-val","text":"[Source]","title":"var f64: F64 val"},{"location":"serialise-_MachineWords/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-_MachineWords/#eq","text":"[Source] fun box eq( that: _MachineWords box) : Bool val","title":"eq"},{"location":"serialise-_MachineWords/#parameters","text":"that: _MachineWords box","title":"Parameters"},{"location":"serialise-_MachineWords/#returns_1","text":"Bool val","title":"Returns"},{"location":"serialise-_Simple/","text":"_Simple \u00b6 [Source] class ref _Simple Constructors \u00b6 create \u00b6 [Source] new iso create() : _Simple iso^ Returns \u00b6 _Simple iso^ Public fields \u00b6 var words1: _MachineWords ref \u00b6 [Source] embed words2: _MachineWords ref \u00b6 [Source] var words3: _StructWords ref \u00b6 [Source] embed words4: _StructWords ref \u00b6 [Source] var words5: ( Any ref | None val) \u00b6 [Source] var words6: ( Any ref | None val) \u00b6 [Source] var string: String val \u00b6 [Source] var none: None val \u00b6 [Source] var tuple: ( U64 val , String val) \u00b6 [Source] var tuple2: (( U64 val , String val) | None val) \u00b6 [Source] var a_tag: _MachineWords tag \u00b6 [Source] var a_ref: _MachineWords ref \u00b6 [Source] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _Simple ref) : Bool val Parameters \u00b6 that: _Simple ref Returns \u00b6 Bool val","title":"class _Simple"},{"location":"serialise-_Simple/#_simple","text":"[Source] class ref _Simple","title":"_Simple"},{"location":"serialise-_Simple/#constructors","text":"","title":"Constructors"},{"location":"serialise-_Simple/#create","text":"[Source] new iso create() : _Simple iso^","title":"create"},{"location":"serialise-_Simple/#returns","text":"_Simple iso^","title":"Returns"},{"location":"serialise-_Simple/#public-fields","text":"","title":"Public fields"},{"location":"serialise-_Simple/#var-words1-_machinewords-ref","text":"[Source]","title":"var words1: _MachineWords ref"},{"location":"serialise-_Simple/#embed-words2-_machinewords-ref","text":"[Source]","title":"embed words2: _MachineWords ref"},{"location":"serialise-_Simple/#var-words3-_structwords-ref","text":"[Source]","title":"var words3: _StructWords ref"},{"location":"serialise-_Simple/#embed-words4-_structwords-ref","text":"[Source]","title":"embed words4: _StructWords ref"},{"location":"serialise-_Simple/#var-words5-any-ref-none-val","text":"[Source]","title":"var words5: (Any ref | None val)"},{"location":"serialise-_Simple/#var-words6-any-ref-none-val","text":"[Source]","title":"var words6: (Any ref | None val)"},{"location":"serialise-_Simple/#var-string-string-val","text":"[Source]","title":"var string: String val"},{"location":"serialise-_Simple/#var-none-none-val","text":"[Source]","title":"var none: None val"},{"location":"serialise-_Simple/#var-tuple-u64-val-string-val","text":"[Source]","title":"var tuple: (U64 val , String val)"},{"location":"serialise-_Simple/#var-tuple2-u64-val-string-val-none-val","text":"[Source]","title":"var tuple2: ((U64 val , String val) | None val)"},{"location":"serialise-_Simple/#var-a_tag-_machinewords-tag","text":"[Source]","title":"var a_tag: _MachineWords tag"},{"location":"serialise-_Simple/#var-a_ref-_machinewords-ref","text":"[Source]","title":"var a_ref: _MachineWords ref"},{"location":"serialise-_Simple/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-_Simple/#eq","text":"[Source] fun box eq( that: _Simple ref) : Bool val","title":"eq"},{"location":"serialise-_Simple/#parameters","text":"that: _Simple ref","title":"Parameters"},{"location":"serialise-_Simple/#returns_1","text":"Bool val","title":"Returns"},{"location":"serialise-_StructWords/","text":"_StructWords \u00b6 [Source] class ref _StructWords Constructors \u00b6 create \u00b6 [Source] new iso create() : _StructWords iso^ Returns \u00b6 _StructWords iso^ Public fields \u00b6 var u8: U8 val \u00b6 [Source] var u16: U16 val \u00b6 [Source] var u32: U32 val \u00b6 [Source] var u64: U64 val \u00b6 [Source] var u128: U128 val \u00b6 [Source] var ulong: ULong val \u00b6 [Source] var usize: USize val \u00b6 [Source] Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _StructWords box) : Bool val Parameters \u00b6 that: _StructWords box Returns \u00b6 Bool val","title":"class _StructWords"},{"location":"serialise-_StructWords/#_structwords","text":"[Source] class ref _StructWords","title":"_StructWords"},{"location":"serialise-_StructWords/#constructors","text":"","title":"Constructors"},{"location":"serialise-_StructWords/#create","text":"[Source] new iso create() : _StructWords iso^","title":"create"},{"location":"serialise-_StructWords/#returns","text":"_StructWords iso^","title":"Returns"},{"location":"serialise-_StructWords/#public-fields","text":"","title":"Public fields"},{"location":"serialise-_StructWords/#var-u8-u8-val","text":"[Source]","title":"var u8: U8 val"},{"location":"serialise-_StructWords/#var-u16-u16-val","text":"[Source]","title":"var u16: U16 val"},{"location":"serialise-_StructWords/#var-u32-u32-val","text":"[Source]","title":"var u32: U32 val"},{"location":"serialise-_StructWords/#var-u64-u64-val","text":"[Source]","title":"var u64: U64 val"},{"location":"serialise-_StructWords/#var-u128-u128-val","text":"[Source]","title":"var u128: U128 val"},{"location":"serialise-_StructWords/#var-ulong-ulong-val","text":"[Source]","title":"var ulong: ULong val"},{"location":"serialise-_StructWords/#var-usize-usize-val","text":"[Source]","title":"var usize: USize val"},{"location":"serialise-_StructWords/#public-functions","text":"","title":"Public Functions"},{"location":"serialise-_StructWords/#eq","text":"[Source] fun box eq( that: _StructWords box) : Bool val","title":"eq"},{"location":"serialise-_StructWords/#parameters","text":"that: _StructWords box","title":"Parameters"},{"location":"serialise-_StructWords/#returns_1","text":"Bool val","title":"Returns"},{"location":"signals--index/","text":"Signals package \u00b6 The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a SignalHandler and a corresponding SignalNotify object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding SignalNotify 's apply method. Example program \u00b6 The following program will listen for the TERM signal and output a message to standard out if it is received. use \"signals\" actor Main new create(env: Env) => // Create a TERM handler let signal = SignalHandler(TermHandler(env), Sig.term()) // Raise TERM signal signal.raise() class TermHandler is SignalNotify let _env: Env new iso create(env: Env) => _env = env fun ref apply(count: U32): Bool => _env.out.print(\"TERM signal received\") true Signal portability \u00b6 The Sig primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error. Shutting down handlers \u00b6 Unlike a TCPConnection and other forms of input receiving, creating a SignalHandler will not keep your program running. As such, you are not required to call dispose on your signal handlers in order to shutdown your program. Public Types \u00b6 interface SignalNotify primitive SignalRaise actor SignalHandler primitive Sig","title":"Package"},{"location":"signals--index/#signals-package","text":"The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a SignalHandler and a corresponding SignalNotify object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding SignalNotify 's apply method.","title":"Signals package"},{"location":"signals--index/#example-program","text":"The following program will listen for the TERM signal and output a message to standard out if it is received. use \"signals\" actor Main new create(env: Env) => // Create a TERM handler let signal = SignalHandler(TermHandler(env), Sig.term()) // Raise TERM signal signal.raise() class TermHandler is SignalNotify let _env: Env new iso create(env: Env) => _env = env fun ref apply(count: U32): Bool => _env.out.print(\"TERM signal received\") true","title":"Example program"},{"location":"signals--index/#signal-portability","text":"The Sig primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error.","title":"Signal portability"},{"location":"signals--index/#shutting-down-handlers","text":"Unlike a TCPConnection and other forms of input receiving, creating a SignalHandler will not keep your program running. As such, you are not required to call dispose on your signal handlers in order to shutdown your program.","title":"Shutting down handlers"},{"location":"signals--index/#public-types","text":"interface SignalNotify primitive SignalRaise actor SignalHandler primitive Sig","title":"Public Types"},{"location":"signals-Sig/","text":"Sig \u00b6 [Source] Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable. primitive val Sig Constructors \u00b6 create \u00b6 [Source] new val create() : Sig val^ Returns \u00b6 Sig val^ Public Functions \u00b6 hup \u00b6 [Source] fun box hup() : U32 val Returns \u00b6 U32 val int \u00b6 [Source] fun box int() : U32 val Returns \u00b6 U32 val quit \u00b6 [Source] fun box quit() : U32 val Returns \u00b6 U32 val ill \u00b6 [Source] fun box ill() : U32 val Returns \u00b6 U32 val trap \u00b6 [Source] fun box trap() : U32 val Returns \u00b6 U32 val abrt \u00b6 [Source] fun box abrt() : U32 val Returns \u00b6 U32 val emt \u00b6 [Source] fun box emt() : U32 val Returns \u00b6 U32 val fpe \u00b6 [Source] fun box fpe() : U32 val Returns \u00b6 U32 val kill \u00b6 [Source] fun box kill() : U32 val Returns \u00b6 U32 val bus \u00b6 [Source] fun box bus() : U32 val Returns \u00b6 U32 val segv \u00b6 [Source] fun box segv() : U32 val Returns \u00b6 U32 val sys \u00b6 [Source] fun box sys() : U32 val Returns \u00b6 U32 val pipe \u00b6 [Source] fun box pipe() : U32 val Returns \u00b6 U32 val alrm \u00b6 [Source] fun box alrm() : U32 val Returns \u00b6 U32 val term \u00b6 [Source] fun box term() : U32 val Returns \u00b6 U32 val urg \u00b6 [Source] fun box urg() : U32 val Returns \u00b6 U32 val stkflt \u00b6 [Source] fun box stkflt() : U32 val Returns \u00b6 U32 val stop \u00b6 [Source] fun box stop() : U32 val Returns \u00b6 U32 val tstp \u00b6 [Source] fun box tstp() : U32 val Returns \u00b6 U32 val cont \u00b6 [Source] fun box cont() : U32 val Returns \u00b6 U32 val chld \u00b6 [Source] fun box chld() : U32 val Returns \u00b6 U32 val ttin \u00b6 [Source] fun box ttin() : U32 val Returns \u00b6 U32 val ttou \u00b6 [Source] fun box ttou() : U32 val Returns \u00b6 U32 val io \u00b6 [Source] fun box io() : U32 val Returns \u00b6 U32 val xcpu \u00b6 [Source] fun box xcpu() : U32 val Returns \u00b6 U32 val xfsz \u00b6 [Source] fun box xfsz() : U32 val Returns \u00b6 U32 val vtalrm \u00b6 [Source] fun box vtalrm() : U32 val Returns \u00b6 U32 val prof \u00b6 [Source] fun box prof() : U32 val Returns \u00b6 U32 val winch \u00b6 [Source] fun box winch() : U32 val Returns \u00b6 U32 val info \u00b6 [Source] fun box info() : U32 val Returns \u00b6 U32 val pwr \u00b6 [Source] fun box pwr() : U32 val Returns \u00b6 U32 val usr1 \u00b6 [Source] fun box usr1() : U32 val Returns \u00b6 U32 val usr2 \u00b6 [Source] fun box usr2() : U32 val Returns \u00b6 U32 val rt \u00b6 [Source] fun box rt( n: U32 val) : U32 val ? Parameters \u00b6 n: U32 val Returns \u00b6 U32 val ? eq \u00b6 [Source] fun box eq( that: Sig val) : Bool val Parameters \u00b6 that: Sig val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Sig val) : Bool val Parameters \u00b6 that: Sig val Returns \u00b6 Bool val","title":"primitive Sig"},{"location":"signals-Sig/#sig","text":"[Source] Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable. primitive val Sig","title":"Sig"},{"location":"signals-Sig/#constructors","text":"","title":"Constructors"},{"location":"signals-Sig/#create","text":"[Source] new val create() : Sig val^","title":"create"},{"location":"signals-Sig/#returns","text":"Sig val^","title":"Returns"},{"location":"signals-Sig/#public-functions","text":"","title":"Public Functions"},{"location":"signals-Sig/#hup","text":"[Source] fun box hup() : U32 val","title":"hup"},{"location":"signals-Sig/#returns_1","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#int","text":"[Source] fun box int() : U32 val","title":"int"},{"location":"signals-Sig/#returns_2","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#quit","text":"[Source] fun box quit() : U32 val","title":"quit"},{"location":"signals-Sig/#returns_3","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#ill","text":"[Source] fun box ill() : U32 val","title":"ill"},{"location":"signals-Sig/#returns_4","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#trap","text":"[Source] fun box trap() : U32 val","title":"trap"},{"location":"signals-Sig/#returns_5","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#abrt","text":"[Source] fun box abrt() : U32 val","title":"abrt"},{"location":"signals-Sig/#returns_6","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#emt","text":"[Source] fun box emt() : U32 val","title":"emt"},{"location":"signals-Sig/#returns_7","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#fpe","text":"[Source] fun box fpe() : U32 val","title":"fpe"},{"location":"signals-Sig/#returns_8","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#kill","text":"[Source] fun box kill() : U32 val","title":"kill"},{"location":"signals-Sig/#returns_9","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#bus","text":"[Source] fun box bus() : U32 val","title":"bus"},{"location":"signals-Sig/#returns_10","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#segv","text":"[Source] fun box segv() : U32 val","title":"segv"},{"location":"signals-Sig/#returns_11","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#sys","text":"[Source] fun box sys() : U32 val","title":"sys"},{"location":"signals-Sig/#returns_12","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#pipe","text":"[Source] fun box pipe() : U32 val","title":"pipe"},{"location":"signals-Sig/#returns_13","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#alrm","text":"[Source] fun box alrm() : U32 val","title":"alrm"},{"location":"signals-Sig/#returns_14","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#term","text":"[Source] fun box term() : U32 val","title":"term"},{"location":"signals-Sig/#returns_15","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#urg","text":"[Source] fun box urg() : U32 val","title":"urg"},{"location":"signals-Sig/#returns_16","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#stkflt","text":"[Source] fun box stkflt() : U32 val","title":"stkflt"},{"location":"signals-Sig/#returns_17","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#stop","text":"[Source] fun box stop() : U32 val","title":"stop"},{"location":"signals-Sig/#returns_18","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#tstp","text":"[Source] fun box tstp() : U32 val","title":"tstp"},{"location":"signals-Sig/#returns_19","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#cont","text":"[Source] fun box cont() : U32 val","title":"cont"},{"location":"signals-Sig/#returns_20","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#chld","text":"[Source] fun box chld() : U32 val","title":"chld"},{"location":"signals-Sig/#returns_21","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#ttin","text":"[Source] fun box ttin() : U32 val","title":"ttin"},{"location":"signals-Sig/#returns_22","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#ttou","text":"[Source] fun box ttou() : U32 val","title":"ttou"},{"location":"signals-Sig/#returns_23","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#io","text":"[Source] fun box io() : U32 val","title":"io"},{"location":"signals-Sig/#returns_24","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#xcpu","text":"[Source] fun box xcpu() : U32 val","title":"xcpu"},{"location":"signals-Sig/#returns_25","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#xfsz","text":"[Source] fun box xfsz() : U32 val","title":"xfsz"},{"location":"signals-Sig/#returns_26","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#vtalrm","text":"[Source] fun box vtalrm() : U32 val","title":"vtalrm"},{"location":"signals-Sig/#returns_27","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#prof","text":"[Source] fun box prof() : U32 val","title":"prof"},{"location":"signals-Sig/#returns_28","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#winch","text":"[Source] fun box winch() : U32 val","title":"winch"},{"location":"signals-Sig/#returns_29","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#info","text":"[Source] fun box info() : U32 val","title":"info"},{"location":"signals-Sig/#returns_30","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#pwr","text":"[Source] fun box pwr() : U32 val","title":"pwr"},{"location":"signals-Sig/#returns_31","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#usr1","text":"[Source] fun box usr1() : U32 val","title":"usr1"},{"location":"signals-Sig/#returns_32","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#usr2","text":"[Source] fun box usr2() : U32 val","title":"usr2"},{"location":"signals-Sig/#returns_33","text":"U32 val","title":"Returns"},{"location":"signals-Sig/#rt","text":"[Source] fun box rt( n: U32 val) : U32 val ?","title":"rt"},{"location":"signals-Sig/#parameters","text":"n: U32 val","title":"Parameters"},{"location":"signals-Sig/#returns_34","text":"U32 val ?","title":"Returns"},{"location":"signals-Sig/#eq","text":"[Source] fun box eq( that: Sig val) : Bool val","title":"eq"},{"location":"signals-Sig/#parameters_1","text":"that: Sig val","title":"Parameters"},{"location":"signals-Sig/#returns_35","text":"Bool val","title":"Returns"},{"location":"signals-Sig/#ne","text":"[Source] fun box ne( that: Sig val) : Bool val","title":"ne"},{"location":"signals-Sig/#parameters_2","text":"that: Sig val","title":"Parameters"},{"location":"signals-Sig/#returns_36","text":"Bool val","title":"Returns"},{"location":"signals-SignalHandler/","text":"SignalHandler \u00b6 [Source] Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it. actor tag SignalHandler Constructors \u00b6 create \u00b6 [Source] Create a signal handler. new tag create( notify: SignalNotify iso, sig: U32 val, wait: Bool val = false) : SignalHandler tag^ Parameters \u00b6 notify: SignalNotify iso sig: U32 val wait: Bool val = false Returns \u00b6 SignalHandler tag^ Public Behaviours \u00b6 raise \u00b6 [Source] Raise the signal. be raise() dispose \u00b6 [Source] Dispose of the signal handler. be dispose() Private Behaviours \u00b6 _event_notify \u00b6 [Source] Called when the signal is received, or when the AsioEventID can be destroyed. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val Private Functions \u00b6 _dispose \u00b6 [Source] Dispose of the AsioEventID. fun ref _dispose() : None val Returns \u00b6 None val","title":"actor SignalHandler"},{"location":"signals-SignalHandler/#signalhandler","text":"[Source] Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it. actor tag SignalHandler","title":"SignalHandler"},{"location":"signals-SignalHandler/#constructors","text":"","title":"Constructors"},{"location":"signals-SignalHandler/#create","text":"[Source] Create a signal handler. new tag create( notify: SignalNotify iso, sig: U32 val, wait: Bool val = false) : SignalHandler tag^","title":"create"},{"location":"signals-SignalHandler/#parameters","text":"notify: SignalNotify iso sig: U32 val wait: Bool val = false","title":"Parameters"},{"location":"signals-SignalHandler/#returns","text":"SignalHandler tag^","title":"Returns"},{"location":"signals-SignalHandler/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"signals-SignalHandler/#raise","text":"[Source] Raise the signal. be raise()","title":"raise"},{"location":"signals-SignalHandler/#dispose","text":"[Source] Dispose of the signal handler. be dispose()","title":"dispose"},{"location":"signals-SignalHandler/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"signals-SignalHandler/#_event_notify","text":"[Source] Called when the signal is received, or when the AsioEventID can be destroyed. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"signals-SignalHandler/#parameters_1","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"signals-SignalHandler/#private-functions","text":"","title":"Private Functions"},{"location":"signals-SignalHandler/#_dispose","text":"[Source] Dispose of the AsioEventID. fun ref _dispose() : None val","title":"_dispose"},{"location":"signals-SignalHandler/#returns_1","text":"None val","title":"Returns"},{"location":"signals-SignalNotify/","text":"SignalNotify \u00b6 [Source] Notifications for a signal. interface ref SignalNotify Public Functions \u00b6 apply \u00b6 [Source] Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal. fun ref apply( count: U32 val) : Bool val Parameters \u00b6 count: U32 val Returns \u00b6 Bool val dispose \u00b6 [Source] Called if the signal is disposed. This is also called if the notifier returns false. fun ref dispose() : None val Returns \u00b6 None val","title":"interface SignalNotify"},{"location":"signals-SignalNotify/#signalnotify","text":"[Source] Notifications for a signal. interface ref SignalNotify","title":"SignalNotify"},{"location":"signals-SignalNotify/#public-functions","text":"","title":"Public Functions"},{"location":"signals-SignalNotify/#apply","text":"[Source] Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal. fun ref apply( count: U32 val) : Bool val","title":"apply"},{"location":"signals-SignalNotify/#parameters","text":"count: U32 val","title":"Parameters"},{"location":"signals-SignalNotify/#returns","text":"Bool val","title":"Returns"},{"location":"signals-SignalNotify/#dispose","text":"[Source] Called if the signal is disposed. This is also called if the notifier returns false. fun ref dispose() : None val","title":"dispose"},{"location":"signals-SignalNotify/#returns_1","text":"None val","title":"Returns"},{"location":"signals-SignalRaise/","text":"SignalRaise \u00b6 [Source] Raise a signal. primitive val SignalRaise Constructors \u00b6 create \u00b6 [Source] new val create() : SignalRaise val^ Returns \u00b6 SignalRaise val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( sig: U32 val) : None val Parameters \u00b6 sig: U32 val Returns \u00b6 None val eq \u00b6 [Source] fun box eq( that: SignalRaise val) : Bool val Parameters \u00b6 that: SignalRaise val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: SignalRaise val) : Bool val Parameters \u00b6 that: SignalRaise val Returns \u00b6 Bool val","title":"primitive SignalRaise"},{"location":"signals-SignalRaise/#signalraise","text":"[Source] Raise a signal. primitive val SignalRaise","title":"SignalRaise"},{"location":"signals-SignalRaise/#constructors","text":"","title":"Constructors"},{"location":"signals-SignalRaise/#create","text":"[Source] new val create() : SignalRaise val^","title":"create"},{"location":"signals-SignalRaise/#returns","text":"SignalRaise val^","title":"Returns"},{"location":"signals-SignalRaise/#public-functions","text":"","title":"Public Functions"},{"location":"signals-SignalRaise/#apply","text":"[Source] fun box apply( sig: U32 val) : None val","title":"apply"},{"location":"signals-SignalRaise/#parameters","text":"sig: U32 val","title":"Parameters"},{"location":"signals-SignalRaise/#returns_1","text":"None val","title":"Returns"},{"location":"signals-SignalRaise/#eq","text":"[Source] fun box eq( that: SignalRaise val) : Bool val","title":"eq"},{"location":"signals-SignalRaise/#parameters_1","text":"that: SignalRaise val","title":"Parameters"},{"location":"signals-SignalRaise/#returns_2","text":"Bool val","title":"Returns"},{"location":"signals-SignalRaise/#ne","text":"[Source] fun box ne( that: SignalRaise val) : Bool val","title":"ne"},{"location":"signals-SignalRaise/#parameters_2","text":"that: SignalRaise val","title":"Parameters"},{"location":"signals-SignalRaise/#returns_3","text":"Bool val","title":"Returns"},{"location":"stdlib--index/","text":"Pony Standard Library \u00b6 This package represents the test suite for the Pony standard library. For every new package, please add a Main actor and tests to the package in a file called 'test.pony'. Then add a corresponding use directive and a line to the main actor constructor of this package to invoke those tests. All tests can be run by compiling and running packages/stdlib.","title":"Package"},{"location":"stdlib--index/#pony-standard-library","text":"This package represents the test suite for the Pony standard library. For every new package, please add a Main actor and tests to the package in a file called 'test.pony'. Then add a corresponding use directive and a line to the main actor constructor of this package to invoke those tests. All tests can be run by compiling and running packages/stdlib.","title":"Pony Standard Library"},{"location":"strings--index/","text":"No package doc string provided for strings. Public Types \u00b6 primitive CommonPrefix","title":"Package"},{"location":"strings--index/#public-types","text":"primitive CommonPrefix","title":"Public Types"},{"location":"strings-CommonPrefix/","text":"CommonPrefix \u00b6 [Source] Creates a string that is the common prefix of the supplied strings, possibly empty. primitive val CommonPrefix Constructors \u00b6 create \u00b6 [Source] new val create() : CommonPrefix val^ Returns \u00b6 CommonPrefix val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( data: ReadSeq[Stringable box] box) : String iso^ Parameters \u00b6 data: ReadSeq [ Stringable box] box Returns \u00b6 String iso^ eq \u00b6 [Source] fun box eq( that: CommonPrefix val) : Bool val Parameters \u00b6 that: CommonPrefix val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: CommonPrefix val) : Bool val Parameters \u00b6 that: CommonPrefix val Returns \u00b6 Bool val","title":"primitive CommonPrefix"},{"location":"strings-CommonPrefix/#commonprefix","text":"[Source] Creates a string that is the common prefix of the supplied strings, possibly empty. primitive val CommonPrefix","title":"CommonPrefix"},{"location":"strings-CommonPrefix/#constructors","text":"","title":"Constructors"},{"location":"strings-CommonPrefix/#create","text":"[Source] new val create() : CommonPrefix val^","title":"create"},{"location":"strings-CommonPrefix/#returns","text":"CommonPrefix val^","title":"Returns"},{"location":"strings-CommonPrefix/#public-functions","text":"","title":"Public Functions"},{"location":"strings-CommonPrefix/#apply","text":"[Source] fun box apply( data: ReadSeq[Stringable box] box) : String iso^","title":"apply"},{"location":"strings-CommonPrefix/#parameters","text":"data: ReadSeq [ Stringable box] box","title":"Parameters"},{"location":"strings-CommonPrefix/#returns_1","text":"String iso^","title":"Returns"},{"location":"strings-CommonPrefix/#eq","text":"[Source] fun box eq( that: CommonPrefix val) : Bool val","title":"eq"},{"location":"strings-CommonPrefix/#parameters_1","text":"that: CommonPrefix val","title":"Parameters"},{"location":"strings-CommonPrefix/#returns_2","text":"Bool val","title":"Returns"},{"location":"strings-CommonPrefix/#ne","text":"[Source] fun box ne( that: CommonPrefix val) : Bool val","title":"ne"},{"location":"strings-CommonPrefix/#parameters_2","text":"that: CommonPrefix val","title":"Parameters"},{"location":"strings-CommonPrefix/#returns_3","text":"Bool val","title":"Returns"},{"location":"term--index/","text":"No package doc string provided for term. Public Types \u00b6 interface ReadlineNotify class Readline actor ANSITerm interface ANSINotify primitive ANSI Private Types \u00b6 struct _TermSize primitive _EscapeNone primitive _EscapeStart primitive _EscapeSS3 primitive _EscapeCSI primitive _EscapeMod type _EscapeState class _TermResizeNotify primitive _TIOCGWINSZ","title":"Package"},{"location":"term--index/#public-types","text":"interface ReadlineNotify class Readline actor ANSITerm interface ANSINotify primitive ANSI","title":"Public Types"},{"location":"term--index/#private-types","text":"struct _TermSize primitive _EscapeNone primitive _EscapeStart primitive _EscapeSS3 primitive _EscapeCSI primitive _EscapeMod type _EscapeState class _TermResizeNotify primitive _TIOCGWINSZ","title":"Private Types"},{"location":"term-ANSI/","text":"ANSI \u00b6 [Source] These strings can be embedded in text when writing to a StdStream to create a text-based UI. primitive val ANSI Constructors \u00b6 create \u00b6 [Source] new val create() : ANSI val^ Returns \u00b6 ANSI val^ Public Functions \u00b6 up \u00b6 [Source] Move the cursor up n lines. 0 is the same as 1. fun box up( n: U32 val = 0) : String val Parameters \u00b6 n: U32 val = 0 Returns \u00b6 String val down \u00b6 [Source] Move the cursor down n lines. 0 is the same as 1. fun box down( n: U32 val = 0) : String val Parameters \u00b6 n: U32 val = 0 Returns \u00b6 String val right \u00b6 [Source] Move the cursor right n columns. 0 is the same as 1. fun box right( n: U32 val = 0) : String val Parameters \u00b6 n: U32 val = 0 Returns \u00b6 String val left \u00b6 [Source] Move the cursor left n columns. 0 is the same as 1. fun box left( n: U32 val = 0) : String val Parameters \u00b6 n: U32 val = 0 Returns \u00b6 String val cursor \u00b6 [Source] Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen. fun box cursor( x: U32 val = 0, y: U32 val = 0) : String val Parameters \u00b6 x: U32 val = 0 y: U32 val = 0 Returns \u00b6 String val clear \u00b6 [Source] Clear the screen and move the cursor to the top left corner. fun box clear() : String val Returns \u00b6 String val erase \u00b6 [Source] Erases everything to the left of the cursor on the line the cursor is on. fun box erase() : String val Returns \u00b6 String val reset \u00b6 [Source] Resets all colours and text styles to the default. fun box reset() : String val Returns \u00b6 String val bold \u00b6 [Source] Bold text. Does nothing on Windows. fun box bold( state: Bool val = true) : String val Parameters \u00b6 state: Bool val = true Returns \u00b6 String val underline \u00b6 [Source] Underlined text. Does nothing on Windows. fun box underline( state: Bool val = true) : String val Parameters \u00b6 state: Bool val = true Returns \u00b6 String val blink \u00b6 [Source] Blinking text. Does nothing on Windows. fun box blink( state: Bool val = true) : String val Parameters \u00b6 state: Bool val = true Returns \u00b6 String val reverse \u00b6 [Source] Swap foreground and background colour. fun box reverse( state: Bool val = true) : String val Parameters \u00b6 state: Bool val = true Returns \u00b6 String val black \u00b6 [Source] Black text. fun box black() : String val Returns \u00b6 String val red \u00b6 [Source] Red text. fun box red() : String val Returns \u00b6 String val green \u00b6 [Source] Green text. fun box green() : String val Returns \u00b6 String val yellow \u00b6 [Source] Yellow text. fun box yellow() : String val Returns \u00b6 String val blue \u00b6 [Source] Blue text. fun box blue() : String val Returns \u00b6 String val magenta \u00b6 [Source] Magenta text. fun box magenta() : String val Returns \u00b6 String val cyan \u00b6 [Source] Cyan text. fun box cyan() : String val Returns \u00b6 String val grey \u00b6 [Source] Grey text. fun box grey() : String val Returns \u00b6 String val white \u00b6 [Source] White text. fun box white() : String val Returns \u00b6 String val bright_red \u00b6 [Source] Bright red text. fun box bright_red() : String val Returns \u00b6 String val bright_green \u00b6 [Source] Bright green text. fun box bright_green() : String val Returns \u00b6 String val bright_yellow \u00b6 [Source] Bright yellow text. fun box bright_yellow() : String val Returns \u00b6 String val bright_blue \u00b6 [Source] Bright blue text. fun box bright_blue() : String val Returns \u00b6 String val bright_magenta \u00b6 [Source] Bright magenta text. fun box bright_magenta() : String val Returns \u00b6 String val bright_cyan \u00b6 [Source] Bright cyan text. fun box bright_cyan() : String val Returns \u00b6 String val bright_grey \u00b6 [Source] Bright grey text. fun box bright_grey() : String val Returns \u00b6 String val black_bg \u00b6 [Source] Black background. fun box black_bg() : String val Returns \u00b6 String val red_bg \u00b6 [Source] Red background. fun box red_bg() : String val Returns \u00b6 String val green_bg \u00b6 [Source] Green background. fun box green_bg() : String val Returns \u00b6 String val yellow_bg \u00b6 [Source] Yellow background. fun box yellow_bg() : String val Returns \u00b6 String val blue_bg \u00b6 [Source] Blue background. fun box blue_bg() : String val Returns \u00b6 String val magenta_bg \u00b6 [Source] Magenta background. fun box magenta_bg() : String val Returns \u00b6 String val cyan_bg \u00b6 [Source] Cyan background. fun box cyan_bg() : String val Returns \u00b6 String val grey_bg \u00b6 [Source] Grey background. fun box grey_bg() : String val Returns \u00b6 String val white_bg \u00b6 [Source] White background. fun box white_bg() : String val Returns \u00b6 String val bright_red_bg \u00b6 [Source] Bright red background. fun box bright_red_bg() : String val Returns \u00b6 String val bright_green_bg \u00b6 [Source] Bright green background. fun box bright_green_bg() : String val Returns \u00b6 String val bright_yellow_bg \u00b6 [Source] Bright yellow background. fun box bright_yellow_bg() : String val Returns \u00b6 String val bright_blue_bg \u00b6 [Source] Bright blue background. fun box bright_blue_bg() : String val Returns \u00b6 String val bright_magenta_bg \u00b6 [Source] Bright magenta background. fun box bright_magenta_bg() : String val Returns \u00b6 String val bright_cyan_bg \u00b6 [Source] Bright cyan background. fun box bright_cyan_bg() : String val Returns \u00b6 String val bright_grey_bg \u00b6 [Source] Bright grey background. fun box bright_grey_bg() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: ANSI val) : Bool val Parameters \u00b6 that: ANSI val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: ANSI val) : Bool val Parameters \u00b6 that: ANSI val Returns \u00b6 Bool val","title":"primitive ANSI"},{"location":"term-ANSI/#ansi","text":"[Source] These strings can be embedded in text when writing to a StdStream to create a text-based UI. primitive val ANSI","title":"ANSI"},{"location":"term-ANSI/#constructors","text":"","title":"Constructors"},{"location":"term-ANSI/#create","text":"[Source] new val create() : ANSI val^","title":"create"},{"location":"term-ANSI/#returns","text":"ANSI val^","title":"Returns"},{"location":"term-ANSI/#public-functions","text":"","title":"Public Functions"},{"location":"term-ANSI/#up","text":"[Source] Move the cursor up n lines. 0 is the same as 1. fun box up( n: U32 val = 0) : String val","title":"up"},{"location":"term-ANSI/#parameters","text":"n: U32 val = 0","title":"Parameters"},{"location":"term-ANSI/#returns_1","text":"String val","title":"Returns"},{"location":"term-ANSI/#down","text":"[Source] Move the cursor down n lines. 0 is the same as 1. fun box down( n: U32 val = 0) : String val","title":"down"},{"location":"term-ANSI/#parameters_1","text":"n: U32 val = 0","title":"Parameters"},{"location":"term-ANSI/#returns_2","text":"String val","title":"Returns"},{"location":"term-ANSI/#right","text":"[Source] Move the cursor right n columns. 0 is the same as 1. fun box right( n: U32 val = 0) : String val","title":"right"},{"location":"term-ANSI/#parameters_2","text":"n: U32 val = 0","title":"Parameters"},{"location":"term-ANSI/#returns_3","text":"String val","title":"Returns"},{"location":"term-ANSI/#left","text":"[Source] Move the cursor left n columns. 0 is the same as 1. fun box left( n: U32 val = 0) : String val","title":"left"},{"location":"term-ANSI/#parameters_3","text":"n: U32 val = 0","title":"Parameters"},{"location":"term-ANSI/#returns_4","text":"String val","title":"Returns"},{"location":"term-ANSI/#cursor","text":"[Source] Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen. fun box cursor( x: U32 val = 0, y: U32 val = 0) : String val","title":"cursor"},{"location":"term-ANSI/#parameters_4","text":"x: U32 val = 0 y: U32 val = 0","title":"Parameters"},{"location":"term-ANSI/#returns_5","text":"String val","title":"Returns"},{"location":"term-ANSI/#clear","text":"[Source] Clear the screen and move the cursor to the top left corner. fun box clear() : String val","title":"clear"},{"location":"term-ANSI/#returns_6","text":"String val","title":"Returns"},{"location":"term-ANSI/#erase","text":"[Source] Erases everything to the left of the cursor on the line the cursor is on. fun box erase() : String val","title":"erase"},{"location":"term-ANSI/#returns_7","text":"String val","title":"Returns"},{"location":"term-ANSI/#reset","text":"[Source] Resets all colours and text styles to the default. fun box reset() : String val","title":"reset"},{"location":"term-ANSI/#returns_8","text":"String val","title":"Returns"},{"location":"term-ANSI/#bold","text":"[Source] Bold text. Does nothing on Windows. fun box bold( state: Bool val = true) : String val","title":"bold"},{"location":"term-ANSI/#parameters_5","text":"state: Bool val = true","title":"Parameters"},{"location":"term-ANSI/#returns_9","text":"String val","title":"Returns"},{"location":"term-ANSI/#underline","text":"[Source] Underlined text. Does nothing on Windows. fun box underline( state: Bool val = true) : String val","title":"underline"},{"location":"term-ANSI/#parameters_6","text":"state: Bool val = true","title":"Parameters"},{"location":"term-ANSI/#returns_10","text":"String val","title":"Returns"},{"location":"term-ANSI/#blink","text":"[Source] Blinking text. Does nothing on Windows. fun box blink( state: Bool val = true) : String val","title":"blink"},{"location":"term-ANSI/#parameters_7","text":"state: Bool val = true","title":"Parameters"},{"location":"term-ANSI/#returns_11","text":"String val","title":"Returns"},{"location":"term-ANSI/#reverse","text":"[Source] Swap foreground and background colour. fun box reverse( state: Bool val = true) : String val","title":"reverse"},{"location":"term-ANSI/#parameters_8","text":"state: Bool val = true","title":"Parameters"},{"location":"term-ANSI/#returns_12","text":"String val","title":"Returns"},{"location":"term-ANSI/#black","text":"[Source] Black text. fun box black() : String val","title":"black"},{"location":"term-ANSI/#returns_13","text":"String val","title":"Returns"},{"location":"term-ANSI/#red","text":"[Source] Red text. fun box red() : String val","title":"red"},{"location":"term-ANSI/#returns_14","text":"String val","title":"Returns"},{"location":"term-ANSI/#green","text":"[Source] Green text. fun box green() : String val","title":"green"},{"location":"term-ANSI/#returns_15","text":"String val","title":"Returns"},{"location":"term-ANSI/#yellow","text":"[Source] Yellow text. fun box yellow() : String val","title":"yellow"},{"location":"term-ANSI/#returns_16","text":"String val","title":"Returns"},{"location":"term-ANSI/#blue","text":"[Source] Blue text. fun box blue() : String val","title":"blue"},{"location":"term-ANSI/#returns_17","text":"String val","title":"Returns"},{"location":"term-ANSI/#magenta","text":"[Source] Magenta text. fun box magenta() : String val","title":"magenta"},{"location":"term-ANSI/#returns_18","text":"String val","title":"Returns"},{"location":"term-ANSI/#cyan","text":"[Source] Cyan text. fun box cyan() : String val","title":"cyan"},{"location":"term-ANSI/#returns_19","text":"String val","title":"Returns"},{"location":"term-ANSI/#grey","text":"[Source] Grey text. fun box grey() : String val","title":"grey"},{"location":"term-ANSI/#returns_20","text":"String val","title":"Returns"},{"location":"term-ANSI/#white","text":"[Source] White text. fun box white() : String val","title":"white"},{"location":"term-ANSI/#returns_21","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_red","text":"[Source] Bright red text. fun box bright_red() : String val","title":"bright_red"},{"location":"term-ANSI/#returns_22","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_green","text":"[Source] Bright green text. fun box bright_green() : String val","title":"bright_green"},{"location":"term-ANSI/#returns_23","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_yellow","text":"[Source] Bright yellow text. fun box bright_yellow() : String val","title":"bright_yellow"},{"location":"term-ANSI/#returns_24","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_blue","text":"[Source] Bright blue text. fun box bright_blue() : String val","title":"bright_blue"},{"location":"term-ANSI/#returns_25","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_magenta","text":"[Source] Bright magenta text. fun box bright_magenta() : String val","title":"bright_magenta"},{"location":"term-ANSI/#returns_26","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_cyan","text":"[Source] Bright cyan text. fun box bright_cyan() : String val","title":"bright_cyan"},{"location":"term-ANSI/#returns_27","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_grey","text":"[Source] Bright grey text. fun box bright_grey() : String val","title":"bright_grey"},{"location":"term-ANSI/#returns_28","text":"String val","title":"Returns"},{"location":"term-ANSI/#black_bg","text":"[Source] Black background. fun box black_bg() : String val","title":"black_bg"},{"location":"term-ANSI/#returns_29","text":"String val","title":"Returns"},{"location":"term-ANSI/#red_bg","text":"[Source] Red background. fun box red_bg() : String val","title":"red_bg"},{"location":"term-ANSI/#returns_30","text":"String val","title":"Returns"},{"location":"term-ANSI/#green_bg","text":"[Source] Green background. fun box green_bg() : String val","title":"green_bg"},{"location":"term-ANSI/#returns_31","text":"String val","title":"Returns"},{"location":"term-ANSI/#yellow_bg","text":"[Source] Yellow background. fun box yellow_bg() : String val","title":"yellow_bg"},{"location":"term-ANSI/#returns_32","text":"String val","title":"Returns"},{"location":"term-ANSI/#blue_bg","text":"[Source] Blue background. fun box blue_bg() : String val","title":"blue_bg"},{"location":"term-ANSI/#returns_33","text":"String val","title":"Returns"},{"location":"term-ANSI/#magenta_bg","text":"[Source] Magenta background. fun box magenta_bg() : String val","title":"magenta_bg"},{"location":"term-ANSI/#returns_34","text":"String val","title":"Returns"},{"location":"term-ANSI/#cyan_bg","text":"[Source] Cyan background. fun box cyan_bg() : String val","title":"cyan_bg"},{"location":"term-ANSI/#returns_35","text":"String val","title":"Returns"},{"location":"term-ANSI/#grey_bg","text":"[Source] Grey background. fun box grey_bg() : String val","title":"grey_bg"},{"location":"term-ANSI/#returns_36","text":"String val","title":"Returns"},{"location":"term-ANSI/#white_bg","text":"[Source] White background. fun box white_bg() : String val","title":"white_bg"},{"location":"term-ANSI/#returns_37","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_red_bg","text":"[Source] Bright red background. fun box bright_red_bg() : String val","title":"bright_red_bg"},{"location":"term-ANSI/#returns_38","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_green_bg","text":"[Source] Bright green background. fun box bright_green_bg() : String val","title":"bright_green_bg"},{"location":"term-ANSI/#returns_39","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_yellow_bg","text":"[Source] Bright yellow background. fun box bright_yellow_bg() : String val","title":"bright_yellow_bg"},{"location":"term-ANSI/#returns_40","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_blue_bg","text":"[Source] Bright blue background. fun box bright_blue_bg() : String val","title":"bright_blue_bg"},{"location":"term-ANSI/#returns_41","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_magenta_bg","text":"[Source] Bright magenta background. fun box bright_magenta_bg() : String val","title":"bright_magenta_bg"},{"location":"term-ANSI/#returns_42","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_cyan_bg","text":"[Source] Bright cyan background. fun box bright_cyan_bg() : String val","title":"bright_cyan_bg"},{"location":"term-ANSI/#returns_43","text":"String val","title":"Returns"},{"location":"term-ANSI/#bright_grey_bg","text":"[Source] Bright grey background. fun box bright_grey_bg() : String val","title":"bright_grey_bg"},{"location":"term-ANSI/#returns_44","text":"String val","title":"Returns"},{"location":"term-ANSI/#eq","text":"[Source] fun box eq( that: ANSI val) : Bool val","title":"eq"},{"location":"term-ANSI/#parameters_9","text":"that: ANSI val","title":"Parameters"},{"location":"term-ANSI/#returns_45","text":"Bool val","title":"Returns"},{"location":"term-ANSI/#ne","text":"[Source] fun box ne( that: ANSI val) : Bool val","title":"ne"},{"location":"term-ANSI/#parameters_10","text":"that: ANSI val","title":"Parameters"},{"location":"term-ANSI/#returns_46","text":"Bool val","title":"Returns"},{"location":"term-ANSINotify/","text":"ANSINotify \u00b6 [Source] Receive input from an ANSITerm. interface ref ANSINotify Public Functions \u00b6 apply \u00b6 [Source] fun ref apply( term: ANSITerm ref, input: U8 val) : None val Parameters \u00b6 term: ANSITerm ref input: U8 val Returns \u00b6 None val up \u00b6 [Source] fun ref up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val down \u00b6 [Source] fun ref down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val left \u00b6 [Source] fun ref left( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val right \u00b6 [Source] fun ref right( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val delete \u00b6 [Source] fun ref delete( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val insert \u00b6 [Source] fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val home \u00b6 [Source] fun ref home( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val end_key \u00b6 [Source] fun ref end_key( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val page_up \u00b6 [Source] fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val page_down \u00b6 [Source] fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val fn_key \u00b6 [Source] fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 i: U8 val ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val prompt \u00b6 [Source] fun ref prompt( term: ANSITerm ref, value: String val) : None val Parameters \u00b6 term: ANSITerm ref value: String val Returns \u00b6 None val size \u00b6 [Source] fun ref size( rows: U16 val, cols: U16 val) : None val Parameters \u00b6 rows: U16 val cols: U16 val Returns \u00b6 None val closed \u00b6 [Source] fun ref closed() : None val Returns \u00b6 None val","title":"interface ANSINotify"},{"location":"term-ANSINotify/#ansinotify","text":"[Source] Receive input from an ANSITerm. interface ref ANSINotify","title":"ANSINotify"},{"location":"term-ANSINotify/#public-functions","text":"","title":"Public Functions"},{"location":"term-ANSINotify/#apply","text":"[Source] fun ref apply( term: ANSITerm ref, input: U8 val) : None val","title":"apply"},{"location":"term-ANSINotify/#parameters","text":"term: ANSITerm ref input: U8 val","title":"Parameters"},{"location":"term-ANSINotify/#returns","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#up","text":"[Source] fun ref up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"up"},{"location":"term-ANSINotify/#parameters_1","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_1","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#down","text":"[Source] fun ref down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"down"},{"location":"term-ANSINotify/#parameters_2","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_2","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#left","text":"[Source] fun ref left( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"left"},{"location":"term-ANSINotify/#parameters_3","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_3","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#right","text":"[Source] fun ref right( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"right"},{"location":"term-ANSINotify/#parameters_4","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_4","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#delete","text":"[Source] fun ref delete( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"delete"},{"location":"term-ANSINotify/#parameters_5","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_5","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#insert","text":"[Source] fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"insert"},{"location":"term-ANSINotify/#parameters_6","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_6","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#home","text":"[Source] fun ref home( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"home"},{"location":"term-ANSINotify/#parameters_7","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_7","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#end_key","text":"[Source] fun ref end_key( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"end_key"},{"location":"term-ANSINotify/#parameters_8","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_8","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#page_up","text":"[Source] fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_up"},{"location":"term-ANSINotify/#parameters_9","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_9","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#page_down","text":"[Source] fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_down"},{"location":"term-ANSINotify/#parameters_10","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_10","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#fn_key","text":"[Source] fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"fn_key"},{"location":"term-ANSINotify/#parameters_11","text":"i: U8 val ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-ANSINotify/#returns_11","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#prompt","text":"[Source] fun ref prompt( term: ANSITerm ref, value: String val) : None val","title":"prompt"},{"location":"term-ANSINotify/#parameters_12","text":"term: ANSITerm ref value: String val","title":"Parameters"},{"location":"term-ANSINotify/#returns_12","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#size","text":"[Source] fun ref size( rows: U16 val, cols: U16 val) : None val","title":"size"},{"location":"term-ANSINotify/#parameters_13","text":"rows: U16 val cols: U16 val","title":"Parameters"},{"location":"term-ANSINotify/#returns_13","text":"None val","title":"Returns"},{"location":"term-ANSINotify/#closed","text":"[Source] fun ref closed() : None val","title":"closed"},{"location":"term-ANSINotify/#returns_14","text":"None val","title":"Returns"},{"location":"term-ANSITerm/","text":"ANSITerm \u00b6 [Source] Handles ANSI escape codes from stdin. actor tag ANSITerm Constructors \u00b6 create \u00b6 [Source] Create a new ANSI term. new tag create( notify: ANSINotify iso, source: DisposableActor tag, timers: Timers tag = reference) : ANSITerm tag^ Parameters \u00b6 notify: ANSINotify iso source: DisposableActor tag timers: Timers tag = reference Returns \u00b6 ANSITerm tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Receives input from stdin. be apply( data: Array[U8 val] iso) Parameters \u00b6 data: Array [ U8 val] iso prompt \u00b6 [Source] Pass a prompt along to the notifier. be prompt( value: String val) Parameters \u00b6 value: String val size \u00b6 [Source] be size() dispose \u00b6 [Source] Stop accepting input, inform the notifier we have closed, and dispose of our source. be dispose() Private Behaviours \u00b6 _timeout \u00b6 [Source] Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence. be _timeout() Private Functions \u00b6 _size \u00b6 [Source] Pass the window size to the notifier. fun ref _size() : None val Returns \u00b6 None val _mod \u00b6 [Source] Set the modifier bools. fun ref _mod() : (Bool val , Bool val , Bool val) Returns \u00b6 ( Bool val , Bool val , Bool val) _keypad \u00b6 [Source] An extended key. fun ref _keypad() : None val Returns \u00b6 None val _up \u00b6 [Source] Up arrow. fun ref _up() : None val Returns \u00b6 None val _down \u00b6 [Source] Down arrow. fun ref _down() : None val Returns \u00b6 None val _left \u00b6 [Source] Left arrow. fun ref _left() : None val Returns \u00b6 None val _right \u00b6 [Source] Right arrow. fun ref _right() : None val Returns \u00b6 None val _delete \u00b6 [Source] Delete key. fun ref _delete() : None val Returns \u00b6 None val _insert \u00b6 [Source] Insert key. fun ref _insert() : None val Returns \u00b6 None val _home \u00b6 [Source] Home key. fun ref _home() : None val Returns \u00b6 None val _end \u00b6 [Source] End key. fun ref _end() : None val Returns \u00b6 None val _page_up \u00b6 [Source] Page up key. fun ref _page_up() : None val Returns \u00b6 None val _page_down \u00b6 [Source] Page down key. fun ref _page_down() : None val Returns \u00b6 None val _fn_key \u00b6 [Source] Function key. fun ref _fn_key( i: U8 val) : None val Parameters \u00b6 i: U8 val Returns \u00b6 None val _esc_flush \u00b6 [Source] Pass a partial or unrecognised escape sequence to the notifier. fun ref _esc_flush() : None val Returns \u00b6 None val _esc_clear \u00b6 [Source] Clear the escape state. fun ref _esc_clear() : None val Returns \u00b6 None val","title":"actor ANSITerm"},{"location":"term-ANSITerm/#ansiterm","text":"[Source] Handles ANSI escape codes from stdin. actor tag ANSITerm","title":"ANSITerm"},{"location":"term-ANSITerm/#constructors","text":"","title":"Constructors"},{"location":"term-ANSITerm/#create","text":"[Source] Create a new ANSI term. new tag create( notify: ANSINotify iso, source: DisposableActor tag, timers: Timers tag = reference) : ANSITerm tag^","title":"create"},{"location":"term-ANSITerm/#parameters","text":"notify: ANSINotify iso source: DisposableActor tag timers: Timers tag = reference","title":"Parameters"},{"location":"term-ANSITerm/#returns","text":"ANSITerm tag^","title":"Returns"},{"location":"term-ANSITerm/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"term-ANSITerm/#apply","text":"[Source] Receives input from stdin. be apply( data: Array[U8 val] iso)","title":"apply"},{"location":"term-ANSITerm/#parameters_1","text":"data: Array [ U8 val] iso","title":"Parameters"},{"location":"term-ANSITerm/#prompt","text":"[Source] Pass a prompt along to the notifier. be prompt( value: String val)","title":"prompt"},{"location":"term-ANSITerm/#parameters_2","text":"value: String val","title":"Parameters"},{"location":"term-ANSITerm/#size","text":"[Source] be size()","title":"size"},{"location":"term-ANSITerm/#dispose","text":"[Source] Stop accepting input, inform the notifier we have closed, and dispose of our source. be dispose()","title":"dispose"},{"location":"term-ANSITerm/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"term-ANSITerm/#_timeout","text":"[Source] Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence. be _timeout()","title":"_timeout"},{"location":"term-ANSITerm/#private-functions","text":"","title":"Private Functions"},{"location":"term-ANSITerm/#_size","text":"[Source] Pass the window size to the notifier. fun ref _size() : None val","title":"_size"},{"location":"term-ANSITerm/#returns_1","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_mod","text":"[Source] Set the modifier bools. fun ref _mod() : (Bool val , Bool val , Bool val)","title":"_mod"},{"location":"term-ANSITerm/#returns_2","text":"( Bool val , Bool val , Bool val)","title":"Returns"},{"location":"term-ANSITerm/#_keypad","text":"[Source] An extended key. fun ref _keypad() : None val","title":"_keypad"},{"location":"term-ANSITerm/#returns_3","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_up","text":"[Source] Up arrow. fun ref _up() : None val","title":"_up"},{"location":"term-ANSITerm/#returns_4","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_down","text":"[Source] Down arrow. fun ref _down() : None val","title":"_down"},{"location":"term-ANSITerm/#returns_5","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_left","text":"[Source] Left arrow. fun ref _left() : None val","title":"_left"},{"location":"term-ANSITerm/#returns_6","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_right","text":"[Source] Right arrow. fun ref _right() : None val","title":"_right"},{"location":"term-ANSITerm/#returns_7","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_delete","text":"[Source] Delete key. fun ref _delete() : None val","title":"_delete"},{"location":"term-ANSITerm/#returns_8","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_insert","text":"[Source] Insert key. fun ref _insert() : None val","title":"_insert"},{"location":"term-ANSITerm/#returns_9","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_home","text":"[Source] Home key. fun ref _home() : None val","title":"_home"},{"location":"term-ANSITerm/#returns_10","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_end","text":"[Source] End key. fun ref _end() : None val","title":"_end"},{"location":"term-ANSITerm/#returns_11","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_page_up","text":"[Source] Page up key. fun ref _page_up() : None val","title":"_page_up"},{"location":"term-ANSITerm/#returns_12","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_page_down","text":"[Source] Page down key. fun ref _page_down() : None val","title":"_page_down"},{"location":"term-ANSITerm/#returns_13","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_fn_key","text":"[Source] Function key. fun ref _fn_key( i: U8 val) : None val","title":"_fn_key"},{"location":"term-ANSITerm/#parameters_3","text":"i: U8 val","title":"Parameters"},{"location":"term-ANSITerm/#returns_14","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_esc_flush","text":"[Source] Pass a partial or unrecognised escape sequence to the notifier. fun ref _esc_flush() : None val","title":"_esc_flush"},{"location":"term-ANSITerm/#returns_15","text":"None val","title":"Returns"},{"location":"term-ANSITerm/#_esc_clear","text":"[Source] Clear the escape state. fun ref _esc_clear() : None val","title":"_esc_clear"},{"location":"term-ANSITerm/#returns_16","text":"None val","title":"Returns"},{"location":"term-Readline/","text":"Readline \u00b6 [Source] Line editing, history, and tab completion. class ref Readline is ANSINotify ref Implements \u00b6 ANSINotify ref Constructors \u00b6 create \u00b6 [Source] Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing. new iso create( notify: ReadlineNotify iso, out: OutStream tag, path: (FilePath val | None val) = reference, maxlen: USize val = 0) : Readline iso^ Parameters \u00b6 notify: ReadlineNotify iso out: OutStream tag path: ( FilePath val | None val) = reference maxlen: USize val = 0 Returns \u00b6 Readline iso^ Public Functions \u00b6 apply \u00b6 [Source] Receives input. fun ref apply( term: ANSITerm ref, input: U8 val) : None val Parameters \u00b6 term: ANSITerm ref input: U8 val Returns \u00b6 None val prompt \u00b6 [Source] Set a new prompt, unblock, and handle the pending queue. fun ref prompt( term: ANSITerm ref, value: String val) : None val Parameters \u00b6 term: ANSITerm ref value: String val Returns \u00b6 None val closed \u00b6 [Source] No more input is available. fun ref closed() : None val Returns \u00b6 None val up \u00b6 [Source] Previous line. fun ref up( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val down \u00b6 [Source] Next line. fun ref down( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val left \u00b6 [Source] Move left. fun ref left( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val right \u00b6 [Source] Move right. fun ref right( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val home \u00b6 [Source] Beginning of the line. fun ref home( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val end_key \u00b6 [Source] End of the line. fun ref end_key( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val delete \u00b6 [Source] Forward delete. fun ref delete( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val Parameters \u00b6 ctrl: Bool val = false alt: Bool val = false shift: Bool val = false Returns \u00b6 None val insert \u00b6 fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val page_up \u00b6 fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val page_down \u00b6 fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val fn_key \u00b6 fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val Parameters \u00b6 i: U8 val ctrl: Bool val alt: Bool val shift: Bool val Returns \u00b6 None val size \u00b6 fun ref size( rows: U16 val, cols: U16 val) : None val Parameters \u00b6 rows: U16 val cols: U16 val Returns \u00b6 None val Private Functions \u00b6 _backspace \u00b6 [Source] Backward delete. fun ref _backspace() : None val Returns \u00b6 None val _clear \u00b6 [Source] Clear the screen. fun ref _clear() : None val Returns \u00b6 None val _swap \u00b6 [Source] Swap the previous character with the current one. fun ref _swap() : None val Returns \u00b6 None val _delete_prev_word \u00b6 [Source] Delete the previous word. fun ref _delete_prev_word() : None val Returns \u00b6 None val _tab \u00b6 [Source] Tab completion. TODO: Improve this. fun ref _tab() : None val Returns \u00b6 None val _dispatch \u00b6 [Source] Send a finished line to the notifier. fun ref _dispatch( term: ANSITerm tag) : None val Parameters \u00b6 term: ANSITerm tag Returns \u00b6 None val _handle_line \u00b6 [Source] Dispatch a single line. fun ref _handle_line( term: ANSITerm tag, line: String val) : None val Parameters \u00b6 term: ANSITerm tag line: String val Returns \u00b6 None val _refresh_line \u00b6 [Source] Refresh the line on screen. fun ref _refresh_line() : None val Returns \u00b6 None val _add_history \u00b6 [Source] Add a line to the history, trimming an earlier line if necessary. fun ref _add_history( line: String val) : None val Parameters \u00b6 line: String val Returns \u00b6 None val _load_history \u00b6 [Source] Load the history from a file. fun ref _load_history() : None val Returns \u00b6 None val _save_history \u00b6 [Source] Write the history back to a file. fun box _save_history() : None val Returns \u00b6 None val","title":"class Readline"},{"location":"term-Readline/#readline","text":"[Source] Line editing, history, and tab completion. class ref Readline is ANSINotify ref","title":"Readline"},{"location":"term-Readline/#implements","text":"ANSINotify ref","title":"Implements"},{"location":"term-Readline/#constructors","text":"","title":"Constructors"},{"location":"term-Readline/#create","text":"[Source] Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing. new iso create( notify: ReadlineNotify iso, out: OutStream tag, path: (FilePath val | None val) = reference, maxlen: USize val = 0) : Readline iso^","title":"create"},{"location":"term-Readline/#parameters","text":"notify: ReadlineNotify iso out: OutStream tag path: ( FilePath val | None val) = reference maxlen: USize val = 0","title":"Parameters"},{"location":"term-Readline/#returns","text":"Readline iso^","title":"Returns"},{"location":"term-Readline/#public-functions","text":"","title":"Public Functions"},{"location":"term-Readline/#apply","text":"[Source] Receives input. fun ref apply( term: ANSITerm ref, input: U8 val) : None val","title":"apply"},{"location":"term-Readline/#parameters_1","text":"term: ANSITerm ref input: U8 val","title":"Parameters"},{"location":"term-Readline/#returns_1","text":"None val","title":"Returns"},{"location":"term-Readline/#prompt","text":"[Source] Set a new prompt, unblock, and handle the pending queue. fun ref prompt( term: ANSITerm ref, value: String val) : None val","title":"prompt"},{"location":"term-Readline/#parameters_2","text":"term: ANSITerm ref value: String val","title":"Parameters"},{"location":"term-Readline/#returns_2","text":"None val","title":"Returns"},{"location":"term-Readline/#closed","text":"[Source] No more input is available. fun ref closed() : None val","title":"closed"},{"location":"term-Readline/#returns_3","text":"None val","title":"Returns"},{"location":"term-Readline/#up","text":"[Source] Previous line. fun ref up( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"up"},{"location":"term-Readline/#parameters_3","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_4","text":"None val","title":"Returns"},{"location":"term-Readline/#down","text":"[Source] Next line. fun ref down( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"down"},{"location":"term-Readline/#parameters_4","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_5","text":"None val","title":"Returns"},{"location":"term-Readline/#left","text":"[Source] Move left. fun ref left( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"left"},{"location":"term-Readline/#parameters_5","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_6","text":"None val","title":"Returns"},{"location":"term-Readline/#right","text":"[Source] Move right. fun ref right( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"right"},{"location":"term-Readline/#parameters_6","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_7","text":"None val","title":"Returns"},{"location":"term-Readline/#home","text":"[Source] Beginning of the line. fun ref home( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"home"},{"location":"term-Readline/#parameters_7","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_8","text":"None val","title":"Returns"},{"location":"term-Readline/#end_key","text":"[Source] End of the line. fun ref end_key( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"end_key"},{"location":"term-Readline/#parameters_8","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_9","text":"None val","title":"Returns"},{"location":"term-Readline/#delete","text":"[Source] Forward delete. fun ref delete( ctrl: Bool val = false, alt: Bool val = false, shift: Bool val = false) : None val","title":"delete"},{"location":"term-Readline/#parameters_9","text":"ctrl: Bool val = false alt: Bool val = false shift: Bool val = false","title":"Parameters"},{"location":"term-Readline/#returns_10","text":"None val","title":"Returns"},{"location":"term-Readline/#insert","text":"fun ref insert( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"insert"},{"location":"term-Readline/#parameters_10","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_11","text":"None val","title":"Returns"},{"location":"term-Readline/#page_up","text":"fun ref page_up( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_up"},{"location":"term-Readline/#parameters_11","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_12","text":"None val","title":"Returns"},{"location":"term-Readline/#page_down","text":"fun ref page_down( ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"page_down"},{"location":"term-Readline/#parameters_12","text":"ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_13","text":"None val","title":"Returns"},{"location":"term-Readline/#fn_key","text":"fun ref fn_key( i: U8 val, ctrl: Bool val, alt: Bool val, shift: Bool val) : None val","title":"fn_key"},{"location":"term-Readline/#parameters_13","text":"i: U8 val ctrl: Bool val alt: Bool val shift: Bool val","title":"Parameters"},{"location":"term-Readline/#returns_14","text":"None val","title":"Returns"},{"location":"term-Readline/#size","text":"fun ref size( rows: U16 val, cols: U16 val) : None val","title":"size"},{"location":"term-Readline/#parameters_14","text":"rows: U16 val cols: U16 val","title":"Parameters"},{"location":"term-Readline/#returns_15","text":"None val","title":"Returns"},{"location":"term-Readline/#private-functions","text":"","title":"Private Functions"},{"location":"term-Readline/#_backspace","text":"[Source] Backward delete. fun ref _backspace() : None val","title":"_backspace"},{"location":"term-Readline/#returns_16","text":"None val","title":"Returns"},{"location":"term-Readline/#_clear","text":"[Source] Clear the screen. fun ref _clear() : None val","title":"_clear"},{"location":"term-Readline/#returns_17","text":"None val","title":"Returns"},{"location":"term-Readline/#_swap","text":"[Source] Swap the previous character with the current one. fun ref _swap() : None val","title":"_swap"},{"location":"term-Readline/#returns_18","text":"None val","title":"Returns"},{"location":"term-Readline/#_delete_prev_word","text":"[Source] Delete the previous word. fun ref _delete_prev_word() : None val","title":"_delete_prev_word"},{"location":"term-Readline/#returns_19","text":"None val","title":"Returns"},{"location":"term-Readline/#_tab","text":"[Source] Tab completion. TODO: Improve this. fun ref _tab() : None val","title":"_tab"},{"location":"term-Readline/#returns_20","text":"None val","title":"Returns"},{"location":"term-Readline/#_dispatch","text":"[Source] Send a finished line to the notifier. fun ref _dispatch( term: ANSITerm tag) : None val","title":"_dispatch"},{"location":"term-Readline/#parameters_15","text":"term: ANSITerm tag","title":"Parameters"},{"location":"term-Readline/#returns_21","text":"None val","title":"Returns"},{"location":"term-Readline/#_handle_line","text":"[Source] Dispatch a single line. fun ref _handle_line( term: ANSITerm tag, line: String val) : None val","title":"_handle_line"},{"location":"term-Readline/#parameters_16","text":"term: ANSITerm tag line: String val","title":"Parameters"},{"location":"term-Readline/#returns_22","text":"None val","title":"Returns"},{"location":"term-Readline/#_refresh_line","text":"[Source] Refresh the line on screen. fun ref _refresh_line() : None val","title":"_refresh_line"},{"location":"term-Readline/#returns_23","text":"None val","title":"Returns"},{"location":"term-Readline/#_add_history","text":"[Source] Add a line to the history, trimming an earlier line if necessary. fun ref _add_history( line: String val) : None val","title":"_add_history"},{"location":"term-Readline/#parameters_17","text":"line: String val","title":"Parameters"},{"location":"term-Readline/#returns_24","text":"None val","title":"Returns"},{"location":"term-Readline/#_load_history","text":"[Source] Load the history from a file. fun ref _load_history() : None val","title":"_load_history"},{"location":"term-Readline/#returns_25","text":"None val","title":"Returns"},{"location":"term-Readline/#_save_history","text":"[Source] Write the history back to a file. fun box _save_history() : None val","title":"_save_history"},{"location":"term-Readline/#returns_26","text":"None val","title":"Returns"},{"location":"term-ReadlineNotify/","text":"ReadlineNotify \u00b6 [Source] Notifier for readline. interface ref ReadlineNotify Public Functions \u00b6 apply \u00b6 [Source] Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input. fun ref apply( line: String val, prompt: Promise[String val] tag) : None val Parameters \u00b6 line: String val prompt: Promise [ String val] tag Returns \u00b6 None val tab \u00b6 [Source] Return tab completion possibilities. fun ref tab( line: String val) : Seq[String val] box Parameters \u00b6 line: String val Returns \u00b6 Seq [ String val] box","title":"interface ReadlineNotify"},{"location":"term-ReadlineNotify/#readlinenotify","text":"[Source] Notifier for readline. interface ref ReadlineNotify","title":"ReadlineNotify"},{"location":"term-ReadlineNotify/#public-functions","text":"","title":"Public Functions"},{"location":"term-ReadlineNotify/#apply","text":"[Source] Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input. fun ref apply( line: String val, prompt: Promise[String val] tag) : None val","title":"apply"},{"location":"term-ReadlineNotify/#parameters","text":"line: String val prompt: Promise [ String val] tag","title":"Parameters"},{"location":"term-ReadlineNotify/#returns","text":"None val","title":"Returns"},{"location":"term-ReadlineNotify/#tab","text":"[Source] Return tab completion possibilities. fun ref tab( line: String val) : Seq[String val] box","title":"tab"},{"location":"term-ReadlineNotify/#parameters_1","text":"line: String val","title":"Parameters"},{"location":"term-ReadlineNotify/#returns_1","text":"Seq [ String val] box","title":"Returns"},{"location":"term-_EscapeCSI/","text":"_EscapeCSI \u00b6 [Source] primitive val _EscapeCSI Constructors \u00b6 create \u00b6 [Source] new val create() : _EscapeCSI val^ Returns \u00b6 _EscapeCSI val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _EscapeCSI val) : Bool val Parameters \u00b6 that: _EscapeCSI val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EscapeCSI val) : Bool val Parameters \u00b6 that: _EscapeCSI val Returns \u00b6 Bool val","title":"primitive _EscapeCSI"},{"location":"term-_EscapeCSI/#_escapecsi","text":"[Source] primitive val _EscapeCSI","title":"_EscapeCSI"},{"location":"term-_EscapeCSI/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeCSI/#create","text":"[Source] new val create() : _EscapeCSI val^","title":"create"},{"location":"term-_EscapeCSI/#returns","text":"_EscapeCSI val^","title":"Returns"},{"location":"term-_EscapeCSI/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeCSI/#eq","text":"[Source] fun box eq( that: _EscapeCSI val) : Bool val","title":"eq"},{"location":"term-_EscapeCSI/#parameters","text":"that: _EscapeCSI val","title":"Parameters"},{"location":"term-_EscapeCSI/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeCSI/#ne","text":"[Source] fun box ne( that: _EscapeCSI val) : Bool val","title":"ne"},{"location":"term-_EscapeCSI/#parameters_1","text":"that: _EscapeCSI val","title":"Parameters"},{"location":"term-_EscapeCSI/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeMod/","text":"_EscapeMod \u00b6 [Source] primitive val _EscapeMod Constructors \u00b6 create \u00b6 [Source] new val create() : _EscapeMod val^ Returns \u00b6 _EscapeMod val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _EscapeMod val) : Bool val Parameters \u00b6 that: _EscapeMod val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EscapeMod val) : Bool val Parameters \u00b6 that: _EscapeMod val Returns \u00b6 Bool val","title":"primitive _EscapeMod"},{"location":"term-_EscapeMod/#_escapemod","text":"[Source] primitive val _EscapeMod","title":"_EscapeMod"},{"location":"term-_EscapeMod/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeMod/#create","text":"[Source] new val create() : _EscapeMod val^","title":"create"},{"location":"term-_EscapeMod/#returns","text":"_EscapeMod val^","title":"Returns"},{"location":"term-_EscapeMod/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeMod/#eq","text":"[Source] fun box eq( that: _EscapeMod val) : Bool val","title":"eq"},{"location":"term-_EscapeMod/#parameters","text":"that: _EscapeMod val","title":"Parameters"},{"location":"term-_EscapeMod/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeMod/#ne","text":"[Source] fun box ne( that: _EscapeMod val) : Bool val","title":"ne"},{"location":"term-_EscapeMod/#parameters_1","text":"that: _EscapeMod val","title":"Parameters"},{"location":"term-_EscapeMod/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeNone/","text":"_EscapeNone \u00b6 [Source] primitive val _EscapeNone Constructors \u00b6 create \u00b6 [Source] new val create() : _EscapeNone val^ Returns \u00b6 _EscapeNone val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _EscapeNone val) : Bool val Parameters \u00b6 that: _EscapeNone val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EscapeNone val) : Bool val Parameters \u00b6 that: _EscapeNone val Returns \u00b6 Bool val","title":"primitive _EscapeNone"},{"location":"term-_EscapeNone/#_escapenone","text":"[Source] primitive val _EscapeNone","title":"_EscapeNone"},{"location":"term-_EscapeNone/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeNone/#create","text":"[Source] new val create() : _EscapeNone val^","title":"create"},{"location":"term-_EscapeNone/#returns","text":"_EscapeNone val^","title":"Returns"},{"location":"term-_EscapeNone/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeNone/#eq","text":"[Source] fun box eq( that: _EscapeNone val) : Bool val","title":"eq"},{"location":"term-_EscapeNone/#parameters","text":"that: _EscapeNone val","title":"Parameters"},{"location":"term-_EscapeNone/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeNone/#ne","text":"[Source] fun box ne( that: _EscapeNone val) : Bool val","title":"ne"},{"location":"term-_EscapeNone/#parameters_1","text":"that: _EscapeNone val","title":"Parameters"},{"location":"term-_EscapeNone/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeSS3/","text":"_EscapeSS3 \u00b6 [Source] primitive val _EscapeSS3 Constructors \u00b6 create \u00b6 [Source] new val create() : _EscapeSS3 val^ Returns \u00b6 _EscapeSS3 val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _EscapeSS3 val) : Bool val Parameters \u00b6 that: _EscapeSS3 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EscapeSS3 val) : Bool val Parameters \u00b6 that: _EscapeSS3 val Returns \u00b6 Bool val","title":"primitive _EscapeSS3"},{"location":"term-_EscapeSS3/#_escapess3","text":"[Source] primitive val _EscapeSS3","title":"_EscapeSS3"},{"location":"term-_EscapeSS3/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeSS3/#create","text":"[Source] new val create() : _EscapeSS3 val^","title":"create"},{"location":"term-_EscapeSS3/#returns","text":"_EscapeSS3 val^","title":"Returns"},{"location":"term-_EscapeSS3/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeSS3/#eq","text":"[Source] fun box eq( that: _EscapeSS3 val) : Bool val","title":"eq"},{"location":"term-_EscapeSS3/#parameters","text":"that: _EscapeSS3 val","title":"Parameters"},{"location":"term-_EscapeSS3/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeSS3/#ne","text":"[Source] fun box ne( that: _EscapeSS3 val) : Bool val","title":"ne"},{"location":"term-_EscapeSS3/#parameters_1","text":"that: _EscapeSS3 val","title":"Parameters"},{"location":"term-_EscapeSS3/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeStart/","text":"_EscapeStart \u00b6 [Source] primitive val _EscapeStart Constructors \u00b6 create \u00b6 [Source] new val create() : _EscapeStart val^ Returns \u00b6 _EscapeStart val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: _EscapeStart val) : Bool val Parameters \u00b6 that: _EscapeStart val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _EscapeStart val) : Bool val Parameters \u00b6 that: _EscapeStart val Returns \u00b6 Bool val","title":"primitive _EscapeStart"},{"location":"term-_EscapeStart/#_escapestart","text":"[Source] primitive val _EscapeStart","title":"_EscapeStart"},{"location":"term-_EscapeStart/#constructors","text":"","title":"Constructors"},{"location":"term-_EscapeStart/#create","text":"[Source] new val create() : _EscapeStart val^","title":"create"},{"location":"term-_EscapeStart/#returns","text":"_EscapeStart val^","title":"Returns"},{"location":"term-_EscapeStart/#public-functions","text":"","title":"Public Functions"},{"location":"term-_EscapeStart/#eq","text":"[Source] fun box eq( that: _EscapeStart val) : Bool val","title":"eq"},{"location":"term-_EscapeStart/#parameters","text":"that: _EscapeStart val","title":"Parameters"},{"location":"term-_EscapeStart/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_EscapeStart/#ne","text":"[Source] fun box ne( that: _EscapeStart val) : Bool val","title":"ne"},{"location":"term-_EscapeStart/#parameters_1","text":"that: _EscapeStart val","title":"Parameters"},{"location":"term-_EscapeStart/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_EscapeState/","text":"_EscapeState \u00b6 [Source] type _EscapeState is (_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val) Type Alias For \u00b6 ( _EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)","title":"type _EscapeState"},{"location":"term-_EscapeState/#_escapestate","text":"[Source] type _EscapeState is (_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)","title":"_EscapeState"},{"location":"term-_EscapeState/#type-alias-for","text":"( _EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)","title":"Type Alias For"},{"location":"term-_TIOCGWINSZ/","text":"_TIOCGWINSZ \u00b6 [Source] primitive val _TIOCGWINSZ Constructors \u00b6 create \u00b6 [Source] new val create() : _TIOCGWINSZ val^ Returns \u00b6 _TIOCGWINSZ val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : ULong val Returns \u00b6 ULong val eq \u00b6 [Source] fun box eq( that: _TIOCGWINSZ val) : Bool val Parameters \u00b6 that: _TIOCGWINSZ val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _TIOCGWINSZ val) : Bool val Parameters \u00b6 that: _TIOCGWINSZ val Returns \u00b6 Bool val","title":"primitive _TIOCGWINSZ"},{"location":"term-_TIOCGWINSZ/#_tiocgwinsz","text":"[Source] primitive val _TIOCGWINSZ","title":"_TIOCGWINSZ"},{"location":"term-_TIOCGWINSZ/#constructors","text":"","title":"Constructors"},{"location":"term-_TIOCGWINSZ/#create","text":"[Source] new val create() : _TIOCGWINSZ val^","title":"create"},{"location":"term-_TIOCGWINSZ/#returns","text":"_TIOCGWINSZ val^","title":"Returns"},{"location":"term-_TIOCGWINSZ/#public-functions","text":"","title":"Public Functions"},{"location":"term-_TIOCGWINSZ/#apply","text":"[Source] fun box apply() : ULong val","title":"apply"},{"location":"term-_TIOCGWINSZ/#returns_1","text":"ULong val","title":"Returns"},{"location":"term-_TIOCGWINSZ/#eq","text":"[Source] fun box eq( that: _TIOCGWINSZ val) : Bool val","title":"eq"},{"location":"term-_TIOCGWINSZ/#parameters","text":"that: _TIOCGWINSZ val","title":"Parameters"},{"location":"term-_TIOCGWINSZ/#returns_2","text":"Bool val","title":"Returns"},{"location":"term-_TIOCGWINSZ/#ne","text":"[Source] fun box ne( that: _TIOCGWINSZ val) : Bool val","title":"ne"},{"location":"term-_TIOCGWINSZ/#parameters_1","text":"that: _TIOCGWINSZ val","title":"Parameters"},{"location":"term-_TIOCGWINSZ/#returns_3","text":"Bool val","title":"Returns"},{"location":"term-_TermResizeNotify/","text":"_TermResizeNotify \u00b6 [Source] class ref _TermResizeNotify is SignalNotify ref Implements \u00b6 SignalNotify ref Constructors \u00b6 create \u00b6 [Source] new ref create( term: ANSITerm tag) : _TermResizeNotify ref^ Parameters \u00b6 term: ANSITerm tag Returns \u00b6 _TermResizeNotify ref^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( times: U32 val) : Bool val Parameters \u00b6 times: U32 val Returns \u00b6 Bool val dispose \u00b6 [Source] fun ref dispose() : None val Returns \u00b6 None val","title":"class _TermResizeNotify"},{"location":"term-_TermResizeNotify/#_termresizenotify","text":"[Source] class ref _TermResizeNotify is SignalNotify ref","title":"_TermResizeNotify"},{"location":"term-_TermResizeNotify/#implements","text":"SignalNotify ref","title":"Implements"},{"location":"term-_TermResizeNotify/#constructors","text":"","title":"Constructors"},{"location":"term-_TermResizeNotify/#create","text":"[Source] new ref create( term: ANSITerm tag) : _TermResizeNotify ref^","title":"create"},{"location":"term-_TermResizeNotify/#parameters","text":"term: ANSITerm tag","title":"Parameters"},{"location":"term-_TermResizeNotify/#returns","text":"_TermResizeNotify ref^","title":"Returns"},{"location":"term-_TermResizeNotify/#public-functions","text":"","title":"Public Functions"},{"location":"term-_TermResizeNotify/#apply","text":"[Source] fun box apply( times: U32 val) : Bool val","title":"apply"},{"location":"term-_TermResizeNotify/#parameters_1","text":"times: U32 val","title":"Parameters"},{"location":"term-_TermResizeNotify/#returns_1","text":"Bool val","title":"Returns"},{"location":"term-_TermResizeNotify/#dispose","text":"[Source] fun ref dispose() : None val","title":"dispose"},{"location":"term-_TermResizeNotify/#returns_2","text":"None val","title":"Returns"},{"location":"term-_TermSize/","text":"_TermSize \u00b6 [Source] struct ref _TermSize Constructors \u00b6 create \u00b6 [Source] new iso create() : _TermSize iso^ Returns \u00b6 _TermSize iso^ Public fields \u00b6 var row: U16 val \u00b6 [Source] var col: U16 val \u00b6 [Source] var xpixel: U16 val \u00b6 [Source] var ypixel: U16 val \u00b6 [Source]","title":"struct _TermSize"},{"location":"term-_TermSize/#_termsize","text":"[Source] struct ref _TermSize","title":"_TermSize"},{"location":"term-_TermSize/#constructors","text":"","title":"Constructors"},{"location":"term-_TermSize/#create","text":"[Source] new iso create() : _TermSize iso^","title":"create"},{"location":"term-_TermSize/#returns","text":"_TermSize iso^","title":"Returns"},{"location":"term-_TermSize/#public-fields","text":"","title":"Public fields"},{"location":"term-_TermSize/#var-row-u16-val","text":"[Source]","title":"var row: U16 val"},{"location":"term-_TermSize/#var-col-u16-val","text":"[Source]","title":"var col: U16 val"},{"location":"term-_TermSize/#var-xpixel-u16-val","text":"[Source]","title":"var xpixel: U16 val"},{"location":"term-_TermSize/#var-ypixel-u16-val","text":"[Source]","title":"var ypixel: U16 val"},{"location":"time--index/","text":"Time Package \u00b6 The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. Public Types \u00b6 actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos Private Types \u00b6 type _Clock primitive _ClockRealtime primitive _ClockMonotonic class _TimingWheel","title":"Package"},{"location":"time--index/#time-package","text":"The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks.","title":"Time Package"},{"location":"time--index/#public-types","text":"actor Timers interface TimerNotify class Timer primitive Time class PosixDate primitive Nanos","title":"Public Types"},{"location":"time--index/#private-types","text":"type _Clock primitive _ClockRealtime primitive _ClockMonotonic class _TimingWheel","title":"Private Types"},{"location":"time-Nanos/","text":"Nanos \u00b6 [Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos Constructors \u00b6 create \u00b6 [Source] new val create() : Nanos val^ Returns \u00b6 Nanos val^ Public Functions \u00b6 from_seconds \u00b6 [Source] fun box from_seconds( t: U64 val) : U64 val Parameters \u00b6 t: U64 val Returns \u00b6 U64 val from_millis \u00b6 [Source] fun box from_millis( t: U64 val) : U64 val Parameters \u00b6 t: U64 val Returns \u00b6 U64 val from_micros \u00b6 [Source] fun box from_micros( t: U64 val) : U64 val Parameters \u00b6 t: U64 val Returns \u00b6 U64 val from_seconds_f \u00b6 [Source] fun box from_seconds_f( t: F64 val) : U64 val Parameters \u00b6 t: F64 val Returns \u00b6 U64 val from_millis_f \u00b6 [Source] fun box from_millis_f( t: F64 val) : U64 val Parameters \u00b6 t: F64 val Returns \u00b6 U64 val from_micros_f \u00b6 [Source] fun box from_micros_f( t: F64 val) : U64 val Parameters \u00b6 t: F64 val Returns \u00b6 U64 val from_wall_clock \u00b6 [Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val Parameters \u00b6 wall: ( I64 val , I64 val) Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( that: Nanos val) : Bool val Parameters \u00b6 that: Nanos val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Nanos val) : Bool val Parameters \u00b6 that: Nanos val Returns \u00b6 Bool val","title":"primitive Nanos"},{"location":"time-Nanos/#nanos","text":"[Source] Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. primitive val Nanos","title":"Nanos"},{"location":"time-Nanos/#constructors","text":"","title":"Constructors"},{"location":"time-Nanos/#create","text":"[Source] new val create() : Nanos val^","title":"create"},{"location":"time-Nanos/#returns","text":"Nanos val^","title":"Returns"},{"location":"time-Nanos/#public-functions","text":"","title":"Public Functions"},{"location":"time-Nanos/#from_seconds","text":"[Source] fun box from_seconds( t: U64 val) : U64 val","title":"from_seconds"},{"location":"time-Nanos/#parameters","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_1","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis","text":"[Source] fun box from_millis( t: U64 val) : U64 val","title":"from_millis"},{"location":"time-Nanos/#parameters_1","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_2","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros","text":"[Source] fun box from_micros( t: U64 val) : U64 val","title":"from_micros"},{"location":"time-Nanos/#parameters_2","text":"t: U64 val","title":"Parameters"},{"location":"time-Nanos/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_seconds_f","text":"[Source] fun box from_seconds_f( t: F64 val) : U64 val","title":"from_seconds_f"},{"location":"time-Nanos/#parameters_3","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_millis_f","text":"[Source] fun box from_millis_f( t: F64 val) : U64 val","title":"from_millis_f"},{"location":"time-Nanos/#parameters_4","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_micros_f","text":"[Source] fun box from_micros_f( t: F64 val) : U64 val","title":"from_micros_f"},{"location":"time-Nanos/#parameters_5","text":"t: F64 val","title":"Parameters"},{"location":"time-Nanos/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#from_wall_clock","text":"[Source] fun box from_wall_clock( wall: (I64 val , I64 val)) : U64 val","title":"from_wall_clock"},{"location":"time-Nanos/#parameters_6","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Nanos/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Nanos/#eq","text":"[Source] fun box eq( that: Nanos val) : Bool val","title":"eq"},{"location":"time-Nanos/#parameters_7","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_8","text":"Bool val","title":"Returns"},{"location":"time-Nanos/#ne","text":"[Source] fun box ne( that: Nanos val) : Bool val","title":"ne"},{"location":"time-Nanos/#parameters_8","text":"that: Nanos val","title":"Parameters"},{"location":"time-Nanos/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-PosixDate/","text":"PosixDate \u00b6 [Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate Constructors \u00b6 create \u00b6 [Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = 0, nanoseconds: I64 val = 0) : PosixDate ref^ Parameters \u00b6 seconds: I64 val = 0 nanoseconds: I64 val = 0 Returns \u00b6 PosixDate ref^ Public fields \u00b6 var nsec: I32 val \u00b6 [Source] var sec: I32 val \u00b6 [Source] var min: I32 val \u00b6 [Source] var hour: I32 val \u00b6 [Source] var day_of_month: I32 val \u00b6 [Source] var month: I32 val \u00b6 [Source] var year: I32 val \u00b6 [Source] var day_of_week: I32 val \u00b6 [Source] var day_of_year: I32 val \u00b6 [Source] Public Functions \u00b6 time \u00b6 [Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val Returns \u00b6 I64 val normal \u00b6 [Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val Returns \u00b6 None val format \u00b6 [Source] Format the time as for strftime. fun box format( fmt: String val) : String val ? Parameters \u00b6 fmt: String val Returns \u00b6 String val ? Private Functions \u00b6 _negative_to_zero \u00b6 [Source] fun box _negative_to_zero( value: I64 val) : I64 val Parameters \u00b6 value: I64 val Returns \u00b6 I64 val","title":"class PosixDate"},{"location":"time-PosixDate/#posixdate","text":"[Source] Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. class ref PosixDate","title":"PosixDate"},{"location":"time-PosixDate/#constructors","text":"","title":"Constructors"},{"location":"time-PosixDate/#create","text":"[Source] Create a date from a POSIX time. Negative arguments will be changed to zero. new ref create( seconds: I64 val = 0, nanoseconds: I64 val = 0) : PosixDate ref^","title":"create"},{"location":"time-PosixDate/#parameters","text":"seconds: I64 val = 0 nanoseconds: I64 val = 0","title":"Parameters"},{"location":"time-PosixDate/#returns","text":"PosixDate ref^","title":"Returns"},{"location":"time-PosixDate/#public-fields","text":"","title":"Public fields"},{"location":"time-PosixDate/#var-nsec-i32-val","text":"[Source]","title":"var nsec: I32 val"},{"location":"time-PosixDate/#var-sec-i32-val","text":"[Source]","title":"var sec: I32 val"},{"location":"time-PosixDate/#var-min-i32-val","text":"[Source]","title":"var min: I32 val"},{"location":"time-PosixDate/#var-hour-i32-val","text":"[Source]","title":"var hour: I32 val"},{"location":"time-PosixDate/#var-day_of_month-i32-val","text":"[Source]","title":"var day_of_month: I32 val"},{"location":"time-PosixDate/#var-month-i32-val","text":"[Source]","title":"var month: I32 val"},{"location":"time-PosixDate/#var-year-i32-val","text":"[Source]","title":"var year: I32 val"},{"location":"time-PosixDate/#var-day_of_week-i32-val","text":"[Source]","title":"var day_of_week: I32 val"},{"location":"time-PosixDate/#var-day_of_year-i32-val","text":"[Source]","title":"var day_of_year: I32 val"},{"location":"time-PosixDate/#public-functions","text":"","title":"Public Functions"},{"location":"time-PosixDate/#time","text":"[Source] Return a POSIX time. Treats the date as UTC. fun box time() : I64 val","title":"time"},{"location":"time-PosixDate/#returns_1","text":"I64 val","title":"Returns"},{"location":"time-PosixDate/#normal","text":"[Source] Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. fun ref normal() : None val","title":"normal"},{"location":"time-PosixDate/#returns_2","text":"None val","title":"Returns"},{"location":"time-PosixDate/#format","text":"[Source] Format the time as for strftime. fun box format( fmt: String val) : String val ?","title":"format"},{"location":"time-PosixDate/#parameters_1","text":"fmt: String val","title":"Parameters"},{"location":"time-PosixDate/#returns_3","text":"String val ?","title":"Returns"},{"location":"time-PosixDate/#private-functions","text":"","title":"Private Functions"},{"location":"time-PosixDate/#_negative_to_zero","text":"[Source] fun box _negative_to_zero( value: I64 val) : I64 val","title":"_negative_to_zero"},{"location":"time-PosixDate/#parameters_2","text":"value: I64 val","title":"Parameters"},{"location":"time-PosixDate/#returns_4","text":"I64 val","title":"Returns"},{"location":"time-Time/","text":"Time \u00b6 [Source] A collection of ways to fetch the current time. primitive val Time Constructors \u00b6 create \u00b6 [Source] new val create() : Time val^ Returns \u00b6 Time val^ Public Functions \u00b6 now \u00b6 [Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val) Returns \u00b6 ( I64 val , I64 val) seconds \u00b6 [Source] The wall-clock adjusted system time. fun box seconds() : I64 val Returns \u00b6 I64 val millis \u00b6 [Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val Returns \u00b6 U64 val micros \u00b6 [Source] Monotonic unadjusted microseconds. fun box micros() : U64 val Returns \u00b6 U64 val nanos \u00b6 [Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val Returns \u00b6 U64 val cycles \u00b6 [Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val Returns \u00b6 U64 val perf_begin \u00b6 [Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val Returns \u00b6 U64 val perf_end \u00b6 [Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val Returns \u00b6 U64 val eq \u00b6 [Source] fun box eq( that: Time val) : Bool val Parameters \u00b6 that: Time val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Time val) : Bool val Parameters \u00b6 that: Time val Returns \u00b6 Bool val Private Functions \u00b6 _clock_gettime \u00b6 [Source] Return a clock time on linux and bsd. fun box _clock_gettime( clock: (_ClockRealtime val | _ClockMonotonic val)) : (I64 val , I64 val) Parameters \u00b6 clock: ( _ClockRealtime val | _ClockMonotonic val) Returns \u00b6 ( I64 val , I64 val) _query_performance_counter \u00b6 [Source] Return QPC and QPF. fun box _query_performance_counter() : (U64 val , U64 val) Returns \u00b6 ( U64 val , U64 val)","title":"primitive Time"},{"location":"time-Time/#time","text":"[Source] A collection of ways to fetch the current time. primitive val Time","title":"Time"},{"location":"time-Time/#constructors","text":"","title":"Constructors"},{"location":"time-Time/#create","text":"[Source] new val create() : Time val^","title":"create"},{"location":"time-Time/#returns","text":"Time val^","title":"Returns"},{"location":"time-Time/#public-functions","text":"","title":"Public Functions"},{"location":"time-Time/#now","text":"[Source] The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) fun box now() : (I64 val , I64 val)","title":"now"},{"location":"time-Time/#returns_1","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#seconds","text":"[Source] The wall-clock adjusted system time. fun box seconds() : I64 val","title":"seconds"},{"location":"time-Time/#returns_2","text":"I64 val","title":"Returns"},{"location":"time-Time/#millis","text":"[Source] Monotonic unadjusted milliseconds. fun box millis() : U64 val","title":"millis"},{"location":"time-Time/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Time/#micros","text":"[Source] Monotonic unadjusted microseconds. fun box micros() : U64 val","title":"micros"},{"location":"time-Time/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Time/#nanos","text":"[Source] Monotonic unadjusted nanoseconds. fun box nanos() : U64 val","title":"nanos"},{"location":"time-Time/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-Time/#cycles","text":"[Source] Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. fun box cycles() : U64 val","title":"cycles"},{"location":"time-Time/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_begin","text":"[Source] Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. fun box perf_begin() : U64 val","title":"perf_begin"},{"location":"time-Time/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-Time/#perf_end","text":"[Source] Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. fun box perf_end() : U64 val","title":"perf_end"},{"location":"time-Time/#returns_8","text":"U64 val","title":"Returns"},{"location":"time-Time/#eq","text":"[Source] fun box eq( that: Time val) : Bool val","title":"eq"},{"location":"time-Time/#parameters","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_9","text":"Bool val","title":"Returns"},{"location":"time-Time/#ne","text":"[Source] fun box ne( that: Time val) : Bool val","title":"ne"},{"location":"time-Time/#parameters_1","text":"that: Time val","title":"Parameters"},{"location":"time-Time/#returns_10","text":"Bool val","title":"Returns"},{"location":"time-Time/#private-functions","text":"","title":"Private Functions"},{"location":"time-Time/#_clock_gettime","text":"[Source] Return a clock time on linux and bsd. fun box _clock_gettime( clock: (_ClockRealtime val | _ClockMonotonic val)) : (I64 val , I64 val)","title":"_clock_gettime"},{"location":"time-Time/#parameters_2","text":"clock: ( _ClockRealtime val | _ClockMonotonic val)","title":"Parameters"},{"location":"time-Time/#returns_11","text":"( I64 val , I64 val)","title":"Returns"},{"location":"time-Time/#_query_performance_counter","text":"[Source] Return QPC and QPF. fun box _query_performance_counter() : (U64 val , U64 val)","title":"_query_performance_counter"},{"location":"time-Time/#returns_12","text":"( U64 val , U64 val)","title":"Returns"},{"location":"time-Timer/","text":"Timer \u00b6 [Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use \"time\" actor Main new create(env: Env) => let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) => _env = env fun ref apply(timer: Timer, count: U64): Bool => _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer Constructors \u00b6 create \u00b6 [Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = 0) : Timer iso^ Parameters \u00b6 notify: TimerNotify iso expiration: U64 val interval: U64 val = 0 Returns \u00b6 Timer iso^ abs \u00b6 [Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = 0) : Timer ref^ Parameters \u00b6 notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = 0 Returns \u00b6 Timer ref^ Private Functions \u00b6 _cancel \u00b6 [Source] Remove the timer from any list. fun ref _cancel() : None val Returns \u00b6 None val _get_node \u00b6 [Source] Returns the list node pointing to the timer. Used to schedule the timer in a queue. fun ref _get_node() : ListNode[Timer ref] ref Returns \u00b6 ListNode [ Timer ref] ref _slop \u00b6 [Source] Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. fun ref _slop( bits: USize val) : None val Parameters \u00b6 bits: USize val Returns \u00b6 None val _fire \u00b6 [Source] A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. fun ref _fire( current: U64 val) : Bool val Parameters \u00b6 current: U64 val Returns \u00b6 Bool val _next \u00b6 [Source] Returns the next expiration time. fun box _next() : U64 val Returns \u00b6 U64 val _abs_expiration_time \u00b6 [Source] Converts a wall-clock adjusted system time to absolute expiration time fun tag _abs_expiration_time( wall: (I64 val , I64 val)) : U64 val Parameters \u00b6 wall: ( I64 val , I64 val) Returns \u00b6 U64 val","title":"class Timer"},{"location":"time-Timer/#timer","text":"[Source] The Timer class represents a timer that fires after an expiration time, and then fires at an interval. When a Timer fires, it calls the apply method of the TimerNotify object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the TimerNotify object prints how many times it has been called: use \"time\" actor Main new create(env: Env) => let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) => _env = env fun ref apply(timer: Timer, count: U64): Bool => _env.out.print(_counter.string()) _counter = _counter + 1 true class ref Timer","title":"Timer"},{"location":"time-Timer/#constructors","text":"","title":"Constructors"},{"location":"time-Timer/#create","text":"[Source] Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. new iso create( notify: TimerNotify iso, expiration: U64 val, interval: U64 val = 0) : Timer iso^","title":"create"},{"location":"time-Timer/#parameters","text":"notify: TimerNotify iso expiration: U64 val interval: U64 val = 0","title":"Parameters"},{"location":"time-Timer/#returns","text":"Timer iso^","title":"Returns"},{"location":"time-Timer/#abs","text":"[Source] Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. new ref abs( notify: TimerNotify ref, expiration: (I64 val , I64 val), interval: U64 val = 0) : Timer ref^","title":"abs"},{"location":"time-Timer/#parameters_1","text":"notify: TimerNotify ref expiration: ( I64 val , I64 val) interval: U64 val = 0","title":"Parameters"},{"location":"time-Timer/#returns_1","text":"Timer ref^","title":"Returns"},{"location":"time-Timer/#private-functions","text":"","title":"Private Functions"},{"location":"time-Timer/#_cancel","text":"[Source] Remove the timer from any list. fun ref _cancel() : None val","title":"_cancel"},{"location":"time-Timer/#returns_2","text":"None val","title":"Returns"},{"location":"time-Timer/#_get_node","text":"[Source] Returns the list node pointing to the timer. Used to schedule the timer in a queue. fun ref _get_node() : ListNode[Timer ref] ref","title":"_get_node"},{"location":"time-Timer/#returns_3","text":"ListNode [ Timer ref] ref","title":"Returns"},{"location":"time-Timer/#_slop","text":"[Source] Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. fun ref _slop( bits: USize val) : None val","title":"_slop"},{"location":"time-Timer/#parameters_2","text":"bits: USize val","title":"Parameters"},{"location":"time-Timer/#returns_4","text":"None val","title":"Returns"},{"location":"time-Timer/#_fire","text":"[Source] A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. fun ref _fire( current: U64 val) : Bool val","title":"_fire"},{"location":"time-Timer/#parameters_3","text":"current: U64 val","title":"Parameters"},{"location":"time-Timer/#returns_5","text":"Bool val","title":"Returns"},{"location":"time-Timer/#_next","text":"[Source] Returns the next expiration time. fun box _next() : U64 val","title":"_next"},{"location":"time-Timer/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Timer/#_abs_expiration_time","text":"[Source] Converts a wall-clock adjusted system time to absolute expiration time fun tag _abs_expiration_time( wall: (I64 val , I64 val)) : U64 val","title":"_abs_expiration_time"},{"location":"time-Timer/#parameters_4","text":"wall: ( I64 val , I64 val)","title":"Parameters"},{"location":"time-Timer/#returns_7","text":"U64 val","title":"Returns"},{"location":"time-TimerNotify/","text":"TimerNotify \u00b6 [Source] Notifications for timer. interface ref TimerNotify Public Functions \u00b6 apply \u00b6 [Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val Parameters \u00b6 timer: Timer ref count: U64 val Returns \u00b6 Bool val cancel \u00b6 [Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val","title":"interface TimerNotify"},{"location":"time-TimerNotify/#timernotify","text":"[Source] Notifications for timer. interface ref TimerNotify","title":"TimerNotify"},{"location":"time-TimerNotify/#public-functions","text":"","title":"Public Functions"},{"location":"time-TimerNotify/#apply","text":"[Source] Called with the the number of times the timer has fired since this was last called. Usually, the value of count will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and count is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). fun ref apply( timer: Timer ref, count: U64 val) : Bool val","title":"apply"},{"location":"time-TimerNotify/#parameters","text":"timer: Timer ref count: U64 val","title":"Parameters"},{"location":"time-TimerNotify/#returns","text":"Bool val","title":"Returns"},{"location":"time-TimerNotify/#cancel","text":"[Source] Called if the timer is cancelled. This is also called if the notifier returns false from its apply method. fun ref cancel( timer: Timer ref) : None val","title":"cancel"},{"location":"time-TimerNotify/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-TimerNotify/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/","text":"Timers \u00b6 [Source] A hierarchical set of timing wheels. actor tag Timers Constructors \u00b6 create \u00b6 [Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = 20) : Timers tag^ Parameters \u00b6 slop: USize val = 20 Returns \u00b6 Timers tag^ Public Behaviours \u00b6 apply \u00b6 [Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso) Parameters \u00b6 timer: Timer iso cancel \u00b6 [Source] Cancels a timer. be cancel( timer: Timer tag) Parameters \u00b6 timer: Timer tag dispose \u00b6 [Source] Dispose of this set of timing wheels. be dispose() Private Behaviours \u00b6 _event_notify \u00b6 [Source] When the event fires, advance the timing wheels. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val) Parameters \u00b6 event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val Private Functions \u00b6 _advance \u00b6 [Source] Update the current time, process all the timing wheels, and set the event for the next time we need to advance. fun ref _advance() : None val Returns \u00b6 None val _fire \u00b6 [Source] Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. fun ref _fire( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val _next \u00b6 [Source] Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. fun box _next() : U64 val Returns \u00b6 U64 val _set_time \u00b6 [Source] Set the current time with precision reduced by the slop bits. Return the elapsed time. fun ref _set_time() : U64 val Returns \u00b6 U64 val _get_wheel \u00b6 [Source] Get the hierarchical timing wheel for the given time until expiration. fun ref _get_wheel( rem: U64 val) : _TimingWheel ref ? Parameters \u00b6 rem: U64 val Returns \u00b6 _TimingWheel ref ? _expiration_max \u00b6 [Source] Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. fun tag _expiration_max() : U64 val Returns \u00b6 U64 val _wheels \u00b6 [Source] fun tag _wheels() : USize val Returns \u00b6 USize val _bits \u00b6 [Source] fun tag _bits() : USize val Returns \u00b6 USize val","title":"actor Timers"},{"location":"time-Timers/#timers","text":"[Source] A hierarchical set of timing wheels. actor tag Timers","title":"Timers"},{"location":"time-Timers/#constructors","text":"","title":"Constructors"},{"location":"time-Timers/#create","text":"[Source] Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. new tag create( slop: USize val = 20) : Timers tag^","title":"create"},{"location":"time-Timers/#parameters","text":"slop: USize val = 20","title":"Parameters"},{"location":"time-Timers/#returns","text":"Timers tag^","title":"Returns"},{"location":"time-Timers/#public-behaviours","text":"","title":"Public Behaviours"},{"location":"time-Timers/#apply","text":"[Source] Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. be apply( timer: Timer iso)","title":"apply"},{"location":"time-Timers/#parameters_1","text":"timer: Timer iso","title":"Parameters"},{"location":"time-Timers/#cancel","text":"[Source] Cancels a timer. be cancel( timer: Timer tag)","title":"cancel"},{"location":"time-Timers/#parameters_2","text":"timer: Timer tag","title":"Parameters"},{"location":"time-Timers/#dispose","text":"[Source] Dispose of this set of timing wheels. be dispose()","title":"dispose"},{"location":"time-Timers/#private-behaviours","text":"","title":"Private Behaviours"},{"location":"time-Timers/#_event_notify","text":"[Source] When the event fires, advance the timing wheels. be _event_notify( event: Pointer[AsioEvent val] tag, flags: U32 val, arg: U32 val)","title":"_event_notify"},{"location":"time-Timers/#parameters_3","text":"event: Pointer [ AsioEvent val] tag flags: U32 val arg: U32 val","title":"Parameters"},{"location":"time-Timers/#private-functions","text":"","title":"Private Functions"},{"location":"time-Timers/#_advance","text":"[Source] Update the current time, process all the timing wheels, and set the event for the next time we need to advance. fun ref _advance() : None val","title":"_advance"},{"location":"time-Timers/#returns_1","text":"None val","title":"Returns"},{"location":"time-Timers/#_fire","text":"[Source] Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. fun ref _fire( timer: Timer ref) : None val","title":"_fire"},{"location":"time-Timers/#parameters_4","text":"timer: Timer ref","title":"Parameters"},{"location":"time-Timers/#returns_2","text":"None val","title":"Returns"},{"location":"time-Timers/#_next","text":"[Source] Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. fun box _next() : U64 val","title":"_next"},{"location":"time-Timers/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_set_time","text":"[Source] Set the current time with precision reduced by the slop bits. Return the elapsed time. fun ref _set_time() : U64 val","title":"_set_time"},{"location":"time-Timers/#returns_4","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_get_wheel","text":"[Source] Get the hierarchical timing wheel for the given time until expiration. fun ref _get_wheel( rem: U64 val) : _TimingWheel ref ?","title":"_get_wheel"},{"location":"time-Timers/#parameters_5","text":"rem: U64 val","title":"Parameters"},{"location":"time-Timers/#returns_5","text":"_TimingWheel ref ?","title":"Returns"},{"location":"time-Timers/#_expiration_max","text":"[Source] Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. fun tag _expiration_max() : U64 val","title":"_expiration_max"},{"location":"time-Timers/#returns_6","text":"U64 val","title":"Returns"},{"location":"time-Timers/#_wheels","text":"[Source] fun tag _wheels() : USize val","title":"_wheels"},{"location":"time-Timers/#returns_7","text":"USize val","title":"Returns"},{"location":"time-Timers/#_bits","text":"[Source] fun tag _bits() : USize val","title":"_bits"},{"location":"time-Timers/#returns_8","text":"USize val","title":"Returns"},{"location":"time-_Clock/","text":"_Clock \u00b6 [Source] type _Clock is (_ClockRealtime val | _ClockMonotonic val) Type Alias For \u00b6 ( _ClockRealtime val | _ClockMonotonic val)","title":"type _Clock"},{"location":"time-_Clock/#_clock","text":"[Source] type _Clock is (_ClockRealtime val | _ClockMonotonic val)","title":"_Clock"},{"location":"time-_Clock/#type-alias-for","text":"( _ClockRealtime val | _ClockMonotonic val)","title":"Type Alias For"},{"location":"time-_ClockMonotonic/","text":"_ClockMonotonic \u00b6 [Source] primitive val _ClockMonotonic Constructors \u00b6 create \u00b6 [Source] new val create() : _ClockMonotonic val^ Returns \u00b6 _ClockMonotonic val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: _ClockMonotonic val) : Bool val Parameters \u00b6 that: _ClockMonotonic val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ClockMonotonic val) : Bool val Parameters \u00b6 that: _ClockMonotonic val Returns \u00b6 Bool val","title":"primitive _ClockMonotonic"},{"location":"time-_ClockMonotonic/#_clockmonotonic","text":"[Source] primitive val _ClockMonotonic","title":"_ClockMonotonic"},{"location":"time-_ClockMonotonic/#constructors","text":"","title":"Constructors"},{"location":"time-_ClockMonotonic/#create","text":"[Source] new val create() : _ClockMonotonic val^","title":"create"},{"location":"time-_ClockMonotonic/#returns","text":"_ClockMonotonic val^","title":"Returns"},{"location":"time-_ClockMonotonic/#public-functions","text":"","title":"Public Functions"},{"location":"time-_ClockMonotonic/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"time-_ClockMonotonic/#returns_1","text":"U32 val","title":"Returns"},{"location":"time-_ClockMonotonic/#eq","text":"[Source] fun box eq( that: _ClockMonotonic val) : Bool val","title":"eq"},{"location":"time-_ClockMonotonic/#parameters","text":"that: _ClockMonotonic val","title":"Parameters"},{"location":"time-_ClockMonotonic/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_ClockMonotonic/#ne","text":"[Source] fun box ne( that: _ClockMonotonic val) : Bool val","title":"ne"},{"location":"time-_ClockMonotonic/#parameters_1","text":"that: _ClockMonotonic val","title":"Parameters"},{"location":"time-_ClockMonotonic/#returns_3","text":"Bool val","title":"Returns"},{"location":"time-_ClockRealtime/","text":"_ClockRealtime \u00b6 [Source] primitive val _ClockRealtime Constructors \u00b6 create \u00b6 [Source] new val create() : _ClockRealtime val^ Returns \u00b6 _ClockRealtime val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : U32 val Returns \u00b6 U32 val eq \u00b6 [Source] fun box eq( that: _ClockRealtime val) : Bool val Parameters \u00b6 that: _ClockRealtime val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: _ClockRealtime val) : Bool val Parameters \u00b6 that: _ClockRealtime val Returns \u00b6 Bool val","title":"primitive _ClockRealtime"},{"location":"time-_ClockRealtime/#_clockrealtime","text":"[Source] primitive val _ClockRealtime","title":"_ClockRealtime"},{"location":"time-_ClockRealtime/#constructors","text":"","title":"Constructors"},{"location":"time-_ClockRealtime/#create","text":"[Source] new val create() : _ClockRealtime val^","title":"create"},{"location":"time-_ClockRealtime/#returns","text":"_ClockRealtime val^","title":"Returns"},{"location":"time-_ClockRealtime/#public-functions","text":"","title":"Public Functions"},{"location":"time-_ClockRealtime/#apply","text":"[Source] fun box apply() : U32 val","title":"apply"},{"location":"time-_ClockRealtime/#returns_1","text":"U32 val","title":"Returns"},{"location":"time-_ClockRealtime/#eq","text":"[Source] fun box eq( that: _ClockRealtime val) : Bool val","title":"eq"},{"location":"time-_ClockRealtime/#parameters","text":"that: _ClockRealtime val","title":"Parameters"},{"location":"time-_ClockRealtime/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_ClockRealtime/#ne","text":"[Source] fun box ne( that: _ClockRealtime val) : Bool val","title":"ne"},{"location":"time-_ClockRealtime/#parameters_1","text":"that: _ClockRealtime val","title":"Parameters"},{"location":"time-_ClockRealtime/#returns_3","text":"Bool val","title":"Returns"},{"location":"time-_TimingWheel/","text":"_TimingWheel \u00b6 [Source] A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. class ref _TimingWheel Constructors \u00b6 create \u00b6 [Source] Create a timing wheel at the given hierarchical level. new ref create( index: USize val) : _TimingWheel ref^ Parameters \u00b6 index: USize val Returns \u00b6 _TimingWheel ref^ Public Functions \u00b6 schedule \u00b6 [Source] Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. fun ref schedule( timer: Timer ref) : None val Parameters \u00b6 timer: Timer ref Returns \u00b6 None val advance \u00b6 [Source] Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. fun ref advance( list: List[Timer ref] ref, current: U64 val, elapsed: U64 val) : Bool val Parameters \u00b6 list: List [ Timer ref] ref current: U64 val elapsed: U64 val Returns \u00b6 Bool val next \u00b6 [Source] Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. fun box next( current: U64 val) : U64 val Parameters \u00b6 current: U64 val Returns \u00b6 U64 val clear \u00b6 [Source] Cancels all pending timers. fun ref clear() : None val Returns \u00b6 None val Private Functions \u00b6 _slot \u00b6 [Source] Return the slot for a given time. fun box _slot( time: U64 val) : U64 val Parameters \u00b6 time: U64 val Returns \u00b6 U64 val _bits \u00b6 [Source] fun tag _bits() : USize val Returns \u00b6 USize val _max \u00b6 [Source] fun tag _max() : USize val Returns \u00b6 USize val _mask \u00b6 [Source] fun tag _mask() : U64 val Returns \u00b6 U64 val","title":"class _TimingWheel"},{"location":"time-_TimingWheel/#_timingwheel","text":"[Source] A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. class ref _TimingWheel","title":"_TimingWheel"},{"location":"time-_TimingWheel/#constructors","text":"","title":"Constructors"},{"location":"time-_TimingWheel/#create","text":"[Source] Create a timing wheel at the given hierarchical level. new ref create( index: USize val) : _TimingWheel ref^","title":"create"},{"location":"time-_TimingWheel/#parameters","text":"index: USize val","title":"Parameters"},{"location":"time-_TimingWheel/#returns","text":"_TimingWheel ref^","title":"Returns"},{"location":"time-_TimingWheel/#public-functions","text":"","title":"Public Functions"},{"location":"time-_TimingWheel/#schedule","text":"[Source] Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. fun ref schedule( timer: Timer ref) : None val","title":"schedule"},{"location":"time-_TimingWheel/#parameters_1","text":"timer: Timer ref","title":"Parameters"},{"location":"time-_TimingWheel/#returns_1","text":"None val","title":"Returns"},{"location":"time-_TimingWheel/#advance","text":"[Source] Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. fun ref advance( list: List[Timer ref] ref, current: U64 val, elapsed: U64 val) : Bool val","title":"advance"},{"location":"time-_TimingWheel/#parameters_2","text":"list: List [ Timer ref] ref current: U64 val elapsed: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_2","text":"Bool val","title":"Returns"},{"location":"time-_TimingWheel/#next","text":"[Source] Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. fun box next( current: U64 val) : U64 val","title":"next"},{"location":"time-_TimingWheel/#parameters_3","text":"current: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_3","text":"U64 val","title":"Returns"},{"location":"time-_TimingWheel/#clear","text":"[Source] Cancels all pending timers. fun ref clear() : None val","title":"clear"},{"location":"time-_TimingWheel/#returns_4","text":"None val","title":"Returns"},{"location":"time-_TimingWheel/#private-functions","text":"","title":"Private Functions"},{"location":"time-_TimingWheel/#_slot","text":"[Source] Return the slot for a given time. fun box _slot( time: U64 val) : U64 val","title":"_slot"},{"location":"time-_TimingWheel/#parameters_4","text":"time: U64 val","title":"Parameters"},{"location":"time-_TimingWheel/#returns_5","text":"U64 val","title":"Returns"},{"location":"time-_TimingWheel/#_bits","text":"[Source] fun tag _bits() : USize val","title":"_bits"},{"location":"time-_TimingWheel/#returns_6","text":"USize val","title":"Returns"},{"location":"time-_TimingWheel/#_max","text":"[Source] fun tag _max() : USize val","title":"_max"},{"location":"time-_TimingWheel/#returns_7","text":"USize val","title":"Returns"},{"location":"time-_TimingWheel/#_mask","text":"[Source] fun tag _mask() : U64 val","title":"_mask"},{"location":"time-_TimingWheel/#returns_8","text":"U64 val","title":"Returns"},{"location":"src/assert/assert/","text":"\"\"\" # Assert package Contains runtime assertions. If you are looking for assertion that only run when your code was compiled with the `debug` flag, check out `Assert`. For assertions that are always enabled, check out `Fact`. \"\"\" primitive Assert \"\"\" This is a debug only assertion. If the test is false, it will print any supplied error message to stderr and raise an error. \"\"\" fun apply(test: Bool, msg: String = \"\") ? => ifdef debug then Fact(test, msg)? end primitive Fact \"\"\" This is an assertion that is always enabled. If the test is false, it will print any supplied error message to stderr and raise an error. \"\"\" fun apply(test: Bool, msg: String = \"\") ? => if not test then if msg.size() > 0 then @fprintf[I32](@pony_os_stderr[Pointer[U8]](), \"%s\\n\".cstring(), msg.cstring()) end error end","title":"assert.pony"},{"location":"src/backpressure/auth/","text":"primitive ApplyReleaseBackpressureAuth new create(from: AmbientAuth) => None","title":"auth.pony"},{"location":"src/backpressure/backpressure/","text":"\"\"\" # Backpressure Package The Backpressure package allows Pony programmers to participate in Pony's runtime backpressure system. The goal of the backpressure system is to prevent an actor's mailbox from growing at an unbounded rate. At a high level, the runtime backpressure system works by adjusting the scheduling of actors. When an actor becomes overloaded, the Pony runtime will deprioritize scheduling the actors that are sending to it. This change in scheduling allows the overloaded actor to catch up. The Pony runtime can detect overloading based on message queue size. However, the overloading of some types of actors is harder to detect. Let's take the case of actors like `TCPConnection`. `TCPConnection` manages a socket for sending data to and receiving data from another process. TCP connections can experience backpressure from outside our Pony program that prevents them from sending. There's no way for the Pony runtime to detect this, so intervention by the programmer is needed. `TCPConnection` is a single example. This Backpressure package exists to allow a programmer to indicate to the runtime that a given actor is experiencing pressure and sending messages to it should be adjusted accordingly. Any actor that needs to be able to tell the runtime to \"send me messages slower\" due to external conditions can do so via this package. Additionally, actors that maintain their own internal queues of any sort, say for buffering, are also prime candidates for using this package. If an actor's internal queue grows too large, it can call `Backpressure.apply` to let the runtime know it is under pressure. ## Example program ```pony // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use \"backpressure\" use \"collections\" use \"net\" class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) => _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) => _out.print(\"Experiencing backpressure!\") Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) => _out.print(\"Releasing backpressure!\") Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, \"\", \"7669\") end ``` ## Caveat The runtime backpressure is a powerful system. By intervening, programmers can create deadlocks. Any call to `Backpressure.apply` should be matched by a corresponding call to `Backpressure.release`. Authorization via the `ApplyReleaseBackpressureAuth` capability is required to apply or release backpressure. By requiring that the caller have a token to apply or release a backpressure, rouge 3rd party library code can't run wild and unknowingly interfere with the runtime. \"\"\" use @pony_apply_backpressure[None]() use @pony_release_backpressure[None]() type BackpressureAuth is (AmbientAuth | ApplyReleaseBackpressureAuth) primitive Backpressure fun apply(auth: BackpressureAuth) => @pony_apply_backpressure() fun release(auth: BackpressureAuth) => @pony_release_backpressure()","title":"backpressure.pony"},{"location":"src/buffered/reader/","text":"use \"collections\" class Reader \"\"\" Store network data and provide a parsing interface. `Reader` provides a way to extract typed data from a sequence of bytes. The `Reader` manages the underlying data structures to provide a read cursor over a contiguous sequence of bytes. It is useful for decoding data that is received over a network or stored in a file. Chunk of bytes are added to the `Reader` using the `append` method, and typed data is extracted using the getter methods. For example, suppose we have a UDP-based network data protocol where messages consist of the following: * `list_size` - the number of items in the following list of items as a big-endian 32-bit integer * zero or more items of the following data: * a big-endian 64-bit floating point number * a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: ``` [message_length][list_size][float1][string1][float2][string2]... ``` The following program uses a `Reader` to decode a message of this type and print them: ```pony use \"buffered\" use \"collections\" class Notify is InputNotify let _env: Env new create(env: Env) => _env = env fun ref apply(data: Array[U8] iso) => let rb = Reader rb.append(consume data) try while true do let len = rb.i32_be()? let items = rb.i32_be()?.usize() for range in Range(0, items) do let f = rb.f32_be()? let str_len = rb.i32_be()?.usize() let str = String.from_array(rb.block(str_len)?) _env.out.print(\"[(\" + f.string() + \"), (\" + str + \")]\") end end end actor Main new create(env: Env) => env.input(recover Notify(env) end, 1024) ``` \"\"\" embed _chunks: List[(Array[U8] val, USize)] = _chunks.create() var _available: USize = 0 fun size(): USize => \"\"\" Return the number of available bytes. \"\"\" _available fun ref clear() => \"\"\" Discard all pending data. \"\"\" _chunks.clear() _available = 0 fun ref append(data: ByteSeq) => \"\"\" Add a chunk of data. \"\"\" let data_array = match data | let data': Array[U8] val => data' | let data': String => data'.array() end _available = _available + data_array.size() _chunks.push((data_array, 0)) fun ref skip(n: USize) ? => \"\"\" Skip n bytes. \"\"\" if _available >= n then _available = _available - n var rem = n while rem > 0 do let node = _chunks.head()? (var data, var offset) = node()? let avail = data.size() - offset if avail > rem then node()? = (data, offset + rem) break end rem = rem - avail _chunks.shift()? end else error end fun ref block(len: USize): Array[U8] iso^ ? => \"\"\" Return a block as a contiguous chunk of memory. Will throw an error if you request a block larger than what is currently stored in the `Reader`. \"\"\" if _available < len then error end _available = _available - len var out = recover Array[U8] .> undefined(len) end var i = USize(0) while i < len do let node = _chunks.head()? (let data, let offset) = node()? let avail = data.size() - offset let need = len - i let copy_len = need.min(avail) out = recover let r = consume ref out data.copy_to(r, offset, i, copy_len) consume r end if avail > need then node()? = (data, offset + need) break end i = i + copy_len _chunks.shift()? end out fun ref read_until(separator: U8): Array[U8] iso^ ? => \"\"\" Find the first occurrence of the separator and return the block of bytes before its position. The separator is not included in the returned array, but it is removed from the buffer. To read a line of text, prefer line() that handles \\n and \\r\\n. \"\"\" let b = block(_distance_of(separator)? - 1)? u8()? b fun ref line(keep_line_breaks: Bool = false): String iso^ ? => \"\"\" Return a \\n or \\r\\n terminated line as a string. By default the newline is not included in the returned string, but it is removed from the buffer. Set `keep_line_breaks` to `true` to keep the line breaks in the returned line. \"\"\" let len = _search_length()? _available = _available - len var out = recover String(len) end var i = USize(0) while i < len do let node = _chunks.head()? (let data, let offset) = node()? let avail = data.size() - offset let need = len - i let copy_len = need.min(avail) out.append(data, offset, copy_len) if avail > need then node()? = (data, offset + need) break end i = i + copy_len _chunks.shift()? end let trunc_len: USize = if keep_line_breaks then 0 elseif (len >= 2) and (out.at_offset(-2)? == '\\r') then 2 else 1 end out.truncate(len - trunc_len) consume out fun ref u8(): U8 ? => \"\"\" Get a U8. Raise an error if there isn't enough data. \"\"\" if _available >= 1 then _byte()? else error end fun ref i8(): I8 ? => \"\"\" Get an I8. \"\"\" u8()?.i8() fun ref u16_be(): U16 ? => \"\"\" Get a big-endian U16. \"\"\" let num_bytes = U16(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef bigendian then data.read_u16(offset)? else data.read_u16(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u16() << 8) or u8()?.u16() end else error end fun ref u16_le(): U16 ? => \"\"\" Get a little-endian U16. \"\"\" let num_bytes = U16(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef littleendian then data.read_u16(offset)? else data.read_u16(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u16() or (u8()?.u16() << 8) end else error end fun ref i16_be(): I16 ? => \"\"\" Get a big-endian I16. \"\"\" u16_be()?.i16() fun ref i16_le(): I16 ? => \"\"\" Get a little-endian I16. \"\"\" u16_le()?.i16() fun ref u32_be(): U32 ? => \"\"\" Get a big-endian U32. \"\"\" let num_bytes = U32(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef bigendian then data.read_u32(offset)? else data.read_u32(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u32() << 24) or (u8()?.u32() << 16) or (u8()?.u32() << 8) or u8()?.u32() end else error end fun ref u32_le(): U32 ? => \"\"\" Get a little-endian U32. \"\"\" let num_bytes = U32(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef littleendian then data.read_u32(offset)? else data.read_u32(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u32() or (u8()?.u32() << 8) or (u8()?.u32() << 16) or (u8()?.u32() << 24) end else error end fun ref i32_be(): I32 ? => \"\"\" Get a big-endian I32. \"\"\" u32_be()?.i32() fun ref i32_le(): I32 ? => \"\"\" Get a little-endian I32. \"\"\" u32_le()?.i32() fun ref u64_be(): U64 ? => \"\"\" Get a big-endian U64. \"\"\" let num_bytes = U64(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef bigendian then data.read_u64(offset)? else data.read_u64(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u64() << 56) or (u8()?.u64() << 48) or (u8()?.u64() << 40) or (u8()?.u64() << 32) or (u8()?.u64() << 24) or (u8()?.u64() << 16) or (u8()?.u64() << 8) or u8()?.u64() end else error end fun ref u64_le(): U64 ? => \"\"\" Get a little-endian U64. \"\"\" let num_bytes = U64(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef littleendian then data.read_u64(offset)? else data.read_u64(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u64() or (u8()?.u64() << 8) or (u8()?.u64() << 16) or (u8()?.u64() << 24) or (u8()?.u64() << 32) or (u8()?.u64() << 40) or (u8()?.u64() << 48) or (u8()?.u64() << 56) end else error end fun ref i64_be(): I64 ? => \"\"\" Get a big-endian I64. \"\"\" u64_be()?.i64() fun ref i64_le(): I64 ? => \"\"\" Get a little-endian I64. \"\"\" u64_le()?.i64() fun ref u128_be(): U128 ? => \"\"\" Get a big-endian U128. \"\"\" let num_bytes = U128(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef bigendian then data.read_u128(offset)? else data.read_u128(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed (u8()?.u128() << 120) or (u8()?.u128() << 112) or (u8()?.u128() << 104) or (u8()?.u128() << 96) or (u8()?.u128() << 88) or (u8()?.u128() << 80) or (u8()?.u128() << 72) or (u8()?.u128() << 64) or (u8()?.u128() << 56) or (u8()?.u128() << 48) or (u8()?.u128() << 40) or (u8()?.u128() << 32) or (u8()?.u128() << 24) or (u8()?.u128() << 16) or (u8()?.u128() << 8) or u8()?.u128() end else error end fun ref u128_le(): U128 ? => \"\"\" Get a little-endian U128. \"\"\" let num_bytes = U128(0).bytewidth() if _available >= num_bytes then let node = _chunks.head()? (var data, var offset) = node()? if (data.size() - offset) >= num_bytes then let r = ifdef littleendian then data.read_u128(offset)? else data.read_u128(offset)?.bswap() end offset = offset + num_bytes _available = _available - num_bytes if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r else // single array did not have all the bytes needed u8()?.u128() or (u8()?.u128() << 8) or (u8()?.u128() << 16) or (u8()?.u128() << 24) or (u8()?.u128() << 32) or (u8()?.u128() << 40) or (u8()?.u128() << 48) or (u8()?.u128() << 56) or (u8()?.u128() << 64) or (u8()?.u128() << 72) or (u8()?.u128() << 80) or (u8()?.u128() << 88) or (u8()?.u128() << 96) or (u8()?.u128() << 104) or (u8()?.u128() << 112) or (u8()?.u128() << 120) end else error end fun ref i128_be(): I128 ? => \"\"\" Get a big-endian I129. \"\"\" u128_be()?.i128() fun ref i128_le(): I128 ? => \"\"\" Get a little-endian I128. \"\"\" u128_le()?.i128() fun ref f32_be(): F32 ? => \"\"\" Get a big-endian F32. \"\"\" F32.from_bits(u32_be()?) fun ref f32_le(): F32 ? => \"\"\" Get a little-endian F32. \"\"\" F32.from_bits(u32_le()?) fun ref f64_be(): F64 ? => \"\"\" Get a big-endian F64. \"\"\" F64.from_bits(u64_be()?) fun ref f64_le(): F64 ? => \"\"\" Get a little-endian F64. \"\"\" F64.from_bits(u64_le()?) fun ref _byte(): U8 ? => \"\"\" Get a single byte. \"\"\" let node = _chunks.head()? (var data, var offset) = node()? let r = data(offset)? offset = offset + 1 _available = _available - 1 if offset < data.size() then node()? = (data, offset) else _chunks.shift()? end r fun box peek_u8(offset: USize = 0): U8 ? => \"\"\" Peek at a U8 at the given offset. Raise an error if there isn't enough data. \"\"\" _peek_byte(offset)? fun box peek_i8(offset: USize = 0): I8 ? => \"\"\" Peek at an I8. \"\"\" peek_u8(offset)?.i8() fun box peek_u16_be(offset: USize = 0): U16 ? => \"\"\" Peek at a big-endian U16. \"\"\" (peek_u8(offset)?.u16() << 8) or peek_u8(offset + 1)?.u16() fun box peek_u16_le(offset: USize = 0): U16 ? => \"\"\" Peek at a little-endian U16. \"\"\" peek_u8(offset)?.u16() or (peek_u8(offset + 1)?.u16() << 8) fun box peek_i16_be(offset: USize = 0): I16 ? => \"\"\" Peek at a big-endian I16. \"\"\" peek_u16_be(offset)?.i16() fun box peek_i16_le(offset: USize = 0): I16 ? => \"\"\" Peek at a little-endian I16. \"\"\" peek_u16_le(offset)?.i16() fun box peek_u32_be(offset: USize = 0): U32 ? => \"\"\" Peek at a big-endian U32. \"\"\" (peek_u16_be(offset)?.u32() << 16) or peek_u16_be(offset + 2)?.u32() fun box peek_u32_le(offset: USize = 0): U32 ? => \"\"\" Peek at a little-endian U32. \"\"\" peek_u16_le(offset)?.u32() or (peek_u16_le(offset + 2)?.u32() << 16) fun box peek_i32_be(offset: USize = 0): I32 ? => \"\"\" Peek at a big-endian I32. \"\"\" peek_u32_be(offset)?.i32() fun box peek_i32_le(offset: USize = 0): I32 ? => \"\"\" Peek at a little-endian I32. \"\"\" peek_u32_le(offset)?.i32() fun box peek_u64_be(offset: USize = 0): U64 ? => \"\"\" Peek at a big-endian U64. \"\"\" (peek_u32_be(offset)?.u64() << 32) or peek_u32_be(offset + 4)?.u64() fun box peek_u64_le(offset: USize = 0): U64 ? => \"\"\" Peek at a little-endian U64. \"\"\" peek_u32_le(offset)?.u64() or (peek_u32_le(offset + 4)?.u64() << 32) fun box peek_i64_be(offset: USize = 0): I64 ? => \"\"\" Peek at a big-endian I64. \"\"\" peek_u64_be(offset)?.i64() fun box peek_i64_le(offset: USize = 0): I64 ? => \"\"\" Peek at a little-endian I64. \"\"\" peek_u64_le(offset)?.i64() fun box peek_u128_be(offset: USize = 0): U128 ? => \"\"\" Peek at a big-endian U128. \"\"\" (peek_u64_be(offset)?.u128() << 64) or peek_u64_be(offset + 8)?.u128() fun box peek_u128_le(offset: USize = 0): U128 ? => \"\"\" Peek at a little-endian U128. \"\"\" peek_u64_le(offset)?.u128() or (peek_u64_le(offset + 8)?.u128() << 64) fun box peek_i128_be(offset: USize = 0): I128 ? => \"\"\" Peek at a big-endian I129. \"\"\" peek_u128_be(offset)?.i128() fun box peek_i128_le(offset: USize = 0): I128 ? => \"\"\" Peek at a little-endian I128. \"\"\" peek_u128_le(offset)?.i128() fun box peek_f32_be(offset: USize = 0): F32 ? => \"\"\" Peek at a big-endian F32. \"\"\" F32.from_bits(peek_u32_be(offset)?) fun box peek_f32_le(offset: USize = 0): F32 ? => \"\"\" Peek at a little-endian F32. \"\"\" F32.from_bits(peek_u32_le(offset)?) fun box peek_f64_be(offset: USize = 0): F64 ? => \"\"\" Peek at a big-endian F64. \"\"\" F64.from_bits(peek_u64_be(offset)?) fun box peek_f64_le(offset: USize = 0): F64 ? => \"\"\" Peek at a little-endian F64. \"\"\" F64.from_bits(peek_u64_le(offset)?) fun box _peek_byte(offset: USize = 0): U8 ? => \"\"\" Get the byte at the given offset without moving the cursor forward. Raise an error if the given offset is not yet available. \"\"\" var offset' = offset var iter = _chunks.nodes() while true do let node = iter.next()? (var data, var node_offset) = node()? offset' = offset' + node_offset let data_size = data.size() if offset' >= data_size then offset' = offset' - data_size else return data(offset')? end end error fun ref _distance_of(byte: U8): USize ? => \"\"\" Get the distance to the first occurrence of the given byte \"\"\" if _chunks.size() == 0 then error end var node = _chunks.head()? var search_len: USize = 0 while true do (var data, var offset) = node()? try let len = (search_len + data.find(byte, offset)? + 1) - offset search_len = 0 return len end search_len = search_len + (data.size() - offset) if not node.has_next() then break end node = node.next() as ListNode[(Array[U8] val, USize)] end error fun ref _search_length(): USize ? => \"\"\" Get the length of a pending line. Raise an error if there is no pending line. \"\"\" _distance_of('\\n')?","title":"reader.pony"},{"location":"src/buffered/writer/","text":"class Writer \"\"\" A buffer for building messages. `Writer` provides an way to create byte sequences using common data encodings. The `Writer` manages the underlying arrays and sizes. It is useful for encoding data to send over a network or store in a file. Once a message has been built you can call `done()` to get the message's `ByteSeq`s, and you can then reuse the `Writer` for creating a new message. For example, suppose we have a TCP-based network data protocol where messages consist of the following: * `message_length` - the number of bytes in the message as a big-endian 32-bit integer * `list_size` - the number of items in the following list of items as a big-endian 32-bit integer * zero or more items of the following data: * a big-endian 64-bit floating point number * a string that starts with a big-endian 32-bit integer that specifies the length of the string, followed by a number of bytes that represent the string A message would be something like this: ``` [message_length][list_size][float1][string1][float2][string2]... ``` The following program uses a write buffer to encode an array of tuples as a message of this type: ```pony use \"buffered\" actor Main new create(env: Env) => let wb = Writer let messages = [[(F32(3597.82), \"Anderson\"); (F32(-7979.3), \"Graham\")] [(F32(3.14159), \"Hopper\"); (F32(-83.83), \"Jones\")]] for items in messages.values() do wb.i32_be((items.size() / 2).i32()) for (f, s) in items.values() do wb.f32_be(f) wb.i32_be(s.size().i32()) wb.write(s.array()) end let wb_msg = Writer wb_msg.i32_be(wb.size().i32()) wb_msg.writev(wb.done()) env.out.writev(wb_msg.done()) end ``` \"\"\" var _chunks: Array[ByteSeq] iso = recover Array[ByteSeq] end var _current: Array[U8] iso = recover Array[U8] end var _size: USize = 0 fun ref reserve_chunks(size': USize) => \"\"\" Reserve space for size' chunks. This needs to be recalled after every call to `done` as `done` resets the chunks. \"\"\" _chunks.reserve(size') fun ref reserve_current(size': USize) => \"\"\" Reserve space for size bytes in `_current`. \"\"\" _current.reserve(_current.size() + size') fun size(): USize => _size fun ref u8(data: U8) => \"\"\" Write a byte to the buffer. \"\"\" let num_bytes = U8(0).bytewidth() _current.push_u8(data) _size = _size + num_bytes fun ref u16_le(data: U16) => \"\"\" Write a U16 to the buffer in little-endian byte order. \"\"\" let num_bytes = U16(0).bytewidth() ifdef littleendian then _current.push_u16(data) else _current.push_u16(data.bswap()) end _size = _size + num_bytes fun ref u16_be(data: U16) => \"\"\" Write a U16 to the buffer in big-endian byte order. \"\"\" let num_bytes = U16(0).bytewidth() ifdef bigendian then _current.push_u16(data) else _current.push_u16(data.bswap()) end _size = _size + num_bytes fun ref i16_le(data: I16) => \"\"\" Write an I16 to the buffer in little-endian byte order. \"\"\" u16_le(data.u16()) fun ref i16_be(data: I16) => \"\"\" Write an I16 to the buffer in big-endian byte order. \"\"\" u16_be(data.u16()) fun ref u32_le(data: U32) => \"\"\" Write a U32 to the buffer in little-endian byte order. \"\"\" let num_bytes = U32(0).bytewidth() ifdef littleendian then _current.push_u32(data) else _current.push_u32(data.bswap()) end _size = _size + num_bytes fun ref u32_be(data: U32) => \"\"\" Write a U32 to the buffer in big-endian byte order. \"\"\" let num_bytes = U32(0).bytewidth() ifdef bigendian then _current.push_u32(data) else _current.push_u32(data.bswap()) end _size = _size + num_bytes fun ref i32_le(data: I32) => \"\"\" Write an I32 to the buffer in little-endian byte order. \"\"\" u32_le(data.u32()) fun ref i32_be(data: I32) => \"\"\" Write an I32 to the buffer in big-endian byte order. \"\"\" u32_be(data.u32()) fun ref f32_le(data: F32) => \"\"\" Write an F32 to the buffer in little-endian byte order. \"\"\" u32_le(data.bits()) fun ref f32_be(data: F32) => \"\"\" Write an F32 to the buffer in big-endian byte order. \"\"\" u32_be(data.bits()) fun ref u64_le(data: U64) => \"\"\" Write a U64 to the buffer in little-endian byte order. \"\"\" let num_bytes = U64(0).bytewidth() ifdef littleendian then _current.push_u64(data) else _current.push_u64(data.bswap()) end _size = _size + num_bytes fun ref u64_be(data: U64) => \"\"\" Write a U64 to the buffer in big-endian byte order. \"\"\" let num_bytes = U64(0).bytewidth() ifdef bigendian then _current.push_u64(data) else _current.push_u64(data.bswap()) end _size = _size + num_bytes fun ref i64_le(data: I64) => \"\"\" Write an I64 to the buffer in little-endian byte order. \"\"\" u64_le(data.u64()) fun ref i64_be(data: I64) => \"\"\" Write an I64 to the buffer in big-endian byte order. \"\"\" u64_be(data.u64()) fun ref f64_le(data: F64) => \"\"\" Write an F64 to the buffer in little-endian byte order. \"\"\" u64_le(data.bits()) fun ref f64_be(data: F64) => \"\"\" Write an F64 to the buffer in big-endian byte order. \"\"\" u64_be(data.bits()) fun ref u128_le(data: U128) => \"\"\" Write a U128 to the buffer in little-endian byte order. \"\"\" let num_bytes = U128(0).bytewidth() ifdef littleendian then _current.push_u128(data) else _current.push_u128(data.bswap()) end _size = _size + num_bytes fun ref u128_be(data: U128) => \"\"\" Write a U128 to the buffer in big-endian byte order. \"\"\" let num_bytes = U128(0).bytewidth() ifdef bigendian then _current.push_u128(data) else _current.push_u128(data.bswap()) end _size = _size + num_bytes fun ref i128_le(data: I128) => \"\"\" Write an I128 to the buffer in little-endian byte order. \"\"\" u128_le(data.u128()) fun ref i128_be(data: I128) => \"\"\" Write an I128 to the buffer in big-endian byte order. \"\"\" u128_be(data.u128()) fun ref write(data: ByteSeq) => \"\"\" Write a ByteSeq to the buffer. \"\"\" // if `data` is 1 cacheline or less in size // copy it into the existing `_current` array // to coalesce multiple tiny arrays // into a single bigger array if data.size() <= 64 then match data | let d: String => let a = d.array() _current.copy_from(a, 0, _current.size(), a.size()) | let d: Array[U8] val => _current.copy_from(d, 0, _current.size(), d.size()) end _size = _size + data.size() else _append_current() _chunks.push(data) _size = _size + data.size() end fun ref writev(data: ByteSeqIter) => \"\"\" Write ByteSeqs to the buffer. \"\"\" for chunk in data.values() do write(chunk) end fun ref done(): Array[ByteSeq] iso^ => \"\"\" Return an array of buffered ByteSeqs and reset the Writer's buffer. \"\"\" _append_current() _size = 0 _chunks = recover Array[ByteSeq] end fun ref _append_current() => if _current.size() > 0 then _chunks.push(_current = recover Array[U8] end) end","title":"writer.pony"},{"location":"src/builtin/_arithmetic/","text":"primitive _SignedArithmetic fun fld[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => if (y == T.from[U8](0)) or ((x == T.min_value()) and (y == T.from[I8](-1))) then T.from[U8](0) else _SignedUnsafeArithmetic.fld_unsafe[T, U](x, y) end fun mod[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => // stupid special case for division edge cases if (y == T.from[U8](0)) or ((x == T.min_value()) and (y == T.from[I8](-1))) then T.from[U8](0) else _SignedUnsafeArithmetic.mod_unsafe[T, U](x, y) end primitive _SignedUnsafeArithmetic fun fld_unsafe[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => let div_res = x /~ y if ((x xor y) < T.from[U8](0)) and ((div_res *~ y) != x) then div_res - T.from[U8](1) else div_res end fun mod_unsafe[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T => x -~ (fld_unsafe[T, U](x, y) *~ y) primitive _UnsignedCheckedArithmetic fun div_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => (x / y, (y == T.from[U8](0))) fun rem_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => (x % y, y == T.from[U8](0)) fun fld_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => div_checked[T](x, y) fun mod_checked[T: UnsignedInteger[T] val](x: T, y: T): (T, Bool) => rem_checked[T](x, y) primitive _SignedCheckedArithmetic fun _mul_checked[U: UnsignedInteger[U] val, T: (Signed & SignedInteger[T, U] val)](x: T, y: T): (T, Bool) => \"\"\" basically exactly what the runtime functions __muloti4, mulodi4 etc. are doing and roughly as fast as these. Additionally on (at least some) 32 bit systems, the runtime function for checked 64 bit integer addition __mulodi4 is not available. So we shouldn't use: `@\"llvm.smul.with.overflow.i64\"[(I64, Bool)](this, y)` Also see https://bugs.llvm.org/show_bug.cgi?id=14469 That's basically why we rolled our own. \"\"\" let result = x * y if x == T.min_value() then return (result, (y != T.from[I8](0)) and (y != T.from[I8](1))) end if y == T.min_value() then return (result, (x != T.from[I8](0)) and (x != T.from[I8](1))) end let x_neg = x >> (x.bitwidth() - U.from[U8](1)) let x_abs = (x xor x_neg) - x_neg let y_neg = y >> (x.bitwidth() - U.from[U8](1)) let y_abs = (y xor y_neg) - y_neg if ((x_abs < T.from[I8](2)) or (y_abs < T.from[I8](2))) then return (result, false) end if (x_neg == y_neg) then (result, (x_abs > (T.max_value() / y_abs))) else (result, (x_abs > (T.min_value() / -y_abs))) end fun div_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x / y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun rem_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x % y, (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun fld_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x.fld(y), (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) fun mod_checked[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, Bool) => (x.mod(y), (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value()))) trait _PartialArithmetic fun add_partial[T: (Integer[T] val & Int)](x: T, y: T): T? => (let r: T, let overflow: Bool) = x.addc(y) if overflow then error else r end fun sub_partial[T: (Integer[T] val & Int)](x: T, y: T): T? => (let r: T, let overflow: Bool) = x.subc(y) if overflow then error else r end fun mul_partial[T: (Integer[T] val & Int)](x: T, y: T): T? => (let r: T, let overflow: Bool) = x.mulc(y) if overflow then error else r end primitive _UnsignedPartialArithmetic is _PartialArithmetic fun div_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x /~ y end fun rem_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x %~ y end fun divrem_partial[T: UnsignedInteger[T] val](x: T, y: T): (T, T)? => if (y == T.from[U8](0)) then error else (x /~ y, x %~ y) end fun fld_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x.fld(y) end fun mod_partial[T: UnsignedInteger[T] val](x: T, y: T): T? => if (y == T.from[U8](0)) then error else x.mod(y) end primitive _SignedPartialArithmetic is _PartialArithmetic fun div_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x /~ y end fun rem_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x %~ y end fun divrem_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): (T, T)? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else (x /~ y, x %~ y) end fun fld_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x.fld(y) end fun mod_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T, y: T): T? => if (y == T.from[I8](0)) or ((y == T.from[I8](I8(-1))) and (x == T.min_value())) then error else x.mod(y) end fun neg_partial[T: (SignedInteger[T, U] val & Signed), U: UnsignedInteger[U] val](x: T): T? => if x == T.min_value() then error else -~x end","title":"_arithmetic.pony"},{"location":"src/builtin/_to_string/","text":"primitive _ToString \"\"\" Worker type providing simple to string conversions for numbers. \"\"\" fun _u64(x: U64, neg: Bool): String iso^ => let table = \"0123456789\" let base: U64 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end if neg then s.push('-') end s .> reverse_in_place() end fun _u128(x: U128, neg: Bool): String iso^ => let table = \"0123456789\" let base: U128 = 10 recover var s = String(31) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = (value = value / base) - (value * base) s.push(table(index.usize())?) end end end if neg then s.push('-') end s .> reverse_in_place() end fun _f64(x: F64): String iso^ => recover var s = String(31) var f = String(31) .> append(\"%g\") ifdef windows then @_snprintf[I32](s.cstring(), s.space(), f.cstring(), x) else @snprintf[I32](s.cstring(), s.space(), f.cstring(), x) end s .> recalc() end","title":"_to_string.pony"},{"location":"src/builtin/ambient_auth/","text":"primitive AmbientAuth \"\"\" This type represents the root capability. When a Pony program starts, the Env passed to the Main actor contains an instance of the root capability. Ambient access to the root capability is denied outside of the builtin package. Inside the builtin package, only Env creates a Root. The root capability can be used by any package that wants to establish a principle of least authority. A typical usage is to have a parameter on a constructor for some resource that expects a limiting capability specific to the package, but will also accept the root capability as representing unlimited access. \"\"\" new _create() => None","title":"ambient_auth.pony"},{"location":"src/builtin/any/","text":"interface tag Any","title":"any.pony"},{"location":"src/builtin/array/","text":"class Array[A] is Seq[A] \"\"\" Contiguous, resizable memory to store elements of type A. ## Usage Creating an Array of String: ```pony let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] // array.size() == 3 // array.space() >= 3 ``` Creating an empty Array of String, which may hold at least 10 elements before requesting more space: ```pony let array = Array[String](10) // array.size() == 0 // array.space() >= 10 ``` Accessing elements can be done via the `apply(i: USize): this->A ?` method. The provided index might be out of bounds so `apply` is partial and has to be called within a try-catch block or inside another partial method: ```pony let array: Array[String] = [\"dog\"; \"cat\"; \"wombat\"] let is_second_element_wobat = try // indexes start from 0, so 1 is the second element array(1)? == \"wombat\" else false end ``` Adding and removing elements to and from the end of the Array can be done via `push` and `pop` methods. You could treat the array as a LIFO stack using those methods: ```pony while (array.size() > 0) do let elem = array.pop()? // do something with element end ``` Modifying the Array can be done via `update`, `insert` and `delete` methods which alter the Array at an arbitrary index, moving elements left (when deleting) or right (when inserting) as necessary. Iterating over the elements of an Array can be done using the `values` method: ```pony for element in array.values() do // do something with element end ``` ## Memory allocation Array allocates contiguous memory. It always allocates at least enough memory space to hold all of its elements. Space is the number of elements the Array can hold without allocating more memory. The `space()` method returns the number of elements an Array can hold. The `size()` method returns the number of elements the Array holds. Different data types require different amounts of memory. Array[U64] with size of 6 will take more memory than an Array[U8] of the same size. When creating an Array or adding more elements will calculate the next power of 2 of the requested number of elements and allocate that much space, with a lower bound of space for 8 elements. Here's a few examples of the space allocated when initialising an Array with various number of elements: | size | space | |------|-------| | 0 | 0 | | 1 | 8 | | 8 | 8 | | 9 | 16 | | 16 | 16 | | 17 | 32 | Call the `compact()` method to ask the GC to reclaim unused space. There are no guarantees that the GC will actually reclaim any space. \"\"\" var _size: USize var _alloc: USize var _ptr: Pointer[A] new create(len: USize = 0) => \"\"\" Create an array with zero elements, but space for len elements. \"\"\" _size = 0 if len > 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) else _alloc = 0 _ptr = Pointer[A] end new init(from: A^, len: USize) => \"\"\" Create an array of len elements, all initialised to the given value. \"\"\" _size = len if len > 0 then _alloc = len.next_pow2().max(len).max(8) _ptr = Pointer[A]._alloc(_alloc) var i: USize = 0 while i < len do _ptr._update(i, from) i = i + 1 end else _alloc = 0 _ptr = Pointer[A] end new from_cpointer(ptr: Pointer[A], len: USize, alloc: USize = 0) => \"\"\" Create an array from a C-style pointer and length. The contents are not copied. \"\"\" _size = len if alloc > len then _alloc = alloc else _alloc = len end _ptr = ptr fun _copy_to( ptr: Pointer[this->A!], copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) => \"\"\" Copy copy_len elements from this to that at specified offsets. \"\"\" _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[A] tag => \"\"\" Return the underlying C-style pointer. \"\"\" _ptr._offset(offset) fun size(): USize => \"\"\" The number of elements in the array. \"\"\" _size fun space(): USize => \"\"\" The available space in the array. \"\"\" _alloc fun ref reserve(len: USize) => \"\"\" Reserve space for len elements, including whatever elements are already in the array. Array space grows geometrically. \"\"\" if _alloc < len then _alloc = len.next_pow2().max(len).max(8) _ptr = _ptr._realloc(_alloc) end fun box _element_size(): USize => \"\"\" Element size in bytes for an element. \"\"\" _ptr._element_size() fun ref compact() => \"\"\" Try to remove unused space, making it available for garbage collection. The request may be ignored. \"\"\" if _size <= (512 / _ptr._element_size()) then if _size.next_pow2() != _alloc.next_pow2() then _alloc = _size.next_pow2() let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end elseif _size < _alloc then _alloc = _size let old_ptr = _ptr = Pointer[A]._alloc(_alloc) old_ptr._copy_to(_ptr._convert[A!](), _size) end fun ref undefined[B: (A & Real[B] val & Number) = A](len: USize) => \"\"\" Resize to len elements, populating previously empty elements with random memory. This is only allowed for an array of numbers. \"\"\" reserve(len) _size = len fun box read_u8[B: (A & Real[B] val & U8) = A](offset: USize): U8 ? => \"\"\" Reads a U8 from offset. This is only allowed for an array of U8s. \"\"\" if offset < _size then _ptr._offset(offset)._convert[U8]()._apply(0) else error end fun box read_u16[B: (A & Real[B] val & U8) = A](offset: USize): U16 ? => \"\"\" Reads a U16 from offset. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) <= _size then _ptr._offset(offset)._convert[U16]()._apply(0) else error end fun box read_u32[B: (A & Real[B] val & U8) = A](offset: USize): U32 ? => \"\"\" Reads a U32 from offset. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) <= _size then _ptr._offset(offset)._convert[U32]()._apply(0) else error end fun box read_u64[B: (A & Real[B] val & U8) = A](offset: USize): U64 ? => \"\"\" Reads a U64 from offset. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) <= _size then _ptr._offset(offset)._convert[U64]()._apply(0) else error end fun box read_u128[B: (A & Real[B] val & U8) = A](offset: USize): U128 ? => \"\"\" Reads a U128 from offset. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) <= _size then _ptr._offset(offset)._convert[U128]()._apply(0) else error end fun apply(i: USize): this->A ? => \"\"\" Get the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _size then _ptr._apply(i) else error end fun ref update_u8[B: (A & Real[B] val & U8) = A](offset: USize, value: U8): U8 ? => \"\"\" Write a U8 at offset. This is only allowed for an array of U8s. \"\"\" if offset < _size then _ptr._offset(offset)._convert[U8]()._update(0, value) else error end fun ref update_u16[B: (A & Real[B] val & U8) = A](offset: USize, value: U16): U16 ? => \"\"\" Write a U16 at offset. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() if (offset + u16_bytes) <= _size then _ptr._offset(offset)._convert[U16]()._update(0, value) else error end fun ref update_u32[B: (A & Real[B] val & U8) = A](offset: USize, value: U32): U32 ? => \"\"\" Write a U32 at offset. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() if (offset + u32_bytes) <= _size then _ptr._offset(offset)._convert[U32]()._update(0, value) else error end fun ref update_u64[B: (A & Real[B] val & U8) = A](offset: USize, value: U64): U64 ? => \"\"\" Write a U64 at offset. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() if (offset + u64_bytes) <= _size then _ptr._offset(offset)._convert[U64]()._update(0, value) else error end fun ref update_u128[B: (A & Real[B] val & U8) = A](offset: USize, value: U128): U128 ? => \"\"\" Write a U128 at offset. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() if (offset + u128_bytes) <= _size then _ptr._offset(offset)._convert[U128]()._update(0, value) else error end fun ref update(i: USize, value: A): A^ ? => \"\"\" Change the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _size then _ptr._update(i, consume value) else error end fun ref insert(i: USize, value: A) ? => \"\"\" Insert an element into the array. Elements after this are moved up by one index, extending the array. An out of bounds index raises an error. \"\"\" if i <= _size then reserve(_size + 1) _ptr._offset(i)._insert(1, _size - i) _ptr._update(i, consume value) _size = _size + 1 else error end fun ref delete(i: USize): A^ ? => \"\"\" Delete an element from the array. Elements after this are moved down by one index, compacting the array. An out of bounds index raises an error. The deleted element is returned. \"\"\" if i < _size then _size = _size - 1 _ptr._offset(i)._delete(1, _size - i) else error end fun ref truncate(len: USize) => \"\"\" Truncate an array to the given length, discarding excess elements. If the array is already smaller than len, do nothing. \"\"\" _size = _size.min(len) fun ref trim_in_place(from: USize = 0, to: USize = -1) => \"\"\" Trim the array to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new array nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this array and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[A] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): Array[A] val => \"\"\" Return a shared portion of this array, covering `from` until `to`. Both the original and the new array are immutable, as they share memory. The operation does not allocate a new array pointer nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' > 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (Array[A] iso^, Array[A] iso^) => \"\"\" Chops the array in half at the split point requested and returns both the left and right portions. The original array is trimmed in place and returned as the left portion. If the split point is larger than the array, the left portion is the original array and the right portion is a new empty array. Both arrays are isolated and mutable, as they do not share memory. The operation does not allocate a new array pointer nor copy elements. \"\"\" let start_ptr = cpointer(split_point) let size' = _size - _size.min(split_point) let alloc = _alloc - _size.min(split_point) trim_in_place(0, split_point) let right = recover if size' > 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume this, consume right) fun iso unchop(b: Array[A] iso): ((Array[A] iso^, Array[A] iso^) | Array[A] iso^) => \"\"\" Unchops two iso arrays to return the original array they were chopped from. Both input arrays are isolated and mutable and were originally chopped from a single array. This function checks that they are indeed two arrays chopped from the same original array and can be unchopped before doing the unchopping and returning the unchopped array. If the two arrays cannot be unchopped it returns both arrays without modifying them. The operation does not allocate a new array pointer nor copy elements. \"\"\" if _size == 0 then return consume b end if b.size() == 0 then return consume this end (let unchoppable, let a_left) = if (_size == _alloc) and (cpointer(_size) == b.cpointer()) then (true, true) elseif (b.size() == b.space()) and (b.cpointer(b.size()) == cpointer()) then (true, false) else (false, false) end if not unchoppable then return (consume this, consume b) end if a_left then _alloc = _alloc + b._alloc _size = _size + b._size consume this else b._alloc = b._alloc + _alloc b._size = b._size + _size consume b end fun ref copy_from[B: (A & Real[B] val & U8) = A]( src: Array[U8] box, src_idx: USize, dst_idx: USize, len: USize) => \"\"\" Copy len elements from src(src_idx) to this(dst_idx). Only works for Array[U8]. \"\"\" reserve(dst_idx + len) src._ptr._offset(src_idx)._copy_to(_ptr._convert[U8]()._offset(dst_idx), len) if _size < (dst_idx + len) then _size = dst_idx + len end fun copy_to( dst: Array[this->A!], src_idx: USize, dst_idx: USize, len: USize) => \"\"\" Copy len elements from this(src_idx) to dst(dst_idx). \"\"\" dst.reserve(dst_idx + len) _ptr._offset(src_idx)._copy_to(dst._ptr._offset(dst_idx), len) if dst._size < (dst_idx + len) then dst._size = dst_idx + len end fun ref remove(i: USize, n: USize) => \"\"\" Remove n elements from the array, beginning at index i. \"\"\" if i < _size then let count = n.min(_size - i) _size = _size - count _ptr._offset(i)._delete(count, _size - i) end fun ref clear() => \"\"\" Remove all elements from the array. \"\"\" _size = 0 fun ref push_u8[B: (A & Real[B] val & U8) = A](value: U8) => \"\"\" Add a U8 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u8_bytes = U8(0).bytewidth() reserve(_size + u8_bytes) _ptr._offset(_size)._convert[U8]()._update(0, value) _size = _size + u8_bytes fun ref push_u16[B: (A & Real[B] val & U8) = A](value: U16) => \"\"\" Add a U16 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u16_bytes = U16(0).bytewidth() reserve(_size + u16_bytes) _ptr._offset(_size)._convert[U16]()._update(0, value) _size = _size + u16_bytes fun ref push_u32[B: (A & Real[B] val & U8) = A](value: U32) => \"\"\" Add a U32 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u32_bytes = U32(0).bytewidth() reserve(_size + u32_bytes) _ptr._offset(_size)._convert[U32]()._update(0, value) _size = _size + u32_bytes fun ref push_u64[B: (A & Real[B] val & U8) = A](value: U64) => \"\"\" Add a U64 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u64_bytes = U64(0).bytewidth() reserve(_size + u64_bytes) _ptr._offset(_size)._convert[U64]()._update(0, value) _size = _size + u64_bytes fun ref push_u128[B: (A & Real[B] val & U8) = A](value: U128) => \"\"\" Add a U128 to the end of the array. This is only allowed for an array of U8s. \"\"\" let u128_bytes = U128(0).bytewidth() reserve(_size + u128_bytes) _ptr._offset(_size)._convert[U128]()._update(0, value) _size = _size + u128_bytes fun ref push(value: A) => \"\"\" Add an element to the end of the array. \"\"\" reserve(_size + 1) _ptr._update(_size, consume value) _size = _size + 1 fun ref pop(): A^ ? => \"\"\" Remove an element from the end of the array. The removed element is returned. \"\"\" delete(_size - 1)? fun ref unshift(value: A) => \"\"\" Add an element to the beginning of the array. \"\"\" try insert(0, consume value)? end fun ref shift(): A^ ? => \"\"\" Remove an element from the beginning of the array. The removed element is returned. \"\"\" delete(0)? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append the elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) var n = USize(0) try while n < copy_len do _ptr._update(_size + n, seq(offset + n)?) n = n + 1 end end _size = _size + n fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements to the end of the array, starting from the given offset. \"\"\" var n = USize(0) try while n < offset do if iter.has_next() then iter.next()? else return end n = n + 1 end end n = 0 // If a concrete len is specified, we take the caller at their word // and reserve that much space, even though we can't verify that the // iterator actually has that many elements available. Reserving ahead // of time lets us take a fast path of direct pointer access. if len != -1 then reserve(_size + len) try while n < len do if iter.has_next() then _ptr._update(_size + n, iter.next()?) else break end n = n + 1 end end _size = _size + n else try while n < len do if iter.has_next() then push(iter.next()?) else break end n = n + 1 end end end fun find( value: A!, offset: USize = 0, nth: USize = 0, predicate: {(box->A!, box->A!): Bool} val = {(l, r) => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the beginning of the array, starting at `offset` and examining higher indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the array, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" var i = offset var n = USize(0) while i < _size do if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end i = i + 1 end error fun contains( value: A!, predicate: {(box->A!, box->A!): Bool} val = {(l: box->A!, r: box->A!): Bool => l is r }) : Bool => \"\"\" Returns true if the array contains `value`, false otherwise. The default predicate checks for matches by identity. To search for matches by structural equality, pass an object literal such as `{(l, r) => l == r}`. \"\"\" var i = USize(0) while i < _size do if predicate(_ptr._apply(i), value) then return true end i = i + 1 end false fun rfind( value: A!, offset: USize = -1, nth: USize = 0, predicate: {(box->A!, box->A!): Bool} val = {(l: box->A!, r: box->A!): Bool => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the end of the array, starting at `offset` and examining lower indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the last element of the array, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" if _size > 0 then var i = if offset >= _size then _size - 1 else offset end var n = USize(0) repeat if predicate(_ptr._apply(i), value) then if n == nth then return i end n = n + 1 end until (i = i - 1) == 0 end end error fun clone(): Array[this->A!]^ => \"\"\" Clone the array. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. \"\"\" let out = Array[this->A!](_size) _ptr._copy_to(out._ptr, _size) out._size = _size out fun slice( from: USize = 0, to: USize = -1, step: USize = 1) : Array[this->A!]^ => \"\"\" Create a new array that is a clone of a portion of this array. The range is exclusive and saturated. The new array contains references to the same elements that the old array contains, the elements themselves are not cloned. \"\"\" let out = Array[this->A!] let last = _size.min(to) let len = last - from if (last > from) and (step > 0) then out.reserve((len + (step - 1)) / step) if step == 1 then copy_to(out, from, 0, len) else try var i = from while i < last do out.push(this(i)?) i = i + step end end end end out fun permute(indices: Iterator[USize]): Array[this->A!]^ ? => \"\"\" Create a new array with the elements permuted. Permute to an arbitrary order that may include duplicates. An out of bounds index raises an error. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. \"\"\" let out = Array[this->A!] for i in indices do out.push(this(i)?) end out fun reverse(): Array[this->A!]^ => \"\"\" Create a new array with the elements in reverse order. The new array contains references to the same elements that the old array contains, the elements themselves are not copied. \"\"\" clone() .> reverse_in_place() fun ref reverse_in_place() => \"\"\" Reverse the array in place. \"\"\" if _size > 1 then var i: USize = 0 var j = _size - 1 while i < j do let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, x) i = i + 1 j = j - 1 end end fun ref swap_elements(i: USize, j: USize) ? => \"\"\" Swap the element at index i with the element at index j. If either i or j are out of bounds, an error is raised. \"\"\" if (i >= _size) or (j >= _size) then error end let x = _ptr._apply(i) _ptr._update(i, _ptr._apply(j)) _ptr._update(j, consume x) fun keys(): ArrayKeys[A, this->Array[A]]^ => \"\"\" Return an iterator over the indices in the array. \"\"\" ArrayKeys[A, this->Array[A]](this) fun values(): ArrayValues[A, this->Array[A]]^ => \"\"\" Return an iterator over the values in the array. \"\"\" ArrayValues[A, this->Array[A]](this) fun pairs(): ArrayPairs[A, this->Array[A]]^ => \"\"\" Return an iterator over the (index, value) pairs in the array. \"\"\" ArrayPairs[A, this->Array[A]](this) class ArrayKeys[A, B: Array[A] #read] is Iterator[USize] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): USize => if _i < _array.size() then _i = _i + 1 else _i end class ArrayValues[A, B: Array[A] #read] is Iterator[B->A] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): B->A ? => _array(_i = _i + 1)? fun ref rewind(): ArrayValues[A, B] => _i = 0 this class ArrayPairs[A, B: Array[A] #read] is Iterator[(USize, B->A)] let _array: B var _i: USize new create(array: B) => _array = array _i = 0 fun has_next(): Bool => _i < _array.size() fun ref next(): (USize, B->A) ? => (_i, _array(_i = _i + 1)?)","title":"array.pony"},{"location":"src/builtin/asio_event/","text":"type AsioEventID is Pointer[AsioEvent] tag interface tag AsioEventNotify be _event_notify(event: AsioEventID, flags: U32, arg: U32) primitive AsioEvent \"\"\" Functions for asynchronous event notification. \"\"\" fun none(): AsioEventID => \"\"\" An empty event. \"\"\" AsioEventID fun readable(flags: U32): Bool => \"\"\" Returns true if the flags contain the readable flag. \"\"\" (flags and (1 << 0)) != 0 fun writeable(flags: U32): Bool => \"\"\" Returns true if the flags contain the writeable flag. \"\"\" (flags and (1 << 1)) != 0 fun disposable(flags: U32): Bool => \"\"\" Returns true if the event should be disposed of. \"\"\" flags == 0 fun oneshotable(flags: U32): Bool => \"\"\" Returns true if the flags contain the oneshot flag. \"\"\" (flags and (1 << 8)) != 0 fun dispose(): U32 => 0 fun read(): U32 => 1 << 0 fun write(): U32 => 1 << 1 fun timer(): U32 => 1 << 2 fun signal(): U32 => 1 << 3 fun read_write(): U32 => read() or write() fun oneshot(): U32 => 1 << 8 fun read_write_oneshot(): U32 => read() or write() or oneshot()","title":"asio_event.pony"},{"location":"src/builtin/bool/","text":"primitive Bool is Stringable new create(from: Bool) => from fun eq(y: Bool): Bool => this == y fun ne(y: Bool): Bool => this != y fun op_and(y: Bool): Bool => this and y fun op_or(y: Bool): Bool => this or y fun op_xor(y: Bool): Bool => this xor y fun op_not(): Bool => not this fun string(): String iso^ => (if this then \"true\" else \"false\" end).string()","title":"bool.pony"},{"location":"src/builtin/compare/","text":"primitive Less is Equatable[Compare] fun string(): String iso^ => \"Less\".string() primitive Equal is Equatable[Compare] fun string(): String iso^ => \"Equal\".string() primitive Greater is Equatable[Compare] fun string(): String iso^ => \"Greater\".string() type Compare is (Less | Equal | Greater) interface HasEq[A] fun eq(that: box->A): Bool interface Equatable[A: Equatable[A] #read] fun eq(that: box->A): Bool => this is that fun ne(that: box->A): Bool => not eq(that) interface Comparable[A: Comparable[A] #read] is Equatable[A] fun lt(that: box->A): Bool fun le(that: box->A): Bool => lt(that) or eq(that) fun ge(that: box->A): Bool => not lt(that) fun gt(that: box->A): Bool => not le(that) fun compare(that: box->A): Compare => if eq(that) then Equal elseif lt(that) then Less else Greater end","title":"compare.pony"},{"location":"src/builtin/disposable_actor/","text":"interface tag DisposableActor \"\"\" An interface used to asynchronously dispose of an actor. \"\"\" be dispose()","title":"disposable_actor.pony"},{"location":"src/builtin/do_not_optimise/","text":"primitive DoNotOptimise \"\"\" Contains functions preventing some compiler optimisations, namely dead code removal. This is useful for benchmarking purposes. \"\"\" fun apply[A](obj: A) => \"\"\" Prevent the compiler from optimising out obj and any computation it is derived from. This doesn't prevent constant propagation. \"\"\" compile_intrinsic fun observe() => \"\"\" Prevent the compiler from optimising out writes to an object marked by the apply function. \"\"\" compile_intrinsic","title":"do_not_optimise.pony"},{"location":"src/builtin/env/","text":"class val Env \"\"\" An environment holds the command line and other values injected into the program by default by the runtime. \"\"\" let root: (AmbientAuth | None) \"\"\" The root capability. Can be `None` for artificially constructed `Env` instances. \"\"\" let input: InputStream \"\"\" Stdin represented as an actor. \"\"\" let out: OutStream \"\"\"Stdout\"\"\" let err: OutStream \"\"\"Stderr\"\"\" let args: Array[String] val \"\"\"The command line used to start the program.\"\"\" let vars: Array[String] val \"\"\"The program's environment variables.\"\"\" let exitcode: {(I32)} val \"\"\" Sets the environment's exit code. The exit code of the root environment will be the exit code of the application, which defaults to 0. \"\"\" new _create( argc: U32, argv: Pointer[Pointer[U8]] val, envp: Pointer[Pointer[U8]] val) => \"\"\" Builds an environment from the command line. This is done before the Main actor is created. \"\"\" root = AmbientAuth._create() @pony_os_stdout_setup[None]() input = Stdin._create(@pony_os_stdin_setup[Bool]()) out = StdStream._out() err = StdStream._err() args = _strings_from_pointers(argv, argc.usize()) vars = _strings_from_pointers(envp, _count_strings(envp)) exitcode = {(code: I32) => @pony_exitcode[None](code) } new val create( root': (AmbientAuth | None), input': InputStream, out': OutStream, err': OutStream, args': Array[String] val, vars': Array[String] val, exitcode': {(I32)} val) => \"\"\" Build an artificial environment. A root capability may be supplied. \"\"\" root = root' input = input' out = out' err = err' args = args' vars = vars' exitcode = exitcode' fun tag _count_strings(data: Pointer[Pointer[U8]] val): USize => if data.is_null() then return 0 end var i: USize = 0 while let entry = data._apply(i) not entry.is_null() do i = i + 1 end i fun tag _strings_from_pointers( data: Pointer[Pointer[U8]] val, len: USize) : Array[String] iso^ => let array = recover Array[String](len) end var i: USize = 0 while i < len do let entry = data._apply(i = i + 1) array.push(recover String.copy_cstring(entry) end) end array","title":"env.pony"},{"location":"src/builtin/float/","text":"primitive F32 is FloatingPoint[F32] new create(value: F32 = 0) => value new pi() => 3.14159265358979323846 new e() => 2.71828182845904523536 new _nan() => compile_intrinsic new _inf(negative: Bool) => compile_intrinsic new from_bits(i: U32) => compile_intrinsic fun bits(): U32 => compile_intrinsic new from[B: (Number & Real[B] val)](a: B) => a.f32() new min_value() => \"\"\" Minimum negative value representable. \"\"\" from_bits(0xFF7FFFFF) new max_value() => \"\"\" Maximum positive value representable. \"\"\" from_bits(0x7F7FFFFF) new min_normalised() => \"\"\" Minimum positive value representable at full precision (ie a normalised number). \"\"\" from_bits(0x00800000) new epsilon() => \"\"\" Minimum positive value such that (1 + epsilon) != 1. \"\"\" from_bits(0x34000000) fun tag radix(): U8 => \"\"\" Exponent radix. \"\"\" 2 fun tag precision2(): U8 => \"\"\" Mantissa precision in bits. \"\"\" 24 fun tag precision10(): U8 => \"\"\" Mantissa precision in decimal digits. \"\"\" 6 fun tag min_exp2(): I16 => \"\"\" Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -125 fun tag min_exp10(): I16 => \"\"\" Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -37 fun tag max_exp2(): I16 => \"\"\" Maximum exponent value such that (2^exponent) - 1 is representable. \"\"\" 128 fun tag max_exp10(): I16 => \"\"\" Maximum exponent value such that (10^exponent) - 1 is representable. \"\"\" 38 fun abs(): F32 => @\"llvm.fabs.f32\"[F32](this) fun ceil(): F32 => @\"llvm.ceil.f32\"[F32](this) fun floor(): F32 => @\"llvm.floor.f32\"[F32](this) fun round(): F32 => @\"llvm.round.f32\"[F32](this) fun trunc(): F32 => @\"llvm.trunc.f32\"[F32](this) fun min(y: F32): F32 => if this < y then this else y end fun max(y: F32): F32 => if this > y then this else y end fun fld(y: F32): F32 => (this / y).floor() fun fld_unsafe(y: F32): F32 => (this /~ y).floor() fun mod(y: F32): F32 => let r = this % y if r == F32(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun mod_unsafe(y: F32): F32 => let r = this %~ y if r == F32(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun finite(): Bool => \"\"\" Check whether this number is finite, ie not +/-infinity and not NaN. \"\"\" // True if exponent is not all 1s (bits() and 0x7F800000) != 0x7F800000 fun infinite(): Bool => \"\"\" Check whether this number is +/-infinity \"\"\" // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) == 0) // mantissa fun nan(): Bool => \"\"\" Check whether this number is NaN. \"\"\" // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7F800000) == 0x7F800000) and // exp ((bits() and 0x007FFFFF) != 0) // mantissa fun ldexp(x: F32, exponent: I32): F32 => @ldexpf[F32](x, exponent) fun frexp(): (F32, U32) => var exponent: U32 = 0 var mantissa = @frexp[F64](f64(), addressof exponent) (mantissa.f32(), exponent) fun log(): F32 => @\"llvm.log.f32\"[F32](this) fun log2(): F32 => @\"llvm.log2.f32\"[F32](this) fun log10(): F32 => @\"llvm.log10.f32\"[F32](this) fun logb(): F32 => @logbf[F32](this) fun pow(y: F32): F32 => @\"llvm.pow.f32\"[F32](this, y) fun powi(y: I32): F32 => ifdef windows then pow(y.f32()) else @\"llvm.powi.f32\"[F32](this, y) end fun sqrt(): F32 => if this < 0.0 then _nan() else @\"llvm.sqrt.f32\"[F32](this) end fun sqrt_unsafe(): F32 => \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" @\"llvm.sqrt.f32\"[F32](this) fun cbrt(): F32 => @cbrtf[F32](this) fun exp(): F32 => @\"llvm.exp.f32\"[F32](this) fun exp2(): F32 => @\"llvm.exp2.f32\"[F32](this) fun cos(): F32 => @\"llvm.cos.f32\"[F32](this) fun sin(): F32 => @\"llvm.sin.f32\"[F32](this) fun tan(): F32 => @tanf[F32](this) fun cosh(): F32 => @coshf[F32](this) fun sinh(): F32 => @sinhf[F32](this) fun tanh(): F32 => @tanhf[F32](this) fun acos(): F32 => @acosf[F32](this) fun asin(): F32 => @asinf[F32](this) fun atan(): F32 => @atanf[F32](this) fun atan2(y: F32): F32 => @atan2f[F32](this, y) fun acosh(): F32 => @acoshf[F32](this) fun asinh(): F32 => @asinhf[F32](this) fun atanh(): F32 => @atanhf[F32](this) fun copysign(sign: F32): F32 => @\"llvm.copysign.f32\"[F32](this, sign) fun hash(): USize => bits().hash() fun hash64(): U64 => bits().hash64() fun i128(): I128 => f64().i128() fun u128(): U128 => f64().u128() fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().i128_unsafe() fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().u128_unsafe() primitive F64 is FloatingPoint[F64] new create(value: F64 = 0) => value new pi() => 3.14159265358979323846 new e() => 2.71828182845904523536 new _nan() => compile_intrinsic new _inf(negative: Bool) => compile_intrinsic new from_bits(i: U64) => compile_intrinsic fun bits(): U64 => compile_intrinsic new from[B: (Number & Real[B] val)](a: B) => a.f64() new min_value() => \"\"\" Minimum negative value representable. \"\"\" from_bits(0xFFEF_FFFF_FFFF_FFFF) new max_value() => \"\"\" Maximum positive value representable. \"\"\" from_bits(0x7FEF_FFFF_FFFF_FFFF) new min_normalised() => \"\"\" Minimum positive value representable at full precision (ie a normalised number). \"\"\" from_bits(0x0010_0000_0000_0000) new epsilon() => \"\"\" Minimum positive value such that (1 + epsilon) != 1. \"\"\" from_bits(0x3CB0_0000_0000_0000) fun tag radix(): U8 => \"\"\" Exponent radix. \"\"\" 2 fun tag precision2(): U8 => \"\"\" Mantissa precision in bits. \"\"\" 53 fun tag precision10(): U8 => \"\"\" Mantissa precision in decimal digits. \"\"\" 15 fun tag min_exp2(): I16 => \"\"\" Minimum exponent value such that (2^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -1021 fun tag min_exp10(): I16 => \"\"\" Minimum exponent value such that (10^exponent) - 1 is representable at full precision (ie a normalised number). \"\"\" -307 fun tag max_exp2(): I16 => \"\"\" Maximum exponent value such that (2^exponent) - 1 is representable. \"\"\" 1024 fun tag max_exp10(): I16 => \"\"\" Maximum exponent value such that (10^exponent) - 1 is representable. \"\"\" 308 fun abs(): F64 => @\"llvm.fabs.f64\"[F64](this) fun ceil(): F64 => @\"llvm.ceil.f64\"[F64](this) fun floor(): F64 => @\"llvm.floor.f64\"[F64](this) fun round(): F64 => @\"llvm.round.f64\"[F64](this) fun trunc(): F64 => @\"llvm.trunc.f64\"[F64](this) fun min(y: F64): F64 => if this < y then this else y end fun max(y: F64): F64 => if this > y then this else y end fun fld(y: F64): F64 => (this / y).floor() fun fld_unsafe(y: F64): F64 => (this /~ y).floor() fun mod(y: F64): F64 => let r = this.rem(y) if r == F64(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun mod_unsafe(y: F64): F64 => let r = this %~ y if r == F64(0.0) then r.copysign(y) elseif (r > 0) xor (y > 0) then r + y else r end fun finite(): Bool => \"\"\" Check whether this number is finite, ie not +/-infinity and not NaN. \"\"\" // True if exponent is not all 1s (bits() and 0x7FF0_0000_0000_0000) != 0x7FF0_0000_0000_0000 fun infinite(): Bool => \"\"\" Check whether this number is +/-infinity \"\"\" // True if exponent is all 1s and mantissa is 0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) == 0) // mantissa fun nan(): Bool => \"\"\" Check whether this number is NaN. \"\"\" // True if exponent is all 1s and mantissa is non-0 ((bits() and 0x7FF0_0000_0000_0000) == 0x7FF0_0000_0000_0000) and // exp ((bits() and 0x000F_FFFF_FFFF_FFFF) != 0) // mantissa fun ldexp(x: F64, exponent: I32): F64 => @ldexp[F64](x, exponent) fun frexp(): (F64, U32) => var exponent: U32 = 0 var mantissa = @frexp[F64](this, addressof exponent) (mantissa, exponent) fun log(): F64 => @\"llvm.log.f64\"[F64](this) fun log2(): F64 => @\"llvm.log2.f64\"[F64](this) fun log10(): F64 => @\"llvm.log10.f64\"[F64](this) fun logb(): F64 => @logb[F64](this) fun pow(y: F64): F64 => @\"llvm.pow.f64\"[F64](this, y) fun powi(y: I32): F64 => ifdef windows then pow(y.f64()) else @\"llvm.powi.f64\"[F64](this, y) end fun sqrt(): F64 => if this < 0.0 then _nan() else @\"llvm.sqrt.f64\"[F64](this) end fun sqrt_unsafe(): F64 => \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" @\"llvm.sqrt.f64\"[F64](this) fun cbrt(): F64 => @cbrt[F64](this) fun exp(): F64 => @\"llvm.exp.f64\"[F64](this) fun exp2(): F64 => @\"llvm.exp2.f64\"[F64](this) fun cos(): F64 => @\"llvm.cos.f64\"[F64](this) fun sin(): F64 => @\"llvm.sin.f64\"[F64](this) fun tan(): F64 => @tan[F64](this) fun cosh(): F64 => @cosh[F64](this) fun sinh(): F64 => @sinh[F64](this) fun tanh(): F64 => @tanh[F64](this) fun acos(): F64 => @acos[F64](this) fun asin(): F64 => @asin[F64](this) fun atan(): F64 => @atan[F64](this) fun atan2(y: F64): F64 => @atan2[F64](this, y) fun acosh(): F64 => @acosh[F64](this) fun asinh(): F64 => @asinh[F64](this) fun atanh(): F64 => @atanh[F64](this) fun copysign(sign: F64): F64 => @\"llvm.copysign.f64\"[F64](this, sign) fun hash(): USize => bits().hash() fun hash64(): U64 => bits().hash64() fun i128(): I128 => if this > I128.max_value().f64() then return I128.max_value() elseif this < I128.min_value().f64() then return I128.min_value() end let bit = bits() let high = (bit >> 32).u32() let ex = ((high and 0x7FF00000) >> 20) - 1023 if ex < 0 then return 0 end let s = ((high and 0x80000000) >> 31).i128() var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).i128() let ex' = ex.u128() if ex' > 52 then r = r << (ex' - 52) else r = r >> (52 - ex') end (r xor s) - s fun u128(): U128 => if this > U128.max_value().f64() then return U128.max_value() elseif this < U128.min_value().f64() then return U128.min_value() end let bit = bits() let high = (bit >> 32).u32() let ex = ((high and 0x7FF00000) >> 20) - 1023 if (ex < 0) or ((high and 0x80000000) != 0) then return 0 end var r = ((bit and 0x000FFFFFFFFFFFFF) or 0x0010000000000000).u128() let ex' = ex.u128() if ex' > 52 then r = r << (ex' - 52) else r = r >> (52 - ex') end r.u128() fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" i128() fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" u128() type Float is (F32 | F64)","title":"float.pony"},{"location":"src/builtin/iterator/","text":"interface Iterator[A] \"\"\" Iterators generate a series of values, one value at a time on each call to `next()`. An Iterator is considered exhausted, once its `has_next()` method returns `false`. Thus every call to `next()` should be preceeded with a call to `has_next()` to check for exhaustiveness. ## Usage Given the rules for using Iterators mentioned above, basic usage of an iterator looks like this: ```pony while iterator.has_next() do let elem = iterator.next()? // do something with elem end ``` The `For`-loop provides a more concise way of iteration: ```pony for elem in iterator do // do something with elem end ``` Iteration using `While` is more flexible as it allows to continue iterating if a call to `next()` errors. The `For`-loop does not allow this. ## Implementing Iterators Iterator implementations need to adhere to the following rules to be considered well-behaved: * If the Iterator is exhausted, `has_next()` needs to return `false`. * Once `has_next()` returned `false` it is not allowed to switch back to `true` (Unless the Iterator supports rewinding) * `has_next()` does not change its returned value if `next()` has not been called. That means, that between two calls to `next()` any number of calls to `has_next()` need to return the same value. (Unless the Iterator supports rewinding) * A call to `next()` erroring does not necessarily denote exhaustiveness. ### Example ```pony // Generates values from `from` to 0 class ref Countdown is Iterator[USize] var _cur: USize var _has_next: Bool = true new ref create(from: USize) => _cur = from fun ref has_next(): Bool => _has_next fun ref next(): USize => let elem = _cur = _cur - 1 if elem == 0 then _has_next = false end elem ``` \"\"\" fun ref has_next(): Bool \"\"\" Returns `true` if this Iterator is not yet exhausted. That means that a value returned from a subsequent call to `next()` is a valid part of this iterator. Returns `false` if this Iterator is exhausted. The behavior of `next()` after this function returned `false` is undefined, it might throw an error or return values which are not part of this Iterator. \"\"\" fun ref next(): A ? \"\"\" Generate the next value. This might error, which does not necessarily mean that the Iterator is exhausted. \"\"\"","title":"iterator.pony"},{"location":"src/builtin/none/","text":"primitive None is Stringable fun string(): String iso^ => \"None\".string()","title":"none.pony"},{"location":"src/builtin/nullable_pointer/","text":"struct NullablePointer[A] \"\"\" A NullablePointer[A] is used to encode a possibly-null type. It should _only_ be used for structs that need to be passed to and from the C FFI. An optional type for anything that isn't a struct should be encoded as a union type, for example (A | None). \"\"\" new create(that: A) => \"\"\" This re-encodes the type of `that` from A to NullablePointer[A], allowing `that` to be assigned to a field or variable of type NullablePointer[A]. It doesn't allocate a wrapper object: there is no containing object for `that`. \"\"\" compile_intrinsic new none() => \"\"\" This returns a null pointer typed as a NullablePointer[A]. \"\"\" compile_intrinsic fun apply(): this->A ? => \"\"\" This re-encodes the type of `this` from NullablePointer[A] to A, allowing `this` to be assigned to a field of variable of type A. If `this` is a null pointer, an error is raised. \"\"\" compile_intrinsic fun is_none(): Bool => \"\"\" Returns true if `this` is null (ie apply would raise an error). \"\"\" compile_intrinsic","title":"nullable_pointer.pony"},{"location":"src/builtin/platform/","text":"primitive Platform fun bsd(): Bool => freebsd() or dragonfly() or openbsd() fun freebsd(): Bool => compile_intrinsic fun dragonfly(): Bool => compile_intrinsic fun openbsd(): Bool => compile_intrinsic fun linux(): Bool => compile_intrinsic fun osx(): Bool => compile_intrinsic fun posix(): Bool => bsd() or linux() or osx() fun windows(): Bool => compile_intrinsic fun x86(): Bool => compile_intrinsic fun arm(): Bool => compile_intrinsic fun lp64(): Bool => compile_intrinsic fun llp64(): Bool => compile_intrinsic fun ilp32(): Bool => compile_intrinsic fun bigendian(): Bool => compile_intrinsic fun littleendian(): Bool => compile_intrinsic fun native128(): Bool => compile_intrinsic fun debug(): Bool => compile_intrinsic","title":"platform.pony"},{"location":"src/builtin/pointer/","text":"struct Pointer[A] \"\"\" A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be included in a union or intersection, or be a subtype of any interface. Most functions on a Pointer[A] are private to maintain memory safety. \"\"\" new create() => \"\"\" A null pointer. \"\"\" compile_intrinsic new _alloc(len: USize) => \"\"\" Space for len instances of A. \"\"\" compile_intrinsic fun ref _realloc(len: USize): Pointer[A] => \"\"\" Keep the contents, but reserve space for len instances of A. \"\"\" compile_intrinsic fun tag _unsafe(): Pointer[A] ref => \"\"\" Unsafe change in reference capability. \"\"\" compile_intrinsic fun _convert[B](): this->Pointer[B] => \"\"\" Convert from Pointer[A] to Pointer[B]. \"\"\" compile_intrinsic fun _apply(i: USize): this->A => \"\"\" Retrieve index i. \"\"\" compile_intrinsic fun ref _update(i: USize, value: A!): A^ => \"\"\" Set index i and return the previous value. \"\"\" compile_intrinsic fun _offset(n: USize): this->Pointer[A] => \"\"\" Return a pointer to the n-th element. \"\"\" compile_intrinsic fun tag offset(n: USize): Pointer[A] tag => \"\"\" Return a tag pointer to the n-th element. \"\"\" _unsafe()._offset(n) fun tag _element_size(): USize => \"\"\" Return the size of a single element in an array of type A. \"\"\" compile_intrinsic fun ref _insert(n: USize, len: USize): Pointer[A] => \"\"\" Creates space for n new elements at the head, moving following elements. The array length before this should be len, and the available space should be at least n + len. \"\"\" compile_intrinsic fun ref _delete(n: USize, len: USize): A^ => \"\"\" Delete n elements from the head of pointer, compact remaining elements of the underlying array. The array length before this should be n + len. Returns the first deleted element. \"\"\" compile_intrinsic fun _copy_to(that: Pointer[this->A!], n: USize): this->Pointer[A] => \"\"\" Copy n elements from this to that. \"\"\" compile_intrinsic fun tag usize(): USize => \"\"\" Convert the pointer into an integer. \"\"\" compile_intrinsic fun tag is_null(): Bool => \"\"\" Return true for a null pointer, false for anything else. \"\"\" compile_intrinsic fun tag eq(that: Pointer[A] tag): Bool => \"\"\" Return true if this address is that address. \"\"\" compile_intrinsic fun tag lt(that: Pointer[A] tag): Bool => \"\"\" Return true if this address is less than that address. \"\"\" compile_intrinsic fun tag ne(that: Pointer[A] tag): Bool => not eq(that) fun tag le(that: Pointer[A] tag): Bool => lt(that) or eq(that) fun tag ge(that: Pointer[A] tag): Bool => not lt(that) fun tag gt(that: Pointer[A] tag): Bool => not le(that) fun tag hash(): USize => \"\"\" Returns a hash of the address. \"\"\" usize().hash() fun tag hash64(): U64 => \"\"\" Returns a 64-bit hash of the address. \"\"\" usize().hash64()","title":"pointer.pony"},{"location":"src/builtin/read_seq/","text":"interface box ReadSeq[A] \"\"\" The readable interface of a sequence. \"\"\" fun size(): USize \"\"\" Returns the number of elements in the sequence. \"\"\" fun apply(i: USize): this->A ? \"\"\" Returns the i-th element of the sequence. Raises an error if the index is out of bounds. Note that this returns this->A, not A. \"\"\" fun values(): Iterator[this->A]^ \"\"\" Returns an iterator over the elements of the sequence. Note that this iterates over this->A, not A. \"\"\" interface box ReadElement[A] \"\"\" Used to show that a ReadSeq can return an element of a specific unmodified type. \"\"\" fun apply(i: USize): A ?","title":"read_seq.pony"},{"location":"src/builtin/real/","text":"trait val _ArithmeticConvertible fun i8(): I8 => compile_intrinsic fun i16(): I16 => compile_intrinsic fun i32(): I32 => compile_intrinsic fun i64(): I64 => compile_intrinsic fun i128(): I128 => compile_intrinsic fun ilong(): ILong => compile_intrinsic fun isize(): ISize => compile_intrinsic fun u8(): U8 => compile_intrinsic fun u16(): U16 => compile_intrinsic fun u32(): U32 => compile_intrinsic fun u64(): U64 => compile_intrinsic fun u128(): U128 => compile_intrinsic fun ulong(): ULong => compile_intrinsic fun usize(): USize => compile_intrinsic fun f32(): F32 => compile_intrinsic fun f64(): F64 => compile_intrinsic fun i8_unsafe(): I8 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i16_unsafe(): I16 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i32_unsafe(): I32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i64_unsafe(): I64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun i128_unsafe(): I128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun ilong_unsafe(): ILong => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun isize_unsafe(): ISize => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u8_unsafe(): U8 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u16_unsafe(): U16 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u32_unsafe(): U32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u64_unsafe(): U64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun u128_unsafe(): U128 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun ulong_unsafe(): ULong => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun usize_unsafe(): USize => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" compile_intrinsic trait val Real[A: Real[A] val] is (Stringable & _ArithmeticConvertible & Comparable[A]) new val create(value: A) new val from[B: (Number & Real[B] val)](a: B) new val min_value() new val max_value() fun add(y: A): A => this + y fun sub(y: A): A => this - y fun mul(y: A): A => this * y fun div(y: A): A => \"\"\" Integer division, rounded towards zero. \"\"\" this / y fun divrem(y: A): (A, A) => (this / y, this % y) fun rem(y: A): A => \"\"\" Calculate the remainder after integer division, rounded towards zero (`div`). The result has the sign of the dividend. \"\"\" this % y fun neg(): A => -this fun fld(y: A): A \"\"\" Floored integer division, rounded towards negative infinity. \"\"\" fun mod(y: A): A \"\"\" Calculate the modulo after floored integer division, rounded towards negative infinity (`fld`). The result has the sign of the divisor. \"\"\" fun eq(y: box->A): Bool => this == y fun ne(y: box->A): Bool => this != y fun lt(y: box->A): Bool => this < y fun le(y: box->A): Bool => this <= y fun ge(y: box->A): Bool => this >= y fun gt(y: box->A): Bool => this > y fun min(y: A): A fun max(y: A): A fun hash(): USize => var x = usize() ifdef ilp32 then x = (not x) + (x << 15) x = x xor (x >> 12) x = x + (x << 2) x = x xor (x >> 4) x = (x + (x << 3)) + (x << 11) x = x xor (x >> 16) x else hash64().usize() end fun hash64(): U64 => var x = u64() x = (not x) + (x << 21) x = x xor (x >> 24) x = (x + (x << 3)) + (x << 8) x = x xor (x >> 14) x = (x + (x << 2)) + (x << 4) x = x xor (x >> 28) x = x + (x << 31) x fun _value(): A => compile_intrinsic trait val Integer[A: Integer[A] val] is Real[A] fun add_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this +~ y fun sub_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this -~ y fun mul_unsafe(y: A): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" this *~ y fun div_unsafe(y: A): A => \"\"\" Integer division, rounded towards zero. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" this /~ y fun divrem_unsafe(y: A): (A, A) => \"\"\" Calculates the quotient of this number and `y` and the remainder. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" (this /~ y, this %~ y) fun rem_unsafe(y: A): A => \"\"\" Calculates the remainder of this number divided by `y`. Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" this %~ y fun fld_unsafe(y: A): A \"\"\" Floored division, rounded towards negative infinity, as opposed to `div` which rounds towards zero. *Unsafe Operation* If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" fun mod_unsafe(y: A): A \"\"\" Calculates the modulo of this number after floored division by `y`. *Unsafe Operation.* If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" fun add_partial(y: A): A ? \"\"\" Add y to this number. If the operation overflows this function errors. \"\"\" fun sub_partial(y: A): A ? \"\"\" Subtract y from this number. If the operation overflows/underflows this function errors. \"\"\" fun mul_partial(y: A): A ? \"\"\" Multiply y with this number. If the operation overflows this function errors. \"\"\" fun div_partial(y: A): A ? \"\"\" Divides this number by `y`, rounds the result towards zero. If y is `0` or the operation overflows, this function errors. \"\"\" fun rem_partial(y: A): A ? \"\"\" Calculates the remainder of this number divided by y. The result has the sign of the dividend. If y is `0` or the operation overflows, this function errors. \"\"\" fun divrem_partial(y: A): (A, A) ? \"\"\" Divides this number by y and calculates the remainder of the operation. If y is `0` or the operation overflows, this function errors. \"\"\" fun fld_partial(y: A): A ? \"\"\" Floored integer division, rounded towards negative infinity. If y is `0` or the operation overflows, this function errors \"\"\" fun mod_partial(y: A): A ? \"\"\" Calculates the modulo of this number and `y` after floored division (`fld`). The result has the sign of the divisor. If y is `0` or the operation overflows, this function errors. \"\"\" fun neg_unsafe(): A => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" -~this fun addc(y: A): (A, Bool) \"\"\" Add `y` to this integer and return the result and a flag indicating overflow. \"\"\" fun subc(y: A): (A, Bool) \"\"\" Subtract `y` from this integer and return the result and a flag indicating overflow. \"\"\" fun mulc(y: A): (A, Bool) \"\"\" Multiply `y` with this integer and return the result and a flag indicating overflow. \"\"\" fun divc(y: A): (A, Bool) \"\"\" Divide this integer by `y` and return the result and a flag indicating overflow or division by zero. \"\"\" fun remc(y: A): (A, Bool) \"\"\" Calculate the remainder of this number divided by `y` and return the result and a flag indicating division by zero or overflow. The result will have the sign of the dividend. \"\"\" fun fldc(y: A): (A, Bool) \"\"\" Divide this integer by `y` and return the result, rounded towards negative infinity and a flag indicating overflow or division by zero. \"\"\" fun modc(y: A): (A, Bool) \"\"\" Calculate the modulo of this number after floored division by `y` and return the result and a flag indicating division by zero or overflow. The result will have the sign of the divisor. \"\"\" fun op_and(y: A): A => this and y fun op_or(y: A): A => this or y fun op_xor(y: A): A => this xor y fun op_not(): A => not this fun bit_reverse(): A \"\"\" Reverse the order of the bits within the integer. For example, 0b11101101 (237) would return 0b10110111 (183). \"\"\" fun bswap(): A trait val SignedInteger[A: SignedInteger[A, B] val, B: UnsignedInteger[B] val] is Integer[A] fun abs(): B fun shl(y: B): A => this << y fun shr(y: B): A => this >> y fun shl_unsafe(y: B): A => \"\"\" Unsafe operation. If bits differing from the final sign bit are shifted-out, the result is undefined. \"\"\" this <<~ y fun shr_unsafe(y: B): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this >>~ y fun popcount(): B fun clz(): B fun ctz(): B fun clz_unsafe(): B \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" fun ctz_unsafe(): B \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" fun bitwidth(): B fun bytewidth(): USize fun string(): String iso^ => _ToString._u64(abs().u64(), i64() < 0) trait val UnsignedInteger[A: UnsignedInteger[A] val] is Integer[A] fun abs(): A fun shl(y: A): A => this << y fun shr(y: A): A => this >> y // both fld and mod behave the same as div and rem for unsigned integers fun fld(y: A): A => this / y fun fldc(y: A): (A, Bool) => this.divc(y) fun fld_partial(y: A): A ? => this.div_partial(y)? fun fld_unsafe(y: A): A => this.div_unsafe(y) fun mod(y: A): A => this % y fun modc(y: A): (A, Bool) => this.remc(y) fun mod_partial(y: A): A ? => this.rem_partial(y)? fun mod_unsafe(y: A): A => this.rem_unsafe(y) fun shl_unsafe(y: A): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this <<~ y fun shr_unsafe(y: A): A => \"\"\" Unsafe operation. If non-zero bits are shifted-out, the result is undefined. \"\"\" this >>~ y fun rotl(y: A): A => let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this << y') or (this >> (bitwidth() - y')) end fun rotr(y: A): A => let y' = y % bitwidth() if y' == y'.min_value() then this._value() else (this >> y') or (this << (bitwidth() - y')) end fun popcount(): A fun clz(): A fun ctz(): A fun clz_unsafe(): A \"\"\" Count leading zeroes. Unsafe operation. If this is 0, the result is undefined. \"\"\" fun ctz_unsafe(): A \"\"\" Count trailing zeroes. Unsafe operation. If this is 0, the result is undefined. \"\"\" fun bitwidth(): A fun bytewidth(): USize fun string(): String iso^ => _ToString._u64(u64(), false) trait val FloatingPoint[A: FloatingPoint[A] val] is Real[A] new val min_normalised() new val epsilon() fun tag radix(): U8 fun tag precision2(): U8 fun tag precision10(): U8 fun tag min_exp2(): I16 fun tag min_exp10(): I16 fun tag max_exp2(): I16 fun tag max_exp10(): I16 fun add_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this +~ y fun sub_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this -~ y fun mul_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this *~ y fun div_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this /~ y fun fld_unsafe(y: A): A \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" fun divrem_unsafe(y: A): (A, A) => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" (this /~ y, this %~ y) fun rem_unsafe(y: A): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this %~ y fun mod_unsafe(y: A): A \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" fun neg_unsafe(): A => \"\"\" Unsafe operation. If any input or output of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" -~this fun eq_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this ==~ y fun ne_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this !=~ y fun lt_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this <~ y fun le_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this <=~ y fun ge_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this >=~ y fun gt_unsafe(y: box->A): Bool => \"\"\" Unsafe operation. If any input of the operation is +/- infinity or NaN, the result is undefined. The operation isn't required to fully comply to IEEE 754 semantics. \"\"\" this >~ y fun abs(): A fun ceil(): A fun floor(): A fun round(): A fun trunc(): A fun finite(): Bool fun infinite(): Bool fun nan(): Bool fun ldexp(x: A, exponent: I32): A fun frexp(): (A, U32) fun log(): A fun log2(): A fun log10(): A fun logb(): A fun pow(y: A): A fun powi(y: I32): A fun sqrt(): A fun sqrt_unsafe(): A \"\"\" Unsafe operation. If this is negative, the result is undefined. \"\"\" fun cbrt(): A fun exp(): A fun exp2(): A fun cos(): A fun sin(): A fun tan(): A fun cosh(): A fun sinh(): A fun tanh(): A fun acos(): A fun asin(): A fun atan(): A fun atan2(y: A): A fun acosh(): A fun asinh(): A fun atanh(): A fun copysign(sign: A): A fun string(): String iso^ => _ToString._f64(f64()) type Number is (Int | Float) type Int is (Signed | Unsigned)","title":"real.pony"},{"location":"src/builtin/seq/","text":"interface Seq[A] \"\"\" A sequence of elements. \"\"\" new create(len: USize = 0) \"\"\" Create a sequence, reserving space for len elements. \"\"\" fun ref reserve(len: USize) \"\"\" Reserve space for len elements. \"\"\" fun size(): USize \"\"\" Returns the number of elements in the sequence. \"\"\" fun apply(i: USize): this->A ? \"\"\" Returns the i-th element of the sequence. Raises an error if the index is out of bounds. \"\"\" fun ref update(i: USize, value: A): A^ ? \"\"\" Replaces the i-th element of the sequence. Returns the previous value. Raises an error if the index is out of bounds. \"\"\" fun ref clear() \"\"\" Removes all elements from the sequence. \"\"\" fun ref push(value: A) \"\"\" Adds an element to the end of the sequence. \"\"\" fun ref pop(): A^ ? \"\"\" Removes an element from the end of the sequence. \"\"\" fun ref unshift(value: A) \"\"\" Adds an element to the beginning of the sequence. \"\"\" fun ref shift(): A^ ? \"\"\" Removes an element from the beginning of the sequence. \"\"\" fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) \"\"\" Add len elements to the end of the list, starting from the given offset. \"\"\" fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) \"\"\" Add len iterated elements to the end of the list, starting from the given offset. \"\"\" fun ref truncate(len: USize) \"\"\" Truncate the sequence to the given length, discarding excess elements. If the sequence is already smaller than len, do nothing. \"\"\" fun values(): Iterator[this->A]^ \"\"\" Returns an iterator over the elements of the sequence. \"\"\"","title":"seq.pony"},{"location":"src/builtin/signed/","text":"primitive I8 is SignedInteger[I8, U8] new create(value: I8) => value new from[A: (Number & Real[A] val)](a: A) => a.i8() new min_value() => -0x80 new max_value() => 0x7F fun abs(): U8 => if this < 0 then (-this).u8() else this.u8() end fun bit_reverse(): I8 => @\"llvm.bitreverse.i8\"[I8](this) fun bswap(): I8 => this fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this) fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false) fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false) fun clz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i8\"[U8](this, true) fun ctz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i8\"[U8](this, true) fun bitwidth(): U8 => 8 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I8): I8 => if this < y then this else y end fun max(y: I8): I8 => if this > y then this else y end fun fld(y: I8): I8 => _SignedArithmetic.fld[I8, U8](this, y) fun fld_unsafe(y: I8): I8 => _SignedUnsafeArithmetic.fld_unsafe[I8, U8](this, y) fun mod(y: I8): I8 => _SignedArithmetic.mod[I8, U8](this, y) fun mod_unsafe(y: I8): I8 => _SignedUnsafeArithmetic.mod_unsafe[I8, U8](this, y) fun addc(y: I8): (I8, Bool) => @\"llvm.sadd.with.overflow.i8\"[(I8, Bool)](this, y) fun subc(y: I8): (I8, Bool) => @\"llvm.ssub.with.overflow.i8\"[(I8, Bool)](this, y) fun mulc(y: I8): (I8, Bool) => @\"llvm.smul.with.overflow.i8\"[(I8, Bool)](this, y) fun divc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.div_checked[I8, U8](this, y) fun remc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.rem_checked[I8, U8](this, y) fun fldc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.fld_checked[I8, U8](this, y) fun modc(y: I8): (I8, Bool) => _SignedCheckedArithmetic.mod_checked[I8, U8](this, y) fun add_partial(y: I8): I8 ? => _SignedPartialArithmetic.add_partial[I8](this, y)? fun sub_partial(y: I8): I8 ? => _SignedPartialArithmetic.sub_partial[I8](this, y)? fun mul_partial(y: I8): I8 ? => _SignedPartialArithmetic.mul_partial[I8](this, y)? fun div_partial(y: I8): I8 ? => _SignedPartialArithmetic.div_partial[I8, U8](this, y)? fun rem_partial(y: I8): I8 ? => _SignedPartialArithmetic.rem_partial[I8, U8](this, y)? fun divrem_partial(y: I8): (I8, I8) ? => _SignedPartialArithmetic.divrem_partial[I8, U8](this, y)? fun fld_partial(y: I8): I8 ? => _SignedPartialArithmetic.fld_partial[I8, U8](this, y)? fun mod_partial(y: I8): I8 ? => _SignedPartialArithmetic.mod_partial[I8, U8](this, y)? primitive I16 is SignedInteger[I16, U16] new create(value: I16) => value new from[A: (Number & Real[A] val)](a: A) => a.i16() new min_value() => -0x8000 new max_value() => 0x7FFF fun abs(): U16 => if this < 0 then (-this).u16() else this.u16() end fun bit_reverse(): I16 => @\"llvm.bitreverse.i16\"[I16](this) fun bswap(): I16 => @\"llvm.bswap.i16\"[I16](this) fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this) fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false) fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false) fun clz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i16\"[U16](this, true) fun ctz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i16\"[U16](this, true) fun bitwidth(): U16 => 16 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I16): I16 => if this < y then this else y end fun max(y: I16): I16 => if this > y then this else y end fun fld(y: I16): I16 => _SignedArithmetic.fld[I16, U16](this, y) fun fld_unsafe(y: I16): I16 => _SignedUnsafeArithmetic.fld_unsafe[I16, U16](this, y) fun mod(y: I16): I16 => _SignedArithmetic.mod[I16, U16](this, y) fun mod_unsafe(y: I16): I16 => _SignedUnsafeArithmetic.mod_unsafe[I16, U16](this, y) fun addc(y: I16): (I16, Bool) => @\"llvm.sadd.with.overflow.i16\"[(I16, Bool)](this, y) fun subc(y: I16): (I16, Bool) => @\"llvm.ssub.with.overflow.i16\"[(I16, Bool)](this, y) fun mulc(y: I16): (I16, Bool) => @\"llvm.smul.with.overflow.i16\"[(I16, Bool)](this, y) fun divc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.div_checked[I16, U16](this, y) fun remc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.rem_checked[I16, U16](this, y) fun fldc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.fld_checked[I16, U16](this, y) fun modc(y: I16): (I16, Bool) => _SignedCheckedArithmetic.mod_checked[I16, U16](this, y) fun add_partial(y: I16): I16 ? => _SignedPartialArithmetic.add_partial[I16](this, y)? fun sub_partial(y: I16): I16 ? => _SignedPartialArithmetic.sub_partial[I16](this, y)? fun mul_partial(y: I16): I16 ? => _SignedPartialArithmetic.mul_partial[I16](this, y)? fun div_partial(y: I16): I16 ? => _SignedPartialArithmetic.div_partial[I16, U16](this, y)? fun rem_partial(y: I16): I16 ? => _SignedPartialArithmetic.rem_partial[I16, U16](this, y)? fun divrem_partial(y: I16): (I16, I16) ? => _SignedPartialArithmetic.divrem_partial[I16, U16](this, y)? fun fld_partial(y: I16): I16 ? => _SignedPartialArithmetic.fld_partial[I16, U16](this, y)? fun mod_partial(y: I16): I16 ? => _SignedPartialArithmetic.mod_partial[I16, U16](this, y)? primitive I32 is SignedInteger[I32, U32] new create(value: I32) => value new from[A: (Number & Real[A] val)](a: A) => a.i32() new min_value() => -0x8000_0000 new max_value() => 0x7FFF_FFFF fun abs(): U32 => if this < 0 then (-this).u32() else this.u32() end fun bit_reverse(): I32 => @\"llvm.bitreverse.i32\"[I32](this) fun bswap(): I32 => @\"llvm.bswap.i32\"[I32](this) fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this) fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false) fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false) fun clz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i32\"[U32](this, true) fun ctz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i32\"[U32](this, true) fun bitwidth(): U32 => 32 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I32): I32 => if this < y then this else y end fun max(y: I32): I32 => if this > y then this else y end fun fld(y: I32): I32 => _SignedArithmetic.fld[I32, U32](this, y) fun fld_unsafe(y: I32): I32 => _SignedUnsafeArithmetic.fld_unsafe[I32, U32](this, y) fun mod(y: I32): I32 => _SignedArithmetic.mod[I32, U32](this, y) fun mod_unsafe(y: I32): I32 => _SignedUnsafeArithmetic.mod_unsafe[I32, U32](this, y) fun addc(y: I32): (I32, Bool) => @\"llvm.sadd.with.overflow.i32\"[(I32, Bool)](this, y) fun subc(y: I32): (I32, Bool) => @\"llvm.ssub.with.overflow.i32\"[(I32, Bool)](this, y) fun mulc(y: I32): (I32, Bool) => @\"llvm.smul.with.overflow.i32\"[(I32, Bool)](this, y) fun divc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.div_checked[I32, U32](this, y) fun remc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.rem_checked[I32, U32](this, y) fun fldc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.fld_checked[I32, U32](this, y) fun modc(y: I32): (I32, Bool) => _SignedCheckedArithmetic.mod_checked[I32, U32](this, y) fun add_partial(y: I32): I32 ? => _SignedPartialArithmetic.add_partial[I32](this, y)? fun sub_partial(y: I32): I32 ? => _SignedPartialArithmetic.sub_partial[I32](this, y)? fun mul_partial(y: I32): I32 ? => _SignedPartialArithmetic.mul_partial[I32](this, y)? fun div_partial(y: I32): I32 ? => _SignedPartialArithmetic.div_partial[I32, U32](this, y)? fun rem_partial(y: I32): I32 ? => _SignedPartialArithmetic.rem_partial[I32, U32](this, y)? fun divrem_partial(y: I32): (I32, I32) ? => _SignedPartialArithmetic.divrem_partial[I32, U32](this, y)? fun fld_partial(y: I32): I32 ? => _SignedPartialArithmetic.fld_partial[I32, U32](this, y)? fun mod_partial(y: I32): I32 ? => _SignedPartialArithmetic.mod_partial[I32, U32](this, y)? primitive I64 is SignedInteger[I64, U64] new create(value: I64) => value new from[A: (Number & Real[A] val)](a: A) => a.i64() new min_value() => -0x8000_0000_0000_0000 new max_value() => 0x7FFF_FFFF_FFFF_FFFF fun abs(): U64 => if this < 0 then (-this).u64() else this.u64() end fun bit_reverse(): I64 => @\"llvm.bitreverse.i64\"[I64](this) fun bswap(): I64 => @\"llvm.bswap.i64\"[I64](this) fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this) fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false) fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false) fun clz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i64\"[U64](this, true) fun ctz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i64\"[U64](this, true) fun bitwidth(): U64 => 64 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I64): I64 => if this < y then this else y end fun max(y: I64): I64 => if this > y then this else y end fun fld(y: I64): I64 => _SignedArithmetic.fld[I64, U64](this, y) fun fld_unsafe(y: I64): I64 => _SignedUnsafeArithmetic.fld_unsafe[I64, U64](this, y) fun mod(y: I64): I64 => _SignedArithmetic.mod[I64, U64](this, y) fun mod_unsafe(y: I64): I64 => _SignedUnsafeArithmetic.mod_unsafe[I64, U64](this, y) fun hash(): USize => u64().hash() fun addc(y: I64): (I64, Bool) => @\"llvm.sadd.with.overflow.i64\"[(I64, Bool)](this, y) fun subc(y: I64): (I64, Bool) => @\"llvm.ssub.with.overflow.i64\"[(I64, Bool)](this, y) fun mulc(y: I64): (I64, Bool) => _SignedCheckedArithmetic._mul_checked[U64, I64](this, y) fun divc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.div_checked[I64, U64](this, y) fun remc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.rem_checked[I64, U64](this, y) fun fldc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.fld_checked[I64, U64](this, y) fun modc(y: I64): (I64, Bool) => _SignedCheckedArithmetic.mod_checked[I64, U64](this, y) fun add_partial(y: I64): I64 ? => _SignedPartialArithmetic.add_partial[I64](this, y)? fun sub_partial(y: I64): I64 ? => _SignedPartialArithmetic.sub_partial[I64](this, y)? fun mul_partial(y: I64): I64 ? => _SignedPartialArithmetic.mul_partial[I64](this, y)? fun div_partial(y: I64): I64 ? => _SignedPartialArithmetic.div_partial[I64, U64](this, y)? fun rem_partial(y: I64): I64 ? => _SignedPartialArithmetic.rem_partial[I64, U64](this, y)? fun divrem_partial(y: I64): (I64, I64) ? => _SignedPartialArithmetic.divrem_partial[I64, U64](this, y)? fun fld_partial(y: I64): I64 ? => _SignedPartialArithmetic.fld_partial[I64, U64](this, y)? fun mod_partial(y: I64): I64 ? => _SignedPartialArithmetic.mod_partial[I64, U64](this, y)? primitive ILong is SignedInteger[ILong, ULong] new create(value: ILong) => value new from[A: (Number & Real[A] val)](a: A) => a.ilong() new min_value() => ifdef ilp32 or llp64 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() => ifdef ilp32 or llp64 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): ULong => if this < 0 then (-this).ulong() else this.ulong() end fun bit_reverse(): ILong => ifdef ilp32 or llp64 then @\"llvm.bitreverse.i32\"[ILong](this) else @\"llvm.bitreverse.i64\"[ILong](this) end fun bswap(): ILong => ifdef ilp32 or llp64 then @\"llvm.bswap.i32\"[ILong](this) else @\"llvm.bswap.i64\"[ILong](this) end fun popcount(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctpop.i32\"[ULong](this) else @\"llvm.ctpop.i64\"[ULong](this) end fun clz(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, false) else @\"llvm.ctlz.i64\"[ULong](this, false) end fun ctz(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, false) end fun clz_unsafe(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, true) else @\"llvm.ctlz.i64\"[ULong](this, true) end fun ctz_unsafe(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, true) end fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ILong): ILong => if this < y then this else y end fun max(y: ILong): ILong => if this > y then this else y end fun fld(y: ILong): ILong => _SignedArithmetic.fld[ILong, ULong](this, y) fun fld_unsafe(y: ILong): ILong => _SignedUnsafeArithmetic.fld_unsafe[ILong, ULong](this, y) fun mod(y: ILong): ILong => _SignedArithmetic.mod[ILong, ULong](this, y) fun mod_unsafe(y: ILong): ILong => _SignedUnsafeArithmetic.mod_unsafe[ILong, ULong](this, y) fun hash(): USize => ulong().hash() fun addc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then @\"llvm.sadd.with.overflow.i32\"[(ILong, Bool)](this, y) else @\"llvm.sadd.with.overflow.i64\"[(ILong, Bool)](this, y) end fun subc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then @\"llvm.ssub.with.overflow.i32\"[(ILong, Bool)](this, y) else @\"llvm.ssub.with.overflow.i64\"[(ILong, Bool)](this, y) end fun mulc(y: ILong): (ILong, Bool) => ifdef ilp32 or llp64 then @\"llvm.smul.with.overflow.i32\"[(ILong, Bool)](this, y) else _SignedCheckedArithmetic._mul_checked[ULong, ILong](this, y) end fun divc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.div_checked[ILong, ULong](this, y) fun remc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.rem_checked[ILong, ULong](this, y) fun fldc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.fld_checked[ILong, ULong](this, y) fun modc(y: ILong): (ILong, Bool) => _SignedCheckedArithmetic.mod_checked[ILong, ULong](this, y) fun add_partial(y: ILong): ILong ? => _SignedPartialArithmetic.add_partial[ILong](this, y)? fun sub_partial(y: ILong): ILong ? => _SignedPartialArithmetic.sub_partial[ILong](this, y)? fun mul_partial(y: ILong): ILong ? => _SignedPartialArithmetic.mul_partial[ILong](this, y)? fun div_partial(y: ILong): ILong ? => _SignedPartialArithmetic.div_partial[ILong, ULong](this, y)? fun rem_partial(y: ILong): ILong ? => _SignedPartialArithmetic.rem_partial[ILong, ULong](this, y)? fun divrem_partial(y: ILong): (ILong, ILong) ? => _SignedPartialArithmetic.divrem_partial[ILong, ULong](this, y)? fun fld_partial(y: ILong): ILong ? => _SignedPartialArithmetic.fld_partial[ILong, ULong](this, y)? fun mod_partial(y: ILong): ILong ? => _SignedPartialArithmetic.mod_partial[ILong, ULong](this, y)? primitive ISize is SignedInteger[ISize, USize] new create(value: ISize) => value new from[A: (Number & Real[A] val)](a: A) => a.isize() new min_value() => ifdef ilp32 then -0x8000_0000 else -0x8000_0000_0000_0000 end new max_value() => ifdef ilp32 then 0x7FFF_FFFF else 0x7FFF_FFFF_FFFF_FFFF end fun abs(): USize => if this < 0 then (-this).usize() else this.usize() end fun bit_reverse(): ISize => ifdef ilp32 then @\"llvm.bitreverse.i32\"[ISize](this) else @\"llvm.bitreverse.i64\"[ISize](this) end fun bswap(): ISize => ifdef ilp32 then @\"llvm.bswap.i32\"[ISize](this) else @\"llvm.bswap.i64\"[ISize](this) end fun popcount(): USize => ifdef ilp32 then @\"llvm.ctpop.i32\"[USize](this) else @\"llvm.ctpop.i64\"[USize](this) end fun clz(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, false) else @\"llvm.ctlz.i64\"[USize](this, false) end fun ctz(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, false) else @\"llvm.cttz.i64\"[USize](this, false) end fun clz_unsafe(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, true) else @\"llvm.ctlz.i64\"[USize](this, true) end fun ctz_unsafe(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, true) else @\"llvm.cttz.i64\"[USize](this, true) end fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ISize): ISize => if this < y then this else y end fun max(y: ISize): ISize => if this > y then this else y end fun fld(y: ISize): ISize => _SignedArithmetic.fld[ISize, USize](this, y) fun fld_unsafe(y: ISize): ISize => _SignedUnsafeArithmetic.fld_unsafe[ISize, USize](this, y) fun mod(y: ISize): ISize => _SignedArithmetic.mod[ISize, USize](this, y) fun mod_unsafe(y: ISize): ISize => _SignedUnsafeArithmetic.mod_unsafe[ISize, USize](this, y) fun addc(y: ISize): (ISize, Bool) => ifdef ilp32 then @\"llvm.sadd.with.overflow.i32\"[(ISize, Bool)](this, y) else @\"llvm.sadd.with.overflow.i64\"[(ISize, Bool)](this, y) end fun subc(y: ISize): (ISize, Bool) => ifdef ilp32 then @\"llvm.ssub.with.overflow.i32\"[(ISize, Bool)](this, y) else @\"llvm.ssub.with.overflow.i64\"[(ISize, Bool)](this, y) end fun mulc(y: ISize): (ISize, Bool) => ifdef ilp32 then @\"llvm.smul.with.overflow.i32\"[(ISize, Bool)](this, y) else _SignedCheckedArithmetic._mul_checked[USize, ISize](this, y) end fun divc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.div_checked[ISize, USize](this, y) fun remc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.rem_checked[ISize, USize](this, y) fun fldc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.fld_checked[ISize, USize](this, y) fun modc(y: ISize): (ISize, Bool) => _SignedCheckedArithmetic.mod_checked[ISize, USize](this, y) fun add_partial(y: ISize): ISize ? => _SignedPartialArithmetic.add_partial[ISize](this, y)? fun sub_partial(y: ISize): ISize ? => _SignedPartialArithmetic.sub_partial[ISize](this, y)? fun mul_partial(y: ISize): ISize ? => _SignedPartialArithmetic.mul_partial[ISize](this, y)? fun div_partial(y: ISize): ISize ? => _SignedPartialArithmetic.div_partial[ISize, USize](this, y)? fun rem_partial(y: ISize): ISize ? => _SignedPartialArithmetic.rem_partial[ISize, USize](this, y)? fun divrem_partial(y: ISize): (ISize, ISize) ? => _SignedPartialArithmetic.divrem_partial[ISize, USize](this, y)? fun fld_partial(y: ISize): ISize ? => _SignedPartialArithmetic.fld_partial[ISize, USize](this, y)? fun mod_partial(y: ISize): ISize ? => _SignedPartialArithmetic.mod_partial[ISize, USize](this, y)? primitive I128 is SignedInteger[I128, U128] new create(value: I128) => value new from[A: (Number & Real[A] val)](a: A) => a.i128() new min_value() => -0x8000_0000_0000_0000_0000_0000_0000_0000 new max_value() => 0x7FFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun abs(): U128 => if this < 0 then (-this).u128() else this.u128() end fun bit_reverse(): I128 => @\"llvm.bitreverse.i128\"[I128](this) fun bswap(): I128 => @\"llvm.bswap.i128\"[I128](this) fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this) fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false) fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false) fun clz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i128\"[U128](this, true) fun ctz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i128\"[U128](this, true) fun bitwidth(): U128 => 128 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: I128): I128 => if this < y then this else y end fun max(y: I128): I128 => if this > y then this else y end fun fld(y: I128): I128 => _SignedArithmetic.fld[I128, U128](this, y) fun fld_unsafe(y: I128): I128 => _SignedUnsafeArithmetic.fld_unsafe[I128, U128](this, y) fun mod(y: I128): I128 => _SignedArithmetic.mod[I128, U128](this, y) fun mod_unsafe(y: I128): I128 => _SignedUnsafeArithmetic.mod_unsafe[I128, U128](this, y) fun hash(): USize => u128().hash() fun hash64(): U64 => u128().hash64() fun string(): String iso^ => _ToString._u128(abs().u128(), this < 0) fun mul(y: I128): I128 => (u128() * y.u128()).i128() fun divrem(y: I128): (I128, I128) => ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var num: I128 = if this >= 0 then this else -this end var den: I128 = if y >= 0 then y else -y end (let q, let r) = num.u128().divrem(den.u128()) (var q', var r') = (q.i128(), r.i128()) if this < 0 then r' = -r' if y > 0 then q' = -q' end elseif y < 0 then q' = -q' end (q', r') end fun div(y: I128): I128 => ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: I128): I128 => ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: I128): (I128, I128) => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: I128): I128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this %~ y else this % y end fun f32(): F32 => f64().f32() fun f64(): F64 => if this < 0 then -(-u128()).f64() else u128().f64() end fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64() fun addc(y: I128): (I128, Bool) => ifdef native128 then @\"llvm.sadd.with.overflow.i128\"[(I128, Bool)](this, y) else let overflow = if y > 0 then (this > (max_value() - y)) else (this < (min_value() - y)) end (this + y, overflow) end fun subc(y: I128): (I128, Bool) => ifdef native128 then @\"llvm.ssub.with.overflow.i128\"[(I128, Bool)](this, y) else let overflow = if y > 0 then (this < (min_value() + y)) else (this > (max_value() + y)) end (this - y, overflow) end fun mulc(y: I128): (I128, Bool) => // using llvm.smul.with.overflow.i128 would require to link // llvm compiler-rt where the function implementing it lives: https://github.com/llvm-mirror/compiler-rt/blob/master/lib/builtins/muloti4.c // See this bug for reference: // the following implementation is more or less exactly was __muloti4 is // doing _SignedCheckedArithmetic._mul_checked[U128, I128](this, y) fun divc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.div_checked[I128, U128](this, y) fun remc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.rem_checked[I128, U128](this, y) fun fldc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.fld_checked[I128, U128](this, y) fun modc(y: I128): (I128, Bool) => _SignedCheckedArithmetic.mod_checked[I128, U128](this, y) fun add_partial(y: I128): I128 ? => _SignedPartialArithmetic.add_partial[I128](this, y)? fun sub_partial(y: I128): I128 ? => _SignedPartialArithmetic.sub_partial[I128](this, y)? fun mul_partial(y: I128): I128 ? => _SignedPartialArithmetic.mul_partial[I128](this, y)? fun div_partial(y: I128): I128 ? => _SignedPartialArithmetic.div_partial[I128, U128](this, y)? fun rem_partial(y: I128): I128 ? => _SignedPartialArithmetic.rem_partial[I128, U128](this, y)? fun divrem_partial(y: I128): (I128, I128) ? => _SignedPartialArithmetic.divrem_partial[I128, U128](this, y)? fun fld_partial(y: I128): I128 ? => _SignedPartialArithmetic.fld_partial[I128, U128](this, y)? fun mod_partial(y: I128): I128 ? => _SignedPartialArithmetic.mod_partial[I128, U128](this, y)? type Signed is (I8 | I16 | I32 | I64 | I128 | ILong | ISize)","title":"signed.pony"},{"location":"src/builtin/source_loc/","text":"interface val SourceLoc \"\"\" Represents a location in a Pony source file, as reported by `__loc`. \"\"\" fun file(): String \"\"\" Name and path of source file. \"\"\" fun type_name(): String \"\"\" Name of nearest class, actor, primitive, struct, interface, or trait. \"\"\" fun method_name(): String \"\"\" Name of containing method. \"\"\" fun line(): USize \"\"\" Line number within file. Line numbers start at 1. \"\"\" fun pos(): USize \"\"\" Character position on line. Character positions start at 1. \"\"\"","title":"source_loc.pony"},{"location":"src/builtin/std_stream/","text":"type ByteSeq is (String | Array[U8] val) interface val ByteSeqIter \"\"\" Accept an iterable collection of String or Array[U8] val. \"\"\" fun values(): Iterator[this->ByteSeq box] interface tag OutStream \"\"\" Asnychronous access to some output stream. \"\"\" be print(data: ByteSeq) \"\"\" Print some bytes and insert a newline afterwards. \"\"\" be write(data: ByteSeq) \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" be printv(data: ByteSeqIter) \"\"\" Print an iterable collection of ByteSeqs. \"\"\" be writev(data: ByteSeqIter) \"\"\" Write an iterable collection of ByteSeqs. \"\"\" be flush() \"\"\" Flush the stream. \"\"\" actor StdStream \"\"\" Asynchronous access to stdout and stderr. The constructors are private to ensure that access is provided only via an environment. \"\"\" var _stream: Pointer[None] new _out() => \"\"\" Create an async stream for stdout. \"\"\" _stream = @pony_os_stdout[Pointer[None]]() new _err() => \"\"\" Create an async stream for stderr. \"\"\" _stream = @pony_os_stderr[Pointer[None]]() be print(data: ByteSeq) => \"\"\" Print some bytes and insert a newline afterwards. \"\"\" _print(data) be write(data: ByteSeq) => \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" _write(data) be printv(data: ByteSeqIter) => \"\"\" Print an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _print(bytes) end be writev(data: ByteSeqIter) => \"\"\" Write an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _write(bytes) end be flush() => \"\"\" Flush any data out to the os (ignoring failures). \"\"\" @pony_os_std_flush[None](_stream) fun ref _write(data: ByteSeq) => \"\"\" Write the bytes without explicitly flushing. \"\"\" @pony_os_std_write[None](_stream, data.cpointer(), data.size()) fun ref _print(data: ByteSeq) => \"\"\" Write the bytes and a newline without explicitly flushing. \"\"\" @pony_os_std_print[None](_stream, data.cpointer(), data.size())","title":"std_stream.pony"},{"location":"src/builtin/stdin/","text":"use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) interface InputNotify \"\"\" Notification for data arriving via an input stream. \"\"\" fun ref apply(data: Array[U8] iso) => \"\"\" Called when data is available on the stream. \"\"\" None fun ref dispose() => \"\"\" Called when no more data will arrive on the stream. \"\"\" None interface tag InputStream \"\"\" Asynchronous access to some input stream. \"\"\" be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) \"\"\" Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. \"\"\" be dispose() => \"\"\" Clear the notifier in order to shut down input. \"\"\" None actor Stdin \"\"\" Asynchronous access to stdin. The constructor is private to ensure that access is provided only via an environment. Reading from stdin is done by registering an `InputNotify`: ```pony actor Main new create(env: Env) => // do not forget to call `env.input.dispose` at some point env.input( object iso is InputNotify fun ref apply(data: Array[U8] iso) => env.out.write(String.from_iso_array(consume data)) fun ref dispose() => env.out.print(\"Done.\") end, 512) ``` **Note:** For reading user input from a terminal, use the [term](term--index.md) package. \"\"\" var _notify: (InputNotify | None) = None var _chunk_size: USize = 32 var _event: AsioEventID = AsioEvent.none() let _use_event: Bool new _create(use_event: Bool) => \"\"\" Create an asynchronous stdin provider. \"\"\" _use_event = use_event be apply(notify: (InputNotify iso | None), chunk_size: USize = 32) => \"\"\" Set the notifier. Optionally, also sets the chunk size, dictating the maximum number of bytes of each chunk that will be passed to the notifier. \"\"\" _set_notify(consume notify) _chunk_size = chunk_size be dispose() => \"\"\" Clear the notifier in order to shut down input. \"\"\" _set_notify(None) fun ref _set_notify(notify: (InputNotify iso | None)) => \"\"\" Set the notifier. \"\"\" if notify is None then if _use_event and not _event.is_null() then // Unsubscribe the event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end elseif _notify is None then if _use_event then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.read(), 0, true) else // Start the read loop. _loop_read() end end try (_notify as InputNotify).dispose() end _notify = consume notify be _loop_read() => \"\"\" If we are able to read from stdin, schedule another read. \"\"\" if _read() then _loop_read() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When the event fires, read from stdin. \"\"\" if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif (_event is event) and AsioEvent.readable(flags) then _read() end be _read_again() => \"\"\" Resume reading. \"\"\" _read() fun ref _read(): Bool => \"\"\" Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send ourself a resume message and stop reading to avoid starving other actors. \"\"\" try let notify = _notify as InputNotify var sum: USize = 0 while true do let chunk_size = _chunk_size var data = recover Array[U8] .> undefined(chunk_size) end var again: Bool = false let len = @pony_os_stdin_read[USize](data.cpointer(), data.size(), addressof again) match len | -1 => // Error, possibly would block. Try again. return true | 0 => // EOF. Close everything, stop reading. _close_event() notify.dispose() _notify = None return false end data.truncate(len) notify(consume data) if not again then // Not allowed to call pony_os_stdin_read again yet, exit loop. return true end sum = sum + len if sum > (1 << 12) then if _use_event then _read_again() end break end end true else // No notifier. Stop reading. _close_event() false end fun ref _close_event() => \"\"\" Close the event. \"\"\" if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end","title":"stdin.pony"},{"location":"src/builtin/string/","text":"use @memcmp[I32](dst: Pointer[U8] box, src: Pointer[U8] box, len: USize) use @memset[Pointer[None]](dst: Pointer[None], set: U32, len: USize) use @memmove[Pointer[None]](dst: Pointer[None], src: Pointer[None], len: USize) use @strtof[F32](nptr: Pointer[U8] box, endptr: Pointer[Pointer[U8] box] ref) use @strtod[F64](nptr: Pointer[U8] box, endptr: Pointer[Pointer[U8] box] ref) use @pony_os_clear_errno[None]() use @pony_os_errno[I32]() class val String is (Seq[U8] & Comparable[String box] & Stringable) \"\"\" A String is an ordered collection of characters. Strings don't specify an encoding. Example usage of some common String methods: ```pony actor Main new create(env: Env) => try // construct a new string let str = \"Hello\" // make an uppercased version let str_upper = str.upper() // make a reversed version let str_reversed = str.reverse() // add \" world\" to the end of our original string let str_new = str.add(\" world\") // count occurrences of letter \"l\" let count = str_new.count(\"l\") // find first occurrence of letter \"w\" let first_w = str_new.find(\"w\") // find first occurrence of letter \"d\" let first_d = str_new.find(\"d\") // get substring capturing \"world\" let substr = str_new.substring(first_w, first_d+1) // clone substring let substr_clone = substr.clone() // print our substr env.out.print(consume substr) end ``` \"\"\" var _size: USize var _alloc: USize var _ptr: Pointer[U8] new create(len: USize = 0) => \"\"\" An empty string. Enough space for len bytes is reserved. \"\"\" _size = 0 _alloc = len.min(len.max_value() - 1) + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) new val from_array(data: Array[U8] val) => \"\"\" Create a string from an array, reusing the underlying data pointer. \"\"\" _size = data.size() _alloc = data.space() _ptr = data.cpointer()._unsafe() new iso from_iso_array(data: Array[U8] iso) => \"\"\" Create a string from an array, reusing the underlying data pointer \"\"\" _size = data.size() _alloc = data.space() _ptr = (consume data).cpointer()._unsafe() if _alloc > _size then _set(_size, 0) end new from_cpointer(str: Pointer[U8], len: USize, alloc: USize = 0) => \"\"\" Return a string from binary pointer data without making a copy. This must be done only with C-FFI functions that return pony_alloc'd character arrays. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = alloc.max(_size.min(len.max_value() - 1)) _ptr = str end new from_cstring(str: Pointer[U8]) => \"\"\" Return a string from a pointer to a null-terminated cstring without making a copy. The data is not copied. This must be done only with C-FFI functions that return pony_alloc'd character arrays. The pointer is scanned for the first null byte, which will be interpreted as the null terminator. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = str end new copy_cpointer(str: Pointer[U8] box, len: USize) => \"\"\" Create a string by copying a fixed number of bytes from a pointer. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else _size = len _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new copy_cstring(str: Pointer[U8] box) => \"\"\" Create a string by copying a null-terminated C string. Note that the scan is unbounded; the pointed to data must be null-terminated within the allocated array to preserve memory safety. If a null pointer is given then an empty string is returned. \"\"\" if str.is_null() then _size = 0 _alloc = 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, 0) else var i: USize = 0 while str._apply(i) != 0 do i = i + 1 end _size = i _alloc = i + 1 _ptr = Pointer[U8]._alloc(_alloc) str._copy_to(_ptr, _alloc) end new from_utf32(value: U32) => \"\"\" Create a UTF-8 string from a single UTF-32 code point. \"\"\" let encoded = _UTF32Encoder.encode(value) _size = encoded._1 _alloc = _size + 1 _ptr = Pointer[U8]._alloc(_alloc) _set(0, encoded._2) if encoded._1 > 1 then _set(1, encoded._3) if encoded._1 > 2 then _set(2, encoded._4) if encoded._1 > 3 then _set(3, encoded._5) end end end _set(_size, 0) fun ref push_utf32(value: U32) => \"\"\" Push a UTF-32 code point. \"\"\" let encoded = _UTF32Encoder.encode(value) let i = _size _size = _size + encoded._1 reserve(_size) _set(i, encoded._2) if encoded._1 > 1 then _set(i + 1, encoded._3) if encoded._1 > 2 then _set(i + 2, encoded._4) if encoded._1 > 3 then _set(i + 3, encoded._5) end end end _set(_size, 0) fun box _copy_to(ptr: Pointer[U8] ref, copy_len: USize, from_offset: USize = 0, to_offset: USize = 0) => \"\"\" Copy copy_len characters from this to that at specified offsets. \"\"\" _ptr._offset(from_offset)._copy_to(ptr._offset(to_offset), copy_len) fun cpointer(offset: USize = 0): Pointer[U8] tag => \"\"\" Returns a C compatible pointer to the underlying string allocation. \"\"\" _ptr._offset(offset) fun cstring(): Pointer[U8] tag => \"\"\" Returns a C compatible pointer to a null-terminated version of the string, safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. If the underlying string is already null terminated, this is returned; otherwise the string is copied into a new, null-terminated allocation. \"\"\" if is_null_terminated() then return _ptr end let ptr = Pointer[U8]._alloc(_size + 1) _ptr._copy_to(ptr._unsafe(), _size) ptr._update(_size, 0) ptr fun val array(): Array[U8] val => \"\"\" Returns an Array[U8] that reuses the underlying data pointer. \"\"\" recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun iso iso_array(): Array[U8] iso^ => \"\"\" Returns an Array[U8] iso that reuses the underlying data pointer. \"\"\" recover Array[U8].from_cpointer(_ptr._unsafe(), _size, _alloc) end fun size(): USize => \"\"\" Returns the length of the string data in bytes. \"\"\" _size fun codepoints(from: ISize = 0, to: ISize = ISize.max_value()): USize => \"\"\" Returns the number of unicode code points in the string between the two offsets. Index range [`from` .. `to`) is half-open. \"\"\" if _size == 0 then return 0 end var i = offset_to_index(from) let j = offset_to_index(to).min(_size) var n = USize(0) while i < j do if (_ptr._apply(i) and 0xC0) != 0x80 then n = n + 1 end i = i + 1 end n fun space(): USize => \"\"\" Returns the space available for data, not including the null terminator. \"\"\" if is_null_terminated() then _alloc - 1 else _alloc end fun ref reserve(len: USize) => \"\"\" Reserve space for len bytes. An additional byte will be reserved for the null terminator. \"\"\" if _alloc <= len then let max = len.max_value() - 1 let min_alloc = len.min(max) + 1 if min_alloc <= (max / 2) then _alloc = min_alloc.next_pow2() else _alloc = min_alloc.min(max) end _ptr = _ptr._realloc(_alloc) end fun ref compact() => \"\"\" Try to remove unused space, making it available for garbage collection. The request may be ignored. The string is returned to allow call chaining. \"\"\" if (_size + 1) <= 512 then if (_size + 1).next_pow2() != _alloc.next_pow2() then _alloc = (_size + 1).next_pow2() let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end elseif (_size + 1) < _alloc then _alloc = (_size + 1) let old_ptr = _ptr = Pointer[U8]._alloc(_alloc) old_ptr._copy_to(_ptr, _size) _set(_size, 0) end fun ref recalc() => \"\"\" Recalculates the string length. This is only needed if the string is changed via an FFI call. If a null terminator byte is not found within the allocated length, the size will not be changed. \"\"\" var s: USize = 0 while (s < _alloc) and (_ptr._apply(s) > 0) do s = s + 1 end if s != _alloc then _size = s end fun ref truncate(len: USize) => \"\"\" Truncates the string at the minimum of len and space. Ensures there is a null terminator. Does not check for null terminators inside the string. Note that memory is not freed by this operation. \"\"\" if len >= _alloc then _size = len.min(_alloc) reserve(_alloc + 1) else _size = len.min(_alloc - 1) end _set(_size, 0) fun ref trim_in_place(from: USize = 0, to: USize = -1) => \"\"\" Trim the string to a portion of itself, covering `from` until `to`. Unlike slice, the operation does not allocate a new string nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. _alloc = if last == _size then _alloc - offset else size' end _size = size' // if _alloc == 0 then we've trimmed all the memory originally allocated. // if we do _ptr._offset, we will spill into memory not allocated/owned // by this string and could potentially cause a segfault if we cross // a pagemap boundary into a pagemap address that hasn't been allocated // yet when `reserve` is called next. if _alloc == 0 then _ptr = Pointer[U8] else _ptr = _ptr._offset(offset) end fun val trim(from: USize = 0, to: USize = -1): String val => \"\"\" Return a shared portion of this string, covering `from` until `to`. Both the original and the new string are immutable, as they share memory. The operation does not allocate a new string pointer nor copy elements. \"\"\" let last = _size.min(to) let offset = last.min(from) recover let size' = last - offset // use the new size' for alloc if we're not including the last used byte // from the original data and only include the extra allocated bytes if // we're including the last byte. let alloc = if last == _size then _alloc - offset else size' end if size' > 0 then from_cpointer(_ptr._offset(offset)._unsafe(), size', alloc) else create() end end fun iso chop(split_point: USize): (String iso^, String iso^) => \"\"\" Chops the string in half at the split point requested and returns both the left and right portions. The original string is trimmed in place and returned as the left portion. If the split point is larger than the string, the left portion is the original string and the right portion is a new empty string. Both strings are isolated and mutable, as they do not share memory. The operation does not allocate a new string pointer nor copy elements. \"\"\" let start_ptr = cpointer(split_point) let size' = _size - _size.min(split_point) let alloc = _alloc - _size.min(split_point) trim_in_place(0, split_point) let right = recover if size' > 0 then from_cpointer(start_ptr._unsafe(), size', alloc) else create() end end (consume this, consume right) fun iso unchop(b: String iso): ((String iso^, String iso^) | String iso^) => \"\"\" Unchops two iso strings to return the original string they were chopped from. Both input strings are isolated and mutable and were originally chopped from a single string. This function checks that they are indeed two strings chopped from the same original string and can be unchopped before doing the unchopping and returning the unchopped string. If the two strings cannot be unchopped it returns both strings without modifying them. The operation does not allocate a new string pointer nor copy elements. \"\"\" if _size == 0 then return consume b end if b.size() == 0 then return consume this end (let unchoppable, let a_left) = if (_size == _alloc) and (cpointer(_size) == b.cpointer()) then (true, true) elseif (b.size() == b.space()) and (b.cpointer(b.size()) == cpointer()) then (true, false) else (false, false) end if not unchoppable then return (consume this, consume b) end if a_left then _alloc = _alloc + b._alloc _size = _size + b._size consume this else b._alloc = b._alloc + _alloc b._size = b._size + _size consume b end fun is_null_terminated(): Bool => \"\"\" Return true if the string is null-terminated and safe to pass to an FFI function that doesn't accept a size argument, expecting a null-terminator. This method checks that there is a null byte just after the final position of populated bytes in the string, but does not check for other null bytes which may be present earlier in the content of the string. If you need a null-terminated copy of this string, use the clone method. \"\"\" (_alloc > 0) and (_alloc != _size) and (_ptr._apply(_size) == 0) fun utf32(offset: ISize): (U32, U8) ? => \"\"\" Return a UTF32 representation of the character at the given offset and the number of bytes needed to encode that character. If the offset does not point to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode replacement character) and a length of one. Raise an error if the offset is out of bounds. \"\"\" let i = offset_to_index(offset) let err: (U32, U8) = (0xFFFD, 1) if i >= _size then error end let c = _ptr._apply(i) if c < 0x80 then // 1-byte (c.u32(), 1) elseif c < 0xC2 then // Stray continuation. err elseif c < 0xE0 then // 2-byte if (i + 1) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) if (c2 and 0xC0) != 0x80 then // Not a continuation byte. err else (((c.u32() << 6) + c2.u32()) - 0x3080, 2) end end elseif c < 0xF0 then // 3-byte. if (i + 2) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xE0) and (c2 < 0xA0)) then err else (((c.u32() << 12) + (c2.u32() << 6) + c3.u32()) - 0xE2080, 3) end end elseif c < 0xF5 then // 4-byte. if (i + 3) >= _size then // Not enough bytes. err else let c2 = _ptr._apply(i + 1) let c3 = _ptr._apply(i + 2) let c4 = _ptr._apply(i + 3) if // Not continuation bytes. ((c2 and 0xC0) != 0x80) or ((c3 and 0xC0) != 0x80) or ((c4 and 0xC0) != 0x80) or // Overlong encoding. ((c == 0xF0) and (c2 < 0x90)) or // UTF32 would be > 0x10FFFF. ((c == 0xF4) and (c2 >= 0x90)) then err else (((c.u32() << 18) + (c2.u32() << 12) + (c3.u32() << 6) + c4.u32()) - 0x3C82080, 4) end end else // UTF32 would be > 0x10FFFF. err end fun apply(i: USize): U8 ? => \"\"\" Returns the i-th byte. Raise an error if the index is out of bounds. \"\"\" if i < _size then _ptr._apply(i) else error end fun ref update(i: USize, value: U8): U8 ? => \"\"\" Change the i-th byte. Raise an error if the index is out of bounds. \"\"\" if i < _size then _set(i, value) else error end fun at_offset(offset: ISize): U8 ? => \"\"\" Returns the byte at the given offset. Raise an error if the offset is out of bounds. \"\"\" this(offset_to_index(offset))? fun ref update_offset(offset: ISize, value: U8): U8 ? => \"\"\" Changes a byte in the string, returning the previous byte at that offset. Raise an error if the offset is out of bounds. \"\"\" this(offset_to_index(offset))? = value fun clone(): String iso^ => \"\"\" Returns a copy of the string. The resulting string is null-terminated even if the original is not. \"\"\" let len = _size let str = recover String(len) end _ptr._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str fun repeat_str(num: USize = 1, sep: String = \"\"): String iso^ => \"\"\" Returns a copy of the string repeated `num` times with an optional separator added inbetween repeats. \"\"\" var c = num var str = recover String((_size + sep.size()) * c) end while c > 0 do c = c - 1 str = (consume str)._append(this) if (sep.size() > 0) and (c != 0) then str = (consume str)._append(sep) end end consume str fun mul(num: USize): String iso^ => \"\"\" Returns a copy of the string repeated `num` times. \"\"\" repeat_str(num) fun find(s: String box, offset: ISize = 0, nth: USize = 0): ISize ? => \"\"\" Return the index of the n-th instance of s in the string starting from the beginning. Raise an error if there is no n-th occurrence of s or s is empty. \"\"\" var i = offset_to_index(offset) var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i + 1 end error fun rfind(s: String box, offset: ISize = -1, nth: USize = 0): ISize ? => \"\"\" Return the index of n-th instance of `s` in the string starting from the end. The `offset` represents the highest index to included in the search. Raise an error if there is no n-th occurrence of `s` or `s` is empty. \"\"\" var i = (offset_to_index(offset) + 1) - s._size var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return i.isize() end i = i - 1 end error fun contains(s: String box, offset: ISize = 0, nth: USize = 0): Bool => \"\"\" Returns true if contains s as a substring, false otherwise. \"\"\" var i = offset_to_index(offset) var steps = nth + 1 while i < _size do var j: USize = 0 let same = while j < s._size do if _ptr._apply(i + j) != s._ptr._apply(j) then break false end j = j + 1 true else false end if same and ((steps = steps - 1) == 1) then return true end i = i + 1 end false fun count(s: String box, offset: ISize = 0): USize => \"\"\" Counts the non-overlapping occurrences of s in the string. \"\"\" let j: ISize = (_size - s.size()).isize() var i: USize = 0 var k = offset if j < 0 then return 0 elseif (j == 0) and (this == s) then return 1 end try while k <= j do k = find(s, k)? + s.size().isize() i = i + 1 end end i fun at(s: String box, offset: ISize = 0): Bool => \"\"\" Returns true if the substring s is present at the given offset. \"\"\" let i = offset_to_index(offset) if (i + s.size()) <= _size then @memcmp(_ptr._offset(i), s._ptr, s._size) == 0 else false end fun ref delete(offset: ISize, len: USize = 1) => \"\"\" Delete len bytes at the supplied offset, compacting the string in place. \"\"\" let i = offset_to_index(offset) if i < _size then let n = len.min(_size - i) _size = _size - n _ptr._offset(i)._delete(n, _size - i) _set(_size, 0) end fun substring(from: ISize, to: ISize = ISize.max_value()): String iso^ => \"\"\" Returns a substring. Index range [`from` .. `to`) is half-open. Returns an empty string if nothing is in the range. Note that this operation allocates a new string to be returned. For similar operations that don't allocate a new string, see `trim` and `trim_in_place`. \"\"\" let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start < _size) and (start < finish) then let len = finish - start let str = recover String(len) end _ptr._offset(start)._copy_to(str._ptr._unsafe(), len) str._size = len str._set(len, 0) str else recover String end end fun lower(): String iso^ => \"\"\" Returns a lower case version of the string. \"\"\" let s = clone() s.lower_in_place() s fun ref lower_in_place() => \"\"\" Transforms the string to lower case. Currently only knows ASCII case. \"\"\" var i: USize = 0 while i < _size do let c = _ptr._apply(i) if (c >= 0x41) and (c <= 0x5A) then _set(i, c + 0x20) end i = i + 1 end fun upper(): String iso^ => \"\"\" Returns an upper case version of the string. Currently only knows ASCII case. \"\"\" let s = clone() s.upper_in_place() s fun ref upper_in_place() => \"\"\" Transforms the string to upper case. \"\"\" var i: USize = 0 while i < _size do let c = _ptr._apply(i) if (c >= 0x61) and (c <= 0x7A) then _set(i, c - 0x20) end i = i + 1 end fun reverse(): String iso^ => \"\"\" Returns a reversed version of the string. \"\"\" let s = clone() s.reverse_in_place() s fun ref reverse_in_place() => \"\"\" Reverses the byte order in the string. This needs to be changed to handle UTF-8 correctly. \"\"\" if _size > 1 then var i: USize = 0 var j = _size - 1 while i < j do let x = _ptr._apply(i) _set(i, _ptr._apply(j)) _set(j, x) i = i + 1 j = j - 1 end end fun ref push(value: U8) => \"\"\" Add a byte to the end of the string. \"\"\" reserve(_size + 1) _set(_size, value) _size = _size + 1 _set(_size, 0) fun ref pop(): U8 ? => \"\"\" Remove a byte from the end of the string. \"\"\" if _size > 0 then _size = _size - 1 _ptr._offset(_size)._delete(1, 0) else error end fun ref unshift(value: U8) => \"\"\" Adds a byte to the beginning of the string. \"\"\" if value != 0 then reserve(_size + 1) @memmove(_ptr.usize() + 1, _ptr.usize(), _size + 1) _set(0, value) _size = _size + 1 else _set(0, 0) _size = 0 end fun ref shift(): U8 ? => \"\"\" Removes a byte from the beginning of the string. \"\"\" if _size > 0 then let value = _ptr._apply(0) @memmove(_ptr.usize(), _ptr.usize() + 1, _size) _size = _size - 1 value else error end fun ref append(seq: ReadSeq[U8], offset: USize = 0, len: USize = -1) => \"\"\" Append the elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) match seq | let s: (String box | Array[U8] box) => s._copy_to(_ptr, copy_len, offset, _size) _size = _size + copy_len _set(_size, 0) else let cap = copy_len + offset var i = offset try while i < cap do push(seq(i)?) i = i + 1 end end end fun ref concat(iter: Iterator[U8], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated bytes to the end of the string, starting from the given offset. \"\"\" try var n = USize(0) while n < offset do if iter.has_next() then iter.next()? else return end n = n + 1 end n = 0 while n < len do if iter.has_next() then push(iter.next()?) else return end n = n + 1 end end fun ref clear() => \"\"\" Truncate the string to zero length. \"\"\" _set(0, 0) _size = 0 fun insert(offset: ISize, that: String): String iso^ => \"\"\" Returns a version of the string with the given string inserted at the given offset. \"\"\" let s = clone() s.insert_in_place(offset, that) s fun ref insert_in_place(offset: ISize, that: String box) => \"\"\" Inserts the given string at the given offset. Appends the string if the offset is out of bounds. \"\"\" reserve(_size + that._size) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + that._size, _ptr.usize() + index, _size - index) that._ptr._copy_to(_ptr._offset(index), that._size) _size = _size + that._size _set(_size, 0) fun ref insert_byte(offset: ISize, value: U8) => \"\"\" Inserts a byte at the given offset. Appends if the offset is out of bounds. \"\"\" reserve(_size + 1) let index = offset_to_index(offset).min(_size) @memmove(_ptr.usize() + index + 1, _ptr.usize() + index, _size - index) _set(index, value) _size = _size + 1 _set(_size, 0) fun cut(from: ISize, to: ISize = ISize.max_value()): String iso^ => \"\"\" Returns a version of the string with the given range deleted. Index range [`from` .. `to`) is half-open. \"\"\" let s = clone() s.cut_in_place(from, to) s fun ref cut_in_place(from: ISize, to: ISize = ISize.max_value()) => \"\"\" Cuts the given range out of the string. Index range [`from` .. `to`) is half-open. \"\"\" let start = offset_to_index(from) let finish = offset_to_index(to).min(_size) if (start < _size) and (start < finish) and (finish <= _size) then let fragment_len = finish - start let new_size = _size - fragment_len var i = start while i < new_size do _set(i, _ptr._apply(i + fragment_len)) i = i + 1 end _size = _size - fragment_len _set(_size, 0) end fun ref remove(s: String box): USize => \"\"\" Remove all instances of s from the string. Returns the count of removed instances. \"\"\" var i: ISize = 0 var n: USize = 0 try while true do i = find(s, i)? cut_in_place(i, i + s.size().isize()) n = n + 1 end end n fun ref replace(from: String box, to: String box, n: USize = 0): USize => \"\"\" Replace up to n occurrences of `from` in `this` with `to`. If n is 0, all occurrences will be replaced. Returns the count of replaced occurrences. \"\"\" let from_len = from.size().isize() let to_len = to.size().isize() var offset = ISize(0) var occur = USize(0) try while true do offset = find(from, offset)? cut_in_place(offset, offset + from_len) insert_in_place(offset, to) offset = offset + to_len occur = occur + 1 if (n > 0) and (occur >= n) then break end end end occur fun split_by( delim: String, n: USize = USize.max_value()) : Array[String] iso^ => \"\"\" Split the string into an array of strings that are delimited by `delim` in the original string. If `n > 0`, then the split count is limited to n. Example: ```pony let original: String = \"<b><span>Hello!</span></b>\" let delimiter: String = \"><\" let split_array: Array[String] = original.split_by(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // <b // span>Hello!</span // b> ``` Adjacent delimiters result in a zero length entry in the array. For example, `\"1CutCut2\".split_by(\"Cut\") => [\"1\", \"\", \"2\"]`. An empty delimiter results in an array that contains a single element equal to the whole string. If you want to split the string with each individual character of `delim`, use [`split`](#split). \"\"\" let delim_size = ISize.from[USize](delim.size()) let total_size = ISize.from[USize](size()) let result = recover Array[String] end var current = ISize(0) while ((result.size() + 1) < n) and (current < total_size) do try let delim_start = find(delim where offset = current)? result.push(substring(current, delim_start)) current = delim_start + delim_size else break end end result.push(substring(current)) consume result fun split(delim: String = \" \\t\\v\\f\\r\\n\", n: USize = 0): Array[String] iso^ => \"\"\" Split the string into an array of strings with any character in the delimiter string. By default, the string is split with whitespace characters. If `n > 0`, then the split count is limited to n. Example: ```pony let original: String = \"name,job;department\" let delimiter: String = \".,;\" let split_array: Array[String] = original.split(delimiter) env.out.print(\"OUTPUT:\") for value in split_array.values() do env.out.print(value) end // OUTPUT: // name // job // department ``` Adjacent delimiters result in a zero length entry in the array. For example, `\"1,,2\".split(\",\") => [\"1\", \"\", \"2\"]`. If you want to split the string with the entire delimiter string `delim`, use [`split_by`](#split_by). \"\"\" let result = recover Array[String] end if _size > 0 then let chars = Array[U32](delim.size()) for rune in delim.runes() do chars.push(rune) end var cur = recover String end var i = USize(0) var occur = USize(0) try while i < _size do (let c, let len) = utf32(i.isize())? if chars.contains(c) then // If we find a delimiter, add the current string to the array. occur = occur + 1 if (n > 0) and (occur >= n) then break end result.push(cur = recover String end) else // Add bytes to the current string. var j = U8(0) while j < len do cur.push(_ptr._apply(i + j.usize())) j = j + 1 end end i = i + len.usize() end end // Add all remaining bytes to the current string. while i < _size do cur.push(_ptr._apply(i)) i = i + 1 end result.push(consume cur) end consume result fun ref strip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all leading and trailing characters from the string that are in s. \"\"\" this .> lstrip(s) .> rstrip(s) fun ref rstrip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all trailing characters within the string that are in s. By default, trailing whitespace is removed. \"\"\" if _size > 0 then let chars = Array[U32](s.size()) var i = _size - 1 var truncate_at = _size for rune in s.runes() do chars.push(rune) end repeat try match utf32(i.isize())? | (0xFFFD, 1) => None | (let c: U32, _) => if not chars.contains(c) then break end truncate_at = i end else break end until (i = i - 1) == 0 end truncate(truncate_at) end fun ref lstrip(s: String box = \" \\t\\v\\f\\r\\n\") => \"\"\" Remove all leading characters within the string that are in s. By default, leading whitespace is removed. \"\"\" if _size > 0 then let chars = Array[U32](s.size()) var i = USize(0) for rune in s.runes() do chars.push(rune) end while i < _size do try (let c, let len) = utf32(i.isize())? if not chars.contains(c) then break end i = i + len.usize() else break end end if i > 0 then delete(0, i) end end fun iso _append(s: String box): String iso^ => let len = _size + s._size reserve(len) if s.is_null_terminated() then s._copy_to(_ptr._unsafe(), s._size + 1, 0, _size) else s._copy_to(_ptr._unsafe(), s._size, 0, _size) end _size = len consume this fun add(that: String box): String => \"\"\" Return a string that is a concatenation of this and that. \"\"\" let len = _size + that._size let s = recover String(len) end (consume s)._append(this)._append(that) fun join(data: Iterator[Stringable]): String iso^ => \"\"\" Return a string that is a concatenation of the strings in data, using this as a separator. \"\"\" var buf = recover String end var first = true for v in data do if first then first = false else buf = (consume buf)._append(this) end buf.append(v.string()) end buf fun compare(that: String box): Compare => \"\"\" Lexically compare two strings. \"\"\" compare_sub(that, _size.max(that._size)) fun compare_sub( that: String box, n: USize, offset: ISize = 0, that_offset: ISize = 0, ignore_case: Bool = false) : Compare => \"\"\" Lexically compare at most `n` bytes of the substring of `this` starting at `offset` with the substring of `that` starting at `that_offset`. The comparison is case sensitive unless `ignore_case` is `true`. If the substring of `this` is a proper prefix of the substring of `that`, then `this` is `Less` than `that`. Likewise, if `that` is a proper prefix of `this`, then `this` is `Greater` than `that`. Both `offset` and `that_offset` can be negative, in which case the offsets are computed from the end of the string. If `n + offset` is greater than the length of `this`, or `n + that_offset` is greater than the length of `that`, then the number of positions compared will be reduced to the length of the longest substring. Needs to be made UTF-8 safe. \"\"\" var j: USize = offset_to_index(offset) var k: USize = that.offset_to_index(that_offset) var i = n.min((_size - j).max(that._size - k)) while i > 0 do // this and that are equal up to this point if j >= _size then // this is shorter return Less elseif k >= that._size then // that is shorter return Greater end let c1 = _ptr._apply(j) let c2 = that._ptr._apply(k) if not ((c1 == c2) or (ignore_case and ((c1 or 0x20) == (c2 or 0x20)) and ((c1 or 0x20) >= 'a') and ((c1 or 0x20) <= 'z'))) then // this and that differ here return if c1.i32() > c2.i32() then Greater else Less end end j = j + 1 k = k + 1 i = i - 1 end Equal fun eq(that: String box): Bool => \"\"\" Returns true if the two strings have the same contents. \"\"\" if _size == that._size then @memcmp(_ptr, that._ptr, _size) == 0 else false end fun lt(that: String box): Bool => \"\"\" Returns true if this is lexically less than that. Needs to be made UTF-8 safe. \"\"\" let len = _size.min(that._size) var i: USize = 0 while i < len do if _ptr._apply(i) < that._ptr._apply(i) then return true elseif _ptr._apply(i) > that._ptr._apply(i) then return false end i = i + 1 end _size < that._size fun le(that: String box): Bool => \"\"\" Returns true if this is lexically less than or equal to that. Needs to be made UTF-8 safe. \"\"\" let len = _size.min(that._size) var i: USize = 0 while i < len do if _ptr._apply(i) < that._ptr._apply(i) then return true elseif _ptr._apply(i) > that._ptr._apply(i) then return false end i = i + 1 end _size <= that._size fun offset_to_index(i: ISize): USize => if i < 0 then i.usize() + _size else i.usize() end fun bool(): Bool ? => match lower() | \"true\" => true | \"false\" => false else error end fun i8(base: U8 = 0): I8 ? => _to_int[I8](base)? fun i16(base: U8 = 0): I16 ? => _to_int[I16](base)? fun i32(base: U8 = 0): I32 ? => _to_int[I32](base)? fun i64(base: U8 = 0): I64 ? => _to_int[I64](base)? fun i128(base: U8 = 0): I128 ? => _to_int[I128](base)? fun ilong(base: U8 = 0): ILong ? => _to_int[ILong](base)? fun isize(base: U8 = 0): ISize ? => _to_int[ISize](base)? fun u8(base: U8 = 0): U8 ? => _to_int[U8](base)? fun u16(base: U8 = 0): U16 ? => _to_int[U16](base)? fun u32(base: U8 = 0): U32 ? => _to_int[U32](base)? fun u64(base: U8 = 0): U64 ? => _to_int[U64](base)? fun u128(base: U8 = 0): U128 ? => _to_int[U128](base)? fun ulong(base: U8 = 0): ULong ? => _to_int[ULong](base)? fun usize(base: U8 = 0): USize ? => _to_int[USize](base)? fun _to_int[A: ((Signed | Unsigned) & Integer[A] val)](base: U8): A ? => \"\"\" Convert the *whole* string to the specified type. If there are any other characters in the string, or the integer found is out of range for the target type then an error is thrown. \"\"\" (let v, let d) = read_int[A](0, base)? // Check the whole string is used if (d == 0) or (d.usize() != _size) then error end v fun read_int[A: ((Signed | Unsigned) & Integer[A] val)]( offset: ISize = 0, base: U8 = 0) : (A, USize /* chars used */) ? => \"\"\" Read an integer from the specified location in this string. The integer value read and the number of characters consumed are reported. The base parameter specifies the base to use, 0 indicates using the prefix, if any, to detect base 2, 10 or 16. If no integer is found at the specified location, then (0, 0) is returned, since no characters have been used. An integer out of range for the target type throws an error. A leading minus is allowed for signed integer types. Underscore characters are allowed throughout the integer and are ignored. \"\"\" let start_index = offset_to_index(offset) var index = start_index var value: A = 0 var had_digit = false // Check for leading minus let minus = (index < _size) and (_ptr._apply(index) == '-') if minus then if A(-1) > A(0) then // We're reading an unsigned type, negative not allowed, int not found return (0, 0) end index = index + 1 end (let base', let base_chars) = _read_int_base[A](base, index) index = index + base_chars // Process characters while index < _size do let char: A = A(0).from[U8](_ptr._apply(index)) if char == '_' then index = index + 1 continue end let digit = if (char >= '0') and (char <= '9') then char - '0' elseif (char >= 'A') and (char <= 'Z') then (char - 'A') + 10 elseif (char >= 'a') and (char <= 'z') then (char - 'a') + 10 else break end if digit >= base' then break end value = if minus then (value *? base') -? digit else (value *? base') +? digit end had_digit = true index = index + 1 end // Check result if not had_digit then // No integer found return (0, 0) end // Success (value, index - start_index) fun _read_int_base[A: ((Signed | Unsigned) & Integer[A] val)]( base: U8, index: USize) : (A, USize /* chars used */) => \"\"\" Determine the base of an integer starting at the specified index. If a non-0 base is given use that. If given base is 0 read the base specifying prefix, if any, to detect base 2 or 16. If no base is specified and no prefix is found default to decimal. Note that a leading 0 does NOT imply octal. Report the base found and the number of characters in the prefix. \"\"\" if base > 0 then return (A(0).from[U8](base), 0) end // Determine base from prefix if (index + 2) >= _size then // Not enough characters, must be decimal return (10, 0) end let lead_char = _ptr._apply(index) let base_char = _ptr._apply(index + 1) and not 0x20 if (lead_char == '0') and (base_char == 'B') then return (2, 2) end if (lead_char == '0') and (base_char == 'X') then return (16, 2) end // No base specified, default to decimal (10, 0) fun f32(offset: ISize = 0): F32 ? => \"\"\" Convert this string starting at the given offset to a 32-bit floating point number ([F32](builtin-F32.md)). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: ```pony \"1.5\".f32()? == F32(1.5) \"1.19208e-07\".f32()? == F32(1.19208e-07) \"NaN\".f32()?.nan() == true ``` \"\"\" let index = offset_to_index(offset) if index < _size then @pony_os_clear_errno() var endp: Pointer[U8] box = Pointer[U8] let res = @strtof(_ptr._offset(index), addressof endp) let errno: I32 = @pony_os_errno() if (errno != 0) or (endp != _ptr._offset(_size)) then error else res end else error end fun f64(offset: ISize = 0): F64 ? => \"\"\" Convert this string starting at the given offset to a 64-bit floating point number ([F64](builtin-F64.md)). This method errors if this string cannot be parsed to a float, if the result would over- or underflow, the offset exceeds the size of this string or there are leftover characters in the string after conversion. Examples: ```pony \"1.5\".f64()? == F64(1.5) \"1.19208e-07\".f64()? == F64(1.19208e-07) \"Inf\".f64()?.infinite() == true ``` \"\"\" let index = offset_to_index(offset) if index < _size then @pony_os_clear_errno() var endp: Pointer[U8] box = Pointer[U8] let res = @strtod(_ptr._offset(index), addressof endp) let errno: I32 = @pony_os_errno() if (errno != 0) or (endp != _ptr._offset(_size)) then error else res end else error end fun hash(): USize => @ponyint_hash_block[USize](_ptr, _size) fun hash64(): U64 => @ponyint_hash_block64[U64](_ptr, _size) fun string(): String iso^ => clone() fun values(): StringBytes^ => \"\"\" Return an iterator over the bytes in the string. \"\"\" StringBytes(this) fun runes(): StringRunes^ => \"\"\" Return an iterator over the codepoints in the string. \"\"\" StringRunes(this) fun ref _set(i: USize, value: U8): U8 => \"\"\" Unsafe update, used internally. \"\"\" _ptr._update(i, value) class StringBytes is Iterator[U8] let _string: String box var _i: USize new create(string: String box) => _string = string _i = 0 fun has_next(): Bool => _i < _string.size() fun ref next(): U8 ? => _string(_i = _i + 1)? class StringRunes is Iterator[U32] let _string: String box var _i: USize new create(string: String box) => _string = string _i = 0 fun has_next(): Bool => _i < _string.size() fun ref next(): U32 ? => (let rune, let len) = _string.utf32(_i.isize())? _i = _i + len.usize() rune primitive _UTF32Encoder fun encode(value: U32): (USize, U8, U8, U8, U8) => \"\"\" Encode the code point into UTF-8. It returns a tuple with the size of the encoded data and then the data. \"\"\" if value < 0x80 then (1, value.u8(), 0, 0, 0) elseif value < 0x800 then ( 2, ((value >> 6) or 0xC0).u8(), ((value and 0x3F) or 0x80).u8(), 0, 0 ) elseif value < 0xD800 then ( 3, ((value >> 12) or 0xE0).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value < 0xE000 then // UTF-16 surrogate pairs are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) elseif value < 0x10000 then ( 3, ((value >> 12) or 0xE0).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8(), 0 ) elseif value < 0x110000 then ( 4, ((value >> 18) or 0xF0).u8(), (((value >> 12) and 0x3F) or 0x80).u8(), (((value >> 6) and 0x3F) or 0x80).u8(), ((value and 0x3F) or 0x80).u8() ) else // Code points beyond 0x10FFFF are not allowed. (3, 0xEF, 0xBF, 0xBD, 0) end","title":"string.pony"},{"location":"src/builtin/stringable/","text":"interface box Stringable \"\"\" Things that can be turned into a String. \"\"\" fun string(): String iso^ \"\"\" Generate a string representation of this object. \"\"\"","title":"stringable.pony"},{"location":"src/builtin/unsigned/","text":"primitive U8 is UnsignedInteger[U8] new create(value: U8) => value new from[B: (Number & Real[B] val)](a: B) => a.u8() new min_value() => 0 new max_value() => 0xFF fun next_pow2(): U8 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U8 => this fun bit_reverse(): U8 => @\"llvm.bitreverse.i8\"[U8](this) fun bswap(): U8 => this fun popcount(): U8 => @\"llvm.ctpop.i8\"[U8](this) fun clz(): U8 => @\"llvm.ctlz.i8\"[U8](this, false) fun ctz(): U8 => @\"llvm.cttz.i8\"[U8](this, false) fun clz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i8\"[U8](this, true) fun ctz_unsafe(): U8 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i8\"[U8](this, true) fun bitwidth(): U8 => 8 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U8): U8 => if this < y then this else y end fun max(y: U8): U8 => if this > y then this else y end fun addc(y: U8): (U8, Bool) => @\"llvm.uadd.with.overflow.i8\"[(U8, Bool)](this, y) fun subc(y: U8): (U8, Bool) => @\"llvm.usub.with.overflow.i8\"[(U8, Bool)](this, y) fun mulc(y: U8): (U8, Bool) => @\"llvm.umul.with.overflow.i8\"[(U8, Bool)](this, y) fun divc(y: U8): (U8, Bool) => _UnsignedCheckedArithmetic.div_checked[U8](this, y) fun remc(y: U8): (U8, Bool) => _UnsignedCheckedArithmetic.rem_checked[U8](this, y) fun add_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.add_partial[U8](this, y)? fun sub_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.sub_partial[U8](this, y)? fun mul_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.mul_partial[U8](this, y)? fun div_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.div_partial[U8](this, y)? fun rem_partial(y: U8): U8 ? => _UnsignedPartialArithmetic.rem_partial[U8](this, y)? fun divrem_partial(y: U8): (U8, U8) ? => _UnsignedPartialArithmetic.divrem_partial[U8](this, y)? primitive U16 is UnsignedInteger[U16] new create(value: U16) => value new from[A: (Number & Real[A] val)](a: A) => a.u16() new min_value() => 0 new max_value() => 0xFFFF fun next_pow2(): U16 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U16 => this fun bit_reverse(): U16 => @\"llvm.bitreverse.i16\"[U16](this) fun bswap(): U16 => @\"llvm.bswap.i16\"[U16](this) fun popcount(): U16 => @\"llvm.ctpop.i16\"[U16](this) fun clz(): U16 => @\"llvm.ctlz.i16\"[U16](this, false) fun ctz(): U16 => @\"llvm.cttz.i16\"[U16](this, false) fun clz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i16\"[U16](this, true) fun ctz_unsafe(): U16 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i16\"[U16](this, true) fun bitwidth(): U16 => 16 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U16): U16 => if this < y then this else y end fun max(y: U16): U16 => if this > y then this else y end fun addc(y: U16): (U16, Bool) => @\"llvm.uadd.with.overflow.i16\"[(U16, Bool)](this, y) fun subc(y: U16): (U16, Bool) => @\"llvm.usub.with.overflow.i16\"[(U16, Bool)](this, y) fun mulc(y: U16): (U16, Bool) => @\"llvm.umul.with.overflow.i16\"[(U16, Bool)](this, y) fun divc(y: U16): (U16, Bool) => _UnsignedCheckedArithmetic.div_checked[U16](this, y) fun remc(y: U16): (U16, Bool) => _UnsignedCheckedArithmetic.rem_checked[U16](this, y) fun add_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.add_partial[U16](this, y)? fun sub_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.sub_partial[U16](this, y)? fun mul_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.mul_partial[U16](this, y)? fun div_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.div_partial[U16](this, y)? fun rem_partial(y: U16): U16 ? => _UnsignedPartialArithmetic.rem_partial[U16](this, y)? fun divrem_partial(y: U16): (U16, U16) ? => _UnsignedPartialArithmetic.divrem_partial[U16](this, y)? primitive U32 is UnsignedInteger[U32] new create(value: U32) => value new from[A: (Number & Real[A] val)](a: A) => a.u32() new min_value() => 0 new max_value() => 0xFFFF_FFFF fun next_pow2(): U32 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U32 => this fun bit_reverse(): U32 => @\"llvm.bitreverse.i32\"[U32](this) fun bswap(): U32 => @\"llvm.bswap.i32\"[U32](this) fun popcount(): U32 => @\"llvm.ctpop.i32\"[U32](this) fun clz(): U32 => @\"llvm.ctlz.i32\"[U32](this, false) fun ctz(): U32 => @\"llvm.cttz.i32\"[U32](this, false) fun clz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i32\"[U32](this, true) fun ctz_unsafe(): U32 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i32\"[U32](this, true) fun bitwidth(): U32 => 32 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U32): U32 => if this < y then this else y end fun max(y: U32): U32 => if this > y then this else y end fun addc(y: U32): (U32, Bool) => @\"llvm.uadd.with.overflow.i32\"[(U32, Bool)](this, y) fun subc(y: U32): (U32, Bool) => @\"llvm.usub.with.overflow.i32\"[(U32, Bool)](this, y) fun mulc(y: U32): (U32, Bool) => @\"llvm.umul.with.overflow.i32\"[(U32, Bool)](this, y) fun divc(y: U32): (U32, Bool) => _UnsignedCheckedArithmetic.div_checked[U32](this, y) fun remc(y: U32): (U32, Bool) => _UnsignedCheckedArithmetic.rem_checked[U32](this, y) fun add_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.add_partial[U32](this, y)? fun sub_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.sub_partial[U32](this, y)? fun mul_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.mul_partial[U32](this, y)? fun div_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.div_partial[U32](this, y)? fun rem_partial(y: U32): U32 ? => _UnsignedPartialArithmetic.rem_partial[U32](this, y)? fun divrem_partial(y: U32): (U32, U32) ? => _UnsignedPartialArithmetic.divrem_partial[U32](this, y)? primitive U64 is UnsignedInteger[U64] new create(value: U64) => value new from[A: (Number & Real[A] val)](a: A) => a.u64() new min_value() => 0 new max_value() => 0xFFFF_FFFF_FFFF_FFFF fun next_pow2(): U64 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U64 => this fun bit_reverse(): U64 => @\"llvm.bitreverse.i64\"[U64](this) fun bswap(): U64 => @\"llvm.bswap.i64\"[U64](this) fun popcount(): U64 => @\"llvm.ctpop.i64\"[U64](this) fun clz(): U64 => @\"llvm.ctlz.i64\"[U64](this, false) fun ctz(): U64 => @\"llvm.cttz.i64\"[U64](this, false) fun clz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i64\"[U64](this, true) fun ctz_unsafe(): U64 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i64\"[U64](this, true) fun bitwidth(): U64 => 64 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U64): U64 => if this < y then this else y end fun max(y: U64): U64 => if this > y then this else y end fun hash(): USize => ifdef ilp32 then ((this >> 32).u32() xor this.u32()).hash() else usize().hash() end fun addc(y: U64): (U64, Bool) => @\"llvm.uadd.with.overflow.i64\"[(U64, Bool)](this, y) fun subc(y: U64): (U64, Bool) => @\"llvm.usub.with.overflow.i64\"[(U64, Bool)](this, y) fun mulc(y: U64): (U64, Bool) => @\"llvm.umul.with.overflow.i64\"[(U64, Bool)](this, y) fun divc(y: U64): (U64, Bool) => _UnsignedCheckedArithmetic.div_checked[U64](this, y) fun remc(y: U64): (U64, Bool) => _UnsignedCheckedArithmetic.rem_checked[U64](this, y) fun add_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.add_partial[U64](this, y)? fun sub_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.sub_partial[U64](this, y)? fun mul_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.mul_partial[U64](this, y)? fun div_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.div_partial[U64](this, y)? fun rem_partial(y: U64): U64 ? => _UnsignedPartialArithmetic.rem_partial[U64](this, y)? fun divrem_partial(y: U64): (U64, U64) ? => _UnsignedPartialArithmetic.divrem_partial[U64](this, y)? primitive ULong is UnsignedInteger[ULong] new create(value: ULong) => value new from[A: (Number & Real[A] val)](a: A) => a.ulong() new min_value() => 0 new max_value() => ifdef ilp32 or llp64 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): ULong => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): ULong => this fun bit_reverse(): ULong => ifdef ilp32 or llp64 then @\"llvm.bitreverse.i32\"[ULong](this) else @\"llvm.bitreverse.i64\"[ULong](this) end fun bswap(): ULong => ifdef ilp32 or llp64 then @\"llvm.bswap.i32\"[ULong](this) else @\"llvm.bswap.i64\"[ULong](this) end fun popcount(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctpop.i32\"[ULong](this) else @\"llvm.ctpop.i64\"[ULong](this) end fun clz(): ULong => ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, false) else @\"llvm.ctlz.i64\"[ULong](this, false) end fun ctz(): ULong => ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, false) end fun clz_unsafe(): ULong => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 or llp64 then @\"llvm.ctlz.i32\"[ULong](this, true) else @\"llvm.ctlz.i64\"[ULong](this, true) end fun ctz_unsafe(): ULong => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 or llp64 then @\"llvm.cttz.i32\"[ULong](this, false) else @\"llvm.cttz.i64\"[ULong](this, true) end fun bitwidth(): ULong => ifdef ilp32 or llp64 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: ULong): ULong => if this < y then this else y end fun max(y: ULong): ULong => if this > y then this else y end fun hash(): USize => ifdef ilp32 or llp64 then u32().hash() else u64().hash() end fun addc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then @\"llvm.uadd.with.overflow.i32\"[(ULong, Bool)](this, y) else @\"llvm.uadd.with.overflow.i64\"[(ULong, Bool)](this, y) end fun subc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then @\"llvm.usub.with.overflow.i32\"[(ULong, Bool)](this, y) else @\"llvm.usub.with.overflow.i64\"[(ULong, Bool)](this, y) end fun mulc(y: ULong): (ULong, Bool) => ifdef ilp32 or llp64 then @\"llvm.umul.with.overflow.i32\"[(ULong, Bool)](this, y) else @\"llvm.umul.with.overflow.i64\"[(ULong, Bool)](this, y) end fun divc(y: ULong): (ULong, Bool) => _UnsignedCheckedArithmetic.div_checked[ULong](this, y) fun remc(y: ULong): (ULong, Bool) => _UnsignedCheckedArithmetic.rem_checked[ULong](this, y) fun add_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.add_partial[ULong](this, y)? fun sub_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.sub_partial[ULong](this, y)? fun mul_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.mul_partial[ULong](this, y)? fun div_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.div_partial[ULong](this, y)? fun rem_partial(y: ULong): ULong ? => _UnsignedPartialArithmetic.rem_partial[ULong](this, y)? fun divrem_partial(y: ULong): (ULong, ULong) ? => _UnsignedPartialArithmetic.divrem_partial[ULong](this, y)? primitive USize is UnsignedInteger[USize] new create(value: USize) => value new from[A: (Number & Real[A] val)](a: A) => a.usize() new min_value() => 0 new max_value() => ifdef ilp32 then 0xFFFF_FFFF else 0xFFFF_FFFF_FFFF_FFFF end fun next_pow2(): USize => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): USize => this fun bit_reverse(): USize => ifdef ilp32 then @\"llvm.bitreverse.i32\"[USize](this) else @\"llvm.bitreverse.i64\"[USize](this) end fun bswap(): USize => ifdef ilp32 then @\"llvm.bswap.i32\"[USize](this) else @\"llvm.bswap.i64\"[USize](this) end fun popcount(): USize => ifdef ilp32 then @\"llvm.ctpop.i32\"[USize](this) else @\"llvm.ctpop.i64\"[USize](this) end fun clz(): USize => ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, false) else @\"llvm.ctlz.i64\"[USize](this, false) end fun ctz(): USize => ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, false) else @\"llvm.cttz.i64\"[USize](this, false) end fun clz_unsafe(): USize => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 then @\"llvm.ctlz.i32\"[USize](this, true) else @\"llvm.ctlz.i64\"[USize](this, true) end fun ctz_unsafe(): USize => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" ifdef ilp32 then @\"llvm.cttz.i32\"[USize](this, true) else @\"llvm.cttz.i64\"[USize](this, true) end fun bitwidth(): USize => ifdef ilp32 then 32 else 64 end fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: USize): USize => if this < y then this else y end fun max(y: USize): USize => if this > y then this else y end fun addc(y: USize): (USize, Bool) => ifdef ilp32 then @\"llvm.uadd.with.overflow.i32\"[(USize, Bool)](this, y) else @\"llvm.uadd.with.overflow.i64\"[(USize, Bool)](this, y) end fun subc(y: USize): (USize, Bool) => ifdef ilp32 then @\"llvm.usub.with.overflow.i32\"[(USize, Bool)](this, y) else @\"llvm.usub.with.overflow.i64\"[(USize, Bool)](this, y) end fun mulc(y: USize): (USize, Bool) => ifdef ilp32 then @\"llvm.umul.with.overflow.i32\"[(USize, Bool)](this, y) else @\"llvm.umul.with.overflow.i64\"[(USize, Bool)](this, y) end fun divc(y: USize): (USize, Bool) => _UnsignedCheckedArithmetic.div_checked[USize](this, y) fun remc(y: USize): (USize, Bool) => _UnsignedCheckedArithmetic.rem_checked[USize](this, y) fun add_partial(y: USize): USize ? => _UnsignedPartialArithmetic.add_partial[USize](this, y)? fun sub_partial(y: USize): USize ? => _UnsignedPartialArithmetic.sub_partial[USize](this, y)? fun mul_partial(y: USize): USize ? => _UnsignedPartialArithmetic.mul_partial[USize](this, y)? fun div_partial(y: USize): USize ? => _UnsignedPartialArithmetic.div_partial[USize](this, y)? fun rem_partial(y: USize): USize ? => _UnsignedPartialArithmetic.rem_partial[USize](this, y)? fun divrem_partial(y: USize): (USize, USize) ? => _UnsignedPartialArithmetic.divrem_partial[USize](this, y)? primitive U128 is UnsignedInteger[U128] new create(value: U128) => value new from[A: (Number & Real[A] val)](a: A) => a.u128() new min_value() => 0 new max_value() => 0xFFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF_FFFF fun next_pow2(): U128 => let x = (this - 1).clz() 1 << (if x == 0 then 0 else bitwidth() - x end) fun abs(): U128 => this fun bit_reverse(): U128 => @\"llvm.bitreverse.i128\"[U128](this) fun bswap(): U128 => @\"llvm.bswap.i128\"[U128](this) fun popcount(): U128 => @\"llvm.ctpop.i128\"[U128](this) fun clz(): U128 => @\"llvm.ctlz.i128\"[U128](this, false) fun ctz(): U128 => @\"llvm.cttz.i128\"[U128](this, false) fun clz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.ctlz.i128\"[U128](this, true) fun ctz_unsafe(): U128 => \"\"\" Unsafe operation. If this is 0, the result is undefined. \"\"\" @\"llvm.cttz.i128\"[U128](this, true) fun bitwidth(): U128 => 128 fun bytewidth(): USize => bitwidth().usize() / 8 fun min(y: U128): U128 => if this < y then this else y end fun max(y: U128): U128 => if this > y then this else y end fun hash(): USize => ifdef ilp32 then ((this >> 96).u32() xor (this >> 64).u32() xor (this >> 32).u32() xor this.u32()).hash() else ((this >> 64).u64() xor this.u64()).hash() end fun hash64(): U64 => ((this >> 64).u64() xor this.u64()).hash64() fun string(): String iso^ => _ToString._u128(this, false) fun mul(y: U128): U128 => ifdef native128 then this * y else let x_hi = (this >> 64).u64() let x_lo = this.u64() let y_hi = (y >> 64).u64() let y_lo = y.u64() let mask = U64(0x00000000FFFFFFFF) var lo = (x_lo and mask) * (y_lo and mask) var t = lo >> 32 lo = lo and mask t = t + ((x_lo >> 32) * (y_lo and mask)) lo = lo + ((t and mask) << 32) var hi = t >> 32 t = lo >> 32 lo = lo and mask t = t + ((y_lo >> 32) * (x_lo and mask)) lo = lo + ((t and mask) << 32) hi = hi + (t >> 32) hi = hi + ((x_lo >> 32) * (y_lo >> 32)) hi = hi + (x_hi * y_lo) + (x_lo * y_hi) (hi.u128() << 64) or lo.u128() end fun divrem(y: U128): (U128, U128) => ifdef native128 then (this / y, this % y) else if y == 0 then return (0, 0) end var quot: U128 = 0 var qbit: U128 = 1 var num = this var den = y while den.i128() >= 0 do den = den << 1 qbit = qbit << 1 end while qbit != 0 do if den <= num then num = num - den quot = quot + qbit end den = den >> 1 qbit = qbit >> 1 end (quot, num) end fun div(y: U128): U128 => ifdef native128 then this / y else (let q, let r) = divrem(y) q end fun rem(y: U128): U128 => ifdef native128 then this % y else (let q, let r) = divrem(y) r end fun mul_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this *~ y else this * y end fun divrem_unsafe(y: U128): (U128, U128) => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then (this *~ y, this /~ y) else divrem(y) end fun div_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this /~ y else this / y end fun rem_unsafe(y: U128): U128 => \"\"\" Unsafe operation. If y is 0, the result is undefined. If the operation overflows, the result is undefined. \"\"\" ifdef native128 then this %~ y else this % y end fun f32(): F32 => let v = f64() if v > F32.max_value().f64() then F32._inf(false) else v.f32() end fun f64(): F64 => if this == 0 then return 0 end var a = this let sd = bitwidth() - clz() var e = (sd - 1).u64() if sd > 53 then match sd | 54 => a = a << 1 | 55 => None else a = (a >> (sd - 55)) or if (a and (-1 >> ((bitwidth() + 55) - sd))) != 0 then 1 else 0 end end if (a and 4) != 0 then a = a or 1 end a = (a + 1) >> 2 if (a and (1 << 53)) != 0 then a = a >> 1 e = e + 1 end else a = a << (53 - sd) end F64.from_bits(((e + 1023) << 52) or (a.u64() and 0xF_FFFF_FFFF_FFFF)) fun f32_unsafe(): F32 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64_unsafe().f32_unsafe() fun f64_unsafe(): F64 => \"\"\" Unsafe operation. If the value doesn't fit in the destination type, the result is undefined. \"\"\" f64() fun addc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.uadd.with.overflow.i128\"[(U128, Bool)](this, y) else let overflow = this > (max_value() - y) (this + y, overflow) end fun subc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.usub.with.overflow.i128\"[(U128, Bool)](this, y) else let overflow = this < y (this - y, overflow) end fun mulc(y: U128): (U128, Bool) => ifdef native128 then @\"llvm.umul.with.overflow.i128\"[(U128, Bool)](this, y) else let result = this * y let overflow = (this != 0) and ((result / this) != y) (result, overflow) end fun divc(y: U128): (U128, Bool) => _UnsignedCheckedArithmetic.div_checked[U128](this, y) fun remc(y: U128): (U128, Bool) => _UnsignedCheckedArithmetic.rem_checked[U128](this, y) fun add_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.add_partial[U128](this, y)? fun sub_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.sub_partial[U128](this, y)? fun mul_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.mul_partial[U128](this, y)? fun div_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.div_partial[U128](this, y)? fun rem_partial(y: U128): U128 ? => _UnsignedPartialArithmetic.rem_partial[U128](this, y)? fun divrem_partial(y: U128): (U128, U128) ? => _UnsignedPartialArithmetic.divrem_partial[U128](this, y)? type Unsigned is (U8 | U16 | U32 | U64 | U128 | ULong | USize)","title":"unsigned.pony"},{"location":"src/bureaucracy/custodian/","text":"\"\"\" # Bureaucracy package It happens to almost every program. It starts small, tiny if you will, like a village where every actor knows every other actor and shutdown is easy. One day you realize your program is no longer a cute seaside hamlet, its a bustling metropolis and you are doing way too much work to keep track of everything. What do you do? Call for a little bureaucracy. The bureaucracy contains objects designed to ease your bookkeeping burdens. Need to shutdown a number of actors together? Check out `Custodian`. Need to keep track of a lot of stuff and be able to look it up by name? Check out `Registrar`. Put bureaucracy to use today and before long, your sprawling metropolis of a code base will be manageable again in no time. \"\"\" use \"collections\" actor Custodian \"\"\" A Custodian keeps a set of actors to dispose. When the Custodian is disposed, it disposes of the actors in its set and then clears the set. ## Example program Imagine you have a program with 3 actors that you need to shutdown when it receives a TERM signal. We can set up a Custodian that knows about each of our actors and when a TERM signal is received, is disposed of. ```pony use \"bureaucracy\" use \"signals\" actor Actor1 be dispose() => None // dispose of resources here. actor Actor2 be dispose() => None // dispose of resources here. actor Actor3 be dispose() => None // dispose of resources here. actor Main new create(env: Env) => let actor1 = Actor1 let actor2 = Actor2 let actor3 = Actor3 let custodian = Custodian custodian(actor1) custodian(actor2) custodian(actor3) SignalHandler(TermHandler(custodian), Sig.term()) class TermHandler is SignalNotify let _custodian: Custodian new iso create(custodian: Custodian) => _custodian = custodian fun ref apply(count: U32): Bool => _custodian.dispose() true ``` \"\"\" embed _workers: SetIs[DisposableActor] = _workers.create() be apply(worker: DisposableActor) => \"\"\" Add an actor to be disposed of. \"\"\" _workers.set(worker) be remove(worker: DisposableActor) => \"\"\" Removes an actor from the set of things to be disposed. \"\"\" _workers.unset(worker) be dispose() => \"\"\" Dispose of the actors in the set and then clear the set. \"\"\" for worker in _workers.values() do worker.dispose() end _workers.clear()","title":"custodian.pony"},{"location":"src/bureaucracy/registrar/","text":"use \"collections\" use \"promises\" actor Registrar \"\"\" A Registrar keeps a map of lookup string to anything. Generally, this is used to keep a directory of long-lived service-providing actors that can be looked up name. \"\"\" embed _registry: Map[String, Any tag] = _registry.create() be update(key: String, value: Any tag) => \"\"\" Add, or change, a lookup mapping. \"\"\" _registry(key) = value be remove(key: String, value: Any tag) => \"\"\" Remove a mapping. This only takes effect if provided key currently maps to the provided value. If the key maps to some other value (perhaps after updating), the mapping won't be removed. \"\"\" try if _registry(key)? is value then _registry.remove(key)? end end fun tag apply[A: Any tag = Any tag](key: String): Promise[A] => \"\"\" Lookup by name. Returns a promise that will be fulfilled with the mapped value if it exists and is a subtype of A. Otherwise, the promise will be rejected. \"\"\" let promise = Promise[A] _fetch[A](key, promise) promise be _fetch[A: Any tag](key: String, promise: Promise[A]) => \"\"\" Fulfills or rejects the promise. \"\"\" try promise(_registry(key)? as A) else promise.reject() end","title":"registrar.pony"},{"location":"src/capsicum/cap/","text":"primitive Cap \"\"\" The Capsicum rights. \"\"\" fun enter(): Bool => \"\"\" This places the current process into capability mode, a mode of execution in which processes may only issue system calls operating on file descriptors or reading limited global system state. Access to global name spaces, such as file system or IPC name spaces, is prevented. \"\"\" ifdef freebsd or \"capsicum\" then @cap_enter[I32]() == 0 else false end fun read(): U64 => _id(0, 1 << 0) fun write(): U64 => _id(0, 1 << 1) fun seek_tell(): U64 => _id(0, 1 << 2) fun seek(): U64 => _id(0, 1 << 3) or seek_tell() fun pread(): U64 => seek() or read() fun pwrite(): U64 => seek() or write() fun mmap(): U64 => _id(0, 1 << 4) fun mmap_r(): U64 => mmap() or seek() or read() fun mmap_w(): U64 => mmap() or seek() or write() fun mmap_x(): U64 => mmap() or seek() or _id(0, 1 << 5) fun mmap_rw(): U64 => mmap_r() or mmap_w() fun mmap_rx(): U64 => mmap_r() or mmap_x() fun mmap_wx(): U64 => mmap_w() or mmap_x() fun mmap_rwx(): U64 => mmap_r() or mmap_w() or mmap_x() fun creat(): U64 => _id(0, 1 << 6) fun fexecve(): U64 => _id(0, 1 << 7) fun fsync(): U64 => _id(0, 1 << 8) fun ftruncate(): U64 => _id(0, 1 << 9) fun lookup(): U64 => _id(0, 1 << 10) fun fchdir(): U64 => _id(0, 1 << 11) fun fchflags(): U64 => _id(0, 1 << 12) fun chflagsat(): U64 => fchflags() or lookup() fun fchmod(): U64 => _id(0, 1 << 13) fun fchmodat(): U64 => fchmod() or lookup() fun fchown(): U64 => _id(0, 1 << 14) fun fchownat(): U64 => fchown() or lookup() fun fcntl(): U64 => _id(0, 1 << 15) fun flock(): U64 => _id(0, 1 << 16) fun fpathconf(): U64 => _id(0, 1 << 17) fun fsck(): U64 => _id(0, 1 << 18) fun fstat(): U64 => _id(0, 1 << 19) fun fstatat(): U64 => fstat() or lookup() fun fstatfs(): U64 => _id(0, 1 << 20) fun futimes(): U64 => _id(0, 1 << 21) fun futimesat(): U64 => futimes() or lookup() fun linkat(): U64 => _id(0, 1 << 22) or lookup() fun mkdirat(): U64 => _id(0, 1 << 23) or lookup() fun mkfifoat(): U64 => _id(0, 1 << 24) or lookup() fun mknodat(): U64 => _id(0, 1 << 25) or lookup() fun renameat(): U64 => _id(0, 1 << 26) or lookup() fun symlinkat(): U64 => _id(0, 1 << 27) or lookup() fun unlinkat(): U64 => _id(0, 1 << 28) or lookup() fun accept(): U64 => _id(0, 1 << 29) fun bind(): U64 => _id(0, 1 << 30) fun connect(): U64 => _id(0, 1 << 31) fun getpeername(): U64 => _id(0, 1 << 32) fun getsockname(): U64 => _id(0, 1 << 33) fun getsockopt(): U64 => _id(0, 1 << 34) fun listen(): U64 => _id(0, 1 << 35) fun peeloff(): U64 => _id(0, 1 << 36) fun recv(): U64 => read() fun send(): U64 => write() fun setsockopt(): U64 => _id(0, 1 << 37) fun shutdown(): U64 => _id(0, 1 << 38) fun bindat(): U64 => _id(0, 1 << 39) or lookup() fun connectat(): U64 => _id(0, 1 << 40) or lookup() fun sock_client(): U64 => connect() or getpeername() or getsockname() or getsockopt() or peeloff() or recv() or send() or setsockopt() or shutdown() fun sock_server(): U64 => accept() or bind() or getpeername() or getsockname() or getsockopt() or listen() or peeloff() or recv() or send() or setsockopt() or shutdown() fun mac_get(): U64 => _id(1, 1 << 0) fun mac_set(): U64 => _id(1, 1 << 1) fun sem_getvalue(): U64 => _id(1, 1 << 2) fun sem_post(): U64 => _id(1, 1 << 3) fun sem_wait(): U64 => _id(1, 1 << 4) fun event(): U64 => _id(1, 1 << 5) fun kqueue_event(): U64 => _id(1, 1 << 6) fun ioctl(): U64 => _id(1, 1 << 7) fun ttyhook(): U64 => _id(1, 1 << 8) fun pdgetpid(): U64 => _id(1, 1 << 9) fun pdwait(): U64 => _id(1, 1 << 10) fun pdkill(): U64 => _id(1, 1 << 11) fun exattr_delete(): U64 => _id(1, 1 << 12) fun exattr_get(): U64 => _id(1, 1 << 13) fun exattr_list(): U64 => _id(1, 1 << 14) fun exattr_set(): U64 => _id(1, 1 << 15) fun acl_check(): U64 => _id(1, 1 << 16) fun acl_delete(): U64 => _id(1, 1 << 17) fun acl_get(): U64 => _id(1, 1 << 18) fun acl_set(): U64 => _id(1, 1 << 19) fun kqueue_change(): U64 => _id(1, 1 << 20) fun kqueue(): U64 => kqueue_event() or kqueue_change() fun _id(idx: U64, bit: U64): U64 => \"\"\" Build a Capsicum ID from an index and a bit position. \"\"\" (1 << (57 + idx)) or bit","title":"cap.pony"},{"location":"src/capsicum/cap_rights/","text":"use \"files\" type CapRights is CapRights0 class CapRights0 \"\"\" Version 0 of the capsicum cap_rights_t structure. \"\"\" var _r0: U64 = 0 var _r1: U64 = 0 new create() => \"\"\" Initialises with no rights. \"\"\" clear() new from(caps: FileCaps box) => \"\"\" Initialises with the rights from a FileCaps. \"\"\" clear() if caps(FileCreate) then set(Cap.creat()) end if caps(FileChmod) then set(Cap.fchmod()) end if caps(FileChown) then set(Cap.fchown()) end if caps(FileLink) then set(Cap.linkat()) set(Cap.symlinkat()) end if caps(FileLookup) then set(Cap.lookup()) end if caps(FileMkdir) then set(Cap.mkdirat()) end if caps(FileRead) then set(Cap.read()) end if caps(FileRemove) then set(Cap.unlinkat()) end if caps(FileRename) then set(Cap.renameat()) end if caps(FileSeek) then set(Cap.seek()) end if caps(FileStat) then set(Cap.fstat()) set(Cap.fstatfs()) set(Cap.fcntl()) end if caps(FileSync) then set(Cap.fsync()) end if caps(FileTime) then set(Cap.futimes()) end if caps(FileTruncate) then set(Cap.ftruncate()) end if caps(FileWrite) then set(Cap.write()) end if caps(FileExec) then set(Cap.fexecve()) end new descriptor(fd: I32) => \"\"\" Initialises with the rights on the given file descriptor. \"\"\" ifdef freebsd or \"capsicum\" then @__cap_rights_get[I32](_version(), fd, addressof _r0) end fun ref set(cap: U64) => ifdef freebsd or \"capsicum\" then @__cap_rights_set[None](addressof _r0, cap, U64(0)) end fun ref unset(cap: U64) => ifdef freebsd or \"capsicum\" then @__cap_rights_clear[None](addressof _r0, cap, U64(0)) end fun limit(fd: I32): Bool => \"\"\" Limits the fd to the encoded rights. \"\"\" ifdef freebsd or \"capsicum\" then @cap_rights_limit[I32](fd, addressof _r0) == 0 else true end fun ref merge(that: CapRights0) => \"\"\" Merge the rights in that into this. \"\"\" ifdef freebsd or \"capsicum\" then @cap_rights_merge[None](addressof _r0, addressof that._r0) end fun ref remove(that: CapRights0) => \"\"\" Remove the rights in that from this. \"\"\" ifdef freebsd or \"capsicum\" then @cap_rights_remove[None](addressof _r0, addressof that._r0) end fun ref clear() => \"\"\" Clear all rights. \"\"\" ifdef freebsd or \"capsicum\" then @__cap_rights_init[Pointer[U64]](I32(0), addressof _r0, U64(0)) end fun contains(that: CapRights0): Bool => \"\"\" Check that this is a superset of the rights in that. \"\"\" ifdef freebsd or \"capsicum\" then @cap_rights_contains[Bool](addressof _r0, addressof that._r0) else true end fun _version(): I32 => 0","title":"cap_rights.pony"},{"location":"src/cli/_test/","text":"use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestMinimal) test(_TestMinimalWithHelp) test(_TestBadName) test(_TestUnknownCommand) test(_TestUnexpectedArg) test(_TestUnknownShort) test(_TestUnknownLong) test(_TestHyphenArg) test(_TestBools) test(_TestDefaults) test(_TestShortsAdj) test(_TestShortsEq) test(_TestShortsNext) test(_TestLongsEq) test(_TestLongsNext) test(_TestEnvs) test(_TestOptionStop) test(_TestDuplicate) test(_TestChat) test(_TestMustBeLeaf) test(_TestHelp) test(_TestHelpMultipleArgs) class iso _TestMinimal is UnitTest fun name(): String => \"ponycli/minimal\" fun apply(h: TestHelper) ? => let cs = CommandSpec.leaf(\"minimal\", \"\", [ OptionSpec.bool(\"aflag\", \"\") ])? h.assert_eq[String](\"minimal\", cs.name()) h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [\"ignored\"; \"--aflag=true\"] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"minimal\", cmd.fullname()) h.assert_eq[Bool](true, cmd.option(\"aflag\").bool()) class iso _TestMinimalWithHelp is UnitTest fun name(): String => \"ponycli/minimal_help\" fun apply(h: TestHelper) ? => let cs = CommandSpec.leaf(\"minimal_help\", \"\",[])? .> add_help()? h.assert_eq[String](\"minimal_help\", cs.name()) h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [\"--help\"] // test for successful parsing let cmdErr = CommandParser(cs).parse(args) as Command class iso _TestBadName is UnitTest fun name(): String => \"ponycli/badname\" // Negative test: command names must be alphanum tokens fun apply(h: TestHelper) => try let cs = CommandSpec.leaf(\"min imal\", \"\")? h.fail(\"expected error on bad command name: \" + cs.name()) end class iso _TestUnknownCommand is UnitTest fun name(): String => \"ponycli/unknown_command\" // Negative test: unknown command should report fun apply(h: TestHelper) ? => let cs = _Fixtures.chat_cli_spec()? h.assert_false(cs.is_leaf()) h.assert_true(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"unknown\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) match cmdErr | let se: SyntaxError => None h.assert_eq[String](\"Error: unknown command at: 'unknown'\", se.string()) else h.fail(\"expected syntax error for unknown command: \" + cmdErr.string()) end class iso _TestUnexpectedArg is UnitTest fun name(): String => \"ponycli/unknown_command\" // Negative test: unexpected arg/command token should report fun apply(h: TestHelper) ? => let cs = _Fixtures.bools_cli_spec()? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"unknown\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) match cmdErr | let se: SyntaxError => None h.assert_eq[String]( \"Error: too many positional arguments at: 'unknown'\", se.string()) else h.fail(\"expected syntax error for unknown command: \" + cmdErr.string()) end class iso _TestUnknownShort is UnitTest fun name(): String => \"ponycli/unknown_short\" // Negative test: unknown short option should report fun apply(h: TestHelper) ? => let cs = _Fixtures.bools_cli_spec()? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"-Z\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) match cmdErr | let se: SyntaxError => None h.assert_eq[String](\"Error: unknown short option at: 'Z'\", se.string()) else h.fail( \"expected syntax error for unknown short option: \" + cmdErr.string()) end class iso _TestUnknownLong is UnitTest fun name(): String => \"ponycli/unknown_long\" // Negative test: unknown long option should report fun apply(h: TestHelper) ? => let cs = _Fixtures.bools_cli_spec()? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"--unknown\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) match cmdErr | let se: SyntaxError => None h.assert_eq[String]( \"Error: unknown long option at: 'unknown'\", se.string()) else h.fail( \"expected syntax error for unknown long option: \" + cmdErr.string()) end class iso _TestHyphenArg is UnitTest fun name(): String => \"ponycli/hyphen\" // Rule 1 fun apply(h: TestHelper) ? => let cs = CommandSpec.leaf(\"minimal\" where args' = [ ArgSpec.string(\"name\", \"\") ])? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [\"ignored\"; \"-\"] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"minimal\", cmd.fullname()) h.assert_eq[String](\"-\", cmd.arg(\"name\").string()) class iso _TestBools is UnitTest fun name(): String => \"ponycli/bools\" // Rules 2, 3, 5, 7 w/ Bools fun apply(h: TestHelper) ? => let cs = _Fixtures.bools_cli_spec()? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [\"ignored\"; \"-ab\"; \"-c=true\"; \"-d=false\"] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"bools\", cmd.fullname()) h.assert_eq[Bool](true, cmd.option(\"aaa\").bool()) h.assert_eq[Bool](true, cmd.option(\"bbb\").bool()) h.assert_eq[Bool](true, cmd.option(\"ccc\").bool()) h.assert_eq[Bool](false, cmd.option(\"ddd\").bool()) class iso _TestDefaults is UnitTest fun name(): String => \"ponycli/defaults\" // Rules 2, 3, 5, 6 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [\"ignored\"; \"-B\"; \"-S--\"; \"-I42\"; \"-U47\"; \"-F42.0\"] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[Bool](true, cmd.option(\"boolo\").bool()) h.assert_eq[String](\"astring\", cmd.option(\"stringo\").string()) h.assert_eq[I64](42, cmd.option(\"into\").i64()) h.assert_eq[U64](47, cmd.option(\"uinto\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floato\").f64()) h.assert_eq[USize](0, cmd.option(\"stringso\").string_seq().size()) class iso _TestShortsAdj is UnitTest fun name(): String => \"ponycli/shorts_adjacent\" // Rules 2, 3, 5, 6, 8 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? h.assert_true(cs.is_leaf()) h.assert_false(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"-BS--\"; \"-I42\"; \"-U47\"; \"-F42.0\"; \"-zaaa\"; \"-zbbb\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[Bool](true, cmd.option(\"boolr\").bool()) h.assert_eq[String](\"--\", cmd.option(\"stringr\").string()) h.assert_eq[I64](42, cmd.option(\"intr\").i64()) h.assert_eq[U64](47, cmd.option(\"uintr\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floatr\").f64()) let stringso = cmd.option(\"stringso\") h.assert_eq[USize](2, stringso.string_seq().size()) h.assert_eq[String](\"aaa\", stringso.string_seq()(0)?) h.assert_eq[String](\"bbb\", stringso.string_seq()(1)?) class iso _TestShortsEq is UnitTest fun name(): String => \"ponycli/shorts_eq\" // Rules 2, 3, 5, 7 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" \"-BS=astring\"; \"-I=42\"; \"-U=47\"; \"-F=42.0\"; \"-z=aaa\"; \"-z=bbb\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[Bool](true, cmd.option(\"boolr\").bool()) h.assert_eq[String](\"astring\", cmd.option(\"stringr\").string()) h.assert_eq[I64](42, cmd.option(\"intr\").i64()) h.assert_eq[U64](47, cmd.option(\"uintr\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floatr\").f64()) let stringso = cmd.option(\"stringso\") h.assert_eq[USize](2, stringso.string_seq().size()) h.assert_eq[String](\"aaa\", stringso.string_seq()(0)?) h.assert_eq[String](\"bbb\", stringso.string_seq()(1)?) class iso _TestShortsNext is UnitTest fun name(): String => \"ponycli/shorts_next\" // Rules 2, 3, 5, 8 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" \"-BS\"; \"--\"; \"-I\"; \"42\"; \"-U\"; \"47\" \"-F\"; \"42.0\"; \"-z\"; \"aaa\"; \"-z\"; \"bbb\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[Bool](true, cmd.option(\"boolr\").bool()) h.assert_eq[String](\"--\", cmd.option(\"stringr\").string()) h.assert_eq[I64](42, cmd.option(\"intr\").i64()) h.assert_eq[U64](47, cmd.option(\"uintr\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floatr\").f64()) let stringso = cmd.option(\"stringso\") h.assert_eq[USize](2, stringso.string_seq().size()) h.assert_eq[String](\"aaa\", stringso.string_seq()(0)?) h.assert_eq[String](\"bbb\", stringso.string_seq()(1)?) class iso _TestLongsEq is UnitTest fun name(): String => \"ponycli/shorts_eq\" // Rules 4, 5, 7 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" \"--boolr=true\"; \"--stringr=astring\"; \"--intr=42\"; \"--uintr=47\" \"--floatr=42.0\"; \"--stringso=aaa\"; \"--stringso=bbb\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[Bool](true, cmd.option(\"boolr\").bool()) h.assert_eq[String](\"astring\", cmd.option(\"stringr\").string()) h.assert_eq[I64](42, cmd.option(\"intr\").i64()) h.assert_eq[U64](47, cmd.option(\"uintr\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floatr\").f64()) let stringso = cmd.option(\"stringso\") h.assert_eq[USize](2, stringso.string_seq().size()) h.assert_eq[String](\"aaa\", stringso.string_seq()(0)?) h.assert_eq[String](\"bbb\", stringso.string_seq()(1)?) class iso _TestLongsNext is UnitTest fun name(): String => \"ponycli/longs_next\" // Rules 4, 5, 8 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" \"--boolr\"; \"--stringr\"; \"--\"; \"--intr\"; \"42\"; \"--uintr\"; \"47\" \"--floatr\"; \"42.0\"; \"--stringso\"; \"aaa\"; \"--stringso\"; \"bbb\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"--\", cmd.option(\"stringr\").string()) h.assert_eq[I64](42, cmd.option(\"intr\").i64()) h.assert_eq[U64](47, cmd.option(\"uintr\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floatr\").f64()) let stringso = cmd.option(\"stringso\") h.assert_eq[USize](2, stringso.string_seq().size()) h.assert_eq[String](\"aaa\", stringso.string_seq()(0)?) h.assert_eq[String](\"bbb\", stringso.string_seq()(1)?) class iso _TestEnvs is UnitTest fun name(): String => \"ponycli/envs\" // Rules fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" ] let envs: Array[String] = [ \"SIMPLE_BOOLR=true\" \"SIMPLE_STRINGR=astring\" \"SIMPLE_INTR=42\" \"SIMPLE_UINTR=47\" \"SIMPLE_FLOATR=42.0\" ] let cmdErr = CommandParser(cs).parse(args, envs) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[Bool](true, cmd.option(\"boolr\").bool()) h.assert_eq[String](\"astring\", cmd.option(\"stringr\").string()) h.assert_eq[I64](42, cmd.option(\"intr\").i64()) h.assert_eq[U64](47, cmd.option(\"uintr\").u64()) h.assert_eq[F64](42.0, cmd.option(\"floatr\").f64()) class iso _TestOptionStop is UnitTest fun name(): String => \"ponycli/option_stop\" // Rules 2, 3, 5, 7, 9 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" \"-BS=astring\"; \"-I=42\"; \"-F=42.0\"; \"-U=23\" \"--\"; \"-f=1.0\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"-f=1.0\", cmd.arg(\"words\").string()) h.assert_eq[F64](42.0, cmd.option(\"floato\").f64()) class iso _TestDuplicate is UnitTest fun name(): String => \"ponycli/duplicate\" // Rules 4, 5, 7, 10 fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let args: Array[String] = [ \"ignored\" \"--boolr=true\"; \"--stringr=astring\"; \"--intr=42\"; \"--uintr=47\" \"--floatr=42.0\"; \"--stringr=newstring\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"newstring\", cmd.option(\"stringr\").string()) class iso _TestChat is UnitTest fun name(): String => \"ponycli/chat\" fun apply(h: TestHelper) ? => let cs = _Fixtures.chat_cli_spec()? h.assert_false(cs.is_leaf()) h.assert_true(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"--admin\"; \"--name=carl\"; \"say\"; \"-v80\"; \"hi\"; \"yo\"; \"hey\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) let cmd = cmdErr as Command h.assert_eq[String](\"chat/say\", cmd.fullname()) h.assert_eq[String](\"say\", cmd.spec().name()) let f1 = cmd.option(\"admin\") h.assert_eq[String](\"admin\", f1.spec().name()) h.assert_eq[Bool](true, f1.bool()) let f2 = cmd.option(\"name\") h.assert_eq[String](\"name\", f2.spec().name()) h.assert_eq[String](\"carl\", f2.string()) let f3 = cmd.option(\"volume\") h.assert_eq[String](\"volume\", f3.spec().name()) h.assert_eq[F64](80.0, f3.f64()) let a1 = cmd.arg(\"words\") h.assert_eq[String](\"words\", a1.spec().name()) let words = a1.string_seq() h.assert_eq[USize](3, words.size()) h.assert_eq[String](\"hi\", words(0)?) h.assert_eq[String](\"yo\", words(1)?) h.assert_eq[String](\"hey\", words(2)?) class iso _TestMustBeLeaf is UnitTest fun name(): String => \"ponycli/must_be_leaf\" // Negative test: can't just supply parent command fun apply(h: TestHelper) ? => let cs = _Fixtures.chat_cli_spec()? h.assert_false(cs.is_leaf()) h.assert_true(cs.is_parent()) let args: Array[String] = [ \"ignored\" \"--admin\"; \"--name=carl\"; \"config\" ] let cmdErr = CommandParser(cs).parse(args) h.log(\"Parsed: \" + cmdErr.string()) match cmdErr | let se: SyntaxError => None else h.fail(\"expected syntax error for non-leaf command: \" + cmdErr.string()) end class iso _TestHelp is UnitTest fun name(): String => \"ponycli/help\" fun apply(h: TestHelper) ? => let cs = _Fixtures.chat_cli_spec()? let chErr = Help.for_command(cs, [\"config\"; \"server\"]) let ch = chErr as CommandHelp let help = ch.help_string() h.log(help) h.assert_true(help.contains(\"Address of the server\")) class iso _TestHelpMultipleArgs is UnitTest fun name(): String => \"ponycli/help-multiple-args\" fun apply(h: TestHelper) ? => let cs = _Fixtures.simple_cli_spec()? let help = cs.help_string() h.log(help) h.assert_true( help.contains(\"simple <words> <argz>\")) primitive _Fixtures fun bools_cli_spec(): CommandSpec box ? => \"\"\" Builds and returns the spec for a CLI with four bool options. \"\"\" CommandSpec.leaf(\"bools\", \"A sample CLI with four bool options\", [ OptionSpec.bool(\"aaa\" where short' = 'a') OptionSpec.bool(\"bbb\" where short' = 'b') OptionSpec.bool(\"ccc\" where short' = 'c') OptionSpec.bool(\"ddd\" where short' = 'd') ])? fun simple_cli_spec(): CommandSpec box ? => \"\"\" Builds and returns the spec for a CLI with short options of each type. \"\"\" CommandSpec.leaf(\"simple\", \"A sample program with various short options, optional and required\", [ OptionSpec.bool(\"boolr\" where short' = 'B') OptionSpec.bool(\"boolo\" where short' = 'b', default' = true) OptionSpec.string(\"stringr\" where short' = 'S') OptionSpec.string(\"stringo\" where short' = 's', default' = \"astring\") OptionSpec.i64(\"intr\" where short' = 'I') OptionSpec.i64(\"into\" where short' = 'i', default' = I64(42)) OptionSpec.u64(\"uintr\" where short' = 'U') OptionSpec.u64(\"uinto\" where short' = 'u', default' = U64(47)) OptionSpec.f64(\"floatr\" where short' = 'F') OptionSpec.f64(\"floato\" where short' = 'f', default' = F64(42.0)) OptionSpec.string_seq(\"stringso\" where short' = 'z') ], [ ArgSpec.string(\"words\" where default' = \"hello\") ArgSpec.string_seq(\"argz\") ])? fun chat_cli_spec(): CommandSpec box ? => \"\"\" Builds and returns the spec for a sample chat client's CLI. \"\"\" CommandSpec.parent(\"chat\", \"A sample chat program\", [ OptionSpec.bool(\"admin\", \"Chat as admin\" where default' = false) OptionSpec.string(\"name\", \"Your name\" where short' = 'n') OptionSpec.f64(\"volume\", \"Chat volume\" where short' = 'v', default' = 1.0) ], [ CommandSpec.leaf(\"say\", \"Say something\", Array[OptionSpec](), [ ArgSpec.string_seq(\"words\", \"The words to say\") ])? CommandSpec.leaf(\"emote\", \"Send an emotion\", [ OptionSpec.f64(\"speed\", \"Emote play speed\" where default' = F64(1.0)) ], [ ArgSpec.string(\"emotion\", \"Emote to send\") ])? CommandSpec.parent(\"config\", \"Configuration commands\", Array[OptionSpec](), [ CommandSpec.leaf(\"server\", \"Server configuration\", Array[OptionSpec](), [ ArgSpec.string(\"address\", \"Address of the server\") ])? ])? ])?","title":"_test.pony"},{"location":"src/cli/command/","text":"use \"collections\" class box Command \"\"\" Command contains all of the information describing a command with its spec and effective options and arguments, ready to use. \"\"\" let _spec: CommandSpec box let _fullname: String let _options: Map[String, Option] box let _args: Map[String, Arg] box new _create( spec': CommandSpec box, fullname': String, options': Map[String, Option] box, args': Map[String, Arg] box) => _spec = spec' _fullname = fullname' _options = options' _args = args' fun string(): String iso^ => \"\"\" Returns a representational string for this command. \"\"\" let s: String iso = fullname().clone() for o in _options.values() do s.append(\" \") s.append(o.deb_string()) end for a in _args.values() do s.append(\" \") s.append(a.deb_string()) end s fun spec() : CommandSpec box => \"\"\" Returns the spec for this command. \"\"\" _spec fun fullname() : String => \"\"\" Returns the full name of this command, with its parents prefixed. \"\"\" _fullname fun box option(name: String): Option => \"\"\" Returns the Option by name, defaulting to a fake Option if unknown. \"\"\" try _options(name)? else Option(OptionSpec.bool(name), false) end fun box arg(name: String): Arg => \"\"\" Returns the Arg by name, defaulting to a fake Arg if unknown. \"\"\" try _args(name)? else Arg(ArgSpec.bool(name), false) end class val Option \"\"\" Option contains a spec and an effective value for a given option. \"\"\" let _spec: OptionSpec let _value: _Value new val create(spec': OptionSpec, value': _Value) => _spec = spec' _value = value' fun _append(next: Option): Option => Option(_spec, _spec._typ_p().append(_value, next._value)) fun spec() : OptionSpec => _spec fun bool(): Bool => \"\"\" Returns the option value as a Bool, defaulting to false. \"\"\" try _value as Bool else false end fun string(): String => \"\"\" Returns the option value as a String, defaulting to empty. \"\"\" try _value as String else \"\" end fun i64(): I64 => \"\"\" Returns the option value as an I64, defaulting to 0. \"\"\" try _value as I64 else I64(0) end fun u64(): U64 => \"\"\" Returns the option value as an U64, defaulting to 0. \"\"\" try _value as U64 else U64(0) end fun f64(): F64 => \"\"\" Returns the option value as an F64, defaulting to 0.0. \"\"\" try _value as F64 else F64(0) end fun string_seq(): ReadSeq[String] val => \"\"\" Returns the option value as a ReadSeq[String], defaulting to empty. \"\"\" try _value as _StringSeq val else recover val Array[String]() end end fun deb_string(): String => _spec.deb_string() + \"=\" + _value.string() class val Arg \"\"\" Arg contains a spec and an effective value for a given arg. \"\"\" let _spec: ArgSpec let _value: _Value new val create(spec': ArgSpec, value': _Value) => _spec = spec' _value = value' fun _append(next: Arg): Arg => Arg(_spec, _spec._typ_p().append(_value, next._value)) fun spec(): ArgSpec => _spec fun bool(): Bool => \"\"\" Returns the arg value as a Bool, defaulting to false. \"\"\" try _value as Bool else false end fun string(): String => \"\"\" Returns the arg value as a String, defaulting to empty. \"\"\" try _value as String else \"\" end fun i64(): I64 => \"\"\" Returns the arg value as an I64, defaulting to 0. \"\"\" try _value as I64 else I64(0) end fun u64(): U64 => \"\"\" Returns the arg value as an U64, defaulting to 0. \"\"\" try _value as U64 else U64(0) end fun f64(): F64 => \"\"\" Returns the arg value as an F64, defaulting to 0.0. \"\"\" try _value as F64 else F64(0) end fun string_seq(): ReadSeq[String] val => \"\"\" Returns the arg value as a ReadSeq[String], defaulting to empty. \"\"\" try _value as _StringSeq val else recover val Array[String]() end end fun deb_string(): String => \"(\" + _spec.deb_string() + \"=)\" + _value.string() class val SyntaxError \"\"\" SyntaxError summarizes a syntax error in a given parsed command line. \"\"\" let _token: String let _msg: String new val create(token': String, msg': String) => _token = token' _msg = msg' fun token(): String => _token fun string(): String => \"Error: \" + _msg + \" at: '\" + _token + \"'\"","title":"command.pony"},{"location":"src/cli/command_help/","text":"use \"buffered\" primitive Help fun general(cs: CommandSpec box): CommandHelp => \"\"\" Creates a command help that can print a general program help message. \"\"\" CommandHelp._create(None, cs) fun for_command(cs: CommandSpec box, argv: Array[String] box) : (CommandHelp | SyntaxError) => \"\"\" Creates a command help for a specific command that can print a detailed help message. \"\"\" _parse(cs, CommandHelp._create(None, cs), argv) fun _parse(cs: CommandSpec box, ch: CommandHelp, argv: Array[String] box) : (CommandHelp | SyntaxError) => if argv.size() > 0 then try let cname = argv(0)? if cs.commands().contains(cname) then match cs.commands()(cname)? | let ccs: CommandSpec box => let cch = CommandHelp._create(ch, ccs) return _parse(ccs, cch, argv.slice(1)) end end return SyntaxError(cname, \"unknown command\") end end ch class box CommandHelp \"\"\" CommandHelp encapsulates the information needed to generate a user help message for a given CommandSpec, optionally with a specific command identified to print help about. Use `Help.general()` or `Help.for_command()` to create a CommandHelp instance. \"\"\" let _parent: (CommandHelp box | None) let _spec: CommandSpec box new _create(parent': (CommandHelp box | None), spec': CommandSpec box) => _parent = parent' _spec = spec' fun box fullname(): String => match _parent | let p: CommandHelp => p.fullname() + \" \" + _spec.name() else _spec.name() end fun box string(): String => fullname() fun box help_string(): String => \"\"\" Renders the help message as a String. \"\"\" let w: Writer = Writer _write_help(w) let str = recover trn String(w.size()) end for bytes in w.done().values() do str.append(bytes) end str fun box print_help(os: OutStream) => \"\"\" Prints the help message to an OutStream. \"\"\" let w: Writer = Writer _write_help(w) os.writev(w.done()) fun box _write_help(w: Writer) => _write_usage(w) if _spec.descr().size() > 0 then w.write(\"\\n\") w.write(_spec.descr() + \"\\n\") end let options = _all_options() if options.size() > 0 then w.write(\"\\nOptions:\\n\") _write_options(w, options) end if _spec.commands().size() > 0 then w.write(\"\\nCommands:\\n\") _write_commands(w) end let args = _spec.args() if args.size() > 0 then w.write(\"\\nArgs:\\n\") _write_args(w, args) end fun box _write_usage(w: Writer) => w.write(\"usage: \" + fullname()) if _any_options() then w.write(\" [<options>]\") end if _spec.commands().size() > 0 then w.write(\" <command>\") end if _spec.args().size() > 0 then for a in _spec.args().values() do w.write(\" \" + a.help_string()) end else w.write(\" [<args> ...]\") end w.write(\"\\n\") fun box _write_options(w: Writer, options: Array[OptionSpec box] box) => let cols = Array[(USize,String,String)]() for o in options.values() do cols.push((2, o.help_string(), o.descr())) end _Columns.write(w, cols) fun box _write_commands(w: Writer) => let cols = Array[(USize,String,String)]() _list_commands(_spec, cols, 1) _Columns.write(w, cols) fun box _list_commands( cs: CommandSpec box, cols: Array[(USize,String,String)], level: USize) => for c in cs.commands().values() do cols.push((level*2, c.help_string(), c.descr())) _list_commands(c, cols, level + 1) end fun box _write_args(w: Writer, args: Array[ArgSpec] box) => let cols = Array[(USize,String,String)]() for a in args.values() do cols.push((2, a.help_string(), a.descr())) end _Columns.write(w, cols) fun box _any_options(): Bool => if _spec.options().size() > 0 then true else match _parent | let p: CommandHelp => p._any_options() else false end end fun box _all_options(): Array[OptionSpec box] => let options = Array[OptionSpec box]() _all_options_fill(options) options fun box _all_options_fill(options: Array[OptionSpec box]) => match _parent | let p: CommandHelp => p._all_options_fill(options) end for o in _spec.options().values() do options.push(o) end primitive _Columns fun indent(w: Writer, n: USize) => var i = n while i > 0 do w.write(\" \") i = i - 1 end fun write(w: Writer, cols: Array[(USize,String,String)]) => var widest: USize = 0 for c in cols.values() do (let c0, let c1, _) = c let c1s = c0 + c1.size() if c1s > widest then widest = c1s end end for c in cols.values() do (let c0, let c1, let c2) = c indent(w, 1 + c0) w.write(c1) indent(w, (widest - c1.size()) + 2) w.write(c2 + \"\\n\") end","title":"command_help.pony"},{"location":"src/cli/command_parser/","text":"use \"collections\" class CommandParser let _spec: CommandSpec box let _parent: (CommandParser box | None) new box create(spec': CommandSpec box) => \"\"\" Creates a new parser for a given command spec. \"\"\" _spec = spec' _parent = None new box _sub(spec': CommandSpec box, parent': CommandParser box) => _spec = spec' _parent = parent' fun parse( argv: Array[String] box, envs: (Array[String] box | None) = None) : (Command | CommandHelp | SyntaxError) => \"\"\" Parses all of the command line tokens and env vars and returns a Command, or the first SyntaxError. \"\"\" let tokens = argv.clone() try tokens.shift()? end // argv[0] is the program name, so skip it let options: Map[String,Option] ref = options.create() let args: Map[String,Arg] ref = args.create() _parse_command( tokens, options, args, EnvVars(envs, _spec.name().upper() + \"_\", true), false) fun _fullname(): String => match _parent | let p: CommandParser box => p._fullname() + \"/\" + _spec.name() else _spec.name() end fun _root_spec(): CommandSpec box => match _parent | let p: CommandParser box => p._root_spec() else _spec end fun _parse_command( tokens: Array[String] ref, options: Map[String,Option] ref, args: Map[String,Arg] ref, envsmap: Map[String, String] box, ostop: Bool) : (Command | CommandHelp | SyntaxError) => \"\"\" Parses all of the command line tokens and env vars into the given options and args maps. Returns the first SyntaxError, or the Command when OK. \"\"\" var opt_stop = ostop var arg_pos: USize = 0 while tokens.size() > 0 do let token = try tokens.shift()? else \"\" end if token == \"--\" then opt_stop = true elseif not opt_stop and (token.compare_sub(\"--\", 2, 0) == Equal) then match _parse_long_option(token.substring(2), tokens) | let o: Option => if o.spec()._typ_p().is_seq() then options.upsert(o.spec().name(), o, {(x, n) => x._append(n) }) else options.update(o.spec().name(), o) end | let se: SyntaxError => return se end elseif not opt_stop and ((token.compare_sub(\"-\", 1, 0) == Equal) and (token.size() > 1)) then match _parse_short_options(token.substring(1), tokens) | let os: Array[Option] => for o in os.values() do if o.spec()._typ_p().is_seq() then options.upsert(o.spec().name(), o, {(x, n) => x._append(n) }) else options.update(o.spec().name(), o) end end | let se: SyntaxError => return se end else // no dashes, must be a command or an arg if _spec.commands().size() > 0 then try match _spec.commands()(token)? | let cs: CommandSpec box => return CommandParser._sub(cs, this). _parse_command(tokens, options, args, envsmap, opt_stop) end else return SyntaxError(token, \"unknown command\") end else match _parse_arg(token, arg_pos) | let a: Arg => if a.spec()._typ_p().is_seq() then args.upsert(a.spec().name(), a, {(x, n) => x._append(n) }) else args.update(a.spec().name(), a) arg_pos = arg_pos + 1 end | let se: SyntaxError => return se end end end end // If it's a help option, return a general or specific CommandHelp. if options.contains(_help_name()) then return if _spec is _root_spec() then Help.general(_root_spec()) else Help.for_command(_root_spec(), [_spec.name()]) end end // If it's a help command, return a general or specific CommandHelp. if _spec.name() == _help_name() then try match args(\"command\")?.string() | \"\" => return Help.general(_root_spec()) | let c: String => return Help.for_command(_root_spec(), [c]) end end return Help.general(_root_spec()) end // Fill in option values from env or from coded defaults. for os in _spec.options().values() do if not options.contains(os.name()) then // Lookup and use env vars before code defaults if envsmap.contains(os.name()) then let vs = try envsmap(os.name())? else // TODO(cq) why is else needed? we just checked \"\" end let v: _Value = match _ValueParser.parse(os._typ_p(), vs) | let v: _Value => v | let se: SyntaxError => return se end options.update(os.name(), Option(os, v)) else if not os.required() then options.update(os.name(), Option(os, os._default_p())) end end end end // Check for missing options and error if any exist. for os in _spec.options().values() do if not options.contains(os.name()) then if os.required() then return SyntaxError(os.name(), \"missing value for required option\") end end end // Check for missing args and error if found. while arg_pos < _spec.args().size() do try let ars = _spec.args()(arg_pos)? if not args.contains(ars.name()) then // latest arg may be a seq if ars.required() then return SyntaxError(ars.name(), \"missing value for required argument\") end args.update(ars.name(), Arg(ars, ars._default_p())) end end arg_pos = arg_pos + 1 end // Specifying only the parent and not a leaf command is an error. if _spec.is_parent() then return SyntaxError(_spec.name(), \"missing subcommand\") end // A successfully parsed and populated leaf Command. Command._create(_spec, _fullname(), consume options, args) fun _parse_long_option( token: String, args: Array[String] ref) : (Option | SyntaxError) => \"\"\" --opt=foo => --opt has argument foo --opt foo => --opt has argument foo, iff arg is required \"\"\" let parts = token.split(\"=\") let name = try parts(0)? else \"???\" end let targ = try parts(1)? else None end match _option_with_name(name) | let os: OptionSpec => _OptionParser.parse(os, targ, args) | None => SyntaxError(name, \"unknown long option\") end fun _parse_short_options( token: String, args: Array[String] ref) : (Array[Option] | SyntaxError) => \"\"\" if 'O' requires an argument -OFoo => -O has argument Foo -O=Foo => -O has argument Foo -O Foo => -O has argument Foo else -O=Foo => -O has argument foo -abc => options a, b, c. -abcFoo => options a, b, c. c has argument Foo iff its arg is required. -abc=Foo => options a, b, c. c has argument Foo. -abc Foo => options a, b, c. c has argument Foo iff its arg is required. \"\"\" let parts = token.split(\"=\") let shorts = (try parts(0)? else \"\" end).clone() var targ = try parts(1)? else None end let options: Array[Option] ref = options.create() while shorts.size() > 0 do let c = try shorts.shift()? else 0 // TODO(cq) Should never error since checked end match _option_with_short(c) | let os: OptionSpec => if os._requires_arg() and (shorts.size() > 0) then // opt needs an arg, so consume the remainder of the shorts for targ if targ is None then targ = shorts.clone() shorts.truncate(0) else return SyntaxError(_short_string(c), \"ambiguous args for short option\") end end let arg = if shorts.size() == 0 then targ else None end match _OptionParser.parse(os, arg, args) | let o: Option => options.push(o) | let se: SyntaxError => return se end | None => return SyntaxError(_short_string(c), \"unknown short option\") end end options fun _parse_arg(token: String, arg_pos: USize): (Arg | SyntaxError) => try let arg_spec = _spec.args()(arg_pos)? _ArgParser.parse(arg_spec, token) else return SyntaxError(token, \"too many positional arguments\") end fun _option_with_name(name: String): (OptionSpec | None) => try return _spec.options()(name)? end match _parent | let p: CommandParser box => p._option_with_name(name) else None end fun _option_with_short(short: U8): (OptionSpec | None) => for o in _spec.options().values() do if o._has_short(short) then return o end end match _parent | let p: CommandParser box => p._option_with_short(short) else None end fun tag _short_string(c: U8): String => recover String.from_utf32(c.u32()) end fun _help_name(): String => _root_spec().help_name() primitive _OptionParser fun parse( spec: OptionSpec, targ: (String|None), args: Array[String] ref) : (Option | SyntaxError) => // Grab the token-arg if provided, else consume an arg if one is required. let arg = match targ | (let fn: None) if spec._requires_arg() => try args.shift()? else None end else targ end // Now convert the arg to Type, detecting missing or mis-typed args match arg | let a: String => match _ValueParser.parse(spec._typ_p(), a) | let v: _Value => Option(spec, v) | let se: SyntaxError => se end else if not spec._requires_arg() then Option(spec, spec._default_arg()) else SyntaxError(spec.name(), \"missing arg for option\") end end primitive _ArgParser fun parse(spec: ArgSpec, arg: String): (Arg | SyntaxError) => match _ValueParser.parse(spec._typ_p(), arg) | let v: _Value => Arg(spec, v) | let se: SyntaxError => se end primitive _ValueParser fun box parse(typ: _ValueType, arg: String): (_Value | SyntaxError) => try typ.value_of(arg)? else SyntaxError(arg, \"unable to convert '\" + arg + \"' to \" + typ.string()) end","title":"command_parser.pony"},{"location":"src/cli/command_spec/","text":"use \"collections\" use pc = \"collections/persistent\" primitive _CommandSpecLeaf primitive _CommandSpecParent type _CommandSpecType is (_CommandSpecLeaf | _CommandSpecParent ) class CommandSpec \"\"\" CommandSpec describes the specification of a parent or leaf command. Each command has the following attributes: - a name: a simple string token that identifies the command. - a description: used in the syntax message. - a map of options: the valid options for this command. - an optional help option+command name for help parsing - one of: - a Map of child commands. - an Array of arguments. \"\"\" let _type: _CommandSpecType let _name: String let _descr: String let _options: Map[String, OptionSpec] = _options.create() var _help_name: String = \"\" var _help_info: String = \"\" // A parent commands can have sub-commands; leaf commands can have args. let _commands: Map[String, CommandSpec box] = _commands.create() let _args: Array[ArgSpec] = _args.create() new parent( name': String, descr': String = \"\", options': Array[OptionSpec] box = Array[OptionSpec](), commands': Array[CommandSpec] box = Array[CommandSpec]()) ? => \"\"\" Creates a command spec that can accept options and child commands, but not arguments. \"\"\" _type = _CommandSpecParent _name = _assertName(name')? _descr = descr' for o in options'.values() do _options.update(o.name(), o) end for c in commands'.values() do _commands.update(c.name(), c) end new leaf( name': String, descr': String = \"\", options': Array[OptionSpec] box = Array[OptionSpec](), args': Array[ArgSpec] box = Array[ArgSpec]()) ? => \"\"\" Creates a command spec that can accept options and arguments, but not child commands. \"\"\" _type = _CommandSpecLeaf _name = _assertName(name')? _descr = descr' for o in options'.values() do _options.update(o.name(), o) end for a in args'.values() do _args.push(a) end fun tag _assertName(nm: String): String ? => for b in nm.values() do if (b != '-') and (b != '_') and not ((b >= '0') and (b <= '9')) and not ((b >= 'A') and (b <= 'Z')) and not ((b >= 'a') and (b <= 'z')) then error end end nm fun ref add_command(cmd: CommandSpec box) ? => \"\"\" Adds an additional child command to this parent command. \"\"\" if is_leaf() then error end _commands.update(cmd.name(), cmd) fun ref add_help(hname: String = \"help\", descr': String = \"\") ? => \"\"\" Adds a standard help option and, optionally command, to a root command. \"\"\" _help_name = hname _help_info = descr' let help_option = OptionSpec.bool(_help_name, _help_info, 'h', false) _options.update(_help_name, help_option) if is_parent() then let help_cmd = CommandSpec.leaf(_help_name, \"\", Array[OptionSpec](), [ ArgSpec.string(\"command\" where default' = \"\") ])? _commands.update(_help_name, help_cmd) end fun name(): String => \"\"\" Returns the name of this command. \"\"\" _name fun descr(): String => \"\"\" Returns the description for this command. \"\"\" _descr fun options(): Map[String, OptionSpec] box => \"\"\" Returns a map by name of the named options of this command. \"\"\" _options fun commands(): Map[String, CommandSpec box] box => \"\"\" Returns a map by name of the child commands of this command. \"\"\" _commands fun args(): Array[ArgSpec] box => \"\"\" Returns an array of the positional arguments of this command. \"\"\" _args fun is_leaf(): Bool => _type is _CommandSpecLeaf fun is_parent(): Bool => _type is _CommandSpecParent fun help_name(): String => \"\"\" Returns the name of the help command, which defaults to \"help\". \"\"\" _help_name fun help_string(): String => \"\"\" Returns a formated help string for this command and all of its arguments. \"\"\" let s = _name.clone() s.append(\" \") let args_iter = _args.values() for a in args_iter do s.append(a.help_string()) if args_iter.has_next() then s.append(\" \") end end s class val OptionSpec \"\"\" OptionSpec describes the specification of a named Option. They have a name, descr(iption), a short-name, a typ(e), and a default value when they are not required. Options can be placed anywhere before or after commands, and can be thought of as named arguments. \"\"\" let _name: String let _descr: String let _short: (U8 | None) let _typ: _ValueType let _default: _Value let _required: Bool fun tag _init(typ': _ValueType, default': (_Value | None)) : (_ValueType, _Value, Bool) => match default' | None => (typ', false, true) | let d: _Value => (typ', d, false) end new val bool( name': String, descr': String = \"\", short': (U8 | None) = None, default': (Bool | None) = None) => \"\"\" Creates an Option with a Bool typed value that can be used like `--opt` or `-O` or `--opt=true` or `-O=true` to yield an option value like `cmd.option(\"opt\").bool() == true`. \"\"\" _name = name' _descr = descr' _short = short' (_typ, _default, _required) = _init(_BoolType, default') new val string( name': String, descr': String = \"\", short': (U8 | None) = None, default': (String | None) = None) => \"\"\" Creates an Option with a String typed value that can be used like `--file=dir/filename` or `-F=dir/filename` or `-Fdir/filename` to yield an option value like `cmd.option(\"file\").string() == \"dir/filename\"`. \"\"\" _name = name' _descr = descr' _short = short' (_typ, _default, _required) = _init(_StringType, default') new val i64(name': String, descr': String = \"\", short': (U8 | None) = None, default': (I64 | None) = None) => \"\"\" Creates an Option with an I64 typed value that can be used like `--count=42 -C=42` to yield an option value like `cmd.option(\"count\").i64() == I64(42)`. \"\"\" _name = name' _descr = descr' _short = short' (_typ, _default, _required) = _init(_I64Type, default') new val u64(name': String, descr': String = \"\", short': (U8 | None) = None, default': (U64 | None) = None) => \"\"\" Creates an Option with an U64 typed value that can be used like `--count=47 -C=47` to yield an option value like `cmd.option(\"count\").u64() == U64(47)`. \"\"\" _name = name' _descr = descr' _short = short' (_typ, _default, _required) = _init(_U64Type, default') new val f64(name': String, descr': String = \"\", short': (U8 | None) = None, default': (F64 | None) = None) => \"\"\" Creates an Option with a F64 typed value that can be used like `--ratio=1.039` or `-R=1.039` to yield an option value like `cmd.option(\"ratio\").f64() == F64(1.039)`. \"\"\" _name = name' _descr = descr' _short = short' (_typ, _default, _required) = _init(_F64Type, default') new val string_seq( name': String, descr': String = \"\", short': (U8 | None) = None) => \"\"\" Creates an Option with a ReadSeq[String] typed value that can be used like `--files=file1 --files=files2 --files=files2` to yield a sequence of three strings equivalent to `cmd.option(\"ratio\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"]`. \"\"\" _name = name' _descr = descr' _short = short' (_typ, _default, _required) = _init(_StringSeqType, _StringSeq.empty()) fun name(): String => \"\"\" Returns the name of this option. \"\"\" _name fun descr(): String => \"\"\" Returns the description for this option. \"\"\" _descr fun _typ_p(): _ValueType => _typ fun _default_p(): _Value => _default fun required(): Bool => \"\"\" Returns true iff this option is required to be present in the command line. \"\"\" _required // Other than bools, all options require args. fun _requires_arg(): Bool => match _typ | let _: _BoolType => false else true end // Used for bool options to get the true arg when option is present w/o arg fun _default_arg(): _Value => match _typ | let _: _BoolType => true else false end fun _has_short(sh: U8): Bool => match _short | let ss: U8 => sh == ss else false end fun help_string(): String => \"\"\" Returns a formated help string for this option. \"\"\" let s = match _short | let ss: U8 => \"-\" + String.from_utf32(ss.u32()) + \", \" else \" \" end s + \"--\" + _name + if not _required then \"=\" + _default.string() else \"\" end fun deb_string(): String => \"--\" + _name + \"[\" + _typ.string() + \"]\" + if not _required then \"(=\" + _default.string() + \")\" else \"\" end class val ArgSpec \"\"\" ArgSpec describes the specification of a positional Arg(ument). They have a name, descr(iption), a typ(e), and a default value when they are not required. Args always come after a leaf command, and are assigned in their positional order. \"\"\" let _name: String let _descr: String let _typ: _ValueType let _default: _Value let _required: Bool fun tag _init(typ': _ValueType, default': (_Value | None)) : (_ValueType, _Value, Bool) => match default' | None => (typ', false, true) | let d: _Value => (typ', d, false) end new val bool( name': String, descr': String = \"\", default': (Bool | None) = None) => \"\"\" Creates an Arg with a Bool typed value that can be used like `<cmd> true` to yield an arg value like `cmd.arg(\"opt\").bool() == true`. \"\"\" _name = name' _descr = descr' (_typ, _default, _required) = _init(_BoolType, default') new val string( name': String, descr': String = \"\", default': (String | None) = None) => \"\"\" Creates an Arg with a String typed value that can be used like `<cmd> filename` to yield an arg value `cmd.arg(\"file\").string() == \"filename\"`. \"\"\" _name = name' _descr = descr' (_typ, _default, _required) = _init(_StringType, default') new val i64(name': String, descr': String = \"\", default': (I64 | None) = None) => \"\"\" Creates an Arg with an I64 typed value that can be used like `<cmd> 42` to yield an arg value like `cmd.arg(\"count\").i64() == I64(42)`. \"\"\" _name = name' _descr = descr' (_typ, _default, _required) = _init(_I64Type, default') new val u64(name': String, descr': String = \"\", default': (U64 | None) = None) => \"\"\" Creates an Arg with an U64 typed value that can be used like `<cmd> 47` to yield an arg value like `cmd.arg(\"count\").u64() == U64(47)`. \"\"\" _name = name' _descr = descr' (_typ, _default, _required) = _init(_U64Type, default') new val f64(name': String, descr': String = \"\", default': (F64 | None) = None) => \"\"\" Creates an Arg with a F64 typed value that can be used like `<cmd> 1.039` to yield an arg value like `cmd.arg(\"ratio\").f64() == F64(1.039)`. \"\"\" _name = name' _descr = descr' (_typ, _default, _required) = _init(_F64Type, default') new val string_seq( name': String, descr': String = \"\") => \"\"\" Creates an Arg with a ReadSeq[String] typed value that can be used like `<cmd> file1 file2 file3` to yield a sequence of three strings equivalent to `cmd.arg(\"file\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"]`. \"\"\" _name = name' _descr = descr' (_typ, _default, _required) = _init(_StringSeqType, _StringSeq.empty()) fun name(): String => \"\"\" Returns the name of this arg. \"\"\" _name fun descr(): String => \"\"\" Returns the description for this arg. \"\"\" _descr fun _typ_p(): _ValueType => _typ fun _default_p(): _Value => _default fun required(): Bool => \"\"\" Returns true iff this arg is required to be present in the command line. \"\"\" _required fun help_string(): String => \"\"\" Returns a formated help string for this arg. \"\"\" \"<\" + _name + \">\" fun deb_string(): String => _name + \"[\" + _typ.string() + \"]\" + if not _required then \"(=\" + _default.string() + \")\" else \"\" end class _StringSeq is ReadSeq[String] \"\"\" _StringSeq is a wrapper / helper class for working with String sequence values while parsing. It assists in collecting the strings as they are parsed, and producing a ReadSeq[String] as a result. \"\"\" let strings: pc.Vec[String] new val empty() => strings = pc.Vec[String] new val from_string(s: String) => strings = (pc.Vec[String]).push(s) new val from_concat(ss0: _StringSeq val, ss1: _StringSeq val) => strings = ss0.strings.concat(ss1.strings.values()) fun string(): String iso^ => let str = recover String() end str.push('[') for s in strings.values() do if str.size() > 1 then str.push(',') end str.append(s) end str.push(']') str fun size(): USize => strings.size() fun apply(i: USize): this->String ? => strings(i)? fun values(): Iterator[this->String]^ => strings.values() type _Value is (Bool | String | I64 | U64 | F64 | _StringSeq val) trait val _ValueType fun string(): String fun value_of(s: String): _Value ? fun is_seq(): Bool => false fun append(v1: _Value, v2: _Value): _Value => v1 primitive _BoolType is _ValueType fun string(): String => \"Bool\" fun value_of(s: String): _Value ? => s.bool()? primitive _StringType is _ValueType fun string(): String => \"String\" fun value_of(s: String): _Value => s primitive _I64Type is _ValueType fun string(): String => \"I64\" fun value_of(s: String): _Value ? => s.i64()? primitive _U64Type is _ValueType fun string(): String => \"U64\" fun value_of(s: String): _Value ? => s.u64()? primitive _F64Type is _ValueType fun string(): String => \"F64\" fun value_of(s: String): _Value ? => s.f64()? primitive _StringSeqType is _ValueType fun string(): String => \"ReadSeq[String]\" fun value_of(s: String): _Value => _StringSeq.from_string(s) fun is_seq(): Bool => true fun append(v1: _Value, v2: _Value): _Value => \"\"\" When is_seq() returns true, append() is called during parsing to append a new parsed value onto an existing value. \"\"\" try _StringSeq.from_concat(v1 as _StringSeq val, v2 as _StringSeq val) else v1 end","title":"command_spec.pony"},{"location":"src/cli/env_vars/","text":"use \"collections\" primitive EnvVars fun apply( envs: (Array[String] box | None), prefix: String = \"\", squash: Bool = false): Map[String, String] val => \"\"\" Turns an array of strings that look like environment variables, ie. key=value, into a map of string to string. Can optionally filter for keys matching a 'prefix', and will squash resulting keys to lowercase iff 'squash' is true. So: <PREFIX><KEY>=<VALUE> becomes: {KEY, VALUE} or {key, VALUE} \"\"\" let envsmap = recover Map[String, String]() end match envs | let envsarr: Array[String] box => let prelen = prefix.size().isize() for e in envsarr.values() do let eqpos = try e.find(\"=\")? else ISize.max_value() end let ek: String val = e.substring(0, eqpos) let ev: String val = e.substring(eqpos + 1) if (prelen == 0) or ek.at(prefix, 0) then if squash then envsmap.update(ek.substring(prelen).lower(), ev) else envsmap.update(ek.substring(prelen), ev) end end end end envsmap","title":"env_vars.pony"},{"location":"src/collections/flag/","text":"interface val Flag[A: (Unsigned & Integer[A] val)] \"\"\" A flag should be a primitive with a value method that returns the bits that represent the flag. This allows a flag to encode a single bit, or any combination of bits. \"\"\" fun value(): A class Flags[A: Flag[B] val, B: (Unsigned & Integer[B] val) = U64] is Comparable[Flags[A, B] box] \"\"\" Flags is a set of flags. The flags that are recognised should be passed as a union type for type parameter A. For example: primitive SSE fun value(): U64 => 1 primitive AVX fun value(): U64 => 2 primitive RDTSCP fun value(): U64 => 4 type Features is Flags[(SSE | AVX | RDTSCP)] Type parameter B is the unlying field used to store the flags. \"\"\" var _value: B = 0 fun value(): B => \"\"\" Returns the bit encoding of the set flags. \"\"\" _value fun apply(flag: A): Bool => \"\"\" Returns true if the flag is set. \"\"\" (_value and flag.value()) > 0 fun ref all() => \"\"\" Sets all bits, including undefined flags. \"\"\" _value = -1 fun ref clear() => \"\"\" Unsets all flags. \"\"\" _value = 0 fun ref set(flag: A) => \"\"\" Sets the flag. \"\"\" _value = _value or flag.value() fun ref unset(flag: A) => \"\"\" Unsets the flag. \"\"\" _value = _value and not flag.value() fun ref flip(flag: A) => \"\"\" Sets the flag if it is unset, unsets the flag if it is set. \"\"\" _value = _value xor flag.value() fun ref union(that: Flags[A, B] box) => \"\"\" The union of this and that. \"\"\" _value = this._value or that._value fun ref intersect(that: Flags[A, B] box) => \"\"\" The intersection of this and that. \"\"\" _value = this._value and that._value fun ref difference(that: Flags[A, B] box) => \"\"\" The symmetric difference of this and that. \"\"\" _value = this._value xor that._value fun ref remove(that: Flags[A, B] box) => \"\"\" Unset flags that are set in that. \"\"\" _value = this._value xor that._value fun add(flag: A): Flags[A, B] iso^ => \"\"\" This with the flag set. \"\"\" let f = recover Flags[A, B] end f._value = this._value or flag.value() f fun sub(flag: A): Flags[A, B] iso^ => \"\"\" This with the flag unset. \"\"\" let f = recover Flags[A, B] end f._value = this._value and not flag.value() f fun op_or(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The union of this and that. \"\"\" let f = recover Flags[A, B] end f._value = this._value or that._value f fun op_and(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The intersection of this and that. \"\"\" let f = recover Flags[A, B] end f._value = this._value and that._value f fun op_xor(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The symmetric difference of this and that. \"\"\" let f = recover Flags[A, B] end f._value = this._value xor that._value f fun without(that: Flags[A, B] box): Flags[A, B] iso^ => \"\"\" The flags in this that are not in that. \"\"\" let f = recover Flags[A, B] end f._value = this._value and not that._value f fun clone(): Flags[A, B] iso^ => \"\"\" Create a clone. \"\"\" let f = recover Flags[A, B] end f._value = this._value f fun eq(that: Flags[A, B] box): Bool => \"\"\" Returns true if this has the same flags set as that. \"\"\" _value == that._value fun lt(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a strict subset of the flags set on that. Flags is only partially ordered, so lt is not the opposite of ge. \"\"\" (_value != that._value) and ((_value and not that._value) == 0) fun le(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a subset of the flags set on that or they are the same. Flags is only partially ordered, so le is not the opposite of te. \"\"\" ((_value and not that._value) == 0) fun gt(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a struct superset of the flags set on that. Flags is only partially ordered, so gt is not the opposite of le. \"\"\" (_value != that._value) and ((that._value and not _value) == 0) fun ge(that: Flags[A, B] box): Bool => \"\"\" Returns true if the flags set on this are a superset of the flags set on that or they are the same. Flags is only partially ordered, so ge is not the opposite of lt. \"\"\" ((that._value and not _value) == 0)","title":"flag.pony"},{"location":"src/collections/hashable/","text":"interface Hashable \"\"\" Anything with a hash method is hashable. \"\"\" fun hash(): USize interface Hashable64 \"\"\" A version of Hashable that returns 64-bit hashes on every platform. \"\"\" fun hash64(): U64 interface val HashFunction[A] \"\"\" A pluggable hash function. \"\"\" new val create() \"\"\" Data structures create instances internally. Use a primitive if possible. \"\"\" fun hash(x: box->A!): USize \"\"\" Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. \"\"\" fun eq(x: box->A!, y: box->A!): Bool \"\"\" Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. \"\"\" interface val HashFunction64[A] \"\"\" A pluggable hash function with 64-bit hashes. \"\"\" new val create() \"\"\" Data structures create instances internally. Use a primitive if possible. \"\"\" fun hash64(x: box->A!): U64 \"\"\" Calculate the hash of some type. This is an alias of the type parameter to allow data structures to hash things without consuming them. \"\"\" fun eq(x: box->A!, y: box->A!): Bool \"\"\" Determine equality between two keys with the same hash. This is done with viewpoint adapted aliases to allow data structures to determine equality in a box fun without consuming keys. \"\"\" primitive HashEq[A: (Hashable #read & Equatable[A] #read)] is HashFunction[A] fun hash(x: box->A): USize => \"\"\" Use the hash function from the type parameter. \"\"\" x.hash() fun eq(x: box->A, y: box->A): Bool => \"\"\" Use the structural equality function from the type parameter. \"\"\" x == y primitive HashEq64[A: (Hashable64 #read & Equatable[A] #read)] is HashFunction64[A] fun hash64(x: box->A): U64 => \"\"\" Use the hash function from the type parameter. \"\"\" x.hash64() fun eq(x: box->A, y: box->A): Bool => \"\"\" Use the structural equality function from the type parameter. \"\"\" x == y primitive HashIs[A] is (HashFunction[A] & HashFunction64[A]) fun hash(x: box->A!): USize => \"\"\" Hash the identity rather than the contents. \"\"\" (digestof x).hash() fun hash64(x: box->A!): U64 => \"\"\" Hash the identity rather than the contents. \"\"\" (digestof x).hash64() fun eq(x: box->A!, y: box->A!): Bool => \"\"\" Determine equality by identity rather than structurally. \"\"\" x is y primitive HashByteSeq is (HashFunction[ByteSeq box] & HashFunction64[ByteSeq box]) \"\"\" Hash and equality functions for arbitrary ByteSeq. \"\"\" fun hash(x: ByteSeq box): USize => @ponyint_hash_block[USize](x.cpointer(), x.size()) fun hash64(x: ByteSeq box): U64 => @ponyint_hash_block64[U64](x.cpointer(), x.size()) fun eq(x: ByteSeq box, y: ByteSeq box): Bool => if x.size() == y.size() then @memcmp[I32](x.cpointer(), y.cpointer(), x.size()) == 0 else false end","title":"hashable.pony"},{"location":"src/collections/heap/","text":"type MinHeap[A: Comparable[A] #read] is BinaryHeap[A, MinHeapPriority[A]] type MaxHeap[A: Comparable[A] #read] is BinaryHeap[A, MaxHeapPriority[A]] class BinaryHeap[A: Comparable[A] #read, P: BinaryHeapPriority[A]] \"\"\" A priority queue implemented as a binary heap. The `BinaryHeapPriority` type parameter determines whether this is max-heap or a min-heap. \"\"\" embed _data: Array[A] new create(len: USize) => \"\"\" Create an empty heap with space for `len` elements. \"\"\" _data = Array[A](len) fun ref clear() => \"\"\" Remove all elements from the heap. \"\"\" _data.clear() fun size(): USize => \"\"\" Return the number of elements in the heap. \"\"\" _data.size() fun peek(): this->A ? => \"\"\" Return the highest priority item in the heap. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. \"\"\" _data(0)? fun ref push(value: A) => \"\"\" Push an item into the heap. The time complexity of this operation is O(log(n)) with respect to the size of the heap. \"\"\" _data.push(value) _sift_up(size() - 1) fun ref pop(): A^ ? => \"\"\" Remove the highest priority value from the heap and return it. For max-heaps, the greatest item will be returned. For min-heaps, the smallest item will be returned. The time complexity of this operation is O(log(n)) with respect to the size of the heap. \"\"\" let n = size() - 1 _data.swap_elements(0, n)? _sift_down(0, n) _data.pop()? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append len elements from a sequence, starting from the given offset. \"\"\" _data.append(seq, offset, len) _make_heap() fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements, starting from the given offset. \"\"\" _data.concat(iter, offset, len) _make_heap() fun values(): ArrayValues[A, this->Array[A]]^ => \"\"\" Return an iterator for the elements in the heap. The order of elements is arbitrary. \"\"\" _data.values() fun ref _make_heap() => let n = size() if n < 2 then return end var i = (n / 2) while (i = i - 1) > 0 do _sift_down(i, n) end fun ref _sift_up(n: USize) => var idx = n try while true do let parent_idx = (idx - 1) / 2 if (parent_idx == idx) or not P(_data(idx)?, _data(parent_idx)?) then break end _data.swap_elements(parent_idx, idx)? idx = parent_idx end end fun ref _sift_down(start: USize, n: USize): Bool => var idx = start try while true do var left = (2 * idx) + 1 if (left >= n) or (left < 0) then break end let right = left + 1 if (right < n) and P(_data(right)?, _data(left)?) then left = right end if not P(_data(left)?, _data(idx)?) then break end _data.swap_elements(idx, left)? idx = left end end idx > start fun _apply(i: USize): this->A ? => _data(i)? type BinaryHeapPriority[A: Comparable[A] #read] is ( _BinaryHeapPriority[A] & (MinHeapPriority[A] | MaxHeapPriority[A])) interface val _BinaryHeapPriority[A: Comparable[A] #read] new val create() fun apply(x: A, y: A): Bool primitive MinHeapPriority[A: Comparable[A] #read] is _BinaryHeapPriority[A] fun apply(x: A, y: A): Bool => x < y primitive MaxHeapPriority [A: Comparable[A] #read] is _BinaryHeapPriority[A] fun apply(x: A, y: A): Bool => x > y","title":"heap.pony"},{"location":"src/collections/list/","text":"class List[A] is Seq[A] \"\"\" A doubly linked list. (The following is paraphrased from [Wikipedia](https://en.wikipedia.org/wiki/Doubly_linked_list).) A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. (Implemented in Ponylang via the collections.ListNode class.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. A doubly linked list can be conceptualized as two singly linked lists formed from the same data items, but in opposite sequential orders. As you would expect. functions are provided to perform all the common list operations such as creation, traversal, node addition and removal, iteration, mapping, filtering, etc. ## Example program There are a _lot_ of functions in List. The following code picks out a few common examples. It outputs: A new empty list has 0 nodes. Adding one node to our empty list means it now has a size of 1. The first (index 0) node has the value: A single String A list created by appending our second single-node list onto our first has size: 2 The List nodes of our first list are now: A single String Another String Append *moves* the nodes from the second list so that now has 0 nodes. A list created from an array of three strings has size: 3 First Second Third Mapping over our three-node list produces a new list of size: 3 Each node-value in the resulting list is now far more exciting: First BOOM! Second BOOM! Third BOOM! Filtering our three-node list produces a new list of size: 2 Second BOOM! Third BOOM! The size of our first partitioned list (matches predicate): 1 The size of our second partitioned list (doesn't match predicate): 1 Our matching partition elements are: Second BOOM! ```pony use \"collections\" actor Main new create(env:Env) => // Create a new empty List of type String let my_list = List[String]() env.out.print(\"A new empty list has \" + my_list.size().string() + \" nodes.\") // 0 // Push a String literal onto our empty List my_list.push(\"A single String\") env.out.print(\"Adding one node to our empty list means it now has a size of \" + my_list.size().string() + \".\") // 1 // Get the first element of our List try env.out.print(\"The first (index 0) node has the value: \" + my_list.index(0)?()?.string()) end // A single String // Create a second List from a single String literal let my_second_list = List[String].unit(\"Another String\") // Append the second List to the first my_list.append_list(my_second_list) env.out.print(\"A list created by appending our second single-node list onto our first has size: \" + my_list.size().string()) // 2 env.out.print(\"The List nodes of our first list are now:\") for n in my_list.values() do env.out.print(\"\\t\" + n.string()) end // NOTE: this _moves_ the elements so second_list consequently ends up empty env.out.print(\"Append *moves* the nodes from the second list so that now has \" + my_second_list.size().string() + \" nodes.\") // 0 // Create a third List from a Seq(ence) // (In this case a literal array of Strings) let my_third_list = List[String].from([\"First\"; \"Second\"; \"Third\"]) env.out.print(\"A list created from an array of three strings has size: \" + my_third_list.size().string()) // 3 for n in my_third_list.values() do env.out.print(\"\\t\" + n.string()) end // Map over the third List, concatenating some \"BOOM!'s\" into a new List let new_list = my_third_list.map[String]({ (n) => n + \" BOOM!\" }) env.out.print(\"Mapping over our three-node list produces a new list of size: \" + new_list.size().string()) // 3 env.out.print(\"Each node-value in the resulting list is now far more exciting:\") for n in new_list.values() do env.out.print(\"\\t\" + n.string()) end // Filter the new list to extract 2 elements let filtered_list = new_list.filter({ (n) => n.string().contains(\"d BOOM!\") }) env.out.print(\"Filtering our three-node list produces a new list of size: \" + filtered_list.size().string()) // 2 for n in filtered_list.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM!\\nThird BOOM! end // Partition the filtered list let partitioned_lists = filtered_list.partition({ (n) => n.string().contains(\"Second\") }) env.out.print(\"The size of our first partitioned list (matches predicate): \" + partitioned_lists._1.size().string()) // 1 env.out.print(\"The size of our second partitioned list (doesn't match predicate): \" + partitioned_lists._2.size().string()) // 1 env.out.print(\"Our matching partition elements are:\") for n in partitioned_lists._1.values() do env.out.print(\"\\t\" + n.string()) // Second BOOM! end ``` \"\"\" var _head: (ListNode[A] | None) = None var _tail: (ListNode[A] | None) = None var _size: USize = 0 new create(len: USize = 0) => \"\"\" Do nothing, but be compatible with Seq. \"\"\" None new unit(a: A) => \"\"\" Builds a new list from an element. \"\"\" push(consume a) new from(seq: Array[A^]) => \"\"\" Builds a new list from the sequence passed in. \"\"\" for value in seq.values() do push(consume value) end fun ref reserve(len: USize) => \"\"\" Do nothing, but be compatible with Seq. \"\"\" None fun size(): USize => \"\"\" Returns the number of items in the list. \"\"\" _size fun apply(i: USize = 0): this->A ? => \"\"\" Get the i-th element, raising an error if the index is out of bounds. \"\"\" index(i)?()? fun ref update(i: USize, value: A): A^ ? => \"\"\" Change the i-th element, raising an error if the index is out of bounds. Returns the previous value, which may be None if the node has been popped but left on the list. \"\"\" index(i)?()? = consume value fun index(i: USize): this->ListNode[A] ? => \"\"\" Gets the i-th node, raising an error if the index is out of bounds. \"\"\" if i >= _size then error end var node = _head as this->ListNode[A] var j = USize(0) while j < i do node = node.next() as this->ListNode[A] j = j + 1 end node fun ref remove(i: USize): ListNode[A] ? => \"\"\" Remove the i-th node, raising an error if the index is out of bounds. The removed node is returned. \"\"\" index(i)? .> remove() fun ref clear() => \"\"\" Empties the list. \"\"\" _head = None _tail = None _size = 0 fun head(): this->ListNode[A] ? => \"\"\" Get the head of the list. \"\"\" _head as this->ListNode[A] fun tail(): this->ListNode[A] ? => \"\"\" Get the tail of the list. \"\"\" _tail as this->ListNode[A] fun ref prepend_node(node: ListNode[A]) => \"\"\" Adds a node to the head of the list. \"\"\" match _head | let head': ListNode[A] => head'.prepend(node) else _set_both(node) end fun ref append_node(node: ListNode[A]) => \"\"\" Adds a node to the tail of the list. \"\"\" match _tail | let tail': ListNode[A] => tail'.append(node) else _set_both(node) end fun ref append_list(that: List[A]) => \"\"\" Remove all nodes from that and append them to this. \"\"\" if this isnt that then while that._size > 0 do try append_node(that.head()?) end end end fun ref prepend_list(that: List[A]) => \"\"\" Remove all nodes from that and prepend them to this. \"\"\" if this isnt that then while that._size > 0 do try prepend_node(that.tail()?) end end end fun ref push(a: A) => \"\"\" Adds a value to the tail of the list. \"\"\" append_node(ListNode[A](consume a)) fun ref pop(): A^ ? => \"\"\" Removes a value from the tail of the list. \"\"\" tail()? .> remove().pop()? fun ref unshift(a: A) => \"\"\" Adds a value to the head of the list. \"\"\" prepend_node(ListNode[A](consume a)) fun ref shift(): A^ ? => \"\"\" Removes a value from the head of the list. \"\"\" head()? .> remove().pop()? fun ref append( seq: (ReadSeq[A] & ReadElement[A^]), offset: USize = 0, len: USize = -1) => \"\"\" Append len elements from a sequence, starting from the given offset. \"\"\" if offset >= seq.size() then return end let copy_len = len.min(seq.size() - offset) reserve(_size + copy_len) let cap = copy_len + offset var i = offset try while i < cap do push(seq(i)?) i = i + 1 end end fun ref concat(iter: Iterator[A^], offset: USize = 0, len: USize = -1) => \"\"\" Add len iterated elements to the end of the list, starting from the given offset. \"\"\" try for i in Range(0, offset) do if iter.has_next() then iter.next()? else return end end for i in Range(0, len) do if iter.has_next() then push(iter.next()?) else return end end end fun ref truncate(len: USize) => \"\"\" Truncate the list to the given length, discarding excess elements. If the list is already smaller than len, do nothing. \"\"\" try while _size > len do pop()? end end fun clone(): List[this->A!]^ => \"\"\" Clone the list. \"\"\" let out = List[this->A!] for v in values() do out.push(v) end out fun map[B](f: {(this->A!): B^} box): List[B]^ => \"\"\" Builds a new list by applying a function to every member of the list. \"\"\" try _map[B](head()?, f, List[B]) else List[B] end fun _map[B]( ln: this->ListNode[A], f: {(this->A!): B^} box, acc: List[B]) : List[B]^ => \"\"\" Private helper for map, recursively working with ListNodes. \"\"\" try acc.push(f(ln()?)) end try _map[B](ln.next() as this->ListNode[A], f, acc) else acc end fun flat_map[B](f: {(this->A!): List[B]} box): List[B]^ => \"\"\" Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. \"\"\" try _flat_map[B](head()?, f, List[B]) else List[B] end fun _flat_map[B]( ln: this->ListNode[A], f: {(this->A!): List[B]} box, acc: List[B]): List[B]^ => \"\"\" Private helper for flat_map, recursively working with ListNodes. \"\"\" try acc.append_list(f(ln()?)) end try _flat_map[B](ln.next() as this->ListNode[A], f, acc) else acc end fun filter(f: {(this->A!): Bool} box): List[this->A!]^ => \"\"\" Builds a new list with those elements that satisfy a provided predicate. \"\"\" try _filter(head()?, f, List[this->A!]) else List[this->A!] end fun _filter( ln: this->ListNode[A], f: {(this->A!): Bool} box, acc: List[this->A!]): List[this->A!] => \"\"\" Private helper for filter, recursively working with ListNodes. \"\"\" try let cur = ln()? if f(cur) then acc.push(cur) end end try _filter(ln.next() as this->ListNode[A], f, acc) else acc end fun fold[B](f: {(B!, this->A!): B^} box, acc: B): B => \"\"\" Folds the elements of the list using the supplied function. \"\"\" let h = try head()? else return acc end _fold[B](h, f, consume acc) fun _fold[B]( ln: this->ListNode[A], f: {(B!, this->A!): B^} box, acc: B) : B => \"\"\" Private helper for fold, recursively working with ListNodes. \"\"\" let nextAcc: B = try f(acc, ln()?) else consume acc end let h = try ln.next() as this->ListNode[A] else return nextAcc end _fold[B](h, f, consume nextAcc) fun every(f: {(this->A!): Bool} box): Bool => \"\"\" Returns true if every element satisfies the provided predicate, false otherwise. \"\"\" try _every(head()?, f) else true end fun _every(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool => \"\"\" Private helper for every, recursively working with ListNodes. \"\"\" try if not(f(ln()?)) then false else _every(ln.next() as this->ListNode[A], f) end else true end fun exists(f: {(this->A!): Bool} box): Bool => \"\"\" Returns true if at least one element satisfies the provided predicate, false otherwise. \"\"\" try _exists(head()?, f) else false end fun _exists(ln: this->ListNode[A], f: {(this->A!): Bool} box): Bool => \"\"\" Private helper for exists, recursively working with ListNodes. \"\"\" try if f(ln()?) then true else _exists(ln.next() as this->ListNode[A], f) end else false end fun partition( f: {(this->A!): Bool} box) : (List[this->A!]^, List[this->A!]^) => \"\"\" Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. \"\"\" let l1 = List[this->A!] let l2 = List[this->A!] for item in values() do if f(item) then l1.push(item) else l2.push(item) end end (l1, l2) fun drop(n: USize): List[this->A!]^ => \"\"\" Builds a list by dropping the first n elements. \"\"\" let l = List[this->A!] if size() > n then try var node = index(n)? for i in Range(n, size()) do l.push(node()?) node = node.next() as this->ListNode[A] end end end l fun take(n: USize): List[this->A!] => \"\"\" Builds a list of the first n elements. \"\"\" let l = List[this->A!] if size() > 0 then try var node = head()? for i in Range(0, n.min(size())) do l.push(node()?) node = node.next() as this->ListNode[A] end end end l fun take_while(f: {(this->A!): Bool} box): List[this->A!]^ => \"\"\" Builds a list of elements satisfying the provided predicate until one does not. \"\"\" let l = List[this->A!] if size() > 0 then try var node = head()? for i in Range(0, size()) do let item = node()? if f(item) then l.push(item) else return l end node = node.next() as this->ListNode[A] end end end l fun reverse(): List[this->A!]^ => \"\"\" Builds a new list by reversing the elements in the list. \"\"\" try _reverse(head()?, List[this->A!]) else List[this->A!] end fun _reverse(ln: this->ListNode[A], acc: List[this->A!]): List[this->A!]^ => \"\"\" Private helper for reverse, recursively working with ListNodes. \"\"\" try acc.unshift(ln()?) end try _reverse(ln.next() as this->ListNode[A], acc) else acc end fun contains[B: (A & HasEq[A!] #read) = A](a: box->B): Bool => \"\"\" Returns true if the list contains the provided element, false otherwise. \"\"\" try _contains[B](head()?, a) else false end fun _contains[B: (A & HasEq[A!] #read) = A]( ln: this->ListNode[A], a: box->B) : Bool => \"\"\" Private helper for contains, recursively working with ListNodes. \"\"\" try if a == ln()? then true else _contains[B](ln.next() as this->ListNode[A], a) end else false end fun nodes(): ListNodes[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the nodes in the list. \"\"\" ListNodes[A, this->ListNode[A]](_head) fun rnodes(): ListNodes[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the nodes in the list. \"\"\" ListNodes[A, this->ListNode[A]](_head, true) fun values(): ListValues[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the values in the list. \"\"\" ListValues[A, this->ListNode[A]](_head) fun rvalues(): ListValues[A, this->ListNode[A]]^ => \"\"\" Return an iterator on the values in the list. \"\"\" ListValues[A, this->ListNode[A]](_head, true) fun ref _increment() => _size = _size + 1 fun ref _decrement() => _size = _size - 1 fun ref _set_head(head': (ListNode[A] | None)) => _head = head' fun ref _set_tail(tail': (ListNode[A] | None)) => _tail = tail' fun ref _set_both(node: ListNode[A]) => node._set_list(this) _head = node _tail = node _size = 1 class ListNodes[A, N: ListNode[A] #read] is Iterator[N] \"\"\" Iterate over the nodes in a list. \"\"\" var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) => \"\"\" Keep the next list node to be examined. \"\"\" _next = head _reverse = reverse fun has_next(): Bool => \"\"\" If we have a list node, we have more values. \"\"\" _next isnt None fun ref next(): N ? => \"\"\" Get the list node and replace it with the next one. \"\"\" match _next | let next': N => if _reverse then _next = next'.prev() else _next = next'.next() end next' else error end class ListValues[A, N: ListNode[A] #read] is Iterator[N->A] \"\"\" Iterate over the values in a list. \"\"\" var _next: (N | None) let _reverse: Bool new create(head: (N | None), reverse: Bool = false) => \"\"\" Keep the next list node to be examined. \"\"\" _next = head _reverse = reverse fun has_next(): Bool => \"\"\" If we have a list node, we have more values. \"\"\" _next isnt None fun ref next(): N->A ? => \"\"\" Get the value of the list node and replace it with the next one. \"\"\" match _next | let next': N => if _reverse then _next = next'.prev() else _next = next'.next() end next'()? else error end","title":"list.pony"},{"location":"src/collections/list_node/","text":"class ListNode[A] \"\"\" A node in a doubly linked list. (See Ponylang [collections.List](https://stdlib.ponylang.io/collections-List/) class for usage examples.) Each node contains four fields: two link fields (references to the previous and to the next node in the sequence of nodes), one data field, and the reference to the in which it resides. As you would expect functions are provided to create a ListNode, update a ListNode's contained item, and pop the item from the ListNode. Additional functions are provided to operate on a ListNode as part of a Linked List. These provide for prepending, appending, removal, and safe traversal in both directions. The Ponylang [collections.List](https://stdlib.ponylang.io/collections-List/) class is the correct way to create these. _Do not attempt to create a Linked List using only ListNodes._ ## Example program The functions which are illustrated below are only those which operate on an individual ListNode. It outputs: My node has the item value: My Node item My node has the updated item value: My updated Node item Popped the item from the ListNode The ListNode has no (None) item. ```pony use \"collections\" actor Main new create(env:Env) => // Create a new ListNode of type String let my_list_node = ListNode[String](\"My Node item\") try env.out.print(\"My node has the item value: \" + my_list_node.apply()?) // My Node item end // Update the item contained in the ListNode try my_list_node.update(\"My updated Node item\")? env.out.print(\"My node has the updated item value: \" + my_list_node.apply()?) // My updated Node item end // Pop the item from the ListNode try my_list_node.pop()? env.out.print(\"Popped the item from the ListNode\") my_list_node.apply()? // This will error as the item is now None else env.out.print(\"The ListNode has no (None) item.\") end ... \"\"\" var _item: (A | None) var _list: (List[A] | None) = None var _prev: (ListNode[A] | None) = None var _next: (ListNode[A] | None) = None new create(item: (A | None) = None) => \"\"\" Create a node. Initially, it is not in any list. \"\"\" _item = consume item fun apply(): this->A ? => \"\"\" Return the item, if we have one, otherwise raise an error. \"\"\" _item as this->A fun ref update(value: (A | None)): A^ ? => \"\"\" Replace the item and return the previous one. Raise an error if we have no previous value. \"\"\" (_item = consume value) as A^ fun ref pop(): A^ ? => \"\"\" Remove the item from the node, if we have one, otherwise raise an error. \"\"\" (_item = None) as A^ fun ref prepend(that: ListNode[A]): Bool => \"\"\" Prepend a node to this one. If `that` is already in a list, it is removed before it is prepended. Returns true if `that` was removed from another list. If the ListNode is not contained within a List the prepend will fail. \"\"\" if (_prev is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] => in_list = that._list isnt None that.remove() match _prev | let prev': ListNode[A] => prev'._next = that else list'._set_head(that) end that._list = list' that._prev = _prev that._next = this _prev = that list'._increment() end in_list fun ref append(that: ListNode[A]): Bool => \"\"\" Append a node to this one. If `that` is already in a list, it is removed before it is appended. Returns true if `that` was removed from another list. If the ListNode is not contained within a List the append will fail. \"\"\" if (_next is that) or (this is that) then return false end var in_list = false match _list | let list': List[A] => in_list = that._list isnt None that.remove() match _next | let next': ListNode[A] => next'._prev = that else list'._set_tail(that) end that._list = list' that._prev = this that._next = _next _next = that list'._increment() end in_list fun ref remove() => \"\"\" Remove a node from a list. The ListNode must be contained within a List for this to succeed. \"\"\" match _list | let list': List[A] => match (_prev, _next) | (let prev': ListNode[A], let next': ListNode[A]) => // We're in the middle of the list. prev'._next = _next next'._prev = _prev _prev = None _next = None | (let prev': ListNode[A], None) => // We're the tail. prev'._next = None list'._set_tail(prev') _prev = None | (None, let next': ListNode[A]) => // We're the head. next'._prev = None list'._set_head(next') _next = None | (None, None) => // We're the only member list'._set_head(None) list'._set_tail(None) end list'._decrement() _list = None end fun has_prev(): Bool => \"\"\" Return true if there is a previous node. \"\"\" _prev isnt None fun has_next(): Bool => \"\"\" Return true if there is a next node. \"\"\" _next isnt None fun prev(): (this->ListNode[A] | None) => \"\"\" Return the previous node. \"\"\" _prev fun next(): (this->ListNode[A] | None) => \"\"\" Return the next node. \"\"\" _next fun ref _set_list(list: List[A]): ListNode[A]^ => \"\"\" Make this node the only node on the given list. \"\"\" remove() _list = list this","title":"list_node.pony"},{"location":"src/collections/map/","text":"primitive _MapEmpty primitive _MapDeleted type Map[K: (Hashable #read & Equatable[K] #read), V] is HashMap[K, V, HashEq[K]] \"\"\" This is a map that uses structural equality on the key. \"\"\" type MapIs[K, V] is HashMap[K, V, HashIs[K]] \"\"\" This is a map that uses identity comparison on the key. \"\"\" class HashMap[K, V, H: HashFunction[K] val] \"\"\" A quadratic probing hash map. Resize occurs at a load factor of 0.75. A resized map has 2 times the space. The hash function can be plugged in to the type to create different kinds of maps. \"\"\" var _size: USize = 0 var _array: Array[((K, V) | _MapEmpty | _MapDeleted)] new create(prealloc: USize = 6) => \"\"\" Create an array with space for prealloc elements without triggering a resize. Defaults to 6. \"\"\" let len = (prealloc * 4) / 3 let n = len.max(8).next_pow2() _array = _array.init(_MapEmpty, n) fun size(): USize => \"\"\" The number of items in the map. \"\"\" _size fun space(): USize => \"\"\" The available space in the map. Resize will happen when size / space >= 0.75. \"\"\" _array.space() fun apply(key: box->K!): this->V ? => \"\"\" Gets a value from the map. Raises an error if no such item exists. \"\"\" (let i, let found) = _search(key) if found then _array(i)? as (_, this->V) else error end fun ref update(key: K, value: V): (V^ | None) => \"\"\" Sets a value in the map. Returns the old value if there was one, otherwise returns None. If there was no previous value, this may trigger a resize. \"\"\" try (let i, let found) = _search(key) match _array(i)? = (consume key, consume value) | (_, let v: V) => return consume v else _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end end fun ref upsert(key: K, value: V, f: {(V, V): V^} box): V => \"\"\" Combines a provided value with the current value for the provided key using the provided function. If the provided key has not been added to the map yet, it sets its value to the provided value and ignores the provided function. As a simple example, say we had a map with I64 values and we wanted to add 4 to the current value for key \"test\", which let's say is currently 2. We call m.upsert(\"test\", 4, {(current, provided) => current + provided }) This changes the value associated with \"test\" to 6. If we have not yet added the key \"new-key\" to the map and we call m.upsert(\"new-key\", 4, {(current, provided) => current + provided }) then \"new-key\" is added to the map with a value of 4. Returns the value that we set the key to \"\"\" (let i, let found) = _search(key) let value' = value try if found then (let pkey, let pvalue) = (_array(i)? = _MapEmpty) as (K^, V^) let new_value = f(consume pvalue, consume value) let new_value' = new_value _array(i)? = (consume pkey, consume new_value) return _array(i)? as (_, V) else let key' = key _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end value' else // This is unreachable, since index will never be out-of-bounds value' end fun ref insert(key: K, value: V): V! => \"\"\" Set a value in the map. Returns the new value, allowing reuse. \"\"\" let value' = value try (let i, let found) = _search(key) let key' = key _array(i)? = (consume key, consume value) if not found then _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end value' else // This is unreachable, since index will never be out-of-bounds. value' end fun ref insert_if_absent(key: K, value: V): V => \"\"\" Set a value in the map if the key doesn't already exist in the Map. Saves an extra lookup when doing a pattern like: ```pony if not my_map.contains(my_key) then my_map(my_key) = my_value end ``` Returns the value, the same as `insert`, allowing 'insert_if_absent' to be used as a drop-in replacement for `insert`. \"\"\" let value' = value try (let i, let found) = _search(key) let key' = key if not found then _array(i)? = (consume key, consume value) _size = _size + 1 if (_size * 4) > (_array.size() * 3) then _resize(_array.size() * 2) end end _array(i)? as (_, V) else // This is unreachable, since index will never be out-of-bounds. value' end fun ref remove(key: box->K!): (K^, V^) ? => \"\"\" Delete a value from the map and return it. Raises an error if there was no value for the given key. \"\"\" try (let i, let found) = _search(key) if found then _size = _size - 1 match _array(i)? = _MapDeleted | (let k: K, let v: V) => return (consume k, consume v) end end end error fun get_or_else(key: box->K!, alt: this->V): this->V => \"\"\" Get the value associated with provided key if present. Otherwise, return the provided alternate value. \"\"\" (let i, let found) = _search(key) if found then try _array(i)? as (_, this->V) else // This should never happen as we have already // proven that _array(i) exists consume alt end else consume alt end fun contains(k: box->K!): Bool => \"\"\" Checks whether the map contains the key k \"\"\" (_, let found) = _search(k) found fun ref concat(iter: Iterator[(K^, V^)]) => \"\"\" Add K, V pairs from the iterator to the map. \"\"\" for (k, v) in iter do this(consume k) = consume v end fun add[H2: HashFunction[this->K!] val = H]( key: this->K!, value: this->V!) : HashMap[this->K!, this->V!, H2]^ => \"\"\" This with the new (key, value) mapping. \"\"\" let r = clone[H2]() r(key) = value r fun sub[H2: HashFunction[this->K!] val = H](key: this->K!) : HashMap[this->K!, this->V!, H2]^ => \"\"\" This without the given key. \"\"\" let r = clone[H2]() try r.remove(key)? end r fun next_index(prev: USize = -1): USize ? => \"\"\" Given an index, return the next index that has a populated key and value. Raise an error if there is no next populated index. \"\"\" for i in Range(prev + 1, _array.size()) do match _array(i)? | (_, _) => return i end end error fun index(i: USize): (this->K, this->V) ? => \"\"\" Returns the key and value at a given index. Raise an error if the index is not populated. \"\"\" _array(i)? as (this->K, this->V) fun ref compact() => \"\"\" Minimise the memory used for the map. \"\"\" _resize(((_size * 4) / 3).next_pow2().max(8)) fun clone[H2: HashFunction[this->K!] val = H]() : HashMap[this->K!, this->V!, H2]^ => \"\"\" Create a clone. The key and value types may be different due to aliasing and viewpoint adaptation. \"\"\" let r = HashMap[this->K!, this->V!, H2](_size) for (k, v) in pairs() do r(k) = v end r fun ref clear() => \"\"\" Remove all entries. \"\"\" _size = 0 // Our default prealloc of 6 corresponds to an array alloc size of 8. let n: USize = 8 _array = _array.init(_MapEmpty, n) fun _search(key: box->K!): (USize, Bool) => \"\"\" Return a slot number and whether or not it's currently occupied. \"\"\" var idx_del = _array.size() let mask = idx_del - 1 let h = H.hash(key).usize() var idx = h and mask try for i in Range(0, _array.size()) do let entry = _array(idx)? match entry | (let k: this->K!, _) => if H.eq(k, key) then return (idx, true) end | _MapEmpty => if idx_del <= mask then return (idx_del, false) else return (idx, false) end | _MapDeleted => if idx_del > mask then idx_del = idx end end idx = (h + ((i + (i * i)) / 2)) and mask end end (idx_del, false) fun ref _resize(len: USize) => \"\"\" Change the available space. \"\"\" let old = _array let old_len = old.size() _array = _array.init(_MapEmpty, len) _size = 0 try for i in Range(0, old_len) do match old(i)? = _MapDeleted | (let k: K, let v: V) => this(consume k) = consume v end end end fun keys(): MapKeys[K, V, H, this->HashMap[K, V, H]]^ => \"\"\" Return an iterator over the keys. \"\"\" MapKeys[K, V, H, this->HashMap[K, V, H]](this) fun values(): MapValues[K, V, H, this->HashMap[K, V, H]]^ => \"\"\" Return an iterator over the values. \"\"\" MapValues[K, V, H, this->HashMap[K, V, H]](this) fun pairs(): MapPairs[K, V, H, this->HashMap[K, V, H]]^ => \"\"\" Return an iterator over the keys and values. \"\"\" MapPairs[K, V, H, this->HashMap[K, V, H]](this) class MapKeys[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->K] \"\"\" An iterator over the keys in a map. \"\"\" let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) => \"\"\" Creates an iterator for the given map. \"\"\" _map = map fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the map. \"\"\" _count < _map.size() fun ref next(): M->K ? => \"\"\" Returns the next key, or raises an error if there isn't one. If keys are added during iteration, this may not return all keys. \"\"\" _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._1 class MapValues[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[M->V] \"\"\" An iterator over the values in a map. \"\"\" let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) => \"\"\" Creates an iterator for the given map. \"\"\" _map = map fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the map. \"\"\" _count < _map.size() fun ref next(): M->V ? => \"\"\" Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. \"\"\" _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?._2 class MapPairs[K, V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is Iterator[(M->K, M->V)] \"\"\" An iterator over the keys and values in a map. \"\"\" let _map: M var _i: USize = -1 var _count: USize = 0 new create(map: M) => \"\"\" Creates an iterator for the given map. \"\"\" _map = map fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the map. \"\"\" _count < _map.size() fun ref next(): (M->K, M->V) ? => \"\"\" Returns the next entry, or raises an error if there isn't one. If entries are added during iteration, this may not return all entries. \"\"\" _i = _map.next_index(_i)? _count = _count + 1 _map.index(_i)?","title":"map.pony"},{"location":"src/collections/range/","text":"class Range[A: (Real[A] val & Number) = USize] is Iterator[A] \"\"\" Produces `[min, max)` with a step of `inc` for any `Number` type. ```pony // iterating with for-loop for i in Range(0, 10) do env.out.print(i.string()) end // iterating over Range of U8 with while-loop let range = Range[U8](5, 100, 5) while range.has_next() do handle_u8(range.next()) end ``` Supports `min` being smaller than `max` with negative `inc` but only for signed integer types and floats: ```pony var previous = 11 for left in Range[I64](10, -5, -1) do if not (left < previous) then error end previous = left end ``` If the `step` is not moving `min` towards `max` or if it is `0`, the Range is considered infinite and iterating over it will never terminate: ```pony let infinite_range1 = Range(0, 1, 0) infinite_range1.is_infinite() == true let infinite_range2 = Range[I8](0, 10, -1) for _ in infinite_range2 do env.out.print(\"will this ever end?\") env.err.print(\"no, never!\") end ``` When using `Range` with floating point types (`F32` and `F64`) `inc` steps < 1.0 are possible. If any of the arguments contains `NaN`, `+Inf` or `-Inf` the range is considered infinite as operations on any of them won't move `min` towards `max`. The actual values produced by such a `Range` are determined by what IEEE 754 defines as the result of `min` + `inc`: ```pony for and_a_half in Range[F64](0.5, 100) do handle_half(and_a_half) end // this Range will produce 0 at first, then infinitely NaN let nan: F64 = F64(0) / F64(0) for what_am_i in Range[F64](0, 1000, nan) do wild_guess(what_am_i) end ``` \"\"\" let _min: A let _max: A let _inc: A let _forward: Bool let _infinite: Bool var _idx: A new create(min: A, max: A, inc: A = 1) => _min = min _max = max _inc = inc _idx = min _forward = (_min < _max) and (_inc > 0) let is_float_infinite = iftype A <: FloatingPoint[A] then _min.nan() or _min.infinite() or _max.nan() or _max.infinite() or _inc.nan() or _inc.infinite() else false end _infinite = is_float_infinite or ((_inc == 0) and (min != max)) // no progress or ((_min < _max) and (_inc < 0)) // progress into other directions or ((_min > _max) and (_inc > 0)) fun has_next(): Bool => if _forward then _idx < _max else _idx > _max end fun ref next(): A => if has_next() then _idx = _idx + _inc else _idx end fun ref rewind() => _idx = _min fun is_infinite(): Bool => _infinite","title":"range.pony"},{"location":"src/collections/reverse/","text":"class Reverse[A: (Real[A] val & Number) = USize] is Iterator[A] \"\"\" Produces a decreasing range [max, min] with step `dec`, for any `Number` type. (i.e. the reverse of `Range`) Example program: ```pony use \"collections\" actor Main new create(env: Env) => for e in Reverse(10, 2, 2) do env.out.print(e.string()) end ``` Which outputs: ``` 10 8 6 4 2 ``` If `dec` is 0, produces an infinite series of `max`. If `dec` is negative, produces a range with `max` as the only value. \"\"\" let _min: A let _max: A let _dec: A var _idx: A new create(max: A, min: A, dec: A = 1) => _min = min _max = max _dec = dec _idx = max fun has_next(): Bool => (_idx >= _min) and (_idx <= _max) fun ref next(): A => if has_next() then _idx = _idx - _dec else _idx + _dec end fun ref rewind() => _idx = _max","title":"reverse.pony"},{"location":"src/collections/ring_buffer/","text":"class RingBuffer[A] \"\"\" A ring buffer. \"\"\" embed _array: Array[A] let _mod: USize var _write: USize = 0 new create(len: USize) => \"\"\" Create a ring buffer with a fixed size. The size will be rounded up to the next power of 2. \"\"\" let n = len.max(2).next_pow2() _mod = n - 1 _array = Array[A](n) fun head(): USize ? => \"\"\" The first read that will succeed. If nothing has been written to the ring, this will raise an error. \"\"\" if _write > 0 then if _write > space() then _write - space() else 0 end else error end fun size(): USize => \"\"\" The number of elements that have been added to the ring. \"\"\" _write fun space(): USize => \"\"\" The available space in the ring. \"\"\" _mod + 1 fun apply(i: USize): this->A ? => \"\"\" Get the i-th element from the ring. If the i-th element has not yet been added or is no longer available, this will raise an error. \"\"\" if (i >= _write) or ((_write - i) > space()) then error end _array(i and _mod)? fun ref push(value: A): Bool => \"\"\" Add an element to the ring. If the ring is full, this will drop the oldest element in the ring. Returns true if an element was dropped. \"\"\" var full = false if _write < space() then _array.push(consume value) else try _array(_write and _mod)? = consume value end full = true end _write = _write + 1 full fun ref clear() => \"\"\" Clear the queue. \"\"\" _array.clear() _write = 0","title":"ring_buffer.pony"},{"location":"src/collections/set/","text":"type Set[A: (Hashable #read & Equatable[A] #read)] is HashSet[A, HashEq[A]] type SetIs[A] is HashSet[A, HashIs[A!]] class HashSet[A, H: HashFunction[A!] val] is Comparable[HashSet[A, H] box] \"\"\" A set, built on top of a HashMap. This is implemented as map of an alias of a type to itself \"\"\" embed _map: HashMap[A!, A, H] new create(prealloc: USize = 8) => \"\"\" Defaults to a prealloc of 8. \"\"\" _map = _map.create(prealloc) fun size(): USize => \"\"\" The number of items in the set. \"\"\" _map.size() fun space(): USize => \"\"\" The available space in the set. \"\"\" _map.space() fun apply(value: box->A!): this->A ? => \"\"\" Return the value if its in the set, otherwise raise an error. \"\"\" _map(value)? fun contains(value: box->A!): Bool => \"\"\" Checks whether the set contains the value. \"\"\" _map.contains(value) fun ref clear() => \"\"\" Remove all elements from the set. \"\"\" _map.clear() fun ref set(value: A) => \"\"\" Add a value to the set. \"\"\" _map(value) = consume value fun ref unset(value: box->A!) => \"\"\" Remove a value from the set. \"\"\" try _map.remove(value)? end fun ref extract(value: box->A!): A^ ? => \"\"\" Remove a value from the set and return it. Raises an error if the value wasn't in the set. \"\"\" _map.remove(value)?._2 fun ref union(that: Iterator[A^]) => \"\"\" Add everything in that to the set. \"\"\" for value in that do set(consume value) end fun ref intersect[K: HashFunction[box->A!] val = H]( that: HashSet[box->A!, K]) => \"\"\" Remove everything that isn't in that. \"\"\" let start_size = _map.size() var seen: USize = 0 var i: USize = -1 while seen < start_size do try i = next_index(i)? if not that.contains(index(i)?) then unset(index(i)?) end end seen = seen + 1 end fun ref difference(that: Iterator[A^]) => \"\"\" Remove elements in this which are also in that. Add elements in that which are not in this. \"\"\" for value in that do try extract(value)? else set(consume value) end end fun ref remove(that: Iterator[box->A!]) => \"\"\" Remove everything that is in that. \"\"\" for value in that do unset(value) end fun add[K: HashFunction[this->A!] val = H]( value: this->A!) : HashSet[this->A!, K]^ => \"\"\" Add a value to the set. \"\"\" clone[K]() .> set(value) fun sub[K: HashFunction[this->A!] val = H]( value: box->this->A!) : HashSet[this->A!, K]^ => \"\"\" Remove a value from the set. \"\"\" clone[K]() .> unset(value) fun op_or[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements of both this and that. \"\"\" let r = clone[K]() for value in that.values() do r.set(value) end r fun op_and[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements that are in both this and that. \"\"\" let r = HashSet[this->A!, K](size().min(that.size())) for value in values() do try that(value)? r.set(value) end end r fun op_xor[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements that are in either set but not both. \"\"\" let r = HashSet[this->A!, K](size().max(that.size())) for value in values() do try that(value)? else r.set(value) end end for value in that.values() do try this(value)? else r.set(value) end end r fun without[K: HashFunction[this->A!] val = H]( that: this->HashSet[A, H]) : HashSet[this->A!, K]^ => \"\"\" Create a set with the elements of this that are not in that. \"\"\" let r = HashSet[this->A!, K](size()) for value in values() do try that(value)? else r.set(value) end end r fun clone[K: HashFunction[this->A!] val = H](): HashSet[this->A!, K]^ => \"\"\" Create a clone. The element type may be different due to aliasing and viewpoint adaptation. \"\"\" let r = HashSet[this->A!, K](size()) for value in values() do r.set(value) end r fun eq(that: HashSet[A, H] box): Bool => \"\"\" Returns true if the sets contain the same elements. \"\"\" (size() == that.size()) and (this <= that) fun ne(that: HashSet[A, H] box): Bool => \"\"\" Returns false if the sets contain the same elements. \"\"\" not (this == that) fun lt(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in this is also in that, and this has fewer elements than that. \"\"\" (size() < that.size()) and (this <= that) fun le(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in this is also in that. \"\"\" try for value in values() do that(value)? end true else false end fun gt(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in that is also in this, and this has more elements than that. \"\"\" (size() > that.size()) and (that <= this) fun ge(that: HashSet[A, H] box): Bool => \"\"\" Returns true if every element in that is also in this. \"\"\" that <= this fun next_index(prev: USize = -1): USize ? => \"\"\" Given an index, return the next index that has a populated value. Raise an error if there is no next populated index. \"\"\" _map.next_index(prev)? fun index(i: USize): this->A ? => \"\"\" Returns the value at a given index. Raise an error if the index is not populated. \"\"\" _map.index(i)?._2 fun values(): SetValues[A, H, this->HashSet[A, H]]^ => \"\"\" Return an iterator over the values. \"\"\" SetValues[A, H, this->HashSet[A, H]](this) class SetValues[A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is Iterator[S->A] \"\"\" An iterator over the values in a set. \"\"\" let _set: S var _i: USize = -1 var _count: USize = 0 new create(set: S) => \"\"\" Creates an iterator for the given set. \"\"\" _set = set fun has_next(): Bool => \"\"\" True if it believes there are remaining entries. May not be right if values were added or removed from the set. \"\"\" _count < _set.size() fun ref next(): S->A ? => \"\"\" Returns the next value, or raises an error if there isn't one. If values are added during iteration, this may not return all values. \"\"\" _i = _set.next_index(_i)? _count = _count + 1 _set.index(_i)?","title":"set.pony"},{"location":"src/collections/sort/","text":"primitive Sort[A: Seq[B] ref, B: Comparable[B] #read] \"\"\" Implementation of dual-pivot quicksort. It operates in-place on the provided Seq, using a small amount of additional memory. The nature of the element-realation is expressed via the supplied comparator. (The following is paraphrased from [Wikipedia](https://en.wikipedia.org/wiki/Quicksort).) Quicksort is a common implementation of a sort algorithm which can sort items of any type for which a \"less-than\" relation (formally, a total order) is defined. On average, the algorithm takes O(n log n) comparisons to sort n items. In the worst case, it makes O(n2) comparisons, though this behavior is rare. Multi-pivot implementations (of which dual-pivot is one) make efficient use of modern processor caches. ## Example program The following takes an reverse-alphabetical array of Strings (\"third\", \"second\", \"first\"), and sorts it in place alphabetically using the default String Comparator. It outputs: first second third ```pony use \"collections\" actor Main new create(env:Env) => let array = [ \"third\"; \"second\"; \"first\" ] let sorted_array = Sort[Array[String], String](array) for e in sorted_array.values() do env.out.print(e) // prints \"first \\n second \\n third\" end ``` \"\"\" fun apply(a: A): A^ => \"\"\" Sort the given seq. \"\"\" try _sort(a, 0, a.size().isize() - 1)? end a fun _sort(a: A, lo: ISize, hi: ISize) ? => if hi <= lo then return end // choose outermost elements as pivots if a(lo.usize())? > a(hi.usize())? then _swap(a, lo, hi)? end (var p, var q) = (a(lo.usize())?, a(hi.usize())?) // partition according to invariant (var l, var g) = (lo + 1, hi - 1) var k = l while k <= g do if a(k.usize())? < p then _swap(a, k, l)? l = l + 1 elseif a(k.usize())? >= q then while (a(g.usize())? > q) and (k < g) do g = g - 1 end _swap(a, k, g)? g = g - 1 if a(k.usize())? < p then _swap(a, k, l)? l = l + 1 end end k = k + 1 end (l, g) = (l - 1, g + 1) // swap pivots to final positions _swap(a, lo, l)? _swap(a, hi, g)? // recursively sort 3 partitions _sort(a, lo, l - 1)? _sort(a, l + 1, g - 1)? _sort(a, g + 1, hi)? fun _swap(a: A, i: ISize, j: ISize) ? => a(j.usize())? = a(i.usize())? = a(j.usize())?","title":"sort.pony"},{"location":"src/collections-persistent/_bits/","text":"primitive _Bits fun collision_depth(): U32 => 6 fun set_bit(bm: U32, i: U32): U32 => bm or (U32(1) <<~ i) fun clear_bit(bm: U32, i: U32): U32 => bm and (not (U32(1) <<~ i)) fun check_bit(bm: U32, i: U32): Bool => (bm and (U32(1) <<~ i)) != 0 fun mask32(n: U32, d: U32): U32 => (n >> (d *~ 5)) and 0b11111 fun mask(n: USize, d: USize): USize => (n >> (d *~ 5)) and 0b11111 fun next_pow32(n: USize): USize => USize(32) << (n *~ 5)","title":"_bits.pony"},{"location":"src/collections-persistent/_map_node/","text":"use mut = \"collections\" class val _MapEntry[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] let key: K let value: V new val create(k: K, v: V) => key = k value = v fun apply(k: K): (V | None) => if H.eq(k, key) then value end class val _MapCollisions[ K: Any #share, V: Any #share, H: mut.HashFunction[K] val] embed bins: Array[Array[_MapEntry[K, V, H]] trn] trn new trn create() => bins = recover Array[Array[_MapEntry[K, V, H]] trn](4) end bins .> push([]) .> push([]) .> push([]) .> push([]) fun val clone(): _MapCollisions[K, V, H] trn^ => let cs = recover trn _MapCollisions[K, V, H] end try for i in bins.keys() do for e in bins(i)?.values() do cs.bins(i)?.push(e) end end end consume cs fun apply(hash: U32, k: K): (V | None) ? => let idx = _Bits.mask32(hash, _Bits.collision_depth()) let bin = bins(idx.usize_unsafe())? for node in bin.values() do if H.eq(k, node.key) then return node.value end end fun val remove(hash: U32, k: K): _MapCollisions[K, V, H] ? => let idx = _Bits.mask32(hash, _Bits.collision_depth()) let bin = bins(idx.usize_unsafe())? for (i, node) in bin.pairs() do if H.eq(k, node.key) then let bin' = recover bin.clone() end bin'.delete(i)? let n = clone() n.bins(idx.usize_unsafe())? = consume bin' return consume n end end error fun val pull_last(): _MapEntry[K, V, H] ? => for bin in bins.values() do if bin.size() > 0 then return bin(0)? end end error fun ref update_mut(hash: U32, entry: _MapEntry[K, V, H]): Bool ? => let idx = _Bits.mask32(hash, _Bits.collision_depth()) for i in mut.Range(0, bins(idx.usize_unsafe())?.size()) do let e = bins(idx.usize_unsafe())?(i)? if H.eq(entry.key, e.key) then bins(idx.usize_unsafe())?(i)? = entry return false end end bins(idx.usize_unsafe())?.push(entry) true fun val iter(): _MapIter[K, V, H] => let stack = Array[Iterator[_MapEntry[K, V, H]]] for bin in bins.values() do if bin.size() > 0 then stack.push(bin.values()) end end object ref fun ref has_next(): Bool => stack.size() > 0 fun ref next(): _MapEntry[K, V, H] ? => let iter = stack(0)? let e = iter.next()? if not iter.has_next() then stack.shift()? end e end type _MapNode[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] is ( _MapEntry[K, V, H] | _MapCollisions[K, V, H] | _MapSubNodes[K, V, H] ) class val _MapSubNodes[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] embed nodes: Array[_MapNode[K, V, H]] trn var node_map: U32 var data_map: U32 new trn create(size: USize = 0, nm: U32 = 0, dm: U32 = 0) => nodes = recover Array[_MapNode[K, V, H]](size) end node_map = nm data_map = dm fun val clone(): _MapSubNodes[K, V, H] trn^ => let ns = _MapSubNodes[K, V, H](nodes.size(), node_map, data_map) for node in nodes.values() do ns.nodes.push(node) end ns fun compressed_idx(idx: U32): U32 => if not _Bits.check_bit(node_map or data_map, idx) then return -1 end let msk = not (U32(-1) << idx) if _Bits.check_bit(data_map, idx) then return (data_map and msk).popcount() end data_map.popcount() + (node_map and msk).popcount() fun apply(depth: U32, hash: U32, k: K): (V | None) ? => let idx = _Bits.mask32(hash, depth) let c_idx = compressed_idx(idx) if c_idx == -1 then return None end match nodes(c_idx.usize_unsafe())? | let entry: _MapEntry[K, V, H] box => entry(k) | let sns: _MapSubNodes[K, V, H] box => sns(depth + 1, hash, k)? | let cs: _MapCollisions[K, V, H] box => cs(hash, k)? end fun val update(depth: U32, hash: U32, k: K, v: V) : (_MapSubNodes[K, V, H], Bool) ? => let node = clone() let r = node.update_mut(depth, hash, k, v)? (consume node, r) fun ref update_mut(depth: U32, hash: U32, k: K, v: V): Bool ? => let idx = _Bits.mask32(hash, depth) var c_idx = compressed_idx(idx) if c_idx == -1 then data_map = _Bits.set_bit(data_map, idx) c_idx = compressed_idx(idx) nodes.insert(c_idx.usize_unsafe(), _MapEntry[K, V, H](k, v))? return true end if _Bits.check_bit(node_map, idx) then var insert = false let c_idx_u = c_idx.usize_unsafe() if depth < (_Bits.collision_depth() - 1) then let sn = (nodes(c_idx_u)? as _MapSubNodes[K, V, H]).clone() insert = sn.update_mut(depth + 1, hash, k, v)? nodes(c_idx_u)? = consume sn else let cs = (nodes(c_idx_u)? as _MapCollisions[K, V, H]).clone() insert = cs.update_mut(hash, _MapEntry[K, V, H](k, v))? nodes(c_idx_u)? = consume cs end return insert end // if not _Bits.check_bit(data_map, idx) then error end let entry0 = nodes(c_idx.usize_unsafe())? as _MapEntry[K, V, H] if H.eq(k, entry0.key) then nodes(c_idx.usize_unsafe())? = _MapEntry[K, V, H](k, v) return false end let sub_node: _MapNode[K, V, H] val = if depth < (_Bits.collision_depth() - 1) then let hash0 = H.hash(entry0.key).u32() let idx0 = _Bits.mask32(hash0, depth + 1) let sn = _MapSubNodes[K, V, H](1, 0, _Bits.set_bit(0, idx0)) sn.nodes.push(entry0) sn.update_mut(depth + 1, hash, k, v)? consume sn else let hash0 = H.hash(entry0.key).u32() let idx0 = _Bits.mask32(hash0, _Bits.collision_depth()) let idx1 = _Bits.mask32(hash, _Bits.collision_depth()) let sn = _MapCollisions[K, V, H] sn.bins(idx0.usize_unsafe())?.push(entry0) sn.bins(idx1.usize_unsafe())?.push(_MapEntry[K, V, H](k, v)) consume sn end nodes.delete(c_idx.usize_unsafe())? data_map = _Bits.clear_bit(data_map, idx) node_map = _Bits.set_bit(node_map, idx) c_idx = compressed_idx(idx) nodes.insert(c_idx.usize_unsafe(), sub_node)? true fun val remove(depth: U32, hash: U32, k: K): _MapSubNodes[K, V, H] ? => let idx = _Bits.mask32(hash, depth) var c_idx = compressed_idx(idx) if c_idx == -1 then error end let ns = clone() if _Bits.check_bit(data_map, idx) then ns.data_map = _Bits.clear_bit(data_map, idx) ns.nodes.delete(c_idx.usize_unsafe())? else match nodes(c_idx.usize_unsafe())? | let entry: _MapEntry[K, V, H] val => error | let sns: _MapSubNodes[K, V, H] val => let sn = sns.remove(depth + 1, hash, k)? if (sn.nodes.size() == 1) and (sn.data_map != 0) then // compact ns.node_map = _Bits.clear_bit(ns.node_map, idx) ns.data_map = _Bits.set_bit(ns.data_map, idx) ns.nodes.delete(c_idx.usize_unsafe())? c_idx = ns.compressed_idx(idx) ns.nodes.insert(c_idx.usize_unsafe(), sn.nodes(0)?)? else ns.nodes(c_idx.usize_unsafe())? = sn end | let cs: _MapCollisions[K, V, H] val => let sn = cs.remove(hash, k)? var n: USize = 0 for bin in sn.bins.values() do n = n + bin.size() end if n == 1 then // compact ns.node_map = _Bits.clear_bit(ns.node_map, idx) ns.data_map = _Bits.set_bit(ns.data_map, idx) ns.nodes.delete(c_idx.usize_unsafe())? c_idx = ns.compressed_idx(idx) ns.nodes.insert(c_idx.usize_unsafe(), sn.pull_last()?)? else ns.nodes(c_idx.usize_unsafe())? = cs.remove(hash, k)? end end end ns fun val iter(): _MapIter[K, V, H] => object ref let node: _MapSubNodes[K, V, H] = this var _idx: USize = 0 fun ref has_next(): Bool => _idx < node.nodes.size() fun ref next(): (_MapEntry[K, V, H] | _MapIter[K, V, H]) ? => match node.nodes(_idx = _idx + 1)? | let e: _MapEntry[K, V, H] => e | let ns: _MapSubNodes[K, V, H] => ns.iter() | let cs: _MapCollisions[K, V, H] => cs.iter() end end","title":"_map_node.pony"},{"location":"src/collections-persistent/_test/","text":"use \"ponytest\" use mut = \"collections\" use \"random\" use \"time\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => run_tests(test) fun tag run_tests(test: PonyTest) => test(_TestListPrepend) test(_TestListFrom) test(_TestListApply) test(_TestListValues) test(_TestListConcat) test(_TestListMap) test(_TestListFlatMap) test(_TestListFilter) test(_TestListFold) test(_TestListEveryExists) test(_TestListPartition) test(_TestListDrop) test(_TestListDropWhile) test(_TestListTake) test(_TestListTakeWhile) test(_TestMap) test(_TestMapVsMap) test(_TestSet) test(_TestVec) test(_TestVecIterators) class iso _TestListPrepend is UnitTest fun name(): String => \"collections/persistent/List (prepend)\" fun apply(h: TestHelper) ? => let a = Lists[U32].empty() let b = Lists[U32].cons(1, Lists[U32].empty()) let c = Lists[U32].cons(2, b) let d = c.prepend(3) let e = a.prepend(10) h.assert_eq[USize](a.size(), 0) h.assert_eq[USize](b.size(), 1) h.assert_eq[USize](c.size(), 2) h.assert_eq[USize](d.size(), 3) h.assert_eq[USize](e.size(), 1) h.assert_eq[U32](b.head()?, 1) h.assert_eq[USize](b.tail()?.size(), 0) h.assert_eq[U32](c.head()?, 2) h.assert_eq[USize](c.tail()?.size(), 1) h.assert_eq[U32](d.head(), 3) h.assert_eq[USize](d.tail().size(), 2) h.assert_eq[U32](e.head(), 10) h.assert_eq[USize](e.tail().size(), 0) class iso _TestListFrom is UnitTest fun name(): String => \"collections/persistent/Lists (from)\" fun apply(h: TestHelper) ? => let l1 = Lists[U32].from([1; 2; 3].values()) h.assert_eq[USize](l1.size(), 3) h.assert_eq[U32](l1.head()?, 1) class iso _TestListApply is UnitTest fun name(): String => \"collections/persistent/List (apply)\" fun apply(h: TestHelper) ? => let l1 = Lists[U32]([1; 2; 3]) h.assert_eq[U32](l1(0)?, 1) h.assert_eq[U32](l1(1)?, 2) h.assert_eq[U32](l1(2)?, 3) h.assert_error({() ? => l1(3)? }) h.assert_error({() ? => l1(4)? }) let l2 = Lists[U32].empty() h.assert_error({() ? => l2(0)? }) class iso _TestListValues is UnitTest fun name(): String => \"collections/persistent/List (values)\" fun apply(h: TestHelper) ? => let iter = Lists[U32]([1; 2; 3]).values() h.assert_true(iter.has_next()) h.assert_eq[U32](iter.next()?, 1) h.assert_true(iter.has_next()) h.assert_eq[U32](iter.next()?, 2) h.assert_true(iter.has_next()) h.assert_eq[U32](iter.next()?, 3) h.assert_false(iter.has_next()) h.assert_false(try iter.next()?; true else false end) h.assert_false(iter.has_next()) h.assert_false(try iter.next()?; true else false end) class iso _TestListConcat is UnitTest fun name(): String => \"collections/persistent/List (concat)\" fun apply(h: TestHelper) ? => let l1 = Lists[U32]([1; 2; 3]) let l2 = Lists[U32]([4; 5; 6]) let l3 = l1.concat(l2) let l4 = l3.reverse() h.assert_eq[USize](l3.size(), 6) h.assert_true(Lists[U32].eq(l3, Lists[U32]([1; 2; 3; 4; 5; 6]))?) h.assert_true(Lists[U32].eq(l4, Lists[U32]([6; 5; 4; 3; 2; 1]))?) let l5 = Lists[U32].empty() let l6 = l5.reverse() let l7 = l6.concat(l1) h.assert_eq[USize](l6.size(), 0) h.assert_true(Lists[U32].eq(l7, Lists[U32]([1; 2; 3]))?) let l8 = Lists[U32]([1]) let l9 = l8.reverse() h.assert_true(Lists[U32].eq(l9, Lists[U32]([1]))?) class iso _TestListMap is UnitTest fun name(): String => \"collections/persistent/Lists (map)\" fun apply(h: TestHelper) ? => let l5 = Lists[U32]([1; 2; 3]).map[U32]({(x) => x * 2 }) h.assert_true(Lists[U32].eq(l5, Lists[U32]([2; 4; 6]))?) class iso _TestListFlatMap is UnitTest fun name(): String => \"collections/persistent/Lists (flat_map)\" fun apply(h: TestHelper) ? => let f = {(x: U32): List[U32] => Lists[U32]([x - 1; x; x + 1]) } let l6 = Lists[U32]([2; 5; 8]).flat_map[U32](f) h.assert_true(Lists[U32].eq(l6, Lists[U32]([1; 2; 3; 4; 5; 6; 7; 8; 9]))?) class iso _TestListFilter is UnitTest fun name(): String => \"collections/persistent/Lists (filter)\" fun apply(h: TestHelper) ? => let is_even = {(x: U32): Bool => (x % 2) == 0 } let l7 = Lists[U32]([1; 2; 3; 4; 5; 6; 7; 8]).filter(is_even) h.assert_true(Lists[U32].eq(l7, Lists[U32]([2; 4; 6; 8]))?) class iso _TestListFold is UnitTest fun name(): String => \"collections/persistent/Lists (fold)\" fun apply(h: TestHelper) ? => let add = {(acc: U32, x: U32): U32 => acc + x } let value = Lists[U32]([1; 2; 3]).fold[U32](add, 0) h.assert_eq[U32](value, 6) let doubleAndPrepend = {(acc: List[U32], x: U32): List[U32] => acc.prepend(x * 2) } let l8 = Lists[U32]([1; 2; 3]).fold[List[U32]]( doubleAndPrepend, Lists[U32].empty()) h.assert_true(Lists[U32].eq(l8, Lists[U32]([6; 4; 2]))?) class iso _TestListEveryExists is UnitTest fun name(): String => \"collections/persistent/Lists (every, exists)\" fun apply(h: TestHelper) => let is_even = {(x: U32): Bool => (x % 2) == 0 } let l9 = Lists[U32]([4; 2; 10]) let l10 = Lists[U32]([1; 1; 3]) let l11 = Lists[U32]([1; 1; 2]) let l12 = Lists[U32]([2; 2; 3]) let l13 = Lists[U32].empty() h.assert_eq[Bool](l9.every(is_even), true) h.assert_eq[Bool](l10.every(is_even), false) h.assert_eq[Bool](l11.every(is_even), false) h.assert_eq[Bool](l12.every(is_even), false) h.assert_eq[Bool](l13.every(is_even), true) h.assert_eq[Bool](l9.exists(is_even), true) h.assert_eq[Bool](l10.exists(is_even), false) h.assert_eq[Bool](l11.exists(is_even), true) h.assert_eq[Bool](l12.exists(is_even), true) h.assert_eq[Bool](l13.exists(is_even), false) class iso _TestListPartition is UnitTest fun name(): String => \"collections/persistent/Lists (partition)\" fun apply(h: TestHelper) ? => let is_even = {(x: U32): Bool => (x % 2) == 0 } let l = Lists[U32]([1; 2; 3; 4; 5; 6]) (let hits, let misses) = l.partition(is_even) h.assert_true(Lists[U32].eq(hits, Lists[U32]([2; 4; 6]))?) h.assert_true(Lists[U32].eq(misses, Lists[U32]([1; 3; 5]))?) class iso _TestListDrop is UnitTest fun name(): String => \"collections/persistent/List (drop)\" fun apply(h: TestHelper) ? => let l = Lists[String]([\"a\"; \"b\"; \"c\"; \"d\"; \"e\"]) let l2 = Lists[U32]([1; 2]) let empty = Lists[String].empty() h.assert_true(Lists[String].eq(l.drop(3), Lists[String]([\"d\"; \"e\"]))?) h.assert_true(Lists[U32].eq(l2.drop(3), Lists[U32].empty())?) h.assert_true(Lists[String].eq(empty.drop(3), Lists[String].empty())?) class iso _TestListDropWhile is UnitTest fun name(): String => \"collections/persistent/List (drop_while)\" fun apply(h: TestHelper) ? => let is_even = {(x: U32): Bool => (x % 2) == 0 } let l = Lists[U32]([4; 2; 6; 1; 3; 4; 6]) let empty = Lists[U32].empty() h.assert_true(Lists[U32].eq(l.drop_while(is_even), Lists[U32]([1; 3; 4; 6]))?) h.assert_true(Lists[U32].eq(empty.drop_while(is_even), Lists[U32].empty())?) class iso _TestListTake is UnitTest fun name(): String => \"collections/persistent/List (take)\" fun apply(h: TestHelper) ? => let l = Lists[String]([\"a\"; \"b\"; \"c\"; \"d\"; \"e\"]) let l2 = Lists[U32]([1; 2]) let empty = Lists[String].empty() h.assert_true(Lists[String].eq(l.take(3), Lists[String]([\"a\"; \"b\"; \"c\"]))?) h.assert_true(Lists[U32].eq(l2.take(3), Lists[U32]([1; 2]))?) h.assert_true(Lists[String].eq(empty.take(3), Lists[String].empty())?) class iso _TestListTakeWhile is UnitTest fun name(): String => \"collections/persistent/List (take_while)\" fun apply(h: TestHelper) ? => let is_even = {(x: U32): Bool => (x % 2) == 0 } let l = Lists[U32]([4; 2; 6; 1; 3; 4; 6]) let empty = Lists[U32].empty() h.assert_true(Lists[U32].eq(l.take_while(is_even), Lists[U32]([4; 2; 6]))?) h.assert_true(Lists[U32].eq(empty.take_while(is_even), Lists[U32].empty())?) class iso _TestMap is UnitTest fun name(): String => \"collections/persistent/Map (update, remove, concat, add, sub)\" fun apply(h: TestHelper) ? => let m1 = Map[String,U32] h.assert_error({() ? => m1(\"a\")? }) let s1 = m1.size() h.assert_eq[USize](s1, 0) let m2 = m1(\"a\") = 5 let m3 = m2(\"b\") = 10 let m4 = m3(\"a\") = 4 let m5 = m4(\"c\") = 0 h.assert_eq[U32](m2(\"a\")?, 5) h.assert_eq[U32](m3(\"b\")?, 10) h.assert_eq[U32](m4(\"a\")?, 4) h.assert_eq[U32](m5(\"c\")?, 0) let vs = [as (String, U32): (\"a\", 2); (\"b\", 3); (\"d\", 4); (\"e\", 5)] let m6 = Map[String,U32].concat(vs.values()) let m7 = m6(\"a\") = 10 h.assert_eq[U32](m6(\"a\")?, 2) h.assert_eq[U32](m6(\"b\")?, 3) h.assert_eq[U32](m6(\"d\")?, 4) h.assert_eq[U32](m6(\"e\")?, 5) h.assert_eq[U32](m7(\"a\")?, 10) h.assert_eq[U32](m7(\"b\")?, 3) h.assert_eq[U32](m7(\"a\")?, 10) let m8 = m7.remove(\"a\")? h.assert_error({() ? => m8(\"a\")? }) h.assert_eq[U32](m8(\"b\")?, 3) h.assert_eq[U32](m8(\"d\")?, 4) h.assert_eq[U32](m8(\"e\")?, 5) let m9 = m7.remove(\"e\")? h.assert_error({() ? => m9(\"e\")? }) h.assert_eq[U32](m9(\"b\")?, 3) h.assert_eq[U32](m9(\"d\")?, 4) let m10 = m9.remove(\"b\")?.remove(\"d\")? h.assert_error({() ? => m10(\"b\")? }) h.assert_error({() ? => m10(\"d\")? }) let m11 = m10 + (\"b\", 3) h.assert_eq[U32](m11(\"b\")?, 3) let m12 = m11 - \"b\" h.assert_error({() ? => m12(\"b\")? }) let seed = Time.millis() h.log(\"seed: \" + seed.string()) let rand = Rand(seed) var map = Map[USize, None] for n in mut.Range(0, 100) do try map(USize.max_value())? else h.fail() return end map = map.update(rand.int[USize](USize.max_value() - 1), None) end gen_test(h, rand)? fun gen_test(h: TestHelper, rand: Rand) ? => var a = _Map let b = mut.Map[U64, U64] let ops = gen_ops(300, rand)? for op in ops.values() do h.log(op.str()) let prev = a a = op(a, b)? var n: USize = 0 for (k, v) in a.pairs() do n = n + 1 h.assert_eq[U64](b(k)?, v) end h.assert_eq[USize](n, a.size()) end fun gen_ops(n: USize, rand: Rand): Array[_TestOp] ? => let ops = Array[_TestOp](n) let keys = Array[U64](n) for v in mut.Range[U64](0, n.u64()) do let op_n = if keys.size() == 0 then 0 else rand.int[U64](4) end ops.push( match op_n | 0 | 1 => // insert let k = rand.u64() keys.push(k) _OpMapUpdate(k, v) | 2 => // update let k = keys(rand.int[USize](keys.size()))? _OpMapUpdate(k, v) | 3 => // remove let k = keys.delete(rand.int[USize](keys.size()))? _OpMapRemove(k) else error end) end ops type _Map is HashMap[U64, U64, CollisionHash] primitive CollisionHash is mut.HashFunction[U64] fun hash(x: U64): USize => x.usize() % 100 fun eq(x: U64, y: U64): Bool => x == y interface val _TestOp fun apply(a: _Map, b: mut.Map[U64, U64]): _Map ? fun str(): String class val _OpMapUpdate let k: U64 let v: U64 new val create(k': U64, v': U64) => k = k' v = v' fun apply(a: _Map, b: mut.Map[U64, U64]): _Map => b.update(k, v) a(k) = v fun str(): String => \"\".join([\"Update(\"; k; \"_\"; CollisionHash.hash(k); \", \"; v; \")\"].values()) class val _OpMapRemove let k: U64 new val create(k': U64) => k = k' fun apply(a: _Map, b: mut.Map[U64, U64]): _Map ? => b.remove(k)? a.remove(k)? fun str(): String => \"\".join([\"Remove(\"; k; \")\"].values()) class iso _TestMapVsMap is UnitTest fun name(): String => \"collections/persistent/Map (persistent vs mutable)\" fun apply(h: TestHelper) ? => let keys: USize = 300 var p_map = Map[String, U64] let m_map = mut.Map[String, U64](keys) let r = MT var count: USize = 0 while count < keys do let k: String = count.string() let v = r.next() p_map = p_map(k) = v m_map(k) = v count = count + 1 h.assert_eq[USize](m_map.size(), p_map.size()) end h.assert_eq[USize](m_map.size(), keys) h.assert_eq[USize](p_map.size(), keys) for (k, v) in m_map.pairs() do h.assert_eq[U64](p_map(k)?, v) end var c: USize = 0 for (k, v) in p_map.pairs() do c = c + 1 m_map.remove(k)? end h.assert_eq[USize](p_map.size(), c) h.assert_eq[USize](m_map.size(), 0) class iso _TestSet is UnitTest fun name(): String => \"collections/persistent/Set\" fun apply(h: TestHelper) => let a = Set[USize] + 1 + 2 + 3 let b = Set[USize] + 2 + 3 + 4 h.assert_false(a == b) h.assert_true(a != b) h.assert_false(a.contains(4)) h.assert_true((a + 4).contains(4)) h.assert_true(a.contains(3)) h.assert_false((a - 3).contains(3)) h.assert_true((a or b) == (Set[USize] + 1 + 2 + 3 + 4)) h.assert_true((b or a) == (Set[USize] + 1 + 2 + 3 + 4)) h.assert_true((a and b) == (Set[USize] + 2 + 3)) h.assert_true((b and a) == (Set[USize] + 2 + 3)) h.assert_true((a xor b) == (Set[USize] + 1 + 4)) h.assert_true((b xor a) == (Set[USize] + 1 + 4)) h.assert_true(a.without(b) == (Set[USize] + 1)) h.assert_true(b.without(a) == (Set[USize] + 4)) class iso _TestVec is UnitTest fun name(): String => \"collections/persistent/Vec\" fun apply(h: TestHelper) ? => var v = Vec[USize] let n: USize = 33_000 // resize up to 4 levels in depth // push for i in mut.Range(0, n) do v = v.push(i) h.assert_eq[USize](v(i)?, i) end // update for i in mut.Range(0, n) do v = v.update(i, -i)? h.assert_eq[USize](v(i)?, -i) end var idx: USize = 0 for num in v.values() do h.assert_eq[USize](num, -idx) idx = idx + 1 end h.assert_eq[USize](v.size(), idx) // pop for i in mut.Range(0, n) do v = v.pop()? h.assert_error({() ? => v(n - i)? }) h.assert_eq[USize](v.size(), n - i - 1) end // concat v = Vec[USize].concat(mut.Range(0, n)) for i in mut.Range(0, n) do h.assert_eq[USize](v(i)?, i) end // insert let insert_idx: USize = 14 v = v.insert(insert_idx, 9999)? h.assert_eq[USize](v(insert_idx - 1)?, insert_idx - 1) h.assert_eq[USize](v(insert_idx)?, 9999) h.assert_eq[USize](v(insert_idx + 1)?, insert_idx) h.assert_eq[USize](v.size(), n + 1) h.assert_error({() ? => v.insert(v.size(), 0)? }) h.assert_error({() ? => v.insert(-1, 0)? }) // delete v = v.delete(insert_idx)? h.assert_eq[USize](v(insert_idx - 1)?, insert_idx - 1) h.assert_eq[USize](v(insert_idx)?, insert_idx) h.assert_eq[USize](v.size(), n) h.assert_error({() ? => v.delete(v.size())? }) h.assert_error({() ? => v.delete(-1)? }) // remove v = v.remove(0, 1)? h.assert_eq[USize](v(0)?, 1) h.assert_eq[USize](v(1)?, 2) h.assert_eq[USize](v.size(), n - 1) v = v.remove(10, 10)? h.assert_eq[USize](v(9)?, 10) h.assert_eq[USize](v(10)?, 21) h.assert_eq[USize](v(n - 12)?, n - 1) h.assert_eq[USize](v.size(), n - 11) class iso _TestVecIterators is UnitTest fun name(): String => \"collections/persistent/Vec (iterators)\" fun apply(h: TestHelper) ? => let n: USize = 33_000 // resize up to 4 levels in depth var vec = Vec[USize] for i in mut.Range(0, n) do vec = vec.push(i) end var c = vec.size() for (i, v) in vec.pairs() do c = c - 1 h.assert_eq[USize](v, vec(i)?) end h.assert_eq[USize](c, 0)","title":"_test.pony"},{"location":"src/collections-persistent/_vec_node/","text":"type _VecSubNodes[A: Any #share] is Array[_VecNode[A]] class val _VecNode[A: Any #share] let _entries: (Array[A] val | _VecSubNodes[A] val) new val empty(depth: USize) => _entries = recover if depth == 0 then Array[A] else _VecSubNodes[A] end end new val create(entries': (Array[A] val | _VecSubNodes[A] val)) => _entries = entries' fun val grow_root(): _VecNode[A] => create(recover Array[_VecNode[A]](1) .> push(this) end) fun apply(depth: USize, i: USize): A ? => let idx = _Bits.mask(i, depth) match _entries | let ls: Array[A] box => ls(idx)? | let ns: _VecSubNodes[A] box => ns(idx)?(depth - 1, i)? end fun val push(depth: USize, i: USize, tail: Array[A] val): _VecNode[A] ? => let ns = _entries as _VecSubNodes[A] val if depth == 1 then let ls = create(tail) create(recover ns.clone() .> push(ls) end) else let idx = _Bits.mask(i, depth) if _entries.size() > idx then let sn = ns(idx)?.push(depth - 1, i, tail)? create(recover ns.clone() .> update(idx, sn)? end) else let sn = empty(depth - 1).push(depth - 1, i, tail)? create(recover ns.clone() .> push(sn) end) end end fun val pop(depth: USize, i: USize): (_VecNode[A], Array[A] val) ? => match _entries | let ls: Array[A] val => (this, ls) | let ns: _VecSubNodes[A] val => let idx = _Bits.mask(i, depth) if depth == 1 then let tail = ns(idx)?.pop(depth - 1, i)?._2 (create(ns.trim(0, ns.size() - 1)), tail) else (let sn, let tail) = ns(idx)?.pop(depth - 1, i)? (create(recover ns.clone() .> update(idx, sn)? end), tail) end end fun val update(depth: USize, i: USize, v: A): _VecNode[A] ? => let idx = _Bits.mask(i, depth) match _entries | let ls: Array[A] val => create(recover ls.clone() .> update(idx, v)? end) | let ns: _VecSubNodes[A] val => let sn = ns(idx)?.update(depth - 1, i, v)? create(recover ns.clone() .> update(idx, sn)? end) end fun val leaf_nodes(lns: Array[Array[A] val]): Array[Array[A] val]^ => match _entries | let lns': Array[A] val => lns.push(lns') | let ns: _VecSubNodes[A] val => for sn in ns.values() do sn.leaf_nodes(lns) end end lns","title":"_vec_node.pony"},{"location":"src/collections-persistent/list/","text":"type List[A] is (Cons[A] | Nil[A]) \"\"\" A persistent list with functional transformations. ## Usage ```pony use \"collections/persistent\" actor Main new create(env: Env) => try let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8) let empty = Lists[U32].empty() // List() // prepend() returns a new List, leaving the // old list unchanged let l2 = empty.prepend(3) // List(3) let l3 = l2.prepend(2) // List(2, 3) let l4 = l3.prepend(1) // List(1, 2, 3) let l4_head = l4.head() // 1 let l4_tail = l4.tail() // List(2, 3) l4_head == 1 Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))? Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))? let doubled = l4.map[U32]({(x) => x * 2 }) Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))? end ``` \"\"\" primitive Lists[A] \"\"\" A primitive containing helper functions for constructing and testing Lists. \"\"\" fun empty(): List[A] => \"\"\" Returns an empty list. \"\"\" Nil[A] fun cons(h: val->A, t: List[A]): List[A] => \"\"\" Returns a list that has h as a head and t as a tail. \"\"\" Cons[A](h, t) fun apply(arr: Array[val->A]): List[A] => \"\"\" Builds a new list from an Array \"\"\" this.from(arr.values()) fun from(iter: Iterator[val->A]): List[A] => \"\"\" Builds a new list from an iterator \"\"\" var l: List[A] = Nil[A] for i in iter do l = Cons[A](i, l) end l.reverse() fun eq[T: Equatable[T] val = A](l1: List[T], l2: List[T]): Bool ? => \"\"\" Checks whether two lists are equal. \"\"\" if (l1.is_empty() and l2.is_empty()) then true elseif (l1.is_empty() and l2.is_non_empty()) then false elseif (l1.is_non_empty() and l2.is_empty()) then false elseif (l1.head()? != l2.head()?) then false else eq[T](l1.tail()?, l2.tail()?)? end primitive Nil[A] is ReadSeq[val->A] \"\"\" The empty list of As. \"\"\" fun size(): USize => \"\"\" Returns the size of the list. \"\"\" 0 fun apply(i: USize): val->A ? => \"\"\" Returns the i-th element of the sequence. For the empty list this call will always error because any index will be out of bounds. \"\"\" error fun values(): Iterator[val->A]^ => \"\"\" Returns an empty iterator over the elements of the empty list. \"\"\" object ref is Iterator[val->A] fun has_next(): Bool => false fun ref next(): val->A! ? => error end fun is_empty(): Bool => \"\"\" Returns a Bool indicating if the list is empty. \"\"\" true fun is_non_empty(): Bool => \"\"\" Returns a Bool indicating if the list is non-empty. \"\"\" false fun head(): val->A ? => \"\"\" Returns an error, since Nil has no head. \"\"\" error fun tail(): List[A] ? => \"\"\" Returns an error, since Nil has no tail. \"\"\" error fun reverse(): Nil[A] => \"\"\" The reverse of the empty list is the empty list. \"\"\" this fun prepend(a: val->A!): Cons[A] => \"\"\" Builds a new list with an element added to the front of this list. \"\"\" Cons[A](consume a, this) fun concat(l: List[A]): List[A] => \"\"\" The concatenation of any list l with the empty list is l. \"\"\" l fun map[B](f: {(val->A): val->B} box): Nil[B] => \"\"\" Mapping a function from A to B over the empty list yields the empty list of Bs. \"\"\" Nil[B] fun flat_map[B](f: {(val->A): List[B]} box): Nil[B] => \"\"\" Flatmapping a function from A to B over the empty list yields the empty list of Bs. \"\"\" Nil[B] fun for_each(f: {(val->A)} box) => \"\"\" Applying a function to every member of the empty list is a no-op. \"\"\" None fun filter(f: {(val->A): Bool} box): Nil[A] => \"\"\" Filtering the empty list yields the empty list. \"\"\" this fun fold[B](f: {(B, val->A): B^} box, acc: B): B => \"\"\" Folding over the empty list yields the initial accumulator. \"\"\" consume acc fun every(f: {(val->A): Bool} box): Bool => \"\"\" Any predicate is true of every member of the empty list. \"\"\" true fun exists(f: {(val->A): Bool} box): Bool => \"\"\" For any predicate, there is no element that satisfies it in the empty list. \"\"\" false fun partition(f: {(val->A): Bool} box): (Nil[A], Nil[A]) => \"\"\" The only partition of the empty list is two empty lists. \"\"\" (this, this) fun drop(n: USize): Nil[A] => \"\"\" There are no elements to drop from the empty list. \"\"\" this fun drop_while(f: {(val->A): Bool} box): Nil[A] => \"\"\" There are no elements to drop from the empty list. \"\"\" this fun take(n: USize): Nil[A] => \"\"\" There are no elements to take from the empty list. \"\"\" this fun take_while(f: {(val->A): Bool} box): Nil[A] => \"\"\" There are no elements to take from the empty list. \"\"\" this fun val contains[T: (A & HasEq[A!] #read) = A](a: val->T): Bool => false class val Cons[A] is ReadSeq[val->A] \"\"\" A list with a head and a tail, where the tail can be empty. \"\"\" let _size: USize let _head: val->A let _tail: List[A] val new val create(a: val->A, t: List[A]) => _head = consume a _tail = consume t _size = 1 + _tail.size() fun size(): USize => \"\"\" Returns the size of the list. \"\"\" _size fun apply(i: USize): val->A ? => \"\"\" Returns the i-th element of the list. Errors if the index is out of bounds. \"\"\" match i | 0 => _head else _tail(i - 1)? end fun values(): Iterator[val->A]^ => \"\"\" Returns an iterator over the elements of the list. \"\"\" object is Iterator[val->A] var _list: List[A] box = this fun has_next(): Bool => _list isnt Nil[A] fun ref next(): val->A! ? => (_list = _list.tail()?).head()? end fun is_empty(): Bool => \"\"\" Returns a Bool indicating if the list is empty. \"\"\" false fun is_non_empty(): Bool => \"\"\" Returns a Bool indicating if the list is non-empty. \"\"\" true fun head(): val->A => \"\"\" Returns the head of the list. \"\"\" _head fun tail(): List[A] => \"\"\" Returns the tail of the list. \"\"\" _tail fun val reverse(): List[A] => \"\"\" Builds a new list by reversing the elements in the list. \"\"\" _reverse(this, Nil[A]) fun val _reverse(l: List[A], acc: List[A]): List[A] => \"\"\" Private helper for reverse, recursively working on elements. \"\"\" match l | let cons: Cons[A] => _reverse(cons.tail(), acc.prepend(cons.head())) else acc end fun val prepend(a: val->A!): Cons[A] => \"\"\" Builds a new list with an element added to the front of this list. \"\"\" Cons[A](consume a, this) fun val concat(l: List[A]): List[A] => \"\"\" Builds a new list that is the concatenation of this list and the provided list. \"\"\" _concat(l, this.reverse()) fun val _concat(l: List[A], acc: List[A]): List[A] => \"\"\" Private helper for concat that recursively builds the new list. \"\"\" match l | let cons: Cons[A] => _concat(cons.tail(), acc.prepend(cons.head())) else acc.reverse() end fun val map[B](f: {(val->A): val->B} box): List[B] => \"\"\" Builds a new list by applying a function to every member of the list. \"\"\" _map[B](this, f, Nil[B]) fun _map[B](l: List[A], f: {(val->A): val->B} box, acc: List[B]): List[B] => \"\"\" Private helper for map, recursively applying function to elements. \"\"\" match l | let cons: Cons[A] => _map[B](cons.tail(), f, acc.prepend(f(cons.head()))) else acc.reverse() end fun val flat_map[B](f: {(val->A): List[B]} box): List[B] => \"\"\" Builds a new list by applying a function to every member of the list and using the elements of the resulting lists. \"\"\" _flat_map[B](this, f, Nil[B]) fun _flat_map[B](l: List[A], f: {(val->A): List[B]} box, acc: List[B]): List[B] => \"\"\" Private helper for flat_map, recursively working on elements. \"\"\" match l | let cons: Cons[A] => _flat_map[B](cons.tail(), f, _rev_prepend[B](f(cons.head()), acc)) else acc.reverse() end fun tag _rev_prepend[B](l: List[B], target: List[B]): List[B] => \"\"\" Prepends l in reverse order onto target \"\"\" match l | let cns: Cons[B] => _rev_prepend[B](cns.tail(), target.prepend(cns.head())) else target end fun val for_each(f: {(val->A)} box) => \"\"\" Applies the supplied function to every element of the list in order. \"\"\" _for_each(this, f) fun _for_each(l: List[A], f: {(val->A)} box) => \"\"\" Private helper for for_each, recursively working on elements. \"\"\" match l | let cons: Cons[A] => f(cons.head()) _for_each(cons.tail(), f) end fun val filter(f: {(val->A): Bool} box): List[A] => \"\"\" Builds a new list with those elements that satisfy a provided predicate. \"\"\" _filter(this, f, Nil[A]) fun _filter(l: List[A], f: {(val->A): Bool} box, acc: List[A]): List[A] => \"\"\" Private helper for filter, recursively working on elements, keeping those that match the predicate and discarding those that don't. \"\"\" match l | let cons: Cons[A] => if (f(cons.head())) then _filter(cons.tail(), f, acc.prepend(cons.head())) else _filter(cons.tail(), f, acc) end else acc.reverse() end fun val fold[B](f: {(B, val->A): B^} box, acc: B): B => \"\"\" Folds the elements of the list using the supplied function. \"\"\" _fold[B](this, f, consume acc) fun val _fold[B](l: List[A], f: {(B, val->A): B^} box, acc: B): B => \"\"\" Private helper for fold, recursively working on elements. \"\"\" match l | let cons: Cons[A] => _fold[B](cons.tail(), f, f(consume acc, cons.head())) else acc end fun val every(f: {(val->A): Bool} box): Bool => \"\"\" Returns true if every element satisfies the provided predicate, false otherwise. \"\"\" _every(this, f) fun _every(l: List[A], f: {(val->A): Bool} box): Bool => \"\"\" Private helper for every, recursively testing predicate on elements, returning false immediately on an element that fails to satisfy the predicate. \"\"\" match l | let cons: Cons[A] => if (f(cons.head())) then _every(cons.tail(), f) else false end else true end fun val exists(f: {(val->A): Bool} box): Bool => \"\"\" Returns true if at least one element satisfies the provided predicate, false otherwise. \"\"\" _exists(this, f) fun _exists(l: List[A], f: {(val->A): Bool} box): Bool => \"\"\" Private helper for exists, recursively testing predicate on elements, returning true immediately on an element satisfying the predicate. \"\"\" match l | let cons: Cons[A] => if (f(cons.head())) then true else _exists(cons.tail(), f) end else false end fun val partition(f: {(val->A): Bool} box): (List[A], List[A]) => \"\"\" Builds a pair of lists, the first of which is made up of the elements satisfying the supplied predicate and the second of which is made up of those that do not. \"\"\" var hits: List[A] = Nil[A] var misses: List[A] = Nil[A] var cur: List[A] = this while true do match cur | let cons: Cons[A] => let next = cons.head() if f(next) then hits = hits.prepend(next) else misses = misses.prepend(next) end cur = cons.tail() else break end end (hits.reverse(), misses.reverse()) fun val drop(n: USize): List[A] => \"\"\" Builds a list by dropping the first n elements. \"\"\" var cur: List[A] = this if cur.size() <= n then return Nil[A] end var count = n while count > 0 do match cur | let cons: Cons[A] => cur = cons.tail() count = count - 1 end end cur fun val drop_while(f: {(val->A): Bool} box): List[A] => \"\"\" Builds a list by dropping elements from the front of the list until one fails to satisfy the provided predicate. \"\"\" var cur: List[A] = this while true do match cur | let cons: Cons[A] => if f(cons.head()) then cur = cons.tail() else break end else return Nil[A] end end cur fun val take(n: USize): List[A] => \"\"\" Builds a list of the first n elements. \"\"\" var cur: List[A] = this if cur.size() <= n then return cur end var count = n var res: List[A] = Nil[A] while count > 0 do match cur | let cons: Cons[A] => res = res.prepend(cons.head()) cur = cons.tail() else return res.reverse() end count = count - 1 end res.reverse() fun val take_while(f: {(val->A): Bool} box): List[A] => \"\"\" Builds a list of elements satisfying the provided predicate until one does not. \"\"\" var cur: List[A] = this var res: List[A] = Nil[A] while true do match cur | let cons: Cons[A] => if f(cons.head()) then res = res.prepend(cons.head()) cur = cons.tail() else break end else return res.reverse() end end res.reverse()","title":"list.pony"},{"location":"src/collections-persistent/map/","text":"use mut = \"collections\" type Map[K: (mut.Hashable val & Equatable[K]), V: Any #share] is HashMap[K, V, mut.HashEq[K]] \"\"\" A map that uses structural equality on the key. \"\"\" type MapIs[K: Any #share, V: Any #share] is HashMap[K, V, mut.HashIs[K]] \"\"\" A map that uses identity comparison on the key. \"\"\" class val HashMap[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] \"\"\" A persistent map based on the Compressed Hash Array Mapped Prefix-tree from 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM Collections' by Michael J. Steindorfer and Jurgen J. Vinju ## Usage ```pony use \"collections/persistent\" actor Main new create(env: Env) => try let m1 = Map[String, U32] // {} // Update returns a new map with the provided key set // to the provided value. The old map is unchanged. let m2 = m1(\"a\") = 5 // {a: 5} let m3 = m2(\"b\") = 10 // {a: 5, b: 10} let m4 = m3.remove(\"a\")? // {b: 10} // You can create a new map from key value pairs. let m5 = Map[String, U32].concat([(\"a\", 2); (\"b\", 3)].values()) // {a: 2, b: 3} end ``` \"\"\" let _root: _MapSubNodes[K, V, H] let _size: USize new val create() => _root = _MapSubNodes[K, V, H] _size = 0 new val _create(r: _MapSubNodes[K, V, H], s: USize) => _root = r _size = s fun val apply(k: K): val->V ? => \"\"\" Attempt to get the value corresponding to k. \"\"\" _root(0, H.hash(k).u32(), k)? as V fun val size(): USize => \"\"\" Return the amount of key-value pairs in the Map. \"\"\" _size fun val update(key: K, value: val->V): HashMap[K, V, H] => \"\"\" Update the value associated with the provided key. \"\"\" (let r, let insertion) = try _root.update(0, H.hash(key).u32(), key, value)? else (_root, false) // should not occur end let s = if insertion then _size + 1 else _size end _create(r, s) fun val remove(k: K): HashMap[K, V, H] ? => \"\"\" Try to remove the provided key from the Map. \"\"\" _create(_root.remove(0, H.hash(k).u32(), k)?, _size - 1) fun val get_or_else(k: K, alt: val->V): val->V => \"\"\" Get the value associated with provided key if present. Otherwise, return the provided alternate value. \"\"\" try match _root(0, H.hash(k).u32(), k)? | let v: V => v else alt end else alt // should not occur end fun val contains(k: K): Bool => \"\"\" Check whether the node contains the provided key. \"\"\" try _root(0, H.hash(k).u32(), k)? isnt None else false // should not occur end fun val concat(iter: Iterator[(val->K, val->V)]): HashMap[K, V, H] => \"\"\" Add the K, V pairs from the given iterator to the map. \"\"\" var m = this for (k, v) in iter do m = m.update(k, v) end m fun val add(key: K, value: val->V): HashMap[K, V, H] => \"\"\" Return this Map with the given (key, value) mapping. \"\"\" update(key, value) fun val sub(key: K): HashMap[K, V, H] => \"\"\" Return this Map without the given key. \"\"\" try remove(key)? else this end fun val keys(): MapKeys[K, V, H] => MapKeys[K, V, H](this) fun val values(): MapValues[K, V, H] => MapValues[K, V, H](this) fun val pairs(): MapPairs[K, V, H] => MapPairs[K, V, H](this) fun _root_node(): _MapSubNodes[K, V, H] => _root class MapKeys[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] embed _pairs: MapPairs[K, V, H] new create(m: HashMap[K, V, H]) => _pairs = MapPairs[K, V, H](m) fun has_next(): Bool => _pairs.has_next() fun ref next(): K ? => _pairs.next()?._1 class MapValues[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] embed _pairs: MapPairs[K, V, H] new create(m: HashMap[K, V, H]) => _pairs = MapPairs[K, V, H](m) fun has_next(): Bool => _pairs.has_next() fun ref next(): val->V ? => _pairs.next()?._2 interface _MapIter[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] is Iterator[(_MapEntry[K, V, H] | _MapIter[K, V, H])] class MapPairs[K: Any #share, V: Any #share, H: mut.HashFunction[K] val] embed _stack: Array[_MapIter[K, V, H]] = [] new create(m: HashMap[K, V, H]) => _stack.push(m._root_node().iter()) fun has_next(): Bool => _stack.size() > 0 fun ref next(): (K, V) ? => let iter = _stack(_stack.size() - 1)? let x = iter.next()? if not iter.has_next() then _stack.pop()? end match x | let e: _MapEntry[K, V, H] => (e.key, e.value) | let i: _MapIter[K, V, H] => _stack.push(i) next()? end","title":"map.pony"},{"location":"src/collections-persistent/set/","text":"use mut = \"collections\" type Set[A: (mut.Hashable val & Equatable[A])] is HashSet[A, mut.HashEq[A]] type SetIs[A: Any #share] is HashSet[A, mut.HashIs[A]] class val HashSet[A: Any #share, H: mut.HashFunction[A] val] is Comparable[HashSet[A, H] box] \"\"\" A set, built on top of persistent Map. This is implemented as map of an alias of a type to itself. \"\"\" let _map: HashMap[A, A, H] new val create() => _map = HashMap[A, A, H] new val _create(map': HashMap[A, A, H]) => _map = map' fun size(): USize => \"\"\" Return the number of elements in the set. \"\"\" _map.size() fun apply(value: val->A): val->A ? => \"\"\" Return the value if it is in the set, otherwise raise an error. \"\"\" _map(value)? fun contains(value: val->A): Bool => \"\"\" Check whether the set contains the value. \"\"\" _map.contains(value) fun val add(value: val->A): HashSet[A, H] => \"\"\" Return a set with the value added. \"\"\" _create(_map(value) = value) fun val sub(value: val->A): HashSet[A, H] => \"\"\" Return a set with the value removed. \"\"\" try _create(_map.remove(value)?) else this end fun val op_or(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] => \"\"\" Return a set with the elements of both this and that. \"\"\" let iter = match that | let s: HashSet[A, H] => s.values() | let i: Iterator[A] => i end var s' = this for v in iter do s' = s' + v end s' fun val op_and(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] => \"\"\" Return a set with the elements that are in both this and that. \"\"\" let iter = match that | let s: HashSet[A, H] => s.values() | let i: Iterator[A] => i end var s' = create() for v in iter do if contains(v) then s' = s' + v end end s' fun val op_xor(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] => \"\"\" Return a set with elements that are in either this or that, but not both. \"\"\" let iter = match that | let s: HashSet[A, H] => s.values() | let i: Iterator[A] => i end var s' = this for v in iter do if contains(v) then s' = s' - v else s' = s' + v end end s' fun val without(that: (HashSet[A, H] | Iterator[A])): HashSet[A, H] => \"\"\" Return a set with the elements of this that are not in that. \"\"\" let iter = match that | let s: HashSet[A, H] => s.values() | let i: Iterator[A] => i end var s' = this for v in iter do if contains(v) then s' = s' - v end end s' fun eq(that: HashSet[A, H] box): Bool => \"\"\" Return true if this and that contain the same elements. \"\"\" (size() == that.size()) and (this <= that) fun lt(that: HashSet[A, H] box): Bool => \"\"\" Return true if every element in this is also in that, and this has fewer elements than that. \"\"\" (size() < that.size()) and (this <= that) fun le(that: HashSet[A, H] box): Bool => \"\"\" Return true if every element in this is also in that. \"\"\" for v in values() do if not that.contains(v) then return false end end true fun gt(that: HashSet[A, H] box): Bool => \"\"\" Return true if every element in that is also in this, and this has more elements than that. \"\"\" (size() > that.size()) and (that <= this) fun ge(that: HashSet[A, H] box): Bool => \"\"\" Return true if every element in that is also in this. \"\"\" that <= this fun values(): Iterator[A]^ => \"\"\" Return an iterator over the values in the set. \"\"\" _map.values()","title":"set.pony"},{"location":"src/collections-persistent/vec/","text":"use mut = \"collections\" class val Vec[A: Any #share] \"\"\" A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash Trees' by Phil Bagwell. \"\"\" let _root: (_VecNode[A] | None) let _tail: Array[A] val let _size: USize let _depth: USize new val create() => _root = None _tail = recover Array[A] end _size = 0 _depth = -1 new val _create( root': (_VecNode[A] | None), tail': Array[A] val, size': USize, depth': USize) => _root = root' _tail = tail' _size = size' _depth = depth' fun size(): USize => \"\"\" Return the amount of values in the vector. \"\"\" _size fun _tail_offset(): USize => \"\"\" Return the amount of values in the root. \"\"\" _size - _tail.size() fun apply(i: USize): val->A ? => \"\"\" Get the i-th element, raising an error if the index is out of bounds. \"\"\" if i < _tail_offset() then (_root as _VecNode[A])(_depth, i)? else _tail(i - _tail_offset())? end fun val update(i: USize, value: val->A): Vec[A] ? => \"\"\" Return a vector with the i-th element changed, raising an error if the index is out of bounds. \"\"\" if i < _tail_offset() then let root = (_root as _VecNode[A]).update(_depth, i, value)? _create(root, _tail, _size, _depth) else let tail = recover val _tail.clone() .> update(i - _tail_offset(), value)? end _create(_root, tail, _size, _depth) end fun val insert(i: USize, value: val->A): Vec[A] ? => \"\"\" Return a vector with an element inserted. Elements after this are moved up by one index, extending the vector. An out of bounds index raises an error. \"\"\" if i >= _size then error end var vec = this var prev = value for idx in mut.Range(i, _size) do vec = vec.update(idx, prev = this(idx)?)? end vec.push(this(_size - 1)?) fun val delete(i: USize): Vec[A] ? => \"\"\" Return a vector with an element deleted. Elements after this are moved down by one index, compacting the vector. An out of bounds index raises an error. \"\"\" if i >= _size then error end var vec = pop()? for idx in mut.Range(i + 1, _size) do vec = vec.update(idx - 1, this(idx)?)? end vec fun val remove(i: USize, n: USize): Vec[A] ? => \"\"\" Return a vector with n elements removed, beginning at index i. \"\"\" if i >= _size then error end var vec = this for _ in mut.Range(0, n) do vec = vec.pop()? end for idx in mut.Range(i, _size - n) do vec = vec.update(idx, this(idx + n)?)? end vec fun val push(value: val->A): Vec[A] => \"\"\" Return a vector with the value added to the end. \"\"\" // push tail into root when it becomes full let size' = _size + 1 let tail = recover val _tail.clone() .> push(value) end if tail.size() < 32 then // push value into tail _create(_root, tail, size', _depth) elseif _tail_offset() == _Bits.next_pow32(_depth) then // create new root // push tail into root let depth' = _depth + 1 let root' = match _root | let r: _VecNode[A] => try r.grow_root().push(depth', _tail_offset(), tail)? else r end | None => _VecNode[A](tail) end _create(root', recover Array[A] end, size', depth') else // push tail into root let root' = try (_root as _VecNode[A]).push(_depth, _tail_offset(), tail)? else _root end _create(root', recover Array[A] end, size', _depth) end fun val pop(): Vec[A] ? => \"\"\" Return a vector with the value at the end removed. \"\"\" // root is popped when tail is empty let size' = _size - 1 if _tail.size() > 0 then let tail = _tail.trim(0, _tail.size() - 1) _create(_root, tail, size', _depth) else (let root, var tail) = (_root as _VecNode[A]).pop(_depth, size')? tail = tail.trim(0, tail.size() - 1) if _depth == 0 then _create(None, tail, size', -1) else _create(root, tail, size', _depth) end end fun val concat(iter: Iterator[val->A]): Vec[A] => \"\"\" Return a vector with the values of the given iterator added to the end. \"\"\" var v = this for a in iter do v = v.push(a) end v fun val find( value: val->A, offset: USize = 0, nth: USize = 0, predicate: {(A, A): Bool} val = {(l: A, r: A): Bool => l is r }) : USize ? => \"\"\" Find the `nth` appearance of `value` from the beginning of the vector, starting at `offset` and examining higher indices, and using the supplied `predicate` for comparisons. Returns the index of the value, or raise an error if the value isn't present. By default, the search starts at the first element of the vector, returns the first instance of `value` found, and uses object identity for comparison. \"\"\" var n: USize = 0 for i in mut.Range(offset, _size) do if predicate(this(i)?, value) then if n == nth then return i end n = n + 1 end end error fun val contains( value: val->A, predicate: {(A, A): Bool} val = {(l: A, r: A): Bool => l is r }) : Bool => \"\"\" Returns true if the vector contains `value`, false otherwise. \"\"\" for v in values() do if predicate(v, value) then return true end end false fun val slice(from: USize = 0, to: USize = -1, step: USize = 1): Vec[A] => \"\"\" Return a vector that is a clone of a portion of this vector. The range is exclusive and saturated. \"\"\" var vec = Vec[A] for i in mut.Range(0, if _size < to then _size else to end, step) do try vec.push(this(i)?) end end vec fun val reverse(): Vec[A] => \"\"\" Return a vector with the elements in reverse order. \"\"\" var vec = Vec[A] for i in mut.Reverse(_size - 1, 0) do try vec = vec.push(this(i)?) end end vec fun val keys(): VecKeys[A]^ => \"\"\" Return an iterator over the indices in the vector. \"\"\" VecKeys[A](this) fun val values(): VecValues[A]^ => \"\"\" Return an iterator over the values in the vector. \"\"\" VecValues[A](this) fun val pairs(): VecPairs[A]^ => \"\"\" Return an iterator over the (index, value) pairs in the vector. \"\"\" VecPairs[A](this) fun _pow32(n: USize): USize => \"\"\" Raise 32 to the power of n. \"\"\" if n == 0 then 1 else 32 << ((n - 1) * 5) end fun _leaf_nodes(): Array[Array[A] val]^ => let lns = Array[Array[A] val](_size / 32) match _root | let vn: _VecNode[A] => vn.leaf_nodes(lns) end if _tail.size() > 0 then lns.push(_tail) end lns class VecKeys[A: Any #share] embed _pairs: VecPairs[A] new create(v: Vec[A]) => _pairs = VecPairs[A](v) fun has_next(): Bool => _pairs.has_next() fun ref next(): USize ? => _pairs.next()?._1 class VecValues[A: Any #share] embed _pairs: VecPairs[A] new create(v: Vec[A]) => _pairs = VecPairs[A](v) fun has_next(): Bool => _pairs.has_next() fun ref next(): val->A ? => _pairs.next()?._2 class VecPairs[A: Any #share] let _leaf_nodes: Array[Array[A] val] var _idx: USize = 0 var _i: USize = 0 new create(v: Vec[A]) => _leaf_nodes = v._leaf_nodes() fun has_next(): Bool => _leaf_nodes.size() > 0 fun ref next(): (USize, A) ? => var leaves = _leaf_nodes(0)? let v = leaves(_idx = _idx + 1)? if _idx == leaves.size() then _leaf_nodes.shift()? _idx = 0 end (_i = _i + 1, v)","title":"vec.pony"},{"location":"src/debug/debug/","text":"\"\"\" # Debug package Provides facilities to create output to either `STDOUT` or `STDERR` that will only appear when the platform is debug configured. To create a binary with debug configured, pass the `-d` flag to `ponyc` when compiling e.g.: `ponyc -d` ## Example code ```pony actor Main new create(env: Env) => Debug.out(\"This will only be seen when configured for debug info\") env.out.print(\"This will always be seen\") ``` \"\"\" primitive DebugOut primitive DebugErr type DebugStream is (DebugOut | DebugErr) primitive Debug \"\"\" This is a debug only print utility. \"\"\" fun apply( msg: (Stringable | ReadSeq[Stringable]), sep: String = \", \", stream: DebugStream = DebugOut) => \"\"\" If platform is debug configured, print either a single stringable or a sequence of stringables. The default separator is \", \", and the default output stream is stdout. \"\"\" ifdef debug then match msg | let m: Stringable => _print(m.string(), stream) | let m: ReadSeq[Stringable] => _print(sep.join(m.values()), stream) end end fun out(msg: Stringable = \"\") => \"\"\" If platform is debug configured, print message to standard output \"\"\" _print(msg.string(), DebugOut) fun err(msg: Stringable = \"\") => \"\"\" If platform is debug configured, print message to standard error \"\"\" _print(msg.string(), DebugErr) fun _print(msg: String, stream: DebugStream) => ifdef debug then @fprintf[I32](_stream(stream), \"%s\\n\".cstring(), msg.cstring()) end fun _stream(stream: DebugStream): Pointer[U8] => match stream | DebugOut => @pony_os_stdout[Pointer[U8]]() | DebugErr => @pony_os_stderr[Pointer[U8]]() end","title":"debug.pony"},{"location":"src/encode-base64/base64/","text":"\"\"\" # Base64 package The Base64 package contains support for doing Base64 binary-to-text encodings. We currently have support 3 encodings: PEM, MIME and URL. To learn more about Base64, we suggest you check out the [wikipedia entry](https://en.wikipedia.org/wiki/Base64). ## Example code ```pony use \"encode/base64\" actor Main new create(env: Env) => env.out.print(Base64.encode(\"foobar\")) try env.out.print(Base64.decode[String iso](\"Zm9vYmFy\")?) end ``` \"\"\" use \"collections\" use \"assert\" primitive Base64 fun encode_pem(data: ReadSeq[U8]): String iso^ => \"\"\" Encode for PEM (RFC 1421). \"\"\" encode(data, '+', '/', '=', 64) fun encode_mime(data: ReadSeq[U8]): String iso^ => \"\"\" Encode for MIME (RFC 2045). \"\"\" encode(data, '+', '/', '=', 76) fun encode_url[A: Seq[U8] iso = String iso]( data: ReadSeq[U8], pad: Bool = false) : A^ => \"\"\" Encode for URLs (RFC 4648). Padding characters are stripped by default. \"\"\" let c: U8 = if pad then '=' else 0 end encode[A](data, '-', '_', c) fun encode[A: Seq[U8] iso = String iso]( data: ReadSeq[U8], at62: U8 = '+', at63: U8 = '/', pad: U8 = '=', linelen: USize = 0, linesep: String = \"\\r\\n\") : A^ => \"\"\" Configurable encoding. The defaults are for RFC 4648. \"\"\" let len = ((data.size() + 2) / 3) * 4 let out = recover A(len) end let lineblocks = linelen / 4 var srclen = data.size() var blocks = USize(0) var i = USize(0) try while srclen >= 3 do let in1 = data(i)? let in2 = data(i + 1)? let in3 = data(i + 2)? let out1 = in1 >> 2 let out2 = ((in1 and 0x03) << 4) + (in2 >> 4) let out3 = ((in2 and 0x0f) << 2) + (in3 >> 6) let out4 = in3 and 0x3f out.push(_enc_byte(out1, at62, at63)?) out.push(_enc_byte(out2, at62, at63)?) out.push(_enc_byte(out3, at62, at63)?) out.push(_enc_byte(out4, at62, at63)?) i = i + 3 blocks = blocks + 1 srclen = srclen - 3 if (lineblocks > 0) and (blocks == lineblocks) then out.append(linesep) blocks = 0 end end if srclen >= 1 then let in1 = data(i)? let in2 = if srclen == 2 then data(i + 1)? else 0 end let out1 = in1 >> 2 let out2 = ((in1 and 0x03) << 4) + (in2 >> 4) let out3 = (in2 and 0x0f) << 2 out.push(_enc_byte(out1, at62, at63)?) out.push(_enc_byte(out2, at62, at63)?) if srclen == 2 then out.push(_enc_byte(out3, at62, at63)?) else out.push(pad) end out.push(pad) end if lineblocks > 0 then out.append(linesep) end else out.clear() end out fun decode_url[A: Seq[U8] iso = Array[U8] iso](data: ReadSeq[U8]): A^ ? => \"\"\" Decode for URLs (RFC 4648). \"\"\" decode[A](data, '-', '_')? fun decode[A: Seq[U8] iso = Array[U8] iso]( data: ReadSeq[U8], at62: U8 = '+', at63: U8 = '/', pad: U8 = '=') : A^ ? => \"\"\" Configurable decoding. The defaults are for RFC 4648. Missing padding is not an error. Non-base64 data, other than whitespace (which can appear at any time), is an error. \"\"\" let len = (data.size() * 4) / 3 let out = recover A(len) end var state = U8(0) var input = U8(0) var output = U8(0) for i in Range(0, data.size()) do input = data(i)? let value = match input | ' ' | '\\t' | '\\r' | '\\n' => continue | pad => break | at62 => 62 | at63 => 63 | if (input >= 'A') and (input <= 'Z') => (input - 'A') | if (input >= 'a') and (input <= 'z') => ((input - 'a') + 26) | if (input >= '0') and (input <= '9') => ((input - '0') + 52) else error end match state | 0 => output = value << 2 state = 1 | 1 => out.push(output or (value >> 4)) output = (value and 0x0f) << 4 state = 2 | 2 => out.push(output or (value >> 2)) output = (value and 0x03) << 6 state = 3 | 3 => out.push(output or value) state = 0 else error end end if output != 0 then Fact(input != pad)? match state | 1 | 2 => out.push(output) end end out fun _enc_byte(i: U8, at62: U8, at63: U8): U8 ? => \"\"\" Encode a single byte. \"\"\" match i | 62 => at62 | 63 => at63 | if i < 26 => 'A' + i | if i < 52 => ('a' - 26) + i | if i < 62 => ('0' - 52) + i else error end","title":"base64.pony"},{"location":"src/files/_file_des/","text":"use \"time\" use \"capsicum\" primitive _FileDes \"\"\" Convenience operations on file descriptors. \"\"\" fun chmod(fd: I32, path: FilePath, mode: FileMode box): Bool => \"\"\" Set the FileMode for this fd. \"\"\" if not path.caps(FileChmod) or (fd == -1) then return false end ifdef windows then path.chmod(mode) else @fchmod[I32](fd, mode._os()) == 0 end fun chown(fd: I32, path: FilePath, uid: U32, gid: U32): Bool => \"\"\" Set the owner and group for this file. Does nothing on Windows. \"\"\" ifdef windows then false else if (fd != -1) and path.caps(FileChown) then @fchown[I32](fd, uid, gid) == 0 else false end end fun touch(fd: I32, path: FilePath): Bool => \"\"\" Set the last access and modification times of the file to now. \"\"\" set_time(fd, path, Time.now(), Time.now()) fun set_time( fd: I32, path: FilePath, atime: (I64, I64), mtime: (I64, I64)) : Bool => \"\"\" Set the last access and modification times of the file to the given values. \"\"\" if (fd == -1) or not path.caps(FileTime) then return false end ifdef windows then path.set_time(atime, mtime) else var tv: (ILong, ILong, ILong, ILong) = ( atime._1.ilong(), atime._2.ilong() / 1000, mtime._1.ilong(), mtime._2.ilong() / 1000 ) @futimes[I32](fd, addressof tv) == 0 end fun set_rights(fd: I32, path: FilePath, writeable: Bool = true) ? => \"\"\" Set the Capsicum rights on the file descriptor. \"\"\" ifdef freebsd or \"capsicum\" then if fd != -1 then let cap = CapRights.from(path.caps) if not writeable then cap.unset(Cap.write()) end if not cap.limit(fd) then error end end end","title":"_file_des.pony"},{"location":"src/files/_test/","text":"use \"ponytest\" use \"collections\" use \"buffered\" use \"term\" use \"random\" use \"time\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestMkdtemp) test(_TestWalk) test(_TestDirectoryOpen) test(_TestDirectoryFileOpen) test(_TestPathClean) test(_TestPathJoin) test(_TestPathRel) test(_TestPathSplit) test(_TestPathDir) test(_TestPathBase) test(_TestPathExt) test(_TestPathVolume) ifdef not windows then test(_TestPathRoot) end test(_TestFileEOF) test(_TestFileOpenError) test(_TestFileCreate) test(_TestFileCreateExistsNotWriteable) ifdef not windows then test(_TestFileCreateDirNotWriteable) test(_TestFileOpenInDirNotWriteable) test(_TestFileOpenPermissionDenied) end test(_TestFileCreateMissingCaps) test(_TestFileOpen) test(_TestFileOpenWrite) test(_TestFileLongLine) test(_TestFileWrite) test(_TestFileWritev) test(_TestFileQueue) test(_TestFileQueuev) test(_TestFileMixedWriteQueue) test(_TestFileWritevLarge) test(_TestFileFlush) test(_TestFileReadMore) test(_TestFileLinesEmptyFile) test(_TestFileLinesSingleLine) test(_TestFileLinesMultiLine) test(_TestFileLinesMovingCursor) primitive _FileHelper fun make_files(h: TestHelper, files: Array[String]): FilePath ? => let top = Directory(FilePath.mkdtemp(h.env.root as AmbientAuth, \"tmp._FileHelper.\")?)? for f in files.values() do try // Since we embed paths, we use the posix separator, even on Windows. let dir_head = Path.split(f, \"/\") let fp = FilePath(top.path, dir_head._1)? let r = fp.mkdir() if dir_head._2 != \"\" then Directory(fp)?.create_file(dir_head._2)?.dispose() end else h.fail(\"Failed to create file: \" + f) h.assert_true(top.path.remove()) error end end top.path trait iso _NonRootTest is UnitTest fun apply_as_non_root(h: TestHelper) ? fun apply(h: TestHelper) ? => if runs_as_root(h) then h.env.err.print( ANSI.red() + ANSI.bold() + \"[\" + name() + \"] \" + \"This test is disabled as it cannot be run as root.\" + ANSI.reset()) else apply_as_non_root(h)? end fun runs_as_root(h: TestHelper): Bool => if h.env.vars.contains(\"USER=root\") then true else ifdef not windows then @getuid[U32]() == 0 else false end end class iso _TestMkdtemp is UnitTest fun name(): String => \"files/FilePath.mkdtemp\" fun apply(h: TestHelper) ? => let tmp = FilePath.mkdtemp(h.env.root as AmbientAuth, \"tmp.TestMkdtemp.\")? try h.assert_true(FileInfo(tmp)?.directory) then h.assert_true(tmp.remove()) end class iso _TestWalk is UnitTest fun name(): String => \"files/FilePath.walk\" fun apply(h: TestHelper) ? => let top = _FileHelper.make_files(h, [\"a/1\"; \"a/2\"; \"b\"; \"c/3\"; \"c/4\"; \"d/5\"; \"d/6\"])? try top.walk( {(dir: FilePath, entries: Array[String] ref)(p = top.path) => if dir.path == p then h.assert_array_eq_unordered[String]([\"b\"; \"c\"; \"a\"; \"d\"], entries) elseif dir.path.at(\"a\", -1) then h.assert_array_eq_unordered[String]([\"1\"; \"2\"], entries) elseif dir.path.at(\"c\", -1) then h.assert_array_eq_unordered[String]([\"3\"; \"4\"], entries) elseif dir.path.at(\"d\", -1) then h.assert_array_eq_unordered[String]([\"5\"; \"6\"], entries) else h.fail(\"Unexpected dir: \" + dir.path) end }) then h.assert_true(top.remove()) end class iso _TestDirectoryOpen is UnitTest fun name(): String => \"files/File.open.directory\" fun apply(h: TestHelper) ? => let tmp = FilePath.mkdtemp(h.env.root as AmbientAuth, \"tmp.TestDiropen.\")? try h.assert_true(FileInfo(tmp)?.directory) with file = File.open(tmp) do h.assert_true(file.errno() is FileError) h.assert_false(file.valid()) end then h.assert_true(tmp.remove()) end class iso _TestDirectoryFileOpen is UnitTest fun name(): String => \"files/Directory.open-file\" fun apply(h: TestHelper) => try // make a temporary directory let dir_path = FilePath.mkdtemp( h.env.root as AmbientAuth, \"tmp.directory.open-file\")? try let dir = Directory(dir_path)? // create a file (rw) let created: File = dir.create_file(\"created\")? h.assert_true(created.valid()) created.dispose() // open a file (ro) let readonly: File = dir.open_file(\"created\")? h.assert_true(readonly.valid()) readonly.dispose() else h.fail(\"Unhandled inner error!\") then dir_path.remove() end else h.fail(\"Unhandled error!\") end class iso _TestPathClean is UnitTest fun name(): String => \"files/Path.clean\" fun apply(h: TestHelper) => let res1 = Path.clean(\"//foo/bar///\") let res2 = Path.clean(\"foo/./bar\") let res3 = Path.clean(\"foo/../foo\") let res4 = Path.clean(\"///foo///bar///base.ext\") let res5 = Path.clean(\"/foo/bar/baz/../..\") let res6 = Path.clean(\"/foo/bar/baz/..\") let res7 = Path.clean(\"/foo/bar/baz/../../qux\") ifdef windows then h.assert_eq[String](res1, \"\\\\foo\\\\bar\") h.assert_eq[String](res2, \"foo\\\\bar\") h.assert_eq[String](res3, \"foo\") h.assert_eq[String](res4, \"\\\\foo\\\\bar\\\\base.ext\") h.assert_eq[String](res5, \"\\\\foo\") h.assert_eq[String](res6, \"\\\\foo\\\\bar\") h.assert_eq[String](res7, \"\\\\foo\\\\qux\") else h.assert_eq[String](res1, \"/foo/bar\") h.assert_eq[String](res2, \"foo/bar\") h.assert_eq[String](res3, \"foo\") h.assert_eq[String](res4, \"/foo/bar/base.ext\") h.assert_eq[String](res5, \"/foo\") h.assert_eq[String](res6, \"/foo/bar\") h.assert_eq[String](res7, \"/foo/qux\") end class iso _TestPathJoin is UnitTest fun name(): String => \"files/Path.join\" fun apply(h: TestHelper) => let path1 = \"//foo/bar///\" let path2 = \"foo/./bar\" let path3 = \"foo/../foo\" let path4 = \"///foo///dir///base.ext\" let res1 = Path.join(path1, path2) let res2 = Path.join(res1, path3) let res3 = Path.join(res2, path4) ifdef windows then h.assert_eq[String](res1, \"\\\\foo\\\\bar\\\\foo\\\\bar\") h.assert_eq[String](res2, \"\\\\foo\\\\bar\\\\foo\\\\bar\\\\foo\") h.assert_eq[String](res3, \"\\\\foo\\\\dir\\\\base.ext\") else h.assert_eq[String](res1, \"/foo/bar/foo/bar\") h.assert_eq[String](res2, \"/foo/bar/foo/bar/foo\") h.assert_eq[String](res3, \"/foo/dir/base.ext\") end class iso _TestPathRel is UnitTest fun name(): String => \"files/Path.rel\" fun apply(h: TestHelper) ? => let res = Path.rel(\"foo/bar\", \"foo/bar/baz\")? h.assert_eq[String](res, \"baz\") class iso _TestPathSplit is UnitTest fun name(): String => \"files/Path.split\" fun apply(h: TestHelper) => ifdef windows then var path = \"\\\\foo\\\\bar\\\\dir\\\\\" let expect = [ (\"\\\\foo\\\\bar\\\\dir\", \"\") (\"\\\\foo\\\\bar\", \"dir\") (\"\\\\foo\", \"bar\") (\".\", \"foo\") (\"\", \".\") ] for parts in expect.values() do let res = Path.split(path) h.assert_eq[String](res._1, parts._1) h.assert_eq[String](res._2, parts._2) path = parts._1 end else var path = \"/foo/bar/dir/\" let expect = [ (\"/foo/bar/dir\", \"\") (\"/foo/bar\", \"dir\") (\"/foo\", \"bar\") (\".\", \"foo\") (\"\", \".\") ] for parts in expect.values() do let res = Path.split(path) h.assert_eq[String](res._1, parts._1) h.assert_eq[String](res._2, parts._2) path = parts._1 end end class iso _TestPathDir is UnitTest fun name(): String => \"files/Path.dir\" fun apply(h: TestHelper) => ifdef windows then let res1 = Path.dir(\"\\\\foo\\\\bar\\\\dir\\\\base.ext\") let res2 = Path.dir(\"\\\\foo\\\\bar\\\\dir\\\\\") h.assert_eq[String](res1, \"\\\\foo\\\\bar\\\\dir\") h.assert_eq[String](res2, \"\\\\foo\\\\bar\\\\dir\") else let res1 = Path.dir(\"/foo/bar/dir/base.ext\") let res2 = Path.dir(\"/foo/bar/dir/\") h.assert_eq[String](res1, \"/foo/bar/dir\") h.assert_eq[String](res2, \"/foo/bar/dir\") end class iso _TestPathBase is UnitTest fun name(): String => \"files/Path.dir\" fun apply(h: TestHelper) => (let p1, let p2) = ifdef windows then (\"\\\\dir\\\\base.ext\", \"\\\\dir\\\\\") else (\"/dir/base.ext\", \"/dir/\") end h.assert_eq[String](Path.base(p1), \"base.ext\") h.assert_eq[String](Path.base(p1, false), \"base\") h.assert_eq[String](Path.base(p2), \"\") class iso _TestPathExt is UnitTest fun name(): String => \"files/Path.ext\" fun apply(h: TestHelper) => ifdef windows then let res1 = Path.ext(\"\\\\dir\\\\base.ext\") let res2 = Path.ext(\"\\\\dir\\\\base.ext\\\\\") h.assert_eq[String](res1, \"ext\") h.assert_eq[String](res2, \"\") else let res1 = Path.ext(\"/dir/base.ext\") let res2 = Path.ext(\"/dir/base.ext/\") h.assert_eq[String](res1, \"ext\") h.assert_eq[String](res2, \"\") end class iso _TestPathVolume is UnitTest fun name(): String => \"files/Path.volume\" fun apply(h: TestHelper) => let res1 = Path.volume(\"C:\\\\foo\") let res2 = Path.volume(\"\\\\foo\") ifdef windows then h.assert_eq[String](res1, \"C:\") h.assert_eq[String](res2, \"\") else h.assert_eq[String](res1, \"\") h.assert_eq[String](res2, \"\") end class iso _TestPathRoot is UnitTest fun name(): String => \"files/Path.root\" fun apply(h: TestHelper) => let res1 = Path.abs(\"/\") let res2 = Path.abs(\"/foo/../\") h.assert_eq[String](res1, \"/\") h.assert_eq[String](res2, \"/\") class iso _TestFileEOF is UnitTest fun name(): String => \"files/File.eof-error\" fun apply(h: TestHelper) => try let path = \"tmp.eof\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = File(filepath) do file.write(\"foobar\") file.sync() file.seek_start(0) let line1 = file.read_string(6) h.assert_eq[String](\"foobar\", consume line1) let line2 = file.read_string(1) h.assert_eq[USize](line2.size(), 0, \"Read beyond EOF without error!\") h.assert_true(file.errno() is FileEOF) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileCreate is UnitTest fun name(): String => \"files/File.create\" fun apply(h: TestHelper) => try let path = \"tmp.create\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print(\"foobar\") end with file2 = CreateFile(filepath) as File do h.assert_eq[String](\"foobar\", \"\".join(file2.lines())) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileCreateExistsNotWriteable is _NonRootTest fun name(): String => \"files/File.create-exists-not-writeable\" fun apply_as_non_root(h: TestHelper) => try let content = \"unwriteable\" let path = \"tmp.create-not-writeable\" let filepath = FilePath(h.env.root as AmbientAuth, path)? let mode: FileMode ref = FileMode.>private() mode.owner_read = true mode.owner_write = false // preparing the non-writable, but readable file with file = CreateFile(filepath) as File do file.write(content) end h.assert_true(filepath.chmod(mode)) with file2 = File(filepath) do h.assert_false(file2.valid()) h.assert_is[FileErrNo](file2.errno(), FilePermissionDenied) let line = file2.read(6) h.assert_eq[USize](0, line.size(), \"read on invalid file succeeded\") end mode.owner_read = true mode.owner_write = true // required on Windows to delete the file filepath.chmod(mode) filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileCreateDirNotWriteable is _NonRootTest fun name(): String => \"files/File.create-dir-not-writeable\" fun apply_as_non_root(h: TestHelper) => ifdef not windows then try let dir_path = FilePath.mkdtemp( h.env.root as AmbientAuth, \"tmp.create-dir-not-writeable\")? let mode: FileMode ref = FileMode.>private() mode.owner_read = true mode.owner_write = false mode.owner_exec = false h.assert_true(dir_path.chmod(mode)) try let file_path = dir_path.join(\"trycreateme\")? let file = File(file_path) h.assert_false(file.valid()) h.assert_true(file.writeable) h.assert_is[FileErrNo](file.errno(), FilePermissionDenied) then mode.owner_write = true mode.owner_exec = true h.assert_true(dir_path.chmod(mode)) dir_path.remove() end else h.fail(\"Unhandled error!\") end end class iso _TestFileOpenInDirNotWriteable is UnitTest fun name(): String => \"files/File.open-dir-not-writeable\" fun apply(h: TestHelper) => ifdef not windows then try // make a temporary directory let dir_path = FilePath.mkdtemp( h.env.root as AmbientAuth, \"tmp.open-dir-not-writeable\")? try let dir = Directory(dir_path)? // create a file (rw) let created: File = dir.create_file(\"created\")? h.assert_true(created.valid()) h.assert_true(created.writeable) created.dispose() // open a file (ro) let readonly: File = dir.open_file(\"created\")? h.assert_true(readonly.valid()) h.assert_false(readonly.writeable) readonly.dispose() else h.fail(\"Unhandled inner error!\") then dir_path.remove() end else h.fail(\"Unhandled error!\") end end class iso _TestFileCreateMissingCaps is UnitTest fun name(): String => \"files/File.create-missing-caps\" fun apply(h: TestHelper) => try let no_create_caps = FileCaps.>all().>unset(FileCreate) let no_read_caps = FileCaps.>all().>unset(FileWrite) let no_write_caps = FileCaps.>all().>unset(FileRead) let file_path1 = FilePath( h.env.root as AmbientAuth, \"tmp.create-missing-caps1\", consume no_create_caps)? let file1 = File(file_path1) h.assert_false(file1.valid()) h.assert_is[FileErrNo](file1.errno(), FileError) let file_path2 = FilePath( h.env.root as AmbientAuth, \"tmp.create-missing-caps2\", consume no_read_caps)? let file2 = File(file_path2) h.assert_false(file2.valid()) h.assert_is[FileErrNo](file2.errno(), FileError) let file_path3 = FilePath( h.env.root as AmbientAuth, \"tmp.create-missing-caps3\", consume no_write_caps)? let file3 = File(file_path3) h.assert_false(file3.valid()) h.assert_is[FileErrNo](file3.errno(), FileError) else h.fail(\"Unhandled error!\") end class iso _TestFileOpen is UnitTest fun name(): String => \"files/File.open\" fun apply(h: TestHelper) => try let path = \"tmp.open\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print(\"foobar\") end try let file2 = OpenFile(filepath) as File h.assert_eq[String](\"foobar\", \"\".join(file2.lines())) h.assert_true(file2.valid()) h.assert_false(file2.writeable) file2.dispose() else h.fail(\"Failed read on opened file!\") end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileOpenError is UnitTest fun name(): String => \"files/File.open-error\" fun apply(h: TestHelper) => try let path = \"tmp.openerror\" let filepath = FilePath(h.env.root as AmbientAuth, path)? h.assert_false(filepath.exists()) let file = OpenFile(filepath) h.assert_true(file is FileError) else h.fail(\"Unhandled error!\") end class _TestFileOpenWrite is UnitTest fun name(): String => \"files/File.open.write\" fun apply(h: TestHelper) => try let path = \"tmp.open-write\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print(\"write on file opened read-only\") end h.assert_true(filepath.exists()) with opened = File.open(filepath) do h.assert_is[FileErrNo](FileOK, opened.errno()) h.assert_true(opened.valid(), \"read-only file not marked as valid\") h.assert_false(opened.writeable) h.assert_false(opened.write(\"oh, noes!\")) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileOpenPermissionDenied is _NonRootTest fun name(): String => \"files/File.open-permission-denied\" fun apply_as_non_root(h: TestHelper) => ifdef not windows then // on windows all files are always writeable // with chmod there is no way to make a file not readable try let filepath = FilePath(h.env.root as AmbientAuth, \"tmp.open-not-readable\")? with file = CreateFile(filepath) as File do file.print(\"unreadable\") end let mode: FileMode ref = FileMode.>private() mode.owner_read = false mode.owner_write = false h.assert_true(filepath.chmod(mode)) let opened = File.open(filepath) h.assert_true(opened.errno() is FilePermissionDenied) h.assert_false(opened.valid()) let read = opened.read(10) h.assert_eq[USize](read.size(), 0) mode.owner_read = true mode.owner_write = true filepath.chmod(mode) filepath.remove() else h.fail(\"Unhandled error!\") end end class iso _TestFileLongLine is UnitTest fun name(): String => \"files/File.longline\" fun apply(h: TestHelper) => try let path = \"tmp.longline\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = File(filepath) do var longline = \"foobar\" for d in Range(0, 10) do longline = longline + longline end file.print(longline) file.sync() file.seek_start(0) let line1 = file.read_string(longline.size()) h.assert_eq[String](longline, consume line1) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileWrite is UnitTest fun name(): String => \"files/File.write\" fun apply(h: TestHelper) => try let path = \"tmp.write\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.write(\"foobar\\n\") end with file2 = CreateFile(filepath) as File do let line1 = file2.read_string(8) h.assert_eq[String](\"foobar\\n\", consume line1) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileWritev is UnitTest fun name(): String => \"files/File.writev\" fun apply(h: TestHelper) => try let wb: Writer ref = Writer let line1 = \"foobar\\n\" let line2 = \"barfoo\\n\" wb.write(line1) wb.write(line2) let path = \"tmp.writev\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do h.assert_true(file.writev(wb.done())) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( \"foobar barfoo\", \" \".join(file2.lines()) ) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileQueue is UnitTest fun name(): String => \"files/File.queue\" fun apply(h: TestHelper) => try let path = \"tmp.queue\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.queue(\"foobar\\n\") end with file2 = CreateFile(filepath) as File do h.assert_eq[String](\"foobar\", \"\".join(file2.lines())) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileQueuev is UnitTest fun name(): String => \"files/File.queuev\" fun apply(h: TestHelper) => try let wb: Writer ref = Writer let line1 = \"foobar\\n\" let line2 = \"barfoo\\n\" wb.write(line1) wb.write(line2) let path = \"tmp.queuev\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.queuev(wb.done()) end with file2 = CreateFile(filepath) as File do h.assert_eq[String](\"foobar barfoo\", \" \".join(file2.lines())) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileMixedWriteQueue is UnitTest fun name(): String => \"files/File.mixedwrite\" fun apply(h: TestHelper) => try let wb: Writer ref = Writer let line1 = \"foobar\\n\" let line2 = \"barfoo\\n\" let line3 = \"foobar2\" let line4 = \"barfoo2\" let line5 = \"foobar3\\n\" let line6 = \"barfoo3\\n\" wb.write(line1) wb.write(line2) let writev_data = wb.done() wb.write(line3) wb.write(line4) let printv_data = wb.done() wb.write(line5) wb.write(line6) let queuev_data = wb.done() let path = \"tmp.mixedwrite\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do file.print(line3) file.queue(line5) file.write(line1) file.printv(consume printv_data) file.queuev(consume queuev_data) file.writev(consume writev_data) end with file2 = CreateFile(filepath) as File do h.assert_eq[String]( \"\".join([ line3 + \"\\n\" line5 line1 line3 line4 + \"\\n\" line5 line6 line1 line2 ].values()), file2.read_string(256)) end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileWritevLarge is UnitTest fun name(): String => \"files/File.writevlarge\" fun apply(h: TestHelper) => try let wb: Writer ref = Writer let writev_batch_size: USize = 10 + @pony_os_writev_max[I32]().usize() var count: USize = 0 while count < writev_batch_size do wb.write(count.string() + \"\\n\") count = count + 1 end let path = \"tmp.writevlarge\" let filepath = FilePath(h.env.root as AmbientAuth, path)? with file = CreateFile(filepath) as File do h.assert_true(file.writev(wb.done())) end with file2 = CreateFile(filepath) as File do count = 0 for line in file2.lines() do h.assert_eq[String](count.string(), consume line) count = count + 1 h.log(count.string()) end end filepath.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileFlush is UnitTest fun name(): String => \"files/File.flush\" fun apply(h: TestHelper) => try let path = FilePath(h.env.root as AmbientAuth, \"tmp.flush\")? with file = CreateFile(path) as File do // Flush with no writes succeeds trivially, but does nothing. h.assert_true(file.flush()) file.queue(\"foobar\\n\") // Without flushing, the file size is still zero. with read_file = CreateFile(path) as File do h.assert_eq[USize](0, read_file.size()) end h.assert_true(file.flush()) // Now expect to be able to see the data. with read_file = CreateFile(path) as File do h.assert_eq[String](\"foobar\", \"\".join(read_file.lines())) end end path.remove() else h.fail(\"Unhandled error!\") end class iso _TestFileReadMore is UnitTest fun name(): String => \"files/File.read-more\" fun apply(h: TestHelper)? => let path = FilePath(h.env.root as AmbientAuth, \"tmp-read-more\")? with file = CreateFile(path) as File do h.assert_true(file.write(\"foobar\")) end with read_file = OpenFile(path) as File do let content = read_file.read(10) h.assert_eq[USize](6, content.size()) h.assert_is[FileErrNo]( read_file.errno(), FileOK, \"File errno is not OK after reading fewer bytes than requested\") h.assert_eq[USize](0, read_file.read(10).size()) h.assert_is[FileErrNo]( read_file.errno(), FileEOF, \"File errno is not EOF after reading past the last byte\") end path.remove() class iso _TestFileLinesEmptyFile is UnitTest var tmp_dir: (FilePath | None) = None fun ref set_up(h: TestHelper) ? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"empty\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun name(): String => \"files/FileLines.empty\" fun ref apply(h: TestHelper) ? => let tmp_file = (tmp_dir as FilePath).join(\"empty\")? with file = CreateFile(tmp_file) as File do file.write(Array[U8]) end with f = OpenFile(tmp_file) as File do let fl = FileLines(f) var lines_returned: USize = 0 for _ in fl do lines_returned = lines_returned + 1 end h.assert_eq[USize](lines_returned, 0, \"FileLines returned a line for an empty file\") end class iso _TestFileLinesSingleLine is UnitTest let lines: Array[String] = [ as String: \"a\" \"a\\n\" \"a\\r\\n\" \"abcd\" \"ABCD\\n\" \"ABCD\\r\\n\" String.from_array(recover val Array[U8].init('a', 255) end) String.from_array(recover val Array[U8].init('a', 255) end) + \"\\n\" String.from_array(recover val Array[U8].init('a', 255) end) + \"\\r\\n\" String.from_array(recover val Array[U8].init('b', 256) end) String.from_array(recover val Array[U8].init('b', 256) end) + \"\\n\" String.from_array(recover val Array[U8].init('b', 256) end) + \"\\r\\n\" String.from_array(recover val Array[U8].init('c', 257) end) String.from_array(recover val Array[U8].init('c', 257) end) + \"\\n\" String.from_array(recover val Array[U8].init('c', 257) end) + \"\\r\\n\" String.from_array(recover val Array[U8].init('d', 100_000) end) ] var tmp_dir: (FilePath | None) = None fun ref set_up(h: TestHelper) ? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"single-line\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun name(): String => \"files/FileLines.single_line\" fun ref apply(h: TestHelper)? => var i: USize = 0 for line in lines.values() do let tmp_file = (tmp_dir as FilePath).join(\"single-line-\" + i.string())? with file = CreateFile(tmp_file) as File do h.assert_true( file.write(line), \"could not write to file: \" + tmp_file.path) end with file = OpenFile(tmp_file) as File do let fl = FileLines(file) var lines_returned: USize = 0 for read_line in fl do let compare_line = if line.contains(\"\\r\\n\") then line.substring(0, line.size().isize() - 2) elseif line.contains(\"\\n\") then line.substring(0, line.size().isize() -1) else line end h.assert_eq[String](consume read_line, compare_line) lines_returned = lines_returned + 1 end h.assert_eq[USize](lines_returned, 1, \"FileLines returned \" + lines_returned.string() + \" for single line: '\" + line + \"'\") h.assert_eq[USize](file.position(), line.size(), \"FileLines advanced the file cursor to \" + file.position().string() + \" though the line has \" + line.size().string() + \" bytes.\") end i = i + 1 end class _TestFileLinesMultiLine is UnitTest var tmp_dir: (FilePath | None) = None let line_endings: Array[String] val = [\"\\n\"; \"\\r\\n\"] let file_contents: Array[(Array[String] val, USize)] val = [ ([\"a\"; \"b\"], 2) ([\"a\"; \"\"; \"b\"], 3) ([\"a\"; \"b\"; \"\"], 2) ([\"\"; \"b\"; \"c\"], 3) ([\"\"; \"\"], 1) ([\"\"; \" \"], 2) ([\"\"; \"\"; \"\"], 2) ([ String.from_array(recover val Array[U8].init('a', 254) end) String.from_array(recover val Array[U8].init('a', 257) end)], 2) ([ String.from_array(recover val Array[U8].init('b', 256) end) \"\" String.from_array(recover val Array[U8].init('c', 256) end) ], 3) ] fun ref set_up(h: TestHelper) ? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"multi-line\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun name(): String => \"files/FileLines.multi_line\" fun ref apply(h: TestHelper)? => var i: USize = 0 for lines_and_count in file_contents.values() do let lines = lines_and_count._1 for line_ending in line_endings.values() do let tmp_file = (tmp_dir as FilePath).join(\"multi-line-\" + i.string())? let content = recover val line_ending.join(lines.values()) end with file = CreateFile(tmp_file) as File do h.assert_true( file.write(content), \"could not write to file: \" + tmp_file.path) end with file = OpenFile(tmp_file) as File do let fl = FileLines(file) var lines_returned: USize = 0 for read_line in fl do lines_returned = lines_returned + 1 end let expected_line_count = lines_and_count._2 h.assert_eq[USize]( lines_returned, expected_line_count, \"FileLines returned \" + lines_returned.string() + \" (expected \" + expected_line_count.string() + \") lines for file content:\\n----\\n\" + content + \"\\n----\\n\") end i = i + 1 end end class _TestFileLinesMovingCursor is UnitTest var tmp_dir: (FilePath | None) = None fun ref set_up(h: TestHelper) ? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"moving-cursor\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun name(): String => \"files/FileLines.moving_cursor\" fun ref apply(h: TestHelper)? => let tmp_file = (tmp_dir as FilePath).join(\"moving-cursor\")? let content = \"a\\nb\\nc\\nd\" with file = CreateFile(tmp_file) as File do h.assert_true( file.write(content), \"could not write to file: \" + tmp_file.path) end with file = OpenFile(tmp_file) as File do h.assert_eq[USize](file.position(), 0) let fl1 = FileLines(file) h.assert_eq[String](\" \".join(fl1), \"a b c d\") h.assert_eq[USize](file.position(), content.size()) file.seek_start(2) let fl2 = FileLines(file) h.assert_eq[String](\" \".join(fl2), \"b c d\") h.assert_eq[USize](file.position(), content.size()) file.seek_start(0) let fl3 = FileLines(file) file.seek_start(3) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, \"a\") h.assert_eq[USize](file.position(), 2) file.seek_start(5) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, \"b\") h.assert_eq[USize](file.position(), 4) file.seek_start(0) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, \"c\") h.assert_eq[USize](file.position(), 6) file.seek_start(10) h.assert_true(fl3.has_next()) h.assert_eq[String](fl3.next()?, \"d\") h.assert_eq[USize](file.position(), 7) end","title":"_test.pony"},{"location":"src/files/directory/","text":"use \"time\" use @ponyint_o_rdonly[I32]() use @ponyint_o_rdwr[I32]() use @ponyint_o_creat[I32]() use @ponyint_o_trunc[I32]() use @ponyint_o_directory[I32]() use @ponyint_o_cloexec[I32]() use @ponyint_at_removedir[I32]() use @unlinkat[I32](fd: I32, target: Pointer[U8] tag, flags: I32) primitive _DirectoryHandle primitive _DirectoryEntry class Directory \"\"\" Operations on a directory. The directory-relative functions (open, etc) use the *at interface on FreeBSD and Linux. This isn't available on OS X prior to 10.10, so it is not used. On FreeBSD, this allows the directory-relative functions to take advantage of Capsicum. \"\"\" let path: FilePath \"\"\" This is the filesystem path locating this directory on the file system and an object capability granting access to operate on this directory. \"\"\" var _fd: I32 = -1 // We don't need a file descriptor in Windows. However we do still need to // know whether we've disposed of this object, so we use the _fd to indicate // this. // 0 => not yet disposed of. // -1 => disposed of. new create(from: FilePath) ? => \"\"\" This will raise an error if the path doesn't exist or it is not a directory, or if FileRead or FileStat permission isn't available. \"\"\" if not from.caps(FileRead) then error end if not FileInfo(from)?.directory then error end path = from ifdef posix then _fd = @open[I32](from.path.cstring(), @ponyint_o_rdonly() or @ponyint_o_directory() or @ponyint_o_cloexec()) if _fd == -1 then error end elseif windows then _fd = 0 else compile_error \"unsupported platform\" end _FileDes.set_rights(_fd, path)? new iso _relative(path': FilePath, fd': I32) => \"\"\" Internal constructor. Capsicum rights are already set by inheritence. \"\"\" path = path' _fd = fd' fun entries(): Array[String] iso^ ? => \"\"\" The entries will include everything in the directory, but it is not recursive. The path for the entry will be relative to the directory, so it will contain no directory separators. The entries will not include \".\" or \"..\". \"\"\" if not path.caps(FileRead) or (_fd == -1) then error end let path' = path.path let fd' = _fd recover let list = Array[String] ifdef posix then if fd' == -1 then error end let h = ifdef linux or bsd then let fd = @openat[I32](fd', \".\".cstring(), @ponyint_o_rdonly() or @ponyint_o_directory() or @ponyint_o_cloexec()) @fdopendir[Pointer[_DirectoryHandle]](fd) else @opendir[Pointer[_DirectoryHandle]](path'.cstring()) end if h.is_null() then error end while true do let p = @ponyint_unix_readdir[Pointer[U8] iso^](h) if p.is_null() then break end list.push(recover String.from_cstring(consume p) end) end @closedir[I32](h) elseif windows then var find = @ponyint_windows_find_data[Pointer[_DirectoryEntry]]() let search = path' + \"\\\\*\" let h = @FindFirstFileA[Pointer[_DirectoryHandle]]( search.cstring(), find) if h.usize() == -1 then error end repeat let p = @ponyint_windows_readdir[Pointer[U8] iso^](find) if not p.is_null() then list.push(recover String.from_cstring(consume p) end) end until not @FindNextFileA[Bool](h, find) end @FindClose[Bool](h) @ponyint_windows_find_data_free[None](find) else compile_error \"unsupported platform\" end consume list end fun open(target: String): Directory iso^ ? => \"\"\" Open a directory relative to this one. Raises an error if the path is not within this directory hierarchy. \"\"\" if _fd == -1 then error end let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then let fd' = @openat[I32](_fd, target.cstring(), @ponyint_o_rdonly() or @ponyint_o_directory() or @ponyint_o_cloexec()) _relative(path', fd') else recover create(path')? end end fun mkdir(target: String): Bool => \"\"\" Creates a directory relative to this one. Returns false if the path is not within this directory hierarchy or if FileMkdir permission is missing. \"\"\" if not path.caps(FileMkdir) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then var offset: ISize = 0 repeat let element = try offset = target.find(Path.sep(), offset)? + 1 target.substring(0, offset - 1) else offset = -1 target end @mkdirat[I32](_fd, element.cstring(), U32(0x1FF)) until offset < 0 end FileInfo(path')?.directory else path'.mkdir() end else false end fun create_file(target: String): File iso^ ? => \"\"\" Open for read/write, creating if it doesn't exist, preserving the contents if it does exist. \"\"\" if not path.caps(FileCreate) or not path.caps(FileRead) or not path.caps(FileWrite) or (_fd == -1) then error end let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then let fd' = @openat[I32](_fd, target.cstring(), @ponyint_o_rdwr() or @ponyint_o_creat() or @ponyint_o_cloexec(), I32(0x1B6)) recover File._descriptor(fd', path')? end else recover File(path') end end fun open_file(target: String): File iso^ ? => \"\"\" Open for read only, failing if it doesn't exist. \"\"\" if not path.caps(FileRead) or (_fd == -1) then error end let path' = FilePath(path, target, path.caps - FileWrite)? ifdef linux or bsd then let fd' = @openat[I32](_fd, target.cstring(), @ponyint_o_rdonly() or @ponyint_o_cloexec(), I32(0x1B6)) recover File._descriptor(fd', path')? end else recover File.open(path') end end fun info(): FileInfo ? => \"\"\" Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. \"\"\" FileInfo._descriptor(_fd, path)? fun chmod(mode: FileMode box): Bool => \"\"\" Set the FileMode for this directory. \"\"\" _FileDes.chmod(_fd, path, mode) fun chown(uid: U32, gid: U32): Bool => \"\"\" Set the owner and group for this directory. Does nothing on Windows. \"\"\" _FileDes.chown(_fd, path, uid, gid) fun touch(): Bool => \"\"\" Set the last access and modification times of the directory to now. \"\"\" _FileDes.touch(_fd, path) fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool => \"\"\" Set the last access and modification times of the directory to the given values. \"\"\" _FileDes.set_time(_fd, path, atime, mtime) fun infoat(target: String): FileInfo ? => \"\"\" Return a FileInfo for some path relative to this directory. \"\"\" if not path.caps(FileStat) or not path.caps(FileLookup) or (_fd == -1) then error end let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then FileInfo._relative(_fd, path', target)? else FileInfo(path')? end fun chmodat(target: String, mode: FileMode box): Bool => \"\"\" Set the FileMode for some path relative to this directory. \"\"\" if not path.caps(FileChmod) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then 0 == @fchmodat[I32](_fd, target.cstring(), mode._os(), I32(0)) else path'.chmod(mode) end else false end fun chownat(target: String, uid: U32, gid: U32): Bool => \"\"\" Set the FileMode for some path relative to this directory. \"\"\" if not path.caps(FileChown) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then 0 == @fchownat[I32](_fd, target.cstring(), uid, gid, I32(0)) else path'.chown(uid, gid) end else false end fun touchat(target: String): Bool => \"\"\" Set the last access and modification times of the directory to now. \"\"\" set_time_at(target, Time.now(), Time.now()) fun set_time_at( target: String, atime: (I64, I64), mtime: (I64, I64)) : Bool => \"\"\" Set the last access and modification times of the directory to the given values. \"\"\" if not path.caps(FileChown) or not path.caps(FileLookup) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then var tv: (ILong, ILong, ILong, ILong) = ( atime._1.ilong(), atime._2.ilong() / 1000, mtime._1.ilong(), mtime._2.ilong() / 1000 ) 0 == @futimesat[I32](_fd, target.cstring(), addressof tv) else path'.set_time(atime, mtime) end else false end fun symlink(source: FilePath, link_name: String): Bool => \"\"\" Link the source path to the link_name, where the link_name is relative to this directory. \"\"\" if not path.caps(FileLink) or not path.caps(FileLookup) or not path.caps(FileCreate) or not source.caps(FileLink) or (_fd == -1) then return false end try let path' = FilePath(path, link_name, path.caps)? ifdef linux or bsd then 0 == @symlinkat[I32](source.path.cstring(), _fd, link_name.cstring()) else source.symlink(path') end else false end fun remove(target: String): Bool => \"\"\" Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. \"\"\" if not path.caps(FileLookup) or not path.caps(FileRemove) or (_fd == -1) then return false end try let path' = FilePath(path, target, path.caps)? ifdef linux or bsd then let fi = FileInfo(path')? if fi.directory and not fi.symlink then let directory = open(target)? for entry in directory.entries()?.values() do if not directory.remove(entry) then return false end end 0 == @unlinkat(_fd, target.cstring(), @ponyint_at_removedir()) else 0 == @unlinkat(_fd, target.cstring(), 0) end else path'.remove() end else false end fun rename(source: String, to: Directory box, target: String): Bool => \"\"\" Rename source (which is relative to this directory) to target (which is relative to the `to` directory). \"\"\" if not path.caps(FileLookup) or not path.caps(FileRename) or not to.path.caps(FileLookup) or not to.path.caps(FileCreate) or (_fd == -1) or (to._fd == -1) then return false end try let path' = FilePath(path, source, path.caps)? let path'' = FilePath(to.path, target, to.path.caps)? ifdef linux or bsd then 0 == @renameat[I32](_fd, source.cstring(), to._fd, target.cstring()) else path'.rename(path'') end else false end fun ref dispose() => \"\"\" Close the directory. \"\"\" if _fd != -1 then ifdef posix then @close[I32](_fd) end _fd = -1 end fun _final() => \"\"\" Close the file descriptor. \"\"\" if _fd != -1 then ifdef posix then @close[I32](_fd) end end","title":"directory.pony"},{"location":"src/files/file/","text":"use @_read[I32](fd: I32, buffer: Pointer[None], bytes_to_read: I32) if windows use @read[ISize](fd: I32, buffer: Pointer[None], bytes_to_read: USize) if not windows use @_write[I32](fd: I32, buffer: Pointer[None], bytes_to_send: I32) if windows use @writev[ISize](fd: I32, buffer: Pointer[None], num_to_send: I32) if not windows use @_lseeki64[I64](fd: I32, offset: I64, base: I32) if windows use @lseek64[I64](fd: I32, offset: I64, base: I32) if linux use @lseek[I64](fd: I32, offset: I64, base: I32) if not windows and not linux use @FlushFileBuffers[Bool](file_handle: Pointer[None]) if windows use @_get_osfhandle[Pointer[None]](fd: I32) if windows use @fsync[I32](fd: I32) if not windows use @fdatasync[I32](fd: I32) if not windows use @_chsize_s[I32](fd: I32, len: I64) if windows use @ftruncate64[I32](fd: I32, len: I64) if linux use @ftruncate[I32](fd: I32, len: I64) if not windows and not linux use @_close[I32](fd: I32) if windows use @close[I32](fd: I32) if not windows use @pony_os_writev_max[I32]() use @pony_os_errno[I32]() use \"collections\" primitive FileOK primitive FileError primitive FileEOF primitive FileBadFileNumber primitive FileExists primitive FilePermissionDenied primitive _EBADF fun apply(): I32 => 9 primitive _EEXIST fun apply(): I32 => 17 primitive _EACCES fun apply(): I32 => 13 type FileErrNo is ( FileOK | FileError | FileEOF | FileBadFileNumber | FileExists | FilePermissionDenied ) primitive CreateFile \"\"\" Open a File for read/write, creating if it doesn't exist, preserving the contents if it does exist. \"\"\" fun apply(from: FilePath): (File | FileErrNo) => let file = File(from) let err = file.errno() match err | FileOK => file else err end primitive OpenFile \"\"\" Open a File for read only. \"\"\" fun apply(from: FilePath): (File | FileErrNo) => let file = File.open(from) let err = file.errno() match err | FileOK => file else err end class File \"\"\" Operations on a file. \"\"\" let path: FilePath \"\"\" This is the filesystem path locating this file on the file system and an object capability granting access to operate on this file. \"\"\" let writeable: Bool \"\"\" `true` if the underlying file descriptor has been opened as writeable. \"\"\" let _newline: String = \"\\n\" var _unsynced_data: Bool = false var _unsynced_metadata: Bool = false var _fd: I32 var _errno: FileErrNo = FileOK embed _pending_writev: Array[(Pointer[U8] tag, USize)] = _pending_writev.create() var _pending_writev_total: USize = 0 new create(from: FilePath) => \"\"\" Attempt to open for read/write, creating if it doesn't exist, preserving the contents if it does exist. Set errno according to result. \"\"\" path = from writeable = true _fd = -1 if not from.caps(FileRead) or not from.caps(FileWrite) then _errno = FileError else var flags: I32 = @ponyint_o_rdwr() let mode = FileMode._os() // default file permissions if not path.exists() then if not path.caps(FileCreate) then _errno = FileError else flags = flags or @ponyint_o_creat() or @ponyint_o_trunc() end end _fd = ifdef windows then @_open[I32](path.path.cstring(), flags, mode.i32()) else @open[I32](path.path.cstring(), flags, mode) end if _fd == -1 then _errno = _get_error() else try _FileDes.set_rights(_fd, path, writeable)? else _errno = FileError end end end new open(from: FilePath) => \"\"\" Open for read only. Set _errno according to result. \"\"\" path = from writeable = false _fd = -1 if not path.caps(FileRead) or try let info' = FileInfo(path)? info'.directory or info'.pipe else true end then _errno = FileError else _fd = ifdef windows then @_open[I32](path.path.cstring(), @ponyint_o_rdonly()) else @open[I32](path.path.cstring(), @ponyint_o_rdonly()) end if _fd == -1 then _errno = _get_error() else try _FileDes.set_rights(_fd, path, writeable)? else _errno = FileError end end end new _descriptor(fd: I32, from: FilePath) ? => \"\"\" Internal constructor from a file descriptor and a path. \"\"\" if not from.caps(FileRead) or (fd == -1) then error end path = from writeable = from.caps(FileWrite) _fd = fd _FileDes.set_rights(_fd, path, writeable)? fun errno(): FileErrNo => \"\"\" Returns the last error code set for this File \"\"\" _errno fun ref clear_errno() => \"\"\" Clears the last error code set for this File. Clears the error indicator for the stream. \"\"\" _errno = FileOK fun _get_error(): FileErrNo => \"\"\" Fetch errno from the OS. \"\"\" let os_errno = @pony_os_errno() match os_errno | _EBADF() => return FileBadFileNumber | _EEXIST() => return FileExists | _EACCES() => return FilePermissionDenied else return FileError end fun valid(): Bool => \"\"\" Returns true if the file is currently open. \"\"\" not (_fd == -1) fun ref read(len: USize): Array[U8] iso^ => \"\"\" Returns up to len bytes. \"\"\" if _fd != -1 then let result = recover Array[U8] .> undefined(len) end let r = (ifdef windows then @_read(_fd, result.cpointer(), len.i32()) else @read(_fd, result.cpointer(), len) end) .isize() match r | 0 => _errno = FileEOF | -1 => _errno = _get_error() end result.truncate(r.usize()) result else recover Array[U8] end end fun ref read_string(len: USize): String iso^ => \"\"\" Returns up to len bytes. The resulting string may have internal null characters. \"\"\" if _fd != -1 then let result = recover String(len) end let r = (ifdef windows then @_read(_fd, result.cpointer(), result.space().i32()) else @read(_fd, result.cpointer(), result.space()) end).isize() match r | 0 => _errno = FileEOF | -1 => _errno = _get_error() end result.truncate(r.usize()) result else recover String end end fun ref print(data: ByteSeq box): Bool => \"\"\" Same as write, buts adds a newline. \"\"\" queue(data) queue(_newline) _pending_writes() fun ref printv(data: ByteSeqIter box): Bool => \"\"\" Print an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do queue(bytes) queue(_newline) end _pending_writes() fun ref write(data: ByteSeq box): Bool => \"\"\" Returns false if the file wasn't opened with write permission. Returns false and closes the file if not all the bytes were written. \"\"\" queue(data) _pending_writes() fun ref writev(data: ByteSeqIter box): Bool => \"\"\" Write an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do queue(bytes) end _pending_writes() fun ref queue(data: ByteSeq box) => \"\"\" Queue data to be written NOTE: Queue'd data will always be written before normal print/write requested data \"\"\" _pending_writev .> push((data.cpointer(), data.size())) _pending_writev_total = _pending_writev_total + data.size() fun ref queuev(data: ByteSeqIter box) => \"\"\" Queue an iterable collection of ByteSeqs to be written NOTE: Queue'd data will always be written before normal print/write requested data \"\"\" for bytes in data.values() do queue(bytes) end fun ref flush(): Bool => \"\"\" Flush any queued data \"\"\" _pending_writes() fun ref _pending_writes(): Bool => \"\"\" Write pending data. Returns false if the file wasn't opened with write permission. Returns false and closes the file and discards all pending data if not all the bytes were written. Returns true if it sent all pending data. \"\"\" try (let result, let num_written, let new_pending_total) = _write_to_disk()? _pending_writev_total = new_pending_total if _pending_writev_total == 0 then _pending_writev.clear() _unsynced_data = true _unsynced_metadata = true else if num_written > 0 then _unsynced_data = true _unsynced_metadata = true end for d in Range[USize](0, num_written, 1) do _pending_writev.shift()? end end return result else // TODO: error recovery? EINTR? // check error _errno = _get_error() dispose() return false end fun _write_to_disk(): (Bool, USize, USize) ? => \"\"\" Write pending data. Returns false if the file wasn't opened with write permission. Raises an error if not all the bytes were written. Returns true if it sent all pending data. Returns num_processed and new pending_total also. \"\"\" var num_to_send: I32 = 0 var num_sent: USize = 0 var bytes_to_send: USize = 0 var pending_total = _pending_writev_total if (not writeable) or (_fd == -1) then return (false, num_sent, pending_total) end // TODO: Make writev_batch_size user configurable let writev_batch_size = @pony_os_writev_max() while pending_total > 0 do // Determine the number of bytes and buffers to send. num_to_send = _pending_writev.size().i32() - num_sent.i32() if num_to_send <= writev_batch_size then bytes_to_send = pending_total else // We have more buffers than a single writev can handle. // We must iterate over the buffers being sent to add up to the total. num_to_send = writev_batch_size bytes_to_send = 0 var counter: I32 = num_sent.i32() repeat bytes_to_send = bytes_to_send + _pending_writev(counter.usize())?._2 counter = counter + 1 until counter >= num_to_send end end // Write as much data as possible (vectored i/o). // On Windows only write 1 buffer at a time. var len = ifdef windows then @_write(_fd, _pending_writev(num_sent)?._1, bytes_to_send.i32()).isize() else @writev(_fd, _pending_writev.cpointer(num_sent), num_to_send).isize() end if len < bytes_to_send.isize() then error end // We've sent all the data we requested in this batch. pending_total = pending_total - bytes_to_send num_sent = num_sent + num_to_send.usize() end (true, num_sent, pending_total) fun ref position(): USize => \"\"\" Return the current cursor position in the file. \"\"\" if _fd != -1 then let o: I64 = 0 let b: I32 = 1 let r = ifdef windows then @_lseeki64(_fd, o, b) else ifdef linux then @lseek64(_fd, o, b) else @lseek(_fd, o, b) end end if r < 0 then _errno = _get_error() end r.usize() else 0 end fun ref size(): USize => \"\"\" Return the total length of the file. \"\"\" let pos = position() _seek(0, 2) let len = position() _seek(pos.i64(), 0) len fun ref seek_start(offset: USize) => \"\"\" Set the cursor position relative to the start of the file. \"\"\" if path.caps(FileSeek) then _seek(offset.i64(), 0) end fun ref seek_end(offset: USize) => \"\"\" Set the cursor position relative to the end of the file. \"\"\" if path.caps(FileSeek) then _seek(-offset.i64(), 2) end fun ref seek(offset: ISize) => \"\"\" Move the cursor position. \"\"\" if path.caps(FileSeek) then _seek(offset.i64(), 1) end fun ref sync() => \"\"\" Sync the file contents to physical storage. \"\"\" if path.caps(FileSync) and (_fd != -1) then ifdef windows then let r = @FlushFileBuffers(@_get_osfhandle(_fd)) if r == true then _errno = FileError end else let r = @fsync(_fd) if r < 0 then _errno = _get_error() end end end _unsynced_data = false _unsynced_metadata = false fun ref datasync() => \"\"\" Sync the file contents to physical storage. \"\"\" if path.caps(FileSync) and (_fd != -1) then ifdef windows then let r = @FlushFileBuffers(@_get_osfhandle(_fd)) if r == true then _errno = FileError end else let r = @fdatasync(_fd) if r < 0 then _errno = _get_error() end end end _unsynced_data = false fun ref set_length(len: USize): Bool => \"\"\" Change the file size. If it is made larger, the new contents are undefined. \"\"\" if path.caps(FileTruncate) and writeable and (_fd != -1) then let pos = position() let result = ifdef windows then @_chsize_s(_fd, len.i64()) else ifdef linux then @ftruncate64(_fd, len.i64()) else @ftruncate(_fd, len.i64()) end end if pos >= len then _seek(0, 2) end if result == 0 then true else _errno = _get_error() false end else false end fun info(): FileInfo ? => \"\"\" Return a FileInfo for this directory. Raise an error if the fd is invalid or if we don't have FileStat permission. \"\"\" FileInfo._descriptor(_fd, path)? fun chmod(mode: FileMode box): Bool => \"\"\" Set the FileMode for this directory. \"\"\" _FileDes.chmod(_fd, path, mode) fun chown(uid: U32, gid: U32): Bool => \"\"\" Set the owner and group for this directory. Does nothing on Windows. \"\"\" _FileDes.chown(_fd, path, uid, gid) fun touch(): Bool => \"\"\" Set the last access and modification times of the directory to now. \"\"\" _FileDes.touch(_fd, path) fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool => \"\"\" Set the last access and modification times of the directory to the given values. \"\"\" _FileDes.set_time(_fd, path, atime, mtime) fun ref lines(): FileLines => \"\"\" Returns an iterator for reading lines from the file. \"\"\" FileLines(this) fun ref dispose() => \"\"\" Close the file. Future operations will do nothing. \"\"\" if _fd != -1 then if (_pending_writev_total > 0) and (_errno is FileOK) then flush() end if _unsynced_data or _unsynced_metadata then sync() end let r = ifdef windows then @_close(_fd) else @close(_fd) end if r < 0 then _errno = _get_error() end _fd = -1 _pending_writev_total = 0 _pending_writev.clear() end fun ref _seek(offset: I64, base: I32) => \"\"\" Move the cursor position. \"\"\" if _fd != -1 then let r = ifdef windows then @_lseeki64(_fd, offset, base) else ifdef linux then @lseek64(_fd, offset, base) else @lseek(_fd, offset, base) end end if r < 0 then _errno = _get_error() end end fun _final() => \"\"\" Close the file. \"\"\" if _fd != -1 then if (_pending_writev_total > 0) and (_errno is FileOK) then // attempt to write any buffered data try _write_to_disk()? end end if _unsynced_data or _unsynced_metadata then // attempt to sync any un-synced data if (path.caps.value() and FileSync.value()) > 0 then ifdef windows then @FlushFileBuffers(@_get_osfhandle(_fd)) else @fsync(_fd) end end end // close file ifdef windows then @_close(_fd) else @close(_fd) end end","title":"file.pony"},{"location":"src/files/file_caps/","text":"use \"collections\" primitive FileCreate fun value(): U32 => 1 << 0 primitive FileChmod fun value(): U32 => 1 << 1 primitive FileChown fun value(): U32 => 1 << 2 primitive FileLink fun value(): U32 => 1 << 3 primitive FileLookup fun value(): U32 => 1 << 4 primitive FileMkdir fun value(): U32 => 1 << 5 primitive FileRead fun value(): U32 => 1 << 6 primitive FileRemove fun value(): U32 => 1 << 7 primitive FileRename fun value(): U32 => 1 << 8 primitive FileSeek fun value(): U32 => 1 << 9 primitive FileStat fun value(): U32 => 1 << 10 primitive FileSync fun value(): U32 => 1 << 11 primitive FileTime fun value(): U32 => 1 << 12 primitive FileTruncate fun value(): U32 => 1 << 13 primitive FileWrite fun value(): U32 => 1 << 14 primitive FileExec fun value(): U32 => 1 << 15 type FileCaps is Flags[ ( FileCreate | FileChmod | FileChown | FileLink | FileLookup | FileMkdir | FileRead | FileRemove | FileRename | FileSeek | FileStat | FileSync | FileTime | FileTruncate | FileWrite | FileExec ), U32 ]","title":"file_caps.pony"},{"location":"src/files/file_info/","text":"class val FileInfo \"\"\" This contains file system metadata for a path. A symlink will report information about itself, other than the size which will be the size of the target. A broken symlink will report as much as it can and will set the broken flag. \"\"\" let filepath: FilePath let mode: FileMode val = recover FileMode end \"\"\"UNIX-style file mode.\"\"\" let hard_links: U32 = 0 \"\"\"Number of hardlinks to this `filepath`.\"\"\" let device: U64 = 0 \"\"\" OS id of the device containing this `filepath`. Device IDs consist of a major and minor device id, denoting the type of device and the instance of this type on the system. \"\"\" let inode: U64 = 0 \"\"\"UNIX specific INODE number of `filepath`. Is 0 on Windows.\"\"\" let uid: U32 = 0 \"\"\"UNIX-style user ID of the owner of `filepath`.\"\"\" let gid: U32 = 0 \"\"\"UNIX-style user ID of the owning group of `filepath`.\"\"\" let size: USize = 0 \"\"\" Total size of `filepath` in bytes. In case of a symlink this is the size of the target, not the symlink itself. \"\"\" let access_time: (I64, I64) = (0, 0) \"\"\" Time of last access as a tuple of seconds and nanoseconds since the epoch: ```pony (let a_secs: I64, let a_nanos: I64) = file_info.access_time ``` \"\"\" let modified_time: (I64, I64) = (0, 0) \"\"\" Time of last modification as tuple of seconds and nanoseconds since the epoch: ```pony (let m_secs: I64, let m_nanos: I64) = file_info.modified_time ``` \"\"\" let change_time: (I64, I64) = (0, 0) \"\"\" Time of the last change either the attributes (number of links, owner, group, file mode, ...) or the content of `filepath` as a tuple of seconds and nanoseconds since the epoch: ```pony (let c_secs: I64, let c_nanos: I64) = file_info.change_time ``` On Windows this will be the file creation time. \"\"\" let file: Bool = false \"\"\"`true` if `filepath` points to an a regular file.\"\"\" let directory: Bool = false \"\"\"`true` if `filepath` points to a directory.\"\"\" let pipe: Bool = false \"\"\"`true` if `filepath` points to a named pipe.\"\"\" let symlink: Bool = false \"\"\"`true` if `filepath` points to a symbolic link.\"\"\" let broken: Bool = false \"\"\"`true` if `filepath` points to a broken symlink.\"\"\" new val create(from: FilePath) ? => \"\"\" This will raise an error if the FileStat capability isn't available or the path doesn't exist. \"\"\" if not from.caps(FileStat) then error end filepath = from if not @pony_os_stat[Bool](from.path.cstring(), this) then error end new val _descriptor(fd: I32, path: FilePath) ? => \"\"\" This will raise an error if the FileStat capability isn't available or the file descriptor is invalid. \"\"\" if not path.caps(FileStat) or (fd == -1) then error end filepath = path let fstat = @pony_os_fstat[Bool](fd, path.path.cstring(), this) if not fstat then error end new val _relative(fd: I32, path: FilePath, from: String) ? => if not path.caps(FileStat) or (fd == -1) then error end filepath = path let fstatat = @pony_os_fstatat[Bool](fd, from.cstring(), this) if not fstatat then error end","title":"file_info.pony"},{"location":"src/files/file_lines/","text":"use \"buffered\" class FileLines is Iterator[String iso^] \"\"\" Iterate over the lines in a file. Returns lines without trailing line breaks. Advances the file cursor to the end of each line returned from `next`. This class buffers the file contents to accumulate full lines. If the file does not contain linebreaks, the whole file content is read and buffered, which might exceed memory resources. Take care. \"\"\" let _reader: Reader = Reader let _file: File let _min_read_size: USize var _last_line_length: USize var _buffer_cursor: USize \"\"\"Internal cursor for keeping track until where in the file we already buffered.\"\"\" var _cursor: USize \"\"\"Keeps track of the file position we update after every returned line.\"\"\" var _has_next: Bool new create(file: File, min_read_size: USize = 256) => \"\"\" Create a FileLines instance on a given file. This instance returns lines from the position of the given `file` at the time this constructor is called. Later manipulation of the file position is not accounted for. As a result iterating with this class will always return the full file content without gaps or repeated lines. `min_read_size` determines the minimum amount of bytes to read from the file in one go. This class keeps track of the line lengths in the current file and uses the length of the last line as amount of bytes to read next, but it will never read less than `min_read_size`. \"\"\" _file = file _buffer_cursor = _file.position() _cursor = _file.position() _min_read_size = min_read_size _last_line_length = min_read_size _has_next = _file.valid() fun ref has_next(): Bool => _has_next fun ref next(): String iso^ ? => \"\"\" Returns the next line in the file. \"\"\" while true do try return _read_line()? else if not _fill_buffer() then // nothing to read from file, we can savely exit here break end end end _has_next = false if _reader.size() > 0 then // don't forget the last line _read_last_line()? else // nothing to return, we can only error here error end fun ref _read_line(): String iso^ ? => let line = _reader.line(where keep_line_breaks = true)? let len = line.size() _last_line_length = len // advance the cursor to the end of the returned line _inc_public_file_cursor(len) // strip trailing line break line.truncate( len - if (len >= 2) and (line.at_offset(-2)? == '\\r') then 2 else 1 end) consume line fun ref _fill_buffer(): Bool => \"\"\" read from file and fill the reader-buffer. Returns `true` if data could be read from the file. After a successful reading operation `_buffer_cursor` is updated. \"\"\" var result = true // get back to position of last line let current_pos = _file.position() _file.seek_start(_buffer_cursor) if _file.valid() then let read_bytes = _last_line_length.max(_min_read_size) let read_buf = _file.read(read_bytes) _buffer_cursor = _file.position() let errno = _file.errno() if (read_buf.size() == 0) and (errno isnt FileOK) then result = false else // TODO: Limit size of read buffer _reader.append(consume read_buf) end else result = false end // reset position to not disturb other operations on the file // we only actually advance the cursor if the line is returned. _file.seek_start(current_pos) result fun ref _read_last_line(): String iso^ ? => let block = _reader.block(_reader.size())? _inc_public_file_cursor(block.size()) String.from_iso_array(consume block) fun ref _inc_public_file_cursor(amount: USize) => _cursor = _cursor + amount _file.seek_start(_cursor)","title":"file_lines.pony"},{"location":"src/files/file_mode/","text":"class FileMode \"\"\" This stores a UNIX-style mode broken out into a Bool for each bit. For other operating systems, the mapping will be approximate. For example, on Windows, if the file is readable all the read Bools will be set, and if the file is writeable, all the write Bools will be set. The default mode is read/write for the owner, read-only for everyone else. \"\"\" var setuid: Bool = false \"\"\"`true` if the SETUID bit is set.\"\"\" var setgid: Bool = false \"\"\"`true` if the SETGID bit is set.\"\"\" var sticky: Bool = false \"\"\"`true` if the sticky bit is set.\"\"\" var owner_read: Bool = true \"\"\"`true` if the owning user can read the file.\"\"\" var owner_write: Bool = true \"\"\"`true` if the owning user can write to the file.\"\"\" var owner_exec: Bool = false \"\"\"`true` if the owning user can execute the file.\"\"\" var group_read: Bool = true \"\"\"`true` if members of the owning group can read the file.\"\"\" var group_write: Bool = false \"\"\"`true` if members of the owning group can write to the file.\"\"\" var group_exec: Bool = false \"\"\"`true` if members of the owning group can execute the file.\"\"\" var any_read: Bool = true \"\"\"`true` if every user can read the file.\"\"\" var any_write: Bool = false \"\"\"`true` if every user can write to the file.\"\"\" var any_exec: Bool = false \"\"\"`true if every user can execute the file.\"\"\" fun ref exec() => \"\"\" Set the executable flag for everyone. \"\"\" owner_exec = true group_exec = true any_exec = true fun ref shared() => \"\"\" Set the write flag for everyone to the same as owner_write. \"\"\" group_write = owner_write any_write = owner_write fun ref group() => \"\"\" Clear all of the any-user flags. \"\"\" any_read = false any_write = false any_exec = false fun ref private() => \"\"\" Clear all of the group and any-user flags. \"\"\" group_read = false group_write = false group_exec = false any_read = false any_write = false any_exec = false fun _os(): U32 => \"\"\" Get the OS specific integer for a file mode. On Windows, if any read flag is set, the path is made readable, and if any write flag is set, the path is made writeable. \"\"\" var m: U32 = 0 ifdef windows then if owner_read or group_read or any_read then m = m or 0x100 end if owner_write or group_write or any_write then m = m or 0x80 end else if setuid then m = m or 0x800 end if setgid then m = m or 0x400 end if sticky then m = m or 0x200 end if owner_read then m = m or 0x100 end if owner_write then m = m or 0x80 end if owner_exec then m = m or 0x40 end if group_read then m = m or 0x20 end if group_write then m = m or 0x10 end if group_exec then m = m or 0x8 end if any_read then m = m or 0x4 end if any_write then m = m or 0x2 end if any_exec then m = m or 0x1 end end m","title":"file_mode.pony"},{"location":"src/files/file_path/","text":"use \"time\" interface WalkHandler \"\"\" A handler for `FilePath.walk`. \"\"\" fun ref apply(dir_path: FilePath, dir_entries: Array[String] ref) class val FilePath \"\"\" A FilePath represents a capability to access a path. The path will be represented as an absolute path and a set of capabilities for operations on that path. \"\"\" let path: String \"\"\" Absolute filesystem path. \"\"\" let caps: FileCaps = FileCaps \"\"\" Set of capabilities for operations on `path`. \"\"\" new val create( base: (FilePath | AmbientAuth), path': String, caps': FileCaps val = recover val FileCaps .> all() end) ? => \"\"\" Create a new path. The caller must either provide the root capability or an existing FilePath. If the root capability is provided, path' will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the parent. \"\"\" caps.union(caps') path = match base | let b: FilePath => if not b.caps(FileLookup) then error end let tmp_path = Path.join(b.path, path') caps.intersect(b.caps) if not tmp_path.at(b.path, 0) then error end tmp_path | let b: AmbientAuth => Path.abs(path') end new val mkdtemp( base: (FilePath | AmbientAuth), prefix: String = \"\", caps': FileCaps val = recover val FileCaps .> all() end) ? => \"\"\" Create a temporary directory and returns a path to it. The directory's name will begin with `prefix`. The caller must either provide the root capability or an existing FilePath. If AmbientAuth is provided, pattern will be relative to the program's working directory. Otherwise, it will be relative to the existing FilePath, and the existing FilePath must be a prefix of the resulting path. The resulting FilePath will have capabilities that are the intersection of the supplied capabilities and the capabilities on the base. \"\"\" (let dir, let pre) = Path.split(prefix) let parent = FilePath(base, dir)? if not parent.mkdir() then error end var temp = FilePath(parent, pre + Path.random())? while not temp.mkdir(true) do temp = FilePath(parent, pre + Path.random())? end caps.union(caps') caps.intersect(temp.caps) path = temp.path new val _create(path': String, caps': FileCaps val) => \"\"\" Internal constructor. \"\"\" path = path' caps.union(caps') fun val join( path': String, caps': FileCaps val = recover val FileCaps .> all() end) : FilePath ? => \"\"\" Return a new path relative to this one. \"\"\" create(this, path', caps')? fun val walk(handler: WalkHandler ref, follow_links: Bool = false) => \"\"\" Walks a directory structure starting at this. `handler(dir_path, dir_entries)` will be called for each directory starting with this one. The handler can control which subdirectories are expanded by removing them from the `dir_entries` list. \"\"\" try with dir = Directory(this)? do var entries: Array[String] ref = dir.entries()? handler(this, entries) for e in entries.values() do let p = this.join(e)? let info = FileInfo(p)? if info.directory and (follow_links or not info.symlink) then p.walk(handler, follow_links) end end end else return end fun val canonical(): FilePath ? => \"\"\" Return the equivalent canonical absolute path. Raise an error if there isn't one. \"\"\" _create(Path.canonical(path)?, caps) fun val exists(): Bool => \"\"\" Returns true if the path exists. Returns false for a broken symlink. \"\"\" try not FileInfo(this)?.broken else false end fun val mkdir(must_create: Bool = false): Bool => \"\"\" Creates the directory. Will recursively create each element. Returns true if the directory exists when we're done, false if it does not. If we do not have the FileStat permission, this will return false even if the directory does exist. \"\"\" if not caps(FileMkdir) then return false end var offset: ISize = 0 repeat let element = try offset = path.find(Path.sep(), offset)? + 1 path.substring(0, offset - 1) else offset = -1 path end if element.size() > 0 then let r = ifdef windows then @_mkdir[I32](element.cstring()) else @mkdir[I32](element.cstring(), U32(0x1FF)) end if r != 0 then if @pony_os_errno[I32]() != @pony_os_eexist[I32]() then return false end if must_create and (offset < 0) then return false end end end until offset < 0 end try FileInfo(this)?.directory else false end fun val remove(): Bool => \"\"\" Remove the file or directory. The directory contents will be removed as well, recursively. Symlinks will be removed but not traversed. \"\"\" if not caps(FileRemove) then return false end try let info = FileInfo(this)? if info.directory and not info.symlink then let directory = Directory(this)? for entry in directory.entries()?.values() do if not join(entry)?.remove() then return false end end end ifdef windows then if info.directory and not info.symlink then 0 == @_rmdir[I32](path.cstring()) else 0 == @_unlink[I32](path.cstring()) end else if info.directory and not info.symlink then 0 == @rmdir[I32](path.cstring()) else 0 == @unlink[I32](path.cstring()) end end else false end fun rename(new_path: FilePath): Bool => \"\"\" Rename a file or directory. \"\"\" if not caps(FileRename) or not new_path.caps(FileCreate) then return false end 0 == @rename[I32](path.cstring(), new_path.path.cstring()) fun symlink(link_name: FilePath): Bool => \"\"\" Create a symlink to a file or directory. \"\"\" if not caps(FileLink) or not link_name.caps(FileCreate) then return false end ifdef windows then 0 != @CreateSymbolicLink[U8](link_name.path.cstring(), path.cstring()) else 0 == @symlink[I32](path.cstring(), link_name.path.cstring()) end fun chmod(mode: FileMode box): Bool => \"\"\" Set the FileMode for a path. \"\"\" if not caps(FileChmod) then return false end let m = mode._os() ifdef windows then 0 == @_chmod[I32](path.cstring(), m) else 0 == @chmod[I32](path.cstring(), m) end fun chown(uid: U32, gid: U32): Bool => \"\"\" Set the owner and group for a path. Does nothing on Windows. \"\"\" ifdef windows then false else if caps(FileChown) then 0 == @chown[I32](path.cstring(), uid, gid) else false end end fun touch(): Bool => \"\"\" Set the last access and modification times of a path to now. \"\"\" set_time(Time.now(), Time.now()) fun set_time(atime: (I64, I64), mtime: (I64, I64)): Bool => \"\"\" Set the last access and modification times of a path to the given values. \"\"\" if not caps(FileTime) then return false end ifdef windows then var tv: (I64, I64) = (atime._1, mtime._1) 0 == @_utime64[I32](path.cstring(), addressof tv) else var tv: (ILong, ILong, ILong, ILong) = ( atime._1.ilong(), atime._2.ilong() / 1000, mtime._1.ilong(), mtime._2.ilong() / 1000 ) 0 == @utimes[I32](path.cstring(), addressof tv) end","title":"file_path.pony"},{"location":"src/files/file_stream/","text":"actor FileStream is OutStream \"\"\" Asynchronous access to a File object. Wraps file operations print, write, printv and writev. The File will be disposed through File._final. \"\"\" let _file: File new create(file: File iso) => _file = consume file be print(data: ByteSeq) => \"\"\" Print some bytes and insert a newline afterwards. \"\"\" _file.print(data) be write(data: ByteSeq) => \"\"\" Print some bytes without inserting a newline afterwards. \"\"\" _file.write(data) be printv(data: ByteSeqIter) => \"\"\" Print an iterable collection of ByteSeqs. \"\"\" _file.printv(data) be writev(data: ByteSeqIter) => \"\"\" Write an iterable collection of ByteSeqs. \"\"\" _file.writev(data) be flush() => \"\"\" Flush pending data to write. \"\"\" _file.flush()","title":"file_stream.pony"},{"location":"src/files/path/","text":"use \"time\" primitive _PathSep primitive _PathDot primitive _PathDot2 primitive _PathOther type _PathState is (_PathSep | _PathDot | _PathDot2 | _PathOther) primitive Path \"\"\" Operations on paths that do not require a capability. The operations can be used to manipulate path names, but give no access to the resulting paths. \"\"\" fun is_sep(c: U8): Bool => \"\"\" Determine if a byte is a path separator. \"\"\" ifdef windows then (c == '/') or (c == '\\\\') else c == '/' end fun tag sep(): String => \"\"\" Return the path separator as a string. \"\"\" ifdef windows then \"\\\\\" else \"/\" end fun is_abs(path: String): Bool => \"\"\" Return true if the path is an absolute path. \"\"\" try ifdef windows then is_sep(path(0)?) or _drive_letter(path) else is_sep(path(0)?) end else false end fun join(path: String, next_path: String): String => \"\"\" Join two paths together. If the next_path is absolute, simply return it. The returned path will be cleaned. \"\"\" if path.size() == 0 then clean(next_path) elseif next_path.size() == 0 then clean(path) elseif is_abs(next_path) then clean(next_path) else try if is_sep(path(path.size()-1)?) then if is_sep(next_path(0)?) then return clean(path + next_path.trim(1)) else return clean(path + next_path) end end end clean(path + sep() + next_path) end fun clean(path: String): String => \"\"\" Replace multiple separators with a single separator. Convert / to the OS separator. Remove instances of . from the path. Remove instances of .. and the preceding path element from the path. The result will have no trailing slash unless it is a root directory. If the result would be empty, \".\" will be returned instead. \"\"\" let s = recover String(path.size()) end let vol = volume(path) s.append(vol) var state: _PathState = _PathOther var i = vol.size() var backtrack = ISize(-1) let n = path.size() try var c = path(i)? if is_sep(c) then s.append(sep()) i = i + 1 state = _PathSep elseif c == '.' then i = i + 1 state = _PathDot else backtrack = s.size().isize() end while i < n do c = path(i)? if is_sep(c) then match state | _PathDot2 => if backtrack == -1 then s.append(\"..\") s.append(sep()) else s.delete(backtrack, -1) try backtrack = s.rfind(sep(), backtrack - 2)? + 1 else backtrack = vol.size().isize() end if (s.size() == 0) or (s.compare_sub(\"../\", 3, backtrack) is Equal) or ifdef windows then s.compare_sub(\"..\\\\\", 3, backtrack) is Equal else false end then backtrack = -1 end end | _PathOther => s.append(sep()) end state = _PathSep elseif c == '.' then match state | _PathSep => state = _PathDot | _PathDot => state = _PathDot2 | _PathDot2 => backtrack = s.size().isize() s.append(\"...\") state = _PathOther | _PathOther => s.append(\".\") end else match state | _PathSep => backtrack = s.size().isize() | _PathDot => backtrack = s.size().isize() s.append(\".\") | _PathDot2 => backtrack = s.size().isize() s.append(\"..\") end s.push(c) state = _PathOther end i = i + 1 end end match state | _PathDot2 => if backtrack == -1 then s.append(\"..\") else s.delete(backtrack, -1) end end try if is_sep(s(s.size()-1)?) and (s.size() > 1) then s.delete(-1, sep().size()) end end if s.size() > 0 then s else \".\" end fun normcase(path: String): String => \"\"\" Normalizes the case of path for the runtime platform. \"\"\" if Platform.windows() then recover val path.lower() .> replace(\"/\", \"\\\\\") end elseif Platform.osx() then path.lower() else path end fun cwd(): String => \"\"\" Returns the program's working directory. Setting the working directory is not supported, as it is not concurrency-safe. \"\"\" recover String.from_cstring(@pony_os_cwd[Pointer[U8]]()) end fun abs(path: String): String => \"\"\" Returns a cleaned, absolute path. \"\"\" if is_abs(path) then clean(path) else join(cwd(), path) end fun rel(to: String, target: String): String ? => \"\"\" Returns a path such that Path.join(to, Path.rel(to, target)) == target. Raises an error if this isn't possible. \"\"\" var to_clean = clean(to) var target_clean = clean(target) if to_clean == target_clean then return \".\" end var to_i: ISize = 0 ifdef windows then to_clean = abs(to_clean) target_clean = abs(target_clean) let to_vol = volume(to_clean) let target_vol = volume(target_clean) if to_vol != target_vol then error end to_i = to_vol.size().isize() end var to_0 = to_i var target_i = to_i var target_0 = target_i while true do to_i = try to_clean.find(sep(), to_i)? else to_clean.size().isize() end target_i = try target_clean.find(sep(), target_i)? else target_clean.size().isize() end if (to_i != target_i) or (to_clean.compare_sub(target_clean, target_i.usize()) isnt Equal) then break end if to_i < to_clean.size().isize() then to_i = to_i + 1 end if target_i < target_clean.size().isize() then target_i = target_i + 1 end to_0 = to_i target_0 = target_i end if ((to_i - to_0) == 2) and (to_clean.compare_sub(\"..\", 2, to_0) is Equal) then error end if to_0.usize() != to_clean.size() then let result = recover String end try while true do to_i = to_clean.find(sep(), to_i)? + 1 result.append(\"..\") result.append(sep()) end end result.append(\"..\") result.append(sep()) result.append(target_clean.trim(target_0.usize())) result else target_clean.trim(target_0.usize()) end fun split(path: String, separator: String = Path.sep()): (String, String) => \"\"\" Splits the path into a pair, (head, tail) where tail is the last pathname component and head is everything leading up to that. The tail part will never contain a slash; if path ends in a slash, tail will be empty. If there is no slash in path, head will be empty. If path is empty, both head and tail are empty. The path in head will be cleaned before it is returned. In all cases, join(head, tail) returns a path to the same location as path (but the strings may differ). Also see the functions dir() and base(). \"\"\" try let i = path.rfind(separator)?.usize() (clean(path.trim(0, i)), path.trim(i+separator.size())) else (\"\", path) end fun base(path: String, with_ext: Bool = true): String => \"\"\" Return the path after the last separator, or the whole path if there is no separator. If `with_ext` is `false`, the extension as defined by the `ext()` method will be omitted from the result. \"\"\" let b = try path.trim(path.rfind(sep())?.usize() + 1) else path end if with_ext then b else let e_size = ext(b).size() if e_size > 0 then b.trim(0, b.size() - e_size - 1) else b end end fun dir(path: String): String => \"\"\" Return a cleaned path before the last separator, or the whole path if there is no separator. \"\"\" try clean(path.trim(0, path.rfind(sep())?.usize())) else path end fun ext(path: String): String => \"\"\" Return the file extension, i.e. the part after the last dot as long as that dot is after all separators. Return an empty string for no extension. \"\"\" try let i = path.rfind(\".\")? let j = try path.rfind(sep())? else i end if i >= j then return path.trim(i.usize() + 1) end end \"\" fun volume(path: String): String => \"\"\" On Windows, this returns the drive letter or UNC base at the beginning of the path, if there is one. Otherwise, this returns an empty string. \"\"\" ifdef windows then var offset = ISize(0) if path.compare_sub(\"\"\"\\\\?\\\"\"\", 4) is Equal then offset = 4 if path.compare_sub(\"\"\"UNC\\\"\"\", 4, offset) is Equal then return _network_share(path, offset + 4) end end if _drive_letter(path, offset) then return path.trim(0, offset.usize() + 2) end try if is_sep(path.at_offset(offset)?) and is_sep(path.at_offset(offset + 1)?) then return _network_share(path, offset + 3) end end end \"\" fun _drive_letter(path: String, offset: ISize = 0): Bool => \"\"\" Look for a drive letter followed by a ':', returning true if we find it. \"\"\" try let c = path.at_offset(offset)? (((c >= 'A') and (c <= 'Z')) or ((c >= 'a') and (c <= 'z'))) and (path.at_offset(offset + 1)? == ':') else false end fun _network_share(path: String, offset: ISize = 0): String => \"\"\" Look for a host, a \\, and a resource. Return the path up to that point if we found one, otherwise an empty String. \"\"\" try let next = path.find(\"\\\\\", offset)? + 1 try path.trim(0, path.find(\"\\\\\", next)?.usize()) else path end else \"\" end fun from_slash(path: String): String => \"\"\" Changes each / in the path to the OS specific separator. \"\"\" ifdef windows then let s = path.clone() let len = s.size() var i = USize(0) try while i < len do if s(i)? == '/' then s(i)? = '\\\\' end i = i + 1 end end s else path end fun to_slash(path: String): String => \"\"\" Changes each OS specific separator in the path to /. \"\"\" ifdef windows then let s = path.clone() let len = s.size() var i = USize(0) try while i < len do if s(i)? == '\\\\' then s(i)? = '/' end i = i + 1 end end s else path end fun canonical(path: String): String ? => \"\"\" Return the equivalent canonical absolute path. Raise an error if there isn't one. \"\"\" let cstring = @pony_os_realpath[Pointer[U8] iso^]( path.cstring()) if cstring.is_null() then error else recover String.from_cstring(consume cstring) end end fun is_list_sep(c: U8): Bool => \"\"\" Determine if a byte is a path list separator. \"\"\" ifdef windows then c == ';' else c == ':' end fun list_sep(): String => \"\"\" Return the path list separator as a string. \"\"\" ifdef windows then \";\" else \":\" end fun split_list(path: String): Array[String] iso^ => \"\"\" Separate a list of paths into an array of cleaned paths. \"\"\" let array = recover Array[String] end var offset: ISize = 0 try while true do let next = path.find(list_sep(), offset)? array.push(clean(path.trim(offset.usize(), next.usize()))) offset = next + 1 end else array.push(clean(path.trim(offset.usize()))) end array fun random(len: USize = 6): String => \"\"\" Returns a pseudo-random base, suitable as a temporary file name or directory name, but not guaranteed to not already exist. \"\"\" let letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\" let s = recover String(len) end var n = USize(0) var r = Time.nanos().usize() try while n < len do let c = letters(r % letters.size())? r = r / letters.size() s.push(c) n = n + 1 end end s","title":"path.pony"},{"location":"src/format/_format_float/","text":"primitive _FormatFloat \"\"\" Worker type providing to string conversions for floats. \"\"\" fun f64( x: F64, fmt: FormatFloat = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = 6, width: USize = 0, align: Align = AlignRight, fill: U32 = ' ') : String iso^ => // TODO: prefix, align, fill var prec' = if prec == -1 then 6 else prec end recover var s = String((prec' + 8).max(width.max(31))) var f = String(31) .> append(\"%\") if width > 0 then f.append(width.string()) end f .> append(\".\") .> append(prec'.string()) match fmt | FormatExp => f.append(\"e\") | FormatExpLarge => f.append(\"E\") | FormatFix => f.append(\"f\") | FormatFixLarge => f.append(\"F\") | FormatGeneral => f.append(\"g\") | FormatGeneralLarge => f.append(\"G\") else f.append(\"g\") end ifdef windows then @_snprintf[I32](s.cstring(), s.space(), f.cstring(), x) else @snprintf[I32](s.cstring(), s.space(), f.cstring(), x) end s .> recalc() end","title":"_format_float.pony"},{"location":"src/format/_format_int/","text":"primitive _FormatInt \"\"\" Worker type providing to string conversions for integers. \"\"\" fun _large(): String => \"0123456789ABCDEF\" fun _small(): String => \"0123456789abcdef\" fun _fmt_int(fmt: FormatInt): (U32, String, String) => match fmt | FormatBinary => (2, \"b0\", _large()) | FormatBinaryBare => (2, \"\", _large()) | FormatOctal => (8, \"o0\", _large()) | FormatOctalBare => (8, \"\", _large()) | FormatHex => (16, \"x0\", _large()) | FormatHexBare => (16, \"\", _large()) | FormatHexSmall => (16, \"x0\", _small()) | FormatHexSmallBare => (16, \"\", _small()) else (10, \"\", _large()) end fun _prefix(neg: Bool, prefix: PrefixNumber): String => if neg then \"-\" else match prefix | PrefixSpace => \" \" | PrefixSign => \"+\" else \"\" end end fun _extend_digits(s: String ref, digits: USize) => while s.size() < digits do s.append(\"0\") end fun _pad(s: String ref, width: USize, align: Align, fill: U32) => var pre: USize = 0 var post: USize = 0 if s.size() < width then let rem = width - s.size() let fills = String.from_utf32(fill) match align | AlignLeft => post = rem | AlignRight => pre = rem | AlignCenter => pre = rem / 2; post = rem - pre end while pre > 0 do s.append(fills) pre = pre - 1 end s.reverse_in_place() while post > 0 do s.append(fills) post = post - 1 end else s.reverse_in_place() end fun u8( x: U8, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ => (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u8() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u16( x: U16, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ => (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u16() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u32( x: U32, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ => match fmt | FormatUTF32 => return recover String.from_utf32(x.u32()) end end (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u32() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u64( x: U64, neg: Bool, fmt: FormatInt, prefix: PrefixNumber, prec: USize, width: USize, align: Align, fill: U32) : String iso^ => match fmt | FormatUTF32 => return recover String.from_utf32(x.u32()) end end (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var prec' = if prec == -1 then 0 else prec end let base = base'.u64() recover var s = String((prec + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = ((value = value / base) - (value * base)) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end fun u128( x: U128, neg: Bool, fmt: FormatInt = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = -1, width: USize = 0, align: Align = AlignLeft, fill: U32 = ' ') : String iso^ => match fmt | FormatUTF32 => return recover String.from_utf32(x.u32()) end end (var base', var typestring, var table) = _fmt_int(fmt) var prestring = _prefix(neg, prefix) var base = base'.u128() var prec' = if prec == -1 then 0 else prec end recover var s = String((prec' + 1).max(width.max(31))) var value = x try if value == 0 then s.push(table(0)?) else while value != 0 do let index = (value = value / base) - (value * base) s.push(table(index.usize())?) end end end _extend_digits(s, prec') s.append(typestring) s.append(prestring) _pad(s, width, align, fill) s end","title":"_format_int.pony"},{"location":"src/format/align/","text":"primitive AlignLeft primitive AlignRight primitive AlignCenter type Align is ( AlignLeft | AlignRight | AlignCenter )","title":"align.pony"},{"location":"src/format/format/","text":"\"\"\" # Format package The Format package provides support for formatting strings. It can be used to set things like width, padding and alignment, as well as controlling the way numbers are displayed (decimal, octal, hexadecimal). # Example program ```pony use \"format\" actor Main fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String => Format(desc where width = 10) + \":\" + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt) new create(env: Env) => try (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?) env.out.print(disp(\"x\", x)) env.out.print(disp(\"y\", y)) env.out.print(disp(\"hex(x)\", x, FormatHex)) env.out.print(disp(\"hex(y)\", y, FormatHex)) env.out.print(disp(\"x * y\", x * y)) else let exe = try env.args(0)? else \"fmt_example\" end env.err.print(\"Usage: \" + exe + \" NUMBER1 NUMBER2\") end ``` \"\"\" use \"collections\" primitive Format \"\"\" Provides functions for generating formatted strings. * fmt. Format to use. * prefix. Prefix to use. * prec. Precision to use. The exact meaning of this depends on the type, but is generally the number of characters used for all, or part, of the string. A value of -1 indicates that the default for the type should be used. * width. The minimum number of characters that will be in the produced string. If necessary the string will be padded with the fill character to make it long enough. *align. Specify whether fill characters should be added at the beginning or end of the generated string, or both. *fill: The character to pad a string with if is is shorter than width. \"\"\" fun apply( str: String, fmt: FormatDefault = FormatDefault, prefix: PrefixDefault = PrefixDefault, prec: USize = -1, width: USize = 0, align: Align = AlignLeft, fill: U32 = ' ') : String iso^ => let copy_len = str.size().min(prec.usize()) let len = copy_len.max(width.usize()) recover let s = String(len) match align | AlignLeft => s.append(str) for i in Range(s.size(), s.space()) do s.push_utf32(fill) end | AlignRight => for i in Range(0, len - copy_len) do s.push_utf32(fill) end s.append(str) | AlignCenter => let half = (len - copy_len) / 2 for i in Range(0, half) do s.push_utf32(fill) end s.append(str) for i in Range(s.size(), s.space()) do s.push_utf32(fill) end end s .> recalc() end fun int[A: (Int & Integer[A])]( x: A, fmt: FormatInt = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = -1, width: USize = 0, align: Align = AlignRight, fill: U32 = ' ') : String iso^ => let zero = x.from[USize](0) (let abs, let neg) = if x < zero then (-x, true) else (x, false) end iftype A <: U128 then _FormatInt.u128(x.u128(), false, fmt, prefix, prec, width, align, fill) elseif A <: I128 then _FormatInt.u128(abs.u128(), neg, fmt, prefix, prec, width, align, fill) elseif A <: (U64 | I64) then _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill) elseif A <: (U32 | I32) then _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill) elseif A <: (U16 | I16) then _FormatInt.u16(abs.u16(), neg, fmt, prefix, prec, width, align, fill) elseif A <: (U8 | I8) then _FormatInt.u8(abs.u8(), neg, fmt, prefix, prec, width, align, fill) elseif A <: (USize | ISize) then ifdef ilp32 then _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill) else _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill) end elseif A <: (ULong | ILong) then ifdef ilp32 or llp64 then _FormatInt.u32(abs.u32(), neg, fmt, prefix, prec, width, align, fill) else _FormatInt.u64(abs.u64(), neg, fmt, prefix, prec, width, align, fill) end else _FormatInt.u128(x.u128(), false, fmt, prefix, prec, width, align, fill) end fun float[A: (Float & FloatingPoint[A])]( x: A, fmt: FormatFloat = FormatDefault, prefix: PrefixNumber = PrefixDefault, prec: USize = 6, width: USize = 0, align: Align = AlignRight, fill: U32 = ' ') : String iso^ => _FormatFloat.f64(x.f64(), fmt, prefix, prec, width, align, fill)","title":"format.pony"},{"location":"src/format/format_spec/","text":"trait val FormatSpec primitive FormatDefault is FormatSpec primitive FormatUTF32 is FormatSpec primitive FormatBinary is FormatSpec primitive FormatBinaryBare is FormatSpec primitive FormatOctal is FormatSpec primitive FormatOctalBare is FormatSpec primitive FormatHex is FormatSpec primitive FormatHexBare is FormatSpec primitive FormatHexSmall is FormatSpec primitive FormatHexSmallBare is FormatSpec type FormatInt is ( FormatDefault | FormatUTF32 | FormatBinary | FormatBinaryBare | FormatOctal | FormatOctalBare | FormatHex | FormatHexBare | FormatHexSmall | FormatHexSmallBare ) primitive FormatExp is FormatSpec primitive FormatExpLarge is FormatSpec primitive FormatFix is FormatSpec primitive FormatFixLarge is FormatSpec primitive FormatGeneral is FormatSpec primitive FormatGeneralLarge is FormatSpec type FormatFloat is ( FormatDefault | FormatExp | FormatExpLarge | FormatFix | FormatFixLarge | FormatGeneral | FormatGeneralLarge )","title":"format_spec.pony"},{"location":"src/format/prefix_spec/","text":"trait val PrefixSpec primitive PrefixDefault is PrefixSpec primitive PrefixSpace is PrefixSpec primitive PrefixSign is PrefixSpec type PrefixNumber is ( PrefixDefault | PrefixSpace | PrefixSign )","title":"prefix_spec.pony"},{"location":"src/ini/ini/","text":"\"\"\" # Ini package The Ini package provides support for parsing [INI file](https://en.wikipedia.org/wiki/INI_file) formatted text. * Currently _does not_ support multi-line entries. * Any keys not in a section will be placed in the section \"\" # Example code ```pony // Parses the file 'example.ini' in the current working directory // Output all the content use \"ini\" use \"files\" actor Main new create(env:Env) => try let ini_file = File(FilePath(env.root as AmbientAuth, \"example.ini\")?) let sections = IniParse(ini_file.lines())? for section in sections.keys() do env.out.print(\"Section name is: \" + section) for key in sections(section)?.keys() do env.out.print(key + \" = \" + sections(section)?(key)?) end end end ``` \"\"\" primitive IniIncompleteSection primitive IniNoDelimiter type IniError is ( IniIncompleteSection | IniNoDelimiter ) interface IniNotify \"\"\" Notifications for INI parsing. \"\"\" fun ref apply(section: String, key: String, value: String): Bool \"\"\" This is called for every valid entry in the INI file. If key/value pairs occur before a section name, the section can be an empty string. Return false to halt processing. \"\"\" fun ref add_section(section: String): Bool => \"\"\" This is called for every valid section in the INI file. Return false to halt processing. \"\"\" true fun ref errors(line: USize, err: IniError): Bool => \"\"\" This is called for each error encountered. Return false to halt processing. \"\"\" true primitive Ini \"\"\" A streaming parser for INI formatted lines of test. \"\"\" fun apply(lines: Iterator[String box], f: IniNotify): Bool => \"\"\" This accepts a string iterator and calls the IniNotify for each new entry. If any errors are encountered, this will return false. Otherwise, it returns true. \"\"\" var section = \"\" var lineno = USize(0) var ok = true for line in lines do lineno = lineno + 1 var current = line.clone() current.strip() if current.size() == 0 then continue end try match current(0)? | ';' | '#' => // Skip comments. continue | '[' => try current.delete(current.find(\"]\", 1)?, -1) current.delete(0) section = consume current if not f.add_section(section) then return ok end else ok = false if not f.errors(lineno, IniIncompleteSection) then return false end end else try let delim = try current.find(\"=\")? else current.find(\":\")? end let value = current.substring(delim + 1) value.strip() current.delete(delim, -1) current.strip() try let comment = try value.find(\";\")? else value.find(\"#\")? end match value(comment.usize() - 1)? | ' ' | '\\t' => value.delete(comment, -1) value.rstrip() end end if not f(section, consume current, consume value) then return ok end else ok = false if not f.errors(lineno, IniNoDelimiter) then return false end end end end end ok","title":"ini.pony"},{"location":"src/ini/ini_map/","text":"use \"collections\" type IniMap is Map[String, Map[String, String]] primitive IniParse \"\"\" This is used to parse INI formatted text as a nested map of strings. \"\"\" fun apply(lines: Iterator[String]): IniMap ref^ ? => \"\"\" This accepts a string iterator and returns a nested map of strings. If parsing fails, an error is raised. \"\"\" let map = IniMap let f = object let map: IniMap = map fun ref apply(section: String, key: String, value: String): Bool => try if not map.contains(section) then map.insert(section, Map[String, String]) end map(section)?(key) = value end true fun ref add_section(section: String): Bool => if not map.contains(section) then map.insert(section, Map[String, String]) end true fun ref errors(line: USize, err: IniError): Bool => false end if not Ini(lines, f) then error end map","title":"ini_map.pony"},{"location":"src/itertools/iter/","text":"use \"collections\" class Iter[A] is Iterator[A] \"\"\" Wrapper class containing methods to modify iterators. \"\"\" let _iter: Iterator[A] new create(iter: Iterator[A]) => _iter = iter fun ref has_next(): Bool => _iter.has_next() fun ref next(): A ? => _iter.next()? new chain(outer_iterator: Iterator[Iterator[A]]) => \"\"\" Take an iterator of iterators and return an Iter containing the items of the first one, then the second one, and so on. ## Example ```pony let xs = [as I64: 1; 2].values() let ys = [as I64: 3; 4].values() Iter[I64].chain([xs; ys].values()) ``` `1 2 3 4` \"\"\" _iter = object var inner_iterator: (Iterator[A] | None) = None fun ref has_next(): Bool => if inner_iterator isnt None then try let iter = inner_iterator as Iterator[A] if iter.has_next() then return true end end end if outer_iterator.has_next() then try inner_iterator = outer_iterator.next()? return has_next() end end false fun ref next(): A ? => if inner_iterator isnt None then let iter = inner_iterator as Iterator[A] if iter.has_next() then return iter.next()? end end if outer_iterator.has_next() then inner_iterator = outer_iterator.next()? return next()? end error end new repeat_value(value: A) => \"\"\" Create an iterator that returns the given value forever. ## Example ```pony Iter[U32].repeat_value(7) ``` `7 7 7 7 7 7 7 7 7 ...` \"\"\" _iter = object let _v: A = consume value fun ref has_next(): Bool => true fun ref next(): A => _v end fun ref map_stateful[B](f: {ref(A!): B^ ?}): Iter[B]^ => \"\"\" Allows stateful transformation of each element from the iterator, similar to `map`. \"\"\" Iter[B]( object is Iterator[B] fun ref has_next(): Bool => _iter.has_next() fun ref next(): B ? => f(_iter.next()?)? end) fun ref filter_stateful(f: {ref(A!): Bool ?}): Iter[A!]^ => \"\"\" Allows filtering of elements based on a stateful adapter, similar to `filter`. \"\"\" Iter[A!]( object var _next: (A! | _None) = _None fun ref _find_next() => try match _next | _None => if _iter.has_next() then let a = _iter.next()? if try f(a)? else false end then _next = a else _find_next() end end end end fun ref has_next(): Bool => match _next | _None => if _iter.has_next() then _find_next() has_next() else false end else true end fun ref next(): A! ? => match _next = _None | let a: A! => a else if _iter.has_next() then _find_next() next()? else error end end end) fun ref filter_map_stateful[B](f: {ref(A!): (B^ | None) ?}): Iter[B]^ => \"\"\" Allows stateful modification to the stream of elements from an iterator, similar to `filter_map`. \"\"\" Iter[B]( object is Iterator[B] var _next: (B | _None) = _None fun ref _find_next() => try match _next | _None => if _iter.has_next() then match f(_iter.next()?)? | let b: B => _next = consume b | None => _find_next() end end end end fun ref has_next(): Bool => match _next | _None => if _iter.has_next() then _find_next() has_next() else false end else true end fun ref next(): B ? => match _next = _None | let b: B => consume b else if _iter.has_next() then _find_next() next()? else error end end end) fun ref all(f: {(A!): Bool ?} box): Bool => \"\"\" Return false if at least one value of the iterator fails to match the predicate `f`. This method short-circuits at the first value where the predicate returns false, otherwise true is returned. ## Examples ```pony Iter[I64]([2; 4; 6].values()) .all({(x) => (x % 2) == 0 }) ``` `true` ```pony Iter[I64]([2; 3; 4].values()) .all({(x) => (x % 2) == 0 }) ``` `false` \"\"\" for x in _iter do if not (try f(x)? else false end) then return false end end true fun ref any(f: {(A!): Bool ?} box): Bool => \"\"\" Return true if at least one value of the iterator matches the predicate `f`. This method short-circuits at the first value where the predicate returns true, otherwise false is returned. ## Examples ```pony Iter[I64]([2; 4; 6].values()) .any({(I64) => (x % 2) == 1 }) ``` `false` ```pony Iter[I64]([2; 3; 4].values()) .any({(I64) => (x % 2) == 1 }) ``` `true` \"\"\" for x in _iter do if try f(x)? else false end then return true end end false fun ref collect[B: Seq[A!] ref = Array[A!]](coll: B): B^ => \"\"\" Push each value from the iterator into the collection `coll`. ## Example ```pony Iter[I64]([1; 2; 3].values()) .collect(Array[I64](3)) ``` `[1, 2, 3]` \"\"\" for x in _iter do coll.push(x) end coll fun ref count(): USize => \"\"\" Return the number of values in the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .count() ``` `3` \"\"\" var sum: USize = 0 for _ in _iter do sum = sum + 1 end sum fun ref cycle(): Iter[A!]^ => \"\"\" Repeatedly cycle through the values from the iterator. WARNING: The values returned by the original iterator are cached, so the input iterator should be finite. ## Example ```pony Iter[I64]([1; 2; 3].values()) .cycle() ``` `1 2 3 1 2 3 1 2 3 ...` \"\"\" let store = Array[A!] Iter[A!]( object is Iterator[A!] let _store: Array[A!] = store var _store_iter: ArrayValues[A!, Array[A!]] = store.values() var _first_time_through: Bool = true fun ref has_next(): Bool => true fun ref next(): A! ? => if _first_time_through then if _iter.has_next() then _store.push(_iter.next()?) return _store(_store.size() - 1)? end _first_time_through = false end if not _store_iter.has_next() then _store_iter.rewind() end _store_iter.next()? end) /* fun ref dedup[H: HashFunction[A] val = HashIs[A]](): Iter[A!]^ => \"\"\" Return an iterator that removes duplicates from consecutive identical elements. Equality is determined by the HashFunction `H`. ## Example ```pony Iter[I64]([as I64: 1; 1; 2; 3; 3; 2; 2].values()) .dedup() ``` `1 2 3 2` \"\"\" */ fun ref enum[B: (Real[B] val & Number) = USize](): Iter[(B, A)]^ => \"\"\" An iterator which yields the current iteration count as well as the next value from the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .enum() ``` `(0, 1) (1, 2) (2, 3)` \"\"\" Iter[(B, A)]( object var _i: B = 0 fun ref has_next(): Bool => _iter.has_next() fun ref next(): (B, A) ? => (_i = _i + 1, _iter.next()?) end) fun ref filter(f: {(A!): Bool ?} box): Iter[A!]^ => \"\"\" Return an iterator that only returns items that match the predicate `f`. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .filter({(x) => (x % 2) == 0 }) ``` `2 4 6` \"\"\" filter_stateful({(a: A!): Bool ? => f(a)? }) fun ref find(f: {(A!): Bool ?} box, n: USize = 1): A! ? => \"\"\" Return the nth value in the iterator that satisfies the predicate `f`. ## Examples ```pony Iter[I64]([1; 2; 3].values()) .find({(x) => (x % 2) == 0 }) ``` `2` ```pony Iter[I64]([1; 2; 3; 4].values()) .find({(x) => (x % 2) == 0 }, 2) ``` `4` \"\"\" var c = n for x in _iter do if try f(x)? else false end then if c == 1 then return x else c = c - 1 end end end error fun ref filter_map[B](f: {(A!): (B^ | None) ?} box): Iter[B]^ => \"\"\" Return an iterator which applies `f` to each element. If `None` is returned, then the iterator will try again by applying `f` to the next element. Otherwise, the value of type `B` is returned. ## Example ```pony Iter[I64]([as I64: 1; -2; 4; 7; -5]) .filter_map[USize]( {(i: I64): (USize | None) => if i >= 0 then i.usize() end }) ``` `1 4 7` ``` \"\"\" filter_map_stateful[B]({(a: A!): (B^ | None) ? => f(a) ? }) fun ref flat_map[B](f: {(A!): Iterator[B] ?} box): Iter[B]^ => \"\"\" Return an iterator over the values of the iterators produced from the application of the given function. ## Example ```pony Iter[String]([\"alpha\"; \"beta\"; \"gamma\"]) .flat_map[U8]({(s: String): Iterator[U8] => s.values() }) ``` `a l p h a b e t a g a m m a` \"\"\" Iter[B]( object is Iterator[B] var _iterb: Iterator[B] = try f(_iter.next()?)? else _EmptyIter[B] end fun ref has_next(): Bool => if _iterb.has_next() then true else if _iter.has_next() then try _iterb = f(_iter.next()?)? has_next() else false end else false end end fun ref next(): B ? => if _iterb.has_next() then _iterb.next()? else _iterb = f(_iter.next()?)? next()? end end) fun ref fold[B](acc: B, f: {(B, A!): B^} box): B^ => \"\"\" Apply a function to every element, producing an accumulated value. ## Example ```pony Iter[I64]([1; 2; 3].values()) .fold[I64](0, {(sum, x) => sum + x }) ``` `6` \"\"\" var acc' = consume acc for a in _iter do acc' = f(consume acc', a) end acc' fun ref fold_partial[B](acc: B, f: {(B, A!): B^ ?} box): B^ ? => \"\"\" A partial version of `fold`. \"\"\" var acc' = consume acc for a in _iter do acc' = f(consume acc', a)? end acc' /* fun ref interleave(other: Iterator[A]): Iter[A!] => \"\"\" Return an iterator that alternates the values of the original iterator and the other until both run out. ## Example ```pony Iter[USize](Range(0, 4)) .interleave(Range(4, 6)) ``` `0 4 1 5 2 3` \"\"\" fun ref interleave_shortest(other: Iterator[A]): Iter[A!] => \"\"\" Return an iterator that alternates the values of the original iterator and the other until one of them runs out. ## Example ```pony Iter[USize](Range(0, 4)) .interleave(Range(4, 6)) ``` `0 4 1 5 2` \"\"\" fun ref intersperse(value: A, n: USize = 1): Iter[A!] => \"\"\" Return an iterator that yields the value after every `n` elements of the original iterator. ## Example ```pony Iter[USize](Range(0, 3)) .intersperse(8) ``` `0 8 1 8 2` \"\"\" */ fun ref last(): A ? => \"\"\" Return the last value of the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .last() ``` `3` \"\"\" while _iter.has_next() do _iter.next()? else error end fun ref map[B](f: {(A!): B^ ?} box): Iter[B]^ => \"\"\" Return an iterator where each item's value is the application of the given function to the value in the original iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .map[I64]({(x) => x * x }) ``` `1 4 9` \"\"\" map_stateful[B]({(a: A!): B^ ? => f(a) ? }) fun ref nth(n: USize): A ? => \"\"\" Return the nth value of the iterator. ## Example ```pony Iter[I64]([1; 2; 3].values()) .nth(2) ``` `2` \"\"\" var c = n while _iter.has_next() and (c > 1) do _iter.next()? c = c - 1 end if not _iter.has_next() then error else _iter.next()? end fun ref run(on_error: {ref()} = {() => None } ref) => \"\"\" Iterate through the values of the iterator without a for loop. The function `on_error` will be called if the iterator's `has_next` method returns true but its `next` method throws an error. ## Example ```pony Iter[I64]([1; 2; 3].values()) .map[None]({(x) => env.out.print(x.string()) }) .run() ``` ``` 1 2 3 ``` \"\"\" if not _iter.has_next() then return end try _iter.next()? run(on_error) else on_error() end fun ref skip(n: USize): Iter[A]^ => \"\"\" Skip the first n values of the iterator. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip(3) ``` `4 5 6` ```pony Iter[I64]([1; 2; 3].values()) .skip(3) .has_next() ``` `false` \"\"\" var c = n try while _iter.has_next() and (c > 0) do _iter.next()? c = c - 1 end end this fun ref skip_while(f: {(A!): Bool ?} box): Iter[A!]^ => \"\"\" Skip values of the iterator while the predicate `f` returns true. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .skip_while({(x) => x < 4 }) ``` `4 5 6` \"\"\" filter_stateful( object var _done: Bool = false fun ref apply(a: A!): Bool => if _done then return true end if try f(a)? else false end then false else _done = true true end end) fun ref take(n: USize): Iter[A]^ => \"\"\" Return an iterator for the first n elements. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take(3) ``` `1 2 3` \"\"\" Iter[A]( object var _countdown: USize = n fun ref has_next(): Bool => (_countdown > 0) and _iter.has_next() fun ref next(): A ? => if _countdown > 0 then _countdown = _countdown - 1 _iter.next()? else error end end) fun ref take_while(f: {(A!): Bool ?} box): Iter[A!]^ => \"\"\" Return an iterator that returns values while the predicate `f` returns true. This iterator short-circuits the first time that `f` returns false or raises an error. ## Example ```pony Iter[I64]([1; 2; 3; 4; 5; 6].values()) .take_while({(x) => x < 4 }) ``` `1 2 3` \"\"\" Iter[A!]( object var _done: Bool = false var _next: (A! | None) = None fun ref has_next(): Bool => if _next isnt None then true else _try_next() end fun ref next(): A! ? => if (_next isnt None) or _try_next() then (_next = None) as A! else error end fun ref _try_next(): Bool => if _done then false elseif not _iter.has_next() then _done = true false else _next = try _iter.next()? else _done = true return false end _done = try not f(_next as A!)? else true end not _done end end) /* fun ref unique[H: HashFunction[A] val = HashIs[A]](): Iter[A!]^ => \"\"\" Return an iterator that filters out elements that have already been produced. Uniqueness is determined by the HashFunction `H`. ## Example ```pony Iter[I64]([as I64: 1; 2; 1; 1; 3; 4; 1].values()) .unique() ``` `1 2 3 4` \"\"\" */ fun ref zip[B](i2: Iterator[B]): Iter[(A, B)]^ => \"\"\" Zip two iterators together so that each call to next() results in a tuple with the next value of the first iterator and the next value of the second iterator. The number of items returned is the minimum of the number of items returned by the two iterators. ## Example ```pony Iter[I64]([1; 2].values()) .zip[I64]([3; 4].values()) ``` `(1, 3) (2, 4)` \"\"\" Iter[(A, B)]( object is Iterator[(A, B)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 fun ref has_next(): Bool => _i1.has_next() and _i2.has_next() fun ref next(): (A, B) ? => (_i1.next()?, _i2.next()?) end) fun ref zip2[B, C](i2: Iterator[B], i3: Iterator[C]): Iter[(A, B, C)]^ => \"\"\" Zip three iterators together so that each call to next() results in a tuple with the next value of the first iterator, the next value of the second iterator, and the value of the third iterator. The number of items returned is the minimum of the number of items returned by the three iterators. \"\"\" Iter[(A, B, C)]( object is Iterator[(A, B, C)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 let _i3: Iterator[C] = i3 fun ref has_next(): Bool => _i1.has_next() and _i2.has_next() and _i3.has_next() fun ref next(): (A, B, C) ? => (_i1.next()?, _i2.next()?, _i3.next()?) end) fun ref zip3[B, C, D](i2: Iterator[B], i3: Iterator[C], i4: Iterator[D]) : Iter[(A, B, C, D)]^ => \"\"\" Zip four iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. \"\"\" Iter[(A, B, C, D)]( object is Iterator[(A, B, C, D)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 let _i3: Iterator[C] = i3 let _i4: Iterator[D] = i4 fun ref has_next(): Bool => _i1.has_next() and _i2.has_next() and _i3.has_next() and _i4.has_next() fun ref next(): (A, B, C, D) ? => (_i1.next()?, _i2.next()?, _i3.next()?, _i4.next()?) end) fun ref zip4[B, C, D, E]( i2: Iterator[B], i3: Iterator[C], i4: Iterator[D], i5: Iterator[E]) : Iter[(A, B, C, D, E)]^ => \"\"\" Zip five iterators together so that each call to next() results in a tuple with the next value of each of the iterators. The number of items returned is the minimum of the number of items returned by the iterators. \"\"\" Iter[(A, B, C, D, E)]( object is Iterator[(A, B, C, D, E)] let _i1: Iterator[A] = _iter let _i2: Iterator[B] = i2 let _i3: Iterator[C] = i3 let _i4: Iterator[D] = i4 let _i5: Iterator[E] = i5 fun ref has_next(): Bool => _i1.has_next() and _i2.has_next() and _i3.has_next() and _i4.has_next() and _i5.has_next() fun ref next(): (A, B, C, D, E) ? => (_i1.next()?, _i2.next()?, _i3.next()?, _i4.next()?, _i5.next()?) end) primitive _None class _EmptyIter[A] fun ref has_next(): Bool => false fun ref next(): A ? => error","title":"iter.pony"},{"location":"src/json/_json_print/","text":"use \"format\" primitive _JsonPrint fun _indent(buf: String iso, indent: String, level': USize): String iso^ => \"\"\" Add indentation to the buf to the appropriate indent_level \"\"\" var level = level' buf.push('\\n') while level != 0 do buf.append(indent) level = level - 1 end buf fun _string( d: box->JsonType, buf': String iso, indent: String, level: USize, pretty: Bool) : String iso^ => \"\"\" Generate string representation of the given data. \"\"\" var buf = consume buf' match d | let x: Bool => buf.append(x.string()) | let x: None => buf.append(\"null\") | let x: String => buf = _escaped_string(consume buf, x) | let x: JsonArray box => buf = x._show(consume buf, indent, level, pretty) | let x: JsonObject box => buf = x._show(consume buf, indent, level, pretty) | let x': I64 => var x = if x' < 0 then buf.push('-') -x' else x' end if x == 0 then buf.push('0') else // Append the numbers in reverse order var i = buf.size() while x != 0 do buf.push((x % 10).u8() or 48) x = x / 10 end var j = buf.size() - 1 // Place the numbers back in the proper order try while i < j do buf(i)? = buf(j = j - 1)? = buf(i = i + 1)? end end end | let x: F64 => // Make sure our printed floats can be distinguished from integers let basic = x.string() if basic.count(\".\") == 0 then buf.append(consume basic) buf.append(\".0\") else buf.append(consume basic) end end buf fun _escaped_string(buf: String iso, s: String): String iso^ => \"\"\" Generate a version of the given string with escapes for all non-printable and non-ASCII characters. \"\"\" var i: USize = 0 buf.push('\"') try while i < s.size() do (let c, let count) = s.utf32(i.isize())? i = i + count.usize() if c == '\"' then buf.append(\"\\\\\\\"\") elseif c == '\\\\' then buf.append(\"\\\\\\\\\") elseif c == '\\b' then buf.append(\"\\\\b\") elseif c == '\\f' then buf.append(\"\\\\f\") elseif c == '\\t' then buf.append(\"\\\\t\") elseif c == '\\r' then buf.append(\"\\\\r\") elseif c == '\\n' then buf.append(\"\\\\n\") elseif (c >= 0x20) and (c < 0x80) then buf.push(c.u8()) elseif c < 0x10000 then buf.append(\"\\\\u\") buf.append(Format.int[U32](c where fmt = FormatHexBare, width = 4, fill = '0')) else let high = (((c - 0x10000) >> 10) and 0x3FF) + 0xD800 let low = ((c - 0x10000) and 0x3FF) + 0xDC00 buf.append(\"\\\\u\") buf.append(Format.int[U32](high where fmt = FormatHexBare, width = 4)) buf.append(\"\\\\u\") buf.append(Format.int[U32](low where fmt = FormatHexBare, width = 4)) end end end buf.push('\"') buf","title":"_json_print.pony"},{"location":"src/json/json_doc/","text":"use \"collections\" use \"format\" class JsonDoc \"\"\" Top level JSON type containing an entire document. A JSON document consists of exactly 1 value. \"\"\" var data: JsonType \"\"\" The parsed JSON structure. Will be a `None` if `parse(source: String)` has not been called yet. \"\"\" // Internal state for parsing var _source: String = \"\" var _index: USize = 0 var _line: USize = 1 var _err_line: USize = 0 // Error information from last parse var _err_msg: String = \"\" // .. var _last_index: USize = 0 // Last source index we peeked or got, for errors new create() => \"\"\" Default constructor building a document containing a single null. \"\"\" data = None fun string(indent: String = \"\", pretty_print: Bool = false): String => \"\"\" Generate string representation of this document. \"\"\" let buf = _JsonPrint._string(data, recover String(256) end, indent, 0, pretty_print) buf.compact() buf fun ref parse(source: String) ? => \"\"\" Parse the given string as a JSON file, building a document. Raise error on invalid JSON in given source. \"\"\" _source = source _index = 0 _line = 1 _err_line = 0 _err_msg = \"\" _last_index = 0 data = _parse_value(\"top level value\")? // Make sure there's no trailing text _dump_whitespace() if _index < _source.size() then _peek_char()? // Setup _last_index _error(\"Unexpected text found after top level value: \" + _last_char()) error end fun parse_report(): (USize /* line */, String /*message */) => \"\"\" Give details of the error that occurred last time we attempted to parse. If parse was successful returns (0, \"\"). \"\"\" (_err_line, _err_msg) fun ref _parse_value(context: String): JsonType ? => \"\"\" Parse a single JSON value of any type, which MUST be present. Raise error on invalid or missing value. \"\"\" _dump_whitespace() match _peek_char(context)? | let c: U8 if (c >= 'a') and (c <= 'z') => _parse_keyword()? | let c: U8 if (c >= '0') and (c <= '9') => _parse_number()? | '-' => _parse_number()? | '{' => _parse_object()? | '[' => _parse_array()? | '\"' => _parse_string(\"string value\")? else _error(\"Unexpected character '\" + _last_char() + \"'\") error end fun ref _parse_keyword(): (Bool | None) ? => \"\"\" Parse a keyword, the first letter of which has already been peeked. \"\"\" var word: String ref = String // Find the contiguous block of lower case letters while let c = _peek_char()?; (c >= 'a') and (c <= 'z') do word.push(c) _get_char()? // Consume peeked char end match word | \"true\" => true | \"false\" => false | \"null\" => None else _error(\"Unrecognised keyword \\\"\" + word + \"\\\"\") error end fun ref _parse_number(): (F64 | I64) ? => \"\"\" Parse a number, the leading character of which has already been peeked. \"\"\" var minus = false if _peek_char(\"number\")? == '-' then minus = true _get_char()? // Consume - end let leading_zero = _peek_char()? == '0' var frac: I64 = 0 var frac_digits: U8 = 0 var exp: I64 = 0 var exp_digits: U8 = 0 // Start with integer part (let int, let int_digits) = _parse_decimal()? if (int_digits > 1) and (leading_zero == true) then _error(\"Leading 0 not permitted\") error end if _peek_char()? == '.' then // We have a . so expect a fractional part _get_char()? // Consume . (frac, frac_digits) = _parse_decimal()? end if (_peek_char()? or 0x20) == 'e' then // We have an e so expect an exponent _get_char()? // Consume e var neg_exp = false match _peek_char(\"number exponent\")? | '-' => _get_char()?; neg_exp = true | '+' => _get_char()? end (exp, exp_digits) = _parse_decimal()? if neg_exp then exp = -exp end end if (frac_digits == 0) and (exp_digits == 0) then // Just an integer return if minus then -int else int end end // We have fractional part and/or exponent, make a float var f = (int.f64() + (frac.f64() / F64(10).pow(frac_digits.f64()))) * (F64(10).pow(exp.f64())) if minus then -f else f end fun ref _parse_decimal(): (I64 /* value */, U8 /* digit count */) ? => \"\"\" Parse a decimal integer which must appear immediately in the source. \"\"\" var value: I64 = 0 var digit_count: U8 = 0 var c = _peek_char(\"number\")? while (c >= '0') and (c <= '9') do _get_char()? // Consume peeked digit value = (value * 10) + (c - '0').i64() digit_count = digit_count + 1 c = _peek_char()? end if digit_count == 0 then _error(\"Expected number got '\" + _last_char() + \"'\") error end (value, digit_count) fun ref _parse_object(): JsonObject ? => \"\"\" Parse a JSON object, the leading { of which has already been peeked. \"\"\" _get_char()? // Consume { _dump_whitespace() if _peek_char(\"object\")? == '}' then // Empty object _get_char()? // Consume } return JsonObject end let map = Map[String, JsonType] // Find elements in object while true do // Each element of of the form: // \"key\": value let key = _parse_string(\"object key\")? _dump_whitespace() if _get_char(\"object element value\")? != ':' then _error(\"Expected ':' after object key, got '\" + _last_char() + \"'\") error end map(key) = _parse_value(\"object\")? _dump_whitespace() // Must now have another element, separated by a comma, or the end of the // object match _get_char(\"object\")? | '}' => break // End of object | ',' => None // Next element else _error(\"Expected ',' after object element, got '\" + _last_char() + \"'\") error end end JsonObject.from_map(map) fun ref _parse_array(): JsonArray ? => \"\"\" Parse an array, the leading [ of which has already been peeked. \"\"\" _get_char()? // Consume [ _dump_whitespace() if _peek_char(\"array\")? == ']' then // Empty array _get_char()? // Consume ] return JsonArray end let array = Array[JsonType] // Find elements in array while true do array.push(_parse_value(\"array\")?) _dump_whitespace() // Must now have another element, separated by a comma, or the end of the // array match _get_char(\"array\")? | ']' => break // End of array | ',' => None // Next element else _error(\"Expected ',' after array element, got '\" + _last_char() + \"'\") error end end JsonArray.from_array(array) fun ref _parse_string(context: String): String ? => \"\"\" Parse a string, which must be the next thing found, other than whitesapce. \"\"\" _dump_whitespace() if _get_char(context)? != '\"' then _error(\"Expected \" + context + \", got '\" + _last_char() + \"'\") error end var text = recover iso String end // Process characters one at a time until we hit the end \" while let c = _get_char(context)?; c != '\"' do if c == '\\\\' then text.append(_parse_escape()?) else text.push(c) end end text fun ref _parse_escape(): String ? => \"\"\" Process a string escape sequence, the leading \\ of which has already been consumed. \"\"\" match _get_char(\"escape sequence\")? | '\"' => \"\\\"\" | '\\\\' => \"\\\\\" | '/' => \"/\" | 'b' => \"\\b\" | 'f' => \"\\f\" | 'n' => \"\\n\" | 'r' => \"\\r\" | 't' => \"\\t\" | 'u' => _parse_unicode_escape()? else _error(\"Unrecognised escape sequence \\\\\" + _last_char()) error end fun ref _parse_unicode_escape(): String ? => \"\"\" Process a Unicode escape sequence, the leading \\u of which has already been consumed. \"\"\" let value = _parse_unicode_digits()? if (value < 0xD800) or (value >= 0xE000) then // Just a simple UTF-16 character return recover val String.from_utf32(value) end end // Value is one half of a UTF-16 surrogate pair, get the other half if (_get_char(\"Unicode escape sequence\")? != '\\\\') or (_get_char(\"Unicode escape sequence\")? != 'u') then _error(\"Expected UTF-16 trailing surrogate, got '\" + _last_char() + \"'\") error end let trailing = _parse_unicode_digits()? if (value >= 0xDC00) or (trailing < 0xDC00) or (trailing >= 0xE000) then _error(\"Expected UTF-16 surrogate pair, got \\\\u\" + Format.int[U32](value where fmt=FormatHexBare, width=4) + \" \\\\u\" + Format.int[U32](trailing where fmt=FormatHexBare, width=4)) error end // Have both surrogates, combine them let c = 0x10000 + ((value and 0x3FF) << 10) + (trailing and 0x3FF) recover val String.from_utf32(c) end fun ref _parse_unicode_digits(): U32 ? => \"\"\" Parse the hex digits of a Unicode escape sequence, the leading \\u of which has already been consumed, and return the encoded character value. \"\"\" var value: U32 = 0 var i: U8 = 0 while i < 4 do let d = match _get_char(\"Unicode escape sequence\")? | let c: U8 if (c >= '0') and (c <= '9') => c - '0' | let c: U8 if (c >= 'a') and (c <= 'f') => (c - 'a') + 10 | let c: U8 if (c >= 'A') and (c <= 'F') => (c - 'A') + 10 else _error(\"Invalid character '\" + _last_char() + \"' in Unicode escape sequence\") error end value = (value * 16) + d.u32() i = i + 1 end value fun ref _dump_whitespace() => \"\"\" Dump all whitespace at the current read location in source, if any. \"\"\" try while true do match _source(_index)? | ' ' | '\\r' | '\\t' => None | '\\n' => _line = _line + 1 else // Non whitespace found return end _index = _index + 1 end end fun ref _peek_char(eof_context: (String | None) = None): U8 ? => \"\"\" Peek the next char in the source, without consuming it. If an eof_context is given then an error is thrown on eof, setting a suitable message. If eof_context is None then 0 is returned on EOF. It up to the caller to handle this appropriately. \"\"\" try _last_index = _index _source(_index)? else // EOF found, is that OK? _last_index = -1 match eof_context | None => return 0 // EOF is allowed | let context: String => // EOF not allowed _error(\"Unexpected EOF in \" + context) end // This error really should be inside the match above, but that gives us // a bad return type until exhaustive matches are implemented error end fun ref _get_char(eof_context: (String | None) = None): U8 ? => \"\"\" Get and consume the next char in the source. If an eof_context is given then an error is thrown on eof, setting a suitable message. If eof_context is None then 0 is returned on EOF. It up to the caller to handle this appropriately. \"\"\" let c = _peek_char(eof_context)? if c == '\\n' then _line = _line + 1 end _index = _index + 1 c fun ref _last_char(): String => \"\"\" Get the last character peeked or got from the source as a String. For use generating error messages. \"\"\" if _last_index == -1 then \"EOF\" else _source.substring(_last_index.isize(), _last_index.isize() + 1) end fun ref _error(msg: String) => \"\"\" Record an error with the given message. \"\"\" _err_line = _line _err_msg = msg","title":"json_doc.pony"},{"location":"src/json/json_type/","text":"use \"collections\" type JsonType is (F64 | I64 | Bool | None | String | JsonArray | JsonObject) \"\"\" All JSON data types. \"\"\" class JsonArray var data: Array[JsonType] \"\"\" The actual array containing JSON structures. \"\"\" new create(len: USize = 0) => \"\"\" Create an array with zero elements, but space for len elements. \"\"\" data = Array[JsonType](len) new from_array(data': Array[JsonType]) => \"\"\" Create a Json array from an actual array. \"\"\" data = data' fun string(indent: String = \"\", pretty_print: Bool = false): String => \"\"\" Generate string representation of this array. \"\"\" let buf = _show(recover String(256) end, indent, 0, pretty_print) buf.compact() buf fun _show( buf': String iso, indent: String = \"\", level: USize, pretty: Bool) : String iso^ => \"\"\" Append the string representation of this array to the provided String. \"\"\" var buf = consume buf' if data.size() == 0 then buf.append(\"[]\") return buf end buf.push('[') var print_comma = false for v in data.values() do if print_comma then buf.push(',') else print_comma = true end if pretty then buf = _JsonPrint._indent(consume buf, indent, level + 1) end buf = _JsonPrint._string(v, consume buf, indent, level + 1, pretty) end if pretty then buf = _JsonPrint._indent(consume buf, indent, level) end buf.push(']') buf class JsonObject var data: Map[String, JsonType] \"\"\" The actual JSON object structure, mapping `String` keys to other JSON structures. \"\"\" new create(prealloc: USize = 6) => \"\"\" Create a map with space for prealloc elements without triggering a resize. Defaults to 6. \"\"\" data = Map[String, JsonType](prealloc) new from_map(data': Map[String, JsonType]) => \"\"\" Create a Json object from a map. \"\"\" data = data' fun string(indent: String = \"\", pretty_print: Bool = false): String => \"\"\" Generate string representation of this object. \"\"\" let buf = _show(recover String(256) end, indent, 0, pretty_print) buf.compact() buf fun _show(buf': String iso, indent: String = \"\", level: USize, pretty: Bool) : String iso^ => \"\"\" Append the string representation of this object to the provided String. \"\"\" var buf = consume buf' if data.size() == 0 then buf.append(\"{}\") return buf end buf.push('{') var print_comma = false for (k, v) in data.pairs() do if print_comma then buf.push(',') else print_comma = true end if pretty then buf = _JsonPrint._indent(consume buf, indent, level + 1) end buf.push('\"') buf.append(k) if pretty then buf.append(\"\\\": \") else buf.append(\"\\\":\") end buf = _JsonPrint._string(v, consume buf, indent, level + 1, pretty) end if pretty then buf = _JsonPrint._indent(consume buf, indent, level) end buf.push('}') buf","title":"json_type.pony"},{"location":"src/logger/logger/","text":"\"\"\" # Logger package Provides basic logging facilities. For most use cases, the `StringLogger` class will be used. On construction, it takes 2 parameters and a 3rd optional parameter: * LogLevel below which no output will be logged * OutStream to log to * Optional LogFormatter If you need to log arbitrary objects, take a look at `ObjectLogger[A]` which can log arbitrary objects so long as you provide it a lambda to covert from A to String. ## API Philosophy The API for using Logger is an attempt to abide by the Pony philosophy of first, be correct and secondly, aim for performance. One of the ways that logging can slow your system down is by having to evaluate expressions to be logged whether they will be logged or not (based on the level of logging). For example: `logger.log(Warn, name + \": \" + reason)` will construct a new String regardless of whether we will end up logging the message or not. The Logger API uses boolean short circuiting to avoid this. `logger(Warn) and logger.log(name + \": \" + reason)` will not evaluate the expression to be logged unless the log level Warn is at or above the overall log level for our logging. This is as close as we can get to zero cost for items that aren't going to end up being logged. ## Example programs ### String Logger The following program will output 'my warn message' and 'my error message' to STDOUT in the standard default log format. ```pony use \"logger\" actor Main new create(env: Env) => let logger = StringLogger( Warn, env.out) logger(Fine) and logger.log(\"my fine message\") logger(Info) and logger.log(\"my info message\") logger(Warn) and logger.log(\"my warn message\") logger(Error) and logger.log(\"my error message\") ``` ### Logger[A] The following program will output '42' to STDOUT in the standard default log format. ```pony use \"logger\" actor Main new create(env: Env) => let logger = Logger[U64](Fine, env.out, {(a) => a.string() }) logger(Error) and logger.log(U64(42)) ``` ## Custom formatting your logs The Logger package provides an interface for formatting logs. If you wish to override the standard formatting, you can create an object that implements: ```pony interface val LogFormatter fun apply( msg: String, file_name: String, file_linenum: String, file_linepos: String): String ``` This can either be a class or because the interface only has a single apply method, can also be a lambda. \"\"\" type LogLevel is ( Fine | Info | Warn | Error ) primitive Fine fun apply(): U32 => 0 primitive Info fun apply(): U32 => 1 primitive Warn fun apply(): U32 => 2 primitive Error fun apply(): U32 => 3 class val Logger[A] let _level: LogLevel let _out: OutStream let _f: {(A): String} val let _formatter: LogFormatter new val create( level: LogLevel, out: OutStream, f: {(A): String} val, formatter: LogFormatter = DefaultLogFormatter) => _level = level _out = out _f = f _formatter = formatter fun apply(level: LogLevel): Bool => level() >= _level() fun log(value: A, loc: SourceLoc = __loc): Bool => _out.print(_formatter(_f(consume value), loc)) true primitive StringLogger fun apply( level: LogLevel, out: OutStream, formatter: LogFormatter = DefaultLogFormatter) : Logger[String] => Logger[String](level, out, {(s: String): String => s }, formatter) interface val LogFormatter \"\"\" Interface required to implement custom log formatting. * `msg` is the logged message * `loc` is the location log was called from See `DefaultLogFormatter` for an example of how to implement a LogFormatter. \"\"\" fun apply(msg: String, loc: SourceLoc): String primitive DefaultLogFormatter is LogFormatter fun apply(msg: String, loc: SourceLoc): String => let file_name: String = loc.file() let file_linenum: String = loc.line().string() let file_linepos: String = loc.pos().string() (recover String(file_name.size() + file_linenum.size() + file_linepos.size() + msg.size() + 4) end) .> append(file_name) .> append(\":\") .> append(file_linenum) .> append(\":\") .> append(file_linepos) .> append(\": \") .> append(msg)","title":"logger.pony"},{"location":"src/math/fibonacci/","text":"\"\"\" # Math package Given the name `Math` for this package, you'd expect it have a broad and grand scope. Surprise! Not currently. However, we do have the most useful of all programming language math constructs: fibonacci! People like to make fun of fibonacci but let's face it, no fibonacci, no benchmarks. We hear from some of our engineer friends that math is very important to programming, we call upon that particular class of engineer friends to help us fill out this package with more maths than you can shake a stick at. Btw, in case you are wondering, yes we can shake a stick at a lot of maths. \"\"\" class Fibonacci[A: (Integer[A] val & Unsigned) = U64] is Iterator[A] \"\"\" Useful for microbenchmarks to impress your friends. Look y'all, Pony goes fast! We suppose if you are into Agile planning poker that you could also use this in conjunction with `Random` to assign User Story Points. \"\"\" var _last: A = 0 var _next: A = 0 var _uber_next: A = 1 fun apply(n: U8): A => if n == 0 then 0 elseif n == 1 then 1 else let j = n / 2 let fib_j = apply(j) let fib_i = apply(j - 1) if (n % 2) == 0 then fib_j * (fib_j + (fib_i * 2)) elseif (n % 4) == 1 then (((fib_j * 2) + fib_i) * ((fib_j * 2) - fib_i)) + 2 else (((fib_j * 2) + fib_i) * ((fib_j * 2) - fib_i)) - 2 end end //The generator stops on overflow. fun has_next(): Bool => _last <= _next fun ref next(): A => _last = _next = _uber_next = _next + _uber_next _last","title":"fibonacci.pony"},{"location":"src/net/auth/","text":"primitive NetAuth new create(from: AmbientAuth) => None primitive DNSAuth new create(from: (AmbientAuth | NetAuth)) => None primitive UDPAuth new create(from: (AmbientAuth | NetAuth)) => None primitive TCPAuth new create(from: (AmbientAuth | NetAuth)) => None primitive TCPListenAuth new create(from: (AmbientAuth | NetAuth | TCPAuth)) => None primitive TCPConnectAuth new create(from: (AmbientAuth | NetAuth | TCPAuth)) => None","title":"auth.pony"},{"location":"src/net/dns/","text":"type DNSLookupAuth is (AmbientAuth | NetAuth | DNSAuth) primitive DNS \"\"\" Helper functions for resolving DNS queries. \"\"\" fun apply(auth: DNSLookupAuth, host: String, service: String) : Array[NetAddress] iso^ => \"\"\" Gets all IPv4 and IPv6 addresses for a host and service. \"\"\" _resolve(auth, 0, host, service) fun ip4(auth: DNSLookupAuth, host: String, service: String) : Array[NetAddress] iso^ => \"\"\" Gets all IPv4 addresses for a host and service. \"\"\" _resolve(auth, 1, host, service) fun ip6(auth: DNSLookupAuth, host: String, service: String) : Array[NetAddress] iso^ => \"\"\" Gets all IPv6 addresses for a host and service. \"\"\" _resolve(auth, 2, host, service) fun broadcast_ip4(auth: DNSLookupAuth, service: String) : Array[NetAddress] iso^ => \"\"\" Link-local IP4 broadcast address. \"\"\" ip4(auth, \"255.255.255.255\", service) fun broadcast_ip6(auth: DNSLookupAuth, service: String) : Array[NetAddress] iso^ => \"\"\" Link-local IP6 broadcast address. \"\"\" ip6(auth, \"FF02::1\", service) fun is_ip4(host: String): Bool => \"\"\" Returns true if the host is a literal IPv4 address. \"\"\" @pony_os_host_ip4[Bool](host.cstring()) fun is_ip6(host: String): Bool => \"\"\" Returns true if the host is a literal IPv6 address. \"\"\" @pony_os_host_ip6[Bool](host.cstring()) fun _resolve( auth: DNSLookupAuth, family: U32, host: String, service: String) : Array[NetAddress] iso^ => \"\"\" Turns an addrinfo pointer into an array of addresses. \"\"\" var list = recover Array[NetAddress] end var result = @pony_os_addrinfo[Pointer[U8]](family, host.cstring(), service.cstring()) if not result.is_null() then var addr = result while not addr.is_null() do let ip = recover NetAddress end @pony_os_getaddr[None](addr, ip) list.push(consume ip) addr = @pony_os_nextaddr[Pointer[U8]](addr) end @freeaddrinfo[None](result) end list","title":"dns.pony"},{"location":"src/net/net_address/","text":"class val NetAddress is Equatable[NetAddress] \"\"\" Represents an IPv4 or IPv6 address. The family field indicates the address type. The addr field is either the IPv4 address or the IPv6 flow info. The addr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The scope field is the IPv6 scope, or invalid for an IPv4 address. This class is modelled after the C data structure for holding socket addresses for both IPv4 and IPv6 `sockaddr_storage`. Use the `name` method to obtain address/hostname and port/service as Strings. \"\"\" let _family: U16 = 0 let _port: U16 = 0 \"\"\" Port number in network byte order. \"\"\" let _addr: U32 = 0 \"\"\" IPv4 address in network byte order. Will be `0` for IPv6 addresses. Check with `ipv4()` and `ipv6()`. \"\"\" let _addr1: U32 = 0 \"\"\" Bits 0-32 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. \"\"\" let _addr2: U32 = 0 \"\"\" Bits 33-64 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. \"\"\" let _addr3: U32 = 0 \"\"\" Bits 65-96 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. \"\"\" let _addr4: U32 = 0 \"\"\" Bits 97-128 of the IPv6 address in network byte order. `0` if this is an IPv4 address. Check with `ipv4()` and `ipv6()`. \"\"\" let _scope: U32 = 0 \"\"\"IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes.\"\"\" fun ip4(): Bool => \"\"\" Returns true for an IPv4 address. \"\"\" @pony_os_ipv4[Bool](this) fun ip6(): Bool => \"\"\" Returns true for an IPv6 address. \"\"\" @pony_os_ipv6[Bool](this) fun name( reversedns: (DNSLookupAuth | None) = None, servicename: Bool = false) : (String, String) ? => \"\"\" Returns the host and service name. If `reversedns` is an instance of `DNSLookupAuth` a DNS lookup will be executed and the hostname for this address is returned as first element of the result tuple. If no hostname could be found, an error is raised. If `reversedns` is `None` the plain IP address is given and no DNS lookup is executed. If `servicename` is `false` the numeric port is returned as second element of the result tuple. If it is `true` the port is translated into its corresponding servicename (e.g. port 80 is returned as `\"http\"`). Internally this method uses the POSIX C function `getnameinfo`. \"\"\" var host: Pointer[U8] iso = recover Pointer[U8] end var serv: Pointer[U8] iso = recover Pointer[U8] end let reverse = reversedns isnt None if not @pony_os_nameinfo[Bool](this, addressof host, addressof serv, reverse, servicename) then error end (recover String.from_cstring(consume host) end, recover String.from_cstring(consume serv) end) fun eq(that: NetAddress box): Bool => (this._family == that._family) and (this._port == that._port) and (host_eq(that)) and (this._scope == that._scope) fun host_eq(that: NetAddress box): Bool => if ip4() then this._addr == that._addr else (this._addr1 == that._addr1) and (this._addr2 == that._addr2) and (this._addr3 == that._addr3) and (this._addr4 == that._addr4) end fun length() : U8 => \"\"\" For platforms (OSX/FreeBSD) with `length` field as part of its `struct sockaddr` definition, returns the `length`. Else (Linux/Windows) returns the size of `sockaddr_in` or `sockaddr_in6`. \"\"\" ifdef linux or windows then (@ponyint_address_length[U32](this)).u8() else ifdef bigendian then ((_family >> 8) and 0xff).u8() else (_family and 0xff).u8() end end fun family() : U8 => \"\"\" Returns the `family`. \"\"\" ifdef linux or windows then ifdef bigendian then ((_family >> 8) and 0xff).u8() else (_family and 0xff).u8() end else ifdef bigendian then (_family and 0xff).u8() else ((_family >> 8) and 0xff).u8() end end fun port() : U16 => \"\"\" Returns port number in host byte order. \"\"\" @ntohs[U16](_port) fun scope() : U32 => \"\"\" Returns IPv6 scope identifier: Unicast, Anycast, Multicast and unassigned scopes. \"\"\" @ntohl[U32](_scope) fun ipv4_addr() : U32 => \"\"\" Returns IPV4 address (`_addr` field in the class) if `ip4()` is `True`. If `ip4()` is `False` then the contents are invalid. \"\"\" @ntohl[U32](_addr) fun ipv6_addr() : (U32, U32, U32, U32) => \"\"\" Returns IPV6 address as the 4-tuple (say `a`). `a._1 = _addr1` // Bits 0-32 of the IPv6 address in host byte order. `a._2 = _addr2 // Bits 33-64 of the IPv6 address in host byte order. `a._3 = _addr3 // Bits 65-96 of the IPv6 address in host byte order. `a._4 = _addr4 // Bits 97-128 of the IPv6 address in host byte order. The contents of the 4-tuple returned are valid only if `ip6()` is `True`. \"\"\" (@ntohl[U32](_addr1), @ntohl[U32](_addr2), @ntohl[U32](_addr3), @ntohl[U32](_addr4) )","title":"net_address.pony"},{"location":"src/net/ossocket/","text":"use @pony_os_errno[I32]() primitive _OSSocket \"\"\" Socket type-independent wrapper functions for `getsockopt(2)` and `setsockopt(2)` system calls for internal `net` package use. \"\"\" fun get_so_error(fd: U32): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)` \"\"\" getsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_error()) fun get_so_rcvbuf(fd: U32): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` \"\"\" getsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf()) fun get_so_sndbuf(fd: U32): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` \"\"\" getsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_sndbuf()) fun set_so_rcvbuf(fd: U32, bufsize: U32): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` \"\"\" setsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), bufsize) fun set_so_sndbuf(fd: U32, bufsize: U32): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` \"\"\" setsockopt_u32(fd, OSSockOpt.sol_socket(), OSSockOpt.so_sndbuf(), bufsize) fun getsockopt(fd: U32, level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) => \"\"\" General wrapper for sockets to the `getsockopt(2)` system call. The `option_max_size` argument is the maximum number of bytes that the caller expects the kernel to return via the system call's `void *` 4th argument. This function will allocate a Pony `Array[U8]` array of size `option_max_size` prior to calling `getsockopt(2)`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. \"\"\" get_so(fd, level, option_name, option_max_size) fun getsockopt_u32(fd: U32, level: I32, option_name: I32): (U32, U32) => \"\"\" Wrapper for sockets to the `getsockopt(2)` system call where the kernel's returned option value is a C `uint32_t` type / Pony type `U32`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. The `*option_value` returned by the kernel converted to a Pony `U32`. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. \"\"\" (let errno: U32, let buffer: Array[U8] iso) = get_so(fd, level, option_name, 4) if errno == 0 then try (errno, bytes4_to_u32(consume buffer)?) else (1, 0) end else (errno, 0) end fun setsockopt(fd: U32, level: I32, option_name: I32, option: Array[U8]): U32 => \"\"\" General wrapper for sockets to the `setsockopt(2)` system call. The caller is responsible for the correct size and byte contents of the `option` array for the requested `level` and `option_name`, including using the appropriate CPU endian byte order. This function returns `0` on success, else the value of `errno` on failure. \"\"\" set_so(fd, level, option_name, option) fun setsockopt_u32(fd: U32, level: I32, option_name: I32, option: U32): U32 => \"\"\" Wrapper for sockets to the `setsockopt(2)` system call where the kernel expects an option value of a C `uint32_t` type / Pony type `U32`. This function returns `0` on success, else the value of `errno` on failure. \"\"\" var word: Array[U8] ref = u32_to_bytes4(option) set_so(fd, level, option_name, word) fun get_so(fd: U32, level: I32, option_name: I32, option_max_size: USize): (U32, Array[U8] iso^) => \"\"\" Low-level interface to `getsockopt(2)`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, `errno` is returned in the first element of the 2-tuple, and the second element's value is junk. \"\"\" var option: Array[U8] iso = recover option.create().>undefined(option_max_size) end var option_size: USize = option_max_size let result: I32 = @getsockopt[I32](fd, level, option_name, option.cpointer(), addressof option_size) if result == 0 then option.truncate(option_size) (0, consume option) else option.truncate(0) (@pony_os_errno().u32(), consume option) end fun set_so(fd: U32, level: I32, option_name: I32, option: Array[U8]): U32 => var option_size: U32 = option.size().u32() \"\"\" Low-level interface to `setsockopt(2)`. This function returns `0` on success, else the value of `errno` on failure. \"\"\" let result: I32 = @setsockopt[I32](fd, level, option_name, option.cpointer(), option_size) if result == 0 then 0 else @pony_os_errno().u32() end fun bytes4_to_u32(b: Array[U8]): U32 ? => b.read_u32(0)? fun u32_to_bytes4(option: U32): Array[U8] => Array[U8](4).>push_u32(option)","title":"ossocket.pony"},{"location":"src/net/ossockopt/","text":"use @pony_os_sockopt_level[I32](option: I32) use @pony_os_sockopt_option[I32](option: I32) primitive OSSockOpt \"\"\" Convenience functions to fetch the option level and option name constants (arguments #2 and #3) for the `getsockopt(2)` and `setsockopt(2)` operating system calls. The values of the option level and option name constants are typically C preprocessor macros, e.g., `#define SOMETHING 42`. These macro names are upper case and may contain multiple consecutive underscore characters (though this is rare, for example, `IP_NAT__XXX`). The function names in this primitive are derived by the C macro name and then: * converted to lower case * any double underscore (`__`) is converted to a single underscore (`_`). These constants are _not_ stable between Pony releases. Values returned by this function may be held by long-lived variables by the calling process: values cannot change while the process runs. Programmers must not cache any of these values for purposes of sharing them for use by any other Pony program (for example, sharing via serialization & deserialization or via direct shared memory). Many functions may return `-1`, which means that the constant's value could not be determined at the Pony runtime library compile time. One cause may be that the option truly isn't available, for example, the option level constant `IPPROTO_3PC` is available on MacOS 10.x but not on Linux 4.4. Another cause may be the Pony runtime library's compilation did not include the correct header file(s) for the target OS platform. A third cause of error is due to the regular expression-based approach used to harvest desirable constants. It is not fool-proof. The regexp used is too broad and finds some macros that are not supposed to be used with `getsockopt(2)` and `setsockopt(2)`. Please consult your platform's documentation to verify the names of the option level and option name macros. The following code fragments are equivalent: set the socket receive buffer size for the file descriptor `fd` to `4455`. ```c /* In C */ int option_value = 4455; setsockopt(fd, SOL_SOCKET, SO_RCVBUF, &option_value, 4); /* In Pony */ var option: I32 = 4455; @pony_os_setsockopt[I32](fd, OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), addressof option, I32(4)) ``` \"\"\" /* Constants are from * macOS Sierra 10.12.6 * Ubuntu Linux Xenial/16.04 LTS + kernel 4.4.0-109-generic * FreeBSD 11.1-RELEASE * Windows Winsock function reference for getsockopt & setsockopt: * https://msdn.microsoft.com/en-us/library/windows/desktop/ms738544(v=vs.85).aspx * https://msdn.microsoft.com/en-us/library/windows/desktop/ms740476(v=vs.85).aspx * Harvested by recipe given in socket.c */ /* * Levels formatted in Pony by: * egrep '^(IP[A-Z0-6]*PROTO_|NSPROTO_|SOL_)' ~/sum-of-all-constants.txt | egrep -v '\\(' | sort -u | egrep -v '^$' | sed 's/__/_/g' | awk 'BEGIN { count=4000; } { printf(\" fun %s():I32 => @pony_os_sockopt_level(I32(%d))\\n\", tolower($1), count++); }' */ // levels fun ipproto_3pc():I32 => @pony_os_sockopt_level(I32(4000)) fun ipproto_adfs():I32 => @pony_os_sockopt_level(I32(4001)) fun ipproto_ah():I32 => @pony_os_sockopt_level(I32(4002)) fun ipproto_ahip():I32 => @pony_os_sockopt_level(I32(4003)) fun ipproto_apes():I32 => @pony_os_sockopt_level(I32(4004)) fun ipproto_argus():I32 => @pony_os_sockopt_level(I32(4005)) fun ipproto_ax25():I32 => @pony_os_sockopt_level(I32(4006)) fun ipproto_beetph():I32 => @pony_os_sockopt_level(I32(4007)) fun ipproto_bha():I32 => @pony_os_sockopt_level(I32(4008)) fun ipproto_blt():I32 => @pony_os_sockopt_level(I32(4009)) fun ipproto_brsatmon():I32 => @pony_os_sockopt_level(I32(4010)) fun ipproto_carp():I32 => @pony_os_sockopt_level(I32(4011)) fun ipproto_cftp():I32 => @pony_os_sockopt_level(I32(4012)) fun ipproto_chaos():I32 => @pony_os_sockopt_level(I32(4013)) fun ipproto_cmtp():I32 => @pony_os_sockopt_level(I32(4014)) fun ipproto_comp():I32 => @pony_os_sockopt_level(I32(4015)) fun ipproto_cphb():I32 => @pony_os_sockopt_level(I32(4016)) fun ipproto_cpnx():I32 => @pony_os_sockopt_level(I32(4017)) fun ipproto_dccp():I32 => @pony_os_sockopt_level(I32(4018)) fun ipproto_ddp():I32 => @pony_os_sockopt_level(I32(4019)) fun ipproto_dgp():I32 => @pony_os_sockopt_level(I32(4020)) fun ipproto_divert():I32 => @pony_os_sockopt_level(I32(4021)) fun ipproto_done():I32 => @pony_os_sockopt_level(I32(4022)) fun ipproto_dstopts():I32 => @pony_os_sockopt_level(I32(4023)) fun ipproto_egp():I32 => @pony_os_sockopt_level(I32(4024)) fun ipproto_emcon():I32 => @pony_os_sockopt_level(I32(4025)) fun ipproto_encap():I32 => @pony_os_sockopt_level(I32(4026)) fun ipproto_eon():I32 => @pony_os_sockopt_level(I32(4027)) fun ipproto_esp():I32 => @pony_os_sockopt_level(I32(4028)) fun ipproto_etherip():I32 => @pony_os_sockopt_level(I32(4029)) fun ipproto_fragment():I32 => @pony_os_sockopt_level(I32(4030)) fun ipproto_ggp():I32 => @pony_os_sockopt_level(I32(4031)) fun ipproto_gmtp():I32 => @pony_os_sockopt_level(I32(4032)) fun ipproto_gre():I32 => @pony_os_sockopt_level(I32(4033)) fun ipproto_hello():I32 => @pony_os_sockopt_level(I32(4034)) fun ipproto_hip():I32 => @pony_os_sockopt_level(I32(4035)) fun ipproto_hmp():I32 => @pony_os_sockopt_level(I32(4036)) fun ipproto_hopopts():I32 => @pony_os_sockopt_level(I32(4037)) fun ipproto_icmp():I32 => @pony_os_sockopt_level(I32(4038)) fun ipproto_icmpv6():I32 => @pony_os_sockopt_level(I32(4039)) fun ipproto_idp():I32 => @pony_os_sockopt_level(I32(4040)) fun ipproto_idpr():I32 => @pony_os_sockopt_level(I32(4041)) fun ipproto_idrp():I32 => @pony_os_sockopt_level(I32(4042)) fun ipproto_igmp():I32 => @pony_os_sockopt_level(I32(4043)) fun ipproto_igp():I32 => @pony_os_sockopt_level(I32(4044)) fun ipproto_igrp():I32 => @pony_os_sockopt_level(I32(4045)) fun ipproto_il():I32 => @pony_os_sockopt_level(I32(4046)) fun ipproto_inlsp():I32 => @pony_os_sockopt_level(I32(4047)) fun ipproto_inp():I32 => @pony_os_sockopt_level(I32(4048)) fun ipproto_ip():I32 => @pony_os_sockopt_level(I32(4049)) fun ipproto_ipcomp():I32 => @pony_os_sockopt_level(I32(4050)) fun ipproto_ipcv():I32 => @pony_os_sockopt_level(I32(4051)) fun ipproto_ipeip():I32 => @pony_os_sockopt_level(I32(4052)) fun ipproto_ipip():I32 => @pony_os_sockopt_level(I32(4053)) fun ipproto_ippc():I32 => @pony_os_sockopt_level(I32(4054)) fun ipproto_ipv4():I32 => @pony_os_sockopt_level(I32(4055)) fun ipproto_ipv6():I32 => @pony_os_sockopt_level(I32(4056)) fun ipproto_irtp():I32 => @pony_os_sockopt_level(I32(4057)) fun ipproto_kryptolan():I32 => @pony_os_sockopt_level(I32(4058)) fun ipproto_larp():I32 => @pony_os_sockopt_level(I32(4059)) fun ipproto_leaf1():I32 => @pony_os_sockopt_level(I32(4060)) fun ipproto_leaf2():I32 => @pony_os_sockopt_level(I32(4061)) fun ipproto_max():I32 => @pony_os_sockopt_level(I32(4062)) fun ipproto_maxid():I32 => @pony_os_sockopt_level(I32(4063)) fun ipproto_meas():I32 => @pony_os_sockopt_level(I32(4064)) fun ipproto_mh():I32 => @pony_os_sockopt_level(I32(4065)) fun ipproto_mhrp():I32 => @pony_os_sockopt_level(I32(4066)) fun ipproto_micp():I32 => @pony_os_sockopt_level(I32(4067)) fun ipproto_mobile():I32 => @pony_os_sockopt_level(I32(4068)) fun ipproto_mpls():I32 => @pony_os_sockopt_level(I32(4069)) fun ipproto_mtp():I32 => @pony_os_sockopt_level(I32(4070)) fun ipproto_mux():I32 => @pony_os_sockopt_level(I32(4071)) fun ipproto_nd():I32 => @pony_os_sockopt_level(I32(4072)) fun ipproto_nhrp():I32 => @pony_os_sockopt_level(I32(4073)) fun ipproto_none():I32 => @pony_os_sockopt_level(I32(4074)) fun ipproto_nsp():I32 => @pony_os_sockopt_level(I32(4075)) fun ipproto_nvpii():I32 => @pony_os_sockopt_level(I32(4076)) fun ipproto_old_divert():I32 => @pony_os_sockopt_level(I32(4077)) fun ipproto_ospfigp():I32 => @pony_os_sockopt_level(I32(4078)) fun ipproto_pfsync():I32 => @pony_os_sockopt_level(I32(4079)) fun ipproto_pgm():I32 => @pony_os_sockopt_level(I32(4080)) fun ipproto_pigp():I32 => @pony_os_sockopt_level(I32(4081)) fun ipproto_pim():I32 => @pony_os_sockopt_level(I32(4082)) fun ipproto_prm():I32 => @pony_os_sockopt_level(I32(4083)) fun ipproto_pup():I32 => @pony_os_sockopt_level(I32(4084)) fun ipproto_pvp():I32 => @pony_os_sockopt_level(I32(4085)) fun ipproto_raw():I32 => @pony_os_sockopt_level(I32(4086)) fun ipproto_rccmon():I32 => @pony_os_sockopt_level(I32(4087)) fun ipproto_rdp():I32 => @pony_os_sockopt_level(I32(4088)) fun ipproto_reserved_253():I32 => @pony_os_sockopt_level(I32(4089)) fun ipproto_reserved_254():I32 => @pony_os_sockopt_level(I32(4090)) fun ipproto_routing():I32 => @pony_os_sockopt_level(I32(4091)) fun ipproto_rsvp():I32 => @pony_os_sockopt_level(I32(4092)) fun ipproto_rvd():I32 => @pony_os_sockopt_level(I32(4093)) fun ipproto_satexpak():I32 => @pony_os_sockopt_level(I32(4094)) fun ipproto_satmon():I32 => @pony_os_sockopt_level(I32(4095)) fun ipproto_sccsp():I32 => @pony_os_sockopt_level(I32(4096)) fun ipproto_sctp():I32 => @pony_os_sockopt_level(I32(4097)) fun ipproto_sdrp():I32 => @pony_os_sockopt_level(I32(4098)) fun ipproto_send():I32 => @pony_os_sockopt_level(I32(4099)) fun ipproto_sep():I32 => @pony_os_sockopt_level(I32(4100)) fun ipproto_shim6():I32 => @pony_os_sockopt_level(I32(4101)) fun ipproto_skip():I32 => @pony_os_sockopt_level(I32(4102)) fun ipproto_spacer():I32 => @pony_os_sockopt_level(I32(4103)) fun ipproto_srpc():I32 => @pony_os_sockopt_level(I32(4104)) fun ipproto_st():I32 => @pony_os_sockopt_level(I32(4105)) fun ipproto_svmtp():I32 => @pony_os_sockopt_level(I32(4106)) fun ipproto_swipe():I32 => @pony_os_sockopt_level(I32(4107)) fun ipproto_tcf():I32 => @pony_os_sockopt_level(I32(4108)) fun ipproto_tcp():I32 => @pony_os_sockopt_level(I32(4109)) fun ipproto_tlsp():I32 => @pony_os_sockopt_level(I32(4110)) fun ipproto_tp():I32 => @pony_os_sockopt_level(I32(4111)) fun ipproto_tpxx():I32 => @pony_os_sockopt_level(I32(4112)) fun ipproto_trunk1():I32 => @pony_os_sockopt_level(I32(4113)) fun ipproto_trunk2():I32 => @pony_os_sockopt_level(I32(4114)) fun ipproto_ttp():I32 => @pony_os_sockopt_level(I32(4115)) fun ipproto_udp():I32 => @pony_os_sockopt_level(I32(4116)) fun ipproto_udplite():I32 => @pony_os_sockopt_level(I32(4117)) fun ipproto_vines():I32 => @pony_os_sockopt_level(I32(4118)) fun ipproto_visa():I32 => @pony_os_sockopt_level(I32(4119)) fun ipproto_vmtp():I32 => @pony_os_sockopt_level(I32(4120)) fun ipproto_wbexpak():I32 => @pony_os_sockopt_level(I32(4121)) fun ipproto_wbmon():I32 => @pony_os_sockopt_level(I32(4122)) fun ipproto_wsn():I32 => @pony_os_sockopt_level(I32(4123)) fun ipproto_xnet():I32 => @pony_os_sockopt_level(I32(4124)) fun ipproto_xtp():I32 => @pony_os_sockopt_level(I32(4125)) fun sol_atalk():I32 => @pony_os_sockopt_level(I32(4126)) fun sol_ax25():I32 => @pony_os_sockopt_level(I32(4127)) fun sol_hci_raw():I32 => @pony_os_sockopt_level(I32(4128)) fun sol_ipx():I32 => @pony_os_sockopt_level(I32(4129)) fun sol_l2cap():I32 => @pony_os_sockopt_level(I32(4130)) fun sol_local():I32 => @pony_os_sockopt_level(I32(4131)) fun sol_ndrvproto():I32 => @pony_os_sockopt_level(I32(4132)) fun sol_netrom():I32 => @pony_os_sockopt_level(I32(4133)) fun sol_rds():I32 => @pony_os_sockopt_level(I32(4134)) fun sol_rfcomm():I32 => @pony_os_sockopt_level(I32(4135)) fun sol_rose():I32 => @pony_os_sockopt_level(I32(4136)) fun sol_sco():I32 => @pony_os_sockopt_level(I32(4137)) fun sol_socket():I32 => @pony_os_sockopt_level(I32(4138)) fun sol_tipc():I32 => @pony_os_sockopt_level(I32(4139)) fun sol_udp():I32 => @pony_os_sockopt_level(I32(4140)) /* * * Options formatted in Pony by: * egrep -v '^(IP[A-Z0-6]*PROTO_|NSPROTO_|SOL_)' ~/sum-of-all-constants.txt | egrep -v '\\(' | sort -u | egrep -v '^$' | sed 's/__/_/g' | awk 'BEGIN { count=0; } { printf(\" fun %s():I32 => @pony_os_sockopt_option(I32(%d))\\n\", tolower($1), count++); }' */ // options fun af_coip():I32 => @pony_os_sockopt_option(I32(0)) fun af_inet():I32 => @pony_os_sockopt_option(I32(1)) fun af_inet6():I32 => @pony_os_sockopt_option(I32(2)) fun bluetooth_proto_sco():I32 => @pony_os_sockopt_option(I32(3)) fun dccp_nr_pkt_types():I32 => @pony_os_sockopt_option(I32(4)) fun dccp_service_list_max_len():I32 => @pony_os_sockopt_option(I32(5)) fun dccp_single_opt_maxlen():I32 => @pony_os_sockopt_option(I32(6)) fun dccp_sockopt_available_ccids():I32 => @pony_os_sockopt_option(I32(7)) fun dccp_sockopt_ccid():I32 => @pony_os_sockopt_option(I32(8)) fun dccp_sockopt_ccid_rx_info():I32 => @pony_os_sockopt_option(I32(9)) fun dccp_sockopt_ccid_tx_info():I32 => @pony_os_sockopt_option(I32(10)) fun dccp_sockopt_change_l():I32 => @pony_os_sockopt_option(I32(11)) fun dccp_sockopt_change_r():I32 => @pony_os_sockopt_option(I32(12)) fun dccp_sockopt_get_cur_mps():I32 => @pony_os_sockopt_option(I32(13)) fun dccp_sockopt_packet_size():I32 => @pony_os_sockopt_option(I32(14)) fun dccp_sockopt_qpolicy_id():I32 => @pony_os_sockopt_option(I32(15)) fun dccp_sockopt_qpolicy_txqlen():I32 => @pony_os_sockopt_option(I32(16)) fun dccp_sockopt_recv_cscov():I32 => @pony_os_sockopt_option(I32(17)) fun dccp_sockopt_rx_ccid():I32 => @pony_os_sockopt_option(I32(18)) fun dccp_sockopt_send_cscov():I32 => @pony_os_sockopt_option(I32(19)) fun dccp_sockopt_server_timewait():I32 => @pony_os_sockopt_option(I32(20)) fun dccp_sockopt_service():I32 => @pony_os_sockopt_option(I32(21)) fun dccp_sockopt_tx_ccid():I32 => @pony_os_sockopt_option(I32(22)) fun dso_acceptmode():I32 => @pony_os_sockopt_option(I32(23)) fun dso_conaccept():I32 => @pony_os_sockopt_option(I32(24)) fun dso_conaccess():I32 => @pony_os_sockopt_option(I32(25)) fun dso_condata():I32 => @pony_os_sockopt_option(I32(26)) fun dso_conreject():I32 => @pony_os_sockopt_option(I32(27)) fun dso_cork():I32 => @pony_os_sockopt_option(I32(28)) fun dso_disdata():I32 => @pony_os_sockopt_option(I32(29)) fun dso_info():I32 => @pony_os_sockopt_option(I32(30)) fun dso_linkinfo():I32 => @pony_os_sockopt_option(I32(31)) fun dso_max():I32 => @pony_os_sockopt_option(I32(32)) fun dso_maxwindow():I32 => @pony_os_sockopt_option(I32(33)) fun dso_nodelay():I32 => @pony_os_sockopt_option(I32(34)) fun dso_seqpacket():I32 => @pony_os_sockopt_option(I32(35)) fun dso_services():I32 => @pony_os_sockopt_option(I32(36)) fun dso_stream():I32 => @pony_os_sockopt_option(I32(37)) fun icmp_address():I32 => @pony_os_sockopt_option(I32(38)) fun icmp_addressreply():I32 => @pony_os_sockopt_option(I32(39)) fun icmp_dest_unreach():I32 => @pony_os_sockopt_option(I32(40)) fun icmp_echo():I32 => @pony_os_sockopt_option(I32(41)) fun icmp_echoreply():I32 => @pony_os_sockopt_option(I32(42)) fun icmp_exc_fragtime():I32 => @pony_os_sockopt_option(I32(43)) fun icmp_exc_ttl():I32 => @pony_os_sockopt_option(I32(44)) fun icmp_filter():I32 => @pony_os_sockopt_option(I32(45)) fun icmp_frag_needed():I32 => @pony_os_sockopt_option(I32(46)) fun icmp_host_ano():I32 => @pony_os_sockopt_option(I32(47)) fun icmp_host_isolated():I32 => @pony_os_sockopt_option(I32(48)) fun icmp_host_unknown():I32 => @pony_os_sockopt_option(I32(49)) fun icmp_host_unreach():I32 => @pony_os_sockopt_option(I32(50)) fun icmp_host_unr_tos():I32 => @pony_os_sockopt_option(I32(51)) fun icmp_info_reply():I32 => @pony_os_sockopt_option(I32(52)) fun icmp_info_request():I32 => @pony_os_sockopt_option(I32(53)) fun icmp_net_ano():I32 => @pony_os_sockopt_option(I32(54)) fun icmp_net_unknown():I32 => @pony_os_sockopt_option(I32(55)) fun icmp_net_unreach():I32 => @pony_os_sockopt_option(I32(56)) fun icmp_net_unr_tos():I32 => @pony_os_sockopt_option(I32(57)) fun icmp_parameterprob():I32 => @pony_os_sockopt_option(I32(58)) fun icmp_pkt_filtered():I32 => @pony_os_sockopt_option(I32(59)) fun icmp_port_unreach():I32 => @pony_os_sockopt_option(I32(60)) fun icmp_prec_cutoff():I32 => @pony_os_sockopt_option(I32(61)) fun icmp_prec_violation():I32 => @pony_os_sockopt_option(I32(62)) fun icmp_prot_unreach():I32 => @pony_os_sockopt_option(I32(63)) fun icmp_redirect():I32 => @pony_os_sockopt_option(I32(64)) fun icmp_redir_host():I32 => @pony_os_sockopt_option(I32(65)) fun icmp_redir_hosttos():I32 => @pony_os_sockopt_option(I32(66)) fun icmp_redir_net():I32 => @pony_os_sockopt_option(I32(67)) fun icmp_redir_nettos():I32 => @pony_os_sockopt_option(I32(68)) fun icmp_source_quench():I32 => @pony_os_sockopt_option(I32(69)) fun icmp_sr_failed():I32 => @pony_os_sockopt_option(I32(70)) fun icmp_timestamp():I32 => @pony_os_sockopt_option(I32(71)) fun icmp_timestampreply():I32 => @pony_os_sockopt_option(I32(72)) fun icmp_time_exceeded():I32 => @pony_os_sockopt_option(I32(73)) fun ipctl_acceptsourceroute():I32 => @pony_os_sockopt_option(I32(74)) fun ipctl_defmtu():I32 => @pony_os_sockopt_option(I32(75)) fun ipctl_defttl():I32 => @pony_os_sockopt_option(I32(76)) fun ipctl_directedbroadcast():I32 => @pony_os_sockopt_option(I32(77)) fun ipctl_fastforwarding():I32 => @pony_os_sockopt_option(I32(78)) fun ipctl_forwarding():I32 => @pony_os_sockopt_option(I32(79)) fun ipctl_gif_ttl():I32 => @pony_os_sockopt_option(I32(80)) fun ipctl_intrdqdrops():I32 => @pony_os_sockopt_option(I32(81)) fun ipctl_intrdqmaxlen():I32 => @pony_os_sockopt_option(I32(82)) fun ipctl_intrqdrops():I32 => @pony_os_sockopt_option(I32(83)) fun ipctl_intrqmaxlen():I32 => @pony_os_sockopt_option(I32(84)) fun ipctl_keepfaith():I32 => @pony_os_sockopt_option(I32(85)) fun ipctl_maxid():I32 => @pony_os_sockopt_option(I32(86)) fun ipctl_rtexpire():I32 => @pony_os_sockopt_option(I32(87)) fun ipctl_rtmaxcache():I32 => @pony_os_sockopt_option(I32(88)) fun ipctl_rtminexpire():I32 => @pony_os_sockopt_option(I32(89)) fun ipctl_sendredirects():I32 => @pony_os_sockopt_option(I32(90)) fun ipctl_sourceroute():I32 => @pony_os_sockopt_option(I32(91)) fun ipctl_stats():I32 => @pony_os_sockopt_option(I32(92)) fun ipport_ephemeralfirst():I32 => @pony_os_sockopt_option(I32(93)) fun ipport_ephemerallast():I32 => @pony_os_sockopt_option(I32(94)) fun ipport_hifirstauto():I32 => @pony_os_sockopt_option(I32(95)) fun ipport_hilastauto():I32 => @pony_os_sockopt_option(I32(96)) fun ipport_max():I32 => @pony_os_sockopt_option(I32(97)) fun ipport_reserved():I32 => @pony_os_sockopt_option(I32(98)) fun ipport_reservedstart():I32 => @pony_os_sockopt_option(I32(99)) fun ipport_userreserved():I32 => @pony_os_sockopt_option(I32(100)) fun ipv6_2292dstopts():I32 => @pony_os_sockopt_option(I32(101)) fun ipv6_2292hoplimit():I32 => @pony_os_sockopt_option(I32(102)) fun ipv6_2292hopopts():I32 => @pony_os_sockopt_option(I32(103)) fun ipv6_2292pktinfo():I32 => @pony_os_sockopt_option(I32(104)) fun ipv6_2292pktoptions():I32 => @pony_os_sockopt_option(I32(105)) fun ipv6_2292rthdr():I32 => @pony_os_sockopt_option(I32(106)) fun ipv6_addrform():I32 => @pony_os_sockopt_option(I32(107)) fun ipv6_addr_preferences():I32 => @pony_os_sockopt_option(I32(108)) fun ipv6_add_membership():I32 => @pony_os_sockopt_option(I32(109)) fun ipv6_authhdr():I32 => @pony_os_sockopt_option(I32(110)) fun ipv6_autoflowlabel():I32 => @pony_os_sockopt_option(I32(111)) fun ipv6_checksum():I32 => @pony_os_sockopt_option(I32(112)) fun ipv6_dontfrag():I32 => @pony_os_sockopt_option(I32(113)) fun ipv6_drop_membership():I32 => @pony_os_sockopt_option(I32(114)) fun ipv6_dstopts():I32 => @pony_os_sockopt_option(I32(115)) fun ipv6_flowinfo():I32 => @pony_os_sockopt_option(I32(116)) fun ipv6_flowinfo_flowlabel():I32 => @pony_os_sockopt_option(I32(117)) fun ipv6_flowinfo_priority():I32 => @pony_os_sockopt_option(I32(118)) fun ipv6_flowinfo_send():I32 => @pony_os_sockopt_option(I32(119)) fun ipv6_flowlabel_mgr():I32 => @pony_os_sockopt_option(I32(120)) fun ipv6_fl_a_get():I32 => @pony_os_sockopt_option(I32(121)) fun ipv6_fl_a_put():I32 => @pony_os_sockopt_option(I32(122)) fun ipv6_fl_a_renew():I32 => @pony_os_sockopt_option(I32(123)) fun ipv6_fl_f_create():I32 => @pony_os_sockopt_option(I32(124)) fun ipv6_fl_f_excl():I32 => @pony_os_sockopt_option(I32(125)) fun ipv6_fl_f_reflect():I32 => @pony_os_sockopt_option(I32(126)) fun ipv6_fl_f_remote():I32 => @pony_os_sockopt_option(I32(127)) fun ipv6_fl_s_any():I32 => @pony_os_sockopt_option(I32(128)) fun ipv6_fl_s_excl():I32 => @pony_os_sockopt_option(I32(129)) fun ipv6_fl_s_none():I32 => @pony_os_sockopt_option(I32(130)) fun ipv6_fl_s_process():I32 => @pony_os_sockopt_option(I32(131)) fun ipv6_fl_s_user():I32 => @pony_os_sockopt_option(I32(132)) fun ipv6_hoplimit():I32 => @pony_os_sockopt_option(I32(133)) fun ipv6_hopopts():I32 => @pony_os_sockopt_option(I32(134)) fun ipv6_ipsec_policy():I32 => @pony_os_sockopt_option(I32(135)) fun ipv6_join_anycast():I32 => @pony_os_sockopt_option(I32(136)) fun ipv6_leave_anycast():I32 => @pony_os_sockopt_option(I32(137)) fun ipv6_minhopcount():I32 => @pony_os_sockopt_option(I32(138)) fun ipv6_mtu():I32 => @pony_os_sockopt_option(I32(139)) fun ipv6_mtu_discover():I32 => @pony_os_sockopt_option(I32(140)) fun ipv6_multicast_hops():I32 => @pony_os_sockopt_option(I32(141)) fun ipv6_multicast_if():I32 => @pony_os_sockopt_option(I32(142)) fun ipv6_multicast_loop():I32 => @pony_os_sockopt_option(I32(143)) fun ipv6_nexthop():I32 => @pony_os_sockopt_option(I32(144)) fun ipv6_origdstaddr():I32 => @pony_os_sockopt_option(I32(145)) fun ipv6_pathmtu():I32 => @pony_os_sockopt_option(I32(146)) fun ipv6_pktinfo():I32 => @pony_os_sockopt_option(I32(147)) fun ipv6_pmtudisc_do():I32 => @pony_os_sockopt_option(I32(148)) fun ipv6_pmtudisc_dont():I32 => @pony_os_sockopt_option(I32(149)) fun ipv6_pmtudisc_interface():I32 => @pony_os_sockopt_option(I32(150)) fun ipv6_pmtudisc_omit():I32 => @pony_os_sockopt_option(I32(151)) fun ipv6_pmtudisc_probe():I32 => @pony_os_sockopt_option(I32(152)) fun ipv6_pmtudisc_want():I32 => @pony_os_sockopt_option(I32(153)) fun ipv6_prefer_src_cga():I32 => @pony_os_sockopt_option(I32(154)) fun ipv6_prefer_src_coa():I32 => @pony_os_sockopt_option(I32(155)) fun ipv6_prefer_src_home():I32 => @pony_os_sockopt_option(I32(156)) fun ipv6_prefer_src_noncga():I32 => @pony_os_sockopt_option(I32(157)) fun ipv6_prefer_src_public():I32 => @pony_os_sockopt_option(I32(158)) fun ipv6_prefer_src_pubtmp_default():I32 => @pony_os_sockopt_option(I32(159)) fun ipv6_prefer_src_tmp():I32 => @pony_os_sockopt_option(I32(160)) fun ipv6_priority_10():I32 => @pony_os_sockopt_option(I32(161)) fun ipv6_priority_11():I32 => @pony_os_sockopt_option(I32(162)) fun ipv6_priority_12():I32 => @pony_os_sockopt_option(I32(163)) fun ipv6_priority_13():I32 => @pony_os_sockopt_option(I32(164)) fun ipv6_priority_14():I32 => @pony_os_sockopt_option(I32(165)) fun ipv6_priority_15():I32 => @pony_os_sockopt_option(I32(166)) fun ipv6_priority_8():I32 => @pony_os_sockopt_option(I32(167)) fun ipv6_priority_9():I32 => @pony_os_sockopt_option(I32(168)) fun ipv6_priority_bulk():I32 => @pony_os_sockopt_option(I32(169)) fun ipv6_priority_control():I32 => @pony_os_sockopt_option(I32(170)) fun ipv6_priority_filler():I32 => @pony_os_sockopt_option(I32(171)) fun ipv6_priority_interactive():I32 => @pony_os_sockopt_option(I32(172)) fun ipv6_priority_reserved1():I32 => @pony_os_sockopt_option(I32(173)) fun ipv6_priority_reserved2():I32 => @pony_os_sockopt_option(I32(174)) fun ipv6_priority_unattended():I32 => @pony_os_sockopt_option(I32(175)) fun ipv6_priority_uncharacterized():I32 => @pony_os_sockopt_option(I32(176)) fun ipv6_recvdstopts():I32 => @pony_os_sockopt_option(I32(177)) fun ipv6_recverr():I32 => @pony_os_sockopt_option(I32(178)) fun ipv6_recvhoplimit():I32 => @pony_os_sockopt_option(I32(179)) fun ipv6_recvhopopts():I32 => @pony_os_sockopt_option(I32(180)) fun ipv6_recvorigdstaddr():I32 => @pony_os_sockopt_option(I32(181)) fun ipv6_recvpathmtu():I32 => @pony_os_sockopt_option(I32(182)) fun ipv6_recvpktinfo():I32 => @pony_os_sockopt_option(I32(183)) fun ipv6_recvrthdr():I32 => @pony_os_sockopt_option(I32(184)) fun ipv6_recvtclass():I32 => @pony_os_sockopt_option(I32(185)) fun ipv6_router_alert():I32 => @pony_os_sockopt_option(I32(186)) fun ipv6_rthdr():I32 => @pony_os_sockopt_option(I32(187)) fun ipv6_rthdrdstopts():I32 => @pony_os_sockopt_option(I32(188)) fun ipv6_tclass():I32 => @pony_os_sockopt_option(I32(189)) fun ipv6_tlv_hao():I32 => @pony_os_sockopt_option(I32(190)) fun ipv6_tlv_jumbo():I32 => @pony_os_sockopt_option(I32(191)) fun ipv6_tlv_pad1():I32 => @pony_os_sockopt_option(I32(192)) fun ipv6_tlv_padn():I32 => @pony_os_sockopt_option(I32(193)) fun ipv6_tlv_routeralert():I32 => @pony_os_sockopt_option(I32(194)) fun ipv6_transparent():I32 => @pony_os_sockopt_option(I32(195)) fun ipv6_unicast_hops():I32 => @pony_os_sockopt_option(I32(196)) fun ipv6_unicast_if():I32 => @pony_os_sockopt_option(I32(197)) fun ipv6_use_min_mtu():I32 => @pony_os_sockopt_option(I32(198)) fun ipv6_v6only():I32 => @pony_os_sockopt_option(I32(199)) fun ipv6_xfrm_policy():I32 => @pony_os_sockopt_option(I32(200)) fun ipx_address():I32 => @pony_os_sockopt_option(I32(201)) fun ipx_address_notify():I32 => @pony_os_sockopt_option(I32(202)) fun ipx_crtitf():I32 => @pony_os_sockopt_option(I32(203)) fun ipx_dltitf():I32 => @pony_os_sockopt_option(I32(204)) fun ipx_dstype():I32 => @pony_os_sockopt_option(I32(205)) fun ipx_extended_address():I32 => @pony_os_sockopt_option(I32(206)) fun ipx_filterptype():I32 => @pony_os_sockopt_option(I32(207)) fun ipx_frame_8022():I32 => @pony_os_sockopt_option(I32(208)) fun ipx_frame_8023():I32 => @pony_os_sockopt_option(I32(209)) fun ipx_frame_etherii():I32 => @pony_os_sockopt_option(I32(210)) fun ipx_frame_none():I32 => @pony_os_sockopt_option(I32(211)) fun ipx_frame_snap():I32 => @pony_os_sockopt_option(I32(212)) fun ipx_frame_tr_8022():I32 => @pony_os_sockopt_option(I32(213)) fun ipx_getnetinfo():I32 => @pony_os_sockopt_option(I32(214)) fun ipx_getnetinfo_norip():I32 => @pony_os_sockopt_option(I32(215)) fun ipx_immediatespxack():I32 => @pony_os_sockopt_option(I32(216)) fun ipx_internal():I32 => @pony_os_sockopt_option(I32(217)) fun ipx_maxsize():I32 => @pony_os_sockopt_option(I32(218)) fun ipx_max_adapter_num():I32 => @pony_os_sockopt_option(I32(219)) fun ipx_mtu():I32 => @pony_os_sockopt_option(I32(220)) fun ipx_node_len():I32 => @pony_os_sockopt_option(I32(221)) fun ipx_primary():I32 => @pony_os_sockopt_option(I32(222)) fun ipx_ptype():I32 => @pony_os_sockopt_option(I32(223)) fun ipx_receive_broadcast():I32 => @pony_os_sockopt_option(I32(224)) fun ipx_recvhdr():I32 => @pony_os_sockopt_option(I32(225)) fun ipx_reripnetnumber():I32 => @pony_os_sockopt_option(I32(226)) fun ipx_route_no_router():I32 => @pony_os_sockopt_option(I32(227)) fun ipx_rt_8022():I32 => @pony_os_sockopt_option(I32(228)) fun ipx_rt_bluebook():I32 => @pony_os_sockopt_option(I32(229)) fun ipx_rt_routed():I32 => @pony_os_sockopt_option(I32(230)) fun ipx_rt_snap():I32 => @pony_os_sockopt_option(I32(231)) fun ipx_special_none():I32 => @pony_os_sockopt_option(I32(232)) fun ipx_spxgetconnectionstatus():I32 => @pony_os_sockopt_option(I32(233)) fun ipx_stopfilterptype():I32 => @pony_os_sockopt_option(I32(234)) fun ipx_type():I32 => @pony_os_sockopt_option(I32(235)) fun ip_add_membership():I32 => @pony_os_sockopt_option(I32(236)) fun ip_add_source_membership():I32 => @pony_os_sockopt_option(I32(237)) fun ip_bindany():I32 => @pony_os_sockopt_option(I32(238)) fun ip_bindmulti():I32 => @pony_os_sockopt_option(I32(239)) fun ip_bind_address_no_port():I32 => @pony_os_sockopt_option(I32(240)) fun ip_block_source():I32 => @pony_os_sockopt_option(I32(241)) fun ip_bound_if():I32 => @pony_os_sockopt_option(I32(242)) fun ip_checksum():I32 => @pony_os_sockopt_option(I32(243)) fun ip_default_multicast_loop():I32 => @pony_os_sockopt_option(I32(244)) fun ip_default_multicast_ttl():I32 => @pony_os_sockopt_option(I32(245)) fun ip_dontfrag():I32 => @pony_os_sockopt_option(I32(246)) fun ip_drop_membership():I32 => @pony_os_sockopt_option(I32(247)) fun ip_drop_source_membership():I32 => @pony_os_sockopt_option(I32(248)) fun ip_dummynet3():I32 => @pony_os_sockopt_option(I32(249)) fun ip_dummynet_configure():I32 => @pony_os_sockopt_option(I32(250)) fun ip_dummynet_del():I32 => @pony_os_sockopt_option(I32(251)) fun ip_dummynet_flush():I32 => @pony_os_sockopt_option(I32(252)) fun ip_dummynet_get():I32 => @pony_os_sockopt_option(I32(253)) fun ip_faith():I32 => @pony_os_sockopt_option(I32(254)) fun ip_flowid():I32 => @pony_os_sockopt_option(I32(255)) fun ip_flowtype():I32 => @pony_os_sockopt_option(I32(256)) fun ip_freebind():I32 => @pony_os_sockopt_option(I32(257)) fun ip_fw3():I32 => @pony_os_sockopt_option(I32(258)) fun ip_fw_add():I32 => @pony_os_sockopt_option(I32(259)) fun ip_fw_del():I32 => @pony_os_sockopt_option(I32(260)) fun ip_fw_flush():I32 => @pony_os_sockopt_option(I32(261)) fun ip_fw_get():I32 => @pony_os_sockopt_option(I32(262)) fun ip_fw_nat_cfg():I32 => @pony_os_sockopt_option(I32(263)) fun ip_fw_nat_del():I32 => @pony_os_sockopt_option(I32(264)) fun ip_fw_nat_get_config():I32 => @pony_os_sockopt_option(I32(265)) fun ip_fw_nat_get_log():I32 => @pony_os_sockopt_option(I32(266)) fun ip_fw_resetlog():I32 => @pony_os_sockopt_option(I32(267)) fun ip_fw_table_add():I32 => @pony_os_sockopt_option(I32(268)) fun ip_fw_table_del():I32 => @pony_os_sockopt_option(I32(269)) fun ip_fw_table_flush():I32 => @pony_os_sockopt_option(I32(270)) fun ip_fw_table_getsize():I32 => @pony_os_sockopt_option(I32(271)) fun ip_fw_table_list():I32 => @pony_os_sockopt_option(I32(272)) fun ip_fw_zero():I32 => @pony_os_sockopt_option(I32(273)) fun ip_hdrincl():I32 => @pony_os_sockopt_option(I32(274)) fun ip_ipsec_policy():I32 => @pony_os_sockopt_option(I32(275)) fun ip_max_group_src_filter():I32 => @pony_os_sockopt_option(I32(276)) fun ip_max_memberships():I32 => @pony_os_sockopt_option(I32(277)) fun ip_max_sock_mute_filter():I32 => @pony_os_sockopt_option(I32(278)) fun ip_max_sock_src_filter():I32 => @pony_os_sockopt_option(I32(279)) fun ip_max_source_filter():I32 => @pony_os_sockopt_option(I32(280)) fun ip_minttl():I32 => @pony_os_sockopt_option(I32(281)) fun ip_min_memberships():I32 => @pony_os_sockopt_option(I32(282)) fun ip_msfilter():I32 => @pony_os_sockopt_option(I32(283)) fun ip_mtu():I32 => @pony_os_sockopt_option(I32(284)) fun ip_mtu_discover():I32 => @pony_os_sockopt_option(I32(285)) fun ip_multicast_all():I32 => @pony_os_sockopt_option(I32(286)) fun ip_multicast_if():I32 => @pony_os_sockopt_option(I32(287)) fun ip_multicast_ifindex():I32 => @pony_os_sockopt_option(I32(288)) fun ip_multicast_loop():I32 => @pony_os_sockopt_option(I32(289)) fun ip_multicast_ttl():I32 => @pony_os_sockopt_option(I32(290)) fun ip_multicast_vif():I32 => @pony_os_sockopt_option(I32(291)) fun ip_nat_xxx():I32 => @pony_os_sockopt_option(I32(292)) fun ip_nodefrag():I32 => @pony_os_sockopt_option(I32(293)) fun ip_old_fw_add():I32 => @pony_os_sockopt_option(I32(294)) fun ip_old_fw_del():I32 => @pony_os_sockopt_option(I32(295)) fun ip_old_fw_flush():I32 => @pony_os_sockopt_option(I32(296)) fun ip_old_fw_get():I32 => @pony_os_sockopt_option(I32(297)) fun ip_old_fw_resetlog():I32 => @pony_os_sockopt_option(I32(298)) fun ip_old_fw_zero():I32 => @pony_os_sockopt_option(I32(299)) fun ip_onesbcast():I32 => @pony_os_sockopt_option(I32(300)) fun ip_options():I32 => @pony_os_sockopt_option(I32(301)) fun ip_origdstaddr():I32 => @pony_os_sockopt_option(I32(302)) fun ip_passsec():I32 => @pony_os_sockopt_option(I32(303)) fun ip_pktinfo():I32 => @pony_os_sockopt_option(I32(304)) fun ip_pktoptions():I32 => @pony_os_sockopt_option(I32(305)) fun ip_pmtudisc_do():I32 => @pony_os_sockopt_option(I32(306)) fun ip_pmtudisc_dont():I32 => @pony_os_sockopt_option(I32(307)) fun ip_pmtudisc_interface():I32 => @pony_os_sockopt_option(I32(308)) fun ip_pmtudisc_omit():I32 => @pony_os_sockopt_option(I32(309)) fun ip_pmtudisc_probe():I32 => @pony_os_sockopt_option(I32(310)) fun ip_pmtudisc_want():I32 => @pony_os_sockopt_option(I32(311)) fun ip_portrange():I32 => @pony_os_sockopt_option(I32(312)) fun ip_portrange_default():I32 => @pony_os_sockopt_option(I32(313)) fun ip_portrange_high():I32 => @pony_os_sockopt_option(I32(314)) fun ip_portrange_low():I32 => @pony_os_sockopt_option(I32(315)) fun ip_recvdstaddr():I32 => @pony_os_sockopt_option(I32(316)) fun ip_recverr():I32 => @pony_os_sockopt_option(I32(317)) fun ip_recvflowid():I32 => @pony_os_sockopt_option(I32(318)) fun ip_recvif():I32 => @pony_os_sockopt_option(I32(319)) fun ip_recvopts():I32 => @pony_os_sockopt_option(I32(320)) fun ip_recvorigdstaddr():I32 => @pony_os_sockopt_option(I32(321)) fun ip_recvpktinfo():I32 => @pony_os_sockopt_option(I32(322)) fun ip_recvretopts():I32 => @pony_os_sockopt_option(I32(323)) fun ip_recvrssbucketid():I32 => @pony_os_sockopt_option(I32(324)) fun ip_recvtos():I32 => @pony_os_sockopt_option(I32(325)) fun ip_recvttl():I32 => @pony_os_sockopt_option(I32(326)) fun ip_retopts():I32 => @pony_os_sockopt_option(I32(327)) fun ip_router_alert():I32 => @pony_os_sockopt_option(I32(328)) fun ip_rssbucketid():I32 => @pony_os_sockopt_option(I32(329)) fun ip_rss_listen_bucket():I32 => @pony_os_sockopt_option(I32(330)) fun ip_rsvp_off():I32 => @pony_os_sockopt_option(I32(331)) fun ip_rsvp_on():I32 => @pony_os_sockopt_option(I32(332)) fun ip_rsvp_vif_off():I32 => @pony_os_sockopt_option(I32(333)) fun ip_rsvp_vif_on():I32 => @pony_os_sockopt_option(I32(334)) fun ip_sendsrcaddr():I32 => @pony_os_sockopt_option(I32(335)) fun ip_striphdr():I32 => @pony_os_sockopt_option(I32(336)) fun ip_tos():I32 => @pony_os_sockopt_option(I32(337)) fun ip_traffic_mgt_background():I32 => @pony_os_sockopt_option(I32(338)) fun ip_transparent():I32 => @pony_os_sockopt_option(I32(339)) fun ip_ttl():I32 => @pony_os_sockopt_option(I32(340)) fun ip_unblock_source():I32 => @pony_os_sockopt_option(I32(341)) fun ip_unicast_if():I32 => @pony_os_sockopt_option(I32(342)) fun ip_xfrm_policy():I32 => @pony_os_sockopt_option(I32(343)) fun local_connwait():I32 => @pony_os_sockopt_option(I32(344)) fun local_creds():I32 => @pony_os_sockopt_option(I32(345)) fun local_peercred():I32 => @pony_os_sockopt_option(I32(346)) fun local_peerepid():I32 => @pony_os_sockopt_option(I32(347)) fun local_peereuuid():I32 => @pony_os_sockopt_option(I32(348)) fun local_peerpid():I32 => @pony_os_sockopt_option(I32(349)) fun local_peeruuid():I32 => @pony_os_sockopt_option(I32(350)) fun local_vendor():I32 => @pony_os_sockopt_option(I32(351)) fun max_tcpoptlen():I32 => @pony_os_sockopt_option(I32(352)) fun mcast_block_source():I32 => @pony_os_sockopt_option(I32(353)) fun mcast_exclude():I32 => @pony_os_sockopt_option(I32(354)) fun mcast_include():I32 => @pony_os_sockopt_option(I32(355)) fun mcast_join_group():I32 => @pony_os_sockopt_option(I32(356)) fun mcast_join_source_group():I32 => @pony_os_sockopt_option(I32(357)) fun mcast_leave_group():I32 => @pony_os_sockopt_option(I32(358)) fun mcast_leave_source_group():I32 => @pony_os_sockopt_option(I32(359)) fun mcast_msfilter():I32 => @pony_os_sockopt_option(I32(360)) fun mcast_unblock_source():I32 => @pony_os_sockopt_option(I32(361)) fun mcast_undefined():I32 => @pony_os_sockopt_option(I32(362)) fun mrt_add_bw_upcall():I32 => @pony_os_sockopt_option(I32(363)) fun mrt_add_mfc():I32 => @pony_os_sockopt_option(I32(364)) fun mrt_add_vif():I32 => @pony_os_sockopt_option(I32(365)) fun mrt_api_config():I32 => @pony_os_sockopt_option(I32(366)) fun mrt_api_flags_all():I32 => @pony_os_sockopt_option(I32(367)) fun mrt_api_support():I32 => @pony_os_sockopt_option(I32(368)) fun mrt_assert():I32 => @pony_os_sockopt_option(I32(369)) fun mrt_del_bw_upcall():I32 => @pony_os_sockopt_option(I32(370)) fun mrt_del_mfc():I32 => @pony_os_sockopt_option(I32(371)) fun mrt_del_vif():I32 => @pony_os_sockopt_option(I32(372)) fun mrt_done():I32 => @pony_os_sockopt_option(I32(373)) fun mrt_init():I32 => @pony_os_sockopt_option(I32(374)) fun mrt_mfc_bw_upcall():I32 => @pony_os_sockopt_option(I32(375)) fun mrt_mfc_flags_all():I32 => @pony_os_sockopt_option(I32(376)) fun mrt_mfc_flags_border_vif():I32 => @pony_os_sockopt_option(I32(377)) fun mrt_mfc_flags_disable_wrongvif():I32 => @pony_os_sockopt_option(I32(378)) fun mrt_mfc_rp():I32 => @pony_os_sockopt_option(I32(379)) fun mrt_pim():I32 => @pony_os_sockopt_option(I32(380)) fun mrt_version():I32 => @pony_os_sockopt_option(I32(381)) fun msg_notification():I32 => @pony_os_sockopt_option(I32(382)) fun msg_socallbck():I32 => @pony_os_sockopt_option(I32(383)) fun ndrvproto_ndrv():I32 => @pony_os_sockopt_option(I32(384)) fun ndrv_addmulticast():I32 => @pony_os_sockopt_option(I32(385)) fun ndrv_deldmxspec():I32 => @pony_os_sockopt_option(I32(386)) fun ndrv_delmulticast():I32 => @pony_os_sockopt_option(I32(387)) fun ndrv_demuxtype_ethertype():I32 => @pony_os_sockopt_option(I32(388)) fun ndrv_demuxtype_sap():I32 => @pony_os_sockopt_option(I32(389)) fun ndrv_demuxtype_snap():I32 => @pony_os_sockopt_option(I32(390)) fun ndrv_dmux_max_descr():I32 => @pony_os_sockopt_option(I32(391)) fun ndrv_protocol_desc_vers():I32 => @pony_os_sockopt_option(I32(392)) fun ndrv_setdmxspec():I32 => @pony_os_sockopt_option(I32(393)) fun netlink_add_membership():I32 => @pony_os_sockopt_option(I32(394)) fun netlink_audit():I32 => @pony_os_sockopt_option(I32(395)) fun netlink_broadcast_error():I32 => @pony_os_sockopt_option(I32(396)) fun netlink_cap_ack():I32 => @pony_os_sockopt_option(I32(397)) fun netlink_connector():I32 => @pony_os_sockopt_option(I32(398)) fun netlink_crypto():I32 => @pony_os_sockopt_option(I32(399)) fun netlink_dnrtmsg():I32 => @pony_os_sockopt_option(I32(400)) fun netlink_drop_membership():I32 => @pony_os_sockopt_option(I32(401)) fun netlink_ecryptfs():I32 => @pony_os_sockopt_option(I32(402)) fun netlink_fib_lookup():I32 => @pony_os_sockopt_option(I32(403)) fun netlink_firewall():I32 => @pony_os_sockopt_option(I32(404)) fun netlink_generic():I32 => @pony_os_sockopt_option(I32(405)) fun netlink_inet_diag():I32 => @pony_os_sockopt_option(I32(406)) fun netlink_ip6_fw():I32 => @pony_os_sockopt_option(I32(407)) fun netlink_iscsi():I32 => @pony_os_sockopt_option(I32(408)) fun netlink_kobject_uevent():I32 => @pony_os_sockopt_option(I32(409)) fun netlink_listen_all_nsid():I32 => @pony_os_sockopt_option(I32(410)) fun netlink_list_memberships():I32 => @pony_os_sockopt_option(I32(411)) fun netlink_netfilter():I32 => @pony_os_sockopt_option(I32(412)) fun netlink_nflog():I32 => @pony_os_sockopt_option(I32(413)) fun netlink_no_enobufs():I32 => @pony_os_sockopt_option(I32(414)) fun netlink_pktinfo():I32 => @pony_os_sockopt_option(I32(415)) fun netlink_rdma():I32 => @pony_os_sockopt_option(I32(416)) fun netlink_route():I32 => @pony_os_sockopt_option(I32(417)) fun netlink_rx_ring():I32 => @pony_os_sockopt_option(I32(418)) fun netlink_scsitransport():I32 => @pony_os_sockopt_option(I32(419)) fun netlink_selinux():I32 => @pony_os_sockopt_option(I32(420)) fun netlink_sock_diag():I32 => @pony_os_sockopt_option(I32(421)) fun netlink_tx_ring():I32 => @pony_os_sockopt_option(I32(422)) fun netlink_unused():I32 => @pony_os_sockopt_option(I32(423)) fun netlink_usersock():I32 => @pony_os_sockopt_option(I32(424)) fun netlink_xfrm():I32 => @pony_os_sockopt_option(I32(425)) fun netrom_idle():I32 => @pony_os_sockopt_option(I32(426)) fun netrom_kill():I32 => @pony_os_sockopt_option(I32(427)) fun netrom_n2():I32 => @pony_os_sockopt_option(I32(428)) fun netrom_neigh():I32 => @pony_os_sockopt_option(I32(429)) fun netrom_node():I32 => @pony_os_sockopt_option(I32(430)) fun netrom_paclen():I32 => @pony_os_sockopt_option(I32(431)) fun netrom_t1():I32 => @pony_os_sockopt_option(I32(432)) fun netrom_t2():I32 => @pony_os_sockopt_option(I32(433)) fun netrom_t4():I32 => @pony_os_sockopt_option(I32(434)) fun nrdv_multicast_addrs_per_sock():I32 => @pony_os_sockopt_option(I32(435)) fun pvd_config():I32 => @pony_os_sockopt_option(I32(436)) fun rds_cancel_sent_to():I32 => @pony_os_sockopt_option(I32(437)) fun rds_cmsg_atomic_cswp():I32 => @pony_os_sockopt_option(I32(438)) fun rds_cmsg_atomic_fadd():I32 => @pony_os_sockopt_option(I32(439)) fun rds_cmsg_cong_update():I32 => @pony_os_sockopt_option(I32(440)) fun rds_cmsg_masked_atomic_cswp():I32 => @pony_os_sockopt_option(I32(441)) fun rds_cmsg_masked_atomic_fadd():I32 => @pony_os_sockopt_option(I32(442)) fun rds_cmsg_rdma_args():I32 => @pony_os_sockopt_option(I32(443)) fun rds_cmsg_rdma_dest():I32 => @pony_os_sockopt_option(I32(444)) fun rds_cmsg_rdma_map():I32 => @pony_os_sockopt_option(I32(445)) fun rds_cmsg_rdma_status():I32 => @pony_os_sockopt_option(I32(446)) fun rds_cong_monitor():I32 => @pony_os_sockopt_option(I32(447)) fun rds_cong_monitor_size():I32 => @pony_os_sockopt_option(I32(448)) fun rds_free_mr():I32 => @pony_os_sockopt_option(I32(449)) fun rds_get_mr():I32 => @pony_os_sockopt_option(I32(450)) fun rds_get_mr_for_dest():I32 => @pony_os_sockopt_option(I32(451)) fun rds_ib_abi_version():I32 => @pony_os_sockopt_option(I32(452)) fun rds_ib_gid_len():I32 => @pony_os_sockopt_option(I32(453)) fun rds_info_connections():I32 => @pony_os_sockopt_option(I32(454)) fun rds_info_connection_flag_connected():I32 => @pony_os_sockopt_option(I32(455)) fun rds_info_connection_flag_connecting():I32 => @pony_os_sockopt_option(I32(456)) fun rds_info_connection_flag_sending():I32 => @pony_os_sockopt_option(I32(457)) fun rds_info_connection_stats():I32 => @pony_os_sockopt_option(I32(458)) fun rds_info_counters():I32 => @pony_os_sockopt_option(I32(459)) fun rds_info_first():I32 => @pony_os_sockopt_option(I32(460)) fun rds_info_ib_connections():I32 => @pony_os_sockopt_option(I32(461)) fun rds_info_iwarp_connections():I32 => @pony_os_sockopt_option(I32(462)) fun rds_info_last():I32 => @pony_os_sockopt_option(I32(463)) fun rds_info_message_flag_ack():I32 => @pony_os_sockopt_option(I32(464)) fun rds_info_message_flag_fast_ack():I32 => @pony_os_sockopt_option(I32(465)) fun rds_info_recv_messages():I32 => @pony_os_sockopt_option(I32(466)) fun rds_info_retrans_messages():I32 => @pony_os_sockopt_option(I32(467)) fun rds_info_send_messages():I32 => @pony_os_sockopt_option(I32(468)) fun rds_info_sockets():I32 => @pony_os_sockopt_option(I32(469)) fun rds_info_tcp_sockets():I32 => @pony_os_sockopt_option(I32(470)) fun rds_rdma_canceled():I32 => @pony_os_sockopt_option(I32(471)) fun rds_rdma_dontwait():I32 => @pony_os_sockopt_option(I32(472)) fun rds_rdma_dropped():I32 => @pony_os_sockopt_option(I32(473)) fun rds_rdma_fence():I32 => @pony_os_sockopt_option(I32(474)) fun rds_rdma_invalidate():I32 => @pony_os_sockopt_option(I32(475)) fun rds_rdma_notify_me():I32 => @pony_os_sockopt_option(I32(476)) fun rds_rdma_other_error():I32 => @pony_os_sockopt_option(I32(477)) fun rds_rdma_readwrite():I32 => @pony_os_sockopt_option(I32(478)) fun rds_rdma_remote_error():I32 => @pony_os_sockopt_option(I32(479)) fun rds_rdma_silent():I32 => @pony_os_sockopt_option(I32(480)) fun rds_rdma_success():I32 => @pony_os_sockopt_option(I32(481)) fun rds_rdma_use_once():I32 => @pony_os_sockopt_option(I32(482)) fun rds_recverr():I32 => @pony_os_sockopt_option(I32(483)) fun rds_trans_count():I32 => @pony_os_sockopt_option(I32(484)) fun rds_trans_ib():I32 => @pony_os_sockopt_option(I32(485)) fun rds_trans_iwarp():I32 => @pony_os_sockopt_option(I32(486)) fun rds_trans_none():I32 => @pony_os_sockopt_option(I32(487)) fun rds_trans_tcp():I32 => @pony_os_sockopt_option(I32(488)) fun rose_access_barred():I32 => @pony_os_sockopt_option(I32(489)) fun rose_defer():I32 => @pony_os_sockopt_option(I32(490)) fun rose_dte_originated():I32 => @pony_os_sockopt_option(I32(491)) fun rose_holdback():I32 => @pony_os_sockopt_option(I32(492)) fun rose_idle():I32 => @pony_os_sockopt_option(I32(493)) fun rose_invalid_facility():I32 => @pony_os_sockopt_option(I32(494)) fun rose_local_procedure():I32 => @pony_os_sockopt_option(I32(495)) fun rose_max_digis():I32 => @pony_os_sockopt_option(I32(496)) fun rose_mtu():I32 => @pony_os_sockopt_option(I32(497)) fun rose_network_congestion():I32 => @pony_os_sockopt_option(I32(498)) fun rose_not_obtainable():I32 => @pony_os_sockopt_option(I32(499)) fun rose_number_busy():I32 => @pony_os_sockopt_option(I32(500)) fun rose_out_of_order():I32 => @pony_os_sockopt_option(I32(501)) fun rose_qbitincl():I32 => @pony_os_sockopt_option(I32(502)) fun rose_remote_procedure():I32 => @pony_os_sockopt_option(I32(503)) fun rose_ship_absent():I32 => @pony_os_sockopt_option(I32(504)) fun rose_t1():I32 => @pony_os_sockopt_option(I32(505)) fun rose_t2():I32 => @pony_os_sockopt_option(I32(506)) fun rose_t3():I32 => @pony_os_sockopt_option(I32(507)) fun scm_hci_raw_direction():I32 => @pony_os_sockopt_option(I32(508)) fun scm_timestamp():I32 => @pony_os_sockopt_option(I32(509)) fun scm_timestamping():I32 => @pony_os_sockopt_option(I32(510)) fun scm_timestampns():I32 => @pony_os_sockopt_option(I32(511)) fun scm_wifi_status():I32 => @pony_os_sockopt_option(I32(512)) fun sctp_abort_association():I32 => @pony_os_sockopt_option(I32(513)) fun sctp_adaptation_layer():I32 => @pony_os_sockopt_option(I32(514)) fun sctp_adaption_layer():I32 => @pony_os_sockopt_option(I32(515)) fun sctp_add_streams():I32 => @pony_os_sockopt_option(I32(516)) fun sctp_add_vrf_id():I32 => @pony_os_sockopt_option(I32(517)) fun sctp_asconf():I32 => @pony_os_sockopt_option(I32(518)) fun sctp_asconf_ack():I32 => @pony_os_sockopt_option(I32(519)) fun sctp_asconf_supported():I32 => @pony_os_sockopt_option(I32(520)) fun sctp_associnfo():I32 => @pony_os_sockopt_option(I32(521)) fun sctp_authentication():I32 => @pony_os_sockopt_option(I32(522)) fun sctp_auth_active_key():I32 => @pony_os_sockopt_option(I32(523)) fun sctp_auth_chunk():I32 => @pony_os_sockopt_option(I32(524)) fun sctp_auth_deactivate_key():I32 => @pony_os_sockopt_option(I32(525)) fun sctp_auth_delete_key():I32 => @pony_os_sockopt_option(I32(526)) fun sctp_auth_key():I32 => @pony_os_sockopt_option(I32(527)) fun sctp_auth_supported():I32 => @pony_os_sockopt_option(I32(528)) fun sctp_autoclose():I32 => @pony_os_sockopt_option(I32(529)) fun sctp_auto_asconf():I32 => @pony_os_sockopt_option(I32(530)) fun sctp_badcrc():I32 => @pony_os_sockopt_option(I32(531)) fun sctp_bindx_add_addr():I32 => @pony_os_sockopt_option(I32(532)) fun sctp_bindx_rem_addr():I32 => @pony_os_sockopt_option(I32(533)) fun sctp_blk_logging_enable():I32 => @pony_os_sockopt_option(I32(534)) fun sctp_bound():I32 => @pony_os_sockopt_option(I32(535)) fun sctp_cause_cookie_in_shutdown():I32 => @pony_os_sockopt_option(I32(536)) fun sctp_cause_deleting_last_addr():I32 => @pony_os_sockopt_option(I32(537)) fun sctp_cause_deleting_src_addr():I32 => @pony_os_sockopt_option(I32(538)) fun sctp_cause_illegal_asconf_ack():I32 => @pony_os_sockopt_option(I32(539)) fun sctp_cause_invalid_param():I32 => @pony_os_sockopt_option(I32(540)) fun sctp_cause_invalid_stream():I32 => @pony_os_sockopt_option(I32(541)) fun sctp_cause_missing_param():I32 => @pony_os_sockopt_option(I32(542)) fun sctp_cause_nat_colliding_state():I32 => @pony_os_sockopt_option(I32(543)) fun sctp_cause_nat_missing_state():I32 => @pony_os_sockopt_option(I32(544)) fun sctp_cause_no_error():I32 => @pony_os_sockopt_option(I32(545)) fun sctp_cause_no_user_data():I32 => @pony_os_sockopt_option(I32(546)) fun sctp_cause_out_of_resc():I32 => @pony_os_sockopt_option(I32(547)) fun sctp_cause_protocol_violation():I32 => @pony_os_sockopt_option(I32(548)) fun sctp_cause_request_refused():I32 => @pony_os_sockopt_option(I32(549)) fun sctp_cause_resource_shortage():I32 => @pony_os_sockopt_option(I32(550)) fun sctp_cause_restart_w_newaddr():I32 => @pony_os_sockopt_option(I32(551)) fun sctp_cause_stale_cookie():I32 => @pony_os_sockopt_option(I32(552)) fun sctp_cause_unrecog_chunk():I32 => @pony_os_sockopt_option(I32(553)) fun sctp_cause_unrecog_param():I32 => @pony_os_sockopt_option(I32(554)) fun sctp_cause_unresolvable_addr():I32 => @pony_os_sockopt_option(I32(555)) fun sctp_cause_unsupported_hmacid():I32 => @pony_os_sockopt_option(I32(556)) fun sctp_cause_user_initiated_abt():I32 => @pony_os_sockopt_option(I32(557)) fun sctp_cc_hstcp():I32 => @pony_os_sockopt_option(I32(558)) fun sctp_cc_htcp():I32 => @pony_os_sockopt_option(I32(559)) fun sctp_cc_option():I32 => @pony_os_sockopt_option(I32(560)) fun sctp_cc_opt_rtcc_setmode():I32 => @pony_os_sockopt_option(I32(561)) fun sctp_cc_opt_steady_step():I32 => @pony_os_sockopt_option(I32(562)) fun sctp_cc_opt_use_dccc_ecn():I32 => @pony_os_sockopt_option(I32(563)) fun sctp_cc_rfc2581():I32 => @pony_os_sockopt_option(I32(564)) fun sctp_cc_rtcc():I32 => @pony_os_sockopt_option(I32(565)) fun sctp_closed():I32 => @pony_os_sockopt_option(I32(566)) fun sctp_clr_stat_log():I32 => @pony_os_sockopt_option(I32(567)) fun sctp_cmt_base():I32 => @pony_os_sockopt_option(I32(568)) fun sctp_cmt_max():I32 => @pony_os_sockopt_option(I32(569)) fun sctp_cmt_mptcp():I32 => @pony_os_sockopt_option(I32(570)) fun sctp_cmt_off():I32 => @pony_os_sockopt_option(I32(571)) fun sctp_cmt_on_off():I32 => @pony_os_sockopt_option(I32(572)) fun sctp_cmt_rpv1():I32 => @pony_os_sockopt_option(I32(573)) fun sctp_cmt_rpv2():I32 => @pony_os_sockopt_option(I32(574)) fun sctp_cmt_use_dac():I32 => @pony_os_sockopt_option(I32(575)) fun sctp_connect_x():I32 => @pony_os_sockopt_option(I32(576)) fun sctp_connect_x_complete():I32 => @pony_os_sockopt_option(I32(577)) fun sctp_connect_x_delayed():I32 => @pony_os_sockopt_option(I32(578)) fun sctp_context():I32 => @pony_os_sockopt_option(I32(579)) fun sctp_cookie_ack():I32 => @pony_os_sockopt_option(I32(580)) fun sctp_cookie_echo():I32 => @pony_os_sockopt_option(I32(581)) fun sctp_cookie_echoed():I32 => @pony_os_sockopt_option(I32(582)) fun sctp_cookie_wait():I32 => @pony_os_sockopt_option(I32(583)) fun sctp_cwnd_logging_enable():I32 => @pony_os_sockopt_option(I32(584)) fun sctp_cwnd_monitor_enable():I32 => @pony_os_sockopt_option(I32(585)) fun sctp_cwr_in_same_window():I32 => @pony_os_sockopt_option(I32(586)) fun sctp_cwr_reduce_override():I32 => @pony_os_sockopt_option(I32(587)) fun sctp_data():I32 => @pony_os_sockopt_option(I32(588)) fun sctp_data_first_frag():I32 => @pony_os_sockopt_option(I32(589)) fun sctp_data_frag_mask():I32 => @pony_os_sockopt_option(I32(590)) fun sctp_data_last_frag():I32 => @pony_os_sockopt_option(I32(591)) fun sctp_data_middle_frag():I32 => @pony_os_sockopt_option(I32(592)) fun sctp_data_not_frag():I32 => @pony_os_sockopt_option(I32(593)) fun sctp_data_sack_immediately():I32 => @pony_os_sockopt_option(I32(594)) fun sctp_data_unordered():I32 => @pony_os_sockopt_option(I32(595)) fun sctp_default_prinfo():I32 => @pony_os_sockopt_option(I32(596)) fun sctp_default_send_param():I32 => @pony_os_sockopt_option(I32(597)) fun sctp_default_sndinfo():I32 => @pony_os_sockopt_option(I32(598)) fun sctp_delayed_sack():I32 => @pony_os_sockopt_option(I32(599)) fun sctp_del_vrf_id():I32 => @pony_os_sockopt_option(I32(600)) fun sctp_disable_fragments():I32 => @pony_os_sockopt_option(I32(601)) fun sctp_ecn_cwr():I32 => @pony_os_sockopt_option(I32(602)) fun sctp_ecn_echo():I32 => @pony_os_sockopt_option(I32(603)) fun sctp_ecn_supported():I32 => @pony_os_sockopt_option(I32(604)) fun sctp_enable_change_assoc_req():I32 => @pony_os_sockopt_option(I32(605)) fun sctp_enable_reset_assoc_req():I32 => @pony_os_sockopt_option(I32(606)) fun sctp_enable_reset_stream_req():I32 => @pony_os_sockopt_option(I32(607)) fun sctp_enable_stream_reset():I32 => @pony_os_sockopt_option(I32(608)) fun sctp_enable_value_mask():I32 => @pony_os_sockopt_option(I32(609)) fun sctp_established():I32 => @pony_os_sockopt_option(I32(610)) fun sctp_event():I32 => @pony_os_sockopt_option(I32(611)) fun sctp_events():I32 => @pony_os_sockopt_option(I32(612)) fun sctp_explicit_eor():I32 => @pony_os_sockopt_option(I32(613)) fun sctp_flight_logging_enable():I32 => @pony_os_sockopt_option(I32(614)) fun sctp_forward_cum_tsn():I32 => @pony_os_sockopt_option(I32(615)) fun sctp_fragment_interleave():I32 => @pony_os_sockopt_option(I32(616)) fun sctp_frag_level_0():I32 => @pony_os_sockopt_option(I32(617)) fun sctp_frag_level_1():I32 => @pony_os_sockopt_option(I32(618)) fun sctp_frag_level_2():I32 => @pony_os_sockopt_option(I32(619)) fun sctp_from_middle_box():I32 => @pony_os_sockopt_option(I32(620)) fun sctp_fr_logging_enable():I32 => @pony_os_sockopt_option(I32(621)) fun sctp_get_addr_len():I32 => @pony_os_sockopt_option(I32(622)) fun sctp_get_asoc_vrf():I32 => @pony_os_sockopt_option(I32(623)) fun sctp_get_assoc_id_list():I32 => @pony_os_sockopt_option(I32(624)) fun sctp_get_assoc_number():I32 => @pony_os_sockopt_option(I32(625)) fun sctp_get_local_addresses():I32 => @pony_os_sockopt_option(I32(626)) fun sctp_get_local_addr_size():I32 => @pony_os_sockopt_option(I32(627)) fun sctp_get_nonce_values():I32 => @pony_os_sockopt_option(I32(628)) fun sctp_get_packet_log():I32 => @pony_os_sockopt_option(I32(629)) fun sctp_get_peer_addresses():I32 => @pony_os_sockopt_option(I32(630)) fun sctp_get_peer_addr_info():I32 => @pony_os_sockopt_option(I32(631)) fun sctp_get_remote_addr_size():I32 => @pony_os_sockopt_option(I32(632)) fun sctp_get_sndbuf_use():I32 => @pony_os_sockopt_option(I32(633)) fun sctp_get_stat_log():I32 => @pony_os_sockopt_option(I32(634)) fun sctp_get_vrf_ids():I32 => @pony_os_sockopt_option(I32(635)) fun sctp_had_no_tcb():I32 => @pony_os_sockopt_option(I32(636)) fun sctp_heartbeat_ack():I32 => @pony_os_sockopt_option(I32(637)) fun sctp_heartbeat_request():I32 => @pony_os_sockopt_option(I32(638)) fun sctp_hmac_ident():I32 => @pony_os_sockopt_option(I32(639)) fun sctp_idata():I32 => @pony_os_sockopt_option(I32(640)) fun sctp_iforward_cum_tsn():I32 => @pony_os_sockopt_option(I32(641)) fun sctp_initiation():I32 => @pony_os_sockopt_option(I32(642)) fun sctp_initiation_ack():I32 => @pony_os_sockopt_option(I32(643)) fun sctp_initmsg():I32 => @pony_os_sockopt_option(I32(644)) fun sctp_interleaving_supported():I32 => @pony_os_sockopt_option(I32(645)) fun sctp_i_want_mapped_v4_addr():I32 => @pony_os_sockopt_option(I32(646)) fun sctp_last_packet_tracing():I32 => @pony_os_sockopt_option(I32(647)) fun sctp_listen():I32 => @pony_os_sockopt_option(I32(648)) fun sctp_local_auth_chunks():I32 => @pony_os_sockopt_option(I32(649)) fun sctp_lock_logging_enable():I32 => @pony_os_sockopt_option(I32(650)) fun sctp_log_at_send_2_outq():I32 => @pony_os_sockopt_option(I32(651)) fun sctp_log_at_send_2_sctp():I32 => @pony_os_sockopt_option(I32(652)) fun sctp_log_maxburst_enable():I32 => @pony_os_sockopt_option(I32(653)) fun sctp_log_rwnd_enable():I32 => @pony_os_sockopt_option(I32(654)) fun sctp_log_sack_arrivals_enable():I32 => @pony_os_sockopt_option(I32(655)) fun sctp_log_try_advance():I32 => @pony_os_sockopt_option(I32(656)) fun sctp_ltrace_chunk_enable():I32 => @pony_os_sockopt_option(I32(657)) fun sctp_ltrace_error_enable():I32 => @pony_os_sockopt_option(I32(658)) fun sctp_map_logging_enable():I32 => @pony_os_sockopt_option(I32(659)) fun sctp_maxburst():I32 => @pony_os_sockopt_option(I32(660)) fun sctp_maxseg():I32 => @pony_os_sockopt_option(I32(661)) fun sctp_max_burst():I32 => @pony_os_sockopt_option(I32(662)) fun sctp_max_cookie_life():I32 => @pony_os_sockopt_option(I32(663)) fun sctp_max_cwnd():I32 => @pony_os_sockopt_option(I32(664)) fun sctp_max_hb_interval():I32 => @pony_os_sockopt_option(I32(665)) fun sctp_max_sack_delay():I32 => @pony_os_sockopt_option(I32(666)) fun sctp_mbcnt_logging_enable():I32 => @pony_os_sockopt_option(I32(667)) fun sctp_mbuf_logging_enable():I32 => @pony_os_sockopt_option(I32(668)) fun sctp_mobility_base():I32 => @pony_os_sockopt_option(I32(669)) fun sctp_mobility_fasthandoff():I32 => @pony_os_sockopt_option(I32(670)) fun sctp_mobility_prim_deleted():I32 => @pony_os_sockopt_option(I32(671)) fun sctp_nagle_logging_enable():I32 => @pony_os_sockopt_option(I32(672)) fun sctp_nodelay():I32 => @pony_os_sockopt_option(I32(673)) fun sctp_nrsack_supported():I32 => @pony_os_sockopt_option(I32(674)) fun sctp_nr_selective_ack():I32 => @pony_os_sockopt_option(I32(675)) fun sctp_operation_error():I32 => @pony_os_sockopt_option(I32(676)) fun sctp_packed():I32 => @pony_os_sockopt_option(I32(677)) fun sctp_packet_dropped():I32 => @pony_os_sockopt_option(I32(678)) fun sctp_packet_log_size():I32 => @pony_os_sockopt_option(I32(679)) fun sctp_packet_truncated():I32 => @pony_os_sockopt_option(I32(680)) fun sctp_pad_chunk():I32 => @pony_os_sockopt_option(I32(681)) fun sctp_partial_delivery_point():I32 => @pony_os_sockopt_option(I32(682)) fun sctp_pcb_copy_flags():I32 => @pony_os_sockopt_option(I32(683)) fun sctp_pcb_flags_accepting():I32 => @pony_os_sockopt_option(I32(684)) fun sctp_pcb_flags_adaptationevnt():I32 => @pony_os_sockopt_option(I32(685)) fun sctp_pcb_flags_assoc_resetevnt():I32 => @pony_os_sockopt_option(I32(686)) fun sctp_pcb_flags_authevnt():I32 => @pony_os_sockopt_option(I32(687)) fun sctp_pcb_flags_autoclose():I32 => @pony_os_sockopt_option(I32(688)) fun sctp_pcb_flags_auto_asconf():I32 => @pony_os_sockopt_option(I32(689)) fun sctp_pcb_flags_blocking_io():I32 => @pony_os_sockopt_option(I32(690)) fun sctp_pcb_flags_boundall():I32 => @pony_os_sockopt_option(I32(691)) fun sctp_pcb_flags_bound_v6():I32 => @pony_os_sockopt_option(I32(692)) fun sctp_pcb_flags_close_ip():I32 => @pony_os_sockopt_option(I32(693)) fun sctp_pcb_flags_connected():I32 => @pony_os_sockopt_option(I32(694)) fun sctp_pcb_flags_donot_heartbeat():I32 => @pony_os_sockopt_option(I32(695)) fun sctp_pcb_flags_dont_wake():I32 => @pony_os_sockopt_option(I32(696)) fun sctp_pcb_flags_do_asconf():I32 => @pony_os_sockopt_option(I32(697)) fun sctp_pcb_flags_do_not_pmtud():I32 => @pony_os_sockopt_option(I32(698)) fun sctp_pcb_flags_dryevnt():I32 => @pony_os_sockopt_option(I32(699)) fun sctp_pcb_flags_explicit_eor():I32 => @pony_os_sockopt_option(I32(700)) fun sctp_pcb_flags_ext_rcvinfo():I32 => @pony_os_sockopt_option(I32(701)) fun sctp_pcb_flags_frag_interleave():I32 => @pony_os_sockopt_option(I32(702)) fun sctp_pcb_flags_interleave_strms():I32 => @pony_os_sockopt_option(I32(703)) fun sctp_pcb_flags_in_tcppool():I32 => @pony_os_sockopt_option(I32(704)) fun sctp_pcb_flags_multiple_asconfs():I32 => @pony_os_sockopt_option(I32(705)) fun sctp_pcb_flags_needs_mapped_v4():I32 => @pony_os_sockopt_option(I32(706)) fun sctp_pcb_flags_nodelay():I32 => @pony_os_sockopt_option(I32(707)) fun sctp_pcb_flags_no_fragment():I32 => @pony_os_sockopt_option(I32(708)) fun sctp_pcb_flags_pdapievnt():I32 => @pony_os_sockopt_option(I32(709)) fun sctp_pcb_flags_portreuse():I32 => @pony_os_sockopt_option(I32(710)) fun sctp_pcb_flags_recvassocevnt():I32 => @pony_os_sockopt_option(I32(711)) fun sctp_pcb_flags_recvdataioevnt():I32 => @pony_os_sockopt_option(I32(712)) fun sctp_pcb_flags_recvnsendfailevnt():I32 => @pony_os_sockopt_option(I32(713)) fun sctp_pcb_flags_recvnxtinfo():I32 => @pony_os_sockopt_option(I32(714)) fun sctp_pcb_flags_recvpaddrevnt():I32 => @pony_os_sockopt_option(I32(715)) fun sctp_pcb_flags_recvpeererr():I32 => @pony_os_sockopt_option(I32(716)) fun sctp_pcb_flags_recvrcvinfo():I32 => @pony_os_sockopt_option(I32(717)) fun sctp_pcb_flags_recvsendfailevnt():I32 => @pony_os_sockopt_option(I32(718)) fun sctp_pcb_flags_recvshutdownevnt():I32 => @pony_os_sockopt_option(I32(719)) fun sctp_pcb_flags_socket_allgone():I32 => @pony_os_sockopt_option(I32(720)) fun sctp_pcb_flags_socket_cant_read():I32 => @pony_os_sockopt_option(I32(721)) fun sctp_pcb_flags_socket_gone():I32 => @pony_os_sockopt_option(I32(722)) fun sctp_pcb_flags_stream_changeevnt():I32 => @pony_os_sockopt_option(I32(723)) fun sctp_pcb_flags_stream_resetevnt():I32 => @pony_os_sockopt_option(I32(724)) fun sctp_pcb_flags_tcptype():I32 => @pony_os_sockopt_option(I32(725)) fun sctp_pcb_flags_udptype():I32 => @pony_os_sockopt_option(I32(726)) fun sctp_pcb_flags_unbound():I32 => @pony_os_sockopt_option(I32(727)) fun sctp_pcb_flags_wakeinput():I32 => @pony_os_sockopt_option(I32(728)) fun sctp_pcb_flags_wakeoutput():I32 => @pony_os_sockopt_option(I32(729)) fun sctp_pcb_flags_was_aborted():I32 => @pony_os_sockopt_option(I32(730)) fun sctp_pcb_flags_was_connected():I32 => @pony_os_sockopt_option(I32(731)) fun sctp_pcb_flags_zero_copy_active():I32 => @pony_os_sockopt_option(I32(732)) fun sctp_pcb_status():I32 => @pony_os_sockopt_option(I32(733)) fun sctp_peeloff():I32 => @pony_os_sockopt_option(I32(734)) fun sctp_peer_addr_params():I32 => @pony_os_sockopt_option(I32(735)) fun sctp_peer_addr_thlds():I32 => @pony_os_sockopt_option(I32(736)) fun sctp_peer_auth_chunks():I32 => @pony_os_sockopt_option(I32(737)) fun sctp_pktdrop_supported():I32 => @pony_os_sockopt_option(I32(738)) fun sctp_pluggable_cc():I32 => @pony_os_sockopt_option(I32(739)) fun sctp_pluggable_ss():I32 => @pony_os_sockopt_option(I32(740)) fun sctp_primary_addr():I32 => @pony_os_sockopt_option(I32(741)) fun sctp_pr_assoc_status():I32 => @pony_os_sockopt_option(I32(742)) fun sctp_pr_stream_status():I32 => @pony_os_sockopt_option(I32(743)) fun sctp_pr_supported():I32 => @pony_os_sockopt_option(I32(744)) fun sctp_reconfig_supported():I32 => @pony_os_sockopt_option(I32(745)) fun sctp_recvnxtinfo():I32 => @pony_os_sockopt_option(I32(746)) fun sctp_recvrcvinfo():I32 => @pony_os_sockopt_option(I32(747)) fun sctp_recv_rwnd_logging_enable():I32 => @pony_os_sockopt_option(I32(748)) fun sctp_remote_udp_encaps_port():I32 => @pony_os_sockopt_option(I32(749)) fun sctp_reset_assoc():I32 => @pony_os_sockopt_option(I32(750)) fun sctp_reset_streams():I32 => @pony_os_sockopt_option(I32(751)) fun sctp_reuse_port():I32 => @pony_os_sockopt_option(I32(752)) fun sctp_rtoinfo():I32 => @pony_os_sockopt_option(I32(753)) fun sctp_rttvar_logging_enable():I32 => @pony_os_sockopt_option(I32(754)) fun sctp_sack_cmt_dac():I32 => @pony_os_sockopt_option(I32(755)) fun sctp_sack_logging_enable():I32 => @pony_os_sockopt_option(I32(756)) fun sctp_sack_nonce_sum():I32 => @pony_os_sockopt_option(I32(757)) fun sctp_sack_rwnd_logging_enable():I32 => @pony_os_sockopt_option(I32(758)) fun sctp_sat_network_burst_incr():I32 => @pony_os_sockopt_option(I32(759)) fun sctp_sat_network_min():I32 => @pony_os_sockopt_option(I32(760)) fun sctp_sb_logging_enable():I32 => @pony_os_sockopt_option(I32(761)) fun sctp_selective_ack():I32 => @pony_os_sockopt_option(I32(762)) fun sctp_set_debug_level():I32 => @pony_os_sockopt_option(I32(763)) fun sctp_set_dynamic_primary():I32 => @pony_os_sockopt_option(I32(764)) fun sctp_set_initial_dbg_seq():I32 => @pony_os_sockopt_option(I32(765)) fun sctp_set_peer_primary_addr():I32 => @pony_os_sockopt_option(I32(766)) fun sctp_shutdown():I32 => @pony_os_sockopt_option(I32(767)) fun sctp_shutdown_ack():I32 => @pony_os_sockopt_option(I32(768)) fun sctp_shutdown_ack_sent():I32 => @pony_os_sockopt_option(I32(769)) fun sctp_shutdown_complete():I32 => @pony_os_sockopt_option(I32(770)) fun sctp_shutdown_pending():I32 => @pony_os_sockopt_option(I32(771)) fun sctp_shutdown_received():I32 => @pony_os_sockopt_option(I32(772)) fun sctp_shutdown_sent():I32 => @pony_os_sockopt_option(I32(773)) fun sctp_smallest_pmtu():I32 => @pony_os_sockopt_option(I32(774)) fun sctp_ss_default():I32 => @pony_os_sockopt_option(I32(775)) fun sctp_ss_fair_bandwith():I32 => @pony_os_sockopt_option(I32(776)) fun sctp_ss_first_come():I32 => @pony_os_sockopt_option(I32(777)) fun sctp_ss_priority():I32 => @pony_os_sockopt_option(I32(778)) fun sctp_ss_round_robin():I32 => @pony_os_sockopt_option(I32(779)) fun sctp_ss_round_robin_packet():I32 => @pony_os_sockopt_option(I32(780)) fun sctp_ss_value():I32 => @pony_os_sockopt_option(I32(781)) fun sctp_status():I32 => @pony_os_sockopt_option(I32(782)) fun sctp_stream_reset():I32 => @pony_os_sockopt_option(I32(783)) fun sctp_stream_reset_incoming():I32 => @pony_os_sockopt_option(I32(784)) fun sctp_stream_reset_outgoing():I32 => @pony_os_sockopt_option(I32(785)) fun sctp_str_logging_enable():I32 => @pony_os_sockopt_option(I32(786)) fun sctp_threshold_logging():I32 => @pony_os_sockopt_option(I32(787)) fun sctp_timeouts():I32 => @pony_os_sockopt_option(I32(788)) fun sctp_use_ext_rcvinfo():I32 => @pony_os_sockopt_option(I32(789)) fun sctp_vrf_id():I32 => @pony_os_sockopt_option(I32(790)) fun sctp_wake_logging_enable():I32 => @pony_os_sockopt_option(I32(791)) fun sock_cloexec():I32 => @pony_os_sockopt_option(I32(792)) fun sock_dgram():I32 => @pony_os_sockopt_option(I32(793)) fun sock_maxaddrlen():I32 => @pony_os_sockopt_option(I32(794)) fun sock_nonblock():I32 => @pony_os_sockopt_option(I32(795)) fun sock_raw():I32 => @pony_os_sockopt_option(I32(796)) fun sock_rdm():I32 => @pony_os_sockopt_option(I32(797)) fun sock_seqpacket():I32 => @pony_os_sockopt_option(I32(798)) fun sock_stream():I32 => @pony_os_sockopt_option(I32(799)) fun somaxconn():I32 => @pony_os_sockopt_option(I32(800)) fun sonpx_setoptshut():I32 => @pony_os_sockopt_option(I32(801)) fun so_acceptconn():I32 => @pony_os_sockopt_option(I32(802)) fun so_acceptfilter():I32 => @pony_os_sockopt_option(I32(803)) fun so_atmpvc():I32 => @pony_os_sockopt_option(I32(804)) fun so_atmqos():I32 => @pony_os_sockopt_option(I32(805)) fun so_atmsap():I32 => @pony_os_sockopt_option(I32(806)) fun so_attach_bpf():I32 => @pony_os_sockopt_option(I32(807)) fun so_attach_filter():I32 => @pony_os_sockopt_option(I32(808)) fun so_bindtodevice():I32 => @pony_os_sockopt_option(I32(809)) fun so_bintime():I32 => @pony_os_sockopt_option(I32(810)) fun so_bpf_extensions():I32 => @pony_os_sockopt_option(I32(811)) fun so_broadcast():I32 => @pony_os_sockopt_option(I32(812)) fun so_bsdcompat():I32 => @pony_os_sockopt_option(I32(813)) fun so_bsp_state():I32 => @pony_os_sockopt_option(I32(814)) fun so_busy_poll():I32 => @pony_os_sockopt_option(I32(815)) fun so_conaccess():I32 => @pony_os_sockopt_option(I32(816)) fun so_condata():I32 => @pony_os_sockopt_option(I32(817)) fun so_conditional_accept():I32 => @pony_os_sockopt_option(I32(818)) fun so_connect_time():I32 => @pony_os_sockopt_option(I32(819)) fun so_debug():I32 => @pony_os_sockopt_option(I32(820)) fun so_detach_bpf():I32 => @pony_os_sockopt_option(I32(821)) fun so_detach_filter():I32 => @pony_os_sockopt_option(I32(822)) fun so_domain():I32 => @pony_os_sockopt_option(I32(823)) fun so_dontlinger():I32 => @pony_os_sockopt_option(I32(824)) fun so_dontroute():I32 => @pony_os_sockopt_option(I32(825)) fun so_donttrunc():I32 => @pony_os_sockopt_option(I32(826)) fun so_error():I32 => @pony_os_sockopt_option(I32(827)) fun so_exclusiveaddruse():I32 => @pony_os_sockopt_option(I32(828)) fun so_get_filter():I32 => @pony_os_sockopt_option(I32(829)) fun so_group_id():I32 => @pony_os_sockopt_option(I32(830)) fun so_group_priority():I32 => @pony_os_sockopt_option(I32(831)) fun so_hci_raw_direction():I32 => @pony_os_sockopt_option(I32(832)) fun so_hci_raw_filter():I32 => @pony_os_sockopt_option(I32(833)) fun so_incoming_cpu():I32 => @pony_os_sockopt_option(I32(834)) fun so_keepalive():I32 => @pony_os_sockopt_option(I32(835)) fun so_l2cap_encrypted():I32 => @pony_os_sockopt_option(I32(836)) fun so_l2cap_flush():I32 => @pony_os_sockopt_option(I32(837)) fun so_l2cap_iflow():I32 => @pony_os_sockopt_option(I32(838)) fun so_l2cap_imtu():I32 => @pony_os_sockopt_option(I32(839)) fun so_l2cap_oflow():I32 => @pony_os_sockopt_option(I32(840)) fun so_l2cap_omtu():I32 => @pony_os_sockopt_option(I32(841)) fun so_label():I32 => @pony_os_sockopt_option(I32(842)) fun so_linger():I32 => @pony_os_sockopt_option(I32(843)) fun so_linger_sec():I32 => @pony_os_sockopt_option(I32(844)) fun so_linkinfo():I32 => @pony_os_sockopt_option(I32(845)) fun so_listenincqlen():I32 => @pony_os_sockopt_option(I32(846)) fun so_listenqlen():I32 => @pony_os_sockopt_option(I32(847)) fun so_listenqlimit():I32 => @pony_os_sockopt_option(I32(848)) fun so_lock_filter():I32 => @pony_os_sockopt_option(I32(849)) fun so_mark():I32 => @pony_os_sockopt_option(I32(850)) fun so_max_msg_size():I32 => @pony_os_sockopt_option(I32(851)) fun so_max_pacing_rate():I32 => @pony_os_sockopt_option(I32(852)) fun so_multipoint():I32 => @pony_os_sockopt_option(I32(853)) fun so_netsvc_marking_level():I32 => @pony_os_sockopt_option(I32(854)) fun so_net_service_type():I32 => @pony_os_sockopt_option(I32(855)) fun so_nke():I32 => @pony_os_sockopt_option(I32(856)) fun so_noaddrerr():I32 => @pony_os_sockopt_option(I32(857)) fun so_nofcs():I32 => @pony_os_sockopt_option(I32(858)) fun so_nosigpipe():I32 => @pony_os_sockopt_option(I32(859)) fun so_notifyconflict():I32 => @pony_os_sockopt_option(I32(860)) fun so_no_check():I32 => @pony_os_sockopt_option(I32(861)) fun so_no_ddp():I32 => @pony_os_sockopt_option(I32(862)) fun so_no_offload():I32 => @pony_os_sockopt_option(I32(863)) fun so_np_extensions():I32 => @pony_os_sockopt_option(I32(864)) fun so_nread():I32 => @pony_os_sockopt_option(I32(865)) fun so_numrcvpkt():I32 => @pony_os_sockopt_option(I32(866)) fun so_nwrite():I32 => @pony_os_sockopt_option(I32(867)) fun so_oobinline():I32 => @pony_os_sockopt_option(I32(868)) fun so_original_dst():I32 => @pony_os_sockopt_option(I32(869)) fun so_passcred():I32 => @pony_os_sockopt_option(I32(870)) fun so_passsec():I32 => @pony_os_sockopt_option(I32(871)) fun so_peek_off():I32 => @pony_os_sockopt_option(I32(872)) fun so_peercred():I32 => @pony_os_sockopt_option(I32(873)) fun so_peerlabel():I32 => @pony_os_sockopt_option(I32(874)) fun so_peername():I32 => @pony_os_sockopt_option(I32(875)) fun so_peersec():I32 => @pony_os_sockopt_option(I32(876)) fun so_port_scalability():I32 => @pony_os_sockopt_option(I32(877)) fun so_priority():I32 => @pony_os_sockopt_option(I32(878)) fun so_protocol():I32 => @pony_os_sockopt_option(I32(879)) fun so_protocol_info():I32 => @pony_os_sockopt_option(I32(880)) fun so_prototype():I32 => @pony_os_sockopt_option(I32(881)) fun so_proxyusr():I32 => @pony_os_sockopt_option(I32(882)) fun so_randomport():I32 => @pony_os_sockopt_option(I32(883)) fun so_rcvbuf():I32 => @pony_os_sockopt_option(I32(884)) fun so_rcvbufforce():I32 => @pony_os_sockopt_option(I32(885)) fun so_rcvlowat():I32 => @pony_os_sockopt_option(I32(886)) fun so_rcvtimeo():I32 => @pony_os_sockopt_option(I32(887)) fun so_rds_transport():I32 => @pony_os_sockopt_option(I32(888)) fun so_reuseaddr():I32 => @pony_os_sockopt_option(I32(889)) fun so_reuseport():I32 => @pony_os_sockopt_option(I32(890)) fun so_reuseshareuid():I32 => @pony_os_sockopt_option(I32(891)) fun so_rfcomm_fc_info():I32 => @pony_os_sockopt_option(I32(892)) fun so_rfcomm_mtu():I32 => @pony_os_sockopt_option(I32(893)) fun so_rxq_ovfl():I32 => @pony_os_sockopt_option(I32(894)) fun so_sco_conninfo():I32 => @pony_os_sockopt_option(I32(895)) fun so_sco_mtu():I32 => @pony_os_sockopt_option(I32(896)) fun so_security_authentication():I32 => @pony_os_sockopt_option(I32(897)) fun so_security_encryption_network():I32 => @pony_os_sockopt_option(I32(898)) fun so_security_encryption_transport():I32 => @pony_os_sockopt_option(I32(899)) fun so_select_err_queue():I32 => @pony_os_sockopt_option(I32(900)) fun so_setclp():I32 => @pony_os_sockopt_option(I32(901)) fun so_setfib():I32 => @pony_os_sockopt_option(I32(902)) fun so_sndbuf():I32 => @pony_os_sockopt_option(I32(903)) fun so_sndbufforce():I32 => @pony_os_sockopt_option(I32(904)) fun so_sndlowat():I32 => @pony_os_sockopt_option(I32(905)) fun so_sndtimeo():I32 => @pony_os_sockopt_option(I32(906)) fun so_timestamp():I32 => @pony_os_sockopt_option(I32(907)) fun so_timestamping():I32 => @pony_os_sockopt_option(I32(908)) fun so_timestampns():I32 => @pony_os_sockopt_option(I32(909)) fun so_timestamp_monotonic():I32 => @pony_os_sockopt_option(I32(910)) fun so_type():I32 => @pony_os_sockopt_option(I32(911)) fun so_upcallclosewait():I32 => @pony_os_sockopt_option(I32(912)) fun so_update_accept_context():I32 => @pony_os_sockopt_option(I32(913)) fun so_useloopback():I32 => @pony_os_sockopt_option(I32(914)) fun so_user_cookie():I32 => @pony_os_sockopt_option(I32(915)) fun so_vendor():I32 => @pony_os_sockopt_option(I32(916)) fun so_vm_sockets_buffer_max_size():I32 => @pony_os_sockopt_option(I32(917)) fun so_vm_sockets_buffer_min_size():I32 => @pony_os_sockopt_option(I32(918)) fun so_vm_sockets_buffer_size():I32 => @pony_os_sockopt_option(I32(919)) fun so_vm_sockets_connect_timeout():I32 => @pony_os_sockopt_option(I32(920)) fun so_vm_sockets_nonblock_txrx():I32 => @pony_os_sockopt_option(I32(921)) fun so_vm_sockets_peer_host_vm_id():I32 => @pony_os_sockopt_option(I32(922)) fun so_vm_sockets_trusted():I32 => @pony_os_sockopt_option(I32(923)) fun so_wantmore():I32 => @pony_os_sockopt_option(I32(924)) fun so_wantoobflag():I32 => @pony_os_sockopt_option(I32(925)) fun so_wifi_status():I32 => @pony_os_sockopt_option(I32(926)) fun tcp6_mss():I32 => @pony_os_sockopt_option(I32(927)) fun tcpci_flag_lossrecovery():I32 => @pony_os_sockopt_option(I32(928)) fun tcpci_flag_reordering_detected():I32 => @pony_os_sockopt_option(I32(929)) fun tcpci_opt_ecn():I32 => @pony_os_sockopt_option(I32(930)) fun tcpci_opt_sack():I32 => @pony_os_sockopt_option(I32(931)) fun tcpci_opt_timestamps():I32 => @pony_os_sockopt_option(I32(932)) fun tcpci_opt_wscale():I32 => @pony_os_sockopt_option(I32(933)) fun tcpf_ca_cwr():I32 => @pony_os_sockopt_option(I32(934)) fun tcpf_ca_disorder():I32 => @pony_os_sockopt_option(I32(935)) fun tcpf_ca_loss():I32 => @pony_os_sockopt_option(I32(936)) fun tcpf_ca_open():I32 => @pony_os_sockopt_option(I32(937)) fun tcpf_ca_recovery():I32 => @pony_os_sockopt_option(I32(938)) fun tcpi_opt_ecn():I32 => @pony_os_sockopt_option(I32(939)) fun tcpi_opt_ecn_seen():I32 => @pony_os_sockopt_option(I32(940)) fun tcpi_opt_sack():I32 => @pony_os_sockopt_option(I32(941)) fun tcpi_opt_syn_data():I32 => @pony_os_sockopt_option(I32(942)) fun tcpi_opt_timestamps():I32 => @pony_os_sockopt_option(I32(943)) fun tcpi_opt_toe():I32 => @pony_os_sockopt_option(I32(944)) fun tcpi_opt_wscale():I32 => @pony_os_sockopt_option(I32(945)) fun tcpolen_cc():I32 => @pony_os_sockopt_option(I32(946)) fun tcpolen_cc_appa():I32 => @pony_os_sockopt_option(I32(947)) fun tcpolen_eol():I32 => @pony_os_sockopt_option(I32(948)) fun tcpolen_fastopen_req():I32 => @pony_os_sockopt_option(I32(949)) fun tcpolen_fast_open_empty():I32 => @pony_os_sockopt_option(I32(950)) fun tcpolen_fast_open_max():I32 => @pony_os_sockopt_option(I32(951)) fun tcpolen_fast_open_min():I32 => @pony_os_sockopt_option(I32(952)) fun tcpolen_maxseg():I32 => @pony_os_sockopt_option(I32(953)) fun tcpolen_nop():I32 => @pony_os_sockopt_option(I32(954)) fun tcpolen_pad():I32 => @pony_os_sockopt_option(I32(955)) fun tcpolen_sack():I32 => @pony_os_sockopt_option(I32(956)) fun tcpolen_sackhdr():I32 => @pony_os_sockopt_option(I32(957)) fun tcpolen_sack_permitted():I32 => @pony_os_sockopt_option(I32(958)) fun tcpolen_signature():I32 => @pony_os_sockopt_option(I32(959)) fun tcpolen_timestamp():I32 => @pony_os_sockopt_option(I32(960)) fun tcpolen_tstamp_appa():I32 => @pony_os_sockopt_option(I32(961)) fun tcpolen_window():I32 => @pony_os_sockopt_option(I32(962)) fun tcpopt_cc():I32 => @pony_os_sockopt_option(I32(963)) fun tcpopt_ccecho():I32 => @pony_os_sockopt_option(I32(964)) fun tcpopt_ccnew():I32 => @pony_os_sockopt_option(I32(965)) fun tcpopt_eol():I32 => @pony_os_sockopt_option(I32(966)) fun tcpopt_fastopen():I32 => @pony_os_sockopt_option(I32(967)) fun tcpopt_fast_open():I32 => @pony_os_sockopt_option(I32(968)) fun tcpopt_maxseg():I32 => @pony_os_sockopt_option(I32(969)) fun tcpopt_multipath():I32 => @pony_os_sockopt_option(I32(970)) fun tcpopt_nop():I32 => @pony_os_sockopt_option(I32(971)) fun tcpopt_pad():I32 => @pony_os_sockopt_option(I32(972)) fun tcpopt_sack():I32 => @pony_os_sockopt_option(I32(973)) fun tcpopt_sack_hdr():I32 => @pony_os_sockopt_option(I32(974)) fun tcpopt_sack_permitted():I32 => @pony_os_sockopt_option(I32(975)) fun tcpopt_sack_permit_hdr():I32 => @pony_os_sockopt_option(I32(976)) fun tcpopt_signature():I32 => @pony_os_sockopt_option(I32(977)) fun tcpopt_timestamp():I32 => @pony_os_sockopt_option(I32(978)) fun tcpopt_tstamp_hdr():I32 => @pony_os_sockopt_option(I32(979)) fun tcpopt_window():I32 => @pony_os_sockopt_option(I32(980)) fun tcp_ca_name_max():I32 => @pony_os_sockopt_option(I32(981)) fun tcp_ccalgoopt():I32 => @pony_os_sockopt_option(I32(982)) fun tcp_cc_info():I32 => @pony_os_sockopt_option(I32(983)) fun tcp_congestion():I32 => @pony_os_sockopt_option(I32(984)) fun tcp_connectiontimeout():I32 => @pony_os_sockopt_option(I32(985)) fun tcp_connection_info():I32 => @pony_os_sockopt_option(I32(986)) fun tcp_cookie_in_always():I32 => @pony_os_sockopt_option(I32(987)) fun tcp_cookie_max():I32 => @pony_os_sockopt_option(I32(988)) fun tcp_cookie_min():I32 => @pony_os_sockopt_option(I32(989)) fun tcp_cookie_out_never():I32 => @pony_os_sockopt_option(I32(990)) fun tcp_cookie_pair_size():I32 => @pony_os_sockopt_option(I32(991)) fun tcp_cookie_transactions():I32 => @pony_os_sockopt_option(I32(992)) fun tcp_cork():I32 => @pony_os_sockopt_option(I32(993)) fun tcp_defer_accept():I32 => @pony_os_sockopt_option(I32(994)) fun tcp_enable_ecn():I32 => @pony_os_sockopt_option(I32(995)) fun tcp_fastopen():I32 => @pony_os_sockopt_option(I32(996)) fun tcp_function_blk():I32 => @pony_os_sockopt_option(I32(997)) fun tcp_function_name_len_max():I32 => @pony_os_sockopt_option(I32(998)) fun tcp_info():I32 => @pony_os_sockopt_option(I32(999)) fun tcp_keepalive():I32 => @pony_os_sockopt_option(I32(1000)) fun tcp_keepcnt():I32 => @pony_os_sockopt_option(I32(1001)) fun tcp_keepidle():I32 => @pony_os_sockopt_option(I32(1002)) fun tcp_keepinit():I32 => @pony_os_sockopt_option(I32(1003)) fun tcp_keepintvl():I32 => @pony_os_sockopt_option(I32(1004)) fun tcp_linger2():I32 => @pony_os_sockopt_option(I32(1005)) fun tcp_maxburst():I32 => @pony_os_sockopt_option(I32(1006)) fun tcp_maxhlen():I32 => @pony_os_sockopt_option(I32(1007)) fun tcp_maxolen():I32 => @pony_os_sockopt_option(I32(1008)) fun tcp_maxseg():I32 => @pony_os_sockopt_option(I32(1009)) fun tcp_maxwin():I32 => @pony_os_sockopt_option(I32(1010)) fun tcp_max_sack():I32 => @pony_os_sockopt_option(I32(1011)) fun tcp_max_winshift():I32 => @pony_os_sockopt_option(I32(1012)) fun tcp_md5sig():I32 => @pony_os_sockopt_option(I32(1013)) fun tcp_md5sig_maxkeylen():I32 => @pony_os_sockopt_option(I32(1014)) fun tcp_minmss():I32 => @pony_os_sockopt_option(I32(1015)) fun tcp_mss():I32 => @pony_os_sockopt_option(I32(1016)) fun tcp_mss_default():I32 => @pony_os_sockopt_option(I32(1017)) fun tcp_mss_desired():I32 => @pony_os_sockopt_option(I32(1018)) fun tcp_nodelay():I32 => @pony_os_sockopt_option(I32(1019)) fun tcp_noopt():I32 => @pony_os_sockopt_option(I32(1020)) fun tcp_nopush():I32 => @pony_os_sockopt_option(I32(1021)) fun tcp_notsent_lowat():I32 => @pony_os_sockopt_option(I32(1022)) fun tcp_pcap_in():I32 => @pony_os_sockopt_option(I32(1023)) fun tcp_pcap_out():I32 => @pony_os_sockopt_option(I32(1024)) fun tcp_queue_seq():I32 => @pony_os_sockopt_option(I32(1025)) fun tcp_quickack():I32 => @pony_os_sockopt_option(I32(1026)) fun tcp_repair():I32 => @pony_os_sockopt_option(I32(1027)) fun tcp_repair_options():I32 => @pony_os_sockopt_option(I32(1028)) fun tcp_repair_queue():I32 => @pony_os_sockopt_option(I32(1029)) fun tcp_rxt_conndroptime():I32 => @pony_os_sockopt_option(I32(1030)) fun tcp_rxt_findrop():I32 => @pony_os_sockopt_option(I32(1031)) fun tcp_saved_syn():I32 => @pony_os_sockopt_option(I32(1032)) fun tcp_save_syn():I32 => @pony_os_sockopt_option(I32(1033)) fun tcp_sendmoreacks():I32 => @pony_os_sockopt_option(I32(1034)) fun tcp_syncnt():I32 => @pony_os_sockopt_option(I32(1035)) fun tcp_s_data_in():I32 => @pony_os_sockopt_option(I32(1036)) fun tcp_s_data_out():I32 => @pony_os_sockopt_option(I32(1037)) fun tcp_thin_dupack():I32 => @pony_os_sockopt_option(I32(1038)) fun tcp_thin_linear_timeouts():I32 => @pony_os_sockopt_option(I32(1039)) fun tcp_timestamp():I32 => @pony_os_sockopt_option(I32(1040)) fun tcp_user_timeout():I32 => @pony_os_sockopt_option(I32(1041)) fun tcp_vendor():I32 => @pony_os_sockopt_option(I32(1042)) fun tcp_window_clamp():I32 => @pony_os_sockopt_option(I32(1043)) fun tipc_addr_id():I32 => @pony_os_sockopt_option(I32(1044)) fun tipc_addr_mcast():I32 => @pony_os_sockopt_option(I32(1045)) fun tipc_addr_name():I32 => @pony_os_sockopt_option(I32(1046)) fun tipc_addr_nameseq():I32 => @pony_os_sockopt_option(I32(1047)) fun tipc_cfg_srv():I32 => @pony_os_sockopt_option(I32(1048)) fun tipc_cluster_scope():I32 => @pony_os_sockopt_option(I32(1049)) fun tipc_conn_shutdown():I32 => @pony_os_sockopt_option(I32(1050)) fun tipc_conn_timeout():I32 => @pony_os_sockopt_option(I32(1051)) fun tipc_critical_importance():I32 => @pony_os_sockopt_option(I32(1052)) fun tipc_destname():I32 => @pony_os_sockopt_option(I32(1053)) fun tipc_dest_droppable():I32 => @pony_os_sockopt_option(I32(1054)) fun tipc_errinfo():I32 => @pony_os_sockopt_option(I32(1055)) fun tipc_err_no_name():I32 => @pony_os_sockopt_option(I32(1056)) fun tipc_err_no_node():I32 => @pony_os_sockopt_option(I32(1057)) fun tipc_err_no_port():I32 => @pony_os_sockopt_option(I32(1058)) fun tipc_err_overload():I32 => @pony_os_sockopt_option(I32(1059)) fun tipc_high_importance():I32 => @pony_os_sockopt_option(I32(1060)) fun tipc_importance():I32 => @pony_os_sockopt_option(I32(1061)) fun tipc_link_state():I32 => @pony_os_sockopt_option(I32(1062)) fun tipc_low_importance():I32 => @pony_os_sockopt_option(I32(1063)) fun tipc_max_bearer_name():I32 => @pony_os_sockopt_option(I32(1064)) fun tipc_max_if_name():I32 => @pony_os_sockopt_option(I32(1065)) fun tipc_max_link_name():I32 => @pony_os_sockopt_option(I32(1066)) fun tipc_max_media_name():I32 => @pony_os_sockopt_option(I32(1067)) fun tipc_max_user_msg_size():I32 => @pony_os_sockopt_option(I32(1068)) fun tipc_medium_importance():I32 => @pony_os_sockopt_option(I32(1069)) fun tipc_node_recvq_depth():I32 => @pony_os_sockopt_option(I32(1070)) fun tipc_node_scope():I32 => @pony_os_sockopt_option(I32(1071)) fun tipc_ok():I32 => @pony_os_sockopt_option(I32(1072)) fun tipc_published():I32 => @pony_os_sockopt_option(I32(1073)) fun tipc_reserved_types():I32 => @pony_os_sockopt_option(I32(1074)) fun tipc_retdata():I32 => @pony_os_sockopt_option(I32(1075)) fun tipc_sock_recvq_depth():I32 => @pony_os_sockopt_option(I32(1076)) fun tipc_src_droppable():I32 => @pony_os_sockopt_option(I32(1077)) fun tipc_subscr_timeout():I32 => @pony_os_sockopt_option(I32(1078)) fun tipc_sub_cancel():I32 => @pony_os_sockopt_option(I32(1079)) fun tipc_sub_ports():I32 => @pony_os_sockopt_option(I32(1080)) fun tipc_sub_service():I32 => @pony_os_sockopt_option(I32(1081)) fun tipc_top_srv():I32 => @pony_os_sockopt_option(I32(1082)) fun tipc_wait_forever():I32 => @pony_os_sockopt_option(I32(1083)) fun tipc_withdrawn():I32 => @pony_os_sockopt_option(I32(1084)) fun tipc_zone_scope():I32 => @pony_os_sockopt_option(I32(1085)) fun ttcp_client_snd_wnd():I32 => @pony_os_sockopt_option(I32(1086)) fun udp_cork():I32 => @pony_os_sockopt_option(I32(1087)) fun udp_encap():I32 => @pony_os_sockopt_option(I32(1088)) fun udp_encap_espinudp():I32 => @pony_os_sockopt_option(I32(1089)) fun udp_encap_espinudp_maxfraglen():I32 => @pony_os_sockopt_option(I32(1090)) fun udp_encap_espinudp_non_ike():I32 => @pony_os_sockopt_option(I32(1091)) fun udp_encap_espinudp_port():I32 => @pony_os_sockopt_option(I32(1092)) fun udp_encap_l2tpinudp():I32 => @pony_os_sockopt_option(I32(1093)) fun udp_nocksum():I32 => @pony_os_sockopt_option(I32(1094)) fun udp_no_check6_rx():I32 => @pony_os_sockopt_option(I32(1095)) fun udp_no_check6_tx():I32 => @pony_os_sockopt_option(I32(1096)) fun udp_vendor():I32 => @pony_os_sockopt_option(I32(1097))","title":"ossockopt.pony"},{"location":"src/net/proxy/","text":"interface Proxy fun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ class val NoProxy is Proxy \"\"\" Default implementation of a proxy that does not alter the supplied `TCPConnectionNotify`. ```pony actor MyClient new create(host: String, service: String, proxy: Proxy = NoProxy) => let conn: TCPConnection = TCPConnection.create( env.root as AmbientAuth, proxy.apply(MyConnectionNotify.create()), \"localhost\", \"80\") ``` \"\"\" fun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ => wrap","title":"proxy.pony"},{"location":"src/net/tcp_connection/","text":"use \"collections\" use @pony_asio_event_create[AsioEventID](owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_fd[U32](event: AsioEventID) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_resubscribe_read[None](event: AsioEventID) use @pony_asio_event_resubscribe_write[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) use @pony_asio_event_get_disposable[Bool](event: AsioEventID) use @pony_asio_event_set_writeable[None](event: AsioEventID, writeable: Bool) use @pony_asio_event_set_readable[None](event: AsioEventID, readable: Bool) type TCPConnectionAuth is (AmbientAuth | NetAuth | TCPAuth | TCPConnectAuth) actor TCPConnection \"\"\" A TCP connection. When connecting, the Happy Eyeballs algorithm is used. The following code creates a client that connects to port 8989 of the local host, writes \"hello world\", and listens for a response, which it then prints. ```pony use \"net\" class MyTCPConnectionNotify is TCPConnectionNotify let _out: OutStream new create(out: OutStream) => _out = out fun ref connected(conn: TCPConnection ref) => conn.write(\"hello world\") fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => _out.print(\"GOT:\" + String.from_array(consume data)) conn.close() true fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try TCPConnection(env.root as AmbientAuth, recover MyTCPConnectionNotify(env.out) end, \"\", \"8989\") end ``` Note: when writing to the connection data will be silently discarded if the connection has not yet been established. ## Backpressure support ### Write The TCP protocol has built-in backpressure support. This is generally experienced as the outgoing write buffer becoming full and being unable to write all requested data to the socket. In `TCPConnection`, this is hidden from the programmer. When this occurs, `TCPConnection` will buffer the extra data until such time as it is able to be sent. Left unchecked, this could result in uncontrolled queuing. To address this, `TCPConnectionNotify` implements two methods `throttled` and `unthrottled` that are called when backpressure is applied and released. Upon receiving a `throttled` notification, your application has two choices on how to handle it. One is to inform the Pony runtime that it can no longer make progress and that runtime backpressure should be applied to any actors sending this one messages. For example, you might construct your application like: ```pony // Here we have a TCPConnectionNotify that upon construction // is given a BackpressureAuth token. This allows the notifier // to inform the Pony runtime when to apply and release backpressure // as the connection experiences it. // Note the calls to // // Backpressure.apply(_auth) // Backpressure.release(_auth) // // that apply and release backpressure as needed use \"backpressure\" use \"collections\" use \"net\" class SlowDown is TCPConnectionNotify let _auth: BackpressureAuth let _out: StdStream new iso create(auth: BackpressureAuth, out: StdStream) => _auth = auth _out = out fun ref throttled(connection: TCPConnection ref) => _out.print(\"Experiencing backpressure!\") Backpressure.apply(_auth) fun ref unthrottled(connection: TCPConnection ref) => _out.print(\"Releasing backpressure!\") Backpressure.release(_auth) fun ref closed(connection: TCPConnection ref) => // if backpressure has been applied, make sure we release // when shutting down _out.print(\"Releasing backpressure if applied!\") Backpressure.release(_auth) fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try let auth = env.root as AmbientAuth let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end, \"\", \"7669\") end ``` Or if you want, you could handle backpressure by shedding load, that is, dropping the extra data rather than carrying out the send. This might look like: ```pony use \"net\" class ThrowItAway is TCPConnectionNotify var _throttled: Bool = false fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq => if not _throttled then data else \"\" end fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter => if not _throttled then data else recover Array[String] end end fun ref throttled(connection: TCPConnection ref) => _throttled = true fun ref unthrottled(connection: TCPConnection ref) => _throttled = false fun ref connect_failed(conn: TCPConnection ref) => None actor Main new create(env: Env) => try TCPConnection(env.root as AmbientAuth, recover ThrowItAway end, \"\", \"7669\") end ``` In general, unless you have a very specific use case, we strongly advise that you don't implement a load shedding scheme where you drop data. ### Read If your application is unable to keep up with data being sent to it over a `TCPConnection` you can use the builtin read backpressure support to pause reading the socket which will in turn start to exert backpressure on the corresponding writer on the other end of that socket. The `mute` behavior allow any other actors in your application to request the cessation of additional reads until such time as `unmute` is called. Please note that this cessation is not guaranteed to happen immediately as it is the result of an asynchronous behavior call and as such will have to wait for existing messages in the `TCPConnection`'s mailbox to be handled. On non-windows platforms, your `TCPConnection` will not notice if the other end of the connection closes until you unmute it. Unix type systems like FreeBSD, Linux and OSX learn about a closed connection upon read. On these platforms, you **must** call `unmute` on a muted connection to have it close. Without calling `unmute` the `TCPConnection` actor will never exit. ## Proxy support Using the `proxy_via` callback in a `TCPConnectionNotify` it is possible to implement proxies. The function takes the intended destination host and service as parameters and returns a 2-tuple of the proxy host and service. The proxy `TCPConnectionNotify` should decorate another implementation of `TCPConnectionNotify` passing relevent data through. ### Example proxy implementation ```pony actor Main new create(env: Env) => MyClient.create( \"example.com\", // we actually want to connect to this host \"80\", ExampleProxy.create(\"proxy.example.com\", \"80\")) // we connect via this proxy actor MyClient new create(host: String, service: String, proxy: Proxy = NoProxy) => let conn: TCPConnection = TCPConnection.create( env.root as AmbientAuth, proxy.apply(MyConnectionNotify.create()), host, service) class ExampleProxy is Proxy let _proxy_host: String let _proxy_service: String new create(proxy_host: String, proxy_service: String) => _proxy_host = proxy_host _proxy_service = proxy_service fun apply(wrap: TCPConnectionNotify iso): TCPConnectionNotify iso^ => ExampleProxyNotify.create(consume wrap, _proxy_service, _proxy_service) class iso ExampleProxyNotify is TCPConnectionNotify // Fictional proxy implementation that has no error // conditions, and always forwards the connection. let _proxy_host: String let _proxy_service: String var _destination_host: (None | String) = None var _destination_service: (None | String) = None let _wrapped: TCPConnectionNotify iso new iso create(wrap: TCPConnectionNotify iso, proxy_host: String, proxy_service: String) => _wrapped = wrap _proxy_host = proxy_host _proxy_service = proxy_service fun ref proxy_via(host: String, service: String): (String, String) => // Stash the original host & service; return the host & service // for the proxy; indicating that the initial TCP connection should // be made to the proxy _destination_host = host _destination_service = service (_proxy_host, _proxy_service) fun ref connected(conn: TCPConnection ref) => // conn is the connection to the *proxy* server. We need to ask the // proxy server to forward this connection to our intended final // destination. conn.write((_destination_host + \"\\n\").array()) conn.write((_destination_service + \"\\n\").array()) wrapped.connected(conn) fun ref received(conn, data, times) => _wrapped.received(conn, data, times) fun ref connect_failed(conn: TCPConnection ref) => None ``` \"\"\" var _listen: (TCPListener | None) = None var _notify: TCPConnectionNotify var _connect_count: U32 var _fd: U32 = -1 var _event: AsioEventID = AsioEvent.none() var _connected: Bool = false var _readable: Bool = false var _reading: Bool = false var _writeable: Bool = false var _throttled: Bool = false var _closed: Bool = false var _shutdown: Bool = false var _shutdown_peer: Bool = false var _in_sent: Bool = false embed _pending_writev_posix: Array[(Pointer[U8] tag, USize)] = _pending_writev_posix.create() embed _pending_writev_windows: Array[(USize, Pointer[U8] tag)] = _pending_writev_windows.create() var _pending_sent: USize = 0 var _pending_writev_total: USize = 0 var _read_buf: Array[U8] iso var _read_buf_offset: USize = 0 var _max_received_called: USize = 50 let _read_buffer_size: USize let _yield_after_reading: USize let _yield_after_writing: USize var _expect: USize = 0 var _muted: Bool = false new create( auth: TCPConnectionAuth, notify: TCPConnectionNotify iso, host: String, service: String, from: String = \"\", read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" Connect via IPv4 or IPv6. If `from` is a non-empty string, the connection will be made from the specified interface. \"\"\" _read_buf = recover Array[U8] .> undefined(read_buffer_size) end _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _notify = consume notify let asio_flags = ifdef not windows then AsioEvent.read_write_oneshot() else AsioEvent.read_write() end (let host', let service') = _notify.proxy_via(host, service) _connect_count = @pony_os_connect_tcp[U32](this, host'.cstring(), service'.cstring(), from.cstring(), asio_flags) _notify_connecting() new ip4( auth: TCPConnectionAuth, notify: TCPConnectionNotify iso, host: String, service: String, from: String = \"\", read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" Connect via IPv4. \"\"\" _read_buf = recover Array[U8] .> undefined(read_buffer_size) end _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _notify = consume notify let asio_flags = ifdef not windows then AsioEvent.read_write_oneshot() else AsioEvent.read_write() end (let host', let service') = _notify.proxy_via(host, service) _connect_count = @pony_os_connect_tcp4[U32](this, host'.cstring(), service'.cstring(), from.cstring(), asio_flags) _notify_connecting() new ip6( auth: TCPConnectionAuth, notify: TCPConnectionNotify iso, host: String, service: String, from: String = \"\", read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" Connect via IPv6. \"\"\" _read_buf = recover Array[U8] .> undefined(read_buffer_size) end _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _notify = consume notify let asio_flags = ifdef not windows then AsioEvent.read_write_oneshot() else AsioEvent.read_write() end (let host', let service') = _notify.proxy_via(host, service) _connect_count = @pony_os_connect_tcp6[U32](this, host'.cstring(), service'.cstring(), from.cstring(), asio_flags) _notify_connecting() new _accept( listen: TCPListener, notify: TCPConnectionNotify iso, fd: U32, read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" A new connection accepted on a server. \"\"\" _listen = listen _notify = consume notify _connect_count = 0 _fd = fd ifdef not windows then _event = @pony_asio_event_create(this, fd, AsioEvent.read_write_oneshot(), 0, true) else _event = @pony_asio_event_create(this, fd, AsioEvent.read_write(), 0, true) end _connected = true ifdef not windows then @pony_asio_event_set_writeable(_event, true) end _writeable = true _read_buf = recover Array[U8] .> undefined(read_buffer_size) end _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _notify.accepted(this) _readable = true _queue_read() _pending_reads() be write(data: ByteSeq) => \"\"\" Write a single sequence of bytes. Data will be silently discarded if the connection has not yet been established though. \"\"\" if _connected and not _closed then _in_sent = true write_final(_notify.sent(this, data)) _in_sent = false end be writev(data: ByteSeqIter) => \"\"\" Write a sequence of sequences of bytes. Data will be silently discarded if the connection has not yet been established though. \"\"\" if _connected and not _closed then _in_sent = true ifdef windows then try var num_to_send: I32 = 0 for bytes in _notify.sentv(this, data).values() do // don't sent 0 byte payloads; windows doesn't like it (and it's wasteful) if bytes.size() == 0 then continue end // Add an IOCP write. _pending_writev_windows .> push((bytes.size(), bytes.cpointer())) _pending_writev_total = _pending_writev_total + bytes.size() num_to_send = num_to_send + 1 end // Write as much data as possible. var len = @pony_os_writev[USize](_event, _pending_writev_windows.cpointer(_pending_sent), num_to_send) ? _pending_sent = _pending_sent + num_to_send.usize() if _pending_sent > 32 then // If more than 32 asynchronous writes are scheduled, apply // backpressure. The choice of 32 is rather arbitrary an // probably needs tuning _apply_backpressure() end end else for bytes in _notify.sentv(this, data).values() do // don't sent 0 byte payloads; it's wasteful if bytes.size() == 0 then continue end _pending_writev_posix .> push((bytes.cpointer(), bytes.size())) _pending_writev_total = _pending_writev_total + bytes.size() end _pending_writes() end _in_sent = false end be mute() => \"\"\" Temporarily suspend reading off this TCPConnection until such time as `unmute` is called. \"\"\" _muted = true be unmute() => \"\"\" Start reading off this TCPConnection again after having been muted. \"\"\" _muted = false if not _reading then _pending_reads() end be set_notify(notify: TCPConnectionNotify iso) => \"\"\" Change the notifier. \"\"\" _notify = consume notify be dispose() => \"\"\" Close the connection gracefully once all writes are sent. \"\"\" close() fun local_address(): NetAddress => \"\"\" Return the local IP address. If this TCPConnection is closed then the address returned is invalid. \"\"\" let ip = recover NetAddress end @pony_os_sockname[Bool](_fd, ip) ip fun remote_address(): NetAddress => \"\"\" Return the remote IP address. If this TCPConnection is closed then the address returned is invalid. \"\"\" let ip = recover NetAddress end @pony_os_peername[Bool](_fd, ip) ip fun ref expect(qty: USize = 0) ? => \"\"\" A `received` call on the notifier must contain exactly `qty` bytes. If `qty` is zero, the call can contain any amount of data. This has no effect if called in the `sent` notifier callback. Errors if `qty` exceeds the max buffer size as indicated by the `read_buffer_size` supplied when the connection was created. \"\"\" if qty <= _read_buffer_size then if not _in_sent then _expect = _notify.expect(this, qty) _read_buf_size() end else error end fun ref set_nodelay(state: Bool) => \"\"\" Turn Nagle on/off. Defaults to on. This can only be set on a connected socket. \"\"\" if _connected then set_tcp_nodelay(state) end fun ref set_keepalive(secs: U32) => \"\"\" Sets the TCP keepalive timeout to approximately `secs` seconds. Exact timing is OS dependent. If `secs` is zero, TCP keepalive is disabled. TCP keepalive is disabled by default. This can only be set on a connected socket. \"\"\" if _connected then @pony_os_keepalive[None](_fd, secs) end be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" Handle socket events. \"\"\" if event isnt _event then if AsioEvent.writeable(flags) then // A connection has completed. var fd = @pony_asio_event_fd(event) _connect_count = _connect_count - 1 if not _connected and not _closed then // We don't have a connection yet. if _is_sock_connected(fd) then // The connection was successful, make it ours. _fd = fd _event = event _connected = true _writeable = true _readable = true _notify.connected(this) _queue_read() _pending_reads() // Don't call _complete_writes, as Windows will see this as a // closed connection. ifdef not windows then if _pending_writes() then // Sent all data; release backpressure. _release_backpressure() end end else // The connection failed, unsubscribe the event and close. @pony_asio_event_unsubscribe(event) @pony_os_socket_close[None](fd) _notify_connecting() end else // There is a possibility that a non-Windows system has // already unsubscribed this event already. (Windows might // be vulnerable to this race, too, I'm not sure.) It's a // bug to do a second time. Look at the disposable status // of the event (not the flags that this behavior's args!) // to see if it's ok to unsubscribe. if not @pony_asio_event_get_disposable(event) then @pony_asio_event_unsubscribe(event) end @pony_os_socket_close[None](fd) _try_shutdown() end else // It's not our event. if AsioEvent.disposable(flags) then // It's disposable, so dispose of it. @pony_asio_event_destroy(event) end end else // At this point, it's our event. if AsioEvent.writeable(flags) then _writeable = true _complete_writes(arg) ifdef not windows then if _pending_writes() then // Sent all data. Release backpressure. _release_backpressure() end end end if AsioEvent.readable(flags) then _readable = true _complete_reads(arg) _pending_reads() end if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) _event = AsioEvent.none() end _try_shutdown() end be _read_again() => \"\"\" Resume reading. \"\"\" _pending_reads() fun ref write_final(data: ByteSeq) => \"\"\" Write as much as possible to the socket. Set `_writeable` to `false` if not everything was written. On an error, close the connection. This is for data that has already been transformed by the notifier. Data will be silently discarded if the connection has not yet been established though. \"\"\" // don't sent 0 byte payloads; windows doesn't like it (and it's wasteful) if data.size() == 0 then return end if _connected and not _closed then ifdef windows then try // Add an IOCP write. _pending_writev_windows .> push((data.size(), data.cpointer())) _pending_writev_total = _pending_writev_total + data.size() @pony_os_writev[USize](_event, _pending_writev_windows.cpointer(_pending_sent), I32(1)) ? _pending_sent = _pending_sent + 1 if _pending_sent > 32 then // If more than 32 asynchronous writes are scheduled, apply // backpressure. The choice of 32 is rather arbitrary an // probably needs tuning _apply_backpressure() end end else _pending_writev_posix .> push((data.cpointer(), data.size())) _pending_writev_total = _pending_writev_total + data.size() _pending_writes() end end fun ref _complete_writes(len: U32) => \"\"\" The OS has informed us that `len` bytes of pending writes have completed. This occurs only with IOCP on Windows. \"\"\" ifdef windows then if len == 0 then // IOCP reported a failed write on this chunk. Non-graceful shutdown. hard_close() return end try _manage_pending_buffer(len.usize(), _pending_writev_total, _pending_writev_windows.size())? end if _pending_sent < 16 then // If fewer than 16 asynchronous writes are scheduled, remove // backpressure. The choice of 16 is rather arbitrary and probably // needs to be tuned. _release_backpressure() end end be _write_again() => \"\"\" Resume writing. \"\"\" _pending_writes() fun ref _pending_writes(): Bool => \"\"\" Send pending data. If any data can't be sent, keep it and mark as not writeable. On an error, dispose of the connection. Returns whether it sent all pending data or not. \"\"\" ifdef not windows then // TODO: Make writev_batch_size user configurable let writev_batch_size: USize = @pony_os_writev_max[I32]().usize() var num_to_send: USize = 0 var bytes_to_send: USize = 0 var bytes_sent: USize = 0 while _writeable and (_pending_writev_total > 0) do if bytes_sent >= _yield_after_writing then // We've written _yield_after_writing bytes. // Yield and write again later. _write_again() return false end try // Determine number of bytes and buffers to send. if _pending_writev_posix.size() < writev_batch_size then num_to_send = _pending_writev_posix.size() bytes_to_send = _pending_writev_total else // Have more buffers than a single writev can handle. // Iterate over buffers being sent to add up total. num_to_send = writev_batch_size bytes_to_send = 0 for d in Range[USize](0, num_to_send, 1) do bytes_to_send = bytes_to_send + _pending_writev_posix(d)?._2 end end // Write as much data as possible. var len = @pony_os_writev[USize](_event, _pending_writev_posix.cpointer(), num_to_send.i32()) ? if _manage_pending_buffer(len, bytes_to_send, num_to_send)? then return true end bytes_sent = bytes_sent + len else // Non-graceful shutdown on error. hard_close() end end end false fun ref _manage_pending_buffer( bytes_sent: USize, bytes_to_send: USize, num_to_send: USize) : Bool ? => \"\"\" Manage pending buffer for data sent. Returns a boolean of whether the pending buffer is empty or not. \"\"\" var len = bytes_sent if len < bytes_to_send then var num_sent: USize = 0 while len > 0 do (let iov_p, let iov_s) = ifdef windows then (let tmp_s, let tmp_p) = _pending_writev_windows(num_sent)? (tmp_p, tmp_s) else _pending_writev_posix(num_sent)? end if iov_s <= len then num_sent = num_sent + 1 len = len - iov_s _pending_writev_total = _pending_writev_total - iov_s else ifdef windows then _pending_writev_windows(num_sent)? = (iov_s-len, iov_p.offset(len)) else _pending_writev_posix(num_sent)? = (iov_p.offset(len), iov_s-len) end _pending_writev_total = _pending_writev_total - len len = 0 end end ifdef windows then // do a trim in place instead of many shifts for efficiency _pending_writev_windows.trim_in_place(num_sent) _pending_sent = _pending_sent - num_sent else // do a trim in place instead of many shifts for efficiency _pending_writev_posix.trim_in_place(num_sent) end ifdef not windows then _apply_backpressure() end else // sent all data we requested in this batch _pending_writev_total = _pending_writev_total - bytes_to_send if _pending_writev_total == 0 then ifdef windows then // do a trim in place instead of a clear to free up memory _pending_writev_windows.trim_in_place(_pending_writev_windows.size()) _pending_sent = 0 else // do a trim in place instead of a clear to free up memory _pending_writev_posix.trim_in_place(_pending_writev_posix.size()) end return true else ifdef windows then // do a trim in place instead of many shifts for efficiency _pending_writev_windows.trim_in_place(num_to_send) _pending_sent = _pending_sent - num_to_send else // do a trim in place instead of many shifts for efficiency _pending_writev_posix.trim_in_place(num_to_send) end end end false fun ref _complete_reads(len: U32) => \"\"\" The OS has informed us that `len` bytes of pending reads have completed. This occurs only with IOCP on Windows. \"\"\" ifdef windows then if len == 0 then // The socket has been closed from the other side, or a hard close has // cancelled the queued read. _readable = false _shutdown_peer = true close() return end _read_buf_offset = _read_buf_offset + len.usize() while (not _muted) and (_read_buf_offset >= _expect) and (_read_buf_offset > 0) do // get data to be distributed and update `_read_buf_offset` let chop_at = if _expect == 0 then _read_buf_offset else _expect end (let data, _read_buf) = (consume _read_buf).chop(chop_at) _read_buf_offset = _read_buf_offset - chop_at _notify.received(this, consume data, 1) _read_buf_size() end _queue_read() end fun ref _read_buf_size() => \"\"\" Resize the read buffer if it is empty or smaller than the next payload size \"\"\" if _read_buf.size() <= _expect then _read_buf.undefined(_read_buffer_size) end fun ref _queue_read() => \"\"\" Begin an IOCP read on Windows. \"\"\" ifdef windows then try @pony_os_recv[USize]( _event, _read_buf.cpointer(_read_buf_offset), _read_buf.size() - _read_buf_offset) ? else hard_close() end end fun ref _pending_reads() => \"\"\" Unless this connection is currently muted, read while data is available, guessing the next packet length as we go. If we read 5 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. Currently we can handle a varying value of _expect (greater than 0) and constant _expect of 0 but we cannot handle switching between these two cases. \"\"\" ifdef not windows then try var sum: USize = 0 var received_called: USize = 0 _reading = true while _readable and not _shutdown_peer do // exit if muted if _muted then _reading = false return end // distribute the data we've already read that is in the `read_buf` // and able to be distributed while (_read_buf_offset >= _expect) and (_read_buf_offset > 0) do // get data to be distributed and update `_read_buf_offset` let chop_at = if _expect == 0 then _read_buf_offset else _expect end (let data, _read_buf) = (consume _read_buf).chop(chop_at) _read_buf_offset = _read_buf_offset - chop_at // increment max reads received_called = received_called + 1 // check if we should yield to let another actor run if (not _notify.received(this, consume data, received_called)) or (received_called >= _max_received_called) then _read_again() _reading = false return end end if sum >= _yield_after_reading then // If we've read _yield_after_reading bytes // yield and read again later. _read_again() _reading = false return end _read_buf_size() // Read as much data as possible. let len = @pony_os_recv[USize]( _event, _read_buf.cpointer(_read_buf_offset), _read_buf.size() - _read_buf_offset) ? if len == 0 then // Would block, try again later. // this is safe because asio thread isn't currently subscribed // for a read event so will not be writing to the readable flag @pony_asio_event_set_readable[None](_event, false) _readable = false _reading = false @pony_asio_event_resubscribe_read(_event) return end _read_buf_offset = _read_buf_offset + len sum = sum + len end else // The socket has been closed from the other side. _shutdown_peer = true hard_close() end end _reading = false fun ref _notify_connecting() => \"\"\" Inform the notifier that we're connecting. \"\"\" if _connect_count > 0 then _notify.connecting(this, _connect_count) else _notify.connect_failed(this) hard_close() end fun ref close() => \"\"\" Attempt to perform a graceful shutdown. Don't accept new writes. If the connection isn't muted then we won't finish closing until we get a zero length read. If the connection is muted, perform a hard close and shut down immediately. \"\"\" ifdef windows then _close() else if _muted then hard_close() else _close() end end fun ref _close() => _closed = true _try_shutdown() fun ref _try_shutdown() => \"\"\" If we have closed and we have no remaining writes or pending connections, then shutdown. \"\"\" if not _closed then return end if not _shutdown and (_connect_count == 0) and (_pending_writev_total == 0) then _shutdown = true if _connected then @pony_os_socket_shutdown[None](_fd) else _shutdown_peer = true end end if _connected and _shutdown and _shutdown_peer then hard_close() end ifdef windows then // On windows, wait until all outstanding IOCP operations have completed // or been cancelled. if not _connected and not _readable and (_pending_sent == 0) then @pony_asio_event_unsubscribe(_event) end end fun ref hard_close() => \"\"\" When an error happens, do a non-graceful close. \"\"\" if not _connected then return end _connected = false _closed = true _shutdown = true _shutdown_peer = true _pending_writev_total = 0 ifdef windows then _pending_writev_windows.clear() _pending_sent = 0 else _pending_writev_posix.clear() end ifdef not windows then // Unsubscribe immediately and drop all pending writes. @pony_asio_event_unsubscribe(_event) _readable = false _writeable = false @pony_asio_event_set_readable(_event, false) @pony_asio_event_set_writeable(_event, false) end // On windows, this will also cancel all outstanding IOCP operations. @pony_os_socket_close[None](_fd) _fd = -1 _notify.closed(this) try (_listen as TCPListener)._conn_closed() end // Check this when a connection gets its first writeable event. fun _is_sock_connected(fd: U32): Bool => (let errno: U32, let value: U32) = _OSSocket.get_so_error(fd) (errno == 0) and (value == 0) fun ref _apply_backpressure() => if not _throttled then _throttled = true _notify.throttled(this) end ifdef not windows then _writeable = false // this is safe because asio thread isn't currently subscribed // for a write event so will not be writing to the readable flag @pony_asio_event_set_writeable(_event, false) @pony_asio_event_resubscribe_write(_event) end fun ref _release_backpressure() => if _throttled then _throttled = false _notify.unthrottled(this) end /**************************************/ fun ref getsockopt(level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) => \"\"\" General wrapper for TCP sockets to the `getsockopt(2)` system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. Usage example: ```pony // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) => match conn.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) => try let br = Reader.create().>append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) => // System call failed end ``` \"\"\" _OSSocket.getsockopt(_fd, level, option_name, option_max_size) fun ref getsockopt_u32(level: I32, option_name: I32): (U32, U32) => \"\"\" Wrapper for TCP sockets to the `getsockopt(2)` system call where the kernel's returned option value is a C `uint32_t` type / Pony type `U32`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. The `*option_value` returned by the kernel converted to a Pony `U32`. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. \"\"\" _OSSocket.getsockopt_u32(_fd, level, option_name) fun ref setsockopt(level: I32, option_name: I32, option: Array[U8]): U32 => \"\"\" General wrapper for TCP sockets to the `setsockopt(2)` system call. The caller is responsible for the correct size and byte contents of the `option` array for the requested `level` and `option_name`, including using the appropriate machine endian byte order. This function returns `0` on success, else the value of `errno` on failure. Usage example: ```pony // connected() is a callback function for class TCPConnectionNotify fun ref connected(conn: TCPConnection ref) => let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match conn.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 => // System call was successful | let errno: U32 => // System call failed end ``` \"\"\" _OSSocket.setsockopt(_fd, level, option_name, option) fun ref setsockopt_u32(level: I32, option_name: I32, option: U32): U32 => \"\"\" General wrapper for TCP sockets to the `setsockopt(2)` system call where the kernel expects an option value of a C `uint32_t` type / Pony type `U32`. This function returns `0` on success, else the value of `errno` on failure. \"\"\" _OSSocket.setsockopt_u32(_fd, level, option_name, option) fun ref get_so_error(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)` \"\"\" _OSSocket.get_so_error(_fd) fun ref get_so_rcvbuf(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` \"\"\" _OSSocket.get_so_rcvbuf(_fd) fun ref get_so_sndbuf(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` \"\"\" _OSSocket.get_so_sndbuf(_fd) fun ref get_tcp_nodelay(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)` \"\"\" _OSSocket.getsockopt_u32(_fd, OSSockOpt.sol_socket(), OSSockOpt.tcp_nodelay()) fun ref set_so_rcvbuf(bufsize: U32): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` \"\"\" _OSSocket.set_so_rcvbuf(_fd, bufsize) fun ref set_so_sndbuf(bufsize: U32): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` \"\"\" _OSSocket.set_so_sndbuf(_fd, bufsize) fun ref set_tcp_nodelay(state: Bool): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, TCP_NODELAY, ...)` \"\"\" var word: Array[U8] ref = _OSSocket.u32_to_bytes4(if state then 1 else 0 end) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.tcp_nodelay(), word)","title":"tcp_connection.pony"},{"location":"src/net/tcp_connection_notify/","text":"interface TCPConnectionNotify \"\"\" Notifications for TCP connections. For an example of using this class please see the documentation for the `TCPConnection` and `TCPListener` actors. \"\"\" fun ref accepted(conn: TCPConnection ref) => \"\"\" Called when a TCPConnection is accepted by a TCPListener. \"\"\" None fun ref proxy_via(host: String, service: String): (String, String) => \"\"\" Called before before attempting to connect to the destination server In order to connect via proxy, return the host & service for the proxy server. An implementation of this function might look like: ```pony let _proxy_host = \"some-proxy.example.com\" let _proxy_service = \"80\" var _destination_host: ( None | String ) var _destination_service: ( None | String ) fun ref proxy_via(host: String, service: String): (String, String) => _destination_host = host _destination_service = service ( _proxy_host, _proxy_service ) ``` \"\"\" (host, service) fun ref connecting(conn: TCPConnection ref, count: U32) => \"\"\" Called if name resolution succeeded for a TCPConnection and we are now waiting for a connection to the server to succeed. The count is the number of connections we're trying. The notifier will be informed each time the count changes, until a connection is made or connect_failed() is called. \"\"\" None fun ref connected(conn: TCPConnection ref) => \"\"\" Called when we have successfully connected to the server. \"\"\" None fun ref connect_failed(conn: TCPConnection ref) \"\"\" Called when we have failed to connect to all possible addresses for the server. At this point, the connection will never be established. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: ```pony fun ref connect_failed(conn: TCPConnection ref) => None ``` \"\"\" fun ref auth_failed(conn: TCPConnection ref) => \"\"\" A raw TCPConnection has no authentication mechanism. However, when protocols are wrapped in other protocols, this can be used to report an authentication failure in a lower level protocol (e.g. SSL). \"\"\" None fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq => \"\"\" Called when data is sent on the connection. This gives the notifier an opportunity to modify sent data before it is written. To swallow data, return an empty string. \"\"\" data fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter => \"\"\" Called when multiple chunks of data are sent to the connection in a single call. This gives the notifier an opportunity to modify the sent data chunks before they are written. To swallow the send, return an empty Array[String]. \"\"\" data fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => \"\"\" Called when new data is received on the connection. Return true if you want to continue receiving messages without yielding until you read max_size on the TCPConnection. Return false to cause the TCPConnection to yield now. Includes the number of times during the current behavior, that received has been called. This allows the notifier to end reads on a regular basis. \"\"\" true fun ref expect(conn: TCPConnection ref, qty: USize): USize => \"\"\" Called when the connection has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing (e.g. SSL). \"\"\" qty fun ref closed(conn: TCPConnection ref) => \"\"\" Called when the connection is closed. \"\"\" None fun ref throttled(conn: TCPConnection ref) => \"\"\" Called when the connection starts experiencing TCP backpressure. You should respond to this by pausing additional calls to `write` and `writev` until you are informed that pressure has been released. Failure to respond to the `throttled` notification will result in outgoing data queuing in the connection and increasing memory usage. \"\"\" None fun ref unthrottled(conn: TCPConnection ref) => \"\"\" Called when the connection stops experiencing TCP backpressure. Upon receiving this notification, you should feel free to start making calls to `write` and `writev` again. \"\"\" None","title":"tcp_connection_notify.pony"},{"location":"src/net/tcp_listen_notify/","text":"interface TCPListenNotify \"\"\" Notifications for TCP listeners. For an example of using this class, please see the documentation for the `TCPListener` actor. \"\"\" fun ref listening(listen: TCPListener ref) => \"\"\" Called when the listener has been bound to an address. \"\"\" None fun ref not_listening(listen: TCPListener ref) \"\"\" Called if it wasn't possible to bind the listener to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: ```pony fun ref not_listening(listen: TCPListener ref) => None ``` \"\"\" fun ref closed(listen: TCPListener ref) => \"\"\" Called when the listener is closed. \"\"\" None fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ ? \"\"\" Create a new TCPConnectionNotify to attach to a new TCPConnection for a newly established connection to the server. \"\"\"","title":"tcp_listen_notify.pony"},{"location":"src/net/tcp_listener/","text":"type TCPListenerAuth is (AmbientAuth | NetAuth | TCPAuth | TCPListenAuth) actor TCPListener \"\"\" Listens for new network connections. The following program creates an echo server that listens for connections on port 8989 and echoes back any data it receives. ```pony use \"net\" class MyTCPConnectionNotify is TCPConnectionNotify fun ref received( conn: TCPConnection ref, data: Array[U8] iso, times: USize) : Bool => conn.write(String.from_array(consume data)) true fun ref connect_failed(conn: TCPConnection ref) => None class MyTCPListenNotify is TCPListenNotify fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ => MyTCPConnectionNotify fun ref not_listening(listen: TCPListener ref) => None actor Main new create(env: Env) => try TCPListener(env.root as AmbientAuth, recover MyTCPListenNotify end, \"\", \"8989\") end ``` \"\"\" var _notify: TCPListenNotify var _fd: U32 var _event: AsioEventID = AsioEvent.none() var _closed: Bool = false let _limit: USize var _count: USize = 0 var _paused: Bool = false let _read_buffer_size: USize let _yield_after_reading: USize let _yield_after_writing: USize new create( auth: TCPListenerAuth, notify: TCPListenNotify iso, host: String = \"\", service: String = \"0\", limit: USize = 0, read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" Listens for both IPv4 and IPv6 connections. \"\"\" _limit = limit _notify = consume notify _event = @pony_os_listen_tcp[AsioEventID](this, host.cstring(), service.cstring()) _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _fd = @pony_asio_event_fd(_event) _notify_listening() new ip4( auth: TCPListenerAuth, notify: TCPListenNotify iso, host: String = \"\", service: String = \"0\", limit: USize = 0, read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" Listens for IPv4 connections. \"\"\" _limit = limit _notify = consume notify _event = @pony_os_listen_tcp4[AsioEventID](this, host.cstring(), service.cstring()) _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _fd = @pony_asio_event_fd(_event) _notify_listening() new ip6( auth: TCPListenerAuth, notify: TCPListenNotify iso, host: String = \"\", service: String = \"0\", limit: USize = 0, read_buffer_size: USize = 16384, yield_after_reading: USize = 16384, yield_after_writing: USize = 16384) => \"\"\" Listens for IPv6 connections. \"\"\" _limit = limit _notify = consume notify _event = @pony_os_listen_tcp6[AsioEventID](this, host.cstring(), service.cstring()) _read_buffer_size = read_buffer_size _yield_after_reading = yield_after_reading _yield_after_writing = yield_after_writing _fd = @pony_asio_event_fd(_event) _notify_listening() be set_notify(notify: TCPListenNotify iso) => \"\"\" Change the notifier. \"\"\" _notify = consume notify be dispose() => \"\"\" Stop listening. \"\"\" close() fun local_address(): NetAddress => \"\"\" Return the bound IP address. \"\"\" let ip = recover NetAddress end @pony_os_sockname[Bool](_fd, ip) ip be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When we are readable, we accept new connections until none remain. \"\"\" if event isnt _event then return end if AsioEvent.readable(flags) then _accept(arg) end if AsioEvent.disposable(flags) then @pony_asio_event_destroy(_event) _event = AsioEvent.none() end be _conn_closed() => \"\"\" An accepted connection has closed. If we have dropped below the limit, try to accept new connections. \"\"\" _count = _count - 1 if _paused and (_count < _limit) then _paused = false _accept() end fun ref _accept(ns: U32 = 0) => \"\"\" Accept connections as long as we have spawned fewer than our limit. \"\"\" ifdef windows then if ns == -1 then // Unsubscribe when we get an invalid socket in the event. @pony_asio_event_unsubscribe(_event) return end if ns > 0 then if _closed then @pony_os_socket_close[None](ns) return end _spawn(ns) end // Queue an accept if we're not at the limit. if (_limit == 0) or (_count < _limit) then @pony_os_accept[U32](_event) else _paused = true end else if _closed then return end while (_limit == 0) or (_count < _limit) do var fd = @pony_os_accept[U32](_event) match fd | -1 => // Something other than EWOULDBLOCK, try again. None | 0 => // EWOULDBLOCK, don't try again. return else _spawn(fd) end end _paused = true end fun ref _spawn(ns: U32) => \"\"\" Spawn a new connection. \"\"\" try TCPConnection._accept(this, _notify.connected(this)?, ns, _read_buffer_size, _yield_after_reading, _yield_after_writing) _count = _count + 1 else @pony_os_socket_close[None](ns) end fun ref _notify_listening() => \"\"\" Inform the notifier that we're listening. \"\"\" if not _event.is_null() then _notify.listening(this) else _closed = true _notify.not_listening(this) end fun ref close() => \"\"\" Dispose of resources. \"\"\" if _closed then return end _closed = true if not _event.is_null() then // When not on windows, the unsubscribe is done immediately. ifdef not windows then @pony_asio_event_unsubscribe(_event) end @pony_os_socket_close[None](_fd) _fd = -1 _notify.closed(this) end","title":"tcp_listener.pony"},{"location":"src/net/udp_notify/","text":"interface UDPNotify \"\"\" Notifications for UDP connections. For an example of using this class please see the documentatoin for the `UDPSocket` actor. \"\"\" fun ref listening(sock: UDPSocket ref) => \"\"\" Called when the socket has been bound to an address. \"\"\" None fun ref not_listening(sock: UDPSocket ref) \"\"\" Called if it wasn't possible to bind the socket to an address. It is expected to implement proper error handling. You need to opt in to ignoring errors, which can be implemented like this: ```pony fun ref not_listening(sock: UDPSocket ref) => None ``` \"\"\" fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => \"\"\" Called when new data is received on the socket. \"\"\" None fun ref closed(sock: UDPSocket ref) => \"\"\" Called when the socket is closed. \"\"\" None","title":"udp_notify.pony"},{"location":"src/net/udp_socket/","text":"use \"collections\" type UDPSocketAuth is (AmbientAuth | NetAuth | UDPAuth) actor UDPSocket \"\"\" Creates a UDP socket that can be used for sending and receiving UDP messages. The following examples create: * an echo server that listens for connections and returns whatever message it receives * a client that connects to the server, sends a message, and prints the message it receives in response The server is implemented like this: ```pony use \"net\" class MyUDPNotify is UDPNotify fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => sock.write(consume data, from) fun ref not_listening(sock: UDPSocket ref) => None actor Main new create(env: Env) => try UDPSocket(env.root as AmbientAuth, MyUDPNotify, \"\", \"8989\") end ``` The client is implemented like this: ```pony use \"net\" class MyUDPNotify is UDPNotify let _out: OutStream let _destination: NetAddress new create( out: OutStream, destination: NetAddress) => _out = out _destination = destination fun ref listening(sock: UDPSocket ref) => sock.write(\"hello world\", _destination) fun ref received( sock: UDPSocket ref, data: Array[U8] iso, from: NetAddress) => _out.print(\"GOT:\" + String.from_array(consume data)) sock.dispose() fun ref not_listening(sock: UDPSocket ref) => None actor Main new create(env: Env) => try let destination = DNS.ip4(env.root as AmbientAuth, \"localhost\", \"8989\")(0)? UDPSocket(env.root as AmbientAuth, recover MyUDPNotify(env.out, consume destination) end) end ``` \"\"\" var _notify: UDPNotify var _fd: U32 var _event: AsioEventID var _readable: Bool = false var _closed: Bool = false var _packet_size: USize var _read_buf: Array[U8] iso var _read_from: NetAddress iso = NetAddress embed _ip: NetAddress = NetAddress new create( auth: UDPSocketAuth, notify: UDPNotify iso, host: String = \"\", service: String = \"0\", size: USize = 1024) => \"\"\" Listens for both IPv4 and IPv6 datagrams. \"\"\" _notify = consume notify _event = @pony_os_listen_udp[AsioEventID](this, host.cstring(), service.cstring()) _fd = @pony_asio_event_fd(_event) @pony_os_sockname[Bool](_fd, _ip) _packet_size = size _read_buf = recover Array[U8] .> undefined(size) end _notify_listening() _start_next_read() new ip4( auth: UDPSocketAuth, notify: UDPNotify iso, host: String = \"\", service: String = \"0\", size: USize = 1024) => \"\"\" Listens for IPv4 datagrams. \"\"\" _notify = consume notify _event = @pony_os_listen_udp4[AsioEventID](this, host.cstring(), service.cstring()) _fd = @pony_asio_event_fd(_event) @pony_os_sockname[Bool](_fd, _ip) _packet_size = size _read_buf = recover Array[U8] .> undefined(size) end _notify_listening() _start_next_read() new ip6( auth: UDPSocketAuth, notify: UDPNotify iso, host: String = \"\", service: String = \"0\", size: USize = 1024) => \"\"\" Listens for IPv6 datagrams. \"\"\" _notify = consume notify _event = @pony_os_listen_udp6[AsioEventID](this, host.cstring(), service.cstring()) _fd = @pony_asio_event_fd(_event) @pony_os_sockname[Bool](_fd, _ip) _packet_size = size _read_buf = recover Array[U8] .> undefined(size) end _notify_listening() _start_next_read() be write(data: ByteSeq, to: NetAddress) => \"\"\" Write a single sequence of bytes. \"\"\" _write(data, to) be writev(data: ByteSeqIter, to: NetAddress) => \"\"\" Write a sequence of sequences of bytes. \"\"\" for bytes in data.values() do _write(bytes, to) end be set_notify(notify: UDPNotify iso) => \"\"\" Change the notifier. \"\"\" _notify = consume notify be set_broadcast(state: Bool) => \"\"\" Enable or disable broadcasting from this socket. \"\"\" if not _closed then if _ip.ip4() then set_so_broadcast(state) elseif _ip.ip6() then @pony_os_multicast_join[None](_fd, \"FF02::1\".cstring(), \"\".cstring()) end end be set_multicast_interface(from: String = \"\") => \"\"\" By default, the OS will choose which address is used to send packets bound for multicast addresses. This can be used to force a specific interface. To revert to allowing the OS to choose, call with an empty string. \"\"\" if not _closed then @pony_os_multicast_interface[None](_fd, from.cstring()) end be set_multicast_loopback(loopback: Bool) => \"\"\" By default, packets sent to a multicast address will be received by the sending system if it has subscribed to that address. Disabling loopback prevents this. \"\"\" if not _closed then set_ip_multicast_loop(loopback) end be set_multicast_ttl(ttl: U8) => \"\"\" Set the TTL for multicast sends. Defaults to 1. \"\"\" if not _closed then set_ip_multicast_ttl(ttl) end be multicast_join(group: String, to: String = \"\") => \"\"\" Add a multicast group. This can be limited to packets arriving on a specific interface. \"\"\" if not _closed then @pony_os_multicast_join[None](_fd, group.cstring(), to.cstring()) end be multicast_leave(group: String, to: String = \"\") => \"\"\" Drop a multicast group. This can be limited to packets arriving on a specific interface. No attempt is made to check that this socket has previously added this group. \"\"\" if not _closed then @pony_os_multicast_leave[None](_fd, group.cstring(), to.cstring()) end be dispose() => \"\"\" Stop listening. \"\"\" if not _closed then _close() end fun local_address(): NetAddress => \"\"\" Return the bound IP address. \"\"\" _ip be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When we are readable, we accept new connections until none remain. \"\"\" if event isnt _event then return end if not _closed then if AsioEvent.readable(flags) then _readable = true _complete_reads(arg) _pending_reads() end else ifdef windows then if AsioEvent.readable(flags) then _readable = false _close() end end end if AsioEvent.disposable(flags) then @pony_asio_event_destroy[None](_event) _event = AsioEvent.none() end be _read_again() => \"\"\" Resume reading. \"\"\" if not _closed then _pending_reads() end fun ref _pending_reads() => \"\"\" Read while data is available, guessing the next packet length as we go. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. \"\"\" ifdef not windows then try var sum: USize = 0 while _readable do let size = _packet_size let data = _read_buf = recover Array[U8] .> undefined(size) end let from = recover NetAddress end let len = @pony_os_recvfrom[USize](_event, data.cpointer(), data.space(), from) ? if len == 0 then _readable = false return end data.truncate(len) _notify.received(this, consume data, consume from) sum = sum + len if sum > (1 << 12) then _read_again() return end end else _close() end end fun ref _complete_reads(len: U32) => \"\"\" The OS has informed as that len bytes of pending reads have completed. This occurs only with IOCP on Windows. \"\"\" ifdef windows then if _read_buf.space() == 0 then // Socket has been closed _readable = false _close() return end if _closed then return end // Hand back read data let size = _packet_size let data = _read_buf = recover Array[U8] .> undefined(size) end let from = _read_from = recover NetAddress end data.truncate(len.usize()) _notify.received(this, consume data, consume from) _start_next_read() end fun ref _start_next_read() => \"\"\" Start our next receive. This is used only with IOCP on Windows. \"\"\" ifdef windows then try @pony_os_recvfrom[USize](_event, _read_buf.cpointer(), _read_buf.space(), _read_from) ? else _readable = false _close() end end fun ref _write(data: ByteSeq, to: NetAddress) => \"\"\" Write the datagram to the socket. \"\"\" if not _closed then try @pony_os_sendto[USize](_fd, data.cpointer(), data.size(), to) ? else _close() end end fun ref _notify_listening() => \"\"\" Inform the notifier that we're listening. \"\"\" if _fd != -1 then _notify.listening(this) else _notify.not_listening(this) end fun ref _close() => \"\"\" Inform the notifier that we've closed. \"\"\" ifdef windows then // On windows, wait until IOCP read operation has completed or been // cancelled. if _closed and not _readable and not _event.is_null() then @pony_asio_event_unsubscribe[None](_event) end else // Unsubscribe immediately. if not _event.is_null() then @pony_asio_event_unsubscribe[None](_event) _readable = false end end _closed = true if _fd != -1 then _notify.closed(this) // On windows, this will also cancel all outstanding IOCP operations. @pony_os_socket_close[None](_fd) _fd = -1 end fun ref getsockopt(level: I32, option_name: I32, option_max_size: USize = 4): (U32, Array[U8] iso^) => \"\"\" General wrapper for UDP sockets to the `getsockopt(2)` system call. The caller must provide an array that is pre-allocated to be at least as large as the largest data structure that the kernel may return for the requested option. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. An `Array[U8]` of data returned by the system call's `void *` 4th argument. Its size is specified by the kernel via the system call's `sockopt_len_t *` 5th argument. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. Usage example: ```pony // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) => match sock.getsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), 4) | (0, let gbytes: Array[U8] iso) => try let br = Reader.create().>append(consume gbytes) ifdef littleendian then let buffer_size = br.u32_le()? else let buffer_size = br.u32_be()? end end | (let errno: U32, _) => // System call failed end ``` \"\"\" _OSSocket.getsockopt(_fd, level, option_name, option_max_size) fun ref getsockopt_u32(level: I32, option_name: I32): (U32, U32) => \"\"\" Wrapper for UDP sockets to the `getsockopt(2)` system call where the kernel's returned option value is a C `uint32_t` type / Pony type `U32`. In case of system call success, this function returns the 2-tuple: 1. The integer `0`. 2. The `*option_value` returned by the kernel converted to a Pony `U32`. In case of system call failure, this function returns the 2-tuple: 1. The value of `errno`. 2. An undefined value that must be ignored. \"\"\" _OSSocket.getsockopt_u32(_fd, level, option_name) fun ref setsockopt(level: I32, option_name: I32, option: Array[U8]): U32 => \"\"\" General wrapper for UDP sockets to the `setsockopt(2)` system call. The caller is responsible for the correct size and byte contents of the `option` array for the requested `level` and `option_name`, including using the appropriate CPU endian byte order. This function returns `0` on success, else the value of `errno` on failure. Usage example: ```pony // listening() is a callback function for class UDPNotify fun ref listening(sock: UDPSocket ref) => let sb = Writer sb.u32_le(7744) // Our desired socket buffer size let sbytes = Array[U8] for bs in sb.done().values() do sbytes.append(bs) end match sock.setsockopt(OSSockOpt.sol_socket(), OSSockOpt.so_rcvbuf(), sbytes) | 0 => // System call was successful | let errno: U32 => // System call failed end ``` \"\"\" _OSSocket.setsockopt(_fd, level, option_name, option) fun ref setsockopt_u32(level: I32, option_name: I32, option: U32): U32 => \"\"\" Wrapper for UDP sockets to the `setsockopt(2)` system call where the kernel expects an option value of a C `uint32_t` type / Pony type `U32`. This function returns `0` on success, else the value of `errno` on failure. \"\"\" _OSSocket.setsockopt_u32(_fd, level, option_name, option) fun ref get_so_error(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_ERROR, ...)` \"\"\" _OSSocket.get_so_error(_fd) fun ref get_so_rcvbuf(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` \"\"\" _OSSocket.get_so_rcvbuf(_fd) fun ref get_so_sndbuf(): (U32, U32) => \"\"\" Wrapper for the FFI call `getsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` \"\"\" _OSSocket.get_so_sndbuf(_fd) fun ref set_ip_multicast_loop(loopback: Bool): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, IP_MULTICAST_LOOP, ...)` \"\"\" var word: Array[U8] ref = _OSSocket.u32_to_bytes4(if loopback then 1 else 0 end) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.ip_multicast_loop(), word) fun ref set_ip_multicast_ttl(ttl: U8): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, IP_MULTICAST_TTL, ...)` \"\"\" var word: Array[U8] ref = _OSSocket.u32_to_bytes4(ttl.u32()) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.ip_multicast_ttl(), word) fun ref set_so_broadcast(state: Bool): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_BROADCAST, ...)` \"\"\" var word: Array[U8] ref = _OSSocket.u32_to_bytes4(if state then 1 else 0 end) _OSSocket.setsockopt(_fd, OSSockOpt.sol_socket(), OSSockOpt.so_broadcast(), word) fun ref set_so_rcvbuf(bufsize: U32): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_RCVBUF, ...)` \"\"\" _OSSocket.set_so_rcvbuf(_fd, bufsize) fun ref set_so_sndbuf(bufsize: U32): U32 => \"\"\" Wrapper for the FFI call `setsockopt(fd, SOL_SOCKET, SO_SNDBUF, ...)` \"\"\" _OSSocket.set_so_sndbuf(_fd, bufsize)","title":"udp_socket.pony"},{"location":"src/options/env_vars/","text":"use \"collections\" primitive EnvVars fun apply(from: Array[String] val): Map[String, String] val => \"\"\" Turns an array of strings that look like environment variables, ie key=value, into a map from string to string. \"\"\" let map = recover Map[String, String](from.size()) end for kv in from.values() do try let delim = kv.find(\"=\")? let k = kv.substring(0, delim) let v = kv.substring(delim + 1) map(consume k) = consume v else map(kv) = \"\" end end map","title":"env_vars.pony"},{"location":"src/options/options/","text":"\"\"\" # Options package The Options package provides support for parsing command line arguments. ## Deprectation warning This package is deprecated and will be removed in a future release. Use the [cli](cli--index.md) package instead. ## Example program ```pony use \"options\" actor Main let _env: Env // Some values we can set via command line options var _a_string: String = \"default\" var _a_number: USize = 0 var _a_unumber: USize = 0 var _a_float: Float = F64(0.0) new create(env: Env) => _env = env try arguments()? end _env.out.print(\"The String is \" + _a_string) _env.out.print(\"The Number is \" + _a_number.string()) _env.out.print(\"The UNumber is \" + _a_unumber.string()) _env.out.print(\"The Float is \" + _a_float.string()) fun ref arguments() ? => var options = Options(_env.args) options .add(\"string\", \"t\", StringArgument) .add(\"number\", \"i\", I64Argument) .add(\"unumber\", \"u\", U64Argument) .add(\"float\", \"c\", F64Argument) for option in options do match option | (\"string\", let arg: String) => _a_string = arg | (\"number\", let arg: I64) => _a_number = arg.usize() | (\"unumber\", let arg: U64) => _a_unumber = arg.usize() | (\"float\", let arg: F64) => _a_float = arg | let err: ParseError => err.report(_env.out) ; usage() ; error end end fun ref usage() => // this exists inside a doc-string to create the docs you are reading // in real code, we would use a single string literal for this but // docstrings are themselves string literals and you can't put a // string literal in a string literal. That would lead to total // protonic reversal. In your own code, use a string literal instead // of string concatenation for this. _env.out.print( \"program [OPTIONS]\\n\" + \" --string N a string argument. Defaults to 'default'.\\n\" + \" --number N a number argument. Defaults to 0.\\n\" + \" --unumber N a unsigned number argument. Defaults to 0.\\n\" + \" --float N a floating point argument. Defaults to 0.0.\\n\" ) ``` \"\"\" primitive StringArgument primitive I64Argument primitive U64Argument primitive F64Argument primitive Required primitive Optional primitive UnrecognisedOption primitive AmbiguousMatch primitive MissingArgument primitive InvalidArgument type ArgumentType is ( None | StringArgument | I64Argument | U64Argument | F64Argument ) type ErrorReason is ( UnrecognisedOption | MissingArgument | InvalidArgument | AmbiguousMatch ) type ParsedOption is (String, (None | String | I64 | U64 | F64)) interface ParseError fun reason(): ErrorReason fun report(out: OutStream) class Options is Iterator[(ParsedOption | ParseError | None)] embed _arguments: Array[String ref] let _fatal: Bool embed _configuration: Array[_Option] = _configuration.create() var _index: USize = 0 var _error: Bool = false new create(args: Array[String] box, fatal: Bool = true) => _arguments = _arguments.create(args.size()) _fatal = fatal for arg in args.values() do _arguments.push(arg.clone()) end fun ref add( long: String, short: (None | String) = None, arg: ArgumentType = None, mode: (Required | Optional) = Required) : Options => \"\"\" Adds a new named option to the parser configuration. \"\"\" _configuration.push(_Option(long, short, arg, mode)) this fun ref remaining(): Array[String ref] => \"\"\" Returns all unprocessed command line arguments. After parsing all options, this will only include positional arguments, potentially unrecognised and ambiguous options and invalid arguments. \"\"\" _arguments fun ref _strip( opt: _Option, matched: String ref, start: ISize, finish: ISize) => \"\"\" Strips accepted options from the copied array of command line arguments. \"\"\" matched.cut_in_place(start, finish) if opt.has_argument() then // If 'matched' is non-empty, then the rest (without - or =) must be the // argument. matched .> lstrip(\"-\") .> remove(\"=\") end try if matched.size() == 0 then _arguments.delete(_index)? end if (matched.size() == 1) and (matched(0)? == '-') then _arguments.delete(_index)? end end fun ref _select( candidate: String ref, start: ISize, offset: ISize, finish: ISize) : (_Option | ParseError) => \"\"\" Selects an option from the configuration depending on the current command line argument. \"\"\" let name: String box = candidate.substring(start, finish) let matches = Array[_Option] var selected: (_Option | None) = None for opt in _configuration.values() do if opt.matches(name, start == 1) then matches.push(opt) selected = opt end end match (selected, matches.size()) | (let opt: _Option, 1) => _strip(opt, candidate, offset, finish) opt | (let opt: _Option, _) => _ErrorPrinter._ambiguous(matches) else _ErrorPrinter._unrecognised(candidate.substring(0, finish + 1)) end fun ref _skip(): Bool => \"\"\" Skips all non-options. Returns true if a named option has been found, false otherwise. \"\"\" while _index < _arguments.size() do try let current = _arguments(_index)? if (current(0)? == '-') and (current(1)? != 0) then return true end end _index = _index + 1 end false fun ref _verify(opt: _Option, combined: Bool): (ParsedOption | ParseError) => \"\"\" Verifies whether a parsed option from the command line is well-formed. That is, checking whether required or optional arguments are supplied. Returns a ParsedOption on success, a ParseError otherwise. \"\"\" if opt.has_argument() then try let argument = _arguments(_index)? let invalid = not combined and (argument(0)? == '-') if not opt.accepts(argument) or invalid then if opt.mode isnt Optional then return _ErrorPrinter._invalid(argument, opt) end error end _arguments.delete(_index)? match opt.arg | StringArgument => return (opt.long, argument.clone()) | I64Argument => return (opt.long, argument.i64()?) | U64Argument => return (opt.long, argument.u64()?) | F64Argument => return (opt.long, argument.f64()?) end else if opt.requires_argument() then return _ErrorPrinter._missing(opt) end end end (opt.long, None) fun has_next(): Bool => \"\"\" Parsing options is done if either an error occurs and fatal error reporting is turned on, or if all command line arguments have been processed. \"\"\" not (_error and _fatal) and (_index < _arguments.size()) fun ref next(): (ParsedOption | ParseError | None) => \"\"\" Skips all positional arguments and attemps to match named options. Returns a ParsedOption on success, a ParseError on error, or None if no named options are found. \"\"\" if _skip() then try let candidate = _arguments(_index)? (let start: ISize, let offset: ISize) = match (candidate(0)?, candidate(1)?) | ('-', '-') => (2, 0) | ('-', let char: U8) => (1, 1) else (0, 0) // unreachable end let last = candidate.size().isize() (let finish: ISize, let combined: Bool) = try (candidate.find(\"=\")?, true) else (if start == 1 then start+1 else last end, false) end match _select(candidate, start, offset, finish) | let err: ParseError => _error = true _index = _index + 1 err | let opt: _Option => _verify(opt, combined) end end end //TODO: Refactor class _Option let long: String \"\"\" Long option name. E.g. \"help\" for a \"--help\" option. \"\"\" let short: (String | None) \"\"\" Short option name (if any). E.g. \"h\" for a \"-h\" option. \"\"\" let arg: ArgumentType \"\"\" The type of the expected argument. None, if this option is a flag. E.g. \"--help\" \"\"\" let mode: (Required | Optional) \"\"\"determining if this Option is required or optional\"\"\" new create( long': String, short': (String | None), arg': ArgumentType, mode': (Required | Optional)) => long = long' short = short' arg = arg' mode = mode' fun matches(name: String box, shortmatch: Bool): Bool => match (short, shortmatch) | (let x: String, true) => return name.compare_sub(x, 1) is Equal end long == name fun has_argument(): Bool => match arg | None => return false end true fun requires_argument(): Bool => if arg isnt None then match mode | Required => return true end end false fun accepts(argument: String box): Bool => true class _ErrorPrinter var _message: String var _reason: ErrorReason new _ambiguous(matches: Array[_Option]) => let m = recover String end m.append(\"Ambiguous options:\\n\") for opt in matches.values() do m.append(\" --\" + opt.long) try m.append(\", -\" + (opt.short as String)) end m.append(\"\\n\") end _message = consume m _reason = AmbiguousMatch new _unrecognised(option: String box) => _message = \"Unrecognised option: \" + option _reason = UnrecognisedOption new _invalid(argument: String box, option: _Option) => _message = \"Invalid argument: --\" + option.long _reason = InvalidArgument new _missing(option: _Option) => _message = \"Missing argument: --\" + option.long _reason = MissingArgument fun reason(): ErrorReason => _reason fun report(out: OutStream) => out.print(_message)","title":"options.pony"},{"location":"src/ponybench/_aggregator/","text":"class ref _Aggregator let _ponybench: PonyBench let _runner: _Runner let _overhead: Bool let _config: BenchConfig var _samples: Array[U64] iso var _warmup: Bool = true var iterations: U64 = 1 new create( ponybench: PonyBench, runner: _Runner, config: BenchConfig, overhead: Bool) => _ponybench = ponybench _runner = runner _overhead = overhead _config = config _samples = recover Array[U64](_config.samples) end fun ref complete(name: String, t: U64) => if _warmup then match _calc_iterations(t) | let n: U64 => iterations = n | None => _warmup = false end _runner() else _samples.push(t) if _samples.size() < _config.samples then _runner() else _ponybench._complete(_Results( name, _samples = recover [] end, iterations, _overhead)) end end fun ref _calc_iterations(runtime: U64): (U64 | None) => let max_i = _config.max_iterations let max_t = _config.max_sample_time let nspi = runtime / iterations if (runtime < max_t) and (iterations < max_i) then var itrs' = if nspi == 0 then max_i else max_t / nspi end itrs' = (itrs' + (itrs' / 5)).min(iterations * 100).max(iterations + 1) _round_up(itrs') else iterations = iterations.min(max_i) None end fun _round_up(x: U64): U64 => \"\"\" Round x up to a number of the form [1^x, 2^x, 3^x, 5^x]. \"\"\" let base = _round_down_10(x) if x <= base then base elseif x <= (base * 2) then base * 2 elseif x <= (base * 3) then base * 3 elseif x <= (base * 5) then base * 5 else base * 10 end fun _round_down_10(x: U64): U64 => \"\"\" Round down to the nearest power of 10. \"\"\" let tens = x.f64().log10().floor() F64(10).pow(tens).u64()","title":"_aggregator.pony"},{"location":"src/ponybench/_output_manager/","text":"use \"format\" use \"term\" interface _OutputManager fun ref apply(results: _Results) class _TerminalOutput is _OutputManager let _env: Env let _noadjust: Bool var _overhead_mean: F64 = 0 var _overhead_median: F64 = 0 new create(env: Env) => _env = env _noadjust = _env.args.contains(\"--noadjust\", {(a, b) => a == b }) if not _noadjust then _print(\"Benchmark results will have their mean and median adjusted for overhead.\") _print(\"You may disable this with --noadjust.\\n\") end _print_heading() fun ref apply(results: _Results) => if results.overhead then if _noadjust then _print_benchmark(consume results, false) else _overhead_mean = results.mean() / results.iterations.f64() _overhead_median = results.median() / results.iterations.f64() end else _print_benchmark(consume results, not _noadjust) end fun ref _print_benchmark(results: _Results, adjust: Bool) => let iters = results.iterations.f64() let mean' = results.mean() var mean = mean' / iters var median = results.median() / iters if adjust then mean = mean - _overhead_mean median = median - _overhead_median end let std_dev = results.std_dev() let relative_std_dev = (std_dev * 100) / mean' _print_result( results.name, mean.round().i64().string(), median.round().i64().string(), Format.float[F64](relative_std_dev where prec = 2, fmt = FormatFix), iters.u64().string()) if (mean.round() < 0) or (median.round() < 0) then _warn(\"Adjustment for overhead has resulted in negative values.\") end fun _print_heading() => _print(\"\".join( [ ANSI.bold() Format(\"Benchmark\" where width = 30) Format(\"mean\" where width = 18, align = AlignRight) Format(\"median\" where width = 18, align = AlignRight) Format(\"deviation\" where width = 12, align = AlignRight) Format(\"iterations\" where width = 12, align = AlignRight) ANSI.reset() ].values())) fun _print_result( name: String, mean: String, median: String, dev: String, iters: String) => _print(\"\".join( [ Format(name where width = 30) Format(mean + \" ns\" where width = 18, align = AlignRight) Format(median + \" ns\" where width = 18, align = AlignRight) Format(\"\u00b1\" + dev + \"%\" where width = 13, align = AlignRight) Format(iters where width = 12, align = AlignRight) ].values())) fun _print(msg: String) => _env.out.print(msg) fun _warn(msg: String) => _print(ANSI.yellow() + ANSI.bold() + \"Warning: \" + msg + ANSI.reset()) // TODO document // overhead, results... // name, results... class _CSVOutput let _env: Env new create(env: Env) => _env = env fun ref apply(results: _Results) => _print(results.raw_str()) fun _print(msg: String) => _env.out.print(msg)","title":"_output_manager.pony"},{"location":"src/ponybench/_results/","text":"use \"collections\" class val _Results let name: String let samples: Array[U64] let iterations: U64 let overhead: Bool new val create( name': String, samples': Array[U64] iso, iterations': U64, overhead': Bool) => name = name' samples = consume samples' iterations = iterations' overhead = overhead' Sort[Array[U64], U64](samples) fun raw_str(): String => let str = recover String end str .> append(name) .> append(\",\") for n in samples.values() do let nspi = n / iterations str .> append(nspi.string()) .> append(\",\") end if samples.size() > 0 then try str.pop()? end end str fun sum(): U64 => var sum': U64 = 0 try for i in Range(0, samples.size()) do sum' = sum' + samples(i)? end end sum' fun mean(): F64 => sum().f64() / samples.size().f64() fun median(): F64 => try let len = samples.size() let i = len / 2 if (len % 2) == 1 then samples(i)?.f64() else (let lo, let hi) = (samples(i)?, samples(i + 1)?) ((lo.f64() + hi.f64()) / 2).round() end else 0 end fun std_dev(): F64 => // sample standard deviation if samples.size() < 2 then return 0 end try var sum_squares: F64 = 0 for i in Range(0, samples.size()) do let n = samples(i)?.f64() sum_squares = sum_squares + (n * n) end let avg_squares = sum_squares / samples.size().f64() let mean' = mean() let mean_sq = mean' * mean' let len = samples.size().f64() ((len / (len - 1)) * (avg_squares - mean_sq)).sqrt() else 0 end","title":"_results.pony"},{"location":"src/ponybench/_runner/","text":"use \"time\" trait tag _Runner be apply() actor _RunSync is _Runner let _ponybench: PonyBench embed _aggregator: _Aggregator let _name: String let _bench: MicroBenchmark new create( ponybench: PonyBench, benchmark: MicroBenchmark, overhead: Bool) => _ponybench = ponybench _aggregator = _Aggregator(_ponybench, this, benchmark.config(), overhead) _name = benchmark.name() _bench = consume benchmark apply() be apply() => try _bench.before()? _gc_next_behavior() _run_iteration() else _fail() end be _run_iteration(n: U64 = 0, a: U64 = 0) => if n == _aggregator.iterations then _complete(a) else try _bench.before_iteration()? let s = ifdef x86 then Time.perf_begin() else Time.nanos() end _bench()? let e = ifdef x86 then Time.perf_end() else Time.nanos() end _bench.after_iteration()? _run_iteration(n + 1, a + (e - s)) else _fail() end end be _complete(t: U64) => try _bench.after()? _aggregator.complete(_name, t) else _fail() end be _fail() => _ponybench._fail(_name) fun ref _gc_next_behavior() => @pony_triggergc[None](@pony_ctx[Pointer[None]]()) actor _RunAsync is _Runner let _ponybench: PonyBench embed _aggregator: _Aggregator let _name: String let _bench: AsyncMicroBenchmark ref var _start_time: U64 = 0 var _n: U64 = 0 var _a: U64 = 0 embed _before_cont: AsyncBenchContinue = AsyncBenchContinue._create(this, recover this~_before_done_cont() end) embed _before_iteration_cont: AsyncBenchContinue = AsyncBenchContinue._create(this, recover this~_before_iteration_done_cont() end) embed _iteration_cont: AsyncBenchContinue = AsyncBenchContinue._create(this, recover this~_iteration_done_cont() end) embed _after_iteration_cont: AsyncBenchContinue = AsyncBenchContinue._create(this, recover this~_after_iteration_done_cont() end) embed _after_cont: AsyncBenchContinue = AsyncBenchContinue._create(this, recover this~_after_done_cont() end) new create( ponybench: PonyBench, benchmark: AsyncMicroBenchmark, overhead: Bool) => _ponybench = ponybench _aggregator = _Aggregator(_ponybench, this, benchmark.config(), overhead) _name = benchmark.name() _bench = consume benchmark apply() be apply() => _bench.before(_before_cont) be _before_done_cont(e: U64) => _n = 0 _a = 0 _start_time = 0 _bench.before_iteration(_before_iteration_cont) be _before_iteration_done_cont(e: U64) => _run_iteration() be _run_iteration() => try _n = _n + 1 _gc_next_behavior() _start_time = Time.nanos() _bench(_iteration_cont)? else _fail() end be _iteration_done_cont(e: U64) => _a = _a + (e - _start_time) _bench.after_iteration(_after_iteration_cont) be _after_iteration_done_cont(e: U64) => if _n == _aggregator.iterations then _bench.after(_after_cont) else _bench.before_iteration(_before_iteration_cont) end be _after_done_cont(e: U64) => _aggregator.complete(_name, _a) be _fail() => _ponybench._fail(_name) fun ref _gc_next_behavior() => @pony_triggergc[None](@pony_ctx[Pointer[None]]()) class val AsyncBenchContinue let _run_async: _RunAsync let _f: {(U64)} val new val _create(run_async: _RunAsync, f: {(U64)} val) => _run_async = run_async _f = f fun complete() => let e = Time.nanos() _f(e) fun fail() => _run_async._fail()","title":"_runner.pony"},{"location":"src/ponybench/benchmark/","text":"type Benchmark is (MicroBenchmark | AsyncMicroBenchmark) // interface iso _IBenchmark // fun box name(): String // fun box config(): BenchConfig // fun box overhead(): _IBenchmark^ trait iso MicroBenchmark \"\"\" Synchronous benchmarks must provide this trait. The `apply` method defines a single iteration in a sample. Setup and Teardown are defined by the `before` and `after` methods respectively. The `before` method runs before a sample of benchmarks and `after` runs after the all iterations in the sample have completed. If your benchmark requires setup and/or teardown to occur beween each iteration of the benchmark, then you can use `before_iteration` and `after_iteration` methods respectively that run before/after each iteration. \"\"\" fun box name(): String fun box config(): BenchConfig => BenchConfig fun box overhead(): MicroBenchmark^ => OverheadBenchmark fun ref before() ? => None fun ref before_iteration() ? => None fun ref apply() ? fun ref after() ? => None fun ref after_iteration() ? => None trait iso AsyncMicroBenchmark \"\"\" Asynchronous benchmarks must provide this trait. The `apply` method defines a single iteration in a sample. Each phase of the sample completes when the given `AsyncBenchContinue` has its `complete` method invoked. Setup and Teardown are defined by the `before` and `after` methods respectively. The `before` method runs before a sample of benchmarks and `after` runs after the all iterations in the sample have completed. If your benchmark requires setup and/or teardown to occur beween each iteration of the benchmark, then you can use `before_iteration` and `after_iteration` methods respectively that run before/after each iteration. \"\"\" fun box name(): String fun box config(): BenchConfig => BenchConfig fun box overhead(): AsyncMicroBenchmark^ => AsyncOverheadBenchmark fun ref before(c: AsyncBenchContinue) => c.complete() fun ref before_iteration(c: AsyncBenchContinue) => c.complete() fun ref apply(c: AsyncBenchContinue) ? fun ref after(c: AsyncBenchContinue) => c.complete() fun ref after_iteration(c: AsyncBenchContinue) => c.complete() interface tag BenchmarkList fun tag benchmarks(bench: PonyBench) // TODO documentation class val BenchConfig \"\"\" Configuration of a benchmark. \"\"\" let samples: USize \"\"\" Total number of samples to be measured. (Default: 20) \"\"\" let max_iterations: U64 \"\"\" Maximum number of iterations to execute per sample. (Default: 1_000_000_000) \"\"\" let max_sample_time: U64 \"\"\" Maximum time to execute a sample in Nanoseconds. (Default: 100_000_000) \"\"\" new val create( samples': USize = 20, max_iterations': U64 = 1_000_000_000, max_sample_time': U64 = 100_000_000) => samples = samples' max_iterations = max_iterations' max_sample_time = max_sample_time' class iso OverheadBenchmark is MicroBenchmark \"\"\" Default benchmark for measuring synchronous overhead. \"\"\" fun name(): String => \"Benchmark Overhead\" fun ref apply() => DoNotOptimise[None](None) DoNotOptimise.observe() class iso AsyncOverheadBenchmark is AsyncMicroBenchmark \"\"\" Default benchmark for measuring asynchronous overhead. \"\"\" fun name(): String => \"Benchmark Overhead\" fun ref apply(c: AsyncBenchContinue) => c.complete()","title":"benchmark.pony"},{"location":"src/ponybench/pony_bench/","text":"\"\"\" PonyBench provides a microbenchmarking framework. It is designed to measure the runtime of synchronous and asynchronous operations. ## Example Program The following is a complete program with multiple trivial benchmarks followed by their output. ```pony use \"time\" actor Main is BenchmarkList new create(env: Env) => PonyBench(env, this) fun tag benchmarks(bench: PonyBench) => bench(_Nothing) bench(_Fib(5)) bench(_Fib(10)) bench(_Fib(20)) bench(_Timer(10_000)) class iso _Nothing is MicroBenchmark // Benchmark absolutely nothing. fun name(): String => \"Nothing\" fun apply() => // prevent compiler from optimizing out this operation DoNotOptimise[None](None) DoNotOptimise.observe() class iso _Fib is MicroBenchmark // Benchmark non-tail-recursive fibonacci let _n: U64 new iso create(n: U64) => _n = n fun name(): String => \"_Fib(\" + _n.string() + \")\" fun apply() => DoNotOptimise[U64](_fib(_n)) DoNotOptimise.observe() fun _fib(n: U64): U64 => if n < 2 then 1 else _fib(n - 1) + _fib(n - 2) end class iso _Timer is AsyncMicroBenchmark // Asynchronous benchmark of timer. let _ts: Timers = Timers let _ns: U64 new iso create(ns: U64) => _ns = ns fun name(): String => \"_Timer (\" + _ns.string() + \" ns)\" fun apply(c: AsyncBenchContinue) => _ts(Timer( object iso is TimerNotify fun apply(timer: Timer, count: U64 = 0): Bool => // signal completion of async benchmark iteration when timer fires c.complete() false end, _ns)) ``` By default, the results are printed to stdout like so: ``` Benchmark results will have their mean and median adjusted for overhead. You may disable this with --noadjust. Benchmark mean median deviation iterations Nothing 1 ns 1 ns \u00b10.87% 3000000 _Fib(5) 12 ns 12 ns \u00b11.02% 2000000 _Fib(10) 185 ns 184 ns \u00b11.03% 1000000 _Fib(20) 23943 ns 23898 ns \u00b11.11% 10000 _Timer (10000ns) 10360 ns 10238 ns \u00b13.25% 10000 ``` The `--noadjust` option outputs results of the overhead measured prior to each benchmark run followed by the unadjusted benchmark result. An example of the output of this program with `--noadjust` is as follows: ``` Benchmark mean median deviation iterations Benchmark Overhead 604 ns 603 ns \u00b10.58% 300000 Nothing 553 ns 553 ns \u00b10.30% 300000 Benchmark Overhead 555 ns 555 ns \u00b10.51% 300000 _Fib(5) 574 ns 574 ns \u00b10.43% 300000 Benchmark Overhead 554 ns 556 ns \u00b10.48% 300000 _Fib(10) 822 ns 821 ns \u00b10.39% 200000 Benchmark Overhead 554 ns 553 ns \u00b10.65% 300000 _Fib(20) 30470 ns 30304 ns \u00b11.55% 5000 Benchmark Overhead 552 ns 552 ns \u00b10.39% 300000 _Timer (10000 ns) 10780 ns 10800 ns \u00b13.60% 10000 ``` It is recommended that a PonyBench program is compiled with the `--runtimebc` option, if possible, and run with the `--ponynoyield` option. \"\"\" // TODO more examples in tutorial actor PonyBench let _env: Env let _output_manager: _OutputManager embed _bench_q: Array[(Benchmark, Bool)] = Array[(Benchmark, Bool)] var _running: Bool = false new create(env: Env, list: BenchmarkList) => _env = consume env ifdef debug then _env.err.print(\"***WARNING*** Benchmark was built as DEBUG. Timings may be affected.\") end _output_manager = if _env.args.contains(\"-csv\", {(a, b) => a == b }) then _CSVOutput(_env) else _TerminalOutput(_env) end list.benchmarks(this) be apply(bench: Benchmark) => match consume bench | let b: MicroBenchmark => _bench_q.push((b.overhead(), true)) _bench_q.push((consume b, false)) | let b: AsyncMicroBenchmark => _bench_q.push((b.overhead(), true)) _bench_q.push((consume b, false)) end if not _running then _running = true _next_benchmark() end be _next_benchmark() => if _bench_q.size() > 0 then try match _bench_q.shift()? | (let b: MicroBenchmark, let overhead: Bool) => _RunSync(this, consume b, overhead) | (let b: AsyncMicroBenchmark, let overhead: Bool) => _RunAsync(this, consume b, overhead) end end else _running = false end be _complete(results: _Results) => _output_manager(consume results) _next_benchmark() be _fail(name: String) => _env.err.print(\"Failed benchmark: \" + name) _env.exitcode(1)","title":"pony_bench.pony"},{"location":"src/ponytest/_color/","text":"primitive _Color \"\"\" Strings to embedded in text to specify colours. These are copies of the strings defined in packages/term. They are duplicated here to avoid a dependency. \"\"\" fun reset(): String => \"\"\" Resets all colours and text styles to the default. \"\"\" \"\\x1B[0m\" fun red(): String => \"\"\" Bright red text. \"\"\" \"\\x1B[91m\" fun green(): String => \"\"\" Bright green text. \"\"\" \"\\x1B[92m\"","title":"_color.pony"},{"location":"src/ponytest/_group/","text":"trait tag _Group \"\"\" Test exclusion is achieved by organising tests into groups. Each group can be exclusive, ie only one test is run at a time, or simultaneous, ie all tests are run concurrently. \"\"\" be apply(runner: _TestRunner) \"\"\" Run the given test, or queue it and run later, as appropriate. \"\"\" be _test_complete(runner: _TestRunner) \"\"\" The specified test has completed. \"\"\" actor _ExclusiveGroup is _Group \"\"\" Test group in which we only ever have one test running at a time. \"\"\" embed _tests: Array[_TestRunner] = Array[_TestRunner] var _next: USize = 0 var _in_test:Bool = false be apply(runner: _TestRunner) => if _in_test then // We're already running one test, save this one for later _tests.push(runner) else // Run test now _in_test = true runner.run() end be _test_complete(runner: _TestRunner) => _in_test = false if _next < _tests.size() then // We have queued tests, run the next one try let next_test = _tests(_next)? _next = _next + 1 _in_test = true next_test.run() end end actor _SimultaneousGroup is _Group \"\"\" Test group in which all tests can run concurrently. \"\"\" be apply(runner: _TestRunner) => // Just run the test runner.run() be _test_complete(runner: _TestRunner) => // We don't care about tests finishing None","title":"_group.pony"},{"location":"src/ponytest/pony_test/","text":"\"\"\" # PonyTest package The PonyTest package provides a unit testing framework. It is designed to be as simple as possible to use, both for the unit test writer and the user running the tests. To help simplify test writing and distribution this package depends on as few other packages as possible. Currently the required packages are: * builtin * time * collections Each unit test is a class, with a single test function. By default all tests run concurrently. Each test run is provided with a helper object. This provides logging and assertion functions. By default log messages are only shown for tests that fail. When any assertion function fails the test is counted as a fail. However, tests can also indicate failure by raising an error in the test function. ## Example program To use PonyTest simply write a class for each test and a TestList type that tells the PonyTest object about the tests. Typically the TestList will be Main for the package. The following is a complete program with 2 trivial tests. ```pony use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestAdd) test(_TestSub) class iso _TestAdd is UnitTest fun name():String => \"addition\" fun apply(h: TestHelper) => h.assert_eq[U32](4, 2 + 2) class iso _TestSub is UnitTest fun name():String => \"subtraction\" fun apply(h: TestHelper) => h.assert_eq[U32](2, 4 - 2) ``` The make() constructor is not needed for this example. However, it allows for easy aggregation of tests (see below) so it is recommended that all test Mains provide it. Main.create() is called only for program invocations on the current package. Main.make() is called during aggregation. If so desired extra code can be added to either of these constructors to perform additional tasks. ## Test names Tests are identified by names, which are used when printing test results and on the command line to select which tests to run. These names are independent of the names of the test classes in the Pony source code. Arbitrary strings can be used for these names, but for large projects it is strongly recommended to use a hierarchical naming scheme to make it easier to select groups of tests. You can skip any tests whose names start with a given string by using the `--exclude=[prefix]` command line option. You can run only tests whose names start with a given string by using the `--only=[prefix]` command line option. ## Aggregation Often it is desirable to run a collection of unit tests from multiple different source files. For example, if several packages within a bundle each have their own unit tests it may be useful to run all tests for the bundle together. This can be achieved by writing an aggregate test list class, which calls the list function for each package. The following is an example that aggregates the tests from packages `foo` and `bar`. ```pony use \"ponytest\" use foo = \"foo\" use bar = \"bar\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => foo.Main.make().tests(test) bar.Main.make().tests(test) ``` Aggregate test classes may themselves be aggregated. Every test list class may contain any combination of its own tests and aggregated lists. ## Long tests Simple tests run within a single function. When that function exits, either returning or raising an error, the test is complete. This is not viable for tests that need to use actors. Long tests allow for delayed completion. Any test can call long_test() on its TestHelper to indicate that it needs to keep running. When the test is finally complete it calls complete() on its TestHelper. The complete() function takes a Bool parameter to specify whether the test was a success. If any asserts fail then the test will be considered a failure regardless of the value of this parameter. However, complete() must still be called. Since failing tests may hang, a timeout must be specified for each long test. When the test function exits a timer is started with the specified timeout. If this timer fires before complete() is called the test is marked as a failure and the timeout is reported. On a timeout the timed_out() function is called on the unit test object. This should perform whatever test specific tidy up is required to allow the program to exit. There is no need to call complete() if a timeout occurs, although it is not an error to do so. Note that the timeout is only relevant when a test hangs and would otherwise prevent the test program from completing. Setting a very long timeout on tests that should not be able to hang is perfectly acceptable and will not make the test take any longer if successful. Timeouts should not be used as the standard method of detecting if a test has failed. ## Exclusion groups By default all tests are run concurrently. This may be a problem for some tests, eg if they manipulate an external file or use a system resource. To fix this issue any number of tests may be put into an exclusion group. No tests that are in the same exclusion group will be run concurrently. Exclusion groups are identified by name, arbitrary strings may be used. Multiple exclusion groups may be used and tests in different groups may run concurrently. Tests that do not specify an exclusion group may be run concurrently with any other tests. The command line option \"--sequential\" prevents any tests from running concurrently, regardless of exclusion groups. This is intended for debugging rather than standard use. ## Labels Test can have label. Labels are used to filter which tests are run, by setting command line argument `--label=[some custom label]`. It can be used to separate unit tests from integration tests. By default label is empty. You can set it up by overriding `label(): String` method in unit test. ```pony use \"ponytest\" class iso _I8AddTest is UnitTest fun name(): String => \"_I8AddTest\" fun label(): String => \"simple\" fun apply(h: TestHelper) => h.assert_eq[I8](1, 1) ``` ## Setting up and tearing down a test environment ### Set Up Any kind of fixture or environment necessary for executing a [UnitTest](ponytest-UnitTest.md) can be set up either in the tests constructor or in a function called [set_up()](ponytest-UnitTest.md#set_up). [set_up()](ponytest-UnitTest.md#set_up) is called before the test is executed. It is partial, if it errors, the test is not executed but reported as failing during set up. The test's [TestHelper](ponytest-TestHelper.md) is handed to [set_up()](ponytest-UnitTest.md#set_up) in order to log messages or access the tests [Env](builtin-Env.md) via [TestHelper.env](ponytest-TestHelper.md#let-env-env-val). ### Tear Down Each unit test object may define a [tear_down()](ponytest-UnitTest.md#tear_down) function. This is called after the test has finished to allow tearing down of any complex environment that had to be set up for the test. The [tear_down()](ponytest-UnitTest.md#tear_down) function is called for each test regardless of whether it passed or failed. If a test times out [tear_down()](ponytest-UnitTest.md#tear_down) will be called after timed_out() returns. When a test is in an exclusion group, the [tear_down()](ponytest-UnitTest.md#tear_down) call is considered part of the tests run. The next test in the exclusion group will not start until after [tear_down()](ponytest-UnitTest.md#tear_down) returns on the current test. The test's [TestHelper](ponytest-TestHelper.md) is handed to [tear_down()](ponytest-UnitTest.md#tear_down) and it is permitted to log messages and call assert functions during tear down. ### Example The following example creates a temporary directory in the [set_up()](ponytest-UnitTest.md#set_up) function and removes it in the [tear_down()](ponytest-UnitTest.md#tear_down) function, thus simplifying the test function itself: ```pony use \"ponytest\" use \"files\" class iso TempDirTest var tmp_dir: (FilePath | None) = None fun name(): String => \"temp-dir\" fun ref set_up(h: TestHelper)? => tmp_dir = FilePath.mkdtemp(h.env.root as AmbientAuth, \"temp-dir\")? fun ref tear_down(h: TestHelper) => try (tmp_dir as FilePath).remove() end fun apply(h: TestHelper)? => let dir = tmp_dir as FilePath // do something inside the temporary directory ``` \"\"\" use \"time\" actor PonyTest \"\"\" Main test framework actor that organises tests, collates information and prints results. \"\"\" embed _groups: Array[(String, _Group)] = Array[(String, _Group)] embed _records: Array[_TestRecord] = Array[_TestRecord] let _env: Env let _timers: Timers = Timers var _do_nothing: Bool = false var _verbose: Bool = false var _sequential: Bool = false var _no_prog: Bool = false var _list_only: Bool = false var _started: USize = 0 var _finished: USize = 0 var _any_found: Bool = false var _all_started: Bool = false // Filtering options var _exclude: String = \"\" var _label: String = \"\" var _only: String = \"\" new create(env: Env, list: TestList tag) => \"\"\" Create a PonyTest object and use it to run the tests from the given TestList \"\"\" _env = env _process_opts() _groups.push((\"\", _SimultaneousGroup)) @ponyint_assert_disable_popups[None]() list.tests(this) _all_tests_applied() be apply(test: UnitTest iso) => \"\"\" Run the given test, subject to our filters and options. \"\"\" if _do_nothing then return end var name = test.name() // Ignore any tests that satisfy our \"exclude\" filter if (_exclude != \"\") and name.at(_exclude, 0) then return end // Ignore any tests that don't satisfy our \"only\" filter if (_only != \"\") and (not name.at(_only, 0)) then return end // Ignore tests when label arg is set and test label doesn't match if (_label != \"\") and (_label != test.label()) then return end _any_found = true if _list_only then // Don't actually run tests, just list them _env.out.print(name) return end var index = _records.size() _records.push(_TestRecord(_env, name)) var group = _find_group(test.exclusion_group()) group(_TestRunner(this, index, consume test, group, _verbose, _env, _timers)) fun ref _find_group(group_name: String): _Group => \"\"\" Find the group to use for the given group name, subject to the --sequential flag. \"\"\" var name = group_name if _sequential then // Use the same group for all tests. name = \"all\" end for g in _groups.values() do if g._1 == name then return g._2 end end // Group doesn't exist yet, make it. // We only need one simultaneous group, which we've already made. All new // groups are exclusive. let g = _ExclusiveGroup _groups.push((name, g)) g be _test_started(id: USize) => \"\"\" A test has started running, update status info. The id parameter is the test identifier handed out when we created the test helper. \"\"\" _started = _started + 1 try if not _no_prog then _env.out.print( _started.string() + \" test\" + _plural(_started) + \" started, \" + _finished.string() + \" complete: \" + _records(id)?.name + \" started\") end end be _test_complete(id: USize, pass: Bool, log: Array[String] val) => \"\"\" A test has completed, restore its result and update our status info. The id parameter is the test identifier handed out when we created the test helper. \"\"\" _finished = _finished + 1 try _records(id)?._result(pass, log) if not _no_prog then _env.out.print( _started.string() + \" test\" + _plural(_started) + \" started, \" + _finished.string() + \" complete: \" + _records(id)?.name + \" complete\") end end if _all_started and (_finished == _records.size()) then // All tests have completed _print_report() end be _all_tests_applied() => \"\"\" All our tests have been handed to apply(), setup for finishing \"\"\" if _do_nothing then return end if not _any_found then // No tests left after applying our filters _env.out.print(\"No tests found\") return end if _list_only then // No tests to run return end _all_started = true if _finished == _records.size() then // All tests have completed _print_report() end fun ref _process_opts() => \"\"\" Process our command line options. All command line arguments given must be recognised and make sense. State for specified options is stored in object fields. We don't use the options package because we aren't already dependencies. \"\"\" var exe_name = \"\" for arg in _env.args.values() do if exe_name == \"\" then exe_name = arg continue end if arg == \"--sequential\" then _sequential = true elseif arg == \"--verbose\" then _verbose = true elseif arg == \"--noprog\" then _no_prog = true elseif arg == \"--list\" then _list_only = true elseif arg.compare_sub(\"--exclude=\", 10) is Equal then _exclude = arg.substring(10) elseif arg.compare_sub(\"--label=\", 8) is Equal then _label = arg.substring(8) elseif arg.compare_sub(\"--only=\", 7) is Equal then _only = arg.substring(7) else _env.out.print(\"Unrecognised argument \\\"\" + arg + \"\\\"\") _env.out.print(\"\") _env.out.print(\"Usage:\") _env.out.print(\" \" + exe_name + \" [options]\") _env.out.print(\"\") _env.out.print(\"Options:\") _env.out.print(\" --exclude=prefix - Don't run tests whose names \" + \"start with the given prefix.\") _env.out.print(\" --only=prefix - Only run tests whose names \" + \"start with the given prefix.\") _env.out.print(\" --verbose - Show all test output.\") _env.out.print(\" --sequential - Run tests sequentially.\") _env.out.print(\" --noprog - Do not print progress messages.\") _env.out.print(\" --list - List but do not run tests.\") _env.out.print(\" --label=label - Only run tests with given label\") _do_nothing = true return end end fun _print_report() => \"\"\" The tests are all complete, print out the results. \"\"\" var pass_count: USize = 0 var fail_count: USize = 0 // First we print the result summary for each test, in the order that they // were given to us. for rec in _records.values() do if rec._report(_verbose) then pass_count = pass_count + 1 else fail_count = fail_count + 1 end end // Next we print the pass / fail stats. _env.out.print(\"----\") _env.out.print(\"---- \" + _records.size().string() + \" test\" + _plural(_records.size()) + \" ran.\") _env.out.print(_Color.green() + \"---- Passed: \" + pass_count.string() + _Color.reset()) if fail_count == 0 then // Success, nothing failed. return end // Not everything passed. _env.out.print(_Color.red() + \"**** FAILED: \" + fail_count.string() + \" test\" + _plural(fail_count) + \", listed below:\" + _Color.reset()) // Finally print our list of failed tests. for rec in _records.values() do rec._list_failed() end _env.exitcode(-1) fun _plural(n: USize): String => \"\"\" Return a \"s\" or an empty string depending on whether the given number is 1. For use when printing possibly plural words, eg \"test\" or \"tests\". \"\"\" if n == 1 then \"\" else \"s\" end","title":"pony_test.pony"},{"location":"src/ponytest/test_helper/","text":"interface ITest fun apply() ? class val TestHelper \"\"\" Per unit test class that provides control, logging and assertion functions. Each unit test is given a TestHelper when it is run. This is val and so can be passed between methods and actors within the test without restriction. The assertion functions check the relevant condition and mark the test as a failure if appropriate. The success or failure of the condition is reported back as a Bool which can be checked if a different code path is needed when that condition fails. All assert functions take an optional message argument. This is simply a string that is printed as part of the error message when the condition fails. It is intended to aid identifying what failed. \"\"\" let _runner: _TestRunner let env: Env \"\"\" The process environment. This is useful for getting the [root authority](builtin-AmbientAuth.md) in order to access the filesystem (See [files](files--index.md)) or the network (See [net](net--index.md)) in your tests. \"\"\" new val _create(runner: _TestRunner, env': Env) => \"\"\" Create a new TestHelper. \"\"\" env = env' _runner = runner fun log(msg: String, verbose: Bool = false) => \"\"\" Log the given message. The verbose parameter allows messages to be printed only when the --verbose command line option is used. For example, by default assert failures are logged, but passes are not. With --verbose both passes and fails are reported. Logs are printed one test at a time to avoid interleaving log lines from concurrent tests. \"\"\" _runner.log(msg, verbose) fun fail(msg: String = \"Test failed\") => \"\"\" Flag the test as having failed. \"\"\" _runner.fail(msg) fun assert_true(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given expression is true. \"\"\" if not actual then fail(_format_loc(loc) + \"Assert true failed. \" + msg) return false end log(_format_loc(loc) + \"Assert true passed. \" + msg, true) true fun assert_false(actual: Bool, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given expression is false. \"\"\" if actual then fail(_format_loc(loc) + \"Assert false failed. \" + msg) return false end log(_format_loc(loc) + \"Assert false passed. \" + msg, true) true fun assert_error(test: ITest box, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the given test function throws an error when run. \"\"\" try test()? fail(_format_loc(loc) + \"Assert error failed. \" + msg) false else log(_format_loc(loc) + \"Assert error passed. \" + msg, true) true end fun assert_no_error( test: ITest box, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the gived test function does not throw an error when run. \"\"\" try test()? log(_format_loc(loc) + \"Assert no error passed. \" + msg, true) true else fail(_format_loc(loc) + \"Assert no error failed. \" + msg) true end fun assert_is[A]( expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions resolve to the same instance \"\"\" _check_is[A](\"is\", consume expect, consume actual, msg, loc) fun _check_is[A]( check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions resolve to the same instance \"\"\" if expect isnt actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + (digestof expect).string() + \") is (\" + (digestof actual).string() + \")\") return false end log( _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + (digestof expect).string() + \") is (\" + (digestof actual).string() + \")\", true) true fun assert_eq[A: (Equatable[A] #read & Stringable #read)] (expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool => \"\"\" Assert that the 2 given expressions are equal. \"\"\" _check_eq[A](\"eq\", expect, actual, msg, loc) fun _check_eq[A: (Equatable[A] #read & Stringable)] (check: String, expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions are equal. \"\"\" if expect != actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + expect.string() + \") == (\" + actual.string() + \")\") return false end log(_format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + expect.string() + \") == (\" + actual.string() + \")\", true) true fun assert_isnt[A]( not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the 2 given expressions resolve to different instances. \"\"\" _check_isnt[A](\"isn't\", consume not_expect, consume actual, msg, loc) fun _check_isnt[A]( check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions resolve to different instances. \"\"\" if not_expect is actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + (digestof not_expect).string() + \") isnt (\" + (digestof actual).string() + \")\") return false end log( _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + (digestof not_expect).string() + \") isnt (\" + (digestof actual).string() + \")\", true) true fun assert_ne[A: (Equatable[A] #read & Stringable #read)] (not_expect: A, actual: A, msg: String = \"\", loc: SourceLoc = __loc): Bool => \"\"\" Assert that the 2 given expressions are not equal. \"\"\" _check_ne[A](\"ne\", not_expect, actual, msg, loc) fun _check_ne[A: (Equatable[A] #read & Stringable)] (check: String, not_expect: A, actual: A, msg: String, loc: SourceLoc) : Bool => \"\"\" Check that the 2 given expressions are not equal. \"\"\" if not_expect == actual then fail(_format_loc(loc) + \"Assert \" + check + \" failed. \" + msg + \" Expected (\" + not_expect.string() + \") != (\" + actual.string() + \")\") return false end log( _format_loc(loc) + \"Assert \" + check + \" passed. \" + msg + \" Got (\" + not_expect.string() + \") != (\" + actual.string() + \")\", true) true fun assert_array_eq[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the contents of the 2 given ReadSeqs are equal. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two `Array[U8]`, you should call this method as follows: ```pony fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 2; 3] h.assert_array_eq[U8](a, b) ``` \"\"\" var ok = true if expect.size() != actual.size() then ok = false else try var i: USize = 0 while i < expect.size() do if expect(i)? != actual(i)? then ok = false break end i = i + 1 end else ok = false end end if not ok then fail(_format_loc(loc) + \"Assert EQ failed. \" + msg + \" Expected (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\") return false end log( _format_loc(loc) + \"Assert EQ passed. \" + msg + \" Got (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\", true) true fun assert_array_eq_unordered[A: (Equatable[A] #read & Stringable #read)]( expect: ReadSeq[A], actual: ReadSeq[A], msg: String = \"\", loc: SourceLoc = __loc) : Bool => \"\"\" Assert that the contents of the 2 given ReadSeqs are equal ignoring order. The type parameter of this function is the type parameter of the elements in both ReadSeqs. For instance, when comparing two `Array[U8]`, you should call this method as follows: ```pony fun apply(h: TestHelper) => let a: Array[U8] = [1; 2; 3] let b: Array[U8] = [1; 3; 2] h.assert_array_eq_unordered[U8](a, b) ``` \"\"\" try let missing = Array[box->A] let consumed = Array[Bool].init(false, actual.size()) for e in expect.values() do var found = false var i: USize = -1 for a in actual.values() do i = i + 1 if consumed(i)? then continue end if e == a then consumed.update(i, true)? found = true break end end if not found then missing.push(e) end end let extra = Array[box->A] for (i, c) in consumed.pairs() do if not c then extra.push(actual(i)?) end end if (extra.size() != 0) or (missing.size() != 0) then fail( _format_loc(loc) + \"Assert EQ_UNORDERED failed. \" + msg + \" Expected (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \"):\" + \"\\nMissing: \" + _print_array[box->A](missing) + \"\\nExtra: \" + _print_array[box->A](extra)) return false end log( _format_loc(loc) + \"Assert EQ_UNORDERED passed. \" + msg + \" Got (\" + _print_array[A](expect) + \") == (\" + _print_array[A](actual) + \")\", true) true else fail(\"Assert EQ_UNORDERED failed from an internal error.\") false end fun _format_loc(loc: SourceLoc): String => loc.file() + \":\" + loc.line().string() + \": \" fun _print_array[A: Stringable #read](array: ReadSeq[A]): String => \"\"\" Generate a printable string of the contents of the given readseq to use in error messages. The type parameter of this function is the type parameter of the elements in the ReadSeq. \"\"\" \"[len=\" + array.size().string() + \": \" + \", \".join(array.values()) + \"]\" fun long_test(timeout: U64) => \"\"\" Indicate that this is a long running test that may continue after the test function exits. Once this function is called, complete() must be called to finish the test, unless a timeout occurs. The timeout is specified in nanseconds. \"\"\" _runner.long_test(timeout) fun complete(success: Bool) => \"\"\" MUST be called by each long test to indicate the test has finished, unless a timeout occurs. The \"success\" parameter specifies whether the test succeeded. However if any asserts fail the test will be considered a failure, regardless of the value of this parameter. Once this is called tear_down() may be called at any time. \"\"\" _runner.complete(success) fun expect_action(name: String) => \"\"\" Can be called in a long test to set up expectations for one or more actions that, when all completed, will complete the test. This pattern is useful for cases where you have multiple things that need to happen to complete your test, but don't want to have to collect them all yourself into a single actor that calls the complete method. The order of calls to expect_action don't matter - the actions may be completed in any other order to complete the test. \"\"\" _runner.expect_action(name) fun complete_action(name: String) => \"\"\" MUST be called for each action expectation that was set up in a long test to fulfill the expectations. Any expectations that are still outstanding when the long test timeout runs out will be printed by name when it fails. Completing all outstanding actions is enough to finish the test. There's no need to also call the complete method when the actions are finished. Calling the complete method will finish the test immediately, without waiting for any outstanding actions to be completed. \"\"\" _runner.complete_action(name, true) fun fail_action(name: String) => \"\"\" Call to fail an action, which will also cause the entire test to fail immediately, without waiting the rest of the outstanding actions. The name of the failed action will be included in the failure output. Usually the action name should be an expected action set up by a call to expect_action, but failing unexpected actions will also fail the test. \"\"\" _runner.complete_action(name, false) fun dispose_when_done(disposable: DisposableActor) => \"\"\" Pass a disposable actor to be disposed of when the test is complete. The actor will be disposed no matter whether the test succeeds or fails. If the test is already tearing down, the actor will be disposed immediately. \"\"\" _runner.dispose_when_done(disposable)","title":"test_helper.pony"},{"location":"src/ponytest/test_list/","text":"trait TestList \"\"\" Source of unit tests for a PonyTest object. See package doc string for further information and example use. \"\"\" fun tag tests(test: PonyTest) \"\"\" Add all the tests in this suite to the given test object. Typically the implementation of this function will be of the form: ```pony fun tests(test: PonyTest) => test(_TestClass1) test(_TestClass2) test(_TestClass3) ``` \"\"\"","title":"test_list.pony"},{"location":"src/ponytest/unit_test/","text":"trait UnitTest \"\"\" Each unit test class must provide this trait. Simple tests only need to define the name() and apply() functions. The remaining functions specify additional test options. \"\"\" fun name(): String \"\"\" Report the test name, which is used when printing test results and on the command line to select tests to run. \"\"\" fun exclusion_group(): String => \"\"\" Report the test exclusion group, returning an empty string for none. The default body returns an empty string. \"\"\" \"\" fun ref apply(h: TestHelper) ? \"\"\" Run the test. Raising an error is interpreted as a test failure. \"\"\" fun ref timed_out(h: TestHelper) => \"\"\" Tear down a possibly hanging test. Called when the timeout specified by to long_test() expires. There is no need for this function to call complete(false). tear_down() will still be called after this completes. The default is to do nothing. \"\"\" None fun ref set_up(h: TestHelper) ? => \"\"\" Set up the testing environment before a test method is called. Default is to do nothing. \"\"\" None fun ref tear_down(h: TestHelper) => \"\"\" Tidy up after the test has completed. Called for each run test, whether that test passed, succeeded or timed out. The default is to do nothing. \"\"\" None fun label(): String => \"\"\" Report the test label, returning an empty string for none. It can be later use to filter tests which we want to run, by labels. \"\"\" \"\"","title":"unit_test.pony"},{"location":"src/process/_pipe/","text":"use @pony_asio_event_create[AsioEventID](owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) primitive _FSETFL fun apply(): I32 => 4 primitive _FGETFL fun apply(): I32 => 3 primitive _FSETFD fun apply(): I32 => 2 primitive _FGETFD fun apply(): I32 => 1 primitive _FDCLOEXEC fun apply(): I32 => 1 // Non-blocking IO file status flag primitive _ONONBLOCK fun apply(): I32 => ifdef bsd or osx then 4 elseif linux then 2048 else compile_error \"no O_NONBLOCK\" end // The pipe has been ended. primitive _ERRORBROKENPIPE fun apply(): I32 => ifdef windows then 109 else compile_error \"no ERROR_BROKEN_PIPE\" end // The pipe is being closed. primitive _ERRORNODATA fun apply(): I32 => ifdef windows then 232 else compile_error \"no ERROR_NO_DATA\" end class _Pipe \"\"\" A pipe is a unidirectional data channel that can be used for interprocess communication. Outgoing pipes are written to by this process, incoming pipes are read from by this process. \"\"\" let _outgoing: Bool var near_fd: U32 = -1 var far_fd: U32 = -1 var event: AsioEventID = AsioEvent.none() new none() => \"\"\" Creates a nil pipe for use as a placeholder. \"\"\" _outgoing = true new outgoing() ? => \"\"\" Creates an outgoing pipe. \"\"\" _outgoing = true _create()? new incoming() ? => \"\"\" Creates an incoming pipe. \"\"\" _outgoing = false _create()? fun ref _create() ? => \"\"\" Do the actual system object creation for the pipe. \"\"\" ifdef posix then var fds = (U32(0), U32(0)) if @pipe[I32](addressof fds) < 0 then error end if _outgoing then near_fd = fds._2 far_fd = fds._1 else near_fd = fds._1 far_fd = fds._2 end // We need to set the flag on the two file descriptors here to prevent // capturing by another thread. _set_fd(near_fd, _FDCLOEXEC())? _set_fd(far_fd, _FDCLOEXEC())? _set_fl(near_fd, _ONONBLOCK())? // and non-blocking on parent side of pipe elseif windows then near_fd = 0 far_fd = 0 // create the pipe and set one handle to not inherit. That needs // to be done with the knowledge of which way this pipe goes. if @ponyint_win_pipe_create[U32](addressof near_fd, addressof far_fd, _outgoing) == 0 then error end else compile_error \"unsupported platform\" end fun _set_fd(fd: U32, flags: I32) ? => let result = @fcntl[I32](fd, _FSETFD(), flags) if result < 0 then error end fun _set_fl(fd: U32, flags: I32) ? => let result = @fcntl[I32](fd, _FSETFL(), flags) if result < 0 then error end fun ref begin(owner: AsioEventNotify) => \"\"\" Prepare the pipe for read or write, and listening, after the far end has been handed to the other process. \"\"\" ifdef posix then let flags = if _outgoing then AsioEvent.write() else AsioEvent.read() end event = @pony_asio_event_create(owner, near_fd, flags, 0, true) end close_far() fun ref close_far() => \"\"\" Close the far end of the pipe--the end that the other process will be using. This is used to cleanup this process' handles that it wont use. \"\"\" if far_fd != -1 then @close[I32](far_fd) far_fd = -1 end fun ref read(read_buf: Array[U8] iso, offset: USize): (Array[U8] iso^, ISize, I32) => ifdef posix then let len = @read[ISize](near_fd, read_buf.cpointer().usize() + offset, read_buf.size() - offset) if len == -1 then // OS signals write error (consume read_buf, len, @pony_os_errno()) else (consume read_buf, len, 0) end else // windows let hnd: USize = @_get_osfhandle[USize](near_fd) var bytes_to_read: U32 = (read_buf.size() - offset).u32() // Peek ahead to see if there is anything to read, return if not var bytes_avail: U32 = 0 let okp = @PeekNamedPipe[Bool](hnd, USize(0), bytes_to_read, USize(0), addressof bytes_avail, USize(0)) let winerrp = @GetLastError[I32]() if not okp then if (winerrp == _ERRORBROKENPIPE()) or (winerrp == _ERRORNODATA()) then return (consume read_buf, 0, 0) // Pipe is done & ready to close. else // Some other error, map to invalid arg return (consume read_buf, -1, _EINVAL()) end elseif bytes_avail == 0 then // Peeked ok, but nothing to read. Return and try again later. return (consume read_buf, -1, _EAGAIN()) end if bytes_to_read > bytes_avail then bytes_to_read = bytes_avail end // Read up to the bytes available var bytes_read: U32 = 0 let ok = @ReadFile[Bool](hnd, read_buf.cpointer().usize() + offset, bytes_to_read, addressof bytes_read, USize(0)) let winerr = @GetLastError[I32]() if not ok then if (winerr == _ERRORBROKENPIPE()) or (winerr == _ERRORNODATA()) then (consume read_buf, 0, 0) // Pipe is done & ready to close. else (consume read_buf, -1, _EINVAL()) // Some other error, map to invalid arg end else // We know bytes_to_read is > 0, and can assume bytes_read is as well (consume read_buf, bytes_read.isize(), 0) // buffer back, bytes read, no error end end fun ref write(data: ByteSeq box, offset: USize): (ISize, I32) => ifdef posix then let len = @write[ISize]( near_fd, data.cpointer().usize() + offset, data.size() - offset) if len == -1 then // OS signals write error (len, @pony_os_errno()) else (len, 0) end else // windows let hnd: USize = @_get_osfhandle[USize](near_fd) let bytes_to_write: U32 = (data.size() - offset).u32() var bytes_written: U32 = 0 let ok = @WriteFile[Bool](hnd, data.cpointer().usize() + offset, bytes_to_write, addressof bytes_written, USize(0)) let winerr = @GetLastError[I32]() if not ok then if (winerr == _ERRORBROKENPIPE()) or (winerr == _ERRORNODATA()) then (0, 0) // Pipe is done & ready to close. else (-1, _EINVAL()) // Some other error, map to invalid arg end elseif bytes_written == 0 then (-1, _EAGAIN()) else (bytes_written.isize(), 0) end end fun ref is_closed(): Bool => near_fd == -1 fun ref close_near() => \"\"\" Close the near end of the pipe--the end that this process is using directly. Also handle unsubscribing the asio event (if there was one). File descriptors should always be closed _after_ unsubscribing its event, otherwise there is the possibility of reusing the file descriptor in another thread and then unsubscribing the reused file descriptor here! Unsubscribing and closing the file descriptor should be treated as one operation. \"\"\" if near_fd != -1 then if event isnt AsioEvent.none() then @pony_asio_event_unsubscribe(event) end @close[I32](near_fd) near_fd = -1 end fun ref close() => close_far() close_near() fun ref dispose() => @pony_asio_event_destroy(event) event = AsioEvent.none()","title":"_pipe.pony"},{"location":"src/process/_process/","text":"use \"signals\" use @pony_os_errno[I32]() primitive _STDINFILENO fun apply(): U32 => 0 primitive _STDOUTFILENO fun apply(): U32 => 1 primitive _STDERRFILENO fun apply(): U32 => 2 // Operation not permitted primitive _EPERM fun apply(): I32 => 1 // No such process primitive _ESRCH fun apply(): I32 => 3 // Interrupted function primitive _EINTR fun apply(): I32 => 4 // Try again primitive _EAGAIN fun apply(): I32 => ifdef bsd or osx then 35 elseif linux then 11 elseif windows then 22 else compile_error \"no EAGAIN\" end // Invalid argument primitive _EINVAL fun apply(): I32 => 22 interface _Process fun kill() fun ref wait(): I32 class _ProcessNone is _Process fun kill() => None fun ref wait(): I32 => 0 class _ProcessPosix is _Process let pid: I32 new create( path: String, args: Array[String] val, vars: Array[String] val, stdin: _Pipe, stdout: _Pipe, stderr: _Pipe) ? => // Prepare argp and envp ahead of fork() as it's not safe to allocate in // the child after fork() is called. let argp = _make_argv(args) let envp = _make_argv(vars) // Fork the child process, handling errors and the child fork case. pid = @fork[I32]() match pid | -1 => error | 0 => _child_fork(path, argp, envp, stdin, stdout, stderr) end fun tag _make_argv(args: Array[String] box): Array[Pointer[U8] tag] => \"\"\" Convert an array of String parameters into an array of C pointers to same strings. \"\"\" let argv = Array[Pointer[U8] tag](args.size() + 1) for s in args.values() do argv.push(s.cstring()) end argv.push(Pointer[U8]) // nullpointer to terminate list of args argv fun _child_fork( path: String, argp: Array[Pointer[U8] tag], envp: Array[Pointer[U8] tag], stdin: _Pipe, stdout: _Pipe, stderr: _Pipe) => \"\"\" We are now in the child process. We redirect STDIN, STDOUT and STDERR to their pipes and execute the command. The command is executed via execve which does not return on success, and the text, data, bss, and stack of the calling process are overwritten by that of the program loaded. We've set the FD_CLOEXEC flag on all file descriptors to ensure that they are all closed automatically once @execve gets called. \"\"\" _dup2(stdin.far_fd, _STDINFILENO()) // redirect stdin _dup2(stdout.far_fd, _STDOUTFILENO()) // redirect stdout _dup2(stderr.far_fd, _STDERRFILENO()) // redirect stderr if 0 > @execve[I32](path.cstring(), argp.cpointer(), envp.cpointer()) then @_exit[None](I32(-1)) end fun tag _dup2(oldfd: U32, newfd: U32) => \"\"\" Creates a copy of the file descriptor oldfd using the file descriptor number specified in newfd. If the file descriptor newfd was previously open, it is silently closed before being reused. If dup2() fails because of EINTR we retry. \"\"\" while (@dup2[I32](oldfd, newfd) < 0) do if @pony_os_errno() == _EINTR() then continue else @_exit[None](I32(-1)) end end fun kill() => \"\"\" Terminate the process, first trying SIGTERM and if that fails, try SIGKILL. \"\"\" if pid > 0 then // Try a graceful termination if @kill[I32](pid, Sig.term()) < 0 then match @pony_os_errno() | _EINVAL() => None // Invalid argument, shouldn't happen but // tryinng SIGKILL isn't likely to help. | _ESRCH() => None // No such process, child has terminated else // Couldn't SIGTERM, as a last resort SIGKILL @kill[I32](pid, Sig.kill()) end end end fun ref wait(): I32 => if pid > 0 then var wstatus: I32 = 0 let options: I32 = 0 if @waitpid[I32](pid, addressof wstatus, options) < 0 then -1 else // Extract the process exit code. (wstatus >> 8) and 0xff end else -1 end class _ProcessWindows is _Process let hProcess: USize new create( path: String, args: Array[String] val, vars: Array[String] val, stdin: _Pipe, stdout: _Pipe, stderr: _Pipe) => ifdef windows then hProcess = @ponyint_win_process_create[USize]( path.cstring(), _make_cmdline(args).cstring(), _make_environ(vars).cpointer(), stdin.far_fd, stdout.far_fd, stderr.far_fd) else compile_error \"unsupported platform\" end fun tag _make_cmdline(args: Array[String] val): String => var cmdline: String = \"\" for arg in args.values() do cmdline = cmdline + arg + \" \" end cmdline fun tag _make_environ(vars: Array[String] val): Array[U8] => var size: USize = 0 for varr in vars.values() do size = size + varr.size() + 1 // name=value\\0 end size = size + 1 // last \\0 var environ = Array[U8](size) for varr in vars.values() do environ.append(varr) environ.push(0) end environ.push(0) environ fun kill() => if hProcess != 0 then @ponyint_win_process_kill[I32](hProcess) end fun ref wait(): I32 => if hProcess != 0 then @ponyint_win_process_wait[I32](hProcess) else -1 end","title":"_process.pony"},{"location":"src/process/_test/","text":"use \"ponytest\" use \"backpressure\" use \"capsicum\" use \"collections\" use \"files\" use \"itertools\" use \"time\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => test(_TestFileExecCapabilityIsRequired) test(_TestNonExecutablePathResultsInExecveError) test(_TestStdinStdout) test(_TestStderr) test(_TestExpect) test(_TestWritevOrdering) test(_TestPrintvOrdering) test(_TestStdinWriteBuf) primitive CatPath fun apply(): String => ifdef windows then \"C:\\\\Windows\\\\System32\\\\find.exe\" else \"/bin/cat\" end primitive CatArgs fun apply(): Array[String] val => ifdef windows then [\"find\"; \"/v\"; \"\\\"\\\"\"] else [\"cat\"] end primitive EchoPath fun apply(): String => ifdef windows then \"C:\\\\Windows\\\\System32\\\\cmd.exe\" // Have to use \"cmd /c echo ...\" else \"/bin/echo\" end class iso _TestFileExecCapabilityIsRequired is UnitTest fun name(): String => \"process/TestFileExecCapabilityIsRequired\" fun exclusion_group(): String => \"process-monitor\" fun apply(h: TestHelper) => let notifier: ProcessNotify iso = _ProcessClient(0, \"\", 1, h) try let path = FilePath(h.env.root as AmbientAuth, CatPath(), recover val FileCaps .> all() .> unset(FileExec) end)? let args: Array[String] val = [\"dontcare\"] let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] let auth = h.env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) h.dispose_when_done(pm) h.long_test(30_000_000_000) else h.fail(\"Could not create FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) class iso _TestNonExecutablePathResultsInExecveError is UnitTest fun name(): String => \"process/_TestNonExecutablePathResultsInExecveError\" fun exclusion_group(): String => \"process-monitor\" fun apply(h: TestHelper) => try let auth = h.env.root as AmbientAuth let path = FilePath.mkdtemp(auth, \"pony_execve_test\")? let args: Array[String] val = [] let vars: Array[String] val = [] let notifier = _setup_notifier(h, path) let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) h.dispose_when_done(pm) h.long_test(30_000_000_000) else h.fail(\"Could not create temporary FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) fun _setup_notifier(h: TestHelper, path: FilePath): ProcessNotify iso^ => recover object is ProcessNotify let _h: TestHelper = h let _path: FilePath = path fun ref failed(process: ProcessMonitor ref, err: ProcessError) => match err | ExecveError => _h.complete(true) else _h.fail(\"Unexpected process error\") _h.complete(false) end _cleanup() fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => _h.fail(\"Dispose shouldn't have been called.\") _h.complete(false) _cleanup() fun _cleanup() => _path.remove() end end class iso _TestStdinStdout is UnitTest fun name(): String => \"process/STDIN-STDOUT\" fun exclusion_group(): String => \"process-monitor\" fun apply(h: TestHelper) => let input = \"one, two, three\" let size: USize = input.size() + ifdef windows then 2 else 0 end let notifier: ProcessNotify iso = _ProcessClient(size, \"\", 0, h) try let path = FilePath(h.env.root as AmbientAuth, CatPath())? let args: Array[String] val = CatArgs() let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] let auth = h.env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) pm.write(input) pm.done_writing() // closing stdin allows \"cat\" to terminate h.dispose_when_done(pm) h.long_test(30_000_000_000) else h.fail(\"Could not create FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) class iso _TestStderr is UnitTest var _pm: (ProcessMonitor | None) = None fun name(): String => \"process/STDERR\" fun exclusion_group(): String => \"process-monitor\" fun ref apply(h: TestHelper) => let errmsg = ifdef windows then \"FIND: Invalid switch\\r\\n\" else \"cat: file_does_not_exist: No such file or directory\\n\" end let exit_code: I32 = ifdef windows then 2 else 1 end let notifier: ProcessNotify iso = _ProcessClient(0, errmsg, exit_code, h) try let path = FilePath(h.env.root as AmbientAuth, CatPath())? let args: Array[String] val = ifdef windows then [\"find\"; \"/q\"] else [\"cat\"; \"file_does_not_exist\"] end let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] let auth = h.env.root as AmbientAuth _pm = ProcessMonitor(auth, auth, consume notifier, path, args, vars) if _pm isnt None then // write to STDIN of the child process let pm = _pm as ProcessMonitor pm.done_writing() // closing stdin h.dispose_when_done(pm) end h.long_test(30_000_000_000) else h.fail(\"Could not create FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) class iso _TestExpect is UnitTest fun name(): String => \"process/Expect\" fun exclusion_group(): String => \"process-monitor\" fun apply(h: TestHelper) => let notifier = recover object is ProcessNotify let _h: TestHelper = h var _expect: USize = 0 let _out: Array[String] = Array[String] fun ref created(process: ProcessMonitor ref) => process.expect(2) fun ref expect(process: ProcessMonitor ref, qty: USize): USize => _expect = qty _expect fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) => _h.assert_eq[USize](_expect, data.size()) process.expect(if _expect == 2 then 4 else 2 end) _out.push(String.from_array(consume data)) fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => _h.assert_eq[I32](child_exit_code, 0) let expected: Array[String] val = ifdef windows then [\"he\"; \"llo \"; \"ca\"; \"rl \\r\"] else [\"he\"; \"llo \"; \"th\"; \"ere!\"] end _h.assert_array_eq[String](_out, expected) _h.complete(true) end end try let path = FilePath(h.env.root as AmbientAuth, EchoPath())? let args: Array[String] val = ifdef windows then [\"cmd\"; \"/c\"; \"echo\"; \"hello carl\"] else [\"echo\"; \"hello there!\"] end let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] let auth = h.env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) pm.done_writing() // closing stdin allows \"echo\" to terminate h.dispose_when_done(pm) h.long_test(30_000_000_000) else h.fail(\"Could not create FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) class iso _TestWritevOrdering is UnitTest fun name(): String => \"process/WritevOrdering\" fun exclusion_group(): String => \"process-monitor\" fun apply(h: TestHelper) => let expected: USize = ifdef windows then 13 else 11 end let notifier: ProcessNotify iso = _ProcessClient(expected, \"\", 0, h) try let path = FilePath(h.env.root as AmbientAuth, CatPath())? let args: Array[String] val = CatArgs() let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] let auth = h.env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) let params: Array[String] val = [\"one\"; \"two\"; \"three\"] pm.writev(params) pm.done_writing() // closing stdin allows \"cat\" to terminate h.dispose_when_done(pm) h.long_test(30_000_000_000) else h.fail(\"Could not create FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) class iso _TestPrintvOrdering is UnitTest fun name(): String => \"process/PrintvOrdering\" fun exclusion_group(): String => \"process-monitor\" fun apply(h: TestHelper) => let expected: USize = ifdef windows then 17 else 14 end let notifier: ProcessNotify iso = _ProcessClient(expected, \"\", 0, h) try let path = FilePath(h.env.root as AmbientAuth, CatPath())? let args: Array[String] val = CatArgs() let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] let auth = h.env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) let params: Array[String] val = [\"one\"; \"two\"; \"three\"] pm.printv(params) pm.done_writing() // closing stdin allows \"cat\" to terminate h.dispose_when_done(pm) h.long_test(30_000_000_000) else h.fail(\"Could not create FilePath!\") end fun timed_out(h: TestHelper) => h.complete(false) class iso _TestStdinWriteBuf is UnitTest var _pm: (ProcessMonitor | None) = None let _test_start: U64 = Time.nanos() fun name(): String => \"process/STDIN-WriteBuf\" fun exclusion_group(): String => \"process-monitor\" fun ref apply(h: TestHelper) => let pipe_cap: USize = 65536 let notifier: ProcessNotify iso = _ProcessClient((pipe_cap + 1) * 2, \"\", 0, h) try let path = FilePath(h.env.root as AmbientAuth, CatPath())? let args: Array[String] val = CatArgs() let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] // fork the child process and attach a ProcessMonitor let auth = h.env.root as AmbientAuth _pm = ProcessMonitor(auth, auth, consume notifier, path, args, vars) // create a message larger than pipe_cap bytes let message: Array[U8] val = recover Array[U8].>undefined(pipe_cap + 1) end if _pm isnt None then // write to STDIN of the child process let pm = _pm as ProcessMonitor pm.write(message) pm.write(message) pm.done_writing() // closing stdin allows \"cat\" to terminate h.dispose_when_done(pm) end h.long_test(30_000_000_000) else h.fail(\"Error running STDIN-WriteBuf test\") end fun timed_out(h: TestHelper) => h.log(\"_TestStdinWriteBuf.timed_out: ran for \" + (Time.nanos() - _test_start).string() + \" ns\") try if _pm isnt None then // kill the child process and cleanup fd h.log(\"_TestStdinWriteBuf.timed_out: calling pm.dispose()\") (_pm as ProcessMonitor).dispose() end else h.fail(\"Error disposing of forked process in STDIN-WriteBuf test\") end h.complete(false) class _ProcessClient is ProcessNotify \"\"\" Notifications for Process connections. \"\"\" let _out: USize let _err: String let _exit_code: I32 let _h: TestHelper var _d_stdout_chars: USize = 0 let _d_stderr: String ref = String let _created: U64 var _first_data: U64 = 0 new iso create( out: USize, err: String, exit_code: I32, h: TestHelper) => _out = out _err = err _exit_code = exit_code _h = h _created = Time.nanos() fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) => \"\"\" Called when new data is received on STDOUT of the forked process \"\"\" _h.log(\"\\tReceived from stdout: \" + data.size().string() + \" bytes\") if (_first_data == 0) then _first_data = Time.nanos() end _d_stdout_chars = _d_stdout_chars + data.size() _h.log(\"\\tReceived so far: \" + _d_stdout_chars.string() + \" bytes\") _h.log(\"\\tExpecting: \" + _out.string() + \" bytes\") if _out == _d_stdout_chars then // we've received our total data _h.complete(true) end fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) => \"\"\" Called when new data is received on STDERR of the forked process \"\"\" _h.log(\"\\tReceived from stderr: \" + data.size().string() + \" bytes\") _d_stderr.append(consume data) fun ref failed(process: ProcessMonitor ref, err: ProcessError) => \"\"\" ProcessMonitor calls this if we run into errors with the forked process. \"\"\" match err | ExecveError => _h.fail(\"ProcessError: ExecveError\") | PipeError => _h.fail(\"ProcessError: PipeError\") | ForkError => _h.fail(\"ProcessError: ForkError\") | WaitpidError => _h.fail(\"ProcessError: WaitpidError\") | WriteError => _h.fail(\"ProcessError: WriteError\") | KillError => _h.fail(\"ProcessError: KillError\") | Unsupported => _h.fail(\"ProcessError: Unsupported\") | CapError => _h.complete(true) // used in _TestFileExec end fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => \"\"\" Called when ProcessMonitor terminates to cleanup ProcessNotify We receive the exit code of the child process from ProcessMonitor. \"\"\" let last_data: U64 = Time.nanos() _h.log(\"dispose: child exit code: \" + child_exit_code.string()) _h.log(\"dispose: stdout: \" + _d_stdout_chars.string() + \" bytes\") _h.log(\"dispose: stderr: '\" + _d_stderr + \"'\") if (_first_data > 0) then _h.log(\"dispose: received first data after: \\t\" + (_first_data - _created).string() + \" ns\") end _h.log(\"dispose: total data process_time: \\t\" + (last_data - _first_data).string() + \" ns\") _h.log(\"dispose: ProcessNotify lifetime: \\t\" + (last_data - _created).string() + \" ns\") _h.assert_eq[USize](_out, _d_stdout_chars) _h.assert_eq[USize](_err.size(), _d_stderr.size()) _h.assert_eq[String box](_err, _d_stderr) _h.assert_eq[I32](_exit_code, child_exit_code) _h.complete(true)","title":"_test.pony"},{"location":"src/process/auth/","text":"primitive StartProcessAuth new create(from: AmbientAuth) => None","title":"auth.pony"},{"location":"src/process/process_monitor/","text":"\"\"\" # Process package The Process package provides support for handling Unix style processes. For each external process that you want to handle, you need to create a `ProcessMonitor` and a corresponding `ProcessNotify` object. Each ProcessMonitor runs as it own actor and upon receiving data will call its corresponding `ProcessNotify`'s method. ## Example program The following program will spawn an external program and write to it's STDIN. Output received on STDOUT of the child process is forwarded to the ProcessNotify client and printed. ```pony use \"process\" use \"files\" actor Main new create(env: Env) => // create a notifier let client = ProcessClient(env) let notifier: ProcessNotify iso = consume client // define the binary to run try let path = FilePath(env.root as AmbientAuth, \"/bin/cat\")? // define the arguments; first arg is always the binary name let args: Array[String] val = [\"cat\"] // define the environment variable for the execution let vars: Array[String] val = [\"HOME=/\"; \"PATH=/bin\"] // create a ProcessMonitor and spawn the child process let auth = env.root as AmbientAuth let pm: ProcessMonitor = ProcessMonitor(auth, auth, consume notifier, path, args, vars) // write to STDIN of the child process pm.write(\"one, two, three\") pm.done_writing() // closing stdin allows cat to terminate else env.out.print(\"Could not create FilePath!\") end // define a client that implements the ProcessNotify interface class ProcessClient is ProcessNotify let _env: Env new iso create(env: Env) => _env = env fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) => let out = String.from_array(consume data) _env.out.print(\"STDOUT: \" + out) fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) => let err = String.from_array(consume data) _env.out.print(\"STDERR: \" + err) fun ref failed(process: ProcessMonitor ref, err: ProcessError) => match err | ExecveError => _env.out.print(\"ProcessError: ExecveError\") | PipeError => _env.out.print(\"ProcessError: PipeError\") | ForkError => _env.out.print(\"ProcessError: ForkError\") | WaitpidError => _env.out.print(\"ProcessError: WaitpidError\") | WriteError => _env.out.print(\"ProcessError: WriteError\") | KillError => _env.out.print(\"ProcessError: KillError\") | CapError => _env.out.print(\"ProcessError: CapError\") | Unsupported => _env.out.print(\"ProcessError: Unsupported\") else _env.out.print(\"Unknown ProcessError!\") end fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => let code: I32 = consume child_exit_code _env.out.print(\"Child exit code: \" + code.string()) ``` ## Process portability The ProcessMonitor supports spawning processes on Linux, FreeBSD and OSX. Processes are not supported on Windows and attempting to use them will cause a runtime error. ## Shutting down ProcessMonitor and external process Document waitpid behaviour (stops world) \"\"\" use \"backpressure\" use \"collections\" use \"files\" use \"time\" primitive ExecveError primitive PipeError primitive ForkError primitive WaitpidError primitive WriteError primitive KillError // Not thrown at this time primitive Unsupported // we throw this on non POSIX systems primitive CapError type ProcessError is ( ExecveError | ForkError | KillError | PipeError | Unsupported | WaitpidError | WriteError | CapError ) type ProcessMonitorAuth is (AmbientAuth | StartProcessAuth) actor ProcessMonitor \"\"\" Fork+execs / creates a child process and monitors it. Notifies a client about STDOUT / STDERR events. \"\"\" let _notifier: ProcessNotify let _backpressure_auth: BackpressureAuth var _stdin: _Pipe = _Pipe.none() var _stdout: _Pipe = _Pipe.none() var _stderr: _Pipe = _Pipe.none() var _child: _Process = _ProcessNone let _max_size: USize = 4096 var _read_buf: Array[U8] iso = recover Array[U8] .> undefined(_max_size) end var _read_len: USize = 0 var _expect: USize = 0 embed _pending: List[(ByteSeq, USize)] = _pending.create() var _done_writing: Bool = false var _closed: Bool = false var _timers: (Timers tag | None) = None // For windows only new create( auth: ProcessMonitorAuth, backpressure_auth: BackpressureAuth, notifier: ProcessNotify iso, filepath: FilePath, args: Array[String] val, vars: Array[String] val) => \"\"\" Create infrastructure to communicate with a forked child process and register the asio events. Fork child process and notify our user about incoming data via the notifier. \"\"\" _backpressure_auth = backpressure_auth _notifier = consume notifier // We need permission to execute and the // file itself needs to be an executable if not filepath.caps(FileExec) then _notifier.failed(this, CapError) return end let ok = try FileInfo(filepath)?.file else false end if not ok then // unable to stat the file path given so it may not exist // or may be a directory. _notifier.failed(this, ExecveError) return end try _stdin = _Pipe.outgoing()? _stdout = _Pipe.incoming()? _stderr = _Pipe.incoming()? else _stdin.close() _stdout.close() _stderr.close() _notifier.failed(this, PipeError) return end try ifdef posix then _child = _ProcessPosix.create( filepath.path, args, vars, _stdin, _stdout, _stderr)? elseif windows then _child = _ProcessWindows.create( filepath.path, args, vars, _stdin, _stdout, _stderr) else compile_error \"unsupported platform\" end _stdin.begin(this) _stdout.begin(this) _stderr.begin(this) // Asio is not wired up for Windows, so use a timer for now. ifdef windows then let timers = Timers let pm: ProcessMonitor tag = this let tn = object iso is TimerNotify fun ref apply(timer: Timer, count: U64): Bool => pm.timer_notify() true end let timer = Timer(consume tn, 50_000_000, 10_000_000) timers(consume timer) _timers = timers end else _notifier.failed(this, ForkError) return end _notifier.created(this) be print(data: ByteSeq) => \"\"\" Print some bytes and append a newline. \"\"\" if not _done_writing then _write_final(data) _write_final(\"\\n\") end be write(data: ByteSeq) => \"\"\" Write to STDIN of the child process. \"\"\" if not _done_writing then _write_final(data) end be printv(data: ByteSeqIter) => \"\"\" Print an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _write_final(bytes) _write_final(\"\\n\") end be writev(data: ByteSeqIter) => \"\"\" Write an iterable collection of ByteSeqs. \"\"\" for bytes in data.values() do _write_final(bytes) end be done_writing() => \"\"\" Set the _done_writing flag to true. If _pending is empty we can close the _stdin pipe. \"\"\" _done_writing = true Backpressure.release(_backpressure_auth) if _pending.size() == 0 then _stdin.close_near() end be dispose() => \"\"\" Terminate child and close down everything. \"\"\" Backpressure.release(_backpressure_auth) _child.kill() _close() fun ref expect(qty: USize = 0) => \"\"\" A `stdout` call on the notifier must contain exactly `qty` bytes. If `qty` is zero, the call can contain any amount of data. \"\"\" _expect = _notifier.expect(this, qty) _read_buf_size() be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" Handle the incoming Asio event from one of the pipes. \"\"\" match event | _stdin.event => if AsioEvent.writeable(flags) then _pending_writes() elseif AsioEvent.disposable(flags) then _stdin.dispose() end | _stdout.event => if AsioEvent.readable(flags) then _pending_reads(_stdout) elseif AsioEvent.disposable(flags) then _stdout.dispose() end | _stderr.event => if AsioEvent.readable(flags) then _pending_reads(_stderr) elseif AsioEvent.disposable(flags) then _stderr.dispose() end end _try_shutdown() be timer_notify() => \"\"\" Windows IO polling timer has fired \"\"\" _pending_writes() // try writes _pending_reads(_stdout) _pending_reads(_stderr) _try_shutdown() fun ref _close() => \"\"\" Close all pipes and wait for the child process to exit. \"\"\" if not _closed then _closed = true _stdin.close() _stdout.close() _stderr.close() let exit_code = _child.wait() if exit_code < 0 then // An error waiting for pid _notifier.failed(this, WaitpidError) else // process child exit code _notifier.dispose(this, exit_code) end match _timers | let t: Timers => t.dispose() end end fun ref _try_shutdown() => \"\"\" If neither stdout nor stderr are open we close down and exit. \"\"\" if _stdin.is_closed() and _stdout.is_closed() and _stderr.is_closed() then _close() end fun ref _pending_reads(pipe: _Pipe) => \"\"\" Read from stdout or stderr while data is available. If we read 4 kb of data, send ourself a resume message and stop reading, to avoid starving other actors. It's safe to use the same buffer for stdout and stderr because of causal messaging. Events get processed one _after_ another. \"\"\" if pipe.is_closed() then return end var sum: USize = 0 while true do (_read_buf, let len, let errno) = pipe.read(_read_buf = recover Array[U8] end, _read_len) let next = _read_buf.space() match len | -1 => if (errno == _EAGAIN()) then return // nothing to read right now, try again later end pipe.close() return | 0 => pipe.close() return end _read_len = _read_len + len.usize() let data = _read_buf = recover Array[U8] .> undefined(next) end data.truncate(_read_len) match pipe.near_fd | _stdout.near_fd => if _read_len >= _expect then _notifier.stdout(this, consume data) end | _stderr.near_fd => _notifier.stderr(this, consume data) end _read_len = 0 _read_buf_size() sum = sum + len.usize() if sum > (1 << 12) then // If we've read 4 kb, yield and read again later. _read_again(pipe.near_fd) return end end fun ref _read_buf_size() => if _expect > 0 then _read_buf.undefined(_expect) else _read_buf.undefined(_max_size) end be _read_again(near_fd: U32) => \"\"\" Resume reading on file descriptor. \"\"\" match near_fd | _stdout.near_fd => _pending_reads(_stdout) | _stderr.near_fd => _pending_reads(_stderr) end fun ref _write_final(data: ByteSeq) => \"\"\" Write as much as possible to the pipe if it is open and there are no pending writes. Save everything unwritten into _pending and apply backpressure. \"\"\" if (not _closed) and not _stdin.is_closed() and (_pending.size() == 0) then // Send as much data as possible. (let len, let errno) = _stdin.write(data, 0) if len == -1 then // write error if errno == _EAGAIN() then // Resource temporarily unavailable, send data later. _pending.push((data, 0)) Backpressure.apply(_backpressure_auth) else // Notify caller of error, close fd and done. _notifier.failed(this, WriteError) _stdin.close_near() end elseif len.usize() < data.size() then // Send any remaining data later. _pending.push((data, len.usize())) Backpressure.apply(_backpressure_auth) end else // Send later, when the pipe is available for writing. _pending.push((data, 0)) Backpressure.apply(_backpressure_auth) end fun ref _pending_writes() => \"\"\" Send any pending data. If any data can't be sent, keep it in _pending. Once _pending is non-empty, direct writes will get queued there, and they can only be written here. If the _done_writing flag is set, close the pipe once we've processed pending writes. \"\"\" while (not _closed) and not _stdin.is_closed() and (_pending.size() > 0) do try let node = _pending.head()? (let data, let offset) = node()? // Write as much data as possible. (let len, let errno) = _stdin.write(data, offset) if len == -1 then // OS signals write error if errno == _EAGAIN() then // Resource temporarily unavailable, send data later. return else // Close pipe and bail out. _notifier.failed(this, WriteError) _stdin.close_near() return end elseif (len.usize() + offset) < data.size() then // Send remaining data later. node()? = (data, offset + len.usize()) return else // This pending chunk has been fully sent. _pending.shift()? if (_pending.size() == 0) then Backpressure.release(_backpressure_auth) // check if the client has signaled it is done if _done_writing then _stdin.close_near() end end end else // handle error _notifier.failed(this, WriteError) return end end","title":"process_monitor.pony"},{"location":"src/process/process_notify/","text":"interface ProcessNotify \"\"\" Notifications for Process connections. \"\"\" fun ref created(process: ProcessMonitor ref) => \"\"\" ProcessMonitor calls this when it is created. \"\"\" fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) => \"\"\" ProcessMonitor calls this when new data is received on STDOUT of the forked process \"\"\" fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) => \"\"\" ProcessMonitor calls this when new data is received on STDERR of the forked process \"\"\" fun ref failed(process: ProcessMonitor ref, err: ProcessError) => \"\"\" ProcessMonitor calls this if we run into errors communicating with the forked process. \"\"\" fun ref expect(process: ProcessMonitor ref, qty: USize): USize => \"\"\" Called when the process monitor has been told to expect a certain quantity of bytes. This allows nested notifiers to change the expected quantity, which allows a lower level protocol to handle any framing. \"\"\" qty fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) => \"\"\" Call when ProcessMonitor terminates to cleanup ProcessNotify. We return the exit code of the child process. \"\"\"","title":"process_notify.pony"},{"location":"src/promises/_then/","text":"class _Then[A: Any #share, B: Any #share] \"\"\" A step in a promise pipeline. \"\"\" let _fulfill: Fulfill[A, B] let _rejected: Reject[B] let _promise: Promise[B] var _active: Bool = true new iso create(fulfill: Fulfill[A, B], rejected: Reject[B]) => \"\"\" A step is represented by a fulfill function and a reject function. \"\"\" _fulfill = consume fulfill _rejected = consume rejected _promise = Promise[B] fun promise(): Promise[B] => \"\"\" Returns the next promise in the chain. \"\"\" _promise fun ref apply(value: A) => \"\"\" Called with the result of the previous promise when it is fulfilled. \"\"\" if _active then _active = false try _promise(_fulfill(value)?) else _promise.reject() end end fun ref reject() => \"\"\" Called when the previous promise is rejected. \"\"\" if _active then _active = false try _promise(_rejected()?) else _promise.reject() end end interface _IThen[A: Any #share] \"\"\" An interface representing an abstract Then. This allows for any Then that accepts an input of type A, regardless of the output type. \"\"\" fun ref apply(value: A) fun ref reject()","title":"_then.pony"},{"location":"src/promises/fulfill/","text":"primitive _Pending primitive _Reject interface iso Fulfill[A: Any #share, B: Any #share] \"\"\" A function from A to B that is called when a promise is fulfilled. \"\"\" fun ref apply(value: A): B ? interface iso Reject[A: Any #share] \"\"\" A function on A that is called when a promise is rejected. \"\"\" fun ref apply(): A ? class iso FulfillIdentity[A: Any #share] \"\"\" An identity function for fulfilling promises. \"\"\" fun ref apply(value: A): A => consume value class iso RejectAlways[A: Any #share] \"\"\" A reject that always raises an error. \"\"\" fun ref apply(): A ? => error","title":"fulfill.pony"},{"location":"src/promises/promise/","text":"\"\"\" # Promises Package A `Promise` represents a value that will be available at a later time. `Promise`s can either be fulfilled with a value or rejected. Any number of function handlers can be added to the `Promise`, to be called when the `Promise` is fulfilled or rejected. These handlers themselves are also wrapped in `Promise`s so that they can be chained together in order for the fulfilled value of one `Promise` to be used to compute a value which will be used to fulfill the next `Promise` in the chain, or so that if the `Promise` is rejected then the subsequent reject functions will also be called. The input and output types of a fulfill handler do not have to be the same, so a chain of fulfill handlers can transform the original value into something new. Fulfill and reject handlers can either be specified as classes that implment the `Fulfill` and `Reject` interfaces, or as functions with the same signatures as the `apply` methods in `Fulfill` and `Reject`. In the following code, the fulfillment of the `Promise` causes the execution of several fulfillment functions. The output is: ``` fulfilled + foo fulfilled + bar fulfilled + baz ``` ```pony use \"promises\" class PrintFulfill is Fulfill[String, String] let _env: Env let _msg: String new create(env: Env, msg: String) => _env = env _msg = msg fun apply(s: String): String => _env.out.print(\" + \".join([s; _msg].values())) s actor Main new create(env: Env) => let promise = Promise[String] promise.next[String](recover PrintFulfill(env, \"foo\") end) promise.next[String](recover PrintFulfill(env, \"bar\") end) promise.next[String](recover PrintFulfill(env, \"baz\") end) promise(\"fulfilled\") ``` In the following code, the fulfill functions are chained together so that the fulfilled value of the first one is used to generate a value which fulfills the second one, which in turn is used to compute a value which fulfills the third one, which in turn is used to compute a value which fulfills the fourth one. The output is the average length of the words passed on the command line or `0` if there are no command line arguments. ```pony use \"promises\" primitive Computation fun tag string_to_strings(s: String): Array[String] val => recover s.split() end fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val => recover let len = Array[USize] for s in sa.values() do len.push(s.size()) end len end fun tag sizes_to_avg(sza: Array[USize] val): USize => var acc = USize(0) for sz in sza.values() do acc = acc + sz end acc / sza.size() fun tag output(env: Env, sz: USize): None => env.out.print(sz.string()) actor Main new create(env: Env) => let promise = Promise[String] promise.next[Array[String] val](recover Computation~string_to_strings() end) .next[Array[USize] val](recover Computation~strings_to_sizes() end) .next[USize](recover Computation~sizes_to_avg() end) .next[None](recover Computation~output(env) end) promise(\" \".join(env.args.slice(1).values())) ``` \"\"\" use \"time\" actor Promise[A: Any #share] \"\"\" A promise to eventually produce a result of type A. This promise can either be fulfilled or rejected. Any number of promises can be chained after this one. \"\"\" var _value: (_Pending | _Reject | A) = _Pending embed _list: Array[_IThen[A]] = _list.create() be apply(value: A) => \"\"\" Fulfill the promise. \"\"\" if _value isnt _Pending then return end _value = value for f in _list.values() do f(value) end _list.clear() be reject() => \"\"\" Reject the promise. \"\"\" if _value isnt _Pending then return end _value = _Reject for f in _list.values() do f.reject() end _list.clear() fun tag next[B: Any #share]( fulfill: Fulfill[A, B], rejected: Reject[B] = RejectAlways[B]) : Promise[B] => \"\"\" Chain a promise after this one. When this promise is fulfilled, the result of type A is passed to the fulfill function, generating in an intermediate result of type B. This is then used to fulfill the next promise in the chain. If there is no fulfill function, or if the fulfill function raises an error, then the next promise in the chain will be rejected. If this promise is rejected, this step's reject function is called with no input, generating an intermediate result of type B which is used to fulfill the next promise in the chain. If there is no reject function, of if the reject function raises an error, then the next promise in the chain will be rejected. \"\"\" let attach = _Then[A, B](consume fulfill, consume rejected) let promise = attach.promise() _attach(consume attach) promise fun tag add[B: Any #share = A](p: Promise[B]): Promise[(A, B)] => \"\"\" Add two promises into one promise that returns the result of both when they are fulfilled. If either of the promises is rejected then the new promise is also rejected. \"\"\" let p' = Promise[(A, B)] let c = object var _a: (A | _None) = _None var _b: (B | _None) = _None be fulfill_a(a: A) => match _b | let b: B => p'((a, b)) else _a = a end be fulfill_b(b: B) => match _a | let a: A => p'((a, b)) else _b = b end end next[None]( {(a) => c.fulfill_a(a) }, {() => p'.reject() }) p.next[None]( {(b) => c.fulfill_b(b) }, {() => p'.reject() }) p' fun tag join(ps: Iterator[Promise[A]]): Promise[Array[A] val] => \"\"\" Create a promise that is fulfilled when the receiver and all promises in the given iterator are fulfilled. If the receiver or any promise in the sequence is rejected then the new promise is also rejected. Join `p1` and `p2` with an existing promise, `p3`. ```pony use \"promises\" actor Main new create(env: Env) => let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] p3.join([p1; p2].values()) .next[None]({(a: Array[String val] val) => for s in a.values() do env.out.print(s) end }) p2(\"second\") p3(\"third\") p1(\"first\") ``` \"\"\" Promises[A].join( [this] .> concat(ps) .values()) fun tag select(p: Promise[A]): Promise[(A, Promise[A])] => \"\"\" Return a promise that is fulfilled when either promise is fulfilled, resulting in a tuple of its value and the other promise. \"\"\" let p' = Promise[(A, Promise[A])] let s = object tag var _complete: Bool = false let _p: Promise[(A, Promise[A])] = p' be apply(a: A, p: Promise[A]) => if not _complete then _p((a, p)) _complete = true end end next[None]({(a) => s(a, p) }) p.next[None]({(a)(p = this) => s(a, p) }) p' fun tag timeout(expiration: U64) => \"\"\" Reject the promise after the given expiration in nanoseconds. \"\"\" Timers.apply(Timer( object iso is TimerNotify let _p: Promise[A] = this fun ref apply(timer: Timer, count: U64): Bool => _p.reject() false end, expiration)) be _attach(attach: _IThen[A] iso) => \"\"\" Attaches a step asynchronously. If this promise has already been fulfilled or rejected, immediately fulfill or reject the incoming step. Otherwise, keep it in a list. \"\"\" if _value is _Pending then _list.push(consume attach) elseif _value is _Reject then attach.reject() else try attach(_value as A) end end primitive Promises[A: Any #share] fun join(ps: Iterator[Promise[A]]): Promise[Array[A] val] => \"\"\" Create a promise that is fulfilled when all promises in the given sequence are fulfilled. If any promise in the sequence is rejected then the new promise is also rejected. The order that values appear in the final array is based on when each promise is fulfilled and not the order that they are given. Join three existing promises to make a fourth. ```pony use \"promises\" actor Main new create(env: Env) => let p1 = Promise[String val] let p2 = Promise[String val] let p3 = Promise[String val] Promises[String val].join([p1; p2; p3].values()) .next[None]({(a: Array[String val] val) => for s in a.values() do env.out.print(s) end }) p2(\"second\") p3(\"third\") p1(\"first\") ``` \"\"\" let p' = Promise[Array[A] val] let ps' = Array[Promise[A]] .> concat(consume ps) if ps'.size() == 0 then p'(recover Array[A] end) return p' end let j = _Join[A](p', ps'.size()) for p in ps'.values() do p.next[None]({(a)(j) => j(a)}, {() => p'.reject()}) end p' actor _Join[A: Any #share] embed _xs: Array[A] let _space: USize let _p: Promise[Array[A] val] new create(p: Promise[Array[A] val], space: USize) => (_xs, _space, _p) = (Array[A](space), space, p) be apply(a: A) => _xs.push(a) if _xs.size() == _space then let len = _xs.size() let xs = recover Array[A](len) end for x in _xs.values() do xs.push(x) end _p(consume xs) end primitive _None","title":"promise.pony"},{"location":"src/random/dice/","text":"class Dice \"\"\" A simple dice roller. \"\"\" var r: Random new create(from: Random) => \"\"\" Initialise with a random number generator. \"\"\" r = from fun ref apply(count: U64, sides: U64): U64 => \"\"\" Return the sum of `count` rolls of a die with the given number of `sides`. The die is numbered from 1 to `sides`. For example, count = 2 and sides = 6 will return a value between 2 and 12. \"\"\" var sum = count var i: U64 = 0 while i < count do sum = sum + r.int(sides) i = i + 1 end sum","title":"dice.pony"},{"location":"src/random/mt/","text":"class MT is Random \"\"\" A Mersenne Twister. This is a non-cryptographic random number generator. This should only be used for legacy applications that require a Mersenne Twister, otherwise use Rand. \"\"\" embed _state: Array[U64] var _index: USize new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" _state = Array[U64](_n()) _index = _n() var seed = x xor y _state.push(seed) var i: USize = 1 while i < _n() do seed = ((seed xor (seed >> 62)) * 6364136223846793005) + i.u64() _state.push(seed) i = i + 1 end fun ref next(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" if _index >= _n() then _populate() end try var x = _state(_index)? _index = _index + 1 x = x xor ((x >> 29) and 0x5555555555555555) x = x xor ((x << 17) and 0x71d67fffeda60000) x = x xor ((x << 37) and 0xfff7eee000000000) x xor (x >> 43) else 0 end fun ref _populate() => \"\"\" Repopulates the state array. \"\"\" try _index = 0 var x = _state(0)? var i: USize = 0 while i < _m() do x = _lower(i, x)? i = i + 1 end x = _state(_m())? i = _m() while i < _n1() do x = _upper(i, x)? i = i + 1 end _wrap()? end fun tag _n(): USize => 312 fun tag _m(): USize => 156 fun tag _n1(): USize => _n() - 1 fun tag _mask(x: U64, y: U64): U64 => (x and 0xffffffff80000000) or (y and 0x000000007fffffff) fun tag _matrix(x: U64): U64 => (x and 1) * 0xb5026f5aa96619e9 fun tag _mix(x: U64, y: U64): U64 => let z = _mask(x, y) (z >> 1) xor _matrix(z) fun ref _lower(i: USize, x: U64): U64 ? => let y = _state(i + 1)? _state(i)? = _state(i + _m())? xor _mix(x, y) y fun ref _upper(i: USize, x: U64): U64 ? => let y = _state(i + 1)? _state(i)? = _state(i - _m())? xor _mix(x, y) y fun ref _wrap(): U64 ? => let x = _state(_n1())? let y = _state(0)? _state(_n1())? = _state(_m() - 1)? xor _mix(x, y) y","title":"mt.pony"},{"location":"src/random/random/","text":"\"\"\" # Random package The Random package provides support generating random numbers. The package provides random number generators you can use in your code, a dice roller and a trait for implementing your own random number generator. If your application does not require a specific generator, use Rand. Seed values can contain up to 128 bits of randomness in the form of two U64s. A common non-cryptographically secure way to seed a generator is with `Time.now`. ```pony let rand = Rand let n = rand.next() ``` \"\"\" type Rand is XorOshiro128Plus trait Random \"\"\" The `Random` trait should be implemented by all random number generators. The only method you need to implement is `fun ref next(): 64`. Once that method has been implemented, the `Random` trait provides default implementations of conversions to other number types. \"\"\" new create(x: U64 = 5489, y: U64 = 0) \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" fun tag has_next(): Bool => \"\"\" If used as an iterator, this always has another value. \"\"\" true fun ref next(): U64 \"\"\" A random integer in [0, 2^64) \"\"\" fun ref u8(): U8 => \"\"\" A random integer in [0, 2^8) \"\"\" (next() >> 56).u8() fun ref u16(): U16 => \"\"\" A random integer in [0, 2^16) \"\"\" (next() >> 48).u16() fun ref u32(): U32 => \"\"\" A random integer in [0, 2^32) \"\"\" (next() >> 32).u32() fun ref u64(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" next() fun ref u128(): U128 => \"\"\" A random integer in [0, 2^128) \"\"\" (next().u128() << 64) or next().u128() fun ref ulong(): ULong => \"\"\" A random integer in [0, ULong.max_value()] \"\"\" ifdef ilp32 or llp64 then (next() >> 32).ulong() else next().ulong() end fun ref usize(): USize => \"\"\" A random integer in [0, USize.max_value()] \"\"\" ifdef ilp32 then (next() >> 32).usize() else next().usize() end fun ref i8(): I8 => \"\"\" A random integer in [-2^7, 2^7) \"\"\" u8().i8() fun ref i16(): I16 => \"\"\" A random integer in [-2^15, 2^15) \"\"\" u16().i16() fun ref i32(): I32 => \"\"\" A random integer in [-2^31, 2^31) \"\"\" u32().i32() fun ref i64(): I64 => \"\"\" A random integer in [-2^63, 2^63) \"\"\" u64().i64() fun ref i128(): I128 => \"\"\" A random integer in [-2^127, 2^127) \"\"\" u128().i128() fun ref ilong(): ILong => \"\"\" A random integer in [ILong.min_value(), ILong.max_value()] \"\"\" ulong().ilong() fun ref isize(): ISize => \"\"\" A random integer in [ISize.min_value(), ISize.max_value()] \"\"\" usize().isize() fun ref int_fp_mult[N: (Unsigned val & Real[N] val) = U64](n: N): N => \"\"\" A random integer in [0, n) \"\"\" N.from[F64](real() * n.f64()) fun ref int[N: (Unsigned val & Real[N] val) = U64](n: N): N => \"\"\" A random integer in [0, n) Uses fixed-point inversion if platform supports native 128 bit operations otherwise uses floating-point multiplication. \"\"\" ifdef native128 then // TODO: once we have specialized generic functions, chose smaller int // types for smaller N. N.from[U64](((next().u128() * n.u128()) >> 64).u64()) else int_fp_mult[N](n) end fun ref int_unbiased[N: (Unsigned val & Real[N] val) = U64](n: N): N => \"\"\" A random integer in [0, n) Not biased with small values of `n` like `int`. \"\"\" N.from[U64](_u64_unbiased(U64.from[N](n))) fun ref _u64_unbiased(range: U64): U64 => \"\"\" Generates a U64 in the range `[0, n)` while avoiding bias. See: - https://arxiv.org/abs/1805.10941 - http://www.pcg-random.org/posts/bounded-rands.html \"\"\" var x: U64 = next() var m: U128 = x.u128() * range.u128() var l: U64 = m.u64() if l < range then var t: U64 = -range if t >= range then t = t - range if t >= range then t = t % range end end while (l < t) do x = u64() m = x.u128() * range.u128() l = m.u64() end end (m >> 64).u64() fun ref real(): F64 => \"\"\" A random number in [0, 1) \"\"\" (next() >> 11).f64() * (F64(1) / 9007199254740992) fun ref shuffle[A](array: Array[A]) => \"\"\" Shuffle the elements of the array into a random order, mutating the array. \"\"\" var i: USize = array.size() try while i > 1 do let ceil = i = i - 1 array.swap_elements(i, int[USize](ceil))? end end","title":"random.pony"},{"location":"src/random/splitmix64/","text":"class SplitMix64 is Random \"\"\" Very fast Pseudo-Random-Number-Generator using only 64 bit of state, as detailed at: http://xoshiro.di.unimi.it/ and http://gee.cs.oswego.edu/dl/papers/oopsla14.pdf Using [XorOshiro128StarStar](random-XorOshiro128StarStar.md) or [XorOshiro128Plus](random-XorOshiro128Plus.md) should be prefered unless using only 64 bit of state is a requirement. \"\"\" // state var _x: U64 new from_u64(x: U64 = 5489) => _x = x new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Only x is used, y is discarded. \"\"\" _x = x fun ref next(): U64 => _x = _x + U64(0x9e3779b97f4a7c15) var z: U64 = _x z = (z xor (z >> 30)) * U64(0xbf58476d1ce4e5b9) z = (z xor (z >> 27)) * U64(0x94d049bb133111eb) z xor (z >> 31)","title":"splitmix64.pony"},{"location":"src/random/xoroshiro/","text":"class XorOshiro128Plus is Random \"\"\" This is an implementation of xoroshiro128+, as detailed at: http://xoroshiro.di.unimi.it This is currently the default Rand implementation. \"\"\" // state var _x: U64 var _y: U64 new from_u64(x: U64 = 5489) => \"\"\" Use seed x to seed a [SplitMix64](random-SplitMix64.md) and use this to initialize the 128 bits of state. \"\"\" let sm = SplitMix64(x) _x = sm.next() _y = sm.next() new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" _x = x _y = y next() fun ref next(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" let x = _x var y = _y let r = x + y y = x xor y _x = x.rotl(24) xor y xor (y << 16) _y = y.rotl(37) r class XorOshiro128StarStar is Random \"\"\" This is an implementation of xoroshiro128**, as detailed at: http://xoshiro.di.unimi.it/ This Rand implementation is slightly slower than [XorOshiro128Plus](random-XorOshiro128Plus.md) but does not exhibit \"mild dependencies in Hamming weights\" (the lower four bits might fail linearity tests). \"\"\" var _x: U64 var _y: U64 new from_u64(x: U64 = 5489) => \"\"\" Use seed x to seed a [SplitMix64](random-SplitMix64.md) and use this to initialize the 128 bits of state. \"\"\" let sm = SplitMix64(x) _x = sm.next() _y = sm.next() new create(x: U64 = 5489, y: U64 = 0) => _x = x _y = y next() fun ref next(): U64 => let x = _x var y = _y let r = (x * 5).rotl(7) * 9 y = x xor y _x = x.rotl(24) xor y xor (y << 16) _y = y.rotl(37) r","title":"xoroshiro.pony"},{"location":"src/random/xorshift/","text":"class XorShift128Plus is Random \"\"\" This is an implementation of xorshift+, as detailed at: http://xoroshiro.di.unimi.it This should only be used for legacy applications that specifically require XorShift128Plus, otherwise use Rand. \"\"\" var _x: U64 var _y: U64 new from_u64(x: U64 = 5489) => \"\"\" Use seed x to seed a [SplitMix64](random-SplitMix64.md) and use this to initialize the 128 bits of state. \"\"\" let sm = SplitMix64(x) _x = sm.next() _y = sm.next() new create(x: U64 = 5489, y: U64 = 0) => \"\"\" Create with the specified seed. Returned values are deterministic for a given seed. \"\"\" _x = x _y = y next() fun ref next(): U64 => \"\"\" A random integer in [0, 2^64) \"\"\" var y = _x let x = _y let r = x + y _x = x y = y xor (y << 23) _y = y xor x xor (y >> 18) xor (x >> 5) r","title":"xorshift.pony"},{"location":"src/serialise/_test/","text":"use \"ponytest\" actor Main is TestList new create(env: Env) => PonyTest(env, this) new make() => None fun tag tests(test: PonyTest) => /* TODO: arrays of union types arrays of tags no pointers no actors */ test(_TestSimple) test(_TestArrays) test(_TestFailures) test(_TestBoxedMachineWord) class _MachineWords var bool1: Bool = true var bool2: Bool = false var i8: I8 = 0x3 var i16: I16 = 0x7BCD var i32: I32 = 0x12345678 var i64: I64 = 0x7EDCBA9876543210 var i128: I128 = 0x7EDCBA9876543210123456789ABCDEFE var ilong: ILong = ILong(1) << (ILong(0).bitwidth() - 1) var isize: ISize = ISize(1) << (ISize(0).bitwidth() - 1) var f32: F32 = 1.2345e-13 var f64: F64 = 9.82643431e19 fun eq(that: _MachineWords box): Bool => (bool1 == that.bool1) and (bool2 == that.bool2) and (i8 == that.i8) and (i16 == that.i16) and (i32 == that.i32) and (i64 == that.i64) and (i128 == that.i128) and (ilong == that.ilong) and (isize == that.isize) and (f32 == that.f32) and (f64 == that.f64) class _StructWords var u8: U8 = 0x3 var u16: U16 = 0xABCD var u32: U32 = 0x12345678 var u64: U64 = 0xFEDCBA9876543210 var u128: U128 = 0xFEDCBA9876543210123456789ABCDEFE var ulong: ULong = 1 << (ULong(0).bitwidth() - 1) var usize: USize = 1 << (USize(0).bitwidth() - 1) fun eq(that: _StructWords box): Bool => (u8 == that.u8) and (u16 == that.u16) and (u32 == that.u32) and (u64 == that.u64) and (u128 == that.u128) and (ulong == that.ulong) and (usize == that.usize) class _Simple var words1: _MachineWords = _MachineWords embed words2: _MachineWords = _MachineWords var words3: _StructWords = _StructWords embed words4: _StructWords = _StructWords var words5: (Any ref | None) = _MachineWords var words6: (Any ref | None) = None var string: String = \"hello\" var none: None = None var tuple: (U64, String) = (99, \"goodbye\") var tuple2: ((U64, String) | None) = (101, \"awesome\") var a_tag: _MachineWords tag = words1 var a_ref: _MachineWords = words1 fun eq(that: _Simple): Bool => (words1 == that.words1) and (words2 == that.words2) and (words3 == that.words3) and (words4 == that.words4) and try (words5 as _MachineWords box) == (that.words5 as _MachineWords box) else false end and (words6 is that.words6) and (string == that.string) and (none is that.none) and (tuple._1 == that.tuple._1) and (tuple._2 == that.tuple._2) and try let x = tuple2 as (U64, String) let y = that.tuple2 as (U64, String) (x._1 == y._1) and (x._2 == y._2) else false end and (a_tag isnt that.a_tag) and (a_tag is words1) and (that.a_tag is that.words1) and (a_ref == that.a_ref) and (a_ref is words1) and (that.a_ref is that.words1) class iso _TestSimple is UnitTest \"\"\" Test serialising simple fields. \"\"\" fun name(): String => \"serialise/Simple\" fun apply(h: TestHelper) ? => let ambient = h.env.root as AmbientAuth let serialise = SerialiseAuth(ambient) let deserialise = DeserialiseAuth(ambient) let x: _Simple = _Simple let sx = Serialised(serialise, x)? let y = sx(deserialise)? as _Simple h.assert_true(x isnt y) h.assert_true(x == y) class iso _TestArrays is UnitTest \"\"\" Test serialising arrays. \"\"\" fun name(): String => \"serialise/Arrays\" fun apply(h: TestHelper) ? => let ambient = h.env.root as AmbientAuth let serialise = SerialiseAuth(ambient) let deserialise = DeserialiseAuth(ambient) let x1: Array[U128] = [1; 2; 3] var sx = Serialised(serialise, x1)? let y1 = sx(deserialise)? as Array[U128] h.assert_true(x1 isnt y1) h.assert_array_eq[U128](x1, y1) let x2: Array[Bool] = [true; false; true] sx = Serialised(serialise, x2)? let y2 = sx(deserialise)? as Array[Bool] h.assert_true(x2 isnt y2) h.assert_array_eq[Bool](x2, y2) let x3: Array[U32] = [1; 2; 3] sx = Serialised(serialise, x3)? let y3 = sx(deserialise)? as Array[U32] h.assert_true(x3 isnt y3) h.assert_array_eq[U32](x3, y3) let x4: Array[(U16, Bool)] = [(1, true); (2, false); (3, true)] sx = Serialised(serialise, x4)? let y4 = sx(deserialise)? as Array[(U16, Bool)] h.assert_true(x4 isnt y4) var i = USize(0) while i < x4.size() do h.assert_eq[U16](x4(i)?._1, y4(i)?._1) h.assert_eq[Bool](x4(i)?._2, y4(i)?._2) i = i + 1 end let x5: Array[String] = [\"hi\"; \"there\"; \"folks\"] sx = Serialised(serialise, x5)? let y5 = sx(deserialise)? as Array[String] h.assert_true(x5 isnt y5) h.assert_array_eq[String](x5, y5) let x6: Array[_StructWords] = [_StructWords; _StructWords; _StructWords] sx = Serialised(serialise, x6)? let y6 = sx(deserialise)? as Array[_StructWords] h.assert_true(x6 isnt y6) i = 0 while i < x6.size() do h.assert_true(x6(i)? isnt y6(i)?) h.assert_true(x6(i)? == y6(i)?) i = i + 1 end let x7: Array[U64] = recover Array[U64] end sx = Serialised(serialise, x7)? let y7 = sx(deserialise)? as Array[U64] h.assert_true(x7 isnt y7) h.assert_array_eq[U64](x7, y7) actor _EmptyActor class _HasActor var x: _EmptyActor = _EmptyActor class iso _TestFailures is UnitTest \"\"\" Test serialisation failures. \"\"\" fun name(): String => \"serialise/Failures\" fun apply(h: TestHelper) ? => let ambient = h.env.root as AmbientAuth let serialise = SerialiseAuth(ambient) h.assert_error({() ? => Serialised(serialise, _HasActor)? }) class _BoxedWord var f: Any val = U32(3) class iso _TestBoxedMachineWord is UnitTest \"\"\" Test serialising boxed machine words. \"\"\" fun name(): String => \"serialise/BoxedMachineWord\" fun apply(h: TestHelper) ? => let ambient = h.env.root as AmbientAuth let serialise = SerialiseAuth(ambient) let deserialise = DeserialiseAuth(ambient) let x: _BoxedWord = _BoxedWord x.f = U64(7) let sx = Serialised(serialise, x)? let y = sx(deserialise)? as _BoxedWord h.assert_true(x isnt y) h.assert_true((y.f as U64) == 7)","title":"_test.pony"},{"location":"src/serialise/serialise/","text":"\"\"\" # Serialise package This package provides support for serialising and deserialising arbitrary data structures. The API is designed to require capability tokens, as otherwise serialising would leak the bit patterns of all private information in a type (since the resulting Array[U8] could be examined. Deserialisation is fundamentally unsafe currently: there isn't yet a verification pass to check that the resulting object graph maintains a well-formed heap or that individual objects maintain any expected local invariants. However, if only \"trusted\" data (i.e. data produced by Pony serialisation from the same binary) is deserialised, it will always maintain a well-formed heap and all object invariants. Note that serialised data is not usable between different Pony binaries. This is due to the use of type identifiers rather than a heavy-weight self-describing serialisation schema. This also means it isn't safe to deserialise something serialised by the same program compiled for a different platform. The Serialise.signature method is provided for the purposes of comparing communicating Pony binaries to determine if they are the same. Confirming this before deserialising data can help mitigate the risk of accidental serialisation across different Pony binaries, but does not on its own address the security issues of accepting data from untrusted sources. \"\"\" primitive Serialise fun signature(): Array[U8] val => \"\"\" Returns a byte array that is unique to this compiled Pony binary, for the purposes of comparing before deserialising any data from that source. It is statistically impossible for two serialisation-incompatible Pony binaries to have the same serialise signature. \"\"\" @\"internal.signature\"[Array[U8] val]() primitive SerialiseAuth \"\"\" This is a capability that allows the holder to serialise objects. It does not allow the holder to examine serialised data or to deserialise objects. \"\"\" new create(auth: AmbientAuth) => None primitive DeserialiseAuth \"\"\" This is a capability token that allows the holder to deserialise objects. It does not allow the holder to serialise objects or examine serialised. \"\"\" new create(auth: AmbientAuth) => None primitive OutputSerialisedAuth \"\"\" This is a capability token that allows the holder to examine serialised data. This should only be provided to types that need to write serialised data to some output stream, such as a file or socket. A type with the SerialiseAuth capability should usually not also have OutputSerialisedAuth, as the combination gives the holder the ability to examine the bitwise contents of any object it has a reference to. \"\"\" new create(auth: AmbientAuth) => None primitive InputSerialisedAuth \"\"\" This is a capability token that allows the holder to treat data arbitrary bytes as serialised data. This is the most dangerous capability, as currently it is possible for a malformed chunk of data to crash your program if it is deserialised. \"\"\" new create(auth: AmbientAuth) => None class val Serialised \"\"\" This represents serialised data. How it can be used depends on the other capabilities a caller holds. \"\"\" let _data: Array[U8] val new create(auth: SerialiseAuth, data: Any box) ? => \"\"\" A caller with SerialiseAuth can create serialised data from any object. \"\"\" let r = recover Array[U8] end let alloc_fn = @{(ctx: Pointer[None], size: USize): Pointer[None] => @pony_alloc[Pointer[None]](ctx, size) } let throw_fn = @{() ? => error } @pony_serialise[None](@pony_ctx[Pointer[None]](), data, Pointer[None], r, alloc_fn, throw_fn) ? _data = consume r new input(auth: InputSerialisedAuth, data: Array[U8] val) => \"\"\" A caller with InputSerialisedAuth can create serialised data from any arbitrary set of bytes. It is the caller's responsibility to ensure that the data is in fact well-formed serialised data. This is currently the most dangerous method, as there is currently no way to check validity at runtime. \"\"\" _data = data fun apply(auth: DeserialiseAuth): Any iso^ ? => \"\"\" A caller with DeserialiseAuth can create an object graph from serialised data. \"\"\" let alloc_fn = @{(ctx: Pointer[None], size: USize): Pointer[None] => @pony_alloc[Pointer[None]](ctx, size) } let alloc_final_fn = @{(ctx: Pointer[None], size: USize): Pointer[None] => @pony_alloc_final[Pointer[None]](ctx, size) } let throw_fn = @{() ? => error } @pony_deserialise[Any iso^](@pony_ctx[Pointer[None]](), Pointer[None], _data, alloc_fn, alloc_final_fn, throw_fn) ? fun output(auth: OutputSerialisedAuth): Array[U8] val => \"\"\" A caller with OutputSerialisedAuth can gain access to the underlying bytes that contain the serialised data. This can be used to write those bytes to, for example, a file or socket. \"\"\" _data","title":"serialise.pony"},{"location":"src/signals/sig/","text":"\"\"\" # Signals package The Signals package provides support for handling Unix style signals. For each signal that you want to handle, you need to create a `SignalHandler` and a corresponding `SignalNotify` object. Each SignalHandler runs as it own actor and upon receiving the signal will call its corresponding `SignalNotify`'s apply method. ## Example program The following program will listen for the TERM signal and output a message to standard out if it is received. ```pony use \"signals\" actor Main new create(env: Env) => // Create a TERM handler let signal = SignalHandler(TermHandler(env), Sig.term()) // Raise TERM signal signal.raise() class TermHandler is SignalNotify let _env: Env new iso create(env: Env) => _env = env fun ref apply(count: U32): Bool => _env.out.print(\"TERM signal received\") true ``` ## Signal portability The `Sig` primitive provides support for portable signal handling across Linux, FreeBSD and OSX. Signals are not supported on Windows and attempting to use them will cause a compilation error. ## Shutting down handlers Unlike a `TCPConnection` and other forms of input receiving, creating a `SignalHandler` will not keep your program running. As such, you are not required to call `dispose` on your signal handlers in order to shutdown your program. \"\"\" primitive Sig \"\"\" Define the portable signal numbers. Other signals can be used, but they are not guaranteed to be portable. \"\"\" fun hup(): U32 => 1 fun int(): U32 => 2 fun quit(): U32 => 3 fun ill(): U32 => ifdef linux or bsd or osx then 4 else compile_error \"no SIGINT\" end fun trap(): U32 => ifdef linux or bsd or osx then 5 else compile_error \"no SIGTRAP\" end fun abrt(): U32 => 6 fun emt(): U32 => ifdef bsd or osx then 7 else compile_error \"no SIGEMT\" end fun fpe(): U32 => ifdef linux or bsd or osx then 8 else compile_error \"no SIGFPE\" end fun kill(): U32 => 9 fun bus(): U32 => ifdef bsd or osx then 10 elseif linux then 7 else compile_error \"no SIGBUS\" end fun segv(): U32 => ifdef linux or bsd or osx then 11 else compile_error \"no SIGSEGV\" end fun sys(): U32 => ifdef bsd or osx then 12 elseif linux then 31 else compile_error \"no SIGSYS\" end fun pipe(): U32 => ifdef linux or bsd or osx then 13 else compile_error \"no SIGPIPE\" end fun alrm(): U32 => 14 fun term(): U32 => 15 fun urg(): U32 => ifdef bsd or osx then 16 elseif linux then 23 else compile_error \"no SIGURG\" end fun stkflt(): U32 => ifdef linux then 16 else compile_error \"no SIGSTKFLT\" end fun stop(): U32 => ifdef bsd or osx then 17 elseif linux then 19 else compile_error \"no SIGSTOP\" end fun tstp(): U32 => ifdef bsd or osx then 18 elseif linux then 20 else compile_error \"no SIGTSTP\" end fun cont(): U32 => ifdef bsd or osx then 19 elseif linux then 18 else compile_error \"no SIGCONT\" end fun chld(): U32 => ifdef bsd or osx then 20 elseif linux then 17 else compile_error \"no SIGCHLD\" end fun ttin(): U32 => ifdef linux or bsd or osx then 21 else compile_error \"no SIGTTIN\" end fun ttou(): U32 => ifdef linux or bsd or osx then 22 else compile_error \"no SIGTTOU\" end fun io(): U32 => ifdef bsd or osx then 23 elseif linux then 29 else compile_error \"no SIGIO\" end fun xcpu(): U32 => ifdef linux or bsd or osx then 24 else compile_error \"no SIGXCPU\" end fun xfsz(): U32 => ifdef linux or bsd or osx then 25 else compile_error \"no SIGXFSZ\" end fun vtalrm(): U32 => ifdef linux or bsd or osx then 26 else compile_error \"no SIGVTALRM\" end fun prof(): U32 => ifdef linux or bsd or osx then 27 else compile_error \"no SIGPROF\" end fun winch(): U32 => ifdef linux or bsd or osx then 28 else compile_error \"no SIGWINCH\" end fun info(): U32 => ifdef bsd or osx then 29 else compile_error \"no SIGINFO\" end fun pwr(): U32 => ifdef linux then 30 else compile_error \"no SIGPWR\" end fun usr1(): U32 => ifdef bsd or osx then 30 elseif linux then 10 else compile_error \"no SIGUSR1\" end fun usr2(): U32 => ifdef not \"scheduler_scaling_pthreads\" then ifdef bsd or osx then 31 elseif linux then 12 else compile_error \"no SIGUSR2\" end else ifdef linux or bsd or osx then compile_error \"SIGUSR2 reserved for runtime use\" else compile_error \"no SIGUSR2\" end end fun rt(n: U32): U32 ? => ifdef bsd then if n <= 61 then 65 + n.u32() else error end elseif linux then if n <= 32 then 32 + n.u32() else error end else compile_error \"no SIGRT\" end","title":"sig.pony"},{"location":"src/signals/signal_handler/","text":"use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) actor SignalHandler \"\"\" Listen for a specific signal. If the wait parameter is true, the program will not terminate until the SignalHandler's dispose method is called, or if the SignalNotify returns false, after handling the signal as this also disposes the SignalHandler and unsubscribes it. \"\"\" let _notify: SignalNotify let _sig: U32 var _event: AsioEventID new create(notify: SignalNotify iso, sig: U32, wait: Bool = false) => \"\"\" Create a signal handler. \"\"\" _notify = consume notify _sig = sig _event = @pony_asio_event_create(this, 0, AsioEvent.signal(), sig.u64(), wait) be raise() => \"\"\" Raise the signal. \"\"\" SignalRaise(_sig) be dispose() => \"\"\" Dispose of the signal handler. \"\"\" _dispose() be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" Called when the signal is received, or when the AsioEventID can be destroyed. \"\"\" if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif event is _event then if not _notify(arg) then _dispose() end end fun ref _dispose() => \"\"\" Dispose of the AsioEventID. \"\"\" if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() _notify.dispose() end","title":"signal_handler.pony"},{"location":"src/signals/signal_notify/","text":"interface SignalNotify \"\"\" Notifications for a signal. \"\"\" fun ref apply(count: U32): Bool => \"\"\" Called with the the number of times the signal has fired since this was last called. Return false to stop listening for the signal. \"\"\" true fun ref dispose() => \"\"\" Called if the signal is disposed. This is also called if the notifier returns false. \"\"\" None primitive SignalRaise \"\"\" Raise a signal. \"\"\" fun apply(sig: U32) => ifdef osx then // On Darwin, @raise delivers the signal to the current thread, not the // process, but kqueue EVFILT_SIGNAL will only see signals delivered to // the process. @kill delivers the signal to a specific process. @kill[I32](@getpid[I32](), sig) else @raise[I32](sig) end","title":"signal_notify.pony"},{"location":"src/strings/common_prefix/","text":"primitive CommonPrefix \"\"\" Creates a string that is the common prefix of the supplied strings, possibly empty. \"\"\" fun apply(data: ReadSeq[Stringable]): String iso^ => var res = \"\".clone() try let iter = data.values() if iter.has_next() then res = iter.next()?.string() for d in iter do var idx: USize = 0 let s = d.string() while (idx < res.size()) and (idx < s.size()) do if res(idx)? != s(idx)? then break end idx = idx + 1 end res = res.substring(0, idx.isize()) end end end res","title":"common_prefix.pony"},{"location":"src/term/ansi/","text":"primitive ANSI \"\"\" These strings can be embedded in text when writing to a StdStream to create a text-based UI. \"\"\" fun up(n: U32 = 0): String => \"\"\" Move the cursor up n lines. 0 is the same as 1. \"\"\" if n <= 1 then \"\\x1B[A\" else \"\\x1B[\" + n.string() + \"A\" end fun down(n: U32 = 0): String => \"\"\" Move the cursor down n lines. 0 is the same as 1. \"\"\" if n <= 1 then \"\\x1B[B\" else \"\\x1B[\" + n.string() + \"B\" end fun right(n: U32 = 0): String => \"\"\" Move the cursor right n columns. 0 is the same as 1. \"\"\" if n <= 1 then \"\\x1B[C\" else \"\\x1B[\" + n.string() + \"C\" end fun left(n: U32 = 0): String => \"\"\" Move the cursor left n columns. 0 is the same as 1. \"\"\" if n <= 1 then \"\\x1B[D\" else \"\\x1B[\" + n.string() + \"D\" end fun cursor(x: U32 = 0, y: U32 = 0): String => \"\"\" Move the cursor to line y, column x. 0 is the same as 1. This indexes from the top left corner of the screen. \"\"\" if (x <= 1) and (y <= 1) then \"\\x1B[H\" else \"\\x1B[\" + y.string() + \";\" + x.string() + \"H\" end fun clear(): String => \"\"\" Clear the screen and move the cursor to the top left corner. \"\"\" \"\\x1B[H\\x1B[2J\" fun erase(): String => \"\"\" Erases everything to the left of the cursor on the line the cursor is on. \"\"\" \"\\x1B[0K\" fun reset(): String => \"\"\" Resets all colours and text styles to the default. \"\"\" \"\\x1B[0m\" fun bold(state: Bool = true): String => \"\"\" Bold text. Does nothing on Windows. \"\"\" if state then \"\\x1B[1m\" else \"\\x1B[22m\" end fun underline(state: Bool = true): String => \"\"\" Underlined text. Does nothing on Windows. \"\"\" if state then \"\\x1B[4m\" else \"\\x1B[24m\" end fun blink(state: Bool = true): String => \"\"\" Blinking text. Does nothing on Windows. \"\"\" if state then \"\\x1B[5m\" else \"\\x1B[25m\" end fun reverse(state: Bool = true): String => \"\"\" Swap foreground and background colour. \"\"\" if state then \"\\x1B[7m\" else \"\\x1B[27m\" end fun black(): String => \"\"\" Black text. \"\"\" \"\\x1B[30m\" fun red(): String => \"\"\" Red text. \"\"\" \"\\x1B[31m\" fun green(): String => \"\"\" Green text. \"\"\" \"\\x1B[32m\" fun yellow(): String => \"\"\" Yellow text. \"\"\" \"\\x1B[33m\" fun blue(): String => \"\"\" Blue text. \"\"\" \"\\x1B[34m\" fun magenta(): String => \"\"\" Magenta text. \"\"\" \"\\x1B[35m\" fun cyan(): String => \"\"\" Cyan text. \"\"\" \"\\x1B[36m\" fun grey(): String => \"\"\" Grey text. \"\"\" \"\\x1B[90m\" fun white(): String => \"\"\" White text. \"\"\" \"\\x1B[97m\" fun bright_red(): String => \"\"\" Bright red text. \"\"\" \"\\x1B[91m\" fun bright_green(): String => \"\"\" Bright green text. \"\"\" \"\\x1B[92m\" fun bright_yellow(): String => \"\"\" Bright yellow text. \"\"\" \"\\x1B[93m\" fun bright_blue(): String => \"\"\" Bright blue text. \"\"\" \"\\x1B[94m\" fun bright_magenta(): String => \"\"\" Bright magenta text. \"\"\" \"\\x1B[95m\" fun bright_cyan(): String => \"\"\" Bright cyan text. \"\"\" \"\\x1B[96m\" fun bright_grey(): String => \"\"\" Bright grey text. \"\"\" \"\\x1B[37m\" fun black_bg(): String => \"\"\" Black background. \"\"\" \"\\x1B[40m\" fun red_bg(): String => \"\"\" Red background. \"\"\" \"\\x1B[41m\" fun green_bg(): String => \"\"\" Green background. \"\"\" \"\\x1B[42m\" fun yellow_bg(): String => \"\"\" Yellow background. \"\"\" \"\\x1B[43m\" fun blue_bg(): String => \"\"\" Blue background. \"\"\" \"\\x1B[44m\" fun magenta_bg(): String => \"\"\" Magenta background. \"\"\" \"\\x1B[45m\" fun cyan_bg(): String => \"\"\" Cyan background. \"\"\" \"\\x1B[46m\" fun grey_bg(): String => \"\"\" Grey background. \"\"\" \"\\x1B[100m\" fun white_bg(): String => \"\"\" White background. \"\"\" \"\\x1B[107m\" fun bright_red_bg(): String => \"\"\" Bright red background. \"\"\" \"\\x1B[101m\" fun bright_green_bg(): String => \"\"\" Bright green background. \"\"\" \"\\x1B[102m\" fun bright_yellow_bg(): String => \"\"\" Bright yellow background. \"\"\" \"\\x1B[103m\" fun bright_blue_bg(): String => \"\"\" Bright blue background. \"\"\" \"\\x1B[104m\" fun bright_magenta_bg(): String => \"\"\" Bright magenta background. \"\"\" \"\\x1B[105m\" fun bright_cyan_bg(): String => \"\"\" Bright cyan background. \"\"\" \"\\x1B[106m\" fun bright_grey_bg(): String => \"\"\" Bright grey background. \"\"\" \"\\x1B[47m\"","title":"ansi.pony"},{"location":"src/term/ansi_notify/","text":"interface ANSINotify \"\"\" Receive input from an ANSITerm. \"\"\" fun ref apply(term: ANSITerm ref, input: U8) => None fun ref up(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref down(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref left(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref right(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref delete(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref insert(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref home(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref end_key(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref page_up(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref page_down(ctrl: Bool, alt: Bool, shift: Bool) => None fun ref fn_key(i: U8, ctrl: Bool, alt: Bool, shift: Bool) => None fun ref prompt(term: ANSITerm ref, value: String) => None fun ref size(rows: U16, cols: U16) => None fun ref closed() => None","title":"ansi_notify.pony"},{"location":"src/term/ansi_term/","text":"use \"time\" use \"signals\" use @ioctl[I32](fx: I32, cmd: ULong, ...) if posix struct _TermSize var row: U16 = 0 var col: U16 = 0 var xpixel: U16 = 0 var ypixel: U16 = 0 primitive _EscapeNone primitive _EscapeStart primitive _EscapeSS3 primitive _EscapeCSI primitive _EscapeMod type _EscapeState is ( _EscapeNone | _EscapeStart | _EscapeSS3 | _EscapeCSI | _EscapeMod ) class _TermResizeNotify is SignalNotify let _term: ANSITerm tag new create(term: ANSITerm tag) => _term = term fun apply(times: U32): Bool => _term.size() true primitive _TIOCGWINSZ fun apply(): ULong => ifdef linux then 21523 elseif osx or bsd then 1074295912 else 0 end actor ANSITerm \"\"\" Handles ANSI escape codes from stdin. \"\"\" let _timers: Timers var _timer: (Timer tag | None) = None let _notify: ANSINotify let _source: DisposableActor var _escape: _EscapeState = _EscapeNone var _esc_num: U8 = 0 var _esc_mod: U8 = 0 embed _esc_buf: Array[U8] = Array[U8] var _closed: Bool = false new create( notify: ANSINotify iso, source: DisposableActor, timers: Timers = Timers) => \"\"\" Create a new ANSI term. \"\"\" _timers = timers _notify = consume notify _source = source ifdef not windows then SignalHandler(recover _TermResizeNotify(this) end, Sig.winch()) end _size() be apply(data: Array[U8] iso) => \"\"\" Receives input from stdin. \"\"\" if _closed then return end for c in (consume data).values() do match _escape | _EscapeNone => if c == 0x1B then _escape = _EscapeStart _esc_buf.push(0x1B) else _notify(this, c) end | _EscapeStart => match c | 'b' => // alt-left _esc_mod = 3 _left() | 'f' => // alt-right _esc_mod = 3 _right() | 'O' => _escape = _EscapeSS3 _esc_buf.push(c) | '[' => _escape = _EscapeCSI _esc_buf.push(c) else _esc_flush() end | _EscapeSS3 => match c | 'A' => _up() | 'B' => _down() | 'C' => _right() | 'D' => _left() | 'H' => _home() | 'F' => _end() | 'P' => _fn_key(1) | 'Q' => _fn_key(2) | 'R' => _fn_key(3) | 'S' => _fn_key(4) else _esc_flush() end | _EscapeCSI => match c | 'A' => _up() | 'B' => _down() | 'C' => _right() | 'D' => _left() | 'H' => _home() | 'F' => _end() | '~' => _keypad() | ';' => _escape = _EscapeMod | if (c >= '0') and (c <= '9') => // Escape number. _esc_num = (_esc_num * 10) + (c - '0') _esc_buf.push(c) else _esc_flush() end | _EscapeMod => match c | 'A' => _up() | 'B' => _down() | 'C' => _right() | 'D' => _left() | 'H' => _home() | 'F' => _end() | '~' => _keypad() | if (c >= '0') and (c <= '9') => // Escape modifier. _esc_mod = (_esc_mod * 10) + (c - '0') _esc_buf.push(c) else _esc_flush() end end end // If we are in the middle of an escape sequence, set a timer for 25 ms. // If it fires, we send the escape sequence as if it was normal data. if _escape isnt _EscapeNone then if _timer isnt None then try _timers.cancel(_timer as Timer tag) end end let t = recover object is TimerNotify let term: ANSITerm = this fun ref apply(timer: Timer, count: U64): Bool => term._timeout() false end end let timer = Timer(consume t, 25000000) _timer = timer _timers(consume timer) end be prompt(value: String) => \"\"\" Pass a prompt along to the notifier. \"\"\" _notify.prompt(this, value) be size() => _size() fun ref _size() => \"\"\" Pass the window size to the notifier. \"\"\" let ws: _TermSize = _TermSize ifdef posix then @ioctl[I32](0, _TIOCGWINSZ(), ws) // do error handling _notify.size(ws.row, ws.col) end be dispose() => \"\"\" Stop accepting input, inform the notifier we have closed, and dispose of our source. \"\"\" if not _closed then _esc_clear() _notify.closed() _source.dispose() _closed = true end be _timeout() => \"\"\" Our timer since receiving an ESC has expired. Send the buffered data as if it was not an escape sequence. \"\"\" _timer = None _esc_flush() fun ref _mod(): (Bool, Bool, Bool) => \"\"\" Set the modifier bools. \"\"\" let r = match _esc_mod | 2 => (false, false, true) | 3 => (false, true, false) | 4 => (false, true, true) | 5 => (true, false, false) | 6 => (true, false, true) | 7 => (true, true, false) | 8 => (true, true, true) else (false, false, false) end _esc_mod = 0 r fun ref _keypad() => \"\"\" An extended key. \"\"\" match _esc_num | 1 => _home() | 2 => _insert() | 3 => _delete() | 4 => _end() | 5 => _page_up() | 6 => _page_down() | 11 => _fn_key(1) | 12 => _fn_key(2) | 13 => _fn_key(3) | 14 => _fn_key(4) | 15 => _fn_key(5) | 17 => _fn_key(6) | 18 => _fn_key(7) | 19 => _fn_key(8) | 20 => _fn_key(9) | 21 => _fn_key(10) | 23 => _fn_key(11) | 24 => _fn_key(12) | 25 => _fn_key(13) | 26 => _fn_key(14) | 28 => _fn_key(15) | 29 => _fn_key(16) | 31 => _fn_key(17) | 32 => _fn_key(18) | 33 => _fn_key(19) | 34 => _fn_key(20) end fun ref _up() => \"\"\" Up arrow. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.up(ctrl, alt, shift) _esc_clear() fun ref _down() => \"\"\" Down arrow. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.down(ctrl, alt, shift) _esc_clear() fun ref _left() => \"\"\" Left arrow. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.left(ctrl, alt, shift) _esc_clear() fun ref _right() => \"\"\" Right arrow. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.right(ctrl, alt, shift) _esc_clear() fun ref _delete() => \"\"\" Delete key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.delete(ctrl, alt, shift) _esc_clear() fun ref _insert() => \"\"\" Insert key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.insert(ctrl, alt, shift) _esc_clear() fun ref _home() => \"\"\" Home key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.home(ctrl, alt, shift) _esc_clear() fun ref _end() => \"\"\" End key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.end_key(ctrl, alt, shift) _esc_clear() fun ref _page_up() => \"\"\" Page up key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.page_up(ctrl, alt, shift) _esc_clear() fun ref _page_down() => \"\"\" Page down key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.page_down(ctrl, alt, shift) _esc_clear() fun ref _fn_key(i: U8) => \"\"\" Function key. \"\"\" (let ctrl, let alt, let shift) = _mod() _notify.fn_key(i, ctrl, alt, shift) _esc_clear() fun ref _esc_flush() => \"\"\" Pass a partial or unrecognised escape sequence to the notifier. \"\"\" for c in _esc_buf.values() do _notify(this, c) end _esc_clear() fun ref _esc_clear() => \"\"\" Clear the escape state. \"\"\" if _timer isnt None then try _timers.cancel(_timer as Timer tag) end _timer = None end _escape = _EscapeNone _esc_buf.clear() _esc_num = 0 _esc_mod = 0","title":"ansi_term.pony"},{"location":"src/term/readline/","text":"use \"collections\" use \"files\" use \"promises\" use strings = \"strings\" class Readline is ANSINotify \"\"\" Line editing, history, and tab completion. \"\"\" let _notify: ReadlineNotify let _out: OutStream let _path: (FilePath | None) embed _history: Array[String] embed _queue: Array[String] = Array[String] let _maxlen: USize var _edit: String iso = recover String end var _cur_prompt: String = \"\" var _cur_line: USize = 0 var _cur_pos: ISize = 0 var _blocked: Bool = true new iso create( notify: ReadlineNotify iso, out: OutStream, path: (FilePath | None) = None, maxlen: USize = 0) => \"\"\" Create a readline handler to be passed to stdin. It begins blocked. Set an initial prompt on the ANSITerm to begin processing. \"\"\" _notify = consume notify _out = out _path = path _history = Array[String](maxlen) _maxlen = maxlen _load_history() fun ref apply(term: ANSITerm ref, input: U8) => \"\"\" Receives input. \"\"\" match input | 0x01 => home() // ctrl-a | 0x02 => left() // ctrl-b | 0x04 => // ctrl-d if _edit.size() == 0 then _out.write(\"\\n\") term.dispose() else delete() end | 0x05 => end_key() // ctrl-e | 0x06 => right() // ctrl-f | 0x08 => _backspace() // ctrl-h | 0x09 => _tab() | 0x0A => _dispatch(term) // LF | 0x0B => // ctrl-k, delete to the end of the line. _edit.truncate(_cur_pos.usize()) | 0x0C => _clear() // ctrl-l | 0x0D => _dispatch(term) // CR | 0x0E => down() // ctrl-n | 0x10 => up() // ctrl-p | 0x14 => _swap() // ctrl-t | 0x15 => // ctrl-u, delete the whole line. _edit.clear() home() | 0x17 => _delete_prev_word() // ctrl-w | 0x7F => _backspace() // backspace | if input < 0x20 => None // unknown control character else // Insert. _edit.insert_byte(_cur_pos, input) _cur_pos = _cur_pos + 1 _refresh_line() end fun ref prompt(term: ANSITerm ref, value: String) => \"\"\" Set a new prompt, unblock, and handle the pending queue. \"\"\" _cur_prompt = value _blocked = false try let line = _queue.shift()? _add_history(line) _out.print(_cur_prompt + line) _handle_line(term, line) else _refresh_line() end fun ref closed() => \"\"\" No more input is available. \"\"\" _save_history() fun ref up(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" Previous line. \"\"\" try if _cur_line > 0 then _cur_line = _cur_line - 1 _edit = _history(_cur_line)?.clone() end_key() end end fun ref down(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" Next line. \"\"\" try if _cur_line < (_history.size() - 1) then _cur_line = _cur_line + 1 _edit = _history(_cur_line)?.clone() else _cur_line = _history.size() _edit.clear() end end_key() end fun ref left(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" Move left. \"\"\" if _cur_pos == 0 then return end try repeat _cur_pos = _cur_pos - 1 until (_cur_pos == 0) or ((_edit.at_offset(_cur_pos)? and 0xC0) != 0x80) end _refresh_line() end fun ref right(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" Move right. \"\"\" try if _cur_pos < _edit.size().isize() then _cur_pos = _cur_pos + 1 end while (_cur_pos < _edit.size().isize()) and ((_edit.at_offset(_cur_pos)? and 0xC0) == 0x80) do _cur_pos = _cur_pos + 1 end _refresh_line() end fun ref home(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" Beginning of the line. \"\"\" _cur_pos = 0 _refresh_line() fun ref end_key( ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" End of the line. \"\"\" _cur_pos = _edit.size().isize() _refresh_line() fun ref _backspace() => \"\"\" Backward delete. \"\"\" if _cur_pos == 0 then return end try var c = U8(0) repeat _cur_pos = _cur_pos - 1 c = _edit.at_offset(_cur_pos)? _edit.delete(_cur_pos, 1) until (_cur_pos == 0) or ((c and 0xC0) != 0x80) end _refresh_line() end fun ref delete(ctrl: Bool = false, alt: Bool = false, shift: Bool = false) => \"\"\" Forward delete. \"\"\" try if _cur_pos < _edit.size().isize() then _edit.delete(_cur_pos, 1) end while (_cur_pos < _edit.size().isize()) and ((_edit.at_offset(_cur_pos)? and 0xC0) == 0x80) do _edit.delete(_cur_pos, 1) end _refresh_line() end fun ref _clear() => \"\"\" Clear the screen. \"\"\" _out.write(ANSI.clear()) _refresh_line() fun ref _swap() => \"\"\" Swap the previous character with the current one. \"\"\" try if (_cur_pos > 0) and (_cur_pos < _edit.size().isize()) then _edit(_cur_pos.usize())? = _edit((_cur_pos - 1).usize())? = _edit(_cur_pos.usize())? end _refresh_line() end fun ref _delete_prev_word() => \"\"\" Delete the previous word. \"\"\" try let old = _cur_pos while (_cur_pos > 0) and (_edit((_cur_pos - 1).usize())? == ' ') do _cur_pos = _cur_pos - 1 end while (_cur_pos > 0) and (_edit((_cur_pos - 1).usize())? != ' ') do _cur_pos = _cur_pos - 1 end _edit.delete(_cur_pos, (old - _cur_pos).usize()) _refresh_line() end fun ref _tab() => \"\"\" Tab completion. TODO: Improve this. \"\"\" let r = _notify.tab(_edit.clone()) match r.size() | 0 => None | 1 => try _edit = r(0)?.clone() end_key() end else _out.write(\"\\n\") for completion in r.values() do _out.print(completion) end _edit = strings.CommonPrefix(r) end_key() end fun ref _dispatch(term: ANSITerm) => \"\"\" Send a finished line to the notifier. \"\"\" if _edit.size() > 0 then let line: String = _edit = recover String end if _blocked then _queue.push(line) else _add_history(line) _out.write(\"\\n\") _handle_line(term, line) end end fun ref _handle_line(term: ANSITerm, line: String) => \"\"\" Dispatch a single line. \"\"\" let promise = Promise[String] promise.next[Any tag]( recover term~prompt() end, recover term~dispose() end) _notify(line, promise) _cur_pos = 0 _blocked = true fun ref _refresh_line() => \"\"\" Refresh the line on screen. \"\"\" if not _blocked then let len = 40 + _cur_prompt.size() + _edit.size() let out = recover String(len) end // Move to the left edge. out.append(\"\\r\") // Print the prompt. out.append(_cur_prompt) // Print the current line. out.append(_edit.clone()) // Erase to the right edge. out.append(ANSI.erase()) // Set the cursor position. var pos = _cur_prompt.codepoints() if _cur_pos > 0 then pos = pos + _edit.codepoints(0, _cur_pos) end out.append(\"\\r\") out.append(ANSI.right(pos.u32())) _out.write(consume out) end fun ref _add_history(line: String) => \"\"\" Add a line to the history, trimming an earlier line if necessary. \"\"\" try if (_history.size() > 0) and (_history(_history.size() - 1)? == line) then _cur_line = _history.size() return end end if (_maxlen > 0) and (_history.size() >= _maxlen) then try _history.shift()? end end _history.push(line) _cur_line = _history.size() fun ref _load_history() => \"\"\" Load the history from a file. \"\"\" _history.clear() try with file = File.open(_path as FilePath) do for line in file.lines() do _add_history(consume line) end end end fun _save_history() => \"\"\" Write the history back to a file. \"\"\" try with file = File(_path as FilePath) do for line in _history.values() do file.print(line) end end end","title":"readline.pony"},{"location":"src/term/readline_notify/","text":"use \"promises\" interface ReadlineNotify \"\"\" Notifier for readline. \"\"\" fun ref apply(line: String, prompt: Promise[String]) => \"\"\" Receives finished lines. The next prompt is set by fulfilling the promise. If the promise is rejected, readline will stop handling input. \"\"\" None fun ref tab(line: String): Seq[String] box => \"\"\" Return tab completion possibilities. \"\"\" Array[String]","title":"readline_notify.pony"},{"location":"src/time/_timing_wheel/","text":"use \"collections\" class _TimingWheel \"\"\" A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6 bits of precision. \"\"\" let _shift: U64 let _adjust: U64 var _pending: U64 = 0 embed _list: Array[List[Timer]] new create(index: USize) => \"\"\" Create a timing wheel at the given hierarchical level. \"\"\" _shift = (index * _bits()).u64() _adjust = if index > 0 then 1 else 0 end _list = Array[List[Timer]](_max()) for i in Range(0, _max()) do _list.push(List[Timer]) end fun ref schedule(timer: Timer) => \"\"\" Schedule a timer on this wheel. Mark the bit indicating that the given slot has timers in its list. \"\"\" let slot = ((timer._next() >> _shift) - _adjust) and _mask() try let list = _list(slot.usize())? _list(slot.usize())?.append_node(timer._get_node()) _pending = _pending or (1 << slot) end fun ref advance(list: List[Timer], current: U64, elapsed: U64): Bool => \"\"\" Remove pending timers from this timing wheel and put them on the pending list supplied. Needs the current time and the elapsed time since the previous advance. Returns true if the next timing wheel in the hierarchy should be advanced. \"\"\" let time = (elapsed >> _shift).max(1) let pending = if time <= _mask() then let slot = time and _mask() let slots = (1 << slot) - 1 let old_slot = _slot(current - elapsed) let new_slot = _slot(current) slots.rotl(old_slot) or slots.rotl(new_slot).rotr(slot) or (1 << new_slot) else -1 end while (pending and _pending) != 0 do let slot = (pending and _pending).ctz() try list.append_list(_list(slot.usize())?) end _pending = _pending and not (1 << slot) end (pending and 1) != 0 fun next(current: U64): U64 => \"\"\" Given a current time, return the next time at which this timing wheel should be advanced. Returns -1 if no timers are on this timing wheel. \"\"\" if _pending != 0 then let slot = _slot(current) let mask = (1 << _shift) - 1 ((_pending.rotr(slot).ctz() + _adjust).u64() << _shift.u64()) - (current and mask) else -1 end fun ref clear() => \"\"\" Cancels all pending timers. \"\"\" for list in _list.values() do for timer in list.values() do timer._cancel() end end fun _slot(time: U64): U64 => \"\"\" Return the slot for a given time. \"\"\" (time >> _shift) and _mask() fun tag _bits(): USize => 6 fun tag _max(): USize => 1 << _bits() fun tag _mask(): U64 => (_max() - 1).u64()","title":"_timing_wheel.pony"},{"location":"src/time/nanos/","text":"primitive Nanos \"\"\" Collection of utility functions for converting various durations of time to nanoseconds, for passing to other functions in the time package. \"\"\" fun from_seconds(t: U64): U64 => t * 1_000_000_000 fun from_millis(t: U64): U64 => t * 1_000_000 fun from_micros(t: U64): U64 => t * 1_000 fun from_seconds_f(t: F64): U64 => (t * 1_000_000_000).trunc().u64() fun from_millis_f(t: F64): U64 => (t * 1_000_000).trunc().u64() fun from_micros_f(t: F64): U64 => (t * 1_000).trunc().u64() fun from_wall_clock(wall: (I64, I64)): U64 => ((wall._1 * 1000000000) + wall._2).u64()","title":"nanos.pony"},{"location":"src/time/posix_date/","text":"class PosixDate \"\"\" Represents a proleptic Gregorian date and time, without specifying a time zone. The day of month, month, day of week, and day of year are all indexed from 1, i.e. January is 1, Monday is 1. \"\"\" var nsec: I32 = 0 var sec: I32 = 0 var min: I32 = 0 var hour: I32 = 0 var day_of_month: I32 = 1 var month: I32 = 1 var year: I32 = 1970 var day_of_week: I32 = 4 var day_of_year: I32 = 1 new create(seconds: I64 = 0, nanoseconds: I64 = 0) => \"\"\" Create a date from a POSIX time. Negative arguments will be changed to zero. \"\"\" @ponyint_gmtime[None](this, _negative_to_zero(seconds), _negative_to_zero(nanoseconds)) fun time(): I64 => \"\"\" Return a POSIX time. Treats the date as UTC. \"\"\" @ponyint_timegm[I64](this) fun ref normal() => \"\"\" Normalise all the fields of the date. For example, if the hour is 24, it is set to 0 and the day is advanced. This allows fields to be changed naively, eg. adding 1000 to hours to advance the time by 1000 hours, and then normalising the date. \"\"\" @ponyint_gmtime[None](this, time(), nsec) fun format(fmt: String): String ? => \"\"\" Format the time as for strftime. \"\"\" recover String.from_cstring(@ponyint_formattime[Pointer[U8]](this, fmt.cstring())?) end fun _negative_to_zero(value: I64): I64 => if value > 0 then value else 0 end","title":"posix_date.pony"},{"location":"src/time/time/","text":"\"\"\" # Time Package The Time Package provides classes and methods for timing operations, dealing with dates and times, and scheduling tasks. \"\"\" use \"lib:rt\" if linux use @clock_gettime[I32](clock: U32, ts: Pointer[(I64, I64)]) if lp64 and (linux or bsd) use @clock_gettime[I32](clock: U32, ts: Pointer[(I32, I32)]) if ilp32 and (linux or bsd) use @mach_absolute_time[U64]() if osx type _Clock is (_ClockRealtime | _ClockMonotonic) primitive _ClockRealtime fun apply(): U32 => ifdef linux or bsd then 0 else compile_error \"no clock_gettime realtime clock\" end primitive _ClockMonotonic fun apply(): U32 => ifdef linux then 1 elseif bsd then 4 else compile_error \"no clock_gettime monotonic clock\" end primitive Time \"\"\" A collection of ways to fetch the current time. \"\"\" fun now(): (I64 /*sec*/, I64 /*nsec*/) => \"\"\" The wall-clock adjusted system time with nanoseconds. Return: (seconds, nanoseconds) \"\"\" ifdef osx then var ts: (I64, I64) = (0, 0) @gettimeofday[I32](addressof ts, U64(0)) (ts._1, ts._2 * 1000) elseif linux or bsd then _clock_gettime(_ClockRealtime) elseif windows then var ft: (U32, U32) = (0, 0) @GetSystemTimeAsFileTime[None](addressof ft) var qft = ft._1.u64() or (ft._2.u64() << 32) var epoch = qft.i64() - 116444736000000000 var sec = epoch / 10000000 var nsec = (epoch - (sec * 10000000)) * 100 (sec, nsec) else compile_error \"unsupported platform\" end fun seconds(): I64 => \"\"\" The wall-clock adjusted system time. \"\"\" @time[I64](U64(0)) fun millis(): U64 => \"\"\" Monotonic unadjusted milliseconds. \"\"\" ifdef osx then @mach_absolute_time() / 1000000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000) + (ts._2 / 1000000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000) / qpf else compile_error \"unsupported platform\" end fun micros(): U64 => \"\"\" Monotonic unadjusted microseconds. \"\"\" ifdef osx then @mach_absolute_time() / 1000 elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000) + (ts._2 / 1000)).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000) / qpf else compile_error \"unsupported platform\" end fun nanos(): U64 => \"\"\" Monotonic unadjusted nanoseconds. \"\"\" ifdef osx then @mach_absolute_time() elseif linux or bsd then var ts = _clock_gettime(_ClockMonotonic) ((ts._1 * 1000000000) + ts._2).u64() elseif windows then (let qpc, let qpf) = _query_performance_counter() (qpc * 1000000000) / qpf else compile_error \"unsupported platform\" end fun cycles(): U64 => \"\"\" Processor cycle count. Don't use this for performance timing, as it does not control for out-of-order execution. \"\"\" @\"llvm.readcyclecounter\"[U64]() fun perf_begin(): U64 => \"\"\" Get a cycle count for beginning a performance testing block. This will will prevent instructions from before this call leaking into the block and instructions after this call being executed earlier. \"\"\" ifdef x86 then @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](I32(0)) @\"llvm.x86.rdtsc\"[U64]() else compile_error \"perf_begin only supported on x86\" end fun perf_end(): U64 => \"\"\" Get a cycle count for ending a performance testing block. This will will prevent instructions from after this call leaking into the block and instructions before this call being executed later. \"\"\" ifdef x86 then var aux: I32 = 0 var ts = @\"internal.x86.rdtscp\"[U64](addressof aux) @\"internal.x86.cpuid\"[(I32, I32, I32, I32)](I32(0)) ts else compile_error \"perf_end only supported on x86\" end fun _clock_gettime(clock: _Clock): (I64, I64) => \"\"\" Return a clock time on linux and bsd. \"\"\" ifdef lp64 and (linux or bsd) then var ts: (I64, I64) = (0, 0) @clock_gettime(clock(), addressof ts) ts elseif ilp32 and (linux or bsd) then var ts: (I32, I32) = (0, 0) @clock_gettime(clock(), addressof ts) (ts._1.i64(), ts._2.i64()) else compile_error \"no clock_gettime\" end fun _query_performance_counter(): (U64 /* qpc */, U64 /* qpf */) => \"\"\" Return QPC and QPF. \"\"\" ifdef windows then var pf: (U32, U32) = (0, 0) var pc: (U32, U32) = (0, 0) @QueryPerformanceFrequency[U32](addressof pf) @QueryPerformanceCounter[U32](addressof pc) let qpf = pf._1.u64() or (pf._2.u64() << 32) let qpc = pc._1.u64() or (pc._2.u64() << 32) (qpc, qpf) else compile_error \"no QueryPerformanceCounter\" end","title":"time.pony"},{"location":"src/time/timer/","text":"use \"collections\" class Timer \"\"\" The `Timer` class represents a timer that fires after an expiration time, and then fires at an interval. When a `Timer` fires, it calls the `apply` method of the `TimerNotify` object that was passed to it when it was created. The following example waits 5 seconds and then fires every 2 seconds, and when it fires the `TimerNotify` object prints how many times it has been called: ```pony use \"time\" actor Main new create(env: Env) => let timers = Timers let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000) timers(consume timer) class Notify is TimerNotify let _env: Env var _counter: U32 = 0 new iso create(env: Env) => _env = env fun ref apply(timer: Timer, count: U64): Bool => _env.out.print(_counter.string()) _counter = _counter + 1 true ``` \"\"\" var _expiration: U64 var _interval: U64 let _notify: TimerNotify embed _node: ListNode[Timer] new iso create( notify: TimerNotify iso, expiration: U64, interval: U64 = 0) => \"\"\" Create a new timer. The expiration time should be a nanosecond count until the first expiration. The interval should also be in nanoseconds. \"\"\" _expiration = expiration + Time.nanos() _interval = interval _notify = consume notify _node = ListNode[Timer] try _node()? = this end new abs(notify: TimerNotify, expiration: (I64, I64), interval: U64 = 0) => \"\"\" Creates a new timer with an absolute expiration time rather than a relative time. The expiration time is wall-clock adjusted system time. \"\"\" _expiration = _abs_expiration_time(expiration) _interval = interval _notify = notify _node = ListNode[Timer] try _node()? = this end fun ref _cancel() => \"\"\" Remove the timer from any list. \"\"\" _node.remove() _notify.cancel(this) fun ref _get_node(): ListNode[Timer] => \"\"\" Returns the list node pointing to the timer. Used to schedule the timer in a queue. \"\"\" _node fun ref _slop(bits: USize) => \"\"\" Apply slop bits to the expiration time and interval. This reduces the precision by the given number of bits, effectively quantizing time. \"\"\" _expiration = _expiration >> bits.u64() if _interval > 0 then _interval = (_interval >> bits.u64()).max(1) end fun ref _fire(current: U64): Bool => \"\"\" A timer is fired if its expiration time is in the past. The notifier is called with a count based on the elapsed time since expiration and the timer interval. The expiration time is set to the next expiration. Returns true if the timer should be rescheduled, false otherwise. \"\"\" let elapsed = current - _expiration if elapsed < (1 << 63) then let count = (elapsed / _interval) + 1 _expiration = _expiration + (count * _interval) if not _notify(this, count) then _notify.cancel(this) return false end end (_interval > 0) or ((_expiration - current) < (1 << 63)) fun _next(): U64 => \"\"\" Returns the next expiration time. \"\"\" _expiration fun tag _abs_expiration_time(wall: (I64, I64)): U64 => \"\"\" Converts a wall-clock adjusted system time to absolute expiration time \"\"\" let wall_now = Time.now() Time.nanos() + (((wall._1 * 1000000000) + wall._2) - ((wall_now._1 * 1000000000) + wall_now._2)).u64()","title":"timer.pony"},{"location":"src/time/timer_notify/","text":"interface TimerNotify \"\"\" Notifications for timer. \"\"\" fun ref apply(timer: Timer, count: U64): Bool => \"\"\" Called with the the number of times the timer has fired since this was last called. Usually, the value of `count` will be 1. If it is not 1, it means that the timer isn't firing on schedule. For example, if your timer is set to fire every 10 milliseconds, and `count` is 2, that means it has been between 20-29 milliseconds since the last time your timer fired. Non 1 values for a timer are rare and indicate a system under heavy load. Return true to reschedule the timer (if it has an interval), or false to cancel the timer (even if it has an interval). \"\"\" true fun ref cancel(timer: Timer) => \"\"\" Called if the timer is cancelled. This is also called if the notifier returns false from its `apply` method. \"\"\" None","title":"timer_notify.pony"},{"location":"src/time/timers/","text":"use \"collections\" use @pony_asio_event_create[AsioEventID]( owner: AsioEventNotify, fd: U32, flags: U32, nsec: U64, noisy: Bool) use @pony_asio_event_setnsec[U32](event: AsioEventID, nsec: U64) use @pony_asio_event_unsubscribe[None](event: AsioEventID) use @pony_asio_event_destroy[None](event: AsioEventID) actor Timers \"\"\" A hierarchical set of timing wheels. \"\"\" var _current: U64 = 0 let _slop: USize embed _map: MapIs[Timer tag, Timer] = MapIs[Timer tag, Timer] embed _wheel: Array[_TimingWheel] = Array[_TimingWheel](_wheels()) embed _pending: List[Timer] = List[Timer] var _event: AsioEventID = AsioEvent.none() new create(slop: USize = 20) => \"\"\" Create a timer handler with the specified number of slop bits. No slop bits means trying for nanosecond resolution. 10 slop bits is approximately microsecond resolution, 20 slop bits is approximately millisecond resolution. \"\"\" _slop = slop _set_time() for i in Range(0, _wheels()) do _wheel.push(_TimingWheel(i)) end be apply(timer: Timer iso) => \"\"\" Sets a timer. Fire it if need be, schedule it on the right timing wheel, then rearm the timer. \"\"\" let timer': Timer ref = consume timer _map(timer') = timer' timer'._slop(_slop) _fire(timer') _advance() be cancel(timer: Timer tag) => \"\"\" Cancels a timer. \"\"\" try (_, let timer') = _map.remove(timer)? timer'._cancel() if (_map.size() == 0) and (not _event.is_null()) then // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end be dispose() => \"\"\" Dispose of this set of timing wheels. \"\"\" for wheel in _wheel.values() do wheel.clear() end _map.clear() if not _event.is_null() then @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end be _event_notify(event: AsioEventID, flags: U32, arg: U32) => \"\"\" When the event fires, advance the timing wheels. \"\"\" if AsioEvent.disposable(flags) then @pony_asio_event_destroy(event) elseif event is _event then _advance() end fun ref _advance() => \"\"\" Update the current time, process all the timing wheels, and set the event for the next time we need to advance. \"\"\" let elapsed = _set_time() try for i in Range(0, _wheels()) do if not _wheel(i)?.advance(_pending, _current, elapsed) then break end end for timer in _pending.values() do _fire(timer) end end _pending.clear() var nsec = _next() if _event.is_null() then if nsec != -1 then // Create a new event. _event = @pony_asio_event_create(this, 0, AsioEvent.timer(), nsec, true) end else if nsec != -1 then // Update an existing event. @pony_asio_event_setnsec(_event, nsec) else // Unsubscribe an existing event. @pony_asio_event_unsubscribe(_event) _event = AsioEvent.none() end end fun ref _fire(timer: Timer) => \"\"\" Fire a timer if necessary, then schedule it on the correct timing wheel based on how long it is until it expires. \"\"\" if not timer._fire(_current) then try _map.remove(timer)? end return end try let rem = timer._next() - _current _get_wheel(rem)?.schedule(consume timer) end fun _next(): U64 => \"\"\" Return the next time at which the timing wheels should be advanced. This is adjusted for slop, so it yields nanoseconds. If no events are pending, this returns -1. \"\"\" var next: U64 = -1 try for i in Range(0, _wheels()) do next = next.min(_wheel(i)?.next(_current)) end end if next != -1 then next = next << _slop.u64() end next fun ref _set_time(): U64 => \"\"\" Set the current time with precision reduced by the slop bits. Return the elapsed time. \"\"\" let previous = _current = Time.nanos() >> _slop.u64() _current - previous fun ref _get_wheel(rem: U64): _TimingWheel ? => \"\"\" Get the hierarchical timing wheel for the given time until expiration. \"\"\" let t = rem.min(_expiration_max()) let i = ((t.bitwidth() - t.clz()) - 1).usize() / _bits() _wheel(i)? fun tag _expiration_max(): U64 => \"\"\" Get the maximum time the timing wheels cover. Anything beyond this is scheduled on the last timing wheel. \"\"\" ((1 << (_wheels() * _bits())) - 1).u64() fun tag _wheels(): USize => 4 fun tag _bits(): USize => 6","title":"timers.pony"}]}