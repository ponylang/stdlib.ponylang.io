{
    "docs": [
        {
            "location": "/", 
            "text": "Packages\n\n\n\n\npackages/stdlib\n\n\nassert\n\n\nbackpressure\n\n\nbuffered\n\n\nbuiltin\n\n\nbureaucracy\n\n\ncapsicum\n\n\ncli\n\n\ncollections\n\n\ncollections/persistent\n\n\ncrypto\n\n\ndebug\n\n\nencode/base64\n\n\nfiles\n\n\nformat\n\n\nglob\n\n\nini\n\n\nitertools\n\n\njson\n\n\nlogger\n\n\nmath\n\n\nnet\n\n\nnet/http\n\n\nnet/ssl\n\n\noptions\n\n\nponybench\n\n\nponytest\n\n\nprocess\n\n\npromises\n\n\nrandom\n\n\nregex\n\n\nserialise\n\n\nsignals\n\n\nstrings\n\n\nterm\n\n\ntime", 
            "title": "stdlib"
        }, 
        {
            "location": "/packages-stdlib--index/", 
            "text": "Pony Standard Library\n\n\nThis package represents the test suite for the Pony standard library.\n\n\nFor every new package, please add a Main actor and tests to the package in a\nfile called 'test.pony'. Then add a corresponding use directive and a line to\nthe main actor constructor of this package to invoke those tests.\n\n\nAll tests can be run by compiling and running packages/stdlib.", 
            "title": "Package"
        }, 
        {
            "location": "/packages-stdlib--index/#pony-standard-library", 
            "text": "This package represents the test suite for the Pony standard library.  For every new package, please add a Main actor and tests to the package in a\nfile called 'test.pony'. Then add a corresponding use directive and a line to\nthe main actor constructor of this package to invoke those tests.  All tests can be run by compiling and running packages/stdlib.", 
            "title": "Pony Standard Library"
        }, 
        {
            "location": "/assert--index/", 
            "text": "Assert package\n\n\nContains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the \ndebug\n flag, check out \nAssert\n. For\nassertions that are always enabled, check out \nFact\n.\n\n\nPublic Types\n\n\n\n\nprimitive Assert\n\n\nprimitive Fact", 
            "title": "Package"
        }, 
        {
            "location": "/assert--index/#assert-package", 
            "text": "Contains runtime assertions. If you are looking for assertion that only run\nwhen your code was compiled with the  debug  flag, check out  Assert . For\nassertions that are always enabled, check out  Fact .", 
            "title": "Assert package"
        }, 
        {
            "location": "/assert--index/#public-types", 
            "text": "primitive Assert  primitive Fact", 
            "title": "Public Types"
        }, 
        {
            "location": "/assert-Assert/", 
            "text": "Assert\n\n\nThis is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.\n\n\nprimitive val Assert\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Assert val^\n\n\n\n\nReturns\n\n\n\n\nAssert\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ntest: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Assert val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAssert\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Assert val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAssert\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Assert"
        }, 
        {
            "location": "/assert-Assert/#assert", 
            "text": "This is a debug only assertion. If the test is false, it will print any\nsupplied error message to stderr and raise an error.  primitive val Assert", 
            "title": "Assert"
        }, 
        {
            "location": "/assert-Assert/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/assert-Assert/#create", 
            "text": "new val create()\n: Assert val^", 
            "title": "create"
        }, 
        {
            "location": "/assert-Assert/#returns", 
            "text": "Assert  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Assert/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/assert-Assert/#apply", 
            "text": "fun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?", 
            "title": "apply"
        }, 
        {
            "location": "/assert-Assert/#parameters", 
            "text": "test:  Bool  val  msg:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/assert-Assert/#returns_1", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Assert/#eq", 
            "text": "fun box eq(\n  that: Assert val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/assert-Assert/#parameters_1", 
            "text": "that:  Assert  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/assert-Assert/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Assert/#ne", 
            "text": "fun box ne(\n  that: Assert val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/assert-Assert/#parameters_2", 
            "text": "that:  Assert  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/assert-Assert/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Fact/", 
            "text": "Fact\n\n\nThis is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.\n\n\nprimitive val Fact\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Fact val^\n\n\n\n\nReturns\n\n\n\n\nFact\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ntest: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Fact val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFact\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Fact val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFact\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Fact"
        }, 
        {
            "location": "/assert-Fact/#fact", 
            "text": "This is an assertion that is always enabled. If the test is false, it will\nprint any supplied error message to stderr and raise an error.  primitive val Fact", 
            "title": "Fact"
        }, 
        {
            "location": "/assert-Fact/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/assert-Fact/#create", 
            "text": "new val create()\n: Fact val^", 
            "title": "create"
        }, 
        {
            "location": "/assert-Fact/#returns", 
            "text": "Fact  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Fact/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/assert-Fact/#apply", 
            "text": "fun box apply(\n  test: Bool val,\n  msg: String val = seq)\n: None val ?", 
            "title": "apply"
        }, 
        {
            "location": "/assert-Fact/#parameters", 
            "text": "test:  Bool  val  msg:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/assert-Fact/#returns_1", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Fact/#eq", 
            "text": "fun box eq(\n  that: Fact val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/assert-Fact/#parameters_1", 
            "text": "that:  Fact  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/assert-Fact/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/assert-Fact/#ne", 
            "text": "fun box ne(\n  that: Fact val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/assert-Fact/#parameters_2", 
            "text": "that:  Fact  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/assert-Fact/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure--index/", 
            "text": "Backpressure Package\n\n\nThe Backpressure package allows Pony programmers to participate in Pony's\nruntime backpressure system. The goal of the backpressure system is to prevent\nan actor's mailbox from growing at an unbounded rate.\n\n\nAt a high level, the runtime backpressure system works by adjusting the\nscheduling of actors. When an actor becomes overload, the Pony runtime will\ndeprioritize scheduling the actors that are sending to it. This change in\nscheduling allows the overloaded actor to catch up.\n\n\nThe Pony runtime can detect overloading based on message queue size. However,\nthe overloading of some types of actors is harder to detect. Let's take the\ncase of actors like \nTCPConnection\n.\n\n\nTCPConnection\n manages a socket for sending data to and receiving data from\nanother process. TCP connections can experience backpressure from the outside\nour Pony program that prevents them from sending. There's no way for the Pony\nruntime to detect this so, intervention by the programmer is needed.\n\n\nTCPConnection\n is a single example. This Backpressure package exists to allow\na programmer to indicate to the runtime that a given actor is experiencing\npressure and sending messages to it should be adjusted accordingly.\n\n\nAny actor that needs to be able to tell the runtime to \"send me messages\nslower\" due to external conditions can do so via this package. Additionally,\nactors that maintain there own internal queues of any sort, say for buffering,\nare also prime candidates to for using this package. If an actor's internal\nqueue grows too large, it can call \nBackpressure.apply\n to let the runtime know\nit is under pressure.\n\n\nExample program\n\n\n// Here we have a TCPConnectionNotify that upon construction\n// is given a BackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\n\n\nuse \"backpressure\"\nuse \"collections\"\nuse \"net\"\n\n\nclass SlowDown is TCPConnectionNotify\n  let _auth: BackpressureAuth\n  let _out: StdStream\n\n\nnew iso create(auth: BackpressureAuth, out: StdStream) =\n\n    _auth = auth\n    _out = out\n\n\nfun ref throttled(connection: TCPConnection ref) =\n\n    _out.print(\"Experiencing backpressure!\")\n    Backpressure.apply(_auth)\n\n\nfun ref unthrottled(connection: TCPConnection ref) =\n\n    _out.print(\"Releasing backpressure!\")\n    Backpressure.release(_auth)\n\n\nfun ref connect_failed(conn: TCPConnection ref) =\n\n    None\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let auth = env.root as AmbientAuth\n      let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n        \"\", \"7669\")\n    end\n\n\nCaveat\n\n\nThe runtime backpressure is a powerful system. By intervening, programmers can\ncreate deadlocks. Any call to \nBackpressure.apply\n should be matched by a\ncorresponding call to \nBackpressure.release\n. Authorization via the\n\nApplyReleaseBackpressureAuth\n capability is required to apply or release\nbackpressure. By requiring that the caller have a token to apply or release a\nbackpressure, rouge 3rd party library code can't run wild and unknowingly\nmess with the runtime.\n\n\nPublic Types\n\n\n\n\ntype BackpressureAuth\n\n\nprimitive Backpressure\n\n\nprimitive ApplyReleaseBackpressureAuth", 
            "title": "Package"
        }, 
        {
            "location": "/backpressure--index/#backpressure-package", 
            "text": "The Backpressure package allows Pony programmers to participate in Pony's\nruntime backpressure system. The goal of the backpressure system is to prevent\nan actor's mailbox from growing at an unbounded rate.  At a high level, the runtime backpressure system works by adjusting the\nscheduling of actors. When an actor becomes overload, the Pony runtime will\ndeprioritize scheduling the actors that are sending to it. This change in\nscheduling allows the overloaded actor to catch up.  The Pony runtime can detect overloading based on message queue size. However,\nthe overloading of some types of actors is harder to detect. Let's take the\ncase of actors like  TCPConnection .  TCPConnection  manages a socket for sending data to and receiving data from\nanother process. TCP connections can experience backpressure from the outside\nour Pony program that prevents them from sending. There's no way for the Pony\nruntime to detect this so, intervention by the programmer is needed.  TCPConnection  is a single example. This Backpressure package exists to allow\na programmer to indicate to the runtime that a given actor is experiencing\npressure and sending messages to it should be adjusted accordingly.  Any actor that needs to be able to tell the runtime to \"send me messages\nslower\" due to external conditions can do so via this package. Additionally,\nactors that maintain there own internal queues of any sort, say for buffering,\nare also prime candidates to for using this package. If an actor's internal\nqueue grows too large, it can call  Backpressure.apply  to let the runtime know\nit is under pressure.", 
            "title": "Backpressure Package"
        }, 
        {
            "location": "/backpressure--index/#example-program", 
            "text": "// Here we have a TCPConnectionNotify that upon construction\n// is given a BackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed  use \"backpressure\"\nuse \"collections\"\nuse \"net\"  class SlowDown is TCPConnectionNotify\n  let _auth: BackpressureAuth\n  let _out: StdStream  new iso create(auth: BackpressureAuth, out: StdStream) = \n    _auth = auth\n    _out = out  fun ref throttled(connection: TCPConnection ref) = \n    _out.print(\"Experiencing backpressure!\")\n    Backpressure.apply(_auth)  fun ref unthrottled(connection: TCPConnection ref) = \n    _out.print(\"Releasing backpressure!\")\n    Backpressure.release(_auth)  fun ref connect_failed(conn: TCPConnection ref) = \n    None  actor Main\n  new create(env: Env) = \n    try\n      let auth = env.root as AmbientAuth\n      let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n        \"\", \"7669\")\n    end", 
            "title": "Example program"
        }, 
        {
            "location": "/backpressure--index/#caveat", 
            "text": "The runtime backpressure is a powerful system. By intervening, programmers can\ncreate deadlocks. Any call to  Backpressure.apply  should be matched by a\ncorresponding call to  Backpressure.release . Authorization via the ApplyReleaseBackpressureAuth  capability is required to apply or release\nbackpressure. By requiring that the caller have a token to apply or release a\nbackpressure, rouge 3rd party library code can't run wild and unknowingly\nmess with the runtime.", 
            "title": "Caveat"
        }, 
        {
            "location": "/backpressure--index/#public-types", 
            "text": "type BackpressureAuth  primitive Backpressure  primitive ApplyReleaseBackpressureAuth", 
            "title": "Public Types"
        }, 
        {
            "location": "/backpressure-BackpressureAuth/", 
            "text": "BackpressureAuth\n\n\ntype BackpressureAuth is\n  (AmbientAuth val | ApplyReleaseBackpressureAuth val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAmbientAuth\n val | \nApplyReleaseBackpressureAuth\n val)", 
            "title": "type BackpressureAuth"
        }, 
        {
            "location": "/backpressure-BackpressureAuth/#backpressureauth", 
            "text": "type BackpressureAuth is\n  (AmbientAuth val | ApplyReleaseBackpressureAuth val)", 
            "title": "BackpressureAuth"
        }, 
        {
            "location": "/backpressure-BackpressureAuth/#type-alias-for", 
            "text": "( AmbientAuth  val |  ApplyReleaseBackpressureAuth  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/backpressure-Backpressure/", 
            "text": "Backpressure\n\n\nprimitive val Backpressure\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Backpressure val^\n\n\n\n\nReturns\n\n\n\n\nBackpressure\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nApplyReleaseBackpressureAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrelease\n\n\nfun box release(\n  auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nApplyReleaseBackpressureAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Backpressure val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nBackpressure\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Backpressure val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nBackpressure\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Backpressure"
        }, 
        {
            "location": "/backpressure-Backpressure/#backpressure", 
            "text": "primitive val Backpressure", 
            "title": "Backpressure"
        }, 
        {
            "location": "/backpressure-Backpressure/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/backpressure-Backpressure/#create", 
            "text": "new val create()\n: Backpressure val^", 
            "title": "create"
        }, 
        {
            "location": "/backpressure-Backpressure/#returns", 
            "text": "Backpressure  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-Backpressure/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/backpressure-Backpressure/#apply", 
            "text": "fun box apply(\n  auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val))\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/backpressure-Backpressure/#parameters", 
            "text": "auth: ( AmbientAuth  val |  ApplyReleaseBackpressureAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-Backpressure/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-Backpressure/#release", 
            "text": "fun box release(\n  auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val))\n: None val", 
            "title": "release"
        }, 
        {
            "location": "/backpressure-Backpressure/#parameters_1", 
            "text": "auth: ( AmbientAuth  val |  ApplyReleaseBackpressureAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-Backpressure/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-Backpressure/#eq", 
            "text": "fun box eq(\n  that: Backpressure val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/backpressure-Backpressure/#parameters_2", 
            "text": "that:  Backpressure  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-Backpressure/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-Backpressure/#ne", 
            "text": "fun box ne(\n  that: Backpressure val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/backpressure-Backpressure/#parameters_3", 
            "text": "that:  Backpressure  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-Backpressure/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/", 
            "text": "ApplyReleaseBackpressureAuth\n\n\nprimitive val ApplyReleaseBackpressureAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: AmbientAuth val)\n: ApplyReleaseBackpressureAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nApplyReleaseBackpressureAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: ApplyReleaseBackpressureAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nApplyReleaseBackpressureAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ApplyReleaseBackpressureAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nApplyReleaseBackpressureAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ApplyReleaseBackpressureAuth"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#applyreleasebackpressureauth", 
            "text": "primitive val ApplyReleaseBackpressureAuth", 
            "title": "ApplyReleaseBackpressureAuth"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#create", 
            "text": "new val create(\n  from: AmbientAuth val)\n: ApplyReleaseBackpressureAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#parameters", 
            "text": "from:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#returns", 
            "text": "ApplyReleaseBackpressureAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#eq", 
            "text": "fun box eq(\n  that: ApplyReleaseBackpressureAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#parameters_1", 
            "text": "that:  ApplyReleaseBackpressureAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#ne", 
            "text": "fun box ne(\n  that: ApplyReleaseBackpressureAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#parameters_2", 
            "text": "that:  ApplyReleaseBackpressureAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/backpressure-ApplyReleaseBackpressureAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered--index/", 
            "text": "Buffered Package\n\n\nThe Buffered package provides two classes, \nWriter\n and \nReader\n, for\nwriting and reading messages using common encodings. These classes are\nuseful when dealing with things like network data and binary file\nformats.\n\n\nExample program\n\n\nuse \nbuffered\n\n\nactor Main\n  new create(env: Env) =\n\n    let reader = Reader\n    let writer = Writer\n\n    writer.u32_be(42)\n    writer.f32_be(3.14)\n\n    let b = recover iso Array[U8] end\n\n    for chunk in writer.done().values() do\n      b.append(chunk)\n    end\n\n    reader.append(consume b)\n\n    try\n      env.out.print(reader.u32_be()?.string()) // prints 42\n      env.out.print(reader.f32_be()?.string()) // prints 3.14\n    end\n\n\n\n\nPublic Types\n\n\n\n\nclass Writer\n\n\nclass Reader", 
            "title": "Package"
        }, 
        {
            "location": "/buffered--index/#buffered-package", 
            "text": "The Buffered package provides two classes,  Writer  and  Reader , for\nwriting and reading messages using common encodings. These classes are\nuseful when dealing with things like network data and binary file\nformats.", 
            "title": "Buffered Package"
        }, 
        {
            "location": "/buffered--index/#example-program", 
            "text": "use  buffered \n\nactor Main\n  new create(env: Env) = \n    let reader = Reader\n    let writer = Writer\n\n    writer.u32_be(42)\n    writer.f32_be(3.14)\n\n    let b = recover iso Array[U8] end\n\n    for chunk in writer.done().values() do\n      b.append(chunk)\n    end\n\n    reader.append(consume b)\n\n    try\n      env.out.print(reader.u32_be()?.string()) // prints 42\n      env.out.print(reader.f32_be()?.string()) // prints 3.14\n    end", 
            "title": "Example program"
        }, 
        {
            "location": "/buffered--index/#public-types", 
            "text": "class Writer  class Reader", 
            "title": "Public Types"
        }, 
        {
            "location": "/buffered-Writer/", 
            "text": "Writer\n\n\nA buffer for building messages.\n\n\nWriter\n provides an way to create byte sequences using common\ndata encodings. The \nWriter\n manages the underlying arrays and\nsizes. It is useful for encoding data to send over a network or\nstore in a file. Once a message has been built you can call \ndone()\n\nto get the message's \nByteSeq\ns, and you can then reuse the\n\nWriter\n for creating a new message.\n\n\nFor example, suppose we have a TCP-based network data protocol where\nmessages consist of the following:\n\n\n\n\nmessage_length\n - the number of bytes in the message as a\n  big-endian 32-bit integer\n\n\nlist_size\n - the number of items in the following list of items\n  as a big-endian 32-bit integer\n\n\nzero or more items of the following data:\n\n\na big-endian 64-bit floating point number\n\n\na string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string\n\n\n\n\nA message would be something like this:\n\n\n[message_length][list_size][float1][string1][float2][string2]...\n\n\n\n\nThe following program uses a write buffer to encode an array of\ntuples as a message of this type:\n\n\nuse \nbuffered\n\n\nactor Main\n  new create(env: Env) =\n\n    let wb = Writer\n    let messages = [[(F32(3597.82), \nAnderson\n); (F32(-7979.3), \nGraham\n)]\n                    [(F32(3.14159), \nHopper\n); (F32(-83.83), \nJones\n)]]\n    for items in messages.values() do\n      wb.i32_be((items.size() / 2).i32())\n      for (f, s) in items.values() do\n        wb.f32_be(f)\n        wb.i32_be(s.size().i32())\n        wb.write(s.array())\n      end\n      let wb_msg = Writer\n      wb_msg.i32_be(wb.size().i32())\n      wb_msg.writev(wb.done())\n      env.out.writev(wb_msg.done())\n    end\n\n\n\n\nclass ref Writer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: Writer iso^\n\n\n\n\nReturns\n\n\n\n\nWriter\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\nreserve_chunks\n\n\nReserve space for size' chunks.\n\n\nThis needs to be recalled after every call to \ndone\n\nas \ndone\n resets the chunks.\n\n\nfun ref reserve_chunks(\n  size': USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsize': \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreserve_current\n\n\nReserve space for size bytes in \n_current\n.\n\n\nfun ref reserve_current(\n  size': USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsize': \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nu8\n\n\nWrite a byte to the buffer.\n\n\nfun ref u8(\n  data: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu16_le\n\n\nWrite a U16 to the buffer in little-endian byte order.\n\n\nfun ref u16_le(\n  data: U16 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu16_be\n\n\nWrite a U16 to the buffer in big-endian byte order.\n\n\nfun ref u16_be(\n  data: U16 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni16_le\n\n\nWrite an I16 to the buffer in little-endian byte order.\n\n\nfun ref i16_le(\n  data: I16 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni16_be\n\n\nWrite an I16 to the buffer in big-endian byte order.\n\n\nfun ref i16_be(\n  data: I16 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu32_le\n\n\nWrite a U32 to the buffer in little-endian byte order.\n\n\nfun ref u32_le(\n  data: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu32_be\n\n\nWrite a U32 to the buffer in big-endian byte order.\n\n\nfun ref u32_be(\n  data: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni32_le\n\n\nWrite an I32 to the buffer in little-endian byte order.\n\n\nfun ref i32_le(\n  data: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni32_be\n\n\nWrite an I32 to the buffer in big-endian byte order.\n\n\nfun ref i32_be(\n  data: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf32_le\n\n\nWrite an F32 to the buffer in little-endian byte order.\n\n\nfun ref f32_le(\n  data: F32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf32_be\n\n\nWrite an F32 to the buffer in big-endian byte order.\n\n\nfun ref f32_be(\n  data: F32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu64_le\n\n\nWrite a U64 to the buffer in little-endian byte order.\n\n\nfun ref u64_le(\n  data: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu64_be\n\n\nWrite a U64 to the buffer in big-endian byte order.\n\n\nfun ref u64_be(\n  data: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni64_le\n\n\nWrite an I64 to the buffer in little-endian byte order.\n\n\nfun ref i64_le(\n  data: I64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni64_be\n\n\nWrite an I64 to the buffer in big-endian byte order.\n\n\nfun ref i64_be(\n  data: I64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf64_le\n\n\nWrite an F64 to the buffer in little-endian byte order.\n\n\nfun ref f64_le(\n  data: F64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nf64_be\n\n\nWrite an F64 to the buffer in big-endian byte order.\n\n\nfun ref f64_be(\n  data: F64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu128_le\n\n\nWrite a U128 to the buffer in little-endian byte order.\n\n\nfun ref u128_le(\n  data: U128 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nu128_be\n\n\nWrite a U128 to the buffer in big-endian byte order.\n\n\nfun ref u128_be(\n  data: U128 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni128_le\n\n\nWrite an I128 to the buffer in little-endian byte order.\n\n\nfun ref i128_le(\n  data: I128 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ni128_be\n\n\nWrite an I128 to the buffer in big-endian byte order.\n\n\nfun ref i128_be(\n  data: I128 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwrite\n\n\nWrite a ByteSeq to the buffer.\n\n\nfun ref write(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwritev\n\n\nWrite ByteSeqs to the buffer.\n\n\nfun ref writev(\n  data: ByteSeqIter val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndone\n\n\nReturn an array of buffered ByteSeqs and reset the Writer's buffer.\n\n\nfun ref done()\n: Array[(String val | Array[U8 val] val)] iso^\n\n\n\n\nReturns\n\n\n\n\nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] iso^\n\n\n\n\n\n\nPrivate Functions\n\n\n_append_current\n\n\nfun ref _append_current()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_check\n\n\nfun ref _check(\n  size': USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsize': \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_byte\n\n\nfun ref _byte(\n  data: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Writer"
        }, 
        {
            "location": "/buffered-Writer/#writer", 
            "text": "A buffer for building messages.  Writer  provides an way to create byte sequences using common\ndata encodings. The  Writer  manages the underlying arrays and\nsizes. It is useful for encoding data to send over a network or\nstore in a file. Once a message has been built you can call  done() \nto get the message's  ByteSeq s, and you can then reuse the Writer  for creating a new message.  For example, suppose we have a TCP-based network data protocol where\nmessages consist of the following:   message_length  - the number of bytes in the message as a\n  big-endian 32-bit integer  list_size  - the number of items in the following list of items\n  as a big-endian 32-bit integer  zero or more items of the following data:  a big-endian 64-bit floating point number  a string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string   A message would be something like this:  [message_length][list_size][float1][string1][float2][string2]...  The following program uses a write buffer to encode an array of\ntuples as a message of this type:  use  buffered \n\nactor Main\n  new create(env: Env) = \n    let wb = Writer\n    let messages = [[(F32(3597.82),  Anderson ); (F32(-7979.3),  Graham )]\n                    [(F32(3.14159),  Hopper ); (F32(-83.83),  Jones )]]\n    for items in messages.values() do\n      wb.i32_be((items.size() / 2).i32())\n      for (f, s) in items.values() do\n        wb.f32_be(f)\n        wb.i32_be(s.size().i32())\n        wb.write(s.array())\n      end\n      let wb_msg = Writer\n      wb_msg.i32_be(wb.size().i32())\n      wb_msg.writev(wb.done())\n      env.out.writev(wb_msg.done())\n    end  class ref Writer", 
            "title": "Writer"
        }, 
        {
            "location": "/buffered-Writer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/buffered-Writer/#create", 
            "text": "new iso create()\n: Writer iso^", 
            "title": "create"
        }, 
        {
            "location": "/buffered-Writer/#returns", 
            "text": "Writer  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/buffered-Writer/#reserve_chunks", 
            "text": "Reserve space for size' chunks.  This needs to be recalled after every call to  done \nas  done  resets the chunks.  fun ref reserve_chunks(\n  size': USize val)\n: None val", 
            "title": "reserve_chunks"
        }, 
        {
            "location": "/buffered-Writer/#parameters", 
            "text": "size':  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#reserve_current", 
            "text": "Reserve space for size bytes in  _current .  fun ref reserve_current(\n  size': USize val)\n: None val", 
            "title": "reserve_current"
        }, 
        {
            "location": "/buffered-Writer/#parameters_1", 
            "text": "size':  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#size", 
            "text": "fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/buffered-Writer/#returns_3", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u8", 
            "text": "Write a byte to the buffer.  fun ref u8(\n  data: U8 val)\n: None val", 
            "title": "u8"
        }, 
        {
            "location": "/buffered-Writer/#parameters_2", 
            "text": "data:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u16_le", 
            "text": "Write a U16 to the buffer in little-endian byte order.  fun ref u16_le(\n  data: U16 val)\n: None val", 
            "title": "u16_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_3", 
            "text": "data:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u16_be", 
            "text": "Write a U16 to the buffer in big-endian byte order.  fun ref u16_be(\n  data: U16 val)\n: None val", 
            "title": "u16_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_4", 
            "text": "data:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i16_le", 
            "text": "Write an I16 to the buffer in little-endian byte order.  fun ref i16_le(\n  data: I16 val)\n: None val", 
            "title": "i16_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_5", 
            "text": "data:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i16_be", 
            "text": "Write an I16 to the buffer in big-endian byte order.  fun ref i16_be(\n  data: I16 val)\n: None val", 
            "title": "i16_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_6", 
            "text": "data:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u32_le", 
            "text": "Write a U32 to the buffer in little-endian byte order.  fun ref u32_le(\n  data: U32 val)\n: None val", 
            "title": "u32_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_7", 
            "text": "data:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u32_be", 
            "text": "Write a U32 to the buffer in big-endian byte order.  fun ref u32_be(\n  data: U32 val)\n: None val", 
            "title": "u32_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_8", 
            "text": "data:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i32_le", 
            "text": "Write an I32 to the buffer in little-endian byte order.  fun ref i32_le(\n  data: I32 val)\n: None val", 
            "title": "i32_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_9", 
            "text": "data:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i32_be", 
            "text": "Write an I32 to the buffer in big-endian byte order.  fun ref i32_be(\n  data: I32 val)\n: None val", 
            "title": "i32_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_10", 
            "text": "data:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#f32_le", 
            "text": "Write an F32 to the buffer in little-endian byte order.  fun ref f32_le(\n  data: F32 val)\n: None val", 
            "title": "f32_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_11", 
            "text": "data:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#f32_be", 
            "text": "Write an F32 to the buffer in big-endian byte order.  fun ref f32_be(\n  data: F32 val)\n: None val", 
            "title": "f32_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_12", 
            "text": "data:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u64_le", 
            "text": "Write a U64 to the buffer in little-endian byte order.  fun ref u64_le(\n  data: U64 val)\n: None val", 
            "title": "u64_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_13", 
            "text": "data:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u64_be", 
            "text": "Write a U64 to the buffer in big-endian byte order.  fun ref u64_be(\n  data: U64 val)\n: None val", 
            "title": "u64_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_14", 
            "text": "data:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i64_le", 
            "text": "Write an I64 to the buffer in little-endian byte order.  fun ref i64_le(\n  data: I64 val)\n: None val", 
            "title": "i64_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_15", 
            "text": "data:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i64_be", 
            "text": "Write an I64 to the buffer in big-endian byte order.  fun ref i64_be(\n  data: I64 val)\n: None val", 
            "title": "i64_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_16", 
            "text": "data:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#f64_le", 
            "text": "Write an F64 to the buffer in little-endian byte order.  fun ref f64_le(\n  data: F64 val)\n: None val", 
            "title": "f64_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_17", 
            "text": "data:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#f64_be", 
            "text": "Write an F64 to the buffer in big-endian byte order.  fun ref f64_be(\n  data: F64 val)\n: None val", 
            "title": "f64_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_18", 
            "text": "data:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u128_le", 
            "text": "Write a U128 to the buffer in little-endian byte order.  fun ref u128_le(\n  data: U128 val)\n: None val", 
            "title": "u128_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_19", 
            "text": "data:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_21", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#u128_be", 
            "text": "Write a U128 to the buffer in big-endian byte order.  fun ref u128_be(\n  data: U128 val)\n: None val", 
            "title": "u128_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_20", 
            "text": "data:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_22", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i128_le", 
            "text": "Write an I128 to the buffer in little-endian byte order.  fun ref i128_le(\n  data: I128 val)\n: None val", 
            "title": "i128_le"
        }, 
        {
            "location": "/buffered-Writer/#parameters_21", 
            "text": "data:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_23", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#i128_be", 
            "text": "Write an I128 to the buffer in big-endian byte order.  fun ref i128_be(\n  data: I128 val)\n: None val", 
            "title": "i128_be"
        }, 
        {
            "location": "/buffered-Writer/#parameters_22", 
            "text": "data:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_24", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#write", 
            "text": "Write a ByteSeq to the buffer.  fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "write"
        }, 
        {
            "location": "/buffered-Writer/#parameters_23", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_25", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#writev", 
            "text": "Write ByteSeqs to the buffer.  fun ref writev(\n  data: ByteSeqIter val)\n: None val", 
            "title": "writev"
        }, 
        {
            "location": "/buffered-Writer/#parameters_24", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_26", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#done", 
            "text": "Return an array of buffered ByteSeqs and reset the Writer's buffer.  fun ref done()\n: Array[(String val | Array[U8 val] val)] iso^", 
            "title": "done"
        }, 
        {
            "location": "/buffered-Writer/#returns_27", 
            "text": "Array [( String  val |  Array [ U8  val] val)] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/buffered-Writer/#_append_current", 
            "text": "fun ref _append_current()\n: None val", 
            "title": "_append_current"
        }, 
        {
            "location": "/buffered-Writer/#returns_28", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#_check", 
            "text": "fun ref _check(\n  size': USize val)\n: None val", 
            "title": "_check"
        }, 
        {
            "location": "/buffered-Writer/#parameters_25", 
            "text": "size':  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_29", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Writer/#_byte", 
            "text": "fun ref _byte(\n  data: U8 val)\n: None val", 
            "title": "_byte"
        }, 
        {
            "location": "/buffered-Writer/#parameters_26", 
            "text": "data:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Writer/#returns_30", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/", 
            "text": "Reader\n\n\nStore network data and provide a parsing interface.\n\n\nReader\n provides a way to extract typed data from a sequence of\nbytes. The \nReader\n manages the underlying data structures to\nprovide a read cursor over a contiguous sequence of bytes. It is\nuseful for decoding data that is received over a network or stored\nin a file. Chunk of bytes are added to the \nReader\n using the\n\nappend\n method, and typed data is extracted using the getter\nmethods.\n\n\nFor example, suppose we have a UDP-based network data protocol where\nmessages consist of the following:\n\n\n\n\nlist_size\n - the number of items in the following list of items\n  as a big-endian 32-bit integer\n\n\nzero or more items of the following data:\n\n\na big-endian 64-bit floating point number\n\n\na string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string\n\n\n\n\nA message would be something like this:\n\n\n[message_length][list_size][float1][string1][float2][string2]...\n\n\n\n\nThe following program uses a \nReader\n to decode a message of\nthis type and print them:\n\n\nuse \nbuffered\n\nuse \ncollections\n\n\nclass Notify is StdinNotify\n  let _env: Env\n  new create(env: Env) =\n\n    _env = env\n  fun ref apply(data: Array[U8] iso) =\n\n    let rb = Reader\n    rb.append(consume data)\n    try\n      while true do\n        let len = rb.i32_be()?\n        let items = rb.i32_be()?.usize()\n        for range in Range(0, items) do\n          let f = rb.f32_be()?\n          let str_len = rb.i32_be()?.usize()\n          let str = String.from_array(rb.block(str_len)?)\n          _env.out.print(\n[(\n + f.string() + \n), (\n + str + \n)]\n)\n        end\n      end\n    end\n\nactor Main\n  new create(env: Env) =\n\n    env.input(recover Notify(env) end, 1024)\n\n\n\n\nclass ref Reader\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: Reader iso^\n\n\n\n\nReturns\n\n\n\n\nReader\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturn the number of available bytes.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclear\n\n\nDiscard all pending data.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend\n\n\nAdd a chunk of data.\n\n\nfun ref append(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nskip\n\n\nSkip n bytes.\n\n\nfun ref skip(\n  n: USize val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nblock\n\n\nReturn a block as a contiguous chunk of memory.\nWill throw an error if you request a block larger than what is currently\nstored in the \nReader\n.\n\n\nfun ref block(\n  len: USize val)\n: Array[U8 val] iso^ ?\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] iso^ ?\n\n\n\n\n\n\nread_until\n\n\nFind the first occurrence of the separator and return the block of bytes\nbefore its position. The separator is not included in the returned array,\nbut it is removed from the buffer. To read a line of text, prefer line()\nthat handles \\n and \\r\\n.\n\n\nfun ref read_until(\n  separator: U8 val)\n: Array[U8 val] iso^ ?\n\n\n\n\nParameters\n\n\n\n\nseparator: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] iso^ ?\n\n\n\n\n\n\nline\n\n\nReturn a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.\n\n\nfun ref line()\n: String val ?\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nu8\n\n\nGet a U8. Raise an error if there isn't enough data.\n\n\nfun ref u8()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\ni8\n\n\nGet an I8.\n\n\nfun ref i8()\n: I8 val ?\n\n\n\n\nReturns\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\nu16_be\n\n\nGet a big-endian U16.\n\n\nfun ref u16_be()\n: U16 val ?\n\n\n\n\nReturns\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\nu16_le\n\n\nGet a little-endian U16.\n\n\nfun ref u16_le()\n: U16 val ?\n\n\n\n\nReturns\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\ni16_be\n\n\nGet a big-endian I16.\n\n\nfun ref i16_be()\n: I16 val ?\n\n\n\n\nReturns\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\ni16_le\n\n\nGet a little-endian I16.\n\n\nfun ref i16_le()\n: I16 val ?\n\n\n\n\nReturns\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\nu32_be\n\n\nGet a big-endian U32.\n\n\nfun ref u32_be()\n: U32 val ?\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\nu32_le\n\n\nGet a little-endian U32.\n\n\nfun ref u32_le()\n: U32 val ?\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\ni32_be\n\n\nGet a big-endian I32.\n\n\nfun ref i32_be()\n: I32 val ?\n\n\n\n\nReturns\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\ni32_le\n\n\nGet a little-endian I32.\n\n\nfun ref i32_le()\n: I32 val ?\n\n\n\n\nReturns\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\nu64_be\n\n\nGet a big-endian U64.\n\n\nfun ref u64_be()\n: U64 val ?\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\nu64_le\n\n\nGet a little-endian U64.\n\n\nfun ref u64_le()\n: U64 val ?\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\ni64_be\n\n\nGet a big-endian I64.\n\n\nfun ref i64_be()\n: I64 val ?\n\n\n\n\nReturns\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\ni64_le\n\n\nGet a little-endian I64.\n\n\nfun ref i64_le()\n: I64 val ?\n\n\n\n\nReturns\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\nu128_be\n\n\nGet a big-endian U128.\n\n\nfun ref u128_be()\n: U128 val ?\n\n\n\n\nReturns\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\nu128_le\n\n\nGet a little-endian U128.\n\n\nfun ref u128_le()\n: U128 val ?\n\n\n\n\nReturns\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\ni128_be\n\n\nGet a big-endian I129.\n\n\nfun ref i128_be()\n: I128 val ?\n\n\n\n\nReturns\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\ni128_le\n\n\nGet a little-endian I128.\n\n\nfun ref i128_le()\n: I128 val ?\n\n\n\n\nReturns\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\nf32_be\n\n\nGet a big-endian F32.\n\n\nfun ref f32_be()\n: F32 val ?\n\n\n\n\nReturns\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\nf32_le\n\n\nGet a little-endian F32.\n\n\nfun ref f32_le()\n: F32 val ?\n\n\n\n\nReturns\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\nf64_be\n\n\nGet a big-endian F64.\n\n\nfun ref f64_be()\n: F64 val ?\n\n\n\n\nReturns\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\nf64_le\n\n\nGet a little-endian F64.\n\n\nfun ref f64_le()\n: F64 val ?\n\n\n\n\nReturns\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\npeek_u8\n\n\nPeek at a U8 at the given offset. Raise an error if there isn't enough\ndata.\n\n\nfun box peek_u8(\n  offset: USize val = seq)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\npeek_i8\n\n\nPeek at an I8.\n\n\nfun box peek_i8(\n  offset: USize val = seq)\n: I8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\npeek_u16_be\n\n\nPeek at a big-endian U16.\n\n\nfun box peek_u16_be(\n  offset: USize val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\npeek_u16_le\n\n\nPeek at a little-endian U16.\n\n\nfun box peek_u16_le(\n  offset: USize val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\npeek_i16_be\n\n\nPeek at a big-endian I16.\n\n\nfun box peek_i16_be(\n  offset: USize val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\npeek_i16_le\n\n\nPeek at a little-endian I16.\n\n\nfun box peek_i16_le(\n  offset: USize val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\npeek_u32_be\n\n\nPeek at a big-endian U32.\n\n\nfun box peek_u32_be(\n  offset: USize val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\npeek_u32_le\n\n\nPeek at a little-endian U32.\n\n\nfun box peek_u32_le(\n  offset: USize val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\npeek_i32_be\n\n\nPeek at a big-endian I32.\n\n\nfun box peek_i32_be(\n  offset: USize val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\npeek_i32_le\n\n\nPeek at a little-endian I32.\n\n\nfun box peek_i32_le(\n  offset: USize val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\npeek_u64_be\n\n\nPeek at a big-endian U64.\n\n\nfun box peek_u64_be(\n  offset: USize val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\npeek_u64_le\n\n\nPeek at a little-endian U64.\n\n\nfun box peek_u64_le(\n  offset: USize val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\npeek_i64_be\n\n\nPeek at a big-endian I64.\n\n\nfun box peek_i64_be(\n  offset: USize val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\npeek_i64_le\n\n\nPeek at a little-endian I64.\n\n\nfun box peek_i64_le(\n  offset: USize val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\npeek_u128_be\n\n\nPeek at a big-endian U128.\n\n\nfun box peek_u128_be(\n  offset: USize val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\npeek_u128_le\n\n\nPeek at a little-endian U128.\n\n\nfun box peek_u128_le(\n  offset: USize val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\npeek_i128_be\n\n\nPeek at a big-endian I129.\n\n\nfun box peek_i128_be(\n  offset: USize val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\npeek_i128_le\n\n\nPeek at a little-endian I128.\n\n\nfun box peek_i128_le(\n  offset: USize val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\npeek_f32_be\n\n\nPeek at a big-endian F32.\n\n\nfun box peek_f32_be(\n  offset: USize val = seq)\n: F32 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\npeek_f32_le\n\n\nPeek at a little-endian F32.\n\n\nfun box peek_f32_le(\n  offset: USize val = seq)\n: F32 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF32\n val ?\n\n\n\n\n\n\npeek_f64_be\n\n\nPeek at a big-endian F64.\n\n\nfun box peek_f64_be(\n  offset: USize val = seq)\n: F64 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\npeek_f64_le\n\n\nPeek at a little-endian F64.\n\n\nfun box peek_f64_le(\n  offset: USize val = seq)\n: F64 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF64\n val ?\n\n\n\n\n\n\nPrivate Functions\n\n\n_byte\n\n\nGet a single byte.\n\n\nfun ref _byte()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\n_peek_byte\n\n\nGet the byte at the given offset without moving the cursor forward.\nRaise an error if the given offset is not yet available.\n\n\nfun box _peek_byte(\n  offset: USize val = seq)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\n_distance_of\n\n\nGet the distance to the first occurrence of the given byte\n\n\nfun ref _distance_of(\n  byte: U8 val)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nbyte: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\n_search_length\n\n\nGet the length of a pending line. Raise an error if there is no pending\nline.\n\n\nfun ref _search_length()\n: USize val ?\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?", 
            "title": "class Reader"
        }, 
        {
            "location": "/buffered-Reader/#reader", 
            "text": "Store network data and provide a parsing interface.  Reader  provides a way to extract typed data from a sequence of\nbytes. The  Reader  manages the underlying data structures to\nprovide a read cursor over a contiguous sequence of bytes. It is\nuseful for decoding data that is received over a network or stored\nin a file. Chunk of bytes are added to the  Reader  using the append  method, and typed data is extracted using the getter\nmethods.  For example, suppose we have a UDP-based network data protocol where\nmessages consist of the following:   list_size  - the number of items in the following list of items\n  as a big-endian 32-bit integer  zero or more items of the following data:  a big-endian 64-bit floating point number  a string that starts with a big-endian 32-bit integer that\n    specifies the length of the string, followed by a number of\n    bytes that represent the string   A message would be something like this:  [message_length][list_size][float1][string1][float2][string2]...  The following program uses a  Reader  to decode a message of\nthis type and print them:  use  buffered \nuse  collections \n\nclass Notify is StdinNotify\n  let _env: Env\n  new create(env: Env) = \n    _env = env\n  fun ref apply(data: Array[U8] iso) = \n    let rb = Reader\n    rb.append(consume data)\n    try\n      while true do\n        let len = rb.i32_be()?\n        let items = rb.i32_be()?.usize()\n        for range in Range(0, items) do\n          let f = rb.f32_be()?\n          let str_len = rb.i32_be()?.usize()\n          let str = String.from_array(rb.block(str_len)?)\n          _env.out.print( [(  + f.string() +  ), (  + str +  )] )\n        end\n      end\n    end\n\nactor Main\n  new create(env: Env) = \n    env.input(recover Notify(env) end, 1024)  class ref Reader", 
            "title": "Reader"
        }, 
        {
            "location": "/buffered-Reader/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/buffered-Reader/#create", 
            "text": "new iso create()\n: Reader iso^", 
            "title": "create"
        }, 
        {
            "location": "/buffered-Reader/#returns", 
            "text": "Reader  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/buffered-Reader/#size", 
            "text": "Return the number of available bytes.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/buffered-Reader/#returns_1", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#clear", 
            "text": "Discard all pending data.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/buffered-Reader/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#append", 
            "text": "Add a chunk of data.  fun ref append(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "append"
        }, 
        {
            "location": "/buffered-Reader/#parameters", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#skip", 
            "text": "Skip n bytes.  fun ref skip(\n  n: USize val)\n: None val ?", 
            "title": "skip"
        }, 
        {
            "location": "/buffered-Reader/#parameters_1", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_4", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#block", 
            "text": "Return a block as a contiguous chunk of memory.\nWill throw an error if you request a block larger than what is currently\nstored in the  Reader .  fun ref block(\n  len: USize val)\n: Array[U8 val] iso^ ?", 
            "title": "block"
        }, 
        {
            "location": "/buffered-Reader/#parameters_2", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_5", 
            "text": "Array [ U8  val] iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#read_until", 
            "text": "Find the first occurrence of the separator and return the block of bytes\nbefore its position. The separator is not included in the returned array,\nbut it is removed from the buffer. To read a line of text, prefer line()\nthat handles \\n and \\r\\n.  fun ref read_until(\n  separator: U8 val)\n: Array[U8 val] iso^ ?", 
            "title": "read_until"
        }, 
        {
            "location": "/buffered-Reader/#parameters_3", 
            "text": "separator:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_6", 
            "text": "Array [ U8  val] iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#line", 
            "text": "Return a \\n or \\r\\n terminated line as a string. The newline is not\nincluded in the returned string, but it is removed from the network buffer.  fun ref line()\n: String val ?", 
            "title": "line"
        }, 
        {
            "location": "/buffered-Reader/#returns_7", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u8", 
            "text": "Get a U8. Raise an error if there isn't enough data.  fun ref u8()\n: U8 val ?", 
            "title": "u8"
        }, 
        {
            "location": "/buffered-Reader/#returns_8", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i8", 
            "text": "Get an I8.  fun ref i8()\n: I8 val ?", 
            "title": "i8"
        }, 
        {
            "location": "/buffered-Reader/#returns_9", 
            "text": "I8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u16_be", 
            "text": "Get a big-endian U16.  fun ref u16_be()\n: U16 val ?", 
            "title": "u16_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_10", 
            "text": "U16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u16_le", 
            "text": "Get a little-endian U16.  fun ref u16_le()\n: U16 val ?", 
            "title": "u16_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_11", 
            "text": "U16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i16_be", 
            "text": "Get a big-endian I16.  fun ref i16_be()\n: I16 val ?", 
            "title": "i16_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_12", 
            "text": "I16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i16_le", 
            "text": "Get a little-endian I16.  fun ref i16_le()\n: I16 val ?", 
            "title": "i16_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_13", 
            "text": "I16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u32_be", 
            "text": "Get a big-endian U32.  fun ref u32_be()\n: U32 val ?", 
            "title": "u32_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_14", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u32_le", 
            "text": "Get a little-endian U32.  fun ref u32_le()\n: U32 val ?", 
            "title": "u32_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_15", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i32_be", 
            "text": "Get a big-endian I32.  fun ref i32_be()\n: I32 val ?", 
            "title": "i32_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_16", 
            "text": "I32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i32_le", 
            "text": "Get a little-endian I32.  fun ref i32_le()\n: I32 val ?", 
            "title": "i32_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_17", 
            "text": "I32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u64_be", 
            "text": "Get a big-endian U64.  fun ref u64_be()\n: U64 val ?", 
            "title": "u64_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_18", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u64_le", 
            "text": "Get a little-endian U64.  fun ref u64_le()\n: U64 val ?", 
            "title": "u64_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_19", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i64_be", 
            "text": "Get a big-endian I64.  fun ref i64_be()\n: I64 val ?", 
            "title": "i64_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_20", 
            "text": "I64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i64_le", 
            "text": "Get a little-endian I64.  fun ref i64_le()\n: I64 val ?", 
            "title": "i64_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_21", 
            "text": "I64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u128_be", 
            "text": "Get a big-endian U128.  fun ref u128_be()\n: U128 val ?", 
            "title": "u128_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_22", 
            "text": "U128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#u128_le", 
            "text": "Get a little-endian U128.  fun ref u128_le()\n: U128 val ?", 
            "title": "u128_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_23", 
            "text": "U128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i128_be", 
            "text": "Get a big-endian I129.  fun ref i128_be()\n: I128 val ?", 
            "title": "i128_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_24", 
            "text": "I128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#i128_le", 
            "text": "Get a little-endian I128.  fun ref i128_le()\n: I128 val ?", 
            "title": "i128_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_25", 
            "text": "I128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#f32_be", 
            "text": "Get a big-endian F32.  fun ref f32_be()\n: F32 val ?", 
            "title": "f32_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_26", 
            "text": "F32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#f32_le", 
            "text": "Get a little-endian F32.  fun ref f32_le()\n: F32 val ?", 
            "title": "f32_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_27", 
            "text": "F32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#f64_be", 
            "text": "Get a big-endian F64.  fun ref f64_be()\n: F64 val ?", 
            "title": "f64_be"
        }, 
        {
            "location": "/buffered-Reader/#returns_28", 
            "text": "F64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#f64_le", 
            "text": "Get a little-endian F64.  fun ref f64_le()\n: F64 val ?", 
            "title": "f64_le"
        }, 
        {
            "location": "/buffered-Reader/#returns_29", 
            "text": "F64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u8", 
            "text": "Peek at a U8 at the given offset. Raise an error if there isn't enough\ndata.  fun box peek_u8(\n  offset: USize val = seq)\n: U8 val ?", 
            "title": "peek_u8"
        }, 
        {
            "location": "/buffered-Reader/#parameters_4", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_30", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i8", 
            "text": "Peek at an I8.  fun box peek_i8(\n  offset: USize val = seq)\n: I8 val ?", 
            "title": "peek_i8"
        }, 
        {
            "location": "/buffered-Reader/#parameters_5", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_31", 
            "text": "I8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u16_be", 
            "text": "Peek at a big-endian U16.  fun box peek_u16_be(\n  offset: USize val = seq)\n: U16 val ?", 
            "title": "peek_u16_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_6", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_32", 
            "text": "U16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u16_le", 
            "text": "Peek at a little-endian U16.  fun box peek_u16_le(\n  offset: USize val = seq)\n: U16 val ?", 
            "title": "peek_u16_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_7", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_33", 
            "text": "U16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i16_be", 
            "text": "Peek at a big-endian I16.  fun box peek_i16_be(\n  offset: USize val = seq)\n: I16 val ?", 
            "title": "peek_i16_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_8", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_34", 
            "text": "I16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i16_le", 
            "text": "Peek at a little-endian I16.  fun box peek_i16_le(\n  offset: USize val = seq)\n: I16 val ?", 
            "title": "peek_i16_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_9", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_35", 
            "text": "I16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u32_be", 
            "text": "Peek at a big-endian U32.  fun box peek_u32_be(\n  offset: USize val = seq)\n: U32 val ?", 
            "title": "peek_u32_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_10", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_36", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u32_le", 
            "text": "Peek at a little-endian U32.  fun box peek_u32_le(\n  offset: USize val = seq)\n: U32 val ?", 
            "title": "peek_u32_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_11", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_37", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i32_be", 
            "text": "Peek at a big-endian I32.  fun box peek_i32_be(\n  offset: USize val = seq)\n: I32 val ?", 
            "title": "peek_i32_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_12", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_38", 
            "text": "I32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i32_le", 
            "text": "Peek at a little-endian I32.  fun box peek_i32_le(\n  offset: USize val = seq)\n: I32 val ?", 
            "title": "peek_i32_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_13", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_39", 
            "text": "I32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u64_be", 
            "text": "Peek at a big-endian U64.  fun box peek_u64_be(\n  offset: USize val = seq)\n: U64 val ?", 
            "title": "peek_u64_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_14", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_40", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u64_le", 
            "text": "Peek at a little-endian U64.  fun box peek_u64_le(\n  offset: USize val = seq)\n: U64 val ?", 
            "title": "peek_u64_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_15", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_41", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i64_be", 
            "text": "Peek at a big-endian I64.  fun box peek_i64_be(\n  offset: USize val = seq)\n: I64 val ?", 
            "title": "peek_i64_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_16", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_42", 
            "text": "I64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i64_le", 
            "text": "Peek at a little-endian I64.  fun box peek_i64_le(\n  offset: USize val = seq)\n: I64 val ?", 
            "title": "peek_i64_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_17", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_43", 
            "text": "I64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u128_be", 
            "text": "Peek at a big-endian U128.  fun box peek_u128_be(\n  offset: USize val = seq)\n: U128 val ?", 
            "title": "peek_u128_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_18", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_44", 
            "text": "U128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_u128_le", 
            "text": "Peek at a little-endian U128.  fun box peek_u128_le(\n  offset: USize val = seq)\n: U128 val ?", 
            "title": "peek_u128_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_19", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_45", 
            "text": "U128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i128_be", 
            "text": "Peek at a big-endian I129.  fun box peek_i128_be(\n  offset: USize val = seq)\n: I128 val ?", 
            "title": "peek_i128_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_20", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_46", 
            "text": "I128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_i128_le", 
            "text": "Peek at a little-endian I128.  fun box peek_i128_le(\n  offset: USize val = seq)\n: I128 val ?", 
            "title": "peek_i128_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_21", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_47", 
            "text": "I128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_f32_be", 
            "text": "Peek at a big-endian F32.  fun box peek_f32_be(\n  offset: USize val = seq)\n: F32 val ?", 
            "title": "peek_f32_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_22", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_48", 
            "text": "F32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_f32_le", 
            "text": "Peek at a little-endian F32.  fun box peek_f32_le(\n  offset: USize val = seq)\n: F32 val ?", 
            "title": "peek_f32_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_23", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_49", 
            "text": "F32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_f64_be", 
            "text": "Peek at a big-endian F64.  fun box peek_f64_be(\n  offset: USize val = seq)\n: F64 val ?", 
            "title": "peek_f64_be"
        }, 
        {
            "location": "/buffered-Reader/#parameters_24", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_50", 
            "text": "F64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#peek_f64_le", 
            "text": "Peek at a little-endian F64.  fun box peek_f64_le(\n  offset: USize val = seq)\n: F64 val ?", 
            "title": "peek_f64_le"
        }, 
        {
            "location": "/buffered-Reader/#parameters_25", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_51", 
            "text": "F64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/buffered-Reader/#_byte", 
            "text": "Get a single byte.  fun ref _byte()\n: U8 val ?", 
            "title": "_byte"
        }, 
        {
            "location": "/buffered-Reader/#returns_52", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#_peek_byte", 
            "text": "Get the byte at the given offset without moving the cursor forward.\nRaise an error if the given offset is not yet available.  fun box _peek_byte(\n  offset: USize val = seq)\n: U8 val ?", 
            "title": "_peek_byte"
        }, 
        {
            "location": "/buffered-Reader/#parameters_26", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_53", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#_distance_of", 
            "text": "Get the distance to the first occurrence of the given byte  fun ref _distance_of(\n  byte: U8 val)\n: USize val ?", 
            "title": "_distance_of"
        }, 
        {
            "location": "/buffered-Reader/#parameters_27", 
            "text": "byte:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/buffered-Reader/#returns_54", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/buffered-Reader/#_search_length", 
            "text": "Get the length of a pending line. Raise an error if there is no pending\nline.  fun ref _search_length()\n: USize val ?", 
            "title": "_search_length"
        }, 
        {
            "location": "/buffered-Reader/#returns_55", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin--index/", 
            "text": "Builtin package\n\n\nThe builtin package is home to the following standard library members:\n\n\n\n\nTypes the compiler needs to know exist, such as None.\n\n\nTypes with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.\n\n\nAny types needed by others in builtin.\n\n\n\n\nThe public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.\n\n\nPublic Types\n\n\n\n\nprimitive U8\n\n\nprimitive U16\n\n\nprimitive U32\n\n\nprimitive U64\n\n\nprimitive ULong\n\n\nprimitive USize\n\n\nprimitive U128\n\n\ntype Unsigned\n\n\ninterface Stringable\n\n\nclass String\n\n\nclass StringBytes\n\n\nclass StringRunes\n\n\ninterface StdinNotify\n\n\ninterface DisposableActor\n\n\nactor Stdin\n\n\ntype ByteSeq\n\n\ninterface ByteSeqIter\n\n\ninterface OutStream\n\n\nactor StdStream\n\n\ninterface SourceLoc\n\n\nprimitive I8\n\n\nprimitive I16\n\n\nprimitive I32\n\n\nprimitive I64\n\n\nprimitive ILong\n\n\nprimitive ISize\n\n\nprimitive I128\n\n\ntype Signed\n\n\ninterface Seq\n\n\ntrait Real\n\n\ntrait Integer\n\n\ntrait FloatingPoint\n\n\ntype Number\n\n\ntype Int\n\n\ninterface ReadSeq\n\n\ninterface ReadElement\n\n\nstruct Pointer\n\n\nprimitive Platform\n\n\nprimitive None\n\n\nstruct MaybePointer\n\n\ninterface Iterator\n\n\nprimitive F32\n\n\nprimitive F64\n\n\ntype Float\n\n\nclass Env\n\n\nprimitive DoNotOptimise\n\n\nprimitive Less\n\n\nprimitive Equal\n\n\nprimitive Greater\n\n\ntype Compare\n\n\ninterface HasEq\n\n\ninterface Equatable\n\n\ninterface Comparable\n\n\nprimitive Bool\n\n\ntype AsioEventID\n\n\ninterface AsioEventNotify\n\n\nprimitive AsioEvent\n\n\nclass Array\n\n\nclass ArrayKeys\n\n\nclass ArrayValues\n\n\nclass ArrayPairs\n\n\ninterface Any\n\n\nprimitive AmbientAuth\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _UTF32Encoder\n\n\ntrait _ArithmeticConvertible\n\n\ntrait _SignedInteger\n\n\ntrait _UnsignedInteger\n\n\nprimitive _ToString", 
            "title": "Package"
        }, 
        {
            "location": "/builtin--index/#builtin-package", 
            "text": "The builtin package is home to the following standard library members:   Types the compiler needs to know exist, such as None.  Types with \"magic\" internal workings that must be supplied directly by the\ncompiler, such as U32.  Any types needed by others in builtin.   The public types that are defined in this package will always be in scope for\nevery Pony source file. For details on specific packages, see their individual\nentity entries.", 
            "title": "Builtin package"
        }, 
        {
            "location": "/builtin--index/#public-types", 
            "text": "primitive U8  primitive U16  primitive U32  primitive U64  primitive ULong  primitive USize  primitive U128  type Unsigned  interface Stringable  class String  class StringBytes  class StringRunes  interface StdinNotify  interface DisposableActor  actor Stdin  type ByteSeq  interface ByteSeqIter  interface OutStream  actor StdStream  interface SourceLoc  primitive I8  primitive I16  primitive I32  primitive I64  primitive ILong  primitive ISize  primitive I128  type Signed  interface Seq  trait Real  trait Integer  trait FloatingPoint  type Number  type Int  interface ReadSeq  interface ReadElement  struct Pointer  primitive Platform  primitive None  struct MaybePointer  interface Iterator  primitive F32  primitive F64  type Float  class Env  primitive DoNotOptimise  primitive Less  primitive Equal  primitive Greater  type Compare  interface HasEq  interface Equatable  interface Comparable  primitive Bool  type AsioEventID  interface AsioEventNotify  primitive AsioEvent  class Array  class ArrayKeys  class ArrayValues  class ArrayPairs  interface Any  primitive AmbientAuth", 
            "title": "Public Types"
        }, 
        {
            "location": "/builtin--index/#private-types", 
            "text": "primitive _UTF32Encoder  trait _ArithmeticConvertible  trait _SignedInteger  trait _UnsignedInteger  primitive _ToString", 
            "title": "Private Types"
        }, 
        {
            "location": "/builtin-U8/", 
            "text": "U8\n\n\nprimitive val U8 is\n  _UnsignedInteger[U8 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU8\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U8 val)\n: U8 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: U8 val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U8 val^\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U8 val^\n\n\n\n\nReturns\n\n\n\n\nU8\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU8\n val , \nU8\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val", 
            "title": "primitive U8"
        }, 
        {
            "location": "/builtin-U8/#u8", 
            "text": "primitive val U8 is\n  _UnsignedInteger[U8 val] val", 
            "title": "U8"
        }, 
        {
            "location": "/builtin-U8/#implements", 
            "text": "_UnsignedInteger [ U8  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-U8/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U8/#create", 
            "text": "new val create(\n  value: U8 val)\n: U8 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-U8/#parameters", 
            "text": "value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns", 
            "text": "U8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: U8 val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-U8/#parameters_1", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_1", 
            "text": "U8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#min_value", 
            "text": "new val min_value()\n: U8 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-U8/#returns_2", 
            "text": "U8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#max_value", 
            "text": "new val max_value()\n: U8 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-U8/#returns_3", 
            "text": "U8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U8/#next_pow2", 
            "text": "fun box next_pow2()\n: U8 val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-U8/#returns_4", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#abs", 
            "text": "fun box abs()\n: U8 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-U8/#returns_5", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#bswap", 
            "text": "fun box bswap()\n: U8 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-U8/#returns_6", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#popcount", 
            "text": "fun box popcount()\n: U8 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-U8/#returns_7", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#clz", 
            "text": "fun box clz()\n: U8 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-U8/#returns_8", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ctz", 
            "text": "fun box ctz()\n: U8 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-U8/#returns_9", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_10", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_11", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#bitwidth", 
            "text": "fun box bitwidth()\n: U8 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-U8/#returns_12", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#min", 
            "text": "fun box min(\n  y: U8 val)\n: U8 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-U8/#parameters_2", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_13", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#max", 
            "text": "fun box max(\n  y: U8 val)\n: U8 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-U8/#parameters_3", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_14", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#addc", 
            "text": "fun box addc(\n  y: U8 val)\n: (U8 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-U8/#parameters_4", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_15", 
            "text": "( U8  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#subc", 
            "text": "fun box subc(\n  y: U8 val)\n: (U8 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-U8/#parameters_5", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_16", 
            "text": "( U8  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#mulc", 
            "text": "fun box mulc(\n  y: U8 val)\n: (U8 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-U8/#parameters_6", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_17", 
            "text": "( U8  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#shl", 
            "text": "fun box shl(\n  y: U8 val)\n: U8 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-U8/#parameters_7", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_18", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#shr", 
            "text": "fun box shr(\n  y: U8 val)\n: U8 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-U8/#parameters_8", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_19", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_9", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_20", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_10", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_21", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#rotl", 
            "text": "fun box rotl(\n  y: U8 val)\n: U8 val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-U8/#parameters_11", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_22", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#rotr", 
            "text": "fun box rotr(\n  y: U8 val)\n: U8 val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-U8/#parameters_12", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_23", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-U8/#returns_24", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_13", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_25", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_14", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_26", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_15", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_27", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_16", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_28", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: U8 val)\n: (U8 val , U8 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_17", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_29", 
            "text": "( U8  val ,  U8  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: U8 val)\n: U8 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-U8/#parameters_18", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_30", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: U8 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_31", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#op_and", 
            "text": "fun box op_and(\n  y: U8 val)\n: U8 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-U8/#parameters_19", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_32", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#op_or", 
            "text": "fun box op_or(\n  y: U8 val)\n: U8 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-U8/#parameters_20", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_33", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#op_xor", 
            "text": "fun box op_xor(\n  y: U8 val)\n: U8 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-U8/#parameters_21", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_34", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#op_not", 
            "text": "fun box op_not()\n: U8 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-U8/#returns_35", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#add", 
            "text": "fun box add(\n  y: U8 val)\n: U8 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-U8/#parameters_22", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_36", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#sub", 
            "text": "fun box sub(\n  y: U8 val)\n: U8 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-U8/#parameters_23", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_37", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#mul", 
            "text": "fun box mul(\n  y: U8 val)\n: U8 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-U8/#parameters_24", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_38", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#div", 
            "text": "fun box div(\n  y: U8 val)\n: U8 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-U8/#parameters_25", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_39", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#divmod", 
            "text": "fun box divmod(\n  y: U8 val)\n: (U8 val , U8 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-U8/#parameters_26", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_40", 
            "text": "( U8  val ,  U8  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#mod", 
            "text": "fun box mod(\n  y: U8 val)\n: U8 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-U8/#parameters_27", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_41", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#neg", 
            "text": "fun box neg()\n: U8 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-U8/#returns_42", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#eq", 
            "text": "fun box eq(\n  y: U8 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-U8/#parameters_28", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ne", 
            "text": "fun box ne(\n  y: U8 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-U8/#parameters_29", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#lt", 
            "text": "fun box lt(\n  y: U8 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-U8/#parameters_30", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#le", 
            "text": "fun box le(\n  y: U8 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-U8/#parameters_31", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ge", 
            "text": "fun box ge(\n  y: U8 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-U8/#parameters_32", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#gt", 
            "text": "fun box gt(\n  y: U8 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-U8/#parameters_33", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-U8/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-U8/#returns_50", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-U8/#returns_51", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-U8/#returns_52", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-U8/#returns_53", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-U8/#returns_54", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-U8/#returns_55", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-U8/#returns_56", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u8_1", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-U8/#returns_57", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-U8/#returns_58", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-U8/#returns_59", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-U8/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-U8/#returns_61", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-U8/#returns_62", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-U8/#returns_63", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-U8/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-U8/#returns_65", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_66", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_67", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_68", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_69", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_70", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_71", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_72", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_73", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_74", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_75", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_77", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_78", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_79", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-U8/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#compare", 
            "text": "fun box compare(\n  that: U8 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-U8/#parameters_34", 
            "text": "that:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U8/#returns_82", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U8/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-U8/#_value", 
            "text": "fun box _value()\n: U8 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-U8/#returns_83", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/", 
            "text": "U16\n\n\nprimitive val U16 is\n  _UnsignedInteger[U16 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU16\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U16 val)\n: U16 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: U16 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U16 val^\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U16 val^\n\n\n\n\nReturns\n\n\n\n\nU16\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU16\n val , \nU16\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U16 val)\n: U16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val", 
            "title": "primitive U16"
        }, 
        {
            "location": "/builtin-U16/#u16", 
            "text": "primitive val U16 is\n  _UnsignedInteger[U16 val] val", 
            "title": "U16"
        }, 
        {
            "location": "/builtin-U16/#implements", 
            "text": "_UnsignedInteger [ U16  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-U16/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U16/#create", 
            "text": "new val create(\n  value: U16 val)\n: U16 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-U16/#parameters", 
            "text": "value:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns", 
            "text": "U16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: U16 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-U16/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_1", 
            "text": "U16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#min_value", 
            "text": "new val min_value()\n: U16 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-U16/#returns_2", 
            "text": "U16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#max_value", 
            "text": "new val max_value()\n: U16 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-U16/#returns_3", 
            "text": "U16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U16/#next_pow2", 
            "text": "fun box next_pow2()\n: U16 val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-U16/#returns_4", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#abs", 
            "text": "fun box abs()\n: U16 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-U16/#returns_5", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#bswap", 
            "text": "fun box bswap()\n: U16 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-U16/#returns_6", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#popcount", 
            "text": "fun box popcount()\n: U16 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-U16/#returns_7", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#clz", 
            "text": "fun box clz()\n: U16 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-U16/#returns_8", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ctz", 
            "text": "fun box ctz()\n: U16 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-U16/#returns_9", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_10", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_11", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#bitwidth", 
            "text": "fun box bitwidth()\n: U16 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-U16/#returns_12", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#min", 
            "text": "fun box min(\n  y: U16 val)\n: U16 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-U16/#parameters_2", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_13", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#max", 
            "text": "fun box max(\n  y: U16 val)\n: U16 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-U16/#parameters_3", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_14", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#addc", 
            "text": "fun box addc(\n  y: U16 val)\n: (U16 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-U16/#parameters_4", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_15", 
            "text": "( U16  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#subc", 
            "text": "fun box subc(\n  y: U16 val)\n: (U16 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-U16/#parameters_5", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_16", 
            "text": "( U16  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#mulc", 
            "text": "fun box mulc(\n  y: U16 val)\n: (U16 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-U16/#parameters_6", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_17", 
            "text": "( U16  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#shl", 
            "text": "fun box shl(\n  y: U16 val)\n: U16 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-U16/#parameters_7", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_18", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#shr", 
            "text": "fun box shr(\n  y: U16 val)\n: U16 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-U16/#parameters_8", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_19", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_9", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_20", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_10", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_21", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#rotl", 
            "text": "fun box rotl(\n  y: U16 val)\n: U16 val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-U16/#parameters_11", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_22", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#rotr", 
            "text": "fun box rotr(\n  y: U16 val)\n: U16 val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-U16/#parameters_12", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_23", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-U16/#returns_24", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_13", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_25", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_14", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_26", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_15", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_27", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_16", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_28", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: U16 val)\n: (U16 val , U16 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_17", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_29", 
            "text": "( U16  val ,  U16  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: U16 val)\n: U16 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-U16/#parameters_18", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_30", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: U16 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_31", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#op_and", 
            "text": "fun box op_and(\n  y: U16 val)\n: U16 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-U16/#parameters_19", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_32", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#op_or", 
            "text": "fun box op_or(\n  y: U16 val)\n: U16 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-U16/#parameters_20", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_33", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#op_xor", 
            "text": "fun box op_xor(\n  y: U16 val)\n: U16 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-U16/#parameters_21", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_34", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#op_not", 
            "text": "fun box op_not()\n: U16 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-U16/#returns_35", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#add", 
            "text": "fun box add(\n  y: U16 val)\n: U16 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-U16/#parameters_22", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_36", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#sub", 
            "text": "fun box sub(\n  y: U16 val)\n: U16 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-U16/#parameters_23", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_37", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#mul", 
            "text": "fun box mul(\n  y: U16 val)\n: U16 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-U16/#parameters_24", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_38", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#div", 
            "text": "fun box div(\n  y: U16 val)\n: U16 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-U16/#parameters_25", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_39", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#divmod", 
            "text": "fun box divmod(\n  y: U16 val)\n: (U16 val , U16 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-U16/#parameters_26", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_40", 
            "text": "( U16  val ,  U16  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#mod", 
            "text": "fun box mod(\n  y: U16 val)\n: U16 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-U16/#parameters_27", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_41", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#neg", 
            "text": "fun box neg()\n: U16 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-U16/#returns_42", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#eq", 
            "text": "fun box eq(\n  y: U16 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-U16/#parameters_28", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ne", 
            "text": "fun box ne(\n  y: U16 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-U16/#parameters_29", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#lt", 
            "text": "fun box lt(\n  y: U16 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-U16/#parameters_30", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#le", 
            "text": "fun box le(\n  y: U16 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-U16/#parameters_31", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ge", 
            "text": "fun box ge(\n  y: U16 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-U16/#parameters_32", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#gt", 
            "text": "fun box gt(\n  y: U16 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-U16/#parameters_33", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-U16/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-U16/#returns_50", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-U16/#returns_51", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-U16/#returns_52", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-U16/#returns_53", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-U16/#returns_54", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-U16/#returns_55", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-U16/#returns_56", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-U16/#returns_57", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u16_1", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-U16/#returns_58", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-U16/#returns_59", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-U16/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-U16/#returns_61", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-U16/#returns_62", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-U16/#returns_63", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-U16/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-U16/#returns_65", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_66", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_67", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_68", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_69", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_70", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_71", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_72", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_73", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_74", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_75", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_77", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_78", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_79", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-U16/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#compare", 
            "text": "fun box compare(\n  that: U16 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-U16/#parameters_34", 
            "text": "that:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U16/#returns_82", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U16/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-U16/#_value", 
            "text": "fun box _value()\n: U16 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-U16/#returns_83", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/", 
            "text": "U32\n\n\nprimitive val U32 is\n  _UnsignedInteger[U32 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU32\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U32 val)\n: U32 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: U32 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U32 val^\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U32 val^\n\n\n\n\nReturns\n\n\n\n\nU32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU32\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val", 
            "title": "primitive U32"
        }, 
        {
            "location": "/builtin-U32/#u32", 
            "text": "primitive val U32 is\n  _UnsignedInteger[U32 val] val", 
            "title": "U32"
        }, 
        {
            "location": "/builtin-U32/#implements", 
            "text": "_UnsignedInteger [ U32  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-U32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U32/#create", 
            "text": "new val create(\n  value: U32 val)\n: U32 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-U32/#parameters", 
            "text": "value:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns", 
            "text": "U32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: U32 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-U32/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_1", 
            "text": "U32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#min_value", 
            "text": "new val min_value()\n: U32 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-U32/#returns_2", 
            "text": "U32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#max_value", 
            "text": "new val max_value()\n: U32 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-U32/#returns_3", 
            "text": "U32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U32/#next_pow2", 
            "text": "fun box next_pow2()\n: U32 val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-U32/#returns_4", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#abs", 
            "text": "fun box abs()\n: U32 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-U32/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#bswap", 
            "text": "fun box bswap()\n: U32 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-U32/#returns_6", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#popcount", 
            "text": "fun box popcount()\n: U32 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-U32/#returns_7", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#clz", 
            "text": "fun box clz()\n: U32 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-U32/#returns_8", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ctz", 
            "text": "fun box ctz()\n: U32 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-U32/#returns_9", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_10", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_11", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#bitwidth", 
            "text": "fun box bitwidth()\n: U32 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-U32/#returns_12", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#min", 
            "text": "fun box min(\n  y: U32 val)\n: U32 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-U32/#parameters_2", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_13", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#max", 
            "text": "fun box max(\n  y: U32 val)\n: U32 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-U32/#parameters_3", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_14", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#addc", 
            "text": "fun box addc(\n  y: U32 val)\n: (U32 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-U32/#parameters_4", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_15", 
            "text": "( U32  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#subc", 
            "text": "fun box subc(\n  y: U32 val)\n: (U32 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-U32/#parameters_5", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_16", 
            "text": "( U32  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#mulc", 
            "text": "fun box mulc(\n  y: U32 val)\n: (U32 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-U32/#parameters_6", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_17", 
            "text": "( U32  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#shl", 
            "text": "fun box shl(\n  y: U32 val)\n: U32 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-U32/#parameters_7", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_18", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#shr", 
            "text": "fun box shr(\n  y: U32 val)\n: U32 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-U32/#parameters_8", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_19", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_9", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_20", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_10", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_21", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#rotl", 
            "text": "fun box rotl(\n  y: U32 val)\n: U32 val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-U32/#parameters_11", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_22", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#rotr", 
            "text": "fun box rotr(\n  y: U32 val)\n: U32 val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-U32/#parameters_12", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_23", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-U32/#returns_24", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_13", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_25", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_14", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_26", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_15", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_27", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_16", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_28", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: U32 val)\n: (U32 val , U32 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_17", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_29", 
            "text": "( U32  val ,  U32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: U32 val)\n: U32 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-U32/#parameters_18", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_30", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: U32 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_31", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#op_and", 
            "text": "fun box op_and(\n  y: U32 val)\n: U32 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-U32/#parameters_19", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_32", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#op_or", 
            "text": "fun box op_or(\n  y: U32 val)\n: U32 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-U32/#parameters_20", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_33", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#op_xor", 
            "text": "fun box op_xor(\n  y: U32 val)\n: U32 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-U32/#parameters_21", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_34", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#op_not", 
            "text": "fun box op_not()\n: U32 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-U32/#returns_35", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#add", 
            "text": "fun box add(\n  y: U32 val)\n: U32 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-U32/#parameters_22", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_36", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#sub", 
            "text": "fun box sub(\n  y: U32 val)\n: U32 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-U32/#parameters_23", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_37", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#mul", 
            "text": "fun box mul(\n  y: U32 val)\n: U32 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-U32/#parameters_24", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_38", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#div", 
            "text": "fun box div(\n  y: U32 val)\n: U32 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-U32/#parameters_25", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_39", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#divmod", 
            "text": "fun box divmod(\n  y: U32 val)\n: (U32 val , U32 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-U32/#parameters_26", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_40", 
            "text": "( U32  val ,  U32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#mod", 
            "text": "fun box mod(\n  y: U32 val)\n: U32 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-U32/#parameters_27", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_41", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#neg", 
            "text": "fun box neg()\n: U32 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-U32/#returns_42", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#eq", 
            "text": "fun box eq(\n  y: U32 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-U32/#parameters_28", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ne", 
            "text": "fun box ne(\n  y: U32 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-U32/#parameters_29", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#lt", 
            "text": "fun box lt(\n  y: U32 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-U32/#parameters_30", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#le", 
            "text": "fun box le(\n  y: U32 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-U32/#parameters_31", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ge", 
            "text": "fun box ge(\n  y: U32 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-U32/#parameters_32", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#gt", 
            "text": "fun box gt(\n  y: U32 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-U32/#parameters_33", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-U32/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-U32/#returns_50", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-U32/#returns_51", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-U32/#returns_52", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-U32/#returns_53", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-U32/#returns_54", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-U32/#returns_55", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-U32/#returns_56", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-U32/#returns_57", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-U32/#returns_58", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u32_1", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-U32/#returns_59", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-U32/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-U32/#returns_61", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-U32/#returns_62", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-U32/#returns_63", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-U32/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-U32/#returns_65", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_66", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_67", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_68", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_69", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_70", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_71", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_72", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_73", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_74", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_75", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_77", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_78", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_79", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-U32/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#compare", 
            "text": "fun box compare(\n  that: U32 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-U32/#parameters_34", 
            "text": "that:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U32/#returns_82", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U32/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-U32/#_value", 
            "text": "fun box _value()\n: U32 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-U32/#returns_83", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/", 
            "text": "U64\n\n\nprimitive val U64 is\n  _UnsignedInteger[U64 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU64\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U64 val)\n: U64 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: U64 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U64 val^\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U64 val^\n\n\n\n\nReturns\n\n\n\n\nU64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nU64\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "primitive U64"
        }, 
        {
            "location": "/builtin-U64/#u64", 
            "text": "primitive val U64 is\n  _UnsignedInteger[U64 val] val", 
            "title": "U64"
        }, 
        {
            "location": "/builtin-U64/#implements", 
            "text": "_UnsignedInteger [ U64  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-U64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U64/#create", 
            "text": "new val create(\n  value: U64 val)\n: U64 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-U64/#parameters", 
            "text": "value:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns", 
            "text": "U64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: U64 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-U64/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_1", 
            "text": "U64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#min_value", 
            "text": "new val min_value()\n: U64 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-U64/#returns_2", 
            "text": "U64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#max_value", 
            "text": "new val max_value()\n: U64 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-U64/#returns_3", 
            "text": "U64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U64/#next_pow2", 
            "text": "fun box next_pow2()\n: U64 val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-U64/#returns_4", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#abs", 
            "text": "fun box abs()\n: U64 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-U64/#returns_5", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#bswap", 
            "text": "fun box bswap()\n: U64 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-U64/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#popcount", 
            "text": "fun box popcount()\n: U64 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-U64/#returns_7", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#clz", 
            "text": "fun box clz()\n: U64 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-U64/#returns_8", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ctz", 
            "text": "fun box ctz()\n: U64 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-U64/#returns_9", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_10", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_11", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#bitwidth", 
            "text": "fun box bitwidth()\n: U64 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-U64/#returns_12", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#min", 
            "text": "fun box min(\n  y: U64 val)\n: U64 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-U64/#parameters_2", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_13", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#max", 
            "text": "fun box max(\n  y: U64 val)\n: U64 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-U64/#parameters_3", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_14", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#addc", 
            "text": "fun box addc(\n  y: U64 val)\n: (U64 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-U64/#parameters_4", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_15", 
            "text": "( U64  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#subc", 
            "text": "fun box subc(\n  y: U64 val)\n: (U64 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-U64/#parameters_5", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_16", 
            "text": "( U64  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#mulc", 
            "text": "fun box mulc(\n  y: U64 val)\n: (U64 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-U64/#parameters_6", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_17", 
            "text": "( U64  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#shl", 
            "text": "fun box shl(\n  y: U64 val)\n: U64 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-U64/#parameters_7", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_18", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#shr", 
            "text": "fun box shr(\n  y: U64 val)\n: U64 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-U64/#parameters_8", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_19", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_9", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_20", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_10", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_21", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#rotl", 
            "text": "fun box rotl(\n  y: U64 val)\n: U64 val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-U64/#parameters_11", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_22", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#rotr", 
            "text": "fun box rotr(\n  y: U64 val)\n: U64 val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-U64/#parameters_12", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_23", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-U64/#returns_24", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_13", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_25", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_14", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_26", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_15", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_27", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_16", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_28", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: U64 val)\n: (U64 val , U64 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_17", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_29", 
            "text": "( U64  val ,  U64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: U64 val)\n: U64 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-U64/#parameters_18", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_30", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: U64 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_31", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#op_and", 
            "text": "fun box op_and(\n  y: U64 val)\n: U64 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-U64/#parameters_19", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_32", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#op_or", 
            "text": "fun box op_or(\n  y: U64 val)\n: U64 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-U64/#parameters_20", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_33", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#op_xor", 
            "text": "fun box op_xor(\n  y: U64 val)\n: U64 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-U64/#parameters_21", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_34", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#op_not", 
            "text": "fun box op_not()\n: U64 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-U64/#returns_35", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#add", 
            "text": "fun box add(\n  y: U64 val)\n: U64 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-U64/#parameters_22", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_36", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#sub", 
            "text": "fun box sub(\n  y: U64 val)\n: U64 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-U64/#parameters_23", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_37", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#mul", 
            "text": "fun box mul(\n  y: U64 val)\n: U64 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-U64/#parameters_24", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_38", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#div", 
            "text": "fun box div(\n  y: U64 val)\n: U64 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-U64/#parameters_25", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_39", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#divmod", 
            "text": "fun box divmod(\n  y: U64 val)\n: (U64 val , U64 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-U64/#parameters_26", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_40", 
            "text": "( U64  val ,  U64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#mod", 
            "text": "fun box mod(\n  y: U64 val)\n: U64 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-U64/#parameters_27", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_41", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#neg", 
            "text": "fun box neg()\n: U64 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-U64/#returns_42", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#eq", 
            "text": "fun box eq(\n  y: U64 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-U64/#parameters_28", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ne", 
            "text": "fun box ne(\n  y: U64 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-U64/#parameters_29", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#lt", 
            "text": "fun box lt(\n  y: U64 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-U64/#parameters_30", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#le", 
            "text": "fun box le(\n  y: U64 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-U64/#parameters_31", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ge", 
            "text": "fun box ge(\n  y: U64 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-U64/#parameters_32", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#gt", 
            "text": "fun box gt(\n  y: U64 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-U64/#parameters_33", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-U64/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-U64/#returns_50", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-U64/#returns_51", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-U64/#returns_52", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-U64/#returns_53", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-U64/#returns_54", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-U64/#returns_55", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-U64/#returns_56", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-U64/#returns_57", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-U64/#returns_58", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-U64/#returns_59", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u64_1", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-U64/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-U64/#returns_61", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-U64/#returns_62", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-U64/#returns_63", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-U64/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-U64/#returns_65", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_66", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_67", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_68", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_69", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_70", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_71", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_72", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_73", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_74", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_75", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_77", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_78", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_79", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-U64/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#compare", 
            "text": "fun box compare(\n  that: U64 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-U64/#parameters_34", 
            "text": "that:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U64/#returns_82", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U64/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-U64/#_value", 
            "text": "fun box _value()\n: U64 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-U64/#returns_83", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/", 
            "text": "ULong\n\n\nprimitive val ULong is\n  _UnsignedInteger[ULong val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nULong\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: ULong val)\n: ULong val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: ULong val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: ULong val^\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: ULong val^\n\n\n\n\nReturns\n\n\n\n\nULong\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nULong\n val , \nULong\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: ULong val)\n: ULong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: ULong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val", 
            "title": "primitive ULong"
        }, 
        {
            "location": "/builtin-ULong/#ulong", 
            "text": "primitive val ULong is\n  _UnsignedInteger[ULong val] val", 
            "title": "ULong"
        }, 
        {
            "location": "/builtin-ULong/#implements", 
            "text": "_UnsignedInteger [ ULong  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-ULong/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ULong/#create", 
            "text": "new val create(\n  value: ULong val)\n: ULong val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-ULong/#parameters", 
            "text": "value:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns", 
            "text": "ULong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: ULong val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-ULong/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_1", 
            "text": "ULong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#min_value", 
            "text": "new val min_value()\n: ULong val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-ULong/#returns_2", 
            "text": "ULong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#max_value", 
            "text": "new val max_value()\n: ULong val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-ULong/#returns_3", 
            "text": "ULong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ULong/#next_pow2", 
            "text": "fun box next_pow2()\n: ULong val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-ULong/#returns_4", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#abs", 
            "text": "fun box abs()\n: ULong val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-ULong/#returns_5", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#bswap", 
            "text": "fun box bswap()\n: ULong val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-ULong/#returns_6", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#popcount", 
            "text": "fun box popcount()\n: ULong val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-ULong/#returns_7", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#clz", 
            "text": "fun box clz()\n: ULong val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-ULong/#returns_8", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ctz", 
            "text": "fun box ctz()\n: ULong val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-ULong/#returns_9", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: ULong val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_10", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: ULong val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_11", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#bitwidth", 
            "text": "fun box bitwidth()\n: ULong val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-ULong/#returns_12", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#min", 
            "text": "fun box min(\n  y: ULong val)\n: ULong val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-ULong/#parameters_2", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_13", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#max", 
            "text": "fun box max(\n  y: ULong val)\n: ULong val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-ULong/#parameters_3", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_14", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#addc", 
            "text": "fun box addc(\n  y: ULong val)\n: (ULong val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-ULong/#parameters_4", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_15", 
            "text": "( ULong  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#subc", 
            "text": "fun box subc(\n  y: ULong val)\n: (ULong val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-ULong/#parameters_5", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_16", 
            "text": "( ULong  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#mulc", 
            "text": "fun box mulc(\n  y: ULong val)\n: (ULong val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-ULong/#parameters_6", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_17", 
            "text": "( ULong  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#shl", 
            "text": "fun box shl(\n  y: ULong val)\n: ULong val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-ULong/#parameters_7", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_18", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#shr", 
            "text": "fun box shr(\n  y: ULong val)\n: ULong val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-ULong/#parameters_8", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_19", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_9", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_20", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_10", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_21", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#rotl", 
            "text": "fun box rotl(\n  y: ULong val)\n: ULong val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-ULong/#parameters_11", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_22", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#rotr", 
            "text": "fun box rotr(\n  y: ULong val)\n: ULong val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-ULong/#parameters_12", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_23", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-ULong/#returns_24", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_13", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_25", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_14", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_26", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_15", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_27", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_16", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_28", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: ULong val)\n: (ULong val , ULong val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_17", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_29", 
            "text": "( ULong  val ,  ULong  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: ULong val)\n: ULong val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#parameters_18", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_30", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: ULong val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_31", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#op_and", 
            "text": "fun box op_and(\n  y: ULong val)\n: ULong val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-ULong/#parameters_19", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_32", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#op_or", 
            "text": "fun box op_or(\n  y: ULong val)\n: ULong val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-ULong/#parameters_20", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_33", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#op_xor", 
            "text": "fun box op_xor(\n  y: ULong val)\n: ULong val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-ULong/#parameters_21", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_34", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#op_not", 
            "text": "fun box op_not()\n: ULong val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-ULong/#returns_35", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#add", 
            "text": "fun box add(\n  y: ULong val)\n: ULong val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-ULong/#parameters_22", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_36", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#sub", 
            "text": "fun box sub(\n  y: ULong val)\n: ULong val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-ULong/#parameters_23", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_37", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#mul", 
            "text": "fun box mul(\n  y: ULong val)\n: ULong val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-ULong/#parameters_24", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_38", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#div", 
            "text": "fun box div(\n  y: ULong val)\n: ULong val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-ULong/#parameters_25", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_39", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#divmod", 
            "text": "fun box divmod(\n  y: ULong val)\n: (ULong val , ULong val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-ULong/#parameters_26", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_40", 
            "text": "( ULong  val ,  ULong  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#mod", 
            "text": "fun box mod(\n  y: ULong val)\n: ULong val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-ULong/#parameters_27", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_41", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#neg", 
            "text": "fun box neg()\n: ULong val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-ULong/#returns_42", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#eq", 
            "text": "fun box eq(\n  y: ULong val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-ULong/#parameters_28", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ne", 
            "text": "fun box ne(\n  y: ULong val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-ULong/#parameters_29", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#lt", 
            "text": "fun box lt(\n  y: ULong val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-ULong/#parameters_30", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#le", 
            "text": "fun box le(\n  y: ULong val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-ULong/#parameters_31", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ge", 
            "text": "fun box ge(\n  y: ULong val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-ULong/#parameters_32", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#gt", 
            "text": "fun box gt(\n  y: ULong val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-ULong/#parameters_33", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-ULong/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-ULong/#returns_50", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-ULong/#returns_51", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-ULong/#returns_52", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-ULong/#returns_53", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-ULong/#returns_54", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-ULong/#returns_55", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-ULong/#returns_56", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-ULong/#returns_57", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-ULong/#returns_58", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-ULong/#returns_59", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-ULong/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-ULong/#returns_61", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ulong_1", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-ULong/#returns_62", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-ULong/#returns_63", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-ULong/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-ULong/#returns_65", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_66", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_67", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_68", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_69", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_70", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_71", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_72", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_73", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_74", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_75", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_77", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_78", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_79", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-ULong/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#compare", 
            "text": "fun box compare(\n  that: ULong val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-ULong/#parameters_34", 
            "text": "that:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ULong/#returns_82", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ULong/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-ULong/#_value", 
            "text": "fun box _value()\n: ULong val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-ULong/#returns_83", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/", 
            "text": "USize\n\n\nprimitive val USize is\n  _UnsignedInteger[USize val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nUSize\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: USize val)\n: USize val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: USize val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: USize val^\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: USize val^\n\n\n\n\nReturns\n\n\n\n\nUSize\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: USize val)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: USize val)\n: (USize val , USize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nUSize\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "primitive USize"
        }, 
        {
            "location": "/builtin-USize/#usize", 
            "text": "primitive val USize is\n  _UnsignedInteger[USize val] val", 
            "title": "USize"
        }, 
        {
            "location": "/builtin-USize/#implements", 
            "text": "_UnsignedInteger [ USize  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-USize/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-USize/#create", 
            "text": "new val create(\n  value: USize val)\n: USize val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-USize/#parameters", 
            "text": "value:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns", 
            "text": "USize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: USize val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-USize/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_1", 
            "text": "USize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#min_value", 
            "text": "new val min_value()\n: USize val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-USize/#returns_2", 
            "text": "USize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#max_value", 
            "text": "new val max_value()\n: USize val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-USize/#returns_3", 
            "text": "USize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-USize/#next_pow2", 
            "text": "fun box next_pow2()\n: USize val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-USize/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#abs", 
            "text": "fun box abs()\n: USize val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-USize/#returns_5", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#bswap", 
            "text": "fun box bswap()\n: USize val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-USize/#returns_6", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#popcount", 
            "text": "fun box popcount()\n: USize val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-USize/#returns_7", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#clz", 
            "text": "fun box clz()\n: USize val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-USize/#returns_8", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ctz", 
            "text": "fun box ctz()\n: USize val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-USize/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: USize val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_10", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: USize val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_11", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#bitwidth", 
            "text": "fun box bitwidth()\n: USize val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-USize/#returns_12", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#min", 
            "text": "fun box min(\n  y: USize val)\n: USize val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-USize/#parameters_2", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_13", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#max", 
            "text": "fun box max(\n  y: USize val)\n: USize val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-USize/#parameters_3", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_14", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#addc", 
            "text": "fun box addc(\n  y: USize val)\n: (USize val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-USize/#parameters_4", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_15", 
            "text": "( USize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#subc", 
            "text": "fun box subc(\n  y: USize val)\n: (USize val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-USize/#parameters_5", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_16", 
            "text": "( USize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#mulc", 
            "text": "fun box mulc(\n  y: USize val)\n: (USize val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-USize/#parameters_6", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_17", 
            "text": "( USize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#shl", 
            "text": "fun box shl(\n  y: USize val)\n: USize val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-USize/#parameters_7", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_18", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#shr", 
            "text": "fun box shr(\n  y: USize val)\n: USize val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-USize/#parameters_8", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_19", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: USize val)\n: USize val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_9", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_20", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: USize val)\n: USize val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_10", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_21", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#rotl", 
            "text": "fun box rotl(\n  y: USize val)\n: USize val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-USize/#parameters_11", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_22", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#rotr", 
            "text": "fun box rotr(\n  y: USize val)\n: USize val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-USize/#parameters_12", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_23", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-USize/#returns_24", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: USize val)\n: USize val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_13", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_25", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: USize val)\n: USize val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_14", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_26", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: USize val)\n: USize val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_15", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_27", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: USize val)\n: USize val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_16", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_28", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: USize val)\n: (USize val , USize val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_17", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_29", 
            "text": "( USize  val ,  USize  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: USize val)\n: USize val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-USize/#parameters_18", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_30", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: USize val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_31", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#op_and", 
            "text": "fun box op_and(\n  y: USize val)\n: USize val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-USize/#parameters_19", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_32", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#op_or", 
            "text": "fun box op_or(\n  y: USize val)\n: USize val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-USize/#parameters_20", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_33", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#op_xor", 
            "text": "fun box op_xor(\n  y: USize val)\n: USize val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-USize/#parameters_21", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_34", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#op_not", 
            "text": "fun box op_not()\n: USize val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-USize/#returns_35", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#add", 
            "text": "fun box add(\n  y: USize val)\n: USize val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-USize/#parameters_22", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_36", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#sub", 
            "text": "fun box sub(\n  y: USize val)\n: USize val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-USize/#parameters_23", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_37", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#mul", 
            "text": "fun box mul(\n  y: USize val)\n: USize val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-USize/#parameters_24", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_38", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#div", 
            "text": "fun box div(\n  y: USize val)\n: USize val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-USize/#parameters_25", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_39", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#divmod", 
            "text": "fun box divmod(\n  y: USize val)\n: (USize val , USize val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-USize/#parameters_26", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_40", 
            "text": "( USize  val ,  USize  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#mod", 
            "text": "fun box mod(\n  y: USize val)\n: USize val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-USize/#parameters_27", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_41", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#neg", 
            "text": "fun box neg()\n: USize val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-USize/#returns_42", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#eq", 
            "text": "fun box eq(\n  y: USize val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-USize/#parameters_28", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ne", 
            "text": "fun box ne(\n  y: USize val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-USize/#parameters_29", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#lt", 
            "text": "fun box lt(\n  y: USize val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-USize/#parameters_30", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#le", 
            "text": "fun box le(\n  y: USize val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-USize/#parameters_31", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ge", 
            "text": "fun box ge(\n  y: USize val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-USize/#parameters_32", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#gt", 
            "text": "fun box gt(\n  y: USize val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-USize/#parameters_33", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-USize/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-USize/#returns_50", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-USize/#returns_51", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-USize/#returns_52", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-USize/#returns_53", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-USize/#returns_54", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-USize/#returns_55", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-USize/#returns_56", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-USize/#returns_57", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-USize/#returns_58", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-USize/#returns_59", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-USize/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-USize/#returns_61", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-USize/#returns_62", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#usize_1", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-USize/#returns_63", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-USize/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-USize/#returns_65", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_66", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_67", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_68", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_69", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_70", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_71", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_72", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_73", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_74", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_75", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_77", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_78", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_79", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-USize/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#compare", 
            "text": "fun box compare(\n  that: USize val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-USize/#parameters_34", 
            "text": "that:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-USize/#returns_82", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-USize/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-USize/#_value", 
            "text": "fun box _value()\n: USize val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-USize/#returns_83", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/", 
            "text": "U128\n\n\nprimitive val U128 is\n  _UnsignedInteger[U128 val] val\n\n\n\n\nImplements\n\n\n\n\n_UnsignedInteger\n[\nU128\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: U128 val)\n: U128 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: U128 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: U128 val^\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: U128 val^\n\n\n\n\nReturns\n\n\n\n\nU128\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnext_pow2\n\n\nfun box next_pow2()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU128\n val , \nU128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: U128 val)\n: U128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: U128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val", 
            "title": "primitive U128"
        }, 
        {
            "location": "/builtin-U128/#u128", 
            "text": "primitive val U128 is\n  _UnsignedInteger[U128 val] val", 
            "title": "U128"
        }, 
        {
            "location": "/builtin-U128/#implements", 
            "text": "_UnsignedInteger [ U128  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-U128/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-U128/#create", 
            "text": "new val create(\n  value: U128 val)\n: U128 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-U128/#parameters", 
            "text": "value:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns", 
            "text": "U128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: U128 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-U128/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_1", 
            "text": "U128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#min_value", 
            "text": "new val min_value()\n: U128 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-U128/#returns_2", 
            "text": "U128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#max_value", 
            "text": "new val max_value()\n: U128 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-U128/#returns_3", 
            "text": "U128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-U128/#next_pow2", 
            "text": "fun box next_pow2()\n: U128 val", 
            "title": "next_pow2"
        }, 
        {
            "location": "/builtin-U128/#returns_4", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#abs", 
            "text": "fun box abs()\n: U128 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-U128/#returns_5", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#bswap", 
            "text": "fun box bswap()\n: U128 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-U128/#returns_6", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#popcount", 
            "text": "fun box popcount()\n: U128 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-U128/#returns_7", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#clz", 
            "text": "fun box clz()\n: U128 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-U128/#returns_8", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ctz", 
            "text": "fun box ctz()\n: U128 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-U128/#returns_9", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_10", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_11", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#bitwidth", 
            "text": "fun box bitwidth()\n: U128 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-U128/#returns_12", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#min", 
            "text": "fun box min(\n  y: U128 val)\n: U128 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-U128/#parameters_2", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_13", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#max", 
            "text": "fun box max(\n  y: U128 val)\n: U128 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-U128/#parameters_3", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_14", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-U128/#returns_15", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-U128/#returns_16", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#mul", 
            "text": "fun box mul(\n  y: U128 val)\n: U128 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-U128/#parameters_4", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_17", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#divmod", 
            "text": "fun box divmod(\n  y: U128 val)\n: (U128 val , U128 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-U128/#parameters_5", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_18", 
            "text": "( U128  val ,  U128  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#div", 
            "text": "fun box div(\n  y: U128 val)\n: U128 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-U128/#parameters_6", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_19", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#mod", 
            "text": "fun box mod(\n  y: U128 val)\n: U128 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-U128/#parameters_7", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_20", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#mul_unsafe", 
            "text": "Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_8", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_21", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#divmod_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: U128 val)\n: (U128 val , U128 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_9", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_22", 
            "text": "( U128  val ,  U128  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#div_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_10", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_23", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#mod_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_11", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_24", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-U128/#returns_25", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-U128/#returns_26", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#f32_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_27", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#f64_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_28", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#shl", 
            "text": "fun box shl(\n  y: U128 val)\n: U128 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-U128/#parameters_12", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_29", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#shr", 
            "text": "fun box shr(\n  y: U128 val)\n: U128 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-U128/#parameters_13", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_30", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_14", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_31", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_15", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_32", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#rotl", 
            "text": "fun box rotl(\n  y: U128 val)\n: U128 val", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-U128/#parameters_16", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_33", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#rotr", 
            "text": "fun box rotr(\n  y: U128 val)\n: U128 val", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-U128/#parameters_17", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_34", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_18", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_35", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: U128 val)\n: U128 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-U128/#parameters_19", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_36", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: U128 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_37", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#op_and", 
            "text": "fun box op_and(\n  y: U128 val)\n: U128 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-U128/#parameters_20", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_38", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#op_or", 
            "text": "fun box op_or(\n  y: U128 val)\n: U128 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-U128/#parameters_21", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_39", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#op_xor", 
            "text": "fun box op_xor(\n  y: U128 val)\n: U128 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-U128/#parameters_22", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_40", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#op_not", 
            "text": "fun box op_not()\n: U128 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-U128/#returns_41", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#add", 
            "text": "fun box add(\n  y: U128 val)\n: U128 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-U128/#parameters_23", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_42", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#sub", 
            "text": "fun box sub(\n  y: U128 val)\n: U128 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-U128/#parameters_24", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_43", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#neg", 
            "text": "fun box neg()\n: U128 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-U128/#returns_44", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#eq", 
            "text": "fun box eq(\n  y: U128 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-U128/#parameters_25", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ne", 
            "text": "fun box ne(\n  y: U128 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-U128/#parameters_26", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#lt", 
            "text": "fun box lt(\n  y: U128 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-U128/#parameters_27", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#le", 
            "text": "fun box le(\n  y: U128 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-U128/#parameters_28", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_48", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ge", 
            "text": "fun box ge(\n  y: U128 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-U128/#parameters_29", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_49", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#gt", 
            "text": "fun box gt(\n  y: U128 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-U128/#parameters_30", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_50", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-U128/#returns_51", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-U128/#returns_52", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-U128/#returns_53", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-U128/#returns_54", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-U128/#returns_55", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-U128/#returns_56", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-U128/#returns_57", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-U128/#returns_58", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-U128/#returns_59", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-U128/#returns_60", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-U128/#returns_61", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u128_1", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-U128/#returns_62", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-U128/#returns_63", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-U128/#returns_64", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_65", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_66", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_67", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_68", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_69", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_70", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_71", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_72", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_73", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_74", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_75", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_76", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_77", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-U128/#returns_78", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#compare", 
            "text": "fun box compare(\n  that: U128 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-U128/#parameters_31", 
            "text": "that:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-U128/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-U128/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-U128/#_value", 
            "text": "fun box _value()\n: U128 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-U128/#returns_80", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Unsigned/", 
            "text": "Unsigned\n\n\ntype Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val)", 
            "title": "type Unsigned"
        }, 
        {
            "location": "/builtin-Unsigned/#unsigned", 
            "text": "type Unsigned is\n  (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)", 
            "title": "Unsigned"
        }, 
        {
            "location": "/builtin-Unsigned/#type-alias-for", 
            "text": "( U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-Stringable/", 
            "text": "Stringable\n\n\nThings that can be turned into a String.\n\n\ninterface box Stringable\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nGenerate a string representation of this object.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^", 
            "title": "interface Stringable"
        }, 
        {
            "location": "/builtin-Stringable/#stringable", 
            "text": "Things that can be turned into a String.  interface box Stringable", 
            "title": "Stringable"
        }, 
        {
            "location": "/builtin-Stringable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Stringable/#string", 
            "text": "Generate a string representation of this object.  fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Stringable/#returns", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/", 
            "text": "String\n\n\nA String is an ordered collection of characters.\n\n\nStrings don't specify an encoding.\n\n\nExample usage of some common String methods:\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      // construct a new string\n      let str = \nHello\n\n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add \n world\n to the end of our original string\n      let str_new = str.add(\n world\n)\n\n      // count occurrences of letter \nl\n\n      let count = str_new.count(\nl\n)\n\n      // find first occurrence of letter \nw\n\n      let first_w = str_new.find(\nw\n)\n      // find first occurrence of letter \nd\n\n      let first_d = str_new.find(\nd\n)\n\n      // get substring capturing \nworld\n\n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end\n\n\n\n\nclass val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nSeq\n[\nU8\n val] ref\n\n\nComparable\n[\nString\n box] ref\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nAn empty string. Enough space for len bytes is reserved.\n\n\nnew ref create(\n  len: USize val = seq)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_array\n\n\nCreate a string from an array, reusing the underlying data pointer.\n\n\nnew val from_array(\n  data: Array[U8 val] val)\n: String val^\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] val\n\n\n\n\nReturns\n\n\n\n\nString\n val^\n\n\n\n\n\n\nfrom_iso_array\n\n\nCreate a string from an array, reusing the underlying data pointer\n\n\nnew iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfrom_cpointer\n\n\nReturn a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.\n\n\nnew ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_cstring\n\n\nReturn a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.\n\n\nnew ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] ref\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cpointer\n\n\nCreate a string by copying a fixed number of bytes from a pointer.\n\n\nnew ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\ncopy_cstring\n\n\nCreate a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.\n\n\nnew ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nstr: \nPointer\n[\nU8\n val] box\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nfrom_utf32\n\n\nCreate a UTF-8 string from a single UTF-32 code point.\n\n\nnew ref from_utf32(\n  value: U32 val)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\npush_utf32\n\n\nPush a UTF-32 code point.\n\n\nfun ref push_utf32(\n  value: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncpointer\n\n\nReturns a C compatible pointer to the underlying string allocation.\n\n\nfun box cpointer(\n  offset: USize val = seq)\n: Pointer[U8 val] tag\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\ncstring\n\n\nReturns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.\n\n\nfun box cstring()\n: Pointer[U8 val] tag\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nU8\n val] tag\n\n\n\n\n\n\narray\n\n\nReturns an Array[U8] that that reuses the underlying data pointer.\n\n\nfun val array()\n: Array[U8 val] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\nsize\n\n\nReturns the length of the string data in bytes.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncodepoints\n\n\nReturns the number of unicode code points in the string between the two\noffsets. Index range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box codepoints(\n  from: ISize val = seq,\n  to: ISize val = seq)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val = seq\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nReturns the space available for data, not including the null terminator.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\n\nReserve space for len bytes. An additional byte will be reserved for the\nnull terminator.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrecalc\n\n\nRecalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.\n\n\nfun ref recalc()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\n\nTruncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.\n\n\nNote that memory is not freed by this operation.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\n\nTrim the string to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new string nor copy\nelements.\n\n\nfun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\n\nReturn a shared portion of this string, covering \nfrom\n until \nto\n.\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nchop\n\n\nChops the string in half at the split point requested and returns both\nthe left and right portions. The original string is trimmed in place and\nreturned as the right portion. If the split point is larger than the\nstring, the left portion is the original string and the right portion\nis a new empty string.\nBoth strings are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new string pointer nor copy elements.\n\n\nfun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)\n\n\n\n\nParameters\n\n\n\n\nsplit_point: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nString\n iso^ , \nString\n iso^)\n\n\n\n\n\n\nis_null_terminated\n\n\nReturn true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.\n\n\nfun box is_null_terminated()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nutf32\n\n\nReturn a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.\n\n\nfun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU8\n val) ?\n\n\n\n\n\n\napply\n\n\nReturns the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate\n\n\nChange the i-th byte. Raise an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nat_offset\n\n\nReturns the byte at the given offset. Raise an error if the offset is out\nof bounds.\n\n\nfun box at_offset(\n  offset: ISize val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nupdate_offset\n\n\nChanges a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.\n\n\nfun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nclone\n\n\nReturns a copy of the string. The resulting string is\nnull-terminated even if the original is not.\n\n\nfun box clone()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfind\n\n\nReturn the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.\n\n\nfun box find(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nrfind\n\n\nReturn the index of n-th instance of \ns\n in the string starting from the\nend. The \noffset\n represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of \ns\n or \ns\n is empty.\n\n\nfun box rfind(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\ncontains\n\n\nReturns true if contains s as a substring, false otherwise.\n\n\nfun box contains(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncount\n\n\nCounts the non-overlapping occurrences of s in the string.\n\n\nfun box count(\n  s: String box,\n  offset: ISize val = seq)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nat\n\n\nReturns true if the substring s is present at the given offset.\n\n\nfun box at(\n  s: String box,\n  offset: ISize val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndelete\n\n\nDelete len bytes at the supplied offset, compacting the string in place.\n\n\nfun ref delete(\n  offset: ISize val,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsubstring\n\n\nReturns a substring. Index range [\nfrom\n .. \nto\n) is half-open.\nReturns an empty string if nothing is in the range.\n\n\nNote that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see \ntrim\n and\n\ntrim_in_place\n.\n\n\nfun box substring(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower\n\n\nReturns a lower case version of the string.\n\n\nfun box lower()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nlower_in_place\n\n\nTransforms the string to lower case. Currently only knows ASCII case.\n\n\nfun ref lower_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nupper\n\n\nReturns an upper case version of the string. Currently only knows ASCII\ncase.\n\n\nfun box upper()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nupper_in_place\n\n\nTransforms the string to upper case.\n\n\nfun ref upper_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreverse\n\n\nReturns a reversed version of the string.\n\n\nfun box reverse()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nreverse_in_place\n\n\nReverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdd a byte to the end of the string.\n\n\nfun ref push(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemove a byte from the end of the string.\n\n\nfun ref pop()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nunshift\n\n\nAdds a byte to the beginning of the string.\n\n\nfun ref unshift(\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemoves a byte from the beginning of the string.\n\n\nfun ref shift()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nappend\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: \nReadSeq\n[\nU8\n val] box\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated bytes to the end of the string, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[\nU8\n val] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nTruncate the string to zero length.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\n\nReturns a version of the string with the given string inserted at the given\noffset.\n\n\nfun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ninsert_in_place\n\n\nInserts the given string at the given offset. Appends the string if the\noffset is out of bounds.\n\n\nfun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert_byte\n\n\nInserts a byte at the given offset. Appends if the offset is out of bounds.\n\n\nfun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncut\n\n\nReturns a version of the string with the given range deleted.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun box cut(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncut_in_place\n\n\nCuts the given range out of the string.\nIndex range [\nfrom\n .. \nto\n) is half-open.\n\n\nfun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nISize\n val\n\n\nto: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove all instances of s from the string. Returns the count of removed\ninstances.\n\n\nfun ref remove(\n  s: String box)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreplace\n\n\nReplace up to n occurrences of \nfrom\n in \nthis\n with \nto\n. If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.\n\n\nfun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = seq)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n box\n\n\nto: \nString\n box\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsplit_by\n\n\nSplit the string into an array of strings that are delimited by \ndelim\n in\nthe original string. If \nn \n 0\n, then the split count is limited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") =\n [\"1\", \"\", \"2\"]\n.\n\n\nAn empty delimiter results in an array that contains a single element equal\nto the whole string.\n\n\nfun box split_by(\n  delim: String val,\n  n: USize val = seq)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\ndelim: \nString\n val\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nsplit\n\n\nSplit the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If \nn \n 0\n, then the split count is\nlimited to n.\n\n\nAdjacent delimiters result in a zero length entry in the array. For\nexample, \n\"1,,2\".split(\",\") =\n [\"1\", \"\", \"2\"]\n.\n\n\nfun box split(\n  delim: String val = seq,\n  n: USize val = seq)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\ndelim: \nString\n val = seq\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nstrip\n\n\nRemove all leading and trailing characters from the string that are in s.\n\n\nfun ref strip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrstrip\n\n\nRemove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.\n\n\nfun ref rstrip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlstrip\n\n\nRemove all leading characters within the string that are in s. By default,\nleading whitespace is removed.\n\n\nfun ref lstrip(\n  s: String box = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\n\nReturn a string that is a concatenation of this and that.\n\n\nfun box add(\n  that: String box)\n: String val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\njoin\n\n\nReturn a string that is a concatenation of the strings in data, using this\nas a separator.\n\n\nfun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nIterator\n[\nStringable\n box] ref\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ncompare\n\n\nLexically compare two strings.\n\n\nfun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\ncompare_sub\n\n\nLexically compare at most \nn\n bytes of the substring of \nthis\n starting at\n\noffset\n with the substring of \nthat\n starting at \nthat_offset\n. The\ncomparison is case sensitive unless \nignore_case\n is \ntrue\n.\n\n\nIf the substring of \nthis\n is a proper prefix of the substring of \nthat\n,\nthen \nthis\n is \nLess\n than \nthat\n. Likewise, if \nthat\n is a proper prefix of\n\nthis\n, then \nthis\n is \nGreater\n than \nthat\n.\n\n\nBoth \noffset\n and \nthat_offset\n can be negative, in which case the offsets\nare computed from the end of the string.\n\n\nIf \nn + offset\n is greater than the length of \nthis\n, or \nn + that_offset\n\nis greater than the length of \nthat\n, then the number of positions compared\nwill be reduced to the length of the longest substring.\n\n\nNeeds to be made UTF-8 safe.\n\n\nfun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = seq,\n  that_offset: ISize val = seq,\n  ignore_case: Bool val = seq)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\nn: \nUSize\n val\n\n\noffset: \nISize\n val = seq\n\n\nthat_offset: \nISize\n val = seq\n\n\nignore_case: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\n\nReturns true if the two strings have the same contents.\n\n\nfun box eq(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturns true if this is lexically less than that. Needs to be made UTF-8\nsafe.\n\n\nfun box lt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.\n\n\nfun box le(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\noffset_to_index\n\n\nfun box offset_to_index(\n  i: ISize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ni: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbool\n\n\nfun box bool()\n: Bool val ?\n\n\n\n\nReturns\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\ni8\n\n\nfun box i8(\n  base: U8 val = seq)\n: I8 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI8\n val ?\n\n\n\n\n\n\ni16\n\n\nfun box i16(\n  base: U8 val = seq)\n: I16 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI16\n val ?\n\n\n\n\n\n\ni32\n\n\nfun box i32(\n  base: U8 val = seq)\n: I32 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI32\n val ?\n\n\n\n\n\n\ni64\n\n\nfun box i64(\n  base: U8 val = seq)\n: I64 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI64\n val ?\n\n\n\n\n\n\ni128\n\n\nfun box i128(\n  base: U8 val = seq)\n: I128 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nI128\n val ?\n\n\n\n\n\n\nilong\n\n\nfun box ilong(\n  base: U8 val = seq)\n: ILong val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nILong\n val ?\n\n\n\n\n\n\nisize\n\n\nfun box isize(\n  base: U8 val = seq)\n: ISize val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nISize\n val ?\n\n\n\n\n\n\nu8\n\n\nfun box u8(\n  base: U8 val = seq)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\nu16\n\n\nfun box u16(\n  base: U8 val = seq)\n: U16 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU16\n val ?\n\n\n\n\n\n\nu32\n\n\nfun box u32(\n  base: U8 val = seq)\n: U32 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\nu64\n\n\nfun box u64(\n  base: U8 val = seq)\n: U64 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\nu128\n\n\nfun box u128(\n  base: U8 val = seq)\n: U128 val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nU128\n val ?\n\n\n\n\n\n\nulong\n\n\nfun box ulong(\n  base: U8 val = seq)\n: ULong val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nULong\n val ?\n\n\n\n\n\n\nusize\n\n\nfun box usize(\n  base: U8 val = seq)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nread_int[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nInteger\n[A] val)]\n\n\nRead an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.\n\n\nfun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) \n Integer[A] val)](\n  offset: ISize val = seq,\n  base: U8 val = seq)\n: (A , USize val) ?\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val = seq\n\n\nbase: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\n(A , \nUSize\n val) ?\n\n\n\n\n\n\nf32\n\n\nfun box f32(\n  offset: ISize val = seq)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64(\n  offset: ISize val = seq)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the bytes in the string.\n\n\nfun box values()\n: StringBytes ref^\n\n\n\n\nReturns\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nrunes\n\n\nReturn an iterator over the codepoints in the string.\n\n\nfun box runes()\n: StringRunes ref^\n\n\n\n\nReturns\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_copy_to\n\n\nCopy copy_len characters from this to that at specified offsets.\n\n\nfun box _copy_to(\n  ptr: Pointer[U8 val] ref,\n  copy_len: USize val,\n  from_offset: USize val = seq,\n  to_offset: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nptr: \nPointer\n[\nU8\n val] ref\n\n\ncopy_len: \nUSize\n val\n\n\nfrom_offset: \nUSize\n val = seq\n\n\nto_offset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_append\n\n\nfun iso _append(\n  s: String box)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_to_int[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nInteger\n[A] val)]\n\n\nConvert the \nwhole\n string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.\n\n\nfun box _to_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) \n Integer[A] val)](\n  base: U8 val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\n_read_int_base[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nInteger\n[A] val)]\n\n\nDetermine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.\n\n\nfun box _read_int_base[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) \n Integer[A] val)](\n  base: U8 val,\n  index: USize val)\n: (A , USize val)\n\n\n\n\nParameters\n\n\n\n\nbase: \nU8\n val\n\n\nindex: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(A , \nUSize\n val)\n\n\n\n\n\n\n_set\n\n\nUnsafe update, used internally.\n\n\nfun ref _set(\n  i: USize val,\n  value: U8 val)\n: U8 val\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val", 
            "title": "class String"
        }, 
        {
            "location": "/builtin-String/#string", 
            "text": "A String is an ordered collection of characters.  Strings don't specify an encoding.  Example usage of some common String methods:  actor Main\n  new create(env: Env) = \n    try\n      // construct a new string\n      let str =  Hello \n\n      // make an uppercased version\n      let str_upper = str.upper()\n      // make a reversed version\n      let str_reversed = str.reverse()\n\n      // add   world  to the end of our original string\n      let str_new = str.add(  world )\n\n      // count occurrences of letter  l \n      let count = str_new.count( l )\n\n      // find first occurrence of letter  w \n      let first_w = str_new.find( w )\n      // find first occurrence of letter  d \n      let first_d = str_new.find( d )\n\n      // get substring capturing  world \n      let substr = str_new.substring(first_w, first_d+1)\n      // clone substring\n      let substr_clone = substr.clone()\n\n      // print our substr\n      env.out.print(consume substr)\n  end  class val String is\n  Seq[U8 val] ref,\n  Comparable[String box] ref,\n  Stringable box", 
            "title": "String"
        }, 
        {
            "location": "/builtin-String/#implements", 
            "text": "Seq [ U8  val] ref  Comparable [ String  box] ref  Stringable  box", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-String/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-String/#create", 
            "text": "An empty string. Enough space for len bytes is reserved.  new ref create(\n  len: USize val = seq)\n: String ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-String/#parameters", 
            "text": "len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#from_array", 
            "text": "Create a string from an array, reusing the underlying data pointer.  new val from_array(\n  data: Array[U8 val] val)\n: String val^", 
            "title": "from_array"
        }, 
        {
            "location": "/builtin-String/#parameters_1", 
            "text": "data:  Array [ U8  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_1", 
            "text": "String  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#from_iso_array", 
            "text": "Create a string from an array, reusing the underlying data pointer  new iso from_iso_array(\n  data: Array[U8 val] iso)\n: String iso^", 
            "title": "from_iso_array"
        }, 
        {
            "location": "/builtin-String/#parameters_2", 
            "text": "data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_2", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#from_cpointer", 
            "text": "Return a string from binary pointer data without making a\ncopy. This must be done only with C-FFI functions that return\npony_alloc'd character arrays. If a null pointer is given then an\nempty string is returned.  new ref from_cpointer(\n  str: Pointer[U8 val] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: String ref^", 
            "title": "from_cpointer"
        }, 
        {
            "location": "/builtin-String/#parameters_3", 
            "text": "str:  Pointer [ U8  val] ref  len:  USize  val  alloc:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_3", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#from_cstring", 
            "text": "Return a string from a pointer to a null-terminated cstring\nwithout making a copy. The data is not copied. This must be done\nonly with C-FFI functions that return pony_alloc'd character\narrays. The pointer is scanned for the first null byte, which will\nbe interpreted as the null terminator. Note that the scan is\nunbounded; the pointed to data must be null-terminated within\nthe allocated array to preserve memory safety. If a null pointer\nis given then an empty string is returned.  new ref from_cstring(\n  str: Pointer[U8 val] ref)\n: String ref^", 
            "title": "from_cstring"
        }, 
        {
            "location": "/builtin-String/#parameters_4", 
            "text": "str:  Pointer [ U8  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_4", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#copy_cpointer", 
            "text": "Create a string by copying a fixed number of bytes from a pointer.  new ref copy_cpointer(\n  str: Pointer[U8 val] box,\n  len: USize val)\n: String ref^", 
            "title": "copy_cpointer"
        }, 
        {
            "location": "/builtin-String/#parameters_5", 
            "text": "str:  Pointer [ U8  val] box  len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_5", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#copy_cstring", 
            "text": "Create a string by copying a null-terminated C string. Note that\nthe scan is unbounded; the pointed to data must be null-terminated\nwithin the allocated array to preserve memory safety. If a null\npointer is given then an empty string is returned.  new ref copy_cstring(\n  str: Pointer[U8 val] box)\n: String ref^", 
            "title": "copy_cstring"
        }, 
        {
            "location": "/builtin-String/#parameters_6", 
            "text": "str:  Pointer [ U8  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_6", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#from_utf32", 
            "text": "Create a UTF-8 string from a single UTF-32 code point.  new ref from_utf32(\n  value: U32 val)\n: String ref^", 
            "title": "from_utf32"
        }, 
        {
            "location": "/builtin-String/#parameters_7", 
            "text": "value:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_7", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-String/#push_utf32", 
            "text": "Push a UTF-32 code point.  fun ref push_utf32(\n  value: U32 val)\n: None val", 
            "title": "push_utf32"
        }, 
        {
            "location": "/builtin-String/#parameters_8", 
            "text": "value:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#cpointer", 
            "text": "Returns a C compatible pointer to the underlying string allocation.  fun box cpointer(\n  offset: USize val = seq)\n: Pointer[U8 val] tag", 
            "title": "cpointer"
        }, 
        {
            "location": "/builtin-String/#parameters_9", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_9", 
            "text": "Pointer [ U8  val] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#cstring", 
            "text": "Returns a C compatible pointer to a null-terminated version of the\nstring, safe to pass to an FFI function that doesn't accept a size\nargument, expecting a null-terminator. If the underlying string\nis already null terminated, this is returned; otherwise the string\nis copied into a new, null-terminated allocation.  fun box cstring()\n: Pointer[U8 val] tag", 
            "title": "cstring"
        }, 
        {
            "location": "/builtin-String/#returns_10", 
            "text": "Pointer [ U8  val] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#array", 
            "text": "Returns an Array[U8] that that reuses the underlying data pointer.  fun val array()\n: Array[U8 val] val", 
            "title": "array"
        }, 
        {
            "location": "/builtin-String/#returns_11", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#size", 
            "text": "Returns the length of the string data in bytes.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/builtin-String/#returns_12", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#codepoints", 
            "text": "Returns the number of unicode code points in the string between the two\noffsets. Index range [ from  ..  to ) is half-open.  fun box codepoints(\n  from: ISize val = seq,\n  to: ISize val = seq)\n: USize val", 
            "title": "codepoints"
        }, 
        {
            "location": "/builtin-String/#parameters_10", 
            "text": "from:  ISize  val = seq  to:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_13", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#space", 
            "text": "Returns the space available for data, not including the null terminator.  fun box space()\n: USize val", 
            "title": "space"
        }, 
        {
            "location": "/builtin-String/#returns_14", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#reserve", 
            "text": "Reserve space for len bytes. An additional byte will be reserved for the\nnull terminator.  fun ref reserve(\n  len: USize val)\n: None val", 
            "title": "reserve"
        }, 
        {
            "location": "/builtin-String/#parameters_11", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#compact", 
            "text": "Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored. The string is returned to allow call chaining.  fun ref compact()\n: None val", 
            "title": "compact"
        }, 
        {
            "location": "/builtin-String/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#recalc", 
            "text": "Recalculates the string length. This is only needed if the string is\nchanged via an FFI call. If a null terminator byte is not found within the\nallocated length, the size will not be changed.  fun ref recalc()\n: None val", 
            "title": "recalc"
        }, 
        {
            "location": "/builtin-String/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#truncate", 
            "text": "Truncates the string at the minimum of len and space. Ensures there is a\nnull terminator. Does not check for null terminators inside the string.  Note that memory is not freed by this operation.  fun ref truncate(\n  len: USize val)\n: None val", 
            "title": "truncate"
        }, 
        {
            "location": "/builtin-String/#parameters_12", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#trim_in_place", 
            "text": "Trim the string to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new string nor copy\nelements.  fun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val", 
            "title": "trim_in_place"
        }, 
        {
            "location": "/builtin-String/#parameters_13", 
            "text": "from:  USize  val = seq  to:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#trim", 
            "text": "Return a shared portion of this string, covering  from  until  to .\nBoth the original and the new string are immutable, as they share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: String val", 
            "title": "trim"
        }, 
        {
            "location": "/builtin-String/#parameters_14", 
            "text": "from:  USize  val = seq  to:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_20", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#chop", 
            "text": "Chops the string in half at the split point requested and returns both\nthe left and right portions. The original string is trimmed in place and\nreturned as the right portion. If the split point is larger than the\nstring, the left portion is the original string and the right portion\nis a new empty string.\nBoth strings are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new string pointer nor copy elements.  fun iso chop(\n  split_point: USize val)\n: (String iso^ , String iso^)", 
            "title": "chop"
        }, 
        {
            "location": "/builtin-String/#parameters_15", 
            "text": "split_point:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_21", 
            "text": "( String  iso^ ,  String  iso^)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#is_null_terminated", 
            "text": "Return true if the string is null-terminated and safe to pass to an FFI\nfunction that doesn't accept a size argument, expecting a null-terminator.\nThis method checks that there is a null byte just after the final position\nof populated bytes in the string, but does not check for other null bytes\nwhich may be present earlier in the content of the string.\nIf you need a null-terminated copy of this string, use the clone method.  fun box is_null_terminated()\n: Bool val", 
            "title": "is_null_terminated"
        }, 
        {
            "location": "/builtin-String/#returns_22", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#utf32", 
            "text": "Return a UTF32 representation of the character at the given offset and the\nnumber of bytes needed to encode that character. If the offset does not\npoint to the beginning of a valid UTF8 encoding, return 0xFFFD (the unicode\nreplacement character) and a length of one. Raise an error if the offset is\nout of bounds.  fun box utf32(\n  offset: ISize val)\n: (U32 val , U8 val) ?", 
            "title": "utf32"
        }, 
        {
            "location": "/builtin-String/#parameters_16", 
            "text": "offset:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_23", 
            "text": "( U32  val ,  U8  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#apply", 
            "text": "Returns the i-th byte. Raise an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: U8 val ?", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-String/#parameters_17", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_24", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#update", 
            "text": "Change the i-th byte. Raise an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: U8 val)\n: U8 val ?", 
            "title": "update"
        }, 
        {
            "location": "/builtin-String/#parameters_18", 
            "text": "i:  USize  val  value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_25", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#at_offset", 
            "text": "Returns the byte at the given offset. Raise an error if the offset is out\nof bounds.  fun box at_offset(\n  offset: ISize val)\n: U8 val ?", 
            "title": "at_offset"
        }, 
        {
            "location": "/builtin-String/#parameters_19", 
            "text": "offset:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_26", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#update_offset", 
            "text": "Changes a byte in the string, returning the previous byte at that offset.\nRaise an error if the offset is out of bounds.  fun ref update_offset(\n  offset: ISize val,\n  value: U8 val)\n: U8 val ?", 
            "title": "update_offset"
        }, 
        {
            "location": "/builtin-String/#parameters_20", 
            "text": "offset:  ISize  val  value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_27", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#clone", 
            "text": "Returns a copy of the string. The resulting string is\nnull-terminated even if the original is not.  fun box clone()\n: String iso^", 
            "title": "clone"
        }, 
        {
            "location": "/builtin-String/#returns_28", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#find", 
            "text": "Return the index of the n-th instance of s in the string starting from the\nbeginning. Raise an error if there is no n-th occurrence of s or s is empty.  fun box find(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?", 
            "title": "find"
        }, 
        {
            "location": "/builtin-String/#parameters_21", 
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_29", 
            "text": "ISize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#rfind", 
            "text": "Return the index of n-th instance of  s  in the string starting from the\nend. The  offset  represents the highest index to included in the search.\nRaise an error if there is no n-th occurrence of  s  or  s  is empty.  fun box rfind(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: ISize val ?", 
            "title": "rfind"
        }, 
        {
            "location": "/builtin-String/#parameters_22", 
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_30", 
            "text": "ISize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#contains", 
            "text": "Returns true if contains s as a substring, false otherwise.  fun box contains(\n  s: String box,\n  offset: ISize val = seq,\n  nth: USize val = seq)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/builtin-String/#parameters_23", 
            "text": "s:  String  box  offset:  ISize  val = seq  nth:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_31", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#count", 
            "text": "Counts the non-overlapping occurrences of s in the string.  fun box count(\n  s: String box,\n  offset: ISize val = seq)\n: USize val", 
            "title": "count"
        }, 
        {
            "location": "/builtin-String/#parameters_24", 
            "text": "s:  String  box  offset:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_32", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#at", 
            "text": "Returns true if the substring s is present at the given offset.  fun box at(\n  s: String box,\n  offset: ISize val = seq)\n: Bool val", 
            "title": "at"
        }, 
        {
            "location": "/builtin-String/#parameters_25", 
            "text": "s:  String  box  offset:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_33", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#delete", 
            "text": "Delete len bytes at the supplied offset, compacting the string in place.  fun ref delete(\n  offset: ISize val,\n  len: USize val = seq)\n: None val", 
            "title": "delete"
        }, 
        {
            "location": "/builtin-String/#parameters_26", 
            "text": "offset:  ISize  val  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_34", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#substring", 
            "text": "Returns a substring. Index range [ from  ..  to ) is half-open.\nReturns an empty string if nothing is in the range.  Note that this operation allocates a new string to be returned. For\nsimilar operations that don't allocate a new string, see  trim  and trim_in_place .  fun box substring(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^", 
            "title": "substring"
        }, 
        {
            "location": "/builtin-String/#parameters_27", 
            "text": "from:  ISize  val  to:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_35", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#lower", 
            "text": "Returns a lower case version of the string.  fun box lower()\n: String iso^", 
            "title": "lower"
        }, 
        {
            "location": "/builtin-String/#returns_36", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#lower_in_place", 
            "text": "Transforms the string to lower case. Currently only knows ASCII case.  fun ref lower_in_place()\n: None val", 
            "title": "lower_in_place"
        }, 
        {
            "location": "/builtin-String/#returns_37", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#upper", 
            "text": "Returns an upper case version of the string. Currently only knows ASCII\ncase.  fun box upper()\n: String iso^", 
            "title": "upper"
        }, 
        {
            "location": "/builtin-String/#returns_38", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#upper_in_place", 
            "text": "Transforms the string to upper case.  fun ref upper_in_place()\n: None val", 
            "title": "upper_in_place"
        }, 
        {
            "location": "/builtin-String/#returns_39", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#reverse", 
            "text": "Returns a reversed version of the string.  fun box reverse()\n: String iso^", 
            "title": "reverse"
        }, 
        {
            "location": "/builtin-String/#returns_40", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#reverse_in_place", 
            "text": "Reverses the byte order in the string. This needs to be changed to handle\nUTF-8 correctly.  fun ref reverse_in_place()\n: None val", 
            "title": "reverse_in_place"
        }, 
        {
            "location": "/builtin-String/#returns_41", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#push", 
            "text": "Add a byte to the end of the string.  fun ref push(\n  value: U8 val)\n: None val", 
            "title": "push"
        }, 
        {
            "location": "/builtin-String/#parameters_28", 
            "text": "value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_42", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#pop", 
            "text": "Remove a byte from the end of the string.  fun ref pop()\n: U8 val ?", 
            "title": "pop"
        }, 
        {
            "location": "/builtin-String/#returns_43", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#unshift", 
            "text": "Adds a byte to the beginning of the string.  fun ref unshift(\n  value: U8 val)\n: None val", 
            "title": "unshift"
        }, 
        {
            "location": "/builtin-String/#parameters_29", 
            "text": "value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_44", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#shift", 
            "text": "Removes a byte from the beginning of the string.  fun ref shift()\n: U8 val ?", 
            "title": "shift"
        }, 
        {
            "location": "/builtin-String/#returns_45", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#append", 
            "text": "Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: ReadSeq[U8 val] box,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "append"
        }, 
        {
            "location": "/builtin-String/#parameters_30", 
            "text": "seq:  ReadSeq [ U8  val] box  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_46", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#concat", 
            "text": "Add len iterated bytes to the end of the string, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[U8 val] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "concat"
        }, 
        {
            "location": "/builtin-String/#parameters_31", 
            "text": "iter:  Iterator [ U8  val] ref  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_47", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#clear", 
            "text": "Truncate the string to zero length.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/builtin-String/#returns_48", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#insert", 
            "text": "Returns a version of the string with the given string inserted at the given\noffset.  fun box insert(\n  offset: ISize val,\n  that: String val)\n: String iso^", 
            "title": "insert"
        }, 
        {
            "location": "/builtin-String/#parameters_32", 
            "text": "offset:  ISize  val  that:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_49", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#insert_in_place", 
            "text": "Inserts the given string at the given offset. Appends the string if the\noffset is out of bounds.  fun ref insert_in_place(\n  offset: ISize val,\n  that: String box)\n: None val", 
            "title": "insert_in_place"
        }, 
        {
            "location": "/builtin-String/#parameters_33", 
            "text": "offset:  ISize  val  that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_50", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#insert_byte", 
            "text": "Inserts a byte at the given offset. Appends if the offset is out of bounds.  fun ref insert_byte(\n  offset: ISize val,\n  value: U8 val)\n: None val", 
            "title": "insert_byte"
        }, 
        {
            "location": "/builtin-String/#parameters_34", 
            "text": "offset:  ISize  val  value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_51", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#cut", 
            "text": "Returns a version of the string with the given range deleted.\nIndex range [ from  ..  to ) is half-open.  fun box cut(\n  from: ISize val,\n  to: ISize val = seq)\n: String iso^", 
            "title": "cut"
        }, 
        {
            "location": "/builtin-String/#parameters_35", 
            "text": "from:  ISize  val  to:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_52", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#cut_in_place", 
            "text": "Cuts the given range out of the string.\nIndex range [ from  ..  to ) is half-open.  fun ref cut_in_place(\n  from: ISize val,\n  to: ISize val = seq)\n: None val", 
            "title": "cut_in_place"
        }, 
        {
            "location": "/builtin-String/#parameters_36", 
            "text": "from:  ISize  val  to:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_53", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#remove", 
            "text": "Remove all instances of s from the string. Returns the count of removed\ninstances.  fun ref remove(\n  s: String box)\n: USize val", 
            "title": "remove"
        }, 
        {
            "location": "/builtin-String/#parameters_37", 
            "text": "s:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_54", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#replace", 
            "text": "Replace up to n occurrences of  from  in  this  with  to . If n is 0, all\noccurrences will be replaced. Returns the count of replaced occurrences.  fun ref replace(\n  from: String box,\n  to: String box,\n  n: USize val = seq)\n: USize val", 
            "title": "replace"
        }, 
        {
            "location": "/builtin-String/#parameters_38", 
            "text": "from:  String  box  to:  String  box  n:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_55", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#split_by", 
            "text": "Split the string into an array of strings that are delimited by  delim  in\nthe original string. If  n   0 , then the split count is limited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") =  [\"1\", \"\", \"2\"] .  An empty delimiter results in an array that contains a single element equal\nto the whole string.  fun box split_by(\n  delim: String val,\n  n: USize val = seq)\n: Array[String val] iso^", 
            "title": "split_by"
        }, 
        {
            "location": "/builtin-String/#parameters_39", 
            "text": "delim:  String  val  n:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_56", 
            "text": "Array [ String  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#split", 
            "text": "Split the string into an array of strings. Any character in the delimiter\nstring is accepted as a delimiter. If  n   0 , then the split count is\nlimited to n.  Adjacent delimiters result in a zero length entry in the array. For\nexample,  \"1,,2\".split(\",\") =  [\"1\", \"\", \"2\"] .  fun box split(\n  delim: String val = seq,\n  n: USize val = seq)\n: Array[String val] iso^", 
            "title": "split"
        }, 
        {
            "location": "/builtin-String/#parameters_40", 
            "text": "delim:  String  val = seq  n:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_57", 
            "text": "Array [ String  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#strip", 
            "text": "Remove all leading and trailing characters from the string that are in s.  fun ref strip(\n  s: String box = seq)\n: None val", 
            "title": "strip"
        }, 
        {
            "location": "/builtin-String/#parameters_41", 
            "text": "s:  String  box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_58", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#rstrip", 
            "text": "Remove all trailing characters within the string that are in s. By default,\ntrailing whitespace is removed.  fun ref rstrip(\n  s: String box = seq)\n: None val", 
            "title": "rstrip"
        }, 
        {
            "location": "/builtin-String/#parameters_42", 
            "text": "s:  String  box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_59", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#lstrip", 
            "text": "Remove all leading characters within the string that are in s. By default,\nleading whitespace is removed.  fun ref lstrip(\n  s: String box = seq)\n: None val", 
            "title": "lstrip"
        }, 
        {
            "location": "/builtin-String/#parameters_43", 
            "text": "s:  String  box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_60", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#add", 
            "text": "Return a string that is a concatenation of this and that.  fun box add(\n  that: String box)\n: String val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-String/#parameters_44", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_61", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#join", 
            "text": "Return a string that is a concatenation of the strings in data, using this\nas a separator.  fun box join(\n  data: Iterator[Stringable box] ref)\n: String iso^", 
            "title": "join"
        }, 
        {
            "location": "/builtin-String/#parameters_45", 
            "text": "data:  Iterator [ Stringable  box] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_62", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#compare", 
            "text": "Lexically compare two strings.  fun box compare(\n  that: String box)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-String/#parameters_46", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_63", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#compare_sub", 
            "text": "Lexically compare at most  n  bytes of the substring of  this  starting at offset  with the substring of  that  starting at  that_offset . The\ncomparison is case sensitive unless  ignore_case  is  true .  If the substring of  this  is a proper prefix of the substring of  that ,\nthen  this  is  Less  than  that . Likewise, if  that  is a proper prefix of this , then  this  is  Greater  than  that .  Both  offset  and  that_offset  can be negative, in which case the offsets\nare computed from the end of the string.  If  n + offset  is greater than the length of  this , or  n + that_offset \nis greater than the length of  that , then the number of positions compared\nwill be reduced to the length of the longest substring.  Needs to be made UTF-8 safe.  fun box compare_sub(\n  that: String box,\n  n: USize val,\n  offset: ISize val = seq,\n  that_offset: ISize val = seq,\n  ignore_case: Bool val = seq)\n: (Less val | Equal val | Greater val)", 
            "title": "compare_sub"
        }, 
        {
            "location": "/builtin-String/#parameters_47", 
            "text": "that:  String  box  n:  USize  val  offset:  ISize  val = seq  that_offset:  ISize  val = seq  ignore_case:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_64", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#eq", 
            "text": "Returns true if the two strings have the same contents.  fun box eq(\n  that: String box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-String/#parameters_48", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_65", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#lt", 
            "text": "Returns true if this is lexically less than that. Needs to be made UTF-8\nsafe.  fun box lt(\n  that: String box)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-String/#parameters_49", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_66", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#le", 
            "text": "Returns true if this is lexically less than or equal to that. Needs to be\nmade UTF-8 safe.  fun box le(\n  that: String box)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-String/#parameters_50", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_67", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#offset_to_index", 
            "text": "fun box offset_to_index(\n  i: ISize val)\n: USize val", 
            "title": "offset_to_index"
        }, 
        {
            "location": "/builtin-String/#parameters_51", 
            "text": "i:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_68", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#bool", 
            "text": "fun box bool()\n: Bool val ?", 
            "title": "bool"
        }, 
        {
            "location": "/builtin-String/#returns_69", 
            "text": "Bool  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#i8", 
            "text": "fun box i8(\n  base: U8 val = seq)\n: I8 val ?", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-String/#parameters_52", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_70", 
            "text": "I8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#i16", 
            "text": "fun box i16(\n  base: U8 val = seq)\n: I16 val ?", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-String/#parameters_53", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_71", 
            "text": "I16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#i32", 
            "text": "fun box i32(\n  base: U8 val = seq)\n: I32 val ?", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-String/#parameters_54", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_72", 
            "text": "I32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#i64", 
            "text": "fun box i64(\n  base: U8 val = seq)\n: I64 val ?", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-String/#parameters_55", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_73", 
            "text": "I64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#i128", 
            "text": "fun box i128(\n  base: U8 val = seq)\n: I128 val ?", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-String/#parameters_56", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_74", 
            "text": "I128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#ilong", 
            "text": "fun box ilong(\n  base: U8 val = seq)\n: ILong val ?", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-String/#parameters_57", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_75", 
            "text": "ILong  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#isize", 
            "text": "fun box isize(\n  base: U8 val = seq)\n: ISize val ?", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-String/#parameters_58", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_76", 
            "text": "ISize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#u8", 
            "text": "fun box u8(\n  base: U8 val = seq)\n: U8 val ?", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-String/#parameters_59", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_77", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#u16", 
            "text": "fun box u16(\n  base: U8 val = seq)\n: U16 val ?", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-String/#parameters_60", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_78", 
            "text": "U16  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#u32", 
            "text": "fun box u32(\n  base: U8 val = seq)\n: U32 val ?", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-String/#parameters_61", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_79", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#u64", 
            "text": "fun box u64(\n  base: U8 val = seq)\n: U64 val ?", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-String/#parameters_62", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_80", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#u128", 
            "text": "fun box u128(\n  base: U8 val = seq)\n: U128 val ?", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-String/#parameters_63", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_81", 
            "text": "U128  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#ulong", 
            "text": "fun box ulong(\n  base: U8 val = seq)\n: ULong val ?", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-String/#parameters_64", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_82", 
            "text": "ULong  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#usize", 
            "text": "fun box usize(\n  base: U8 val = seq)\n: USize val ?", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-String/#parameters_65", 
            "text": "base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_83", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#read_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93", 
            "text": "Read an integer from the specified location in this string. The integer\nvalue read and the number of characters consumed are reported.\nThe base parameter specifies the base to use, 0 indicates using the prefix,\nif any, to detect base 2, 10 or 16.\nIf no integer is found at the specified location, then (0, 0) is returned,\nsince no characters have been used.\nAn integer out of range for the target type throws an error.\nA leading minus is allowed for signed integer types.\nUnderscore characters are allowed throughout the integer and are ignored.  fun box read_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val)   Integer[A] val)](\n  offset: ISize val = seq,\n  base: U8 val = seq)\n: (A , USize val) ?", 
            "title": "read_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        }, 
        {
            "location": "/builtin-String/#parameters_66", 
            "text": "offset:  ISize  val = seq  base:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_84", 
            "text": "(A ,  USize  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#f32", 
            "text": "fun box f32(\n  offset: ISize val = seq)\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-String/#parameters_67", 
            "text": "offset:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_85", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#f64", 
            "text": "fun box f64(\n  offset: ISize val = seq)\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-String/#parameters_68", 
            "text": "offset:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_86", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-String/#returns_87", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#string_1", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-String/#returns_88", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#values", 
            "text": "Return an iterator over the bytes in the string.  fun box values()\n: StringBytes ref^", 
            "title": "values"
        }, 
        {
            "location": "/builtin-String/#returns_89", 
            "text": "StringBytes  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#runes", 
            "text": "Return an iterator over the codepoints in the string.  fun box runes()\n: StringRunes ref^", 
            "title": "runes"
        }, 
        {
            "location": "/builtin-String/#returns_90", 
            "text": "StringRunes  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#ge", 
            "text": "fun box ge(\n  that: String box)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-String/#parameters_69", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_91", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#gt", 
            "text": "fun box gt(\n  that: String box)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-String/#parameters_70", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_92", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#ne", 
            "text": "fun box ne(\n  that: String box)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-String/#parameters_71", 
            "text": "that:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_93", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-String/#_copy_to", 
            "text": "Copy copy_len characters from this to that at specified offsets.  fun box _copy_to(\n  ptr: Pointer[U8 val] ref,\n  copy_len: USize val,\n  from_offset: USize val = seq,\n  to_offset: USize val = seq)\n: None val", 
            "title": "_copy_to"
        }, 
        {
            "location": "/builtin-String/#parameters_72", 
            "text": "ptr:  Pointer [ U8  val] ref  copy_len:  USize  val  from_offset:  USize  val = seq  to_offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_94", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#_append", 
            "text": "fun iso _append(\n  s: String box)\n: String iso^", 
            "title": "_append"
        }, 
        {
            "location": "/builtin-String/#parameters_73", 
            "text": "s:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_95", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#_to_int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93", 
            "text": "Convert the  whole  string to the specified type.\nIf there are any other characters in the string, or the integer found is\nout of range for the target type then an error is thrown.  fun box _to_int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val)   Integer[A] val)](\n  base: U8 val)\n: A ?", 
            "title": "_to_int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        }, 
        {
            "location": "/builtin-String/#parameters_74", 
            "text": "base:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_96", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#_read_int_base91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93", 
            "text": "Determine the base of an integer starting at the specified index.\nIf a non-0 base is given use that. If given base is 0 read the base\nspecifying prefix, if any, to detect base 2 or 16.\nIf no base is specified and no prefix is found default to decimal.\nNote that a leading 0 does NOT imply octal.\nReport the base found and the number of characters in the prefix.  fun box _read_int_base[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val)   Integer[A] val)](\n  base: U8 val,\n  index: USize val)\n: (A , USize val)", 
            "title": "_read_int_base[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        }, 
        {
            "location": "/builtin-String/#parameters_75", 
            "text": "base:  U8  val  index:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_97", 
            "text": "(A ,  USize  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-String/#_set", 
            "text": "Unsafe update, used internally.  fun ref _set(\n  i: USize val,\n  value: U8 val)\n: U8 val", 
            "title": "_set"
        }, 
        {
            "location": "/builtin-String/#parameters_76", 
            "text": "i:  USize  val  value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-String/#returns_98", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StringBytes/", 
            "text": "StringBytes\n\n\nclass ref StringBytes is\n  Iterator[U8 val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nU8\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  string: String box)\n: StringBytes ref^\n\n\n\n\nParameters\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nStringBytes\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: U8 val ?\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?", 
            "title": "class StringBytes"
        }, 
        {
            "location": "/builtin-StringBytes/#stringbytes", 
            "text": "class ref StringBytes is\n  Iterator[U8 val] ref", 
            "title": "StringBytes"
        }, 
        {
            "location": "/builtin-StringBytes/#implements", 
            "text": "Iterator [ U8  val] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-StringBytes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-StringBytes/#create", 
            "text": "new ref create(\n  string: String box)\n: StringBytes ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-StringBytes/#parameters", 
            "text": "string:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StringBytes/#returns", 
            "text": "StringBytes  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StringBytes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-StringBytes/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/builtin-StringBytes/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StringBytes/#next", 
            "text": "fun ref next()\n: U8 val ?", 
            "title": "next"
        }, 
        {
            "location": "/builtin-StringBytes/#returns_2", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StringRunes/", 
            "text": "StringRunes\n\n\nclass ref StringRunes is\n  Iterator[U32 val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nU32\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  string: String box)\n: StringRunes ref^\n\n\n\n\nParameters\n\n\n\n\nstring: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nStringRunes\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: U32 val ?\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?", 
            "title": "class StringRunes"
        }, 
        {
            "location": "/builtin-StringRunes/#stringrunes", 
            "text": "class ref StringRunes is\n  Iterator[U32 val] ref", 
            "title": "StringRunes"
        }, 
        {
            "location": "/builtin-StringRunes/#implements", 
            "text": "Iterator [ U32  val] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-StringRunes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-StringRunes/#create", 
            "text": "new ref create(\n  string: String box)\n: StringRunes ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-StringRunes/#parameters", 
            "text": "string:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StringRunes/#returns", 
            "text": "StringRunes  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StringRunes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-StringRunes/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/builtin-StringRunes/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StringRunes/#next", 
            "text": "fun ref next()\n: U32 val ?", 
            "title": "next"
        }, 
        {
            "location": "/builtin-StringRunes/#returns_2", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/", 
            "text": "_UTF32Encoder\n\n\nprimitive val _UTF32Encoder\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _UTF32Encoder val^\n\n\n\n\nReturns\n\n\n\n\n_UTF32Encoder\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nencode\n\n\nEncode the code point into UTF-8. It returns a tuple with the size of the\nencoded data and then the data.\n\n\nfun box encode(\n  value: U32 val)\n: (USize val , U8 val , U8 val , \n    U8 val , U8 val)\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nU8\n val , \nU8\n val , \n    \nU8\n val , \nU8\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _UTF32Encoder val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_UTF32Encoder\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _UTF32Encoder val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_UTF32Encoder\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _UTF32Encoder"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#_utf32encoder", 
            "text": "primitive val _UTF32Encoder", 
            "title": "_UTF32Encoder"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#create", 
            "text": "new val create()\n: _UTF32Encoder val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#returns", 
            "text": "_UTF32Encoder  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#encode", 
            "text": "Encode the code point into UTF-8. It returns a tuple with the size of the\nencoded data and then the data.  fun box encode(\n  value: U32 val)\n: (USize val , U8 val , U8 val , \n    U8 val , U8 val)", 
            "title": "encode"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#parameters", 
            "text": "value:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#returns_1", 
            "text": "( USize  val ,  U8  val ,  U8  val , \n     U8  val ,  U8  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#eq", 
            "text": "fun box eq(\n  that: _UTF32Encoder val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#parameters_1", 
            "text": "that:  _UTF32Encoder  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#ne", 
            "text": "fun box ne(\n  that: _UTF32Encoder val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#parameters_2", 
            "text": "that:  _UTF32Encoder  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UTF32Encoder/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StdinNotify/", 
            "text": "StdinNotify\n\n\nNotification for data arriving via stdin.\n\n\ninterface ref StdinNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCalled when data is available on stdin.\n\n\nfun ref apply(\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\n\nCalled when no more data will arrive on stdin.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface StdinNotify"
        }, 
        {
            "location": "/builtin-StdinNotify/#stdinnotify", 
            "text": "Notification for data arriving via stdin.  interface ref StdinNotify", 
            "title": "StdinNotify"
        }, 
        {
            "location": "/builtin-StdinNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-StdinNotify/#apply", 
            "text": "Called when data is available on stdin.  fun ref apply(\n  data: Array[U8 val] iso)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-StdinNotify/#parameters", 
            "text": "data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdinNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StdinNotify/#dispose", 
            "text": "Called when no more data will arrive on stdin.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/builtin-StdinNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-DisposableActor/", 
            "text": "DisposableActor\n\n\nAn interface used to asynchronously dispose of an actor.\n\n\ninterface tag DisposableActor\n\n\n\n\nPublic Behaviours\n\n\ndispose\n\n\nbe dispose()", 
            "title": "interface DisposableActor"
        }, 
        {
            "location": "/builtin-DisposableActor/#disposableactor", 
            "text": "An interface used to asynchronously dispose of an actor.  interface tag DisposableActor", 
            "title": "DisposableActor"
        }, 
        {
            "location": "/builtin-DisposableActor/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-DisposableActor/#dispose", 
            "text": "be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/builtin-Stdin/", 
            "text": "Stdin\n\n\nAsynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.\n\n\nactor tag Stdin\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew tag _create(\n  use_event: Bool val)\n: Stdin tag^\n\n\n\n\nParameters\n\n\n\n\nuse_event: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nStdin\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nSet the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.\n\n\nbe apply(\n  notify: (StdinNotify iso | None val),\n  chunk_size: USize val = seq)\n\n\n\n\nParameters\n\n\n\n\nnotify: (\nStdinNotify\n iso | \nNone\n val)\n\n\nchunk_size: \nUSize\n val = seq\n\n\n\n\n\n\ndispose\n\n\nClear the notifier in order to shut down input.\n\n\nbe dispose()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_loop_read\n\n\nIf we are able to read from stdin, schedule another read.\n\n\nbe _loop_read()\n\n\n\n\n\n\n_event_notify\n\n\nWhen the event fires, read from stdin.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\n_read_again\n\n\nResume reading.\n\n\nbe _read_again()\n\n\n\n\n\n\nPrivate Functions\n\n\n_set_notify\n\n\nSet the notifier.\n\n\nfun ref _set_notify(\n  notify: (StdinNotify iso | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nnotify: (\nStdinNotify\n iso | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_read\n\n\nRead a chunk of data from stdin. Read a maximum of _chunk_size bytes, send\nourself a resume message and stop reading to avoid starving other actors.\n\n\nfun ref _read()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_close_event\n\n\nClose the event.\n\n\nfun ref _close_event()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor Stdin"
        }, 
        {
            "location": "/builtin-Stdin/#stdin", 
            "text": "Asynchronous access to stdin. The constructor is private to ensure that\naccess is provided only via an environment.  actor tag Stdin", 
            "title": "Stdin"
        }, 
        {
            "location": "/builtin-Stdin/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Stdin/#_create", 
            "text": "new tag _create(\n  use_event: Bool val)\n: Stdin tag^", 
            "title": "_create"
        }, 
        {
            "location": "/builtin-Stdin/#parameters", 
            "text": "use_event:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Stdin/#returns", 
            "text": "Stdin  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Stdin/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-Stdin/#apply", 
            "text": "Set the notifier. Optionally, also sets the chunk size, dictating the\nmaximum number of bytes of each chunk that will be passed to the notifier.  be apply(\n  notify: (StdinNotify iso | None val),\n  chunk_size: USize val = seq)", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-Stdin/#parameters_1", 
            "text": "notify: ( StdinNotify  iso |  None  val)  chunk_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Stdin/#dispose", 
            "text": "Clear the notifier in order to shut down input.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/builtin-Stdin/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/builtin-Stdin/#_loop_read", 
            "text": "If we are able to read from stdin, schedule another read.  be _loop_read()", 
            "title": "_loop_read"
        }, 
        {
            "location": "/builtin-Stdin/#_event_notify", 
            "text": "When the event fires, read from stdin.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/builtin-Stdin/#parameters_2", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Stdin/#_read_again", 
            "text": "Resume reading.  be _read_again()", 
            "title": "_read_again"
        }, 
        {
            "location": "/builtin-Stdin/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Stdin/#_set_notify", 
            "text": "Set the notifier.  fun ref _set_notify(\n  notify: (StdinNotify iso | None val))\n: None val", 
            "title": "_set_notify"
        }, 
        {
            "location": "/builtin-Stdin/#parameters_3", 
            "text": "notify: ( StdinNotify  iso |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Stdin/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Stdin/#_read", 
            "text": "Read a chunk of data from stdin. Read a maximum of _chunk_size bytes, send\nourself a resume message and stop reading to avoid starving other actors.  fun ref _read()\n: Bool val", 
            "title": "_read"
        }, 
        {
            "location": "/builtin-Stdin/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Stdin/#_close_event", 
            "text": "Close the event.  fun ref _close_event()\n: None val", 
            "title": "_close_event"
        }, 
        {
            "location": "/builtin-Stdin/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ByteSeq/", 
            "text": "ByteSeq\n\n\ntype ByteSeq is\n  (String val | Array[U8 val] val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)", 
            "title": "type ByteSeq"
        }, 
        {
            "location": "/builtin-ByteSeq/#byteseq", 
            "text": "type ByteSeq is\n  (String val | Array[U8 val] val)", 
            "title": "ByteSeq"
        }, 
        {
            "location": "/builtin-ByteSeq/#type-alias-for", 
            "text": "( String  val |  Array [ U8  val] val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-ByteSeqIter/", 
            "text": "ByteSeqIter\n\n\nAccept an iterable collection of String or Array[U8] val.\n\n\ninterface val ByteSeqIter\n\n\n\n\nPublic Functions\n\n\nvalues\n\n\nfun box values()\n: Iterator[(this-\nString box | this-\nArray[U8 val] box)] ref\n\n\n\n\nReturns\n\n\n\n\nIterator\n[(this-\nString\n box | this-\nArray\n[\nU8\n val] box)] ref", 
            "title": "interface ByteSeqIter"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#byteseqiter", 
            "text": "Accept an iterable collection of String or Array[U8] val.  interface val ByteSeqIter", 
            "title": "ByteSeqIter"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#values", 
            "text": "fun box values()\n: Iterator[(this- String box | this- Array[U8 val] box)] ref", 
            "title": "values"
        }, 
        {
            "location": "/builtin-ByteSeqIter/#returns", 
            "text": "Iterator [(this- String  box | this- Array [ U8  val] box)] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-OutStream/", 
            "text": "OutStream\n\n\nAsnychronous access to some output stream.\n\n\ninterface tag OutStream\n\n\n\n\nPublic Behaviours\n\n\nprint\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val", 
            "title": "interface OutStream"
        }, 
        {
            "location": "/builtin-OutStream/#outstream", 
            "text": "Asnychronous access to some output stream.  interface tag OutStream", 
            "title": "OutStream"
        }, 
        {
            "location": "/builtin-OutStream/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-OutStream/#print", 
            "text": "Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))", 
            "title": "print"
        }, 
        {
            "location": "/builtin-OutStream/#parameters", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-OutStream/#write", 
            "text": "Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/builtin-OutStream/#parameters_1", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-OutStream/#printv", 
            "text": "Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)", 
            "title": "printv"
        }, 
        {
            "location": "/builtin-OutStream/#parameters_2", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-OutStream/#writev", 
            "text": "Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)", 
            "title": "writev"
        }, 
        {
            "location": "/builtin-OutStream/#parameters_3", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/", 
            "text": "StdStream\n\n\nAsynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.\n\n\nactor tag StdStream\n\n\n\n\nConstructors\n\n\n_out\n\n\nCreate an async stream for stdout.\n\n\nnew tag _out()\n: StdStream tag^\n\n\n\n\nReturns\n\n\n\n\nStdStream\n tag^\n\n\n\n\n\n\n_err\n\n\nCreate an async stream for stderr.\n\n\nnew tag _err()\n: StdStream tag^\n\n\n\n\nReturns\n\n\n\n\nStdStream\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nprint\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_write\n\n\nWrite the bytes without explicitly flushing.\n\n\nfun ref _write(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_print\n\n\nWrite the bytes and a newline without explicitly flushing.\n\n\nfun ref _print(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor StdStream"
        }, 
        {
            "location": "/builtin-StdStream/#stdstream", 
            "text": "Asynchronous access to stdout and stderr. The constructors are private to\nensure that access is provided only via an environment.  actor tag StdStream", 
            "title": "StdStream"
        }, 
        {
            "location": "/builtin-StdStream/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-StdStream/#_out", 
            "text": "Create an async stream for stdout.  new tag _out()\n: StdStream tag^", 
            "title": "_out"
        }, 
        {
            "location": "/builtin-StdStream/#returns", 
            "text": "StdStream  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StdStream/#_err", 
            "text": "Create an async stream for stderr.  new tag _err()\n: StdStream tag^", 
            "title": "_err"
        }, 
        {
            "location": "/builtin-StdStream/#returns_1", 
            "text": "StdStream  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StdStream/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/builtin-StdStream/#print", 
            "text": "Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))", 
            "title": "print"
        }, 
        {
            "location": "/builtin-StdStream/#parameters", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/#write", 
            "text": "Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/builtin-StdStream/#parameters_1", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/#printv", 
            "text": "Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)", 
            "title": "printv"
        }, 
        {
            "location": "/builtin-StdStream/#parameters_2", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/#writev", 
            "text": "Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)", 
            "title": "writev"
        }, 
        {
            "location": "/builtin-StdStream/#parameters_3", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-StdStream/#_write", 
            "text": "Write the bytes without explicitly flushing.  fun ref _write(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "_write"
        }, 
        {
            "location": "/builtin-StdStream/#parameters_4", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-StdStream/#_print", 
            "text": "Write the bytes and a newline without explicitly flushing.  fun ref _print(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "_print"
        }, 
        {
            "location": "/builtin-StdStream/#parameters_5", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-StdStream/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-SourceLoc/", 
            "text": "SourceLoc\n\n\nRepresents a location in a Pony source file, as reported by \n__loc\n.\n\n\ninterface val SourceLoc\n\n\n\n\nPublic Functions\n\n\nfile\n\n\nName and path of source file.\n\n\nfun box file()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nmethod\n\n\nName of containing method.\n\n\nfun box method()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nline\n\n\nLine number within file.\nLine numbers start at 1.\n\n\nfun box line()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\npos\n\n\nCharacter position on line.\nCharacter positions start at 1.\n\n\nfun box pos()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "interface SourceLoc"
        }, 
        {
            "location": "/builtin-SourceLoc/#sourceloc", 
            "text": "Represents a location in a Pony source file, as reported by  __loc .  interface val SourceLoc", 
            "title": "SourceLoc"
        }, 
        {
            "location": "/builtin-SourceLoc/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-SourceLoc/#file", 
            "text": "Name and path of source file.  fun box file()\n: String val", 
            "title": "file"
        }, 
        {
            "location": "/builtin-SourceLoc/#returns", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-SourceLoc/#method", 
            "text": "Name of containing method.  fun box method()\n: String val", 
            "title": "method"
        }, 
        {
            "location": "/builtin-SourceLoc/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-SourceLoc/#line", 
            "text": "Line number within file.\nLine numbers start at 1.  fun box line()\n: USize val", 
            "title": "line"
        }, 
        {
            "location": "/builtin-SourceLoc/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-SourceLoc/#pos", 
            "text": "Character position on line.\nCharacter positions start at 1.  fun box pos()\n: USize val", 
            "title": "pos"
        }, 
        {
            "location": "/builtin-SourceLoc/#returns_3", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/", 
            "text": "I8\n\n\nprimitive val I8 is\n  _SignedInteger[I8 val, U8 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI8\n val, \nU8\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I8 val)\n: I8 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: I8 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I8 val^\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I8 val^\n\n\n\n\nReturns\n\n\n\n\nI8\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI8\n val , \nI8\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I8 val)\n: I8 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val", 
            "title": "primitive I8"
        }, 
        {
            "location": "/builtin-I8/#i8", 
            "text": "primitive val I8 is\n  _SignedInteger[I8 val, U8 val] val", 
            "title": "I8"
        }, 
        {
            "location": "/builtin-I8/#implements", 
            "text": "_SignedInteger [ I8  val,  U8  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-I8/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I8/#create", 
            "text": "new val create(\n  value: I8 val)\n: I8 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-I8/#parameters", 
            "text": "value:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns", 
            "text": "I8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: I8 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-I8/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_1", 
            "text": "I8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#min_value", 
            "text": "new val min_value()\n: I8 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-I8/#returns_2", 
            "text": "I8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#max_value", 
            "text": "new val max_value()\n: I8 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-I8/#returns_3", 
            "text": "I8  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I8/#abs", 
            "text": "fun box abs()\n: U8 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-I8/#returns_4", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#bswap", 
            "text": "fun box bswap()\n: I8 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-I8/#returns_5", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#popcount", 
            "text": "fun box popcount()\n: U8 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-I8/#returns_6", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#clz", 
            "text": "fun box clz()\n: U8 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-I8/#returns_7", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ctz", 
            "text": "fun box ctz()\n: U8 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-I8/#returns_8", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U8 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_9", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U8 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_10", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#bitwidth", 
            "text": "fun box bitwidth()\n: U8 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-I8/#returns_11", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#min", 
            "text": "fun box min(\n  y: I8 val)\n: I8 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-I8/#parameters_2", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_12", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#max", 
            "text": "fun box max(\n  y: I8 val)\n: I8 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-I8/#parameters_3", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_13", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#addc", 
            "text": "fun box addc(\n  y: I8 val)\n: (I8 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-I8/#parameters_4", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_14", 
            "text": "( I8  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#subc", 
            "text": "fun box subc(\n  y: I8 val)\n: (I8 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-I8/#parameters_5", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_15", 
            "text": "( I8  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#mulc", 
            "text": "fun box mulc(\n  y: I8 val)\n: (I8 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-I8/#parameters_6", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_16", 
            "text": "( I8  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#shl", 
            "text": "fun box shl(\n  y: U8 val)\n: I8 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-I8/#parameters_7", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_17", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#shr", 
            "text": "fun box shr(\n  y: U8 val)\n: I8 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-I8/#parameters_8", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_18", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U8 val)\n: I8 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_9", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_19", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U8 val)\n: I8 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_10", 
            "text": "y:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_20", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-I8/#returns_21", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: I8 val)\n: I8 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_11", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_22", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: I8 val)\n: I8 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_12", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_23", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: I8 val)\n: I8 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_13", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_24", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: I8 val)\n: I8 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_14", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_25", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: I8 val)\n: (I8 val , I8 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_15", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_26", 
            "text": "( I8  val ,  I8  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: I8 val)\n: I8 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-I8/#parameters_16", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_27", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: I8 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_28", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#op_and", 
            "text": "fun box op_and(\n  y: I8 val)\n: I8 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-I8/#parameters_17", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_29", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#op_or", 
            "text": "fun box op_or(\n  y: I8 val)\n: I8 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-I8/#parameters_18", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_30", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#op_xor", 
            "text": "fun box op_xor(\n  y: I8 val)\n: I8 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-I8/#parameters_19", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_31", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#op_not", 
            "text": "fun box op_not()\n: I8 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-I8/#returns_32", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#add", 
            "text": "fun box add(\n  y: I8 val)\n: I8 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-I8/#parameters_20", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_33", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#sub", 
            "text": "fun box sub(\n  y: I8 val)\n: I8 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-I8/#parameters_21", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_34", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#mul", 
            "text": "fun box mul(\n  y: I8 val)\n: I8 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-I8/#parameters_22", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_35", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#div", 
            "text": "fun box div(\n  y: I8 val)\n: I8 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-I8/#parameters_23", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_36", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#divmod", 
            "text": "fun box divmod(\n  y: I8 val)\n: (I8 val , I8 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-I8/#parameters_24", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_37", 
            "text": "( I8  val ,  I8  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#mod", 
            "text": "fun box mod(\n  y: I8 val)\n: I8 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-I8/#parameters_25", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_38", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#neg", 
            "text": "fun box neg()\n: I8 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-I8/#returns_39", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#eq", 
            "text": "fun box eq(\n  y: I8 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-I8/#parameters_26", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ne", 
            "text": "fun box ne(\n  y: I8 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-I8/#parameters_27", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#lt", 
            "text": "fun box lt(\n  y: I8 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-I8/#parameters_28", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#le", 
            "text": "fun box le(\n  y: I8 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-I8/#parameters_29", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ge", 
            "text": "fun box ge(\n  y: I8 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-I8/#parameters_30", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#gt", 
            "text": "fun box gt(\n  y: I8 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-I8/#parameters_31", 
            "text": "y:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-I8/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i8_1", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-I8/#returns_47", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-I8/#returns_48", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-I8/#returns_49", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-I8/#returns_50", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-I8/#returns_51", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-I8/#returns_52", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-I8/#returns_53", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-I8/#returns_54", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-I8/#returns_55", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-I8/#returns_56", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-I8/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-I8/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-I8/#returns_59", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-I8/#returns_60", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-I8/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-I8/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_63", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_64", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_65", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_66", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_67", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_68", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_69", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_70", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_71", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_72", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_74", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_75", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_76", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-I8/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#compare", 
            "text": "fun box compare(\n  that: I8 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-I8/#parameters_32", 
            "text": "that:  I8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I8/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I8/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-I8/#_value", 
            "text": "fun box _value()\n: I8 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-I8/#returns_80", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/", 
            "text": "I16\n\n\nprimitive val I16 is\n  _SignedInteger[I16 val, U16 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI16\n val, \nU16\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I16 val)\n: I16 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: I16 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I16 val^\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I16 val^\n\n\n\n\nReturns\n\n\n\n\nI16\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI16\n val , \nI16\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I16 val)\n: I16 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I16 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI16\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val", 
            "title": "primitive I16"
        }, 
        {
            "location": "/builtin-I16/#i16", 
            "text": "primitive val I16 is\n  _SignedInteger[I16 val, U16 val] val", 
            "title": "I16"
        }, 
        {
            "location": "/builtin-I16/#implements", 
            "text": "_SignedInteger [ I16  val,  U16  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-I16/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I16/#create", 
            "text": "new val create(\n  value: I16 val)\n: I16 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-I16/#parameters", 
            "text": "value:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns", 
            "text": "I16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: I16 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-I16/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_1", 
            "text": "I16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#min_value", 
            "text": "new val min_value()\n: I16 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-I16/#returns_2", 
            "text": "I16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#max_value", 
            "text": "new val max_value()\n: I16 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-I16/#returns_3", 
            "text": "I16  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I16/#abs", 
            "text": "fun box abs()\n: U16 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-I16/#returns_4", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#bswap", 
            "text": "fun box bswap()\n: I16 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-I16/#returns_5", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#popcount", 
            "text": "fun box popcount()\n: U16 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-I16/#returns_6", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#clz", 
            "text": "fun box clz()\n: U16 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-I16/#returns_7", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ctz", 
            "text": "fun box ctz()\n: U16 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-I16/#returns_8", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U16 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_9", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U16 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_10", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#bitwidth", 
            "text": "fun box bitwidth()\n: U16 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-I16/#returns_11", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#min", 
            "text": "fun box min(\n  y: I16 val)\n: I16 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-I16/#parameters_2", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_12", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#max", 
            "text": "fun box max(\n  y: I16 val)\n: I16 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-I16/#parameters_3", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_13", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#addc", 
            "text": "fun box addc(\n  y: I16 val)\n: (I16 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-I16/#parameters_4", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_14", 
            "text": "( I16  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#subc", 
            "text": "fun box subc(\n  y: I16 val)\n: (I16 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-I16/#parameters_5", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_15", 
            "text": "( I16  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#mulc", 
            "text": "fun box mulc(\n  y: I16 val)\n: (I16 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-I16/#parameters_6", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_16", 
            "text": "( I16  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#shl", 
            "text": "fun box shl(\n  y: U16 val)\n: I16 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-I16/#parameters_7", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_17", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#shr", 
            "text": "fun box shr(\n  y: U16 val)\n: I16 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-I16/#parameters_8", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_18", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U16 val)\n: I16 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_9", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_19", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U16 val)\n: I16 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_10", 
            "text": "y:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_20", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-I16/#returns_21", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: I16 val)\n: I16 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_11", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_22", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: I16 val)\n: I16 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_12", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_23", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: I16 val)\n: I16 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_13", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_24", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: I16 val)\n: I16 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_14", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_25", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: I16 val)\n: (I16 val , I16 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_15", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_26", 
            "text": "( I16  val ,  I16  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: I16 val)\n: I16 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-I16/#parameters_16", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_27", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: I16 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_28", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#op_and", 
            "text": "fun box op_and(\n  y: I16 val)\n: I16 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-I16/#parameters_17", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_29", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#op_or", 
            "text": "fun box op_or(\n  y: I16 val)\n: I16 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-I16/#parameters_18", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_30", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#op_xor", 
            "text": "fun box op_xor(\n  y: I16 val)\n: I16 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-I16/#parameters_19", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_31", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#op_not", 
            "text": "fun box op_not()\n: I16 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-I16/#returns_32", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#add", 
            "text": "fun box add(\n  y: I16 val)\n: I16 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-I16/#parameters_20", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_33", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#sub", 
            "text": "fun box sub(\n  y: I16 val)\n: I16 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-I16/#parameters_21", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_34", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#mul", 
            "text": "fun box mul(\n  y: I16 val)\n: I16 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-I16/#parameters_22", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_35", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#div", 
            "text": "fun box div(\n  y: I16 val)\n: I16 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-I16/#parameters_23", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_36", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#divmod", 
            "text": "fun box divmod(\n  y: I16 val)\n: (I16 val , I16 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-I16/#parameters_24", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_37", 
            "text": "( I16  val ,  I16  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#mod", 
            "text": "fun box mod(\n  y: I16 val)\n: I16 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-I16/#parameters_25", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_38", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#neg", 
            "text": "fun box neg()\n: I16 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-I16/#returns_39", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#eq", 
            "text": "fun box eq(\n  y: I16 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-I16/#parameters_26", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ne", 
            "text": "fun box ne(\n  y: I16 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-I16/#parameters_27", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#lt", 
            "text": "fun box lt(\n  y: I16 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-I16/#parameters_28", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#le", 
            "text": "fun box le(\n  y: I16 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-I16/#parameters_29", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ge", 
            "text": "fun box ge(\n  y: I16 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-I16/#parameters_30", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#gt", 
            "text": "fun box gt(\n  y: I16 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-I16/#parameters_31", 
            "text": "y:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-I16/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-I16/#returns_47", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i16_1", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-I16/#returns_48", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-I16/#returns_49", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-I16/#returns_50", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-I16/#returns_51", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-I16/#returns_52", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-I16/#returns_53", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-I16/#returns_54", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-I16/#returns_55", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-I16/#returns_56", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-I16/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-I16/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-I16/#returns_59", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-I16/#returns_60", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-I16/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-I16/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_63", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_64", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_65", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_66", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_67", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_68", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_69", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_70", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_71", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_72", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_74", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_75", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_76", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-I16/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#compare", 
            "text": "fun box compare(\n  that: I16 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-I16/#parameters_32", 
            "text": "that:  I16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I16/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I16/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-I16/#_value", 
            "text": "fun box _value()\n: I16 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-I16/#returns_80", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/", 
            "text": "I32\n\n\nprimitive val I32 is\n  _SignedInteger[I32 val, U32 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI32\n val, \nU32\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I32 val)\n: I32 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: I32 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I32 val^\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I32 val^\n\n\n\n\nReturns\n\n\n\n\nI32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI32\n val , \nI32\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I32 val)\n: I32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val", 
            "title": "primitive I32"
        }, 
        {
            "location": "/builtin-I32/#i32", 
            "text": "primitive val I32 is\n  _SignedInteger[I32 val, U32 val] val", 
            "title": "I32"
        }, 
        {
            "location": "/builtin-I32/#implements", 
            "text": "_SignedInteger [ I32  val,  U32  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-I32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I32/#create", 
            "text": "new val create(\n  value: I32 val)\n: I32 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-I32/#parameters", 
            "text": "value:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns", 
            "text": "I32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: I32 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-I32/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_1", 
            "text": "I32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#min_value", 
            "text": "new val min_value()\n: I32 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-I32/#returns_2", 
            "text": "I32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#max_value", 
            "text": "new val max_value()\n: I32 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-I32/#returns_3", 
            "text": "I32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I32/#abs", 
            "text": "fun box abs()\n: U32 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-I32/#returns_4", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#bswap", 
            "text": "fun box bswap()\n: I32 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-I32/#returns_5", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#popcount", 
            "text": "fun box popcount()\n: U32 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-I32/#returns_6", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#clz", 
            "text": "fun box clz()\n: U32 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-I32/#returns_7", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ctz", 
            "text": "fun box ctz()\n: U32 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-I32/#returns_8", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U32 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_9", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U32 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_10", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#bitwidth", 
            "text": "fun box bitwidth()\n: U32 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-I32/#returns_11", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#min", 
            "text": "fun box min(\n  y: I32 val)\n: I32 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-I32/#parameters_2", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_12", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#max", 
            "text": "fun box max(\n  y: I32 val)\n: I32 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-I32/#parameters_3", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_13", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#addc", 
            "text": "fun box addc(\n  y: I32 val)\n: (I32 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-I32/#parameters_4", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_14", 
            "text": "( I32  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#subc", 
            "text": "fun box subc(\n  y: I32 val)\n: (I32 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-I32/#parameters_5", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_15", 
            "text": "( I32  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#mulc", 
            "text": "fun box mulc(\n  y: I32 val)\n: (I32 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-I32/#parameters_6", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_16", 
            "text": "( I32  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#shl", 
            "text": "fun box shl(\n  y: U32 val)\n: I32 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-I32/#parameters_7", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_17", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#shr", 
            "text": "fun box shr(\n  y: U32 val)\n: I32 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-I32/#parameters_8", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_18", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U32 val)\n: I32 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_9", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_19", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U32 val)\n: I32 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_10", 
            "text": "y:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_20", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-I32/#returns_21", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: I32 val)\n: I32 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_11", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_22", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: I32 val)\n: I32 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_12", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_23", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: I32 val)\n: I32 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_13", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_24", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: I32 val)\n: I32 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_14", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_25", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: I32 val)\n: (I32 val , I32 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_15", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_26", 
            "text": "( I32  val ,  I32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: I32 val)\n: I32 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-I32/#parameters_16", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_27", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: I32 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_28", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#op_and", 
            "text": "fun box op_and(\n  y: I32 val)\n: I32 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-I32/#parameters_17", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_29", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#op_or", 
            "text": "fun box op_or(\n  y: I32 val)\n: I32 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-I32/#parameters_18", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_30", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#op_xor", 
            "text": "fun box op_xor(\n  y: I32 val)\n: I32 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-I32/#parameters_19", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_31", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#op_not", 
            "text": "fun box op_not()\n: I32 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-I32/#returns_32", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#add", 
            "text": "fun box add(\n  y: I32 val)\n: I32 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-I32/#parameters_20", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_33", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#sub", 
            "text": "fun box sub(\n  y: I32 val)\n: I32 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-I32/#parameters_21", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_34", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#mul", 
            "text": "fun box mul(\n  y: I32 val)\n: I32 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-I32/#parameters_22", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_35", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#div", 
            "text": "fun box div(\n  y: I32 val)\n: I32 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-I32/#parameters_23", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_36", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#divmod", 
            "text": "fun box divmod(\n  y: I32 val)\n: (I32 val , I32 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-I32/#parameters_24", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_37", 
            "text": "( I32  val ,  I32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#mod", 
            "text": "fun box mod(\n  y: I32 val)\n: I32 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-I32/#parameters_25", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_38", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#neg", 
            "text": "fun box neg()\n: I32 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-I32/#returns_39", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#eq", 
            "text": "fun box eq(\n  y: I32 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-I32/#parameters_26", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ne", 
            "text": "fun box ne(\n  y: I32 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-I32/#parameters_27", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#lt", 
            "text": "fun box lt(\n  y: I32 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-I32/#parameters_28", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#le", 
            "text": "fun box le(\n  y: I32 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-I32/#parameters_29", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ge", 
            "text": "fun box ge(\n  y: I32 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-I32/#parameters_30", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#gt", 
            "text": "fun box gt(\n  y: I32 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-I32/#parameters_31", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-I32/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-I32/#returns_47", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-I32/#returns_48", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i32_1", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-I32/#returns_49", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-I32/#returns_50", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-I32/#returns_51", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-I32/#returns_52", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-I32/#returns_53", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-I32/#returns_54", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-I32/#returns_55", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-I32/#returns_56", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-I32/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-I32/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-I32/#returns_59", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-I32/#returns_60", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-I32/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-I32/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_63", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_64", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_65", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_66", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_67", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_68", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_69", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_70", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_71", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_72", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_74", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_75", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_76", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-I32/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#compare", 
            "text": "fun box compare(\n  that: I32 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-I32/#parameters_32", 
            "text": "that:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I32/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I32/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-I32/#_value", 
            "text": "fun box _value()\n: I32 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-I32/#returns_80", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/", 
            "text": "I64\n\n\nprimitive val I64 is\n  _SignedInteger[I64 val, U64 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI64\n val, \nU64\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I64 val)\n: I64 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: I64 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I64 val^\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I64 val^\n\n\n\n\nReturns\n\n\n\n\nI64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I64 val)\n: I64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val", 
            "title": "primitive I64"
        }, 
        {
            "location": "/builtin-I64/#i64", 
            "text": "primitive val I64 is\n  _SignedInteger[I64 val, U64 val] val", 
            "title": "I64"
        }, 
        {
            "location": "/builtin-I64/#implements", 
            "text": "_SignedInteger [ I64  val,  U64  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-I64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I64/#create", 
            "text": "new val create(\n  value: I64 val)\n: I64 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-I64/#parameters", 
            "text": "value:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns", 
            "text": "I64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: I64 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-I64/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_1", 
            "text": "I64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#min_value", 
            "text": "new val min_value()\n: I64 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-I64/#returns_2", 
            "text": "I64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#max_value", 
            "text": "new val max_value()\n: I64 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-I64/#returns_3", 
            "text": "I64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I64/#abs", 
            "text": "fun box abs()\n: U64 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-I64/#returns_4", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#bswap", 
            "text": "fun box bswap()\n: I64 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-I64/#returns_5", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#popcount", 
            "text": "fun box popcount()\n: U64 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-I64/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#clz", 
            "text": "fun box clz()\n: U64 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-I64/#returns_7", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ctz", 
            "text": "fun box ctz()\n: U64 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-I64/#returns_8", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U64 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_9", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U64 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_10", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#bitwidth", 
            "text": "fun box bitwidth()\n: U64 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-I64/#returns_11", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#min", 
            "text": "fun box min(\n  y: I64 val)\n: I64 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-I64/#parameters_2", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_12", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#max", 
            "text": "fun box max(\n  y: I64 val)\n: I64 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-I64/#parameters_3", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_13", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#addc", 
            "text": "fun box addc(\n  y: I64 val)\n: (I64 val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-I64/#parameters_4", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_14", 
            "text": "( I64  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#subc", 
            "text": "fun box subc(\n  y: I64 val)\n: (I64 val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-I64/#parameters_5", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_15", 
            "text": "( I64  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#mulc", 
            "text": "fun box mulc(\n  y: I64 val)\n: (I64 val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-I64/#parameters_6", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_16", 
            "text": "( I64  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#shl", 
            "text": "fun box shl(\n  y: U64 val)\n: I64 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-I64/#parameters_7", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_17", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#shr", 
            "text": "fun box shr(\n  y: U64 val)\n: I64 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-I64/#parameters_8", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_18", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U64 val)\n: I64 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_9", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_19", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U64 val)\n: I64 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_10", 
            "text": "y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_20", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-I64/#returns_21", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: I64 val)\n: I64 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_11", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_22", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: I64 val)\n: I64 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_12", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_23", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: I64 val)\n: I64 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_13", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_24", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: I64 val)\n: I64 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_14", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_25", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: I64 val)\n: (I64 val , I64 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_15", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_26", 
            "text": "( I64  val ,  I64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: I64 val)\n: I64 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-I64/#parameters_16", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_27", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: I64 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_28", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#op_and", 
            "text": "fun box op_and(\n  y: I64 val)\n: I64 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-I64/#parameters_17", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_29", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#op_or", 
            "text": "fun box op_or(\n  y: I64 val)\n: I64 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-I64/#parameters_18", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_30", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#op_xor", 
            "text": "fun box op_xor(\n  y: I64 val)\n: I64 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-I64/#parameters_19", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_31", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#op_not", 
            "text": "fun box op_not()\n: I64 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-I64/#returns_32", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#add", 
            "text": "fun box add(\n  y: I64 val)\n: I64 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-I64/#parameters_20", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_33", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#sub", 
            "text": "fun box sub(\n  y: I64 val)\n: I64 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-I64/#parameters_21", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_34", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#mul", 
            "text": "fun box mul(\n  y: I64 val)\n: I64 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-I64/#parameters_22", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_35", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#div", 
            "text": "fun box div(\n  y: I64 val)\n: I64 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-I64/#parameters_23", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_36", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#divmod", 
            "text": "fun box divmod(\n  y: I64 val)\n: (I64 val , I64 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-I64/#parameters_24", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_37", 
            "text": "( I64  val ,  I64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#mod", 
            "text": "fun box mod(\n  y: I64 val)\n: I64 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-I64/#parameters_25", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_38", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#neg", 
            "text": "fun box neg()\n: I64 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-I64/#returns_39", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#eq", 
            "text": "fun box eq(\n  y: I64 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-I64/#parameters_26", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ne", 
            "text": "fun box ne(\n  y: I64 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-I64/#parameters_27", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#lt", 
            "text": "fun box lt(\n  y: I64 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-I64/#parameters_28", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#le", 
            "text": "fun box le(\n  y: I64 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-I64/#parameters_29", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ge", 
            "text": "fun box ge(\n  y: I64 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-I64/#parameters_30", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#gt", 
            "text": "fun box gt(\n  y: I64 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-I64/#parameters_31", 
            "text": "y:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-I64/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-I64/#returns_47", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-I64/#returns_48", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-I64/#returns_49", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i64_1", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-I64/#returns_50", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-I64/#returns_51", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-I64/#returns_52", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-I64/#returns_53", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-I64/#returns_54", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-I64/#returns_55", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-I64/#returns_56", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-I64/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-I64/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-I64/#returns_59", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-I64/#returns_60", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-I64/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-I64/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_63", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_64", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_65", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_66", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_67", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_68", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_69", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_70", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_71", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_72", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_74", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_75", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_76", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-I64/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#compare", 
            "text": "fun box compare(\n  that: I64 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-I64/#parameters_32", 
            "text": "that:  I64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I64/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I64/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-I64/#_value", 
            "text": "fun box _value()\n: I64 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-I64/#returns_80", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/", 
            "text": "ILong\n\n\nprimitive val ILong is\n  _SignedInteger[ILong val, ULong val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nILong\n val, \nULong\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: ILong val)\n: ILong val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: ILong val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: ILong val^\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: ILong val^\n\n\n\n\nReturns\n\n\n\n\nILong\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nfun box clz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nfun box ctz_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: ULong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nULong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nILong\n val , \nILong\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: ILong val)\n: ILong val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: ILong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nILong\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val", 
            "title": "primitive ILong"
        }, 
        {
            "location": "/builtin-ILong/#ilong", 
            "text": "primitive val ILong is\n  _SignedInteger[ILong val, ULong val] val", 
            "title": "ILong"
        }, 
        {
            "location": "/builtin-ILong/#implements", 
            "text": "_SignedInteger [ ILong  val,  ULong  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-ILong/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ILong/#create", 
            "text": "new val create(\n  value: ILong val)\n: ILong val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-ILong/#parameters", 
            "text": "value:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns", 
            "text": "ILong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: ILong val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-ILong/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_1", 
            "text": "ILong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#min_value", 
            "text": "new val min_value()\n: ILong val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-ILong/#returns_2", 
            "text": "ILong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#max_value", 
            "text": "new val max_value()\n: ILong val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-ILong/#returns_3", 
            "text": "ILong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ILong/#abs", 
            "text": "fun box abs()\n: ULong val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-ILong/#returns_4", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#bswap", 
            "text": "fun box bswap()\n: ILong val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-ILong/#returns_5", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#popcount", 
            "text": "fun box popcount()\n: ULong val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-ILong/#returns_6", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#clz", 
            "text": "fun box clz()\n: ULong val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-ILong/#returns_7", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ctz", 
            "text": "fun box ctz()\n: ULong val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-ILong/#returns_8", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#clz_unsafe", 
            "text": "fun box clz_unsafe()\n: ULong val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_9", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ctz_unsafe", 
            "text": "fun box ctz_unsafe()\n: ULong val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_10", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#bitwidth", 
            "text": "fun box bitwidth()\n: ULong val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-ILong/#returns_11", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#min", 
            "text": "fun box min(\n  y: ILong val)\n: ILong val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-ILong/#parameters_2", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_12", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#max", 
            "text": "fun box max(\n  y: ILong val)\n: ILong val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-ILong/#parameters_3", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_13", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#addc", 
            "text": "fun box addc(\n  y: ILong val)\n: (ILong val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-ILong/#parameters_4", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_14", 
            "text": "( ILong  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#subc", 
            "text": "fun box subc(\n  y: ILong val)\n: (ILong val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-ILong/#parameters_5", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_15", 
            "text": "( ILong  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#mulc", 
            "text": "fun box mulc(\n  y: ILong val)\n: (ILong val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-ILong/#parameters_6", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_16", 
            "text": "( ILong  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#shl", 
            "text": "fun box shl(\n  y: ULong val)\n: ILong val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-ILong/#parameters_7", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_17", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#shr", 
            "text": "fun box shr(\n  y: ULong val)\n: ILong val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-ILong/#parameters_8", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_18", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: ULong val)\n: ILong val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_9", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_19", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: ULong val)\n: ILong val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_10", 
            "text": "y:  ULong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_20", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-ILong/#returns_21", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: ILong val)\n: ILong val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_11", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_22", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: ILong val)\n: ILong val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_12", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_23", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: ILong val)\n: ILong val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_13", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_24", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: ILong val)\n: ILong val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_14", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_25", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: ILong val)\n: (ILong val , ILong val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_15", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_26", 
            "text": "( ILong  val ,  ILong  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: ILong val)\n: ILong val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#parameters_16", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_27", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: ILong val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_28", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#op_and", 
            "text": "fun box op_and(\n  y: ILong val)\n: ILong val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-ILong/#parameters_17", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_29", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#op_or", 
            "text": "fun box op_or(\n  y: ILong val)\n: ILong val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-ILong/#parameters_18", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_30", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#op_xor", 
            "text": "fun box op_xor(\n  y: ILong val)\n: ILong val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-ILong/#parameters_19", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_31", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#op_not", 
            "text": "fun box op_not()\n: ILong val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-ILong/#returns_32", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#add", 
            "text": "fun box add(\n  y: ILong val)\n: ILong val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-ILong/#parameters_20", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_33", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#sub", 
            "text": "fun box sub(\n  y: ILong val)\n: ILong val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-ILong/#parameters_21", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_34", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#mul", 
            "text": "fun box mul(\n  y: ILong val)\n: ILong val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-ILong/#parameters_22", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_35", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#div", 
            "text": "fun box div(\n  y: ILong val)\n: ILong val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-ILong/#parameters_23", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_36", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#divmod", 
            "text": "fun box divmod(\n  y: ILong val)\n: (ILong val , ILong val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-ILong/#parameters_24", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_37", 
            "text": "( ILong  val ,  ILong  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#mod", 
            "text": "fun box mod(\n  y: ILong val)\n: ILong val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-ILong/#parameters_25", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_38", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#neg", 
            "text": "fun box neg()\n: ILong val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-ILong/#returns_39", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#eq", 
            "text": "fun box eq(\n  y: ILong val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-ILong/#parameters_26", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ne", 
            "text": "fun box ne(\n  y: ILong val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-ILong/#parameters_27", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#lt", 
            "text": "fun box lt(\n  y: ILong val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-ILong/#parameters_28", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#le", 
            "text": "fun box le(\n  y: ILong val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-ILong/#parameters_29", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ge", 
            "text": "fun box ge(\n  y: ILong val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-ILong/#parameters_30", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#gt", 
            "text": "fun box gt(\n  y: ILong val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-ILong/#parameters_31", 
            "text": "y:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-ILong/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-ILong/#returns_47", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-ILong/#returns_48", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-ILong/#returns_49", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-ILong/#returns_50", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-ILong/#returns_51", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ilong_1", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-ILong/#returns_52", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-ILong/#returns_53", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-ILong/#returns_54", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-ILong/#returns_55", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-ILong/#returns_56", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-ILong/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-ILong/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-ILong/#returns_59", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-ILong/#returns_60", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-ILong/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-ILong/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_63", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_64", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_65", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_66", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_67", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_68", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_69", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_70", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_71", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_72", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_74", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_75", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_76", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-ILong/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#compare", 
            "text": "fun box compare(\n  that: ILong val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-ILong/#parameters_32", 
            "text": "that:  ILong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ILong/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ILong/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-ILong/#_value", 
            "text": "fun box _value()\n: ILong val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-ILong/#returns_80", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/", 
            "text": "ISize\n\n\nprimitive val ISize is\n  _SignedInteger[ISize val, USize val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nISize\n val, \nUSize\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: ISize val)\n: ISize val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: ISize val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: ISize val^\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: ISize val^\n\n\n\n\nReturns\n\n\n\n\nISize\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nfun box clz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nfun box ctz_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\naddc\n\n\nfun box addc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nsubc\n\n\nfun box subc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nmulc\n\n\nfun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nBool\n val)\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: USize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nISize\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: ISize val)\n: ISize val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: ISize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val", 
            "title": "primitive ISize"
        }, 
        {
            "location": "/builtin-ISize/#isize", 
            "text": "primitive val ISize is\n  _SignedInteger[ISize val, USize val] val", 
            "title": "ISize"
        }, 
        {
            "location": "/builtin-ISize/#implements", 
            "text": "_SignedInteger [ ISize  val,  USize  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-ISize/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ISize/#create", 
            "text": "new val create(\n  value: ISize val)\n: ISize val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-ISize/#parameters", 
            "text": "value:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns", 
            "text": "ISize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: ISize val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-ISize/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_1", 
            "text": "ISize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#min_value", 
            "text": "new val min_value()\n: ISize val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-ISize/#returns_2", 
            "text": "ISize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#max_value", 
            "text": "new val max_value()\n: ISize val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-ISize/#returns_3", 
            "text": "ISize  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ISize/#abs", 
            "text": "fun box abs()\n: USize val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-ISize/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#bswap", 
            "text": "fun box bswap()\n: ISize val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-ISize/#returns_5", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#popcount", 
            "text": "fun box popcount()\n: USize val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-ISize/#returns_6", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#clz", 
            "text": "fun box clz()\n: USize val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-ISize/#returns_7", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ctz", 
            "text": "fun box ctz()\n: USize val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-ISize/#returns_8", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#clz_unsafe", 
            "text": "fun box clz_unsafe()\n: USize val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ctz_unsafe", 
            "text": "fun box ctz_unsafe()\n: USize val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_10", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#bitwidth", 
            "text": "fun box bitwidth()\n: USize val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-ISize/#returns_11", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#min", 
            "text": "fun box min(\n  y: ISize val)\n: ISize val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-ISize/#parameters_2", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_12", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#max", 
            "text": "fun box max(\n  y: ISize val)\n: ISize val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-ISize/#parameters_3", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_13", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#addc", 
            "text": "fun box addc(\n  y: ISize val)\n: (ISize val , Bool val)", 
            "title": "addc"
        }, 
        {
            "location": "/builtin-ISize/#parameters_4", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_14", 
            "text": "( ISize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#subc", 
            "text": "fun box subc(\n  y: ISize val)\n: (ISize val , Bool val)", 
            "title": "subc"
        }, 
        {
            "location": "/builtin-ISize/#parameters_5", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_15", 
            "text": "( ISize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#mulc", 
            "text": "fun box mulc(\n  y: ISize val)\n: (ISize val , Bool val)", 
            "title": "mulc"
        }, 
        {
            "location": "/builtin-ISize/#parameters_6", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_16", 
            "text": "( ISize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#shl", 
            "text": "fun box shl(\n  y: USize val)\n: ISize val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-ISize/#parameters_7", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_17", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#shr", 
            "text": "fun box shr(\n  y: USize val)\n: ISize val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-ISize/#parameters_8", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_18", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: USize val)\n: ISize val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_9", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_19", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: USize val)\n: ISize val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_10", 
            "text": "y:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_20", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-ISize/#returns_21", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: ISize val)\n: ISize val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_11", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_22", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: ISize val)\n: ISize val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_12", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_23", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: ISize val)\n: ISize val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_13", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_24", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: ISize val)\n: ISize val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_14", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_25", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: ISize val)\n: (ISize val , ISize val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_15", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_26", 
            "text": "( ISize  val ,  ISize  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: ISize val)\n: ISize val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#parameters_16", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_27", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: ISize val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_28", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#op_and", 
            "text": "fun box op_and(\n  y: ISize val)\n: ISize val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-ISize/#parameters_17", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_29", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#op_or", 
            "text": "fun box op_or(\n  y: ISize val)\n: ISize val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-ISize/#parameters_18", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_30", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#op_xor", 
            "text": "fun box op_xor(\n  y: ISize val)\n: ISize val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-ISize/#parameters_19", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_31", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#op_not", 
            "text": "fun box op_not()\n: ISize val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-ISize/#returns_32", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#add", 
            "text": "fun box add(\n  y: ISize val)\n: ISize val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-ISize/#parameters_20", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_33", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#sub", 
            "text": "fun box sub(\n  y: ISize val)\n: ISize val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-ISize/#parameters_21", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_34", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#mul", 
            "text": "fun box mul(\n  y: ISize val)\n: ISize val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-ISize/#parameters_22", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_35", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#div", 
            "text": "fun box div(\n  y: ISize val)\n: ISize val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-ISize/#parameters_23", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_36", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#divmod", 
            "text": "fun box divmod(\n  y: ISize val)\n: (ISize val , ISize val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-ISize/#parameters_24", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_37", 
            "text": "( ISize  val ,  ISize  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#mod", 
            "text": "fun box mod(\n  y: ISize val)\n: ISize val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-ISize/#parameters_25", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_38", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#neg", 
            "text": "fun box neg()\n: ISize val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-ISize/#returns_39", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#eq", 
            "text": "fun box eq(\n  y: ISize val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-ISize/#parameters_26", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ne", 
            "text": "fun box ne(\n  y: ISize val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-ISize/#parameters_27", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#lt", 
            "text": "fun box lt(\n  y: ISize val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-ISize/#parameters_28", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#le", 
            "text": "fun box le(\n  y: ISize val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-ISize/#parameters_29", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ge", 
            "text": "fun box ge(\n  y: ISize val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-ISize/#parameters_30", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#gt", 
            "text": "fun box gt(\n  y: ISize val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-ISize/#parameters_31", 
            "text": "y:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-ISize/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-ISize/#returns_47", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-ISize/#returns_48", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-ISize/#returns_49", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-ISize/#returns_50", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-ISize/#returns_51", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-ISize/#returns_52", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#isize_1", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-ISize/#returns_53", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-ISize/#returns_54", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-ISize/#returns_55", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-ISize/#returns_56", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-ISize/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-ISize/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-ISize/#returns_59", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-ISize/#returns_60", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-ISize/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-ISize/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_63", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_64", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_65", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_66", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_67", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_68", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_69", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_70", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_71", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_72", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_74", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_75", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_76", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-ISize/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#compare", 
            "text": "fun box compare(\n  that: ISize val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-ISize/#parameters_32", 
            "text": "that:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ISize/#returns_79", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ISize/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-ISize/#_value", 
            "text": "fun box _value()\n: ISize val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-ISize/#returns_80", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/", 
            "text": "I128\n\n\nprimitive val I128 is\n  _SignedInteger[I128 val, U128 val] val\n\n\n\n\nImplements\n\n\n\n\n_SignedInteger\n[\nI128\n val, \nU128\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: I128 val)\n: I128 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nfrom[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[A] val)]\n\n\nnew val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[A] val)](\n  a: A)\n: I128 val^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: I128 val^\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: I128 val^\n\n\n\n\nReturns\n\n\n\n\nI128\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nI128\n val , \nI128\n val)\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshl_unsafe\n\n\nfun box shl_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nshr_unsafe\n\n\nfun box shr_unsafe(\n  y: U128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nU128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: I128 val)\n: I128 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: I128 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nI128\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val", 
            "title": "primitive I128"
        }, 
        {
            "location": "/builtin-I128/#i128", 
            "text": "primitive val I128 is\n  _SignedInteger[I128 val, U128 val] val", 
            "title": "I128"
        }, 
        {
            "location": "/builtin-I128/#implements", 
            "text": "_SignedInteger [ I128  val,  U128  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-I128/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-I128/#create", 
            "text": "new val create(\n  value: I128 val)\n: I128 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-I128/#parameters", 
            "text": "value:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns", 
            "text": "I128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#from91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91a93-val93", 
            "text": "new val from[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[A] val)](\n  a: A)\n: I128 val^", 
            "title": "from[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[A] val)]"
        }, 
        {
            "location": "/builtin-I128/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_1", 
            "text": "I128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#min_value", 
            "text": "new val min_value()\n: I128 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-I128/#returns_2", 
            "text": "I128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#max_value", 
            "text": "new val max_value()\n: I128 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-I128/#returns_3", 
            "text": "I128  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-I128/#abs", 
            "text": "fun box abs()\n: U128 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-I128/#returns_4", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#bswap", 
            "text": "fun box bswap()\n: I128 val", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-I128/#returns_5", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#popcount", 
            "text": "fun box popcount()\n: U128 val", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-I128/#returns_6", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#clz", 
            "text": "fun box clz()\n: U128 val", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-I128/#returns_7", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ctz", 
            "text": "fun box ctz()\n: U128 val", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-I128/#returns_8", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: U128 val", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_9", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: U128 val", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_10", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#bitwidth", 
            "text": "fun box bitwidth()\n: U128 val", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-I128/#returns_11", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#min", 
            "text": "fun box min(\n  y: I128 val)\n: I128 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-I128/#parameters_2", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_12", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#max", 
            "text": "fun box max(\n  y: I128 val)\n: I128 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-I128/#parameters_3", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_13", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-I128/#returns_14", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-I128/#returns_15", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#mul", 
            "text": "fun box mul(\n  y: I128 val)\n: I128 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-I128/#parameters_4", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_16", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#divmod", 
            "text": "fun box divmod(\n  y: I128 val)\n: (I128 val , I128 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-I128/#parameters_5", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_17", 
            "text": "( I128  val ,  I128  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#div", 
            "text": "fun box div(\n  y: I128 val)\n: I128 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-I128/#parameters_6", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_18", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#mod", 
            "text": "fun box mod(\n  y: I128 val)\n: I128 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-I128/#parameters_7", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_19", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#mul_unsafe", 
            "text": "Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: I128 val)\n: I128 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_8", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_20", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#divmod_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: I128 val)\n: (I128 val , I128 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_9", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_21", 
            "text": "( I128  val ,  I128  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#div_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: I128 val)\n: I128 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_10", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_22", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#mod_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: I128 val)\n: I128 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_11", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_23", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-I128/#returns_24", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-I128/#returns_25", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#f32_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_26", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#f64_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_27", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#shl", 
            "text": "fun box shl(\n  y: U128 val)\n: I128 val", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-I128/#parameters_12", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_28", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#shr", 
            "text": "fun box shr(\n  y: U128 val)\n: I128 val", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-I128/#parameters_13", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_29", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#shl_unsafe", 
            "text": "fun box shl_unsafe(\n  y: U128 val)\n: I128 val", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_14", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_30", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#shr_unsafe", 
            "text": "fun box shr_unsafe(\n  y: U128 val)\n: I128 val", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_15", 
            "text": "y:  U128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_31", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: I128 val)\n: I128 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_16", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_32", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: I128 val)\n: I128 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-I128/#parameters_17", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_33", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: I128 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_34", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#op_and", 
            "text": "fun box op_and(\n  y: I128 val)\n: I128 val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-I128/#parameters_18", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_35", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#op_or", 
            "text": "fun box op_or(\n  y: I128 val)\n: I128 val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-I128/#parameters_19", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_36", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#op_xor", 
            "text": "fun box op_xor(\n  y: I128 val)\n: I128 val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-I128/#parameters_20", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_37", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#op_not", 
            "text": "fun box op_not()\n: I128 val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-I128/#returns_38", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#add", 
            "text": "fun box add(\n  y: I128 val)\n: I128 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-I128/#parameters_21", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_39", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#sub", 
            "text": "fun box sub(\n  y: I128 val)\n: I128 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-I128/#parameters_22", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_40", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#neg", 
            "text": "fun box neg()\n: I128 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-I128/#returns_41", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#eq", 
            "text": "fun box eq(\n  y: I128 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-I128/#parameters_23", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ne", 
            "text": "fun box ne(\n  y: I128 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-I128/#parameters_24", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_43", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#lt", 
            "text": "fun box lt(\n  y: I128 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-I128/#parameters_25", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#le", 
            "text": "fun box le(\n  y: I128 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-I128/#parameters_26", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ge", 
            "text": "fun box ge(\n  y: I128 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-I128/#parameters_27", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#gt", 
            "text": "fun box gt(\n  y: I128 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-I128/#parameters_28", 
            "text": "y:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-I128/#returns_48", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-I128/#returns_49", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-I128/#returns_50", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-I128/#returns_51", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i128_1", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-I128/#returns_52", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-I128/#returns_53", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-I128/#returns_54", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-I128/#returns_55", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-I128/#returns_56", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-I128/#returns_57", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-I128/#returns_58", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-I128/#returns_59", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-I128/#returns_60", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-I128/#returns_61", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_62", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_63", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_64", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_65", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_66", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_67", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_68", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_69", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_70", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_71", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_72", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_73", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_74", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-I128/#returns_75", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#compare", 
            "text": "fun box compare(\n  that: I128 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-I128/#parameters_29", 
            "text": "that:  I128  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-I128/#returns_76", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-I128/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-I128/#_value", 
            "text": "fun box _value()\n: I128 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-I128/#returns_77", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Signed/", 
            "text": "Signed\n\n\ntype Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val)", 
            "title": "type Signed"
        }, 
        {
            "location": "/builtin-Signed/#signed", 
            "text": "type Signed is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val)", 
            "title": "Signed"
        }, 
        {
            "location": "/builtin-Signed/#type-alias-for", 
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-Seq/", 
            "text": "Seq[A: A]\n\n\nA sequence of elements.\n\n\ninterface ref Seq[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate a sequence, reserving space for len elements.\n\n\nnew ref create(\n  len: USize val = seq)\n: Seq[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nSeq\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nreserve\n\n\nReserve space for len elements.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nupdate\n\n\nReplaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nclear\n\n\nRemoves all elements from the sequence.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdds an element to the end of the sequence.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemoves an element from the end of the sequence.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\n\nAdds an element to the beginning of the sequence.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemoves an element from the beginning of the sequence.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\n\nAdd len elements to the end of the list, starting from the given\noffset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box \n ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: (\nReadSeq\n[A] box \n \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\n\nTruncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nvalues\n\n\nReturns an iterator over the elements of the sequence.\n\n\nfun box values()\n: Iterator[this-\nA] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[this-\nA] ref^", 
            "title": "interface Seq"
        }, 
        {
            "location": "/builtin-Seq/#seq91a-a93", 
            "text": "A sequence of elements.  interface ref Seq[A: A]", 
            "title": "Seq[A: A]"
        }, 
        {
            "location": "/builtin-Seq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Seq/#create", 
            "text": "Create a sequence, reserving space for len elements.  new ref create(\n  len: USize val = seq)\n: Seq[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Seq/#parameters", 
            "text": "len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns", 
            "text": "Seq [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Seq/#reserve", 
            "text": "Reserve space for len elements.  fun ref reserve(\n  len: USize val)\n: None val", 
            "title": "reserve"
        }, 
        {
            "location": "/builtin-Seq/#parameters_1", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#size", 
            "text": "Returns the number of elements in the sequence.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/builtin-Seq/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#apply", 
            "text": "Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds.  fun box apply(\n  i: USize val)\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-Seq/#parameters_2", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_3", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#update", 
            "text": "Replaces the i-th element of the sequence. Returns the previous value.\nRaises an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?", 
            "title": "update"
        }, 
        {
            "location": "/builtin-Seq/#parameters_3", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_4", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#clear", 
            "text": "Removes all elements from the sequence.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/builtin-Seq/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#push", 
            "text": "Adds an element to the end of the sequence.  fun ref push(\n  value: A)\n: None val", 
            "title": "push"
        }, 
        {
            "location": "/builtin-Seq/#parameters_4", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#pop", 
            "text": "Removes an element from the end of the sequence.  fun ref pop()\n: A^ ?", 
            "title": "pop"
        }, 
        {
            "location": "/builtin-Seq/#returns_7", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#unshift", 
            "text": "Adds an element to the beginning of the sequence.  fun ref unshift(\n  value: A)\n: None val", 
            "title": "unshift"
        }, 
        {
            "location": "/builtin-Seq/#parameters_5", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#shift", 
            "text": "Removes an element from the beginning of the sequence.  fun ref shift()\n: A^ ?", 
            "title": "shift"
        }, 
        {
            "location": "/builtin-Seq/#returns_9", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#append", 
            "text": "Add len elements to the end of the list, starting from the given\noffset.  fun ref append(\n  seq: (ReadSeq[A] box   ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "append"
        }, 
        {
            "location": "/builtin-Seq/#parameters_6", 
            "text": "seq: ( ReadSeq [A] box    ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#concat", 
            "text": "Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "concat"
        }, 
        {
            "location": "/builtin-Seq/#parameters_7", 
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#truncate", 
            "text": "Truncate the sequence to the given length, discarding excess elements.\nIf the sequence is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val", 
            "title": "truncate"
        }, 
        {
            "location": "/builtin-Seq/#parameters_8", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Seq/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Seq/#values", 
            "text": "Returns an iterator over the elements of the sequence.  fun box values()\n: Iterator[this- A] ref^", 
            "title": "values"
        }, 
        {
            "location": "/builtin-Seq/#returns_13", 
            "text": "Iterator [this- A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/", 
            "text": "_ArithmeticConvertible\n\n\ntrait val _ArithmeticConvertible\n\n\n\n\nPublic Functions\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val", 
            "title": "trait _ArithmeticConvertible"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#_arithmeticconvertible", 
            "text": "trait val _ArithmeticConvertible", 
            "title": "_ArithmeticConvertible"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_1", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_2", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_3", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_4", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_5", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_6", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_7", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_8", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_9", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_10", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_11", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_12", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_13", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_14", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_15", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i8_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_16", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i16_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_17", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i32_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_18", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i64_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_19", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#i128_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_20", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#ilong_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_21", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#isize_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_22", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u8_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_23", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u16_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_24", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u32_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_25", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u64_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_26", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#u128_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_27", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#ulong_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_28", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#usize_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_29", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#f32_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_30", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#f64_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-_ArithmeticConvertible/#returns_31", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/", 
            "text": "Real[A: \nReal\n[A] val]\n\n\ntrait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref\n\n\n\n\nImplements\n\n\n\n\nStringable\n box\n\n\n_ArithmeticConvertible\n val\n\n\nComparable\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nadd\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "trait Real"
        }, 
        {
            "location": "/builtin-Real/#real91a-real91a93-val93", 
            "text": "trait val Real[A: Real[A] val] is\n  Stringable box,\n  _ArithmeticConvertible val,\n  Comparable[A] ref", 
            "title": "Real[A: Real[A] val]"
        }, 
        {
            "location": "/builtin-Real/#implements", 
            "text": "Stringable  box  _ArithmeticConvertible  val  Comparable [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Real/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Real/#create", 
            "text": "new val create(\n  value: A)\n: Real[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Real/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: Real[A] val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-Real/#parameters_1", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_1", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#min_value", 
            "text": "new val min_value()\n: Real[A] val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-Real/#returns_2", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#max_value", 
            "text": "new val max_value()\n: Real[A] val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-Real/#returns_3", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Real/#add", 
            "text": "fun box add(\n  y: A)\n: A", 
            "title": "add"
        }, 
        {
            "location": "/builtin-Real/#parameters_2", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_4", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#sub", 
            "text": "fun box sub(\n  y: A)\n: A", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-Real/#parameters_3", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_5", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#mul", 
            "text": "fun box mul(\n  y: A)\n: A", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-Real/#parameters_4", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_6", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#div", 
            "text": "fun box div(\n  y: A)\n: A", 
            "title": "div"
        }, 
        {
            "location": "/builtin-Real/#parameters_5", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_7", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#divmod", 
            "text": "fun box divmod(\n  y: A)\n: (A , A)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-Real/#parameters_6", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_8", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#mod", 
            "text": "fun box mod(\n  y: A)\n: A", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-Real/#parameters_7", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_9", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#neg", 
            "text": "fun box neg()\n: A", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-Real/#returns_10", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#eq", 
            "text": "fun box eq(\n  y: A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Real/#parameters_8", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#ne", 
            "text": "fun box ne(\n  y: A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Real/#parameters_9", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#lt", 
            "text": "fun box lt(\n  y: A)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-Real/#parameters_10", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#le", 
            "text": "fun box le(\n  y: A)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-Real/#parameters_11", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#ge", 
            "text": "fun box ge(\n  y: A)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-Real/#parameters_12", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_15", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#gt", 
            "text": "fun box gt(\n  y: A)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-Real/#parameters_13", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_16", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#min", 
            "text": "fun box min(\n  y: A)\n: A", 
            "title": "min"
        }, 
        {
            "location": "/builtin-Real/#parameters_14", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_17", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#max", 
            "text": "fun box max(\n  y: A)\n: A", 
            "title": "max"
        }, 
        {
            "location": "/builtin-Real/#parameters_15", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_18", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-Real/#returns_19", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Real/#returns_20", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-Real/#returns_21", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-Real/#returns_22", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-Real/#returns_23", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-Real/#returns_24", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-Real/#returns_25", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-Real/#returns_26", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-Real/#returns_27", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-Real/#returns_28", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-Real/#returns_29", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-Real/#returns_30", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-Real/#returns_31", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-Real/#returns_32", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-Real/#returns_33", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-Real/#returns_34", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-Real/#returns_35", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-Real/#returns_36", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_37", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_38", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_39", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_40", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_41", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_42", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_43", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_44", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_45", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_46", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_47", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_48", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_49", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_50", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_51", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-Real/#returns_52", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#compare", 
            "text": "fun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-Real/#parameters_16", 
            "text": "that: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Real/#returns_53", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Real/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Real/#_value", 
            "text": "fun box _value()\n: A", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-Real/#returns_54", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/", 
            "text": "Integer[A: \nInteger\n[A] val]\n\n\ntrait val Integer[A: Integer[A] val] is\n  Real[A] val\n\n\n\n\nImplements\n\n\n\n\nReal\n[A] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nadd_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\n\nUnsafe operation.\nIf the operation overflows, the result is undefined.\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "trait Integer"
        }, 
        {
            "location": "/builtin-Integer/#integer91a-integer91a93-val93", 
            "text": "trait val Integer[A: Integer[A] val] is\n  Real[A] val", 
            "title": "Integer[A: Integer[A] val]"
        }, 
        {
            "location": "/builtin-Integer/#implements", 
            "text": "Real [A] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Integer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Integer/#create", 
            "text": "new val create(\n  value: A)\n: Real[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Integer/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: Real[A] val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-Integer/#parameters_1", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_1", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#min_value", 
            "text": "new val min_value()\n: Real[A] val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-Integer/#returns_2", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#max_value", 
            "text": "new val max_value()\n: Real[A] val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-Integer/#returns_3", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Integer/#add_unsafe", 
            "text": "Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box add_unsafe(\n  y: A)\n: A", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#parameters_2", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_4", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#sub_unsafe", 
            "text": "Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box sub_unsafe(\n  y: A)\n: A", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#parameters_3", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_5", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#mul_unsafe", 
            "text": "Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box mul_unsafe(\n  y: A)\n: A", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#parameters_4", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_6", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#div_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box div_unsafe(\n  y: A)\n: A", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#parameters_5", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_7", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#divmod_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box divmod_unsafe(\n  y: A)\n: (A , A)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#parameters_6", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_8", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#mod_unsafe", 
            "text": "Unsafe operation.\nIf y is 0, the result is undefined.\nIf the operation overflows, the result is undefined.  fun box mod_unsafe(\n  y: A)\n: A", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#parameters_7", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_9", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#neg_unsafe", 
            "text": "Unsafe operation.\nIf the operation overflows, the result is undefined.  fun box neg_unsafe()\n: A", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_10", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#op_and", 
            "text": "fun box op_and(\n  y: A)\n: A", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-Integer/#parameters_8", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_11", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#op_or", 
            "text": "fun box op_or(\n  y: A)\n: A", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-Integer/#parameters_9", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_12", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#op_xor", 
            "text": "fun box op_xor(\n  y: A)\n: A", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-Integer/#parameters_10", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_13", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#op_not", 
            "text": "fun box op_not()\n: A", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-Integer/#returns_14", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#bswap", 
            "text": "fun box bswap()\n: A", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-Integer/#returns_15", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#add", 
            "text": "fun box add(\n  y: A)\n: A", 
            "title": "add"
        }, 
        {
            "location": "/builtin-Integer/#parameters_11", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_16", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#sub", 
            "text": "fun box sub(\n  y: A)\n: A", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-Integer/#parameters_12", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_17", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#mul", 
            "text": "fun box mul(\n  y: A)\n: A", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-Integer/#parameters_13", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_18", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#div", 
            "text": "fun box div(\n  y: A)\n: A", 
            "title": "div"
        }, 
        {
            "location": "/builtin-Integer/#parameters_14", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_19", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#divmod", 
            "text": "fun box divmod(\n  y: A)\n: (A , A)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-Integer/#parameters_15", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_20", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#mod", 
            "text": "fun box mod(\n  y: A)\n: A", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-Integer/#parameters_16", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_21", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#neg", 
            "text": "fun box neg()\n: A", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-Integer/#returns_22", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#eq", 
            "text": "fun box eq(\n  y: A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Integer/#parameters_17", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#ne", 
            "text": "fun box ne(\n  y: A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Integer/#parameters_18", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_24", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#lt", 
            "text": "fun box lt(\n  y: A)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-Integer/#parameters_19", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_25", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#le", 
            "text": "fun box le(\n  y: A)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-Integer/#parameters_20", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_26", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#ge", 
            "text": "fun box ge(\n  y: A)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-Integer/#parameters_21", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_27", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#gt", 
            "text": "fun box gt(\n  y: A)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-Integer/#parameters_22", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_28", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#min", 
            "text": "fun box min(\n  y: A)\n: A", 
            "title": "min"
        }, 
        {
            "location": "/builtin-Integer/#parameters_23", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_29", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#max", 
            "text": "fun box max(\n  y: A)\n: A", 
            "title": "max"
        }, 
        {
            "location": "/builtin-Integer/#parameters_24", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_30", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-Integer/#returns_31", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Integer/#returns_32", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-Integer/#returns_33", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-Integer/#returns_34", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-Integer/#returns_35", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-Integer/#returns_36", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-Integer/#returns_37", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-Integer/#returns_38", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-Integer/#returns_39", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-Integer/#returns_40", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-Integer/#returns_41", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-Integer/#returns_42", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-Integer/#returns_43", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-Integer/#returns_44", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-Integer/#returns_45", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-Integer/#returns_46", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-Integer/#returns_47", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-Integer/#returns_48", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_49", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_50", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_51", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_52", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_53", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_54", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_55", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_56", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_57", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_58", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_59", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_60", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_61", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_62", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_63", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-Integer/#returns_64", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#compare", 
            "text": "fun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-Integer/#parameters_25", 
            "text": "that: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Integer/#returns_65", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Integer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Integer/#_value", 
            "text": "fun box _value()\n: A", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-Integer/#returns_66", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/", 
            "text": "_SignedInteger[A: \n_SignedInteger\n[A, B] val, B: \n_UnsignedInteger\n[B] val]\n\n\ntrait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is\n  Integer[A] val\n\n\n\n\nImplements\n\n\n\n\nInteger\n[A] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: B)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: B\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: B)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: B\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshl_unsafe\n\n\nUnsafe operation.\nIf bits differing from the final sign bit are shifted-out, the result is\nundefined.\n\n\nfun box shl_unsafe(\n  y: B)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: B\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshr_unsafe\n\n\nUnsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.\n\n\nfun box shr_unsafe(\n  y: B)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: B\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "trait _SignedInteger"
        }, 
        {
            "location": "/builtin-_SignedInteger/#_signedinteger91a-_signedinteger91a-b93-val-b-_unsignedinteger91b93-val93", 
            "text": "trait val _SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val] is\n  Integer[A] val", 
            "title": "_SignedInteger[A: _SignedInteger[A, B] val, B: _UnsignedInteger[B] val]"
        }, 
        {
            "location": "/builtin-_SignedInteger/#implements", 
            "text": "Integer [A] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-_SignedInteger/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_SignedInteger/#create", 
            "text": "new val create(\n  value: A)\n: Real[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: Real[A] val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_1", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_1", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#min_value", 
            "text": "new val min_value()\n: Real[A] val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_2", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#max_value", 
            "text": "new val max_value()\n: Real[A] val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_3", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_SignedInteger/#abs", 
            "text": "fun box abs()\n: B", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_4", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#shl", 
            "text": "fun box shl(\n  y: B)\n: A", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_2", 
            "text": "y: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_5", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#shr", 
            "text": "fun box shr(\n  y: B)\n: A", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_3", 
            "text": "y: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_6", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#shl_unsafe", 
            "text": "Unsafe operation.\nIf bits differing from the final sign bit are shifted-out, the result is\nundefined.  fun box shl_unsafe(\n  y: B)\n: A", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_4", 
            "text": "y: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_7", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#shr_unsafe", 
            "text": "Unsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.  fun box shr_unsafe(\n  y: B)\n: A", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_5", 
            "text": "y: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_8", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#popcount", 
            "text": "fun box popcount()\n: B", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_9", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#clz", 
            "text": "fun box clz()\n: B", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_10", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ctz", 
            "text": "fun box ctz()\n: B", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_11", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: B", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_12", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: B", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_13", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#bitwidth", 
            "text": "fun box bitwidth()\n: B", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_14", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_15", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: A)\n: A", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_6", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_16", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: A)\n: A", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_7", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_17", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: A)\n: A", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_8", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_18", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: A)\n: A", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_9", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_19", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: A)\n: (A , A)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_10", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_20", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: A)\n: A", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_11", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_21", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: A", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_22", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#op_and", 
            "text": "fun box op_and(\n  y: A)\n: A", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_12", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_23", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#op_or", 
            "text": "fun box op_or(\n  y: A)\n: A", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_13", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_24", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#op_xor", 
            "text": "fun box op_xor(\n  y: A)\n: A", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_14", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_25", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#op_not", 
            "text": "fun box op_not()\n: A", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_26", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#bswap", 
            "text": "fun box bswap()\n: A", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_27", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#add", 
            "text": "fun box add(\n  y: A)\n: A", 
            "title": "add"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_15", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_28", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#sub", 
            "text": "fun box sub(\n  y: A)\n: A", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_16", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_29", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#mul", 
            "text": "fun box mul(\n  y: A)\n: A", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_17", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_30", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#div", 
            "text": "fun box div(\n  y: A)\n: A", 
            "title": "div"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_18", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_31", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#divmod", 
            "text": "fun box divmod(\n  y: A)\n: (A , A)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_19", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_32", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#mod", 
            "text": "fun box mod(\n  y: A)\n: A", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_20", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_33", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#neg", 
            "text": "fun box neg()\n: A", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_34", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#eq", 
            "text": "fun box eq(\n  y: A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_21", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_35", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ne", 
            "text": "fun box ne(\n  y: A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_22", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_36", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#lt", 
            "text": "fun box lt(\n  y: A)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_23", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_37", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#le", 
            "text": "fun box le(\n  y: A)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_24", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_38", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ge", 
            "text": "fun box ge(\n  y: A)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_25", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_39", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#gt", 
            "text": "fun box gt(\n  y: A)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_26", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#min", 
            "text": "fun box min(\n  y: A)\n: A", 
            "title": "min"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_27", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_41", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#max", 
            "text": "fun box max(\n  y: A)\n: A", 
            "title": "max"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_28", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_42", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_43", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_44", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_45", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_46", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_47", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_48", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_49", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_50", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_51", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_52", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_53", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_54", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_55", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_56", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_57", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_58", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_59", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_60", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_61", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_62", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_63", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_64", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_65", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_66", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_67", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_68", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_69", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_70", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_71", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_72", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_73", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_74", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_75", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#compare", 
            "text": "fun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-_SignedInteger/#parameters_29", 
            "text": "that: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_76", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_SignedInteger/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-_SignedInteger/#_value", 
            "text": "fun box _value()\n: A", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-_SignedInteger/#returns_77", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/", 
            "text": "_UnsignedInteger[A: \n_UnsignedInteger\n[A] val]\n\n\ntrait val _UnsignedInteger[A: _UnsignedInteger[A] val] is\n  Integer[A] val\n\n\n\n\nImplements\n\n\n\n\nInteger\n[A] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nabs\n\n\nfun box abs()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshl\n\n\nfun box shl(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshr\n\n\nfun box shr(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshl_unsafe\n\n\nUnsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.\n\n\nfun box shl_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nshr_unsafe\n\n\nUnsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.\n\n\nfun box shr_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nrotl\n\n\nfun box rotl(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nrotr\n\n\nfun box rotr(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\npopcount\n\n\nfun box popcount()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nclz\n\n\nfun box clz()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nctz\n\n\nfun box ctz()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nclz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box clz_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nctz_unsafe\n\n\nUnsafe operation.\nIf this is 0, the result is undefined.\n\n\nfun box ctz_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nbitwidth\n\n\nfun box bitwidth()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nbswap\n\n\nfun box bswap()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "trait _UnsignedInteger"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#_unsignedinteger91a-_unsignedinteger91a93-val93", 
            "text": "trait val _UnsignedInteger[A: _UnsignedInteger[A] val] is\n  Integer[A] val", 
            "title": "_UnsignedInteger[A: _UnsignedInteger[A] val]"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#implements", 
            "text": "Integer [A] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#create", 
            "text": "new val create(\n  value: A)\n: Real[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: Real[A] val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_1", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_1", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#min_value", 
            "text": "new val min_value()\n: Real[A] val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_2", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#max_value", 
            "text": "new val max_value()\n: Real[A] val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_3", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#abs", 
            "text": "fun box abs()\n: A", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_4", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#shl", 
            "text": "fun box shl(\n  y: A)\n: A", 
            "title": "shl"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_2", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_5", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#shr", 
            "text": "fun box shr(\n  y: A)\n: A", 
            "title": "shr"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_3", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_6", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#shl_unsafe", 
            "text": "Unsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.  fun box shl_unsafe(\n  y: A)\n: A", 
            "title": "shl_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_4", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_7", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#shr_unsafe", 
            "text": "Unsafe operation.\nIf non-zero bits are shifted-out, the result is undefined.  fun box shr_unsafe(\n  y: A)\n: A", 
            "title": "shr_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_5", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_8", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#rotl", 
            "text": "fun box rotl(\n  y: A)\n: A", 
            "title": "rotl"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_6", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_9", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#rotr", 
            "text": "fun box rotr(\n  y: A)\n: A", 
            "title": "rotr"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_7", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_10", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#popcount", 
            "text": "fun box popcount()\n: A", 
            "title": "popcount"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_11", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#clz", 
            "text": "fun box clz()\n: A", 
            "title": "clz"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_12", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ctz", 
            "text": "fun box ctz()\n: A", 
            "title": "ctz"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_13", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#clz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box clz_unsafe()\n: A", 
            "title": "clz_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_14", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ctz_unsafe", 
            "text": "Unsafe operation.\nIf this is 0, the result is undefined.  fun box ctz_unsafe()\n: A", 
            "title": "ctz_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_15", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#bitwidth", 
            "text": "fun box bitwidth()\n: A", 
            "title": "bitwidth"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_16", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_17", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: A)\n: A", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_8", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_18", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: A)\n: A", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_9", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_19", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: A)\n: A", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_10", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_20", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: A)\n: A", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_11", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_21", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: A)\n: (A , A)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_12", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_22", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: A)\n: A", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_13", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_23", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: A", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_24", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#op_and", 
            "text": "fun box op_and(\n  y: A)\n: A", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_14", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_25", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#op_or", 
            "text": "fun box op_or(\n  y: A)\n: A", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_15", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_26", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#op_xor", 
            "text": "fun box op_xor(\n  y: A)\n: A", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_16", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_27", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#op_not", 
            "text": "fun box op_not()\n: A", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_28", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#bswap", 
            "text": "fun box bswap()\n: A", 
            "title": "bswap"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_29", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#add", 
            "text": "fun box add(\n  y: A)\n: A", 
            "title": "add"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_17", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_30", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#sub", 
            "text": "fun box sub(\n  y: A)\n: A", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_18", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_31", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#mul", 
            "text": "fun box mul(\n  y: A)\n: A", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_19", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_32", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#div", 
            "text": "fun box div(\n  y: A)\n: A", 
            "title": "div"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_20", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_33", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#divmod", 
            "text": "fun box divmod(\n  y: A)\n: (A , A)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_21", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_34", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#mod", 
            "text": "fun box mod(\n  y: A)\n: A", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_22", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_35", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#neg", 
            "text": "fun box neg()\n: A", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_36", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#eq", 
            "text": "fun box eq(\n  y: A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_23", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_37", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ne", 
            "text": "fun box ne(\n  y: A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_24", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_38", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#lt", 
            "text": "fun box lt(\n  y: A)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_25", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_39", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#le", 
            "text": "fun box le(\n  y: A)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_26", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_40", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ge", 
            "text": "fun box ge(\n  y: A)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_27", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_41", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#gt", 
            "text": "fun box gt(\n  y: A)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_28", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_42", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#min", 
            "text": "fun box min(\n  y: A)\n: A", 
            "title": "min"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_29", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_43", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#max", 
            "text": "fun box max(\n  y: A)\n: A", 
            "title": "max"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_30", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_44", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_45", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_46", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_47", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_48", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_49", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_50", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_51", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_52", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_53", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_54", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_55", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_56", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_57", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_58", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_59", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_60", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_61", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_62", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_63", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_64", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_65", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_66", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_67", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_68", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_69", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_70", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_71", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_72", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_73", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_74", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_75", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_76", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_77", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#compare", 
            "text": "fun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#parameters_31", 
            "text": "that: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_78", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#_value", 
            "text": "fun box _value()\n: A", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-_UnsignedInteger/#returns_79", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/", 
            "text": "FloatingPoint[A: \nFloatingPoint\n[A] val]\n\n\ntrait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val\n\n\n\n\nImplements\n\n\n\n\nReal\n[A] val\n\n\n\n\n\n\nConstructors\n\n\nmin_normalised\n\n\nnew val min_normalised()\n: FloatingPoint[A] val^\n\n\n\n\nReturns\n\n\n\n\nFloatingPoint\n[A] val^\n\n\n\n\n\n\nepsilon\n\n\nnew val epsilon()\n: FloatingPoint[A] val^\n\n\n\n\nReturns\n\n\n\n\nFloatingPoint\n[A] val^\n\n\n\n\n\n\ncreate\n\n\nnew val create(\n  value: A)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: Real[A] val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmin_value\n\n\nnew val min_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nmax_value\n\n\nnew val max_value()\n: Real[A] val^\n\n\n\n\nReturns\n\n\n\n\nReal\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nradix\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box add_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box sub_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mul_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box div_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box divmod_unsafe(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box mod_unsafe(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg_unsafe\n\n\nUnsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box neg_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\neq_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box eq_unsafe(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ne_unsafe(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box lt_unsafe(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box le_unsafe(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box ge_unsafe(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\n\nUnsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.\n\n\nfun box gt_unsafe(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nceil\n\n\nfun box ceil()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nfloor\n\n\nfun box floor()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nround\n\n\nfun box round()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ntrunc\n\n\nfun box trunc()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nfinite\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\n\nfun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A\n\n\n\n\nParameters\n\n\n\n\nx: A\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nfrexp\n\n\nfun box frexp()\n: (A , U32 val)\n\n\n\n\nReturns\n\n\n\n\n(A , \nU32\n val)\n\n\n\n\n\n\nlog\n\n\nfun box log()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nlog2\n\n\nfun box log2()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nlog10\n\n\nfun box log10()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nlogb\n\n\nfun box logb()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\npow\n\n\nfun box pow(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\npowi\n\n\nfun box powi(\n  y: I32 val)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsqrt\n\n\nfun box sqrt()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsqrt_unsafe\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ncbrt\n\n\nfun box cbrt()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nexp\n\n\nfun box exp()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nexp2\n\n\nfun box exp2()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ncos\n\n\nfun box cos()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsin\n\n\nfun box sin()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ntan\n\n\nfun box tan()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ncosh\n\n\nfun box cosh()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsinh\n\n\nfun box sinh()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ntanh\n\n\nfun box tanh()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nacos\n\n\nfun box acos()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nasin\n\n\nfun box asin()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\natan\n\n\nfun box atan()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\natan2\n\n\nfun box atan2(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nacosh\n\n\nfun box acosh()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nasinh\n\n\nfun box asinh()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\natanh\n\n\nfun box atanh()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ncopysign\n\n\nfun box copysign(\n  sign: A)\n: A\n\n\n\n\nParameters\n\n\n\n\nsign: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: A)\n: (A , A)\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\n(A , A)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: A)\n: A\n\n\n\n\nParameters\n\n\n\n\ny: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "trait FloatingPoint"
        }, 
        {
            "location": "/builtin-FloatingPoint/#floatingpoint91a-floatingpoint91a93-val93", 
            "text": "trait val FloatingPoint[A: FloatingPoint[A] val] is\n  Real[A] val", 
            "title": "FloatingPoint[A: FloatingPoint[A] val]"
        }, 
        {
            "location": "/builtin-FloatingPoint/#implements", 
            "text": "Real [A] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-FloatingPoint/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-FloatingPoint/#min_normalised", 
            "text": "new val min_normalised()\n: FloatingPoint[A] val^", 
            "title": "min_normalised"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns", 
            "text": "FloatingPoint [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#epsilon", 
            "text": "new val epsilon()\n: FloatingPoint[A] val^", 
            "title": "epsilon"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_1", 
            "text": "FloatingPoint [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#create", 
            "text": "new val create(\n  value: A)\n: Real[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_2", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: Real[A] val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_1", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_3", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#min_value", 
            "text": "new val min_value()\n: Real[A] val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_4", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#max_value", 
            "text": "new val max_value()\n: Real[A] val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_5", 
            "text": "Real [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-FloatingPoint/#radix", 
            "text": "fun tag radix()\n: U8 val", 
            "title": "radix"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_6", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#precision2", 
            "text": "fun tag precision2()\n: U8 val", 
            "title": "precision2"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_7", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#precision10", 
            "text": "fun tag precision10()\n: U8 val", 
            "title": "precision10"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_8", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#min_exp2", 
            "text": "fun tag min_exp2()\n: I16 val", 
            "title": "min_exp2"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_9", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#min_exp10", 
            "text": "fun tag min_exp10()\n: I16 val", 
            "title": "min_exp10"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_10", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#max_exp2", 
            "text": "fun tag max_exp2()\n: I16 val", 
            "title": "max_exp2"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_11", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#max_exp10", 
            "text": "fun tag max_exp10()\n: I16 val", 
            "title": "max_exp10"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_12", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#add_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box add_unsafe(\n  y: A)\n: A", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_2", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_13", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#sub_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box sub_unsafe(\n  y: A)\n: A", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_3", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_14", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#mul_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mul_unsafe(\n  y: A)\n: A", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_4", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_15", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#div_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box div_unsafe(\n  y: A)\n: A", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_5", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_16", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#divmod_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box divmod_unsafe(\n  y: A)\n: (A , A)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_6", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_17", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#mod_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box mod_unsafe(\n  y: A)\n: A", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_7", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_18", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#neg_unsafe", 
            "text": "Unsafe operation.\nIf any input or output of the operation is +/- infinity or NaN, the result\nis undefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box neg_unsafe()\n: A", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_19", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#eq_unsafe", 
            "text": "Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box eq_unsafe(\n  y: A)\n: Bool val", 
            "title": "eq_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_8", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_20", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ne_unsafe", 
            "text": "Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ne_unsafe(\n  y: A)\n: Bool val", 
            "title": "ne_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_9", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_21", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#lt_unsafe", 
            "text": "Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box lt_unsafe(\n  y: A)\n: Bool val", 
            "title": "lt_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_10", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_22", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#le_unsafe", 
            "text": "Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box le_unsafe(\n  y: A)\n: Bool val", 
            "title": "le_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_11", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ge_unsafe", 
            "text": "Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box ge_unsafe(\n  y: A)\n: Bool val", 
            "title": "ge_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_12", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_24", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#gt_unsafe", 
            "text": "Unsafe operation.\nIf any input of the operation is +/- infinity or NaN, the result is\nundefined.\nThe operation isn't required to fully comply to IEEE 754 semantics.  fun box gt_unsafe(\n  y: A)\n: Bool val", 
            "title": "gt_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_13", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_25", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#abs", 
            "text": "fun box abs()\n: A", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_26", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ceil", 
            "text": "fun box ceil()\n: A", 
            "title": "ceil"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_27", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#floor", 
            "text": "fun box floor()\n: A", 
            "title": "floor"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_28", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#round", 
            "text": "fun box round()\n: A", 
            "title": "round"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_29", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#trunc", 
            "text": "fun box trunc()\n: A", 
            "title": "trunc"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_30", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#finite", 
            "text": "fun box finite()\n: Bool val", 
            "title": "finite"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_31", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#infinite", 
            "text": "fun box infinite()\n: Bool val", 
            "title": "infinite"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_32", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#nan", 
            "text": "fun box nan()\n: Bool val", 
            "title": "nan"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_33", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ldexp", 
            "text": "fun box ldexp(\n  x: A,\n  exponent: I32 val)\n: A", 
            "title": "ldexp"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_14", 
            "text": "x: A  exponent:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_34", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#frexp", 
            "text": "fun box frexp()\n: (A , U32 val)", 
            "title": "frexp"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_35", 
            "text": "(A ,  U32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#log", 
            "text": "fun box log()\n: A", 
            "title": "log"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_36", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#log2", 
            "text": "fun box log2()\n: A", 
            "title": "log2"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_37", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#log10", 
            "text": "fun box log10()\n: A", 
            "title": "log10"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_38", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#logb", 
            "text": "fun box logb()\n: A", 
            "title": "logb"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_39", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#pow", 
            "text": "fun box pow(\n  y: A)\n: A", 
            "title": "pow"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_15", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_40", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#powi", 
            "text": "fun box powi(\n  y: I32 val)\n: A", 
            "title": "powi"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_16", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_41", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#sqrt", 
            "text": "fun box sqrt()\n: A", 
            "title": "sqrt"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_42", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#sqrt_unsafe", 
            "text": "Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: A", 
            "title": "sqrt_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_43", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#cbrt", 
            "text": "fun box cbrt()\n: A", 
            "title": "cbrt"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_44", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#exp", 
            "text": "fun box exp()\n: A", 
            "title": "exp"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_45", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#exp2", 
            "text": "fun box exp2()\n: A", 
            "title": "exp2"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_46", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#cos", 
            "text": "fun box cos()\n: A", 
            "title": "cos"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_47", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#sin", 
            "text": "fun box sin()\n: A", 
            "title": "sin"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_48", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#tan", 
            "text": "fun box tan()\n: A", 
            "title": "tan"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_49", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#cosh", 
            "text": "fun box cosh()\n: A", 
            "title": "cosh"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_50", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#sinh", 
            "text": "fun box sinh()\n: A", 
            "title": "sinh"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_51", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#tanh", 
            "text": "fun box tanh()\n: A", 
            "title": "tanh"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_52", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#acos", 
            "text": "fun box acos()\n: A", 
            "title": "acos"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_53", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#asin", 
            "text": "fun box asin()\n: A", 
            "title": "asin"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_54", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#atan", 
            "text": "fun box atan()\n: A", 
            "title": "atan"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_55", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#atan2", 
            "text": "fun box atan2(\n  y: A)\n: A", 
            "title": "atan2"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_17", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_56", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#acosh", 
            "text": "fun box acosh()\n: A", 
            "title": "acosh"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_57", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#asinh", 
            "text": "fun box asinh()\n: A", 
            "title": "asinh"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_58", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#atanh", 
            "text": "fun box atanh()\n: A", 
            "title": "atanh"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_59", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#copysign", 
            "text": "fun box copysign(\n  sign: A)\n: A", 
            "title": "copysign"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_18", 
            "text": "sign: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_60", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_61", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#add", 
            "text": "fun box add(\n  y: A)\n: A", 
            "title": "add"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_19", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_62", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#sub", 
            "text": "fun box sub(\n  y: A)\n: A", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_20", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_63", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#mul", 
            "text": "fun box mul(\n  y: A)\n: A", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_21", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_64", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#div", 
            "text": "fun box div(\n  y: A)\n: A", 
            "title": "div"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_22", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_65", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#divmod", 
            "text": "fun box divmod(\n  y: A)\n: (A , A)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_23", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_66", 
            "text": "(A , A)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#mod", 
            "text": "fun box mod(\n  y: A)\n: A", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_24", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_67", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#neg", 
            "text": "fun box neg()\n: A", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_68", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#eq", 
            "text": "fun box eq(\n  y: A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_25", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_69", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ne", 
            "text": "fun box ne(\n  y: A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_26", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_70", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#lt", 
            "text": "fun box lt(\n  y: A)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_27", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_71", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#le", 
            "text": "fun box le(\n  y: A)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_28", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_72", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ge", 
            "text": "fun box ge(\n  y: A)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_29", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_73", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#gt", 
            "text": "fun box gt(\n  y: A)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_30", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_74", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#min", 
            "text": "fun box min(\n  y: A)\n: A", 
            "title": "min"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_31", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_75", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#max", 
            "text": "fun box max(\n  y: A)\n: A", 
            "title": "max"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_32", 
            "text": "y: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_76", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_77", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_78", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_79", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_80", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_81", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_82", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_83", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_84", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_85", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_86", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_87", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_88", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_89", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_90", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_91", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_92", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_93", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_94", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_95", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_96", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_97", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#i128_unsafe", 
            "text": "fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_98", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_99", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_100", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_101", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_102", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_103", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_104", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#u128_unsafe", 
            "text": "fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_105", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_106", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_107", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_108", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_109", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#compare", 
            "text": "fun box compare(\n  that: A)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-FloatingPoint/#parameters_33", 
            "text": "that: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_110", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-FloatingPoint/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-FloatingPoint/#_value", 
            "text": "fun box _value()\n: A", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-FloatingPoint/#returns_111", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Number/", 
            "text": "Number\n\n\ntype Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val)", 
            "title": "type Number"
        }, 
        {
            "location": "/builtin-Number/#number", 
            "text": "type Number is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val)", 
            "title": "Number"
        }, 
        {
            "location": "/builtin-Number/#type-alias-for", 
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val |  U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val |  F32  val |  F64  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-Int/", 
            "text": "Int\n\n\ntype Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val)", 
            "title": "type Int"
        }, 
        {
            "location": "/builtin-Int/#int", 
            "text": "type Int is\n  (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val)", 
            "title": "Int"
        }, 
        {
            "location": "/builtin-Int/#type-alias-for", 
            "text": "( I8  val |  I16  val |  I32  val |  I64  val |  I128  val |  ILong  val |  ISize  val |  U8  val |  U16  val |  U32  val |  U64  val |  U128  val |  ULong  val |  USize  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-ReadSeq/", 
            "text": "ReadSeq[A: A]\n\n\nThe readable interface of a sequence.\n\n\ninterface box ReadSeq[A: A]\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturns the number of elements in the sequence.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this-\nA.\n\n\nfun box apply(\n  i: USize val)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nvalues\n\n\nReturns an iterator over the elements of the sequence. Note that this\niterates over A^, not this-\nA.\n\n\nfun box values()\n: Iterator[this-\nA] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[this-\nA] ref^", 
            "title": "interface ReadSeq"
        }, 
        {
            "location": "/builtin-ReadSeq/#readseq91a-a93", 
            "text": "The readable interface of a sequence.  interface box ReadSeq[A: A]", 
            "title": "ReadSeq[A: A]"
        }, 
        {
            "location": "/builtin-ReadSeq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ReadSeq/#size", 
            "text": "Returns the number of elements in the sequence.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/builtin-ReadSeq/#returns", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ReadSeq/#apply", 
            "text": "Returns the i-th element of the sequence. Raises an error if the index\nis out of bounds. Note that this returns A^, not this- A.  fun box apply(\n  i: USize val)\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-ReadSeq/#parameters", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ReadSeq/#returns_1", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ReadSeq/#values", 
            "text": "Returns an iterator over the elements of the sequence. Note that this\niterates over A^, not this- A.  fun box values()\n: Iterator[this- A] ref^", 
            "title": "values"
        }, 
        {
            "location": "/builtin-ReadSeq/#returns_2", 
            "text": "Iterator [this- A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ReadElement/", 
            "text": "ReadElement[A: A]\n\n\nUsed to show that a ReadSeq can return an element of a specific unmodified\ntype.\n\n\ninterface box ReadElement[A: A]\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  i: USize val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA ?", 
            "title": "interface ReadElement"
        }, 
        {
            "location": "/builtin-ReadElement/#readelement91a-a93", 
            "text": "Used to show that a ReadSeq can return an element of a specific unmodified\ntype.  interface box ReadElement[A: A]", 
            "title": "ReadElement[A: A]"
        }, 
        {
            "location": "/builtin-ReadElement/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ReadElement/#apply", 
            "text": "fun box apply(\n  i: USize val)\n: A ?", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-ReadElement/#parameters", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ReadElement/#returns", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/", 
            "text": "Pointer[A: A]\n\n\nA Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.\n\n\nstruct ref Pointer[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nA null pointer.\n\n\nnew ref create()\n: Pointer[A] ref^\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref^\n\n\n\n\n\n\n_alloc\n\n\nSpace for len instances of A.\n\n\nnew ref _alloc(\n  len: USize val)\n: Pointer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nusize\n\n\nConvert the pointer into an integer.\n\n\nfun tag usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nis_null\n\n\nReturn true for a null pointer, false for anything else.\n\n\nfun tag is_null()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nReturn true if this address is that address.\n\n\nfun tag eq(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturn true if this address is less than that address.\n\n\nfun tag lt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun tag ne(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun tag le(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun tag ge(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun tag gt(\n  that: Pointer[A] tag)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhash\n\n\nReturns a hash of the address.\n\n\nfun tag hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_realloc\n\n\nKeep the contents, but reserve space for len instances of A.\n\n\nfun ref _realloc(\n  len: USize val)\n: Pointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref\n\n\n\n\n\n\n_unsafe\n\n\nUnsafe change in reference capability.\n\n\nfun tag _unsafe()\n: Pointer[A] ref\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref\n\n\n\n\n\n\n_apply\n\n\nRetrieve index i.\n\n\nfun box _apply(\n  i: USize val)\n: this-\nA\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nA\n\n\n\n\n\n\n_update\n\n\nSet index i and return the previous value.\n\n\nfun ref _update(\n  i: USize val,\n  value: A!)\n: A^\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A!\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\n_offset\n\n\nReturn a pointer to the n-th element.\n\n\nfun box _offset(\n  n: USize val)\n: this-\nPointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nPointer\n[A] ref\n\n\n\n\n\n\n_element_size\n\n\nReturn the size of a single element in an array of type A.\n\n\nfun tag _element_size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_insert\n\n\nCreates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.\n\n\nfun ref _insert(\n  n: USize val,\n  len: USize val)\n: Pointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref\n\n\n\n\n\n\n_delete\n\n\nDelete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.\n\n\nfun ref _delete(\n  n: USize val,\n  len: USize val)\n: A^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\n_copy_to\n\n\nCopy n elements from this to that.\n\n\nfun box _copy_to(\n  that: Pointer[this-\nA!] ref,\n  n: USize val)\n: this-\nPointer[A] ref\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[this-\nA!] ref\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nPointer\n[A] ref\n\n\n\n\n\n\n_consume_from\n\n\nCopy n elements from that to this.\n\n\nfun ref _consume_from(\n  that: Pointer[A] ref^,\n  n: USize val)\n: Pointer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: \nPointer\n[A] ref^\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] ref^", 
            "title": "struct Pointer"
        }, 
        {
            "location": "/builtin-Pointer/#pointer91a-a93", 
            "text": "A Pointer[A] is a raw memory pointer. It has no descriptor and thus can't be\nincluded in a union or intersection, or be a subtype of any interface. Most\nfunctions on a Pointer[A] are private to maintain memory safety.  struct ref Pointer[A: A]", 
            "title": "Pointer[A: A]"
        }, 
        {
            "location": "/builtin-Pointer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Pointer/#create", 
            "text": "A null pointer.  new ref create()\n: Pointer[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Pointer/#returns", 
            "text": "Pointer [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_alloc", 
            "text": "Space for len instances of A.  new ref _alloc(\n  len: USize val)\n: Pointer[A] ref^", 
            "title": "_alloc"
        }, 
        {
            "location": "/builtin-Pointer/#parameters", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_1", 
            "text": "Pointer [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Pointer/#usize", 
            "text": "Convert the pointer into an integer.  fun tag usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-Pointer/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#is_null", 
            "text": "Return true for a null pointer, false for anything else.  fun tag is_null()\n: Bool val", 
            "title": "is_null"
        }, 
        {
            "location": "/builtin-Pointer/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#eq", 
            "text": "Return true if this address is that address.  fun tag eq(\n  that: Pointer[A] tag)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_1", 
            "text": "that:  Pointer [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#lt", 
            "text": "Return true if this address is less than that address.  fun tag lt(\n  that: Pointer[A] tag)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_2", 
            "text": "that:  Pointer [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#ne", 
            "text": "fun tag ne(\n  that: Pointer[A] tag)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_3", 
            "text": "that:  Pointer [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#le", 
            "text": "fun tag le(\n  that: Pointer[A] tag)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_4", 
            "text": "that:  Pointer [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#ge", 
            "text": "fun tag ge(\n  that: Pointer[A] tag)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_5", 
            "text": "that:  Pointer [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#gt", 
            "text": "fun tag gt(\n  that: Pointer[A] tag)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_6", 
            "text": "that:  Pointer [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#hash", 
            "text": "Returns a hash of the address.  fun tag hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-Pointer/#returns_10", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Pointer/#_realloc", 
            "text": "Keep the contents, but reserve space for len instances of A.  fun ref _realloc(\n  len: USize val)\n: Pointer[A] ref", 
            "title": "_realloc"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_7", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_11", 
            "text": "Pointer [A] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_unsafe", 
            "text": "Unsafe change in reference capability.  fun tag _unsafe()\n: Pointer[A] ref", 
            "title": "_unsafe"
        }, 
        {
            "location": "/builtin-Pointer/#returns_12", 
            "text": "Pointer [A] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_apply", 
            "text": "Retrieve index i.  fun box _apply(\n  i: USize val)\n: this- A", 
            "title": "_apply"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_8", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_13", 
            "text": "this- A", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_update", 
            "text": "Set index i and return the previous value.  fun ref _update(\n  i: USize val,\n  value: A!)\n: A^", 
            "title": "_update"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_9", 
            "text": "i:  USize  val  value: A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_14", 
            "text": "A^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_offset", 
            "text": "Return a pointer to the n-th element.  fun box _offset(\n  n: USize val)\n: this- Pointer[A] ref", 
            "title": "_offset"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_10", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_15", 
            "text": "this- Pointer [A] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_element_size", 
            "text": "Return the size of a single element in an array of type A.  fun tag _element_size()\n: USize val", 
            "title": "_element_size"
        }, 
        {
            "location": "/builtin-Pointer/#returns_16", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_insert", 
            "text": "Creates space for n new elements at the head, moving following elements.\nThe array length before this should be len, and the available space should\nbe at least n + len.  fun ref _insert(\n  n: USize val,\n  len: USize val)\n: Pointer[A] ref", 
            "title": "_insert"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_11", 
            "text": "n:  USize  val  len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_17", 
            "text": "Pointer [A] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_delete", 
            "text": "Delete n elements from the head of pointer, compact remaining elements of\nthe underlying array. The array length before this should be n + len.\nReturns the first deleted element.  fun ref _delete(\n  n: USize val,\n  len: USize val)\n: A^", 
            "title": "_delete"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_12", 
            "text": "n:  USize  val  len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_18", 
            "text": "A^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_copy_to", 
            "text": "Copy n elements from this to that.  fun box _copy_to(\n  that: Pointer[this- A!] ref,\n  n: USize val)\n: this- Pointer[A] ref", 
            "title": "_copy_to"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_13", 
            "text": "that:  Pointer [this- A!] ref  n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_19", 
            "text": "this- Pointer [A] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Pointer/#_consume_from", 
            "text": "Copy n elements from that to this.  fun ref _consume_from(\n  that: Pointer[A] ref^,\n  n: USize val)\n: Pointer[A] ref^", 
            "title": "_consume_from"
        }, 
        {
            "location": "/builtin-Pointer/#parameters_14", 
            "text": "that:  Pointer [A] ref^  n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Pointer/#returns_20", 
            "text": "Pointer [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/", 
            "text": "Platform\n\n\nprimitive val Platform\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Platform val^\n\n\n\n\nReturns\n\n\n\n\nPlatform\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nbsd\n\n\nfun box bsd()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nfreebsd\n\n\nfun box freebsd()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndragonfly\n\n\nfun box dragonfly()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlinux\n\n\nfun box linux()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nosx\n\n\nfun box osx()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nposix\n\n\nfun box posix()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwindows\n\n\nfun box windows()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nx86\n\n\nfun box x86()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\narm\n\n\nfun box arm()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlp64\n\n\nfun box lp64()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nllp64\n\n\nfun box llp64()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nilp32\n\n\nfun box ilp32()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnative128\n\n\nfun box native128()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndebug\n\n\nfun box debug()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Platform val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPlatform\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Platform"
        }, 
        {
            "location": "/builtin-Platform/#platform", 
            "text": "primitive val Platform", 
            "title": "Platform"
        }, 
        {
            "location": "/builtin-Platform/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Platform/#create", 
            "text": "new val create()\n: Platform val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Platform/#returns", 
            "text": "Platform  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Platform/#bsd", 
            "text": "fun box bsd()\n: Bool val", 
            "title": "bsd"
        }, 
        {
            "location": "/builtin-Platform/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#freebsd", 
            "text": "fun box freebsd()\n: Bool val", 
            "title": "freebsd"
        }, 
        {
            "location": "/builtin-Platform/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#dragonfly", 
            "text": "fun box dragonfly()\n: Bool val", 
            "title": "dragonfly"
        }, 
        {
            "location": "/builtin-Platform/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#linux", 
            "text": "fun box linux()\n: Bool val", 
            "title": "linux"
        }, 
        {
            "location": "/builtin-Platform/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#osx", 
            "text": "fun box osx()\n: Bool val", 
            "title": "osx"
        }, 
        {
            "location": "/builtin-Platform/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#posix", 
            "text": "fun box posix()\n: Bool val", 
            "title": "posix"
        }, 
        {
            "location": "/builtin-Platform/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#windows", 
            "text": "fun box windows()\n: Bool val", 
            "title": "windows"
        }, 
        {
            "location": "/builtin-Platform/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#x86", 
            "text": "fun box x86()\n: Bool val", 
            "title": "x86"
        }, 
        {
            "location": "/builtin-Platform/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#arm", 
            "text": "fun box arm()\n: Bool val", 
            "title": "arm"
        }, 
        {
            "location": "/builtin-Platform/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#lp64", 
            "text": "fun box lp64()\n: Bool val", 
            "title": "lp64"
        }, 
        {
            "location": "/builtin-Platform/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#llp64", 
            "text": "fun box llp64()\n: Bool val", 
            "title": "llp64"
        }, 
        {
            "location": "/builtin-Platform/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#ilp32", 
            "text": "fun box ilp32()\n: Bool val", 
            "title": "ilp32"
        }, 
        {
            "location": "/builtin-Platform/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#native128", 
            "text": "fun box native128()\n: Bool val", 
            "title": "native128"
        }, 
        {
            "location": "/builtin-Platform/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#debug", 
            "text": "fun box debug()\n: Bool val", 
            "title": "debug"
        }, 
        {
            "location": "/builtin-Platform/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#eq", 
            "text": "fun box eq(\n  that: Platform val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Platform/#parameters", 
            "text": "that:  Platform  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Platform/#returns_15", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Platform/#ne", 
            "text": "fun box ne(\n  that: Platform val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Platform/#parameters_1", 
            "text": "that:  Platform  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Platform/#returns_16", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-None/", 
            "text": "None\n\n\nprimitive val None is\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: None val^\n\n\n\n\nReturns\n\n\n\n\nNone\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive None"
        }, 
        {
            "location": "/builtin-None/#none", 
            "text": "primitive val None is\n  Stringable box", 
            "title": "None"
        }, 
        {
            "location": "/builtin-None/#implements", 
            "text": "Stringable  box", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-None/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-None/#create", 
            "text": "new val create()\n: None val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-None/#returns", 
            "text": "None  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-None/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-None/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-None/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-None/#eq", 
            "text": "fun box eq(\n  that: None val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-None/#parameters", 
            "text": "that:  None  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-None/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-None/#ne", 
            "text": "fun box ne(\n  that: None val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-None/#parameters_1", 
            "text": "that:  None  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-None/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-MaybePointer/", 
            "text": "MaybePointer[A: A]\n\n\nA MaybePointer[A] is used to encode a possibly-null type. It should\n\nonly\n be used for structs that need to be passed to and from the C FFI.\n\n\nAn optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).\n\n\nstruct ref MaybePointer[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nThis re-encodes the type of \nthat\n from A to MaybePointer[A], allowing\n\nthat\n to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for \nthat\n.\n\n\nnew ref create(\n  that: A)\n: MaybePointer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: A\n\n\n\n\nReturns\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nnone\n\n\nThis returns a null pointer typed as a MaybePointer[A].\n\n\nnew ref none()\n: MaybePointer[A] ref^\n\n\n\n\nReturns\n\n\n\n\nMaybePointer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nThis re-encodes the type of \nthis\n from MaybePointer[A] to A, allowing\n\nthis\n to be assigned to a field of variable of type A. If \nthis\n is a null\npointer, an error is raised.\n\n\nfun box apply()\n: this-\nA ?\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nis_none\n\n\nReturns true if \nthis\n is null (ie apply would raise an error).\n\n\nfun box is_none()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "struct MaybePointer"
        }, 
        {
            "location": "/builtin-MaybePointer/#maybepointer91a-a93", 
            "text": "A MaybePointer[A] is used to encode a possibly-null type. It should only  be used for structs that need to be passed to and from the C FFI.  An optional type for anything that isn't a struct should be encoded as a\nunion type, for example (A | None).  struct ref MaybePointer[A: A]", 
            "title": "MaybePointer[A: A]"
        }, 
        {
            "location": "/builtin-MaybePointer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-MaybePointer/#create", 
            "text": "This re-encodes the type of  that  from A to MaybePointer[A], allowing that  to be assigned to a field or variable of type MaybePointer[A]. It\ndoesn't allocate a wrapper object: there is no containing object for  that .  new ref create(\n  that: A)\n: MaybePointer[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-MaybePointer/#parameters", 
            "text": "that: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-MaybePointer/#returns", 
            "text": "MaybePointer [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-MaybePointer/#none", 
            "text": "This returns a null pointer typed as a MaybePointer[A].  new ref none()\n: MaybePointer[A] ref^", 
            "title": "none"
        }, 
        {
            "location": "/builtin-MaybePointer/#returns_1", 
            "text": "MaybePointer [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-MaybePointer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-MaybePointer/#apply", 
            "text": "This re-encodes the type of  this  from MaybePointer[A] to A, allowing this  to be assigned to a field of variable of type A. If  this  is a null\npointer, an error is raised.  fun box apply()\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-MaybePointer/#returns_2", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-MaybePointer/#is_none", 
            "text": "Returns true if  this  is null (ie apply would raise an error).  fun box is_none()\n: Bool val", 
            "title": "is_none"
        }, 
        {
            "location": "/builtin-MaybePointer/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Iterator/", 
            "text": "Iterator[A: A]\n\n\nIterators generate a series of values, one value at a time on each call to \nnext()\n.\n\n\nAn Iterator is considered exhausted, once its \nhas_next()\n method returns \nfalse\n.\nThus every call to \nnext()\n should be preceeded with a call to \nhas_next()\n to\ncheck for exhaustiveness.\n\n\nUsage\n\n\nGiven the rules for using Iterators mentioned above, basic usage\nof an iterator looks like this:\n\n\nwhile iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend\n\n\n\n\nThe \nFor\n-loop provides a more concise way of iteration:\n\n\nfor elem in iterator do\n  // do something with elem\nend\n\n\n\n\nIteration using \nWhile\n is more flexible as it allows to continue iterating if a call to \nnext()\n errors.\nThe \nFor\n-loop does not allow this.\n\n\nImplementing Iterators\n\n\nIterator implementations need to adhere to the following rules to be considered well-behaved:\n\n\n\n\nIf the Iterator is exhausted, \nhas_next()\n needs to return \nfalse\n.\n\n\nOnce \nhas_next()\n returned \nfalse\n it is not allowed to switch back to \ntrue\n\n  (Unless the Iterator supports rewinding)\n\n\nhas_next()\n does not change its returned value if \nnext()\n has not been called.\n  That means, that between two calls to \nnext()\n any number of calls to \nhas_next()\n\n  need to return the same value. (Unless the Iterator supports rewinding)\n\n\nA call to \nnext()\n erroring does not necessarily denote exhaustiveness.\n\n\n\n\nExample\n\n\n// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) =\n\n    _cur = from\n\n  fun ref has_next(): Bool =\n\n    _has_next\n\n  fun ref next(): USize =\n\n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem\n\n\n\n\ninterface ref Iterator[A: A]\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nReturns \ntrue\n if this Iterator is not yet exhausted.\nThat means that a value returned from a subsequent call to \nnext()\n\nis a valid part of this iterator.\n\n\nReturns \nfalse\n if this Iterator is exhausted.\n\n\nThe behavior of \nnext()\n after this function returned \nfalse\n is undefined,\nit might throw an error or return values which are not part of this Iterator.\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGenerate the next value.\n\n\nThis might error, which does not necessarily mean that the Iterator is exhausted.\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?", 
            "title": "interface Iterator"
        }, 
        {
            "location": "/builtin-Iterator/#iterator91a-a93", 
            "text": "Iterators generate a series of values, one value at a time on each call to  next() .  An Iterator is considered exhausted, once its  has_next()  method returns  false .\nThus every call to  next()  should be preceeded with a call to  has_next()  to\ncheck for exhaustiveness.", 
            "title": "Iterator[A: A]"
        }, 
        {
            "location": "/builtin-Iterator/#usage", 
            "text": "Given the rules for using Iterators mentioned above, basic usage\nof an iterator looks like this:  while iterator.has_next() do\n  let elem = iterator.next()?\n  // do something with elem\nend  The  For -loop provides a more concise way of iteration:  for elem in iterator do\n  // do something with elem\nend  Iteration using  While  is more flexible as it allows to continue iterating if a call to  next()  errors.\nThe  For -loop does not allow this.", 
            "title": "Usage"
        }, 
        {
            "location": "/builtin-Iterator/#implementing-iterators", 
            "text": "Iterator implementations need to adhere to the following rules to be considered well-behaved:   If the Iterator is exhausted,  has_next()  needs to return  false .  Once  has_next()  returned  false  it is not allowed to switch back to  true \n  (Unless the Iterator supports rewinding)  has_next()  does not change its returned value if  next()  has not been called.\n  That means, that between two calls to  next()  any number of calls to  has_next() \n  need to return the same value. (Unless the Iterator supports rewinding)  A call to  next()  erroring does not necessarily denote exhaustiveness.", 
            "title": "Implementing Iterators"
        }, 
        {
            "location": "/builtin-Iterator/#example", 
            "text": "// Generates values from `from` to 0\nclass ref Countdown is Iterator[USize]\n  var _cur: USize\n  var _has_next: Bool = true\n\n  new ref create(from: USize) = \n    _cur = from\n\n  fun ref has_next(): Bool = \n    _has_next\n\n  fun ref next(): USize = \n    let elem = _cur = _cur - 1\n    if elem == 0 then\n      _has_next = false\n    end\n    elem  interface ref Iterator[A: A]", 
            "title": "Example"
        }, 
        {
            "location": "/builtin-Iterator/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Iterator/#has_next", 
            "text": "Returns  true  if this Iterator is not yet exhausted.\nThat means that a value returned from a subsequent call to  next() \nis a valid part of this iterator.  Returns  false  if this Iterator is exhausted.  The behavior of  next()  after this function returned  false  is undefined,\nit might throw an error or return values which are not part of this Iterator.  fun ref has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/builtin-Iterator/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Iterator/#next", 
            "text": "Generate the next value.  This might error, which does not necessarily mean that the Iterator is exhausted.  fun ref next()\n: A ?", 
            "title": "next"
        }, 
        {
            "location": "/builtin-Iterator/#returns_1", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/", 
            "text": "F32\n\n\nprimitive val F32 is\n  FloatingPoint[F32 val] val\n\n\n\n\nImplements\n\n\n\n\nFloatingPoint\n[\nF32\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: F32 val = seq)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nF32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\npi\n\n\nnew val pi()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\ne\n\n\nnew val e()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\n_nan\n\n\nnew val _nan()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\n_inf\n\n\nnew val _inf(\n  negative: Bool val)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\nnegative: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom_bits\n\n\nnew val from_bits(\n  i: U32 val)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: F32 val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_value\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmax_value\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nmin_normalised\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nepsilon\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F32 val^\n\n\n\n\nReturns\n\n\n\n\nF32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nbits\n\n\nfun box bits()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nradix\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nceil\n\n\nfun box ceil()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfloor\n\n\nfun box floor()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nround\n\n\nfun box round()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntrunc\n\n\nfun box trunc()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfinite\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\n\nfun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\nx: \nF32\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nfrexp\n\n\nfun box frexp()\n: (F32 val , U32 val)\n\n\n\n\nReturns\n\n\n\n\n(\nF32\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\n\nfun box log()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog2\n\n\nfun box log2()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlog10\n\n\nfun box log10()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nlogb\n\n\nfun box logb()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\npow\n\n\nfun box pow(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\npowi\n\n\nfun box powi(\n  y: I32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt\n\n\nfun box sqrt()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsqrt_unsafe\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncbrt\n\n\nfun box cbrt()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp\n\n\nfun box exp()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nexp2\n\n\nfun box exp2()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncos\n\n\nfun box cos()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsin\n\n\nfun box sin()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntan\n\n\nfun box tan()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncosh\n\n\nfun box cosh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsinh\n\n\nfun box sinh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ntanh\n\n\nfun box tanh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacos\n\n\nfun box acos()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasin\n\n\nfun box asin()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan\n\n\nfun box atan()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\natan2\n\n\nfun box atan2(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nacosh\n\n\nfun box acosh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nasinh\n\n\nfun box asinh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\natanh\n\n\nfun box atanh()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ncopysign\n\n\nfun box copysign(\n  sign: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\nsign: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq_unsafe\n\n\nfun box eq_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\n\nfun box ne_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\n\nfun box lt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\n\nfun box le_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\n\nfun box ge_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\n\nfun box gt_unsafe(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF32\n val , \nF32\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: F32 val)\n: F32 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: F32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nF32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val", 
            "title": "primitive F32"
        }, 
        {
            "location": "/builtin-F32/#f32", 
            "text": "primitive val F32 is\n  FloatingPoint[F32 val] val", 
            "title": "F32"
        }, 
        {
            "location": "/builtin-F32/#implements", 
            "text": "FloatingPoint [ F32  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-F32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-F32/#create", 
            "text": "new val create(\n  value: F32 val = seq)\n: F32 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-F32/#parameters", 
            "text": "value:  F32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#pi", 
            "text": "new val pi()\n: F32 val^", 
            "title": "pi"
        }, 
        {
            "location": "/builtin-F32/#returns_1", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#e", 
            "text": "new val e()\n: F32 val^", 
            "title": "e"
        }, 
        {
            "location": "/builtin-F32/#returns_2", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#_nan", 
            "text": "new val _nan()\n: F32 val^", 
            "title": "_nan"
        }, 
        {
            "location": "/builtin-F32/#returns_3", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#_inf", 
            "text": "new val _inf(\n  negative: Bool val)\n: F32 val^", 
            "title": "_inf"
        }, 
        {
            "location": "/builtin-F32/#parameters_1", 
            "text": "negative:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_4", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#from_bits", 
            "text": "new val from_bits(\n  i: U32 val)\n: F32 val^", 
            "title": "from_bits"
        }, 
        {
            "location": "/builtin-F32/#parameters_2", 
            "text": "i:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_5", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: F32 val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-F32/#parameters_3", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_6", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#min_value", 
            "text": "Minimum negative value representable.  new val min_value()\n: F32 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-F32/#returns_7", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#max_value", 
            "text": "Maximum positive value representable.  new val max_value()\n: F32 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-F32/#returns_8", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#min_normalised", 
            "text": "Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F32 val^", 
            "title": "min_normalised"
        }, 
        {
            "location": "/builtin-F32/#returns_9", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#epsilon", 
            "text": "Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F32 val^", 
            "title": "epsilon"
        }, 
        {
            "location": "/builtin-F32/#returns_10", 
            "text": "F32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-F32/#bits", 
            "text": "fun box bits()\n: U32 val", 
            "title": "bits"
        }, 
        {
            "location": "/builtin-F32/#returns_11", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#radix", 
            "text": "Exponent radix.  fun tag radix()\n: U8 val", 
            "title": "radix"
        }, 
        {
            "location": "/builtin-F32/#returns_12", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#precision2", 
            "text": "Mantissa precision in bits.  fun tag precision2()\n: U8 val", 
            "title": "precision2"
        }, 
        {
            "location": "/builtin-F32/#returns_13", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#precision10", 
            "text": "Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val", 
            "title": "precision10"
        }, 
        {
            "location": "/builtin-F32/#returns_14", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#min_exp2", 
            "text": "Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val", 
            "title": "min_exp2"
        }, 
        {
            "location": "/builtin-F32/#returns_15", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#min_exp10", 
            "text": "Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val", 
            "title": "min_exp10"
        }, 
        {
            "location": "/builtin-F32/#returns_16", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#max_exp2", 
            "text": "Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val", 
            "title": "max_exp2"
        }, 
        {
            "location": "/builtin-F32/#returns_17", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#max_exp10", 
            "text": "Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val", 
            "title": "max_exp10"
        }, 
        {
            "location": "/builtin-F32/#returns_18", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#abs", 
            "text": "fun box abs()\n: F32 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-F32/#returns_19", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ceil", 
            "text": "fun box ceil()\n: F32 val", 
            "title": "ceil"
        }, 
        {
            "location": "/builtin-F32/#returns_20", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#floor", 
            "text": "fun box floor()\n: F32 val", 
            "title": "floor"
        }, 
        {
            "location": "/builtin-F32/#returns_21", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#round", 
            "text": "fun box round()\n: F32 val", 
            "title": "round"
        }, 
        {
            "location": "/builtin-F32/#returns_22", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#trunc", 
            "text": "fun box trunc()\n: F32 val", 
            "title": "trunc"
        }, 
        {
            "location": "/builtin-F32/#returns_23", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#min", 
            "text": "fun box min(\n  y: F32 val)\n: F32 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-F32/#parameters_4", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_24", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#max", 
            "text": "fun box max(\n  y: F32 val)\n: F32 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-F32/#parameters_5", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_25", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#finite", 
            "text": "Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val", 
            "title": "finite"
        }, 
        {
            "location": "/builtin-F32/#returns_26", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#infinite", 
            "text": "Check whether this number is +/-infinity  fun box infinite()\n: Bool val", 
            "title": "infinite"
        }, 
        {
            "location": "/builtin-F32/#returns_27", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#nan", 
            "text": "Check whether this number is NaN.  fun box nan()\n: Bool val", 
            "title": "nan"
        }, 
        {
            "location": "/builtin-F32/#returns_28", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ldexp", 
            "text": "fun box ldexp(\n  x: F32 val,\n  exponent: I32 val)\n: F32 val", 
            "title": "ldexp"
        }, 
        {
            "location": "/builtin-F32/#parameters_6", 
            "text": "x:  F32  val  exponent:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_29", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#frexp", 
            "text": "fun box frexp()\n: (F32 val , U32 val)", 
            "title": "frexp"
        }, 
        {
            "location": "/builtin-F32/#returns_30", 
            "text": "( F32  val ,  U32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#log", 
            "text": "fun box log()\n: F32 val", 
            "title": "log"
        }, 
        {
            "location": "/builtin-F32/#returns_31", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#log2", 
            "text": "fun box log2()\n: F32 val", 
            "title": "log2"
        }, 
        {
            "location": "/builtin-F32/#returns_32", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#log10", 
            "text": "fun box log10()\n: F32 val", 
            "title": "log10"
        }, 
        {
            "location": "/builtin-F32/#returns_33", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#logb", 
            "text": "fun box logb()\n: F32 val", 
            "title": "logb"
        }, 
        {
            "location": "/builtin-F32/#returns_34", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#pow", 
            "text": "fun box pow(\n  y: F32 val)\n: F32 val", 
            "title": "pow"
        }, 
        {
            "location": "/builtin-F32/#parameters_7", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_35", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#powi", 
            "text": "fun box powi(\n  y: I32 val)\n: F32 val", 
            "title": "powi"
        }, 
        {
            "location": "/builtin-F32/#parameters_8", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_36", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#sqrt", 
            "text": "fun box sqrt()\n: F32 val", 
            "title": "sqrt"
        }, 
        {
            "location": "/builtin-F32/#returns_37", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#sqrt_unsafe", 
            "text": "Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F32 val", 
            "title": "sqrt_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_38", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#cbrt", 
            "text": "fun box cbrt()\n: F32 val", 
            "title": "cbrt"
        }, 
        {
            "location": "/builtin-F32/#returns_39", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#exp", 
            "text": "fun box exp()\n: F32 val", 
            "title": "exp"
        }, 
        {
            "location": "/builtin-F32/#returns_40", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#exp2", 
            "text": "fun box exp2()\n: F32 val", 
            "title": "exp2"
        }, 
        {
            "location": "/builtin-F32/#returns_41", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#cos", 
            "text": "fun box cos()\n: F32 val", 
            "title": "cos"
        }, 
        {
            "location": "/builtin-F32/#returns_42", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#sin", 
            "text": "fun box sin()\n: F32 val", 
            "title": "sin"
        }, 
        {
            "location": "/builtin-F32/#returns_43", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#tan", 
            "text": "fun box tan()\n: F32 val", 
            "title": "tan"
        }, 
        {
            "location": "/builtin-F32/#returns_44", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#cosh", 
            "text": "fun box cosh()\n: F32 val", 
            "title": "cosh"
        }, 
        {
            "location": "/builtin-F32/#returns_45", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#sinh", 
            "text": "fun box sinh()\n: F32 val", 
            "title": "sinh"
        }, 
        {
            "location": "/builtin-F32/#returns_46", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#tanh", 
            "text": "fun box tanh()\n: F32 val", 
            "title": "tanh"
        }, 
        {
            "location": "/builtin-F32/#returns_47", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#acos", 
            "text": "fun box acos()\n: F32 val", 
            "title": "acos"
        }, 
        {
            "location": "/builtin-F32/#returns_48", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#asin", 
            "text": "fun box asin()\n: F32 val", 
            "title": "asin"
        }, 
        {
            "location": "/builtin-F32/#returns_49", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#atan", 
            "text": "fun box atan()\n: F32 val", 
            "title": "atan"
        }, 
        {
            "location": "/builtin-F32/#returns_50", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#atan2", 
            "text": "fun box atan2(\n  y: F32 val)\n: F32 val", 
            "title": "atan2"
        }, 
        {
            "location": "/builtin-F32/#parameters_9", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_51", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#acosh", 
            "text": "fun box acosh()\n: F32 val", 
            "title": "acosh"
        }, 
        {
            "location": "/builtin-F32/#returns_52", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#asinh", 
            "text": "fun box asinh()\n: F32 val", 
            "title": "asinh"
        }, 
        {
            "location": "/builtin-F32/#returns_53", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#atanh", 
            "text": "fun box atanh()\n: F32 val", 
            "title": "atanh"
        }, 
        {
            "location": "/builtin-F32/#returns_54", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#copysign", 
            "text": "fun box copysign(\n  sign: F32 val)\n: F32 val", 
            "title": "copysign"
        }, 
        {
            "location": "/builtin-F32/#parameters_10", 
            "text": "sign:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_55", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-F32/#returns_56", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-F32/#returns_57", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-F32/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i128_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_59", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u128_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_60", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: F32 val)\n: F32 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_11", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_61", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: F32 val)\n: F32 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_12", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_62", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: F32 val)\n: F32 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_13", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_63", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: F32 val)\n: F32 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_14", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_64", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: F32 val)\n: (F32 val , F32 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_15", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_65", 
            "text": "( F32  val ,  F32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: F32 val)\n: F32 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_16", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_66", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: F32 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_67", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#eq_unsafe", 
            "text": "fun box eq_unsafe(\n  y: F32 val)\n: Bool val", 
            "title": "eq_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_17", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_68", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ne_unsafe", 
            "text": "fun box ne_unsafe(\n  y: F32 val)\n: Bool val", 
            "title": "ne_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_18", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_69", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#lt_unsafe", 
            "text": "fun box lt_unsafe(\n  y: F32 val)\n: Bool val", 
            "title": "lt_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_19", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_70", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#le_unsafe", 
            "text": "fun box le_unsafe(\n  y: F32 val)\n: Bool val", 
            "title": "le_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_20", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_71", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ge_unsafe", 
            "text": "fun box ge_unsafe(\n  y: F32 val)\n: Bool val", 
            "title": "ge_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_21", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_72", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#gt_unsafe", 
            "text": "fun box gt_unsafe(\n  y: F32 val)\n: Bool val", 
            "title": "gt_unsafe"
        }, 
        {
            "location": "/builtin-F32/#parameters_22", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_73", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-F32/#returns_74", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#add", 
            "text": "fun box add(\n  y: F32 val)\n: F32 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-F32/#parameters_23", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_75", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#sub", 
            "text": "fun box sub(\n  y: F32 val)\n: F32 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-F32/#parameters_24", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_76", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#mul", 
            "text": "fun box mul(\n  y: F32 val)\n: F32 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-F32/#parameters_25", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_77", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#div", 
            "text": "fun box div(\n  y: F32 val)\n: F32 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-F32/#parameters_26", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_78", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#divmod", 
            "text": "fun box divmod(\n  y: F32 val)\n: (F32 val , F32 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-F32/#parameters_27", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_79", 
            "text": "( F32  val ,  F32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#mod", 
            "text": "fun box mod(\n  y: F32 val)\n: F32 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-F32/#parameters_28", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_80", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#neg", 
            "text": "fun box neg()\n: F32 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-F32/#returns_81", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#eq", 
            "text": "fun box eq(\n  y: F32 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-F32/#parameters_29", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_82", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ne", 
            "text": "fun box ne(\n  y: F32 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-F32/#parameters_30", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_83", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#lt", 
            "text": "fun box lt(\n  y: F32 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-F32/#parameters_31", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_84", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#le", 
            "text": "fun box le(\n  y: F32 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-F32/#parameters_32", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_85", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ge", 
            "text": "fun box ge(\n  y: F32 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-F32/#parameters_33", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_86", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#gt", 
            "text": "fun box gt(\n  y: F32 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-F32/#parameters_34", 
            "text": "y:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_87", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-F32/#returns_88", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-F32/#returns_89", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-F32/#returns_90", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-F32/#returns_91", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-F32/#returns_92", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-F32/#returns_93", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-F32/#returns_94", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-F32/#returns_95", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-F32/#returns_96", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-F32/#returns_97", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-F32/#returns_98", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-F32/#returns_99", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#f32_1", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-F32/#returns_100", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#f64", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-F32/#returns_101", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_102", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_103", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_104", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_105", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_106", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_107", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_108", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_109", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_110", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_111", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_112", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_113", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_114", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-F32/#returns_115", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#compare", 
            "text": "fun box compare(\n  that: F32 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-F32/#parameters_35", 
            "text": "that:  F32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F32/#returns_116", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F32/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-F32/#_value", 
            "text": "fun box _value()\n: F32 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-F32/#returns_117", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/", 
            "text": "F64\n\n\nprimitive val F64 is\n  FloatingPoint[F64 val] val\n\n\n\n\nImplements\n\n\n\n\nFloatingPoint\n[\nF64\n val] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  value: F64 val = seq)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\nvalue: \nF64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\npi\n\n\nnew val pi()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\ne\n\n\nnew val e()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\n_nan\n\n\nnew val _nan()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\n_inf\n\n\nnew val _inf(\n  negative: Bool val)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\nnegative: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom_bits\n\n\nnew val from_bits(\n  i: U64 val)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\ni: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nfrom[B: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val) \n \nReal\n[B] val)]\n\n\nnew val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val) \n Real[B] val)](\n  a: B)\n: F64 val^\n\n\n\n\nParameters\n\n\n\n\na: B\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_value\n\n\nMinimum negative value representable.\n\n\nnew val min_value()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmax_value\n\n\nMaximum positive value representable.\n\n\nnew val max_value()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nmin_normalised\n\n\nMinimum positive value representable at full precision (ie a normalised\nnumber).\n\n\nnew val min_normalised()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nepsilon\n\n\nMinimum positive value such that (1 + epsilon) != 1.\n\n\nnew val epsilon()\n: F64 val^\n\n\n\n\nReturns\n\n\n\n\nF64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nbits\n\n\nfun box bits()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nradix\n\n\nExponent radix.\n\n\nfun tag radix()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision2\n\n\nMantissa precision in bits.\n\n\nfun tag precision2()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nprecision10\n\n\nMantissa precision in decimal digits.\n\n\nfun tag precision10()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nmin_exp2\n\n\nMinimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmin_exp10\n\n\nMinimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).\n\n\nfun tag min_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp2\n\n\nMaximum exponent value such that (2^exponent) - 1 is representable.\n\n\nfun tag max_exp2()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nmax_exp10\n\n\nMaximum exponent value such that (10^exponent) - 1 is representable.\n\n\nfun tag max_exp10()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\nabs\n\n\nfun box abs()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nceil\n\n\nfun box ceil()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfloor\n\n\nfun box floor()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nround\n\n\nfun box round()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntrunc\n\n\nfun box trunc()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmin\n\n\nfun box min(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmax\n\n\nfun box max(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfinite\n\n\nCheck whether this number is finite, ie not +/-infinity and not NaN.\n\n\nfun box finite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfinite\n\n\nCheck whether this number is +/-infinity\n\n\nfun box infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnan\n\n\nCheck whether this number is NaN.\n\n\nfun box nan()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nldexp\n\n\nfun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nF64\n val\n\n\nexponent: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nfrexp\n\n\nfun box frexp()\n: (F64 val , U32 val)\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val , \nU32\n val)\n\n\n\n\n\n\nlog\n\n\nfun box log()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog2\n\n\nfun box log2()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlog10\n\n\nfun box log10()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nlogb\n\n\nfun box logb()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\npow\n\n\nfun box pow(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\npowi\n\n\nfun box powi(\n  y: I32 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt\n\n\nfun box sqrt()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsqrt_unsafe\n\n\nUnsafe operation.\nIf this is negative, the result is undefined.\n\n\nfun box sqrt_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncbrt\n\n\nfun box cbrt()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp\n\n\nfun box exp()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nexp2\n\n\nfun box exp2()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncos\n\n\nfun box cos()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsin\n\n\nfun box sin()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntan\n\n\nfun box tan()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncosh\n\n\nfun box cosh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsinh\n\n\nfun box sinh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ntanh\n\n\nfun box tanh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacos\n\n\nfun box acos()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasin\n\n\nfun box asin()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan\n\n\nfun box atan()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\natan2\n\n\nfun box atan2(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nacosh\n\n\nfun box acosh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nasinh\n\n\nfun box asinh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\natanh\n\n\nfun box atanh()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncopysign\n\n\nfun box copysign(\n  sign: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\nsign: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ni128\n\n\nfun box i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128\n\n\nfun box u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\ni128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box i128_unsafe()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nu128_unsafe\n\n\nUnsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.\n\n\nfun box u128_unsafe()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nadd_unsafe\n\n\nfun box add_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub_unsafe\n\n\nfun box sub_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul_unsafe\n\n\nfun box mul_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv_unsafe\n\n\nfun box div_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod_unsafe\n\n\nfun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod_unsafe\n\n\nfun box mod_unsafe(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg_unsafe\n\n\nfun box neg_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq_unsafe\n\n\nfun box eq_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne_unsafe\n\n\nfun box ne_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt_unsafe\n\n\nfun box lt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle_unsafe\n\n\nfun box le_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge_unsafe\n\n\nfun box ge_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt_unsafe\n\n\nfun box gt_unsafe(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nadd\n\n\nfun box add(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nsub\n\n\nfun box sub(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nmul\n\n\nfun box mul(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndiv\n\n\nfun box div(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ndivmod\n\n\nfun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val , \nF64\n val)\n\n\n\n\n\n\nmod\n\n\nfun box mod(\n  y: F64 val)\n: F64 val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nneg\n\n\nfun box neg()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nfun box lt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  y: F64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ni8\n\n\nfun box i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun box i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun box i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong\n\n\nfun box ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun box isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8\n\n\nfun box u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun box u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun box u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun box u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong\n\n\nfun box ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun box usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32\n\n\nfun box f32()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ni8_unsafe\n\n\nfun box i8_unsafe()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16_unsafe\n\n\nfun box i16_unsafe()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32_unsafe\n\n\nfun box i32_unsafe()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64_unsafe\n\n\nfun box i64_unsafe()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nilong_unsafe\n\n\nfun box ilong_unsafe()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize_unsafe\n\n\nfun box isize_unsafe()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nu8_unsafe\n\n\nfun box u8_unsafe()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16_unsafe\n\n\nfun box u16_unsafe()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32_unsafe\n\n\nfun box u32_unsafe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64_unsafe\n\n\nfun box u64_unsafe()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nulong_unsafe\n\n\nfun box ulong_unsafe()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize_unsafe\n\n\nfun box usize_unsafe()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nf32_unsafe\n\n\nfun box f32_unsafe()\n: F32 val\n\n\n\n\nReturns\n\n\n\n\nF32\n val\n\n\n\n\n\n\nf64_unsafe\n\n\nfun box f64_unsafe()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_value\n\n\nfun box _value()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val", 
            "title": "primitive F64"
        }, 
        {
            "location": "/builtin-F64/#f64", 
            "text": "primitive val F64 is\n  FloatingPoint[F64 val] val", 
            "title": "F64"
        }, 
        {
            "location": "/builtin-F64/#implements", 
            "text": "FloatingPoint [ F64  val] val", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-F64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-F64/#create", 
            "text": "new val create(\n  value: F64 val = seq)\n: F64 val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-F64/#parameters", 
            "text": "value:  F64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#pi", 
            "text": "new val pi()\n: F64 val^", 
            "title": "pi"
        }, 
        {
            "location": "/builtin-F64/#returns_1", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#e", 
            "text": "new val e()\n: F64 val^", 
            "title": "e"
        }, 
        {
            "location": "/builtin-F64/#returns_2", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#_nan", 
            "text": "new val _nan()\n: F64 val^", 
            "title": "_nan"
        }, 
        {
            "location": "/builtin-F64/#returns_3", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#_inf", 
            "text": "new val _inf(\n  negative: Bool val)\n: F64 val^", 
            "title": "_inf"
        }, 
        {
            "location": "/builtin-F64/#parameters_1", 
            "text": "negative:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_4", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#from_bits", 
            "text": "new val from_bits(\n  i: U64 val)\n: F64 val^", 
            "title": "from_bits"
        }, 
        {
            "location": "/builtin-F64/#parameters_2", 
            "text": "i:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_5", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#from91b-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val-real91b93-val93", 
            "text": "new val from[B: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val)   Real[B] val)](\n  a: B)\n: F64 val^", 
            "title": "from[B: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val) &amp; Real[B] val)]"
        }, 
        {
            "location": "/builtin-F64/#parameters_3", 
            "text": "a: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_6", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#min_value", 
            "text": "Minimum negative value representable.  new val min_value()\n: F64 val^", 
            "title": "min_value"
        }, 
        {
            "location": "/builtin-F64/#returns_7", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#max_value", 
            "text": "Maximum positive value representable.  new val max_value()\n: F64 val^", 
            "title": "max_value"
        }, 
        {
            "location": "/builtin-F64/#returns_8", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#min_normalised", 
            "text": "Minimum positive value representable at full precision (ie a normalised\nnumber).  new val min_normalised()\n: F64 val^", 
            "title": "min_normalised"
        }, 
        {
            "location": "/builtin-F64/#returns_9", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#epsilon", 
            "text": "Minimum positive value such that (1 + epsilon) != 1.  new val epsilon()\n: F64 val^", 
            "title": "epsilon"
        }, 
        {
            "location": "/builtin-F64/#returns_10", 
            "text": "F64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-F64/#bits", 
            "text": "fun box bits()\n: U64 val", 
            "title": "bits"
        }, 
        {
            "location": "/builtin-F64/#returns_11", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#radix", 
            "text": "Exponent radix.  fun tag radix()\n: U8 val", 
            "title": "radix"
        }, 
        {
            "location": "/builtin-F64/#returns_12", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#precision2", 
            "text": "Mantissa precision in bits.  fun tag precision2()\n: U8 val", 
            "title": "precision2"
        }, 
        {
            "location": "/builtin-F64/#returns_13", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#precision10", 
            "text": "Mantissa precision in decimal digits.  fun tag precision10()\n: U8 val", 
            "title": "precision10"
        }, 
        {
            "location": "/builtin-F64/#returns_14", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#min_exp2", 
            "text": "Minimum exponent value such that (2^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp2()\n: I16 val", 
            "title": "min_exp2"
        }, 
        {
            "location": "/builtin-F64/#returns_15", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#min_exp10", 
            "text": "Minimum exponent value such that (10^exponent) - 1 is representable at full\nprecision (ie a normalised number).  fun tag min_exp10()\n: I16 val", 
            "title": "min_exp10"
        }, 
        {
            "location": "/builtin-F64/#returns_16", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#max_exp2", 
            "text": "Maximum exponent value such that (2^exponent) - 1 is representable.  fun tag max_exp2()\n: I16 val", 
            "title": "max_exp2"
        }, 
        {
            "location": "/builtin-F64/#returns_17", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#max_exp10", 
            "text": "Maximum exponent value such that (10^exponent) - 1 is representable.  fun tag max_exp10()\n: I16 val", 
            "title": "max_exp10"
        }, 
        {
            "location": "/builtin-F64/#returns_18", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#abs", 
            "text": "fun box abs()\n: F64 val", 
            "title": "abs"
        }, 
        {
            "location": "/builtin-F64/#returns_19", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ceil", 
            "text": "fun box ceil()\n: F64 val", 
            "title": "ceil"
        }, 
        {
            "location": "/builtin-F64/#returns_20", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#floor", 
            "text": "fun box floor()\n: F64 val", 
            "title": "floor"
        }, 
        {
            "location": "/builtin-F64/#returns_21", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#round", 
            "text": "fun box round()\n: F64 val", 
            "title": "round"
        }, 
        {
            "location": "/builtin-F64/#returns_22", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#trunc", 
            "text": "fun box trunc()\n: F64 val", 
            "title": "trunc"
        }, 
        {
            "location": "/builtin-F64/#returns_23", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#min", 
            "text": "fun box min(\n  y: F64 val)\n: F64 val", 
            "title": "min"
        }, 
        {
            "location": "/builtin-F64/#parameters_4", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_24", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#max", 
            "text": "fun box max(\n  y: F64 val)\n: F64 val", 
            "title": "max"
        }, 
        {
            "location": "/builtin-F64/#parameters_5", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_25", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#finite", 
            "text": "Check whether this number is finite, ie not +/-infinity and not NaN.  fun box finite()\n: Bool val", 
            "title": "finite"
        }, 
        {
            "location": "/builtin-F64/#returns_26", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#infinite", 
            "text": "Check whether this number is +/-infinity  fun box infinite()\n: Bool val", 
            "title": "infinite"
        }, 
        {
            "location": "/builtin-F64/#returns_27", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#nan", 
            "text": "Check whether this number is NaN.  fun box nan()\n: Bool val", 
            "title": "nan"
        }, 
        {
            "location": "/builtin-F64/#returns_28", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ldexp", 
            "text": "fun box ldexp(\n  x: F64 val,\n  exponent: I32 val)\n: F64 val", 
            "title": "ldexp"
        }, 
        {
            "location": "/builtin-F64/#parameters_6", 
            "text": "x:  F64  val  exponent:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_29", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#frexp", 
            "text": "fun box frexp()\n: (F64 val , U32 val)", 
            "title": "frexp"
        }, 
        {
            "location": "/builtin-F64/#returns_30", 
            "text": "( F64  val ,  U32  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#log", 
            "text": "fun box log()\n: F64 val", 
            "title": "log"
        }, 
        {
            "location": "/builtin-F64/#returns_31", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#log2", 
            "text": "fun box log2()\n: F64 val", 
            "title": "log2"
        }, 
        {
            "location": "/builtin-F64/#returns_32", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#log10", 
            "text": "fun box log10()\n: F64 val", 
            "title": "log10"
        }, 
        {
            "location": "/builtin-F64/#returns_33", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#logb", 
            "text": "fun box logb()\n: F64 val", 
            "title": "logb"
        }, 
        {
            "location": "/builtin-F64/#returns_34", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#pow", 
            "text": "fun box pow(\n  y: F64 val)\n: F64 val", 
            "title": "pow"
        }, 
        {
            "location": "/builtin-F64/#parameters_7", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_35", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#powi", 
            "text": "fun box powi(\n  y: I32 val)\n: F64 val", 
            "title": "powi"
        }, 
        {
            "location": "/builtin-F64/#parameters_8", 
            "text": "y:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_36", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#sqrt", 
            "text": "fun box sqrt()\n: F64 val", 
            "title": "sqrt"
        }, 
        {
            "location": "/builtin-F64/#returns_37", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#sqrt_unsafe", 
            "text": "Unsafe operation.\nIf this is negative, the result is undefined.  fun box sqrt_unsafe()\n: F64 val", 
            "title": "sqrt_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_38", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#cbrt", 
            "text": "fun box cbrt()\n: F64 val", 
            "title": "cbrt"
        }, 
        {
            "location": "/builtin-F64/#returns_39", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#exp", 
            "text": "fun box exp()\n: F64 val", 
            "title": "exp"
        }, 
        {
            "location": "/builtin-F64/#returns_40", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#exp2", 
            "text": "fun box exp2()\n: F64 val", 
            "title": "exp2"
        }, 
        {
            "location": "/builtin-F64/#returns_41", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#cos", 
            "text": "fun box cos()\n: F64 val", 
            "title": "cos"
        }, 
        {
            "location": "/builtin-F64/#returns_42", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#sin", 
            "text": "fun box sin()\n: F64 val", 
            "title": "sin"
        }, 
        {
            "location": "/builtin-F64/#returns_43", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#tan", 
            "text": "fun box tan()\n: F64 val", 
            "title": "tan"
        }, 
        {
            "location": "/builtin-F64/#returns_44", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#cosh", 
            "text": "fun box cosh()\n: F64 val", 
            "title": "cosh"
        }, 
        {
            "location": "/builtin-F64/#returns_45", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#sinh", 
            "text": "fun box sinh()\n: F64 val", 
            "title": "sinh"
        }, 
        {
            "location": "/builtin-F64/#returns_46", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#tanh", 
            "text": "fun box tanh()\n: F64 val", 
            "title": "tanh"
        }, 
        {
            "location": "/builtin-F64/#returns_47", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#acos", 
            "text": "fun box acos()\n: F64 val", 
            "title": "acos"
        }, 
        {
            "location": "/builtin-F64/#returns_48", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#asin", 
            "text": "fun box asin()\n: F64 val", 
            "title": "asin"
        }, 
        {
            "location": "/builtin-F64/#returns_49", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#atan", 
            "text": "fun box atan()\n: F64 val", 
            "title": "atan"
        }, 
        {
            "location": "/builtin-F64/#returns_50", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#atan2", 
            "text": "fun box atan2(\n  y: F64 val)\n: F64 val", 
            "title": "atan2"
        }, 
        {
            "location": "/builtin-F64/#parameters_9", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_51", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#acosh", 
            "text": "fun box acosh()\n: F64 val", 
            "title": "acosh"
        }, 
        {
            "location": "/builtin-F64/#returns_52", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#asinh", 
            "text": "fun box asinh()\n: F64 val", 
            "title": "asinh"
        }, 
        {
            "location": "/builtin-F64/#returns_53", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#atanh", 
            "text": "fun box atanh()\n: F64 val", 
            "title": "atanh"
        }, 
        {
            "location": "/builtin-F64/#returns_54", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#copysign", 
            "text": "fun box copysign(\n  sign: F64 val)\n: F64 val", 
            "title": "copysign"
        }, 
        {
            "location": "/builtin-F64/#parameters_10", 
            "text": "sign:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_55", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/builtin-F64/#returns_56", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i128", 
            "text": "fun box i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/builtin-F64/#returns_57", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u128", 
            "text": "fun box u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/builtin-F64/#returns_58", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i128_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box i128_unsafe()\n: I128 val", 
            "title": "i128_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_59", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u128_unsafe", 
            "text": "Unsafe operation.\nIf the value doesn't fit in the destination type, the result is undefined.  fun box u128_unsafe()\n: U128 val", 
            "title": "u128_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_60", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#add_unsafe", 
            "text": "fun box add_unsafe(\n  y: F64 val)\n: F64 val", 
            "title": "add_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_11", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_61", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#sub_unsafe", 
            "text": "fun box sub_unsafe(\n  y: F64 val)\n: F64 val", 
            "title": "sub_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_12", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_62", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#mul_unsafe", 
            "text": "fun box mul_unsafe(\n  y: F64 val)\n: F64 val", 
            "title": "mul_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_13", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_63", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#div_unsafe", 
            "text": "fun box div_unsafe(\n  y: F64 val)\n: F64 val", 
            "title": "div_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_14", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_64", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#divmod_unsafe", 
            "text": "fun box divmod_unsafe(\n  y: F64 val)\n: (F64 val , F64 val)", 
            "title": "divmod_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_15", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_65", 
            "text": "( F64  val ,  F64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#mod_unsafe", 
            "text": "fun box mod_unsafe(\n  y: F64 val)\n: F64 val", 
            "title": "mod_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_16", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_66", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#neg_unsafe", 
            "text": "fun box neg_unsafe()\n: F64 val", 
            "title": "neg_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_67", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#eq_unsafe", 
            "text": "fun box eq_unsafe(\n  y: F64 val)\n: Bool val", 
            "title": "eq_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_17", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_68", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ne_unsafe", 
            "text": "fun box ne_unsafe(\n  y: F64 val)\n: Bool val", 
            "title": "ne_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_18", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_69", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#lt_unsafe", 
            "text": "fun box lt_unsafe(\n  y: F64 val)\n: Bool val", 
            "title": "lt_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_19", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_70", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#le_unsafe", 
            "text": "fun box le_unsafe(\n  y: F64 val)\n: Bool val", 
            "title": "le_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_20", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_71", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ge_unsafe", 
            "text": "fun box ge_unsafe(\n  y: F64 val)\n: Bool val", 
            "title": "ge_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_21", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_72", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#gt_unsafe", 
            "text": "fun box gt_unsafe(\n  y: F64 val)\n: Bool val", 
            "title": "gt_unsafe"
        }, 
        {
            "location": "/builtin-F64/#parameters_22", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_73", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-F64/#returns_74", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#add", 
            "text": "fun box add(\n  y: F64 val)\n: F64 val", 
            "title": "add"
        }, 
        {
            "location": "/builtin-F64/#parameters_23", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_75", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#sub", 
            "text": "fun box sub(\n  y: F64 val)\n: F64 val", 
            "title": "sub"
        }, 
        {
            "location": "/builtin-F64/#parameters_24", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_76", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#mul", 
            "text": "fun box mul(\n  y: F64 val)\n: F64 val", 
            "title": "mul"
        }, 
        {
            "location": "/builtin-F64/#parameters_25", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_77", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#div", 
            "text": "fun box div(\n  y: F64 val)\n: F64 val", 
            "title": "div"
        }, 
        {
            "location": "/builtin-F64/#parameters_26", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_78", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#divmod", 
            "text": "fun box divmod(\n  y: F64 val)\n: (F64 val , F64 val)", 
            "title": "divmod"
        }, 
        {
            "location": "/builtin-F64/#parameters_27", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_79", 
            "text": "( F64  val ,  F64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#mod", 
            "text": "fun box mod(\n  y: F64 val)\n: F64 val", 
            "title": "mod"
        }, 
        {
            "location": "/builtin-F64/#parameters_28", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_80", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#neg", 
            "text": "fun box neg()\n: F64 val", 
            "title": "neg"
        }, 
        {
            "location": "/builtin-F64/#returns_81", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#eq", 
            "text": "fun box eq(\n  y: F64 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-F64/#parameters_29", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_82", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ne", 
            "text": "fun box ne(\n  y: F64 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-F64/#parameters_30", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_83", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#lt", 
            "text": "fun box lt(\n  y: F64 val)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-F64/#parameters_31", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_84", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#le", 
            "text": "fun box le(\n  y: F64 val)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-F64/#parameters_32", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_85", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ge", 
            "text": "fun box ge(\n  y: F64 val)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-F64/#parameters_33", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_86", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#gt", 
            "text": "fun box gt(\n  y: F64 val)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-F64/#parameters_34", 
            "text": "y:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_87", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i8", 
            "text": "fun box i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/builtin-F64/#returns_88", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i16", 
            "text": "fun box i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/builtin-F64/#returns_89", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i32", 
            "text": "fun box i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/builtin-F64/#returns_90", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i64", 
            "text": "fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/builtin-F64/#returns_91", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ilong", 
            "text": "fun box ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/builtin-F64/#returns_92", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#isize", 
            "text": "fun box isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/builtin-F64/#returns_93", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u8", 
            "text": "fun box u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/builtin-F64/#returns_94", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u16", 
            "text": "fun box u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/builtin-F64/#returns_95", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u32", 
            "text": "fun box u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/builtin-F64/#returns_96", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u64", 
            "text": "fun box u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/builtin-F64/#returns_97", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ulong", 
            "text": "fun box ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/builtin-F64/#returns_98", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#usize", 
            "text": "fun box usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/builtin-F64/#returns_99", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#f32", 
            "text": "fun box f32()\n: F32 val", 
            "title": "f32"
        }, 
        {
            "location": "/builtin-F64/#returns_100", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#f64_1", 
            "text": "fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/builtin-F64/#returns_101", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i8_unsafe", 
            "text": "fun box i8_unsafe()\n: I8 val", 
            "title": "i8_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_102", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i16_unsafe", 
            "text": "fun box i16_unsafe()\n: I16 val", 
            "title": "i16_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_103", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i32_unsafe", 
            "text": "fun box i32_unsafe()\n: I32 val", 
            "title": "i32_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_104", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#i64_unsafe", 
            "text": "fun box i64_unsafe()\n: I64 val", 
            "title": "i64_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_105", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ilong_unsafe", 
            "text": "fun box ilong_unsafe()\n: ILong val", 
            "title": "ilong_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_106", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#isize_unsafe", 
            "text": "fun box isize_unsafe()\n: ISize val", 
            "title": "isize_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_107", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u8_unsafe", 
            "text": "fun box u8_unsafe()\n: U8 val", 
            "title": "u8_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_108", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u16_unsafe", 
            "text": "fun box u16_unsafe()\n: U16 val", 
            "title": "u16_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_109", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u32_unsafe", 
            "text": "fun box u32_unsafe()\n: U32 val", 
            "title": "u32_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_110", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#u64_unsafe", 
            "text": "fun box u64_unsafe()\n: U64 val", 
            "title": "u64_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_111", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#ulong_unsafe", 
            "text": "fun box ulong_unsafe()\n: ULong val", 
            "title": "ulong_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_112", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#usize_unsafe", 
            "text": "fun box usize_unsafe()\n: USize val", 
            "title": "usize_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_113", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#f32_unsafe", 
            "text": "fun box f32_unsafe()\n: F32 val", 
            "title": "f32_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_114", 
            "text": "F32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#f64_unsafe", 
            "text": "fun box f64_unsafe()\n: F64 val", 
            "title": "f64_unsafe"
        }, 
        {
            "location": "/builtin-F64/#returns_115", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#compare", 
            "text": "fun box compare(\n  that: F64 val)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-F64/#parameters_35", 
            "text": "that:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-F64/#returns_116", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-F64/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-F64/#_value", 
            "text": "fun box _value()\n: F64 val", 
            "title": "_value"
        }, 
        {
            "location": "/builtin-F64/#returns_117", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Float/", 
            "text": "Float\n\n\ntype Float is\n  (F32 val | F64 val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nF32\n val | \nF64\n val)", 
            "title": "type Float"
        }, 
        {
            "location": "/builtin-Float/#float", 
            "text": "type Float is\n  (F32 val | F64 val)", 
            "title": "Float"
        }, 
        {
            "location": "/builtin-Float/#type-alias-for", 
            "text": "( F32  val |  F64  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-Env/", 
            "text": "Env\n\n\nAn environment holds the command line and other values injected into the\nprogram by default by the runtime.\n\n\nclass val Env\n\n\n\n\nConstructors\n\n\n_create\n\n\nBuilds an environment from the command line. This is done before the Main\nactor is created.\n\n\nnew ref _create(\n  argc: U32 val,\n  argv: Pointer[Pointer[U8 val] ref] val,\n  envp: Pointer[Pointer[U8 val] ref] val)\n: Env ref^\n\n\n\n\nParameters\n\n\n\n\nargc: \nU32\n val\n\n\nargv: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\nenvp: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\n\n\nReturns\n\n\n\n\nEnv\n ref^\n\n\n\n\n\n\ncreate\n\n\nBuild an artificial environment. A root capability may be supplied.\n\n\nnew ref create(\n  root': (AmbientAuth val | None val),\n  input': Stdin tag,\n  out': StdStream tag,\n  err': StdStream tag,\n  args': Array[String val] val,\n  vars': (Array[String val] val | None val))\n: Env ref^\n\n\n\n\nParameters\n\n\n\n\nroot': (\nAmbientAuth\n val | \nNone\n val)\n\n\ninput': \nStdin\n tag\n\n\nout': \nStdStream\n tag\n\n\nerr': \nStdStream\n tag\n\n\nargs': \nArray\n[\nString\n val] val\n\n\nvars': (\nArray\n[\nString\n val] val | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nEnv\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet root: (\nAmbientAuth\n val | \nNone\n val)\n\n\n\n\n\n\n\n\nlet input: \nStdin\n tag\n\n\n\n\n\n\n\n\nlet out: \nStdStream\n tag\n\n\n\n\n\n\n\n\nlet err: \nStdStream\n tag\n\n\n\n\n\n\n\n\nlet args: \nArray\n[\nString\n val] val\n\n\n\n\n\n\nPublic Functions\n\n\nvars\n\n\nReturn the environment variables as an array of strings of the form\n\"key=value\".\n\n\nfun box vars()\n: Array[String val] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] val\n\n\n\n\n\n\nexitcode\n\n\nSets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.\n\n\nfun tag exitcode(\n  code: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ncode: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_count_strings\n\n\nfun tag _count_strings(\n  data: Pointer[Pointer[U8 val] ref] val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\ndata: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_strings_from_pointers\n\n\nfun tag _strings_from_pointers(\n  data: Pointer[Pointer[U8 val] ref] val,\n  len: USize val)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nPointer\n[\nPointer\n[\nU8\n val] ref] val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^", 
            "title": "class Env"
        }, 
        {
            "location": "/builtin-Env/#env", 
            "text": "An environment holds the command line and other values injected into the\nprogram by default by the runtime.  class val Env", 
            "title": "Env"
        }, 
        {
            "location": "/builtin-Env/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Env/#_create", 
            "text": "Builds an environment from the command line. This is done before the Main\nactor is created.  new ref _create(\n  argc: U32 val,\n  argv: Pointer[Pointer[U8 val] ref] val,\n  envp: Pointer[Pointer[U8 val] ref] val)\n: Env ref^", 
            "title": "_create"
        }, 
        {
            "location": "/builtin-Env/#parameters", 
            "text": "argc:  U32  val  argv:  Pointer [ Pointer [ U8  val] ref] val  envp:  Pointer [ Pointer [ U8  val] ref] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Env/#returns", 
            "text": "Env  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Env/#create", 
            "text": "Build an artificial environment. A root capability may be supplied.  new ref create(\n  root': (AmbientAuth val | None val),\n  input': Stdin tag,\n  out': StdStream tag,\n  err': StdStream tag,\n  args': Array[String val] val,\n  vars': (Array[String val] val | None val))\n: Env ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Env/#parameters_1", 
            "text": "root': ( AmbientAuth  val |  None  val)  input':  Stdin  tag  out':  StdStream  tag  err':  StdStream  tag  args':  Array [ String  val] val  vars': ( Array [ String  val] val |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Env/#returns_1", 
            "text": "Env  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Env/#public-fields", 
            "text": "let root: ( AmbientAuth  val |  None  val)     let input:  Stdin  tag     let out:  StdStream  tag     let err:  StdStream  tag     let args:  Array [ String  val] val", 
            "title": "Public fields"
        }, 
        {
            "location": "/builtin-Env/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Env/#vars", 
            "text": "Return the environment variables as an array of strings of the form\n\"key=value\".  fun box vars()\n: Array[String val] val", 
            "title": "vars"
        }, 
        {
            "location": "/builtin-Env/#returns_2", 
            "text": "Array [ String  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Env/#exitcode", 
            "text": "Sets the application exit code. If this is called more than once, the last\nvalue set will be the exit code. The exit code defaults to 0.  fun tag exitcode(\n  code: I32 val)\n: None val", 
            "title": "exitcode"
        }, 
        {
            "location": "/builtin-Env/#parameters_2", 
            "text": "code:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Env/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Env/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Env/#_count_strings", 
            "text": "fun tag _count_strings(\n  data: Pointer[Pointer[U8 val] ref] val)\n: USize val", 
            "title": "_count_strings"
        }, 
        {
            "location": "/builtin-Env/#parameters_3", 
            "text": "data:  Pointer [ Pointer [ U8  val] ref] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Env/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Env/#_strings_from_pointers", 
            "text": "fun tag _strings_from_pointers(\n  data: Pointer[Pointer[U8 val] ref] val,\n  len: USize val)\n: Array[String val] iso^", 
            "title": "_strings_from_pointers"
        }, 
        {
            "location": "/builtin-Env/#parameters_4", 
            "text": "data:  Pointer [ Pointer [ U8  val] ref] val  len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Env/#returns_5", 
            "text": "Array [ String  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-DoNotOptimise/", 
            "text": "DoNotOptimise\n\n\nContains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.\n\n\nprimitive val DoNotOptimise\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DoNotOptimise val^\n\n\n\n\nReturns\n\n\n\n\nDoNotOptimise\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply[A: A]\n\n\nPrevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.\n\n\nfun box apply[A: A](\n  obj: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nobj: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nobserve\n\n\nPrevent the compiler from optimising out writes to an object marked by\nthe apply function.\n\n\nfun box observe()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DoNotOptimise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDoNotOptimise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DoNotOptimise"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#donotoptimise", 
            "text": "Contains functions preventing some compiler optimisations, namely dead code\nremoval. This is useful for benchmarking purposes.  primitive val DoNotOptimise", 
            "title": "DoNotOptimise"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#create", 
            "text": "new val create()\n: DoNotOptimise val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#returns", 
            "text": "DoNotOptimise  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#apply91a-a93", 
            "text": "Prevent the compiler from optimising out obj and any computation it is\nderived from. This doesn't prevent constant propagation.  fun box apply[A: A](\n  obj: A)\n: None val", 
            "title": "apply[A: A]"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#parameters", 
            "text": "obj: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#observe", 
            "text": "Prevent the compiler from optimising out writes to an object marked by\nthe apply function.  fun box observe()\n: None val", 
            "title": "observe"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#eq", 
            "text": "fun box eq(\n  that: DoNotOptimise val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#parameters_1", 
            "text": "that:  DoNotOptimise  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#ne", 
            "text": "fun box ne(\n  that: DoNotOptimise val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#parameters_2", 
            "text": "that:  DoNotOptimise  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-DoNotOptimise/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Less/", 
            "text": "Less\n\n\nprimitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Less val^\n\n\n\n\nReturns\n\n\n\n\nLess\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Less"
        }, 
        {
            "location": "/builtin-Less/#less", 
            "text": "primitive val Less is\n  Equatable[(Less val | Equal val | Greater val)] ref", 
            "title": "Less"
        }, 
        {
            "location": "/builtin-Less/#implements", 
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Less/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Less/#create", 
            "text": "new val create()\n: Less val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Less/#returns", 
            "text": "Less  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Less/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Less/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Less/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Less/#eq", 
            "text": "fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Less/#parameters", 
            "text": "that: ( Less  val |  Equal  val |  Greater  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Less/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Less/#ne", 
            "text": "fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Less/#parameters_1", 
            "text": "that: ( Less  val |  Equal  val |  Greater  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Less/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Equal/", 
            "text": "Equal\n\n\nprimitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Equal val^\n\n\n\n\nReturns\n\n\n\n\nEqual\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Equal"
        }, 
        {
            "location": "/builtin-Equal/#equal", 
            "text": "primitive val Equal is\n  Equatable[(Less val | Equal val | Greater val)] ref", 
            "title": "Equal"
        }, 
        {
            "location": "/builtin-Equal/#implements", 
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Equal/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Equal/#create", 
            "text": "new val create()\n: Equal val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Equal/#returns", 
            "text": "Equal  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Equal/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Equal/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Equal/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Equal/#eq", 
            "text": "fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Equal/#parameters", 
            "text": "that: ( Less  val |  Equal  val |  Greater  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Equal/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Equal/#ne", 
            "text": "fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Equal/#parameters_1", 
            "text": "that: ( Less  val |  Equal  val |  Greater  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Equal/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Greater/", 
            "text": "Greater\n\n\nprimitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[(\nLess\n val | \nEqual\n val | \nGreater\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Greater val^\n\n\n\n\nReturns\n\n\n\n\nGreater\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Greater"
        }, 
        {
            "location": "/builtin-Greater/#greater", 
            "text": "primitive val Greater is\n  Equatable[(Less val | Equal val | Greater val)] ref", 
            "title": "Greater"
        }, 
        {
            "location": "/builtin-Greater/#implements", 
            "text": "Equatable [( Less  val |  Equal  val |  Greater  val)] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Greater/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Greater/#create", 
            "text": "new val create()\n: Greater val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Greater/#returns", 
            "text": "Greater  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Greater/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Greater/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Greater/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Greater/#eq", 
            "text": "fun box eq(\n  that: (Less val | Equal val | Greater val))\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Greater/#parameters", 
            "text": "that: ( Less  val |  Equal  val |  Greater  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Greater/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Greater/#ne", 
            "text": "fun box ne(\n  that: (Less val | Equal val | Greater val))\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Greater/#parameters_1", 
            "text": "that: ( Less  val |  Equal  val |  Greater  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Greater/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Compare/", 
            "text": "Compare\n\n\ntype Compare is\n  (Less val | Equal val | Greater val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)", 
            "title": "type Compare"
        }, 
        {
            "location": "/builtin-Compare/#compare", 
            "text": "type Compare is\n  (Less val | Equal val | Greater val)", 
            "title": "Compare"
        }, 
        {
            "location": "/builtin-Compare/#type-alias-for", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-HasEq/", 
            "text": "HasEq[A: A]\n\n\ninterface ref HasEq[A: A]\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "interface HasEq"
        }, 
        {
            "location": "/builtin-HasEq/#haseq91a-a93", 
            "text": "interface ref HasEq[A: A]", 
            "title": "HasEq[A: A]"
        }, 
        {
            "location": "/builtin-HasEq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-HasEq/#eq", 
            "text": "fun box eq(\n  that: box- A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-HasEq/#parameters", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-HasEq/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Equatable/", 
            "text": "Equatable[A: \nEquatable\n[A] #read]\n\n\ninterface ref Equatable[A: Equatable[A] #read]\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "interface Equatable"
        }, 
        {
            "location": "/builtin-Equatable/#equatable91a-equatable91a93-read93", 
            "text": "interface ref Equatable[A: Equatable[A] #read]", 
            "title": "Equatable[A: Equatable[A] #read]"
        }, 
        {
            "location": "/builtin-Equatable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Equatable/#eq", 
            "text": "fun box eq(\n  that: box- A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Equatable/#parameters", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Equatable/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Equatable/#ne", 
            "text": "fun box ne(\n  that: box- A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Equatable/#parameters_1", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Equatable/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/", 
            "text": "Comparable[A: \nComparable\n[A] #read]\n\n\ninterface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[A] ref\n\n\n\n\n\n\nPublic Functions\n\n\nlt\n\n\nfun box lt(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nfun box le(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nfun box ge(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nfun box gt(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: box-\nA)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "interface Comparable"
        }, 
        {
            "location": "/builtin-Comparable/#comparable91a-comparable91a93-read93", 
            "text": "interface ref Comparable[A: Comparable[A] #read] is\n  Equatable[A] ref", 
            "title": "Comparable[A: Comparable[A] #read]"
        }, 
        {
            "location": "/builtin-Comparable/#implements", 
            "text": "Equatable [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Comparable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Comparable/#lt", 
            "text": "fun box lt(\n  that: box- A)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/builtin-Comparable/#parameters", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/#le", 
            "text": "fun box le(\n  that: box- A)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/builtin-Comparable/#parameters_1", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/#ge", 
            "text": "fun box ge(\n  that: box- A)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/builtin-Comparable/#parameters_2", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/#gt", 
            "text": "fun box gt(\n  that: box- A)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/builtin-Comparable/#parameters_3", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/#compare", 
            "text": "fun box compare(\n  that: box- A)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/builtin-Comparable/#parameters_4", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns_4", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/#eq", 
            "text": "fun box eq(\n  that: box- A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Comparable/#parameters_5", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Comparable/#ne", 
            "text": "fun box ne(\n  that: box- A)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Comparable/#parameters_6", 
            "text": "that: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Comparable/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/", 
            "text": "Bool\n\n\nprimitive val Bool is\n  Stringable box\n\n\n\n\nImplements\n\n\n\n\nStringable\n box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: Bool val)\n: Bool val^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_and\n\n\nfun box op_and(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_or\n\n\nfun box op_or(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_xor\n\n\nfun box op_xor(\n  y: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ny: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nop_not\n\n\nfun box op_not()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^", 
            "title": "primitive Bool"
        }, 
        {
            "location": "/builtin-Bool/#bool", 
            "text": "primitive val Bool is\n  Stringable box", 
            "title": "Bool"
        }, 
        {
            "location": "/builtin-Bool/#implements", 
            "text": "Stringable  box", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Bool/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Bool/#create", 
            "text": "new val create(\n  from: Bool val)\n: Bool val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Bool/#parameters", 
            "text": "from:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Bool/#returns", 
            "text": "Bool  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Bool/#eq", 
            "text": "fun box eq(\n  y: Bool val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-Bool/#parameters_1", 
            "text": "y:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Bool/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#ne", 
            "text": "fun box ne(\n  y: Bool val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-Bool/#parameters_2", 
            "text": "y:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Bool/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#op_and", 
            "text": "fun box op_and(\n  y: Bool val)\n: Bool val", 
            "title": "op_and"
        }, 
        {
            "location": "/builtin-Bool/#parameters_3", 
            "text": "y:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Bool/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#op_or", 
            "text": "fun box op_or(\n  y: Bool val)\n: Bool val", 
            "title": "op_or"
        }, 
        {
            "location": "/builtin-Bool/#parameters_4", 
            "text": "y:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Bool/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#op_xor", 
            "text": "fun box op_xor(\n  y: Bool val)\n: Bool val", 
            "title": "op_xor"
        }, 
        {
            "location": "/builtin-Bool/#parameters_5", 
            "text": "y:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Bool/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#op_not", 
            "text": "fun box op_not()\n: Bool val", 
            "title": "op_not"
        }, 
        {
            "location": "/builtin-Bool/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Bool/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/builtin-Bool/#returns_7", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEventID/", 
            "text": "AsioEventID\n\n\ntype AsioEventID is\n  Pointer[AsioEvent val] tag\n\n\n\n\nType Alias For\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag", 
            "title": "type AsioEventID"
        }, 
        {
            "location": "/builtin-AsioEventID/#asioeventid", 
            "text": "type AsioEventID is\n  Pointer[AsioEvent val] tag", 
            "title": "AsioEventID"
        }, 
        {
            "location": "/builtin-AsioEventID/#type-alias-for", 
            "text": "Pointer [ AsioEvent  val] tag", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/builtin-AsioEventNotify/", 
            "text": "AsioEventNotify\n\n\ninterface tag AsioEventNotify\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val", 
            "title": "interface AsioEventNotify"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#asioeventnotify", 
            "text": "interface tag AsioEventNotify", 
            "title": "AsioEventNotify"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#_event_notify", 
            "text": "be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/builtin-AsioEventNotify/#parameters", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AsioEvent/", 
            "text": "AsioEvent\n\n\nFunctions for asynchronous event notification.\n\n\nprimitive val AsioEvent\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: AsioEvent val^\n\n\n\n\nReturns\n\n\n\n\nAsioEvent\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnone\n\n\nAn empty event.\n\n\nfun box none()\n: Pointer[AsioEvent val] tag\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nAsioEvent\n val] tag\n\n\n\n\n\n\nreadable\n\n\nReturns true if the flags contain the readable flag.\n\n\nfun box readable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwriteable\n\n\nReturns true if the flags contain the writeable flag.\n\n\nfun box writeable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndisposable\n\n\nReturns true if the event should be disposed of.\n\n\nfun box disposable(\n  flags: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\n\nfun box dispose()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread\n\n\nfun box read()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nwrite\n\n\nfun box write()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntimer\n\n\nfun box timer()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsignal\n\n\nfun box signal()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write\n\n\nfun box read_write()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\noneshot\n\n\nfun box oneshot()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nread_write_oneshot\n\n\nfun box read_write_oneshot()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AsioEvent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAsioEvent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive AsioEvent"
        }, 
        {
            "location": "/builtin-AsioEvent/#asioevent", 
            "text": "Functions for asynchronous event notification.  primitive val AsioEvent", 
            "title": "AsioEvent"
        }, 
        {
            "location": "/builtin-AsioEvent/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AsioEvent/#create", 
            "text": "new val create()\n: AsioEvent val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns", 
            "text": "AsioEvent  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AsioEvent/#none", 
            "text": "An empty event.  fun box none()\n: Pointer[AsioEvent val] tag", 
            "title": "none"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_1", 
            "text": "Pointer [ AsioEvent  val] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#readable", 
            "text": "Returns true if the flags contain the readable flag.  fun box readable(\n  flags: U32 val)\n: Bool val", 
            "title": "readable"
        }, 
        {
            "location": "/builtin-AsioEvent/#parameters", 
            "text": "flags:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#writeable", 
            "text": "Returns true if the flags contain the writeable flag.  fun box writeable(\n  flags: U32 val)\n: Bool val", 
            "title": "writeable"
        }, 
        {
            "location": "/builtin-AsioEvent/#parameters_1", 
            "text": "flags:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#disposable", 
            "text": "Returns true if the event should be disposed of.  fun box disposable(\n  flags: U32 val)\n: Bool val", 
            "title": "disposable"
        }, 
        {
            "location": "/builtin-AsioEvent/#parameters_2", 
            "text": "flags:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#dispose", 
            "text": "fun box dispose()\n: U32 val", 
            "title": "dispose"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#read", 
            "text": "fun box read()\n: U32 val", 
            "title": "read"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_6", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#write", 
            "text": "fun box write()\n: U32 val", 
            "title": "write"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_7", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#timer", 
            "text": "fun box timer()\n: U32 val", 
            "title": "timer"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_8", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#signal", 
            "text": "fun box signal()\n: U32 val", 
            "title": "signal"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_9", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#read_write", 
            "text": "fun box read_write()\n: U32 val", 
            "title": "read_write"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_10", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#oneshot", 
            "text": "fun box oneshot()\n: U32 val", 
            "title": "oneshot"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_11", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#read_write_oneshot", 
            "text": "fun box read_write_oneshot()\n: U32 val", 
            "title": "read_write_oneshot"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_12", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#eq", 
            "text": "fun box eq(\n  that: AsioEvent val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-AsioEvent/#parameters_3", 
            "text": "that:  AsioEvent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AsioEvent/#ne", 
            "text": "fun box ne(\n  that: AsioEvent val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-AsioEvent/#parameters_4", 
            "text": "that:  AsioEvent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AsioEvent/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/", 
            "text": "Array[A: A]\n\n\nContiguous, resizable memory to store elements of type A.\n\n\nclass ref Array[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew ref create(\n  len: USize val = seq)\n: Array[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\ninit\n\n\nCreate an array of len elements, all initialised to the given value.\n\n\nnew ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: A^\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nfrom_cpointer\n\n\nCreate an array from a C-style pointer and length. The contents are not\ncopied.\n\n\nnew ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: Array[A] ref^\n\n\n\n\nParameters\n\n\n\n\nptr: \nPointer\n[A] ref\n\n\nlen: \nUSize\n val\n\n\nalloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\ncpointer\n\n\nReturn the underlying C-style pointer.\n\n\nfun box cpointer(\n  offset: USize val = seq)\n: Pointer[A] tag\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nPointer\n[A] tag\n\n\n\n\n\n\nsize\n\n\nThe number of elements in the array.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the array.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nreserve\n\n\nReserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncompact\n\n\nTry to remove unused space, making it available for garbage collection. The\nrequest may be ignored.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nundefined[optional B: (A \n \nReal\n[B] val \n (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\n\nResize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.\n\n\nfun ref undefined[optional B: (A \n Real[B] val \n (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nupdate\n\n\nChange the i-th element, raising an error if the index is out of bounds.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\ninsert\n\n\nInsert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.\n\n\nfun ref insert(\n  i: USize val,\n  value: A)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ndelete\n\n\nDelete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.\n\n\nfun ref delete(\n  i: USize val)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\ntruncate\n\n\nTruncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim_in_place\n\n\nTrim the array to a portion of itself, covering \nfrom\n until \nto\n.\nUnlike slice, the operation does not allocate a new array nor copy elements.\n\n\nfun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntrim\n\n\nReturn a shared portion of this array, covering \nfrom\n until \nto\n.\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: Array[A] val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[A] val\n\n\n\n\n\n\nchop\n\n\nChops the array in half at the split point requested and returns both\nthe left and right portions. The original array is trimmed in place and\nreturned as the right portion. If the split point is larger than the\narray, the left portion is the original array and the right portion\nis a new empty array.\nBoth arrays are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new array pointer nor copy elements.\n\n\nfun iso chop(\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)\n\n\n\n\nParameters\n\n\n\n\nsplit_point: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nArray\n[A] iso^ , \nArray\n[A] iso^)\n\n\n\n\n\n\ncopy_to\n\n\nCopy len elements from this(src_idx) to dst(dst_idx).\n\n\nfun box copy_to(\n  dst: Array[this-\nA!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndst: \nArray\n[this-\nA!] ref\n\n\nsrc_idx: \nUSize\n val\n\n\ndst_idx: \nUSize\n val\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove n elements from the array, beginning at index i.\n\n\nfun ref remove(\n  i: USize val,\n  n: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nRemove all elements from the array.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdd an element to the end of the array.\n\n\nfun ref push(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemove an element from the end of the array.\nThe removed element is returned.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\n\nAdd an element to the beginning of the array.\n\n\nfun ref unshift(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemove an element from the beginning of the array.\nThe removed element is returned.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\n\nAppend the elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box \n ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: (\nReadSeq\n[A] box \n \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated elements to the end of the array, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfind\n\n\nFind the \nnth\n appearance of \nvalue\n from the beginning of the array,\nstarting at \noffset\n and examining higher indices, and using the supplied\n\npredicate\n for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.\n\n\nBy default, the search starts at the first element of the array, returns\nthe first instance of \nvalue\n found, and uses object identity for\ncomparison.\n\n\nfun box find(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box-\nA!, box-\nA!): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(box-\nA!, box-\nA!): Bool}[A] val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ncontains\n\n\nReturns true if the array contains \nvalue\n, false otherwise.\n\n\nfun box contains(\n  value: A!,\n  predicate: {(box-\nA!, box-\nA!): Bool}[A] val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A!\n\n\npredicate: {(box-\nA!, box-\nA!): Bool}[A] val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrfind\n\n\nFind the \nnth\n appearance of \nvalue\n from the end of the array, starting at\n\noffset\n and examining lower indices, and using the supplied \npredicate\n for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.\n\n\nBy default, the search starts at the last element of the array, returns the\nfirst instance of \nvalue\n found, and uses object identity for comparison.\n\n\nfun box rfind(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box-\nA!, box-\nA!): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A!\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(box-\nA!, box-\nA!): Bool}[A] val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nclone\n\n\nClone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box clone()\n: Array[this-\nA!] ref^\n\n\n\n\nReturns\n\n\n\n\nArray\n[this-\nA!] ref^\n\n\n\n\n\n\nslice\n\n\nCreate a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.\n\n\nfun box slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Array[this-\nA!] ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\nstep: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[this-\nA!] ref^\n\n\n\n\n\n\npermute\n\n\nCreate a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this-\nA!] ref^ ?\n\n\n\n\nParameters\n\n\n\n\nindices: \nIterator\n[\nUSize\n val] ref\n\n\n\n\nReturns\n\n\n\n\nArray\n[this-\nA!] ref^ ?\n\n\n\n\n\n\nreverse\n\n\nCreate a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.\n\n\nfun box reverse()\n: Array[this-\nA!] ref^\n\n\n\n\nReturns\n\n\n\n\nArray\n[this-\nA!] ref^\n\n\n\n\n\n\nreverse_in_place\n\n\nReverse the array in place.\n\n\nfun ref reverse_in_place()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nswap_elements\n\n\nSwap the element at index i with the element at index j.\nIf either i or j are out of bounds, an error is raised.\n\n\nfun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nj: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nkeys\n\n\nReturn an iterator over the indices in the array.\n\n\nfun box keys()\n: ArrayKeys[A, this-\nArray[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nArrayKeys\n[A, this-\nArray\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values in the array.\n\n\nfun box values()\n: ArrayValues[A, this-\nArray[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nArrayValues\n[A, this-\nArray\n[A] ref] ref^\n\n\n\n\n\n\npairs\n\n\nReturn an iterator over the (index, value) pairs in the array.\n\n\nfun box pairs()\n: ArrayPairs[A, this-\nArray[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nArrayPairs\n[A, this-\nArray\n[A] ref] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_copy_to\n\n\nCopy copy_len elements from this to that at specified offsets.\n\n\nfun box _copy_to(\n  ptr: Pointer[this-\nA!] ref,\n  copy_len: USize val,\n  from_offset: USize val = seq,\n  to_offset: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nptr: \nPointer\n[this-\nA!] ref\n\n\ncopy_len: \nUSize\n val\n\n\nfrom_offset: \nUSize\n val = seq\n\n\nto_offset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Array"
        }, 
        {
            "location": "/builtin-Array/#array91a-a93", 
            "text": "Contiguous, resizable memory to store elements of type A.  class ref Array[A: A] is\n  Seq[A] ref", 
            "title": "Array[A: A]"
        }, 
        {
            "location": "/builtin-Array/#implements", 
            "text": "Seq [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-Array/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-Array/#create", 
            "text": "Create an array with zero elements, but space for len elements.  new ref create(\n  len: USize val = seq)\n: Array[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-Array/#parameters", 
            "text": "len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns", 
            "text": "Array [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#init", 
            "text": "Create an array of len elements, all initialised to the given value.  new ref init(\n  from: A^,\n  len: USize val)\n: Array[A] ref^", 
            "title": "init"
        }, 
        {
            "location": "/builtin-Array/#parameters_1", 
            "text": "from: A^  len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_1", 
            "text": "Array [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#from_cpointer", 
            "text": "Create an array from a C-style pointer and length. The contents are not\ncopied.  new ref from_cpointer(\n  ptr: Pointer[A] ref,\n  len: USize val,\n  alloc: USize val = seq)\n: Array[A] ref^", 
            "title": "from_cpointer"
        }, 
        {
            "location": "/builtin-Array/#parameters_2", 
            "text": "ptr:  Pointer [A] ref  len:  USize  val  alloc:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_2", 
            "text": "Array [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-Array/#cpointer", 
            "text": "Return the underlying C-style pointer.  fun box cpointer(\n  offset: USize val = seq)\n: Pointer[A] tag", 
            "title": "cpointer"
        }, 
        {
            "location": "/builtin-Array/#parameters_3", 
            "text": "offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_3", 
            "text": "Pointer [A] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#size", 
            "text": "The number of elements in the array.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/builtin-Array/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#space", 
            "text": "The available space in the array.  fun box space()\n: USize val", 
            "title": "space"
        }, 
        {
            "location": "/builtin-Array/#returns_5", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#reserve", 
            "text": "Reserve space for len elements, including whatever elements are already in\nthe array. Array space grows geometrically.  fun ref reserve(\n  len: USize val)\n: None val", 
            "title": "reserve"
        }, 
        {
            "location": "/builtin-Array/#parameters_4", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#compact", 
            "text": "Try to remove unused space, making it available for garbage collection. The\nrequest may be ignored.  fun ref compact()\n: None val", 
            "title": "compact"
        }, 
        {
            "location": "/builtin-Array/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#undefined91optional-b-a-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93", 
            "text": "Resize to len elements, populating previously empty elements with random\nmemory. This is only allowed for an array of numbers.  fun ref undefined[optional B: (A   Real[B] val   (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))](\n  len: USize val)\n: None val", 
            "title": "undefined[optional B: (A &amp; Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        }, 
        {
            "location": "/builtin-Array/#parameters_5", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#apply", 
            "text": "Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/builtin-Array/#parameters_6", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_9", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#update", 
            "text": "Change the i-th element, raising an error if the index is out of bounds.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?", 
            "title": "update"
        }, 
        {
            "location": "/builtin-Array/#parameters_7", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_10", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#insert", 
            "text": "Insert an element into the array. Elements after this are moved up by one\nindex, extending the array.\nAn out of bounds index raises an error.  fun ref insert(\n  i: USize val,\n  value: A)\n: None val ?", 
            "title": "insert"
        }, 
        {
            "location": "/builtin-Array/#parameters_8", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_11", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#delete", 
            "text": "Delete an element from the array. Elements after this are moved down by one\nindex, compacting the array.\nAn out of bounds index raises an error.\nThe deleted element is returned.  fun ref delete(\n  i: USize val)\n: A^ ?", 
            "title": "delete"
        }, 
        {
            "location": "/builtin-Array/#parameters_9", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_12", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#truncate", 
            "text": "Truncate an array to the given length, discarding excess elements. If the\narray is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val", 
            "title": "truncate"
        }, 
        {
            "location": "/builtin-Array/#parameters_10", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#trim_in_place", 
            "text": "Trim the array to a portion of itself, covering  from  until  to .\nUnlike slice, the operation does not allocate a new array nor copy elements.  fun ref trim_in_place(\n  from: USize val = seq,\n  to: USize val = seq)\n: None val", 
            "title": "trim_in_place"
        }, 
        {
            "location": "/builtin-Array/#parameters_11", 
            "text": "from:  USize  val = seq  to:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#trim", 
            "text": "Return a shared portion of this array, covering  from  until  to .\nBoth the original and the new array are immutable, as they share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun val trim(\n  from: USize val = seq,\n  to: USize val = seq)\n: Array[A] val", 
            "title": "trim"
        }, 
        {
            "location": "/builtin-Array/#parameters_12", 
            "text": "from:  USize  val = seq  to:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_15", 
            "text": "Array [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#chop", 
            "text": "Chops the array in half at the split point requested and returns both\nthe left and right portions. The original array is trimmed in place and\nreturned as the right portion. If the split point is larger than the\narray, the left portion is the original array and the right portion\nis a new empty array.\nBoth arrays are isolated and mutable, as they do not share memory.\nThe operation does not allocate a new array pointer nor copy elements.  fun iso chop(\n  split_point: USize val)\n: (Array[A] iso^ , Array[A] iso^)", 
            "title": "chop"
        }, 
        {
            "location": "/builtin-Array/#parameters_13", 
            "text": "split_point:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_16", 
            "text": "( Array [A] iso^ ,  Array [A] iso^)", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#copy_to", 
            "text": "Copy len elements from this(src_idx) to dst(dst_idx).  fun box copy_to(\n  dst: Array[this- A!] ref,\n  src_idx: USize val,\n  dst_idx: USize val,\n  len: USize val)\n: None val", 
            "title": "copy_to"
        }, 
        {
            "location": "/builtin-Array/#parameters_14", 
            "text": "dst:  Array [this- A!] ref  src_idx:  USize  val  dst_idx:  USize  val  len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#remove", 
            "text": "Remove n elements from the array, beginning at index i.  fun ref remove(\n  i: USize val,\n  n: USize val)\n: None val", 
            "title": "remove"
        }, 
        {
            "location": "/builtin-Array/#parameters_15", 
            "text": "i:  USize  val  n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#clear", 
            "text": "Remove all elements from the array.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/builtin-Array/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#push", 
            "text": "Add an element to the end of the array.  fun ref push(\n  value: A)\n: None val", 
            "title": "push"
        }, 
        {
            "location": "/builtin-Array/#parameters_16", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#pop", 
            "text": "Remove an element from the end of the array.\nThe removed element is returned.  fun ref pop()\n: A^ ?", 
            "title": "pop"
        }, 
        {
            "location": "/builtin-Array/#returns_21", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#unshift", 
            "text": "Add an element to the beginning of the array.  fun ref unshift(\n  value: A)\n: None val", 
            "title": "unshift"
        }, 
        {
            "location": "/builtin-Array/#parameters_17", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_22", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#shift", 
            "text": "Remove an element from the beginning of the array.\nThe removed element is returned.  fun ref shift()\n: A^ ?", 
            "title": "shift"
        }, 
        {
            "location": "/builtin-Array/#returns_23", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#append", 
            "text": "Append the elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box   ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "append"
        }, 
        {
            "location": "/builtin-Array/#parameters_18", 
            "text": "seq: ( ReadSeq [A] box    ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_24", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#concat", 
            "text": "Add len iterated elements to the end of the array, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "concat"
        }, 
        {
            "location": "/builtin-Array/#parameters_19", 
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_25", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#find", 
            "text": "Find the  nth  appearance of  value  from the beginning of the array,\nstarting at  offset  and examining higher indices, and using the supplied predicate  for comparisons. Returns the index of the value, or raise an\nerror if the value isn't present.  By default, the search starts at the first element of the array, returns\nthe first instance of  value  found, and uses object identity for\ncomparison.  fun box find(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box- A!, box- A!): Bool}[A] val = seq)\n: USize val ?", 
            "title": "find"
        }, 
        {
            "location": "/builtin-Array/#parameters_20", 
            "text": "value: A!  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(box- A!, box- A!): Bool}[A] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_26", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#contains", 
            "text": "Returns true if the array contains  value , false otherwise.  fun box contains(\n  value: A!,\n  predicate: {(box- A!, box- A!): Bool}[A] val = seq)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/builtin-Array/#parameters_21", 
            "text": "value: A!  predicate: {(box- A!, box- A!): Bool}[A] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_27", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#rfind", 
            "text": "Find the  nth  appearance of  value  from the end of the array, starting at offset  and examining lower indices, and using the supplied  predicate  for\ncomparisons. Returns the index of the value, or raise an error if the value\nisn't present.  By default, the search starts at the last element of the array, returns the\nfirst instance of  value  found, and uses object identity for comparison.  fun box rfind(\n  value: A!,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(box- A!, box- A!): Bool}[A] val = seq)\n: USize val ?", 
            "title": "rfind"
        }, 
        {
            "location": "/builtin-Array/#parameters_22", 
            "text": "value: A!  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(box- A!, box- A!): Bool}[A] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_28", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#clone", 
            "text": "Clone the array.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box clone()\n: Array[this- A!] ref^", 
            "title": "clone"
        }, 
        {
            "location": "/builtin-Array/#returns_29", 
            "text": "Array [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#slice", 
            "text": "Create a new array that is a clone of a portion of this array. The range is\nexclusive and saturated.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not cloned.  fun box slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Array[this- A!] ref^", 
            "title": "slice"
        }, 
        {
            "location": "/builtin-Array/#parameters_23", 
            "text": "from:  USize  val = seq  to:  USize  val = seq  step:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_30", 
            "text": "Array [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#permute", 
            "text": "Create a new array with the elements permuted.\nPermute to an arbitrary order that may include duplicates. An out of bounds\nindex raises an error.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box permute(\n  indices: Iterator[USize val] ref)\n: Array[this- A!] ref^ ?", 
            "title": "permute"
        }, 
        {
            "location": "/builtin-Array/#parameters_24", 
            "text": "indices:  Iterator [ USize  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_31", 
            "text": "Array [this- A!] ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#reverse", 
            "text": "Create a new array with the elements in reverse order.\nThe new array contains references to the same elements that the old array\ncontains, the elements themselves are not copied.  fun box reverse()\n: Array[this- A!] ref^", 
            "title": "reverse"
        }, 
        {
            "location": "/builtin-Array/#returns_32", 
            "text": "Array [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#reverse_in_place", 
            "text": "Reverse the array in place.  fun ref reverse_in_place()\n: None val", 
            "title": "reverse_in_place"
        }, 
        {
            "location": "/builtin-Array/#returns_33", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#swap_elements", 
            "text": "Swap the element at index i with the element at index j.\nIf either i or j are out of bounds, an error is raised.  fun ref swap_elements(\n  i: USize val,\n  j: USize val)\n: None val ?", 
            "title": "swap_elements"
        }, 
        {
            "location": "/builtin-Array/#parameters_25", 
            "text": "i:  USize  val  j:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_34", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#keys", 
            "text": "Return an iterator over the indices in the array.  fun box keys()\n: ArrayKeys[A, this- Array[A] ref] ref^", 
            "title": "keys"
        }, 
        {
            "location": "/builtin-Array/#returns_35", 
            "text": "ArrayKeys [A, this- Array [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#values", 
            "text": "Return an iterator over the values in the array.  fun box values()\n: ArrayValues[A, this- Array[A] ref] ref^", 
            "title": "values"
        }, 
        {
            "location": "/builtin-Array/#returns_36", 
            "text": "ArrayValues [A, this- Array [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#pairs", 
            "text": "Return an iterator over the (index, value) pairs in the array.  fun box pairs()\n: ArrayPairs[A, this- Array[A] ref] ref^", 
            "title": "pairs"
        }, 
        {
            "location": "/builtin-Array/#returns_37", 
            "text": "ArrayPairs [A, this- Array [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Array/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-Array/#_copy_to", 
            "text": "Copy copy_len elements from this to that at specified offsets.  fun box _copy_to(\n  ptr: Pointer[this- A!] ref,\n  copy_len: USize val,\n  from_offset: USize val = seq,\n  to_offset: USize val = seq)\n: None val", 
            "title": "_copy_to"
        }, 
        {
            "location": "/builtin-Array/#parameters_26", 
            "text": "ptr:  Pointer [this- A!] ref  copy_len:  USize  val  from_offset:  USize  val = seq  to_offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-Array/#returns_38", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayKeys/", 
            "text": "ArrayKeys[A: A, B: \nArray\n[A] #read]\n\n\nclass ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nUSize\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  array: B)\n: ArrayKeys[A, B] ref^\n\n\n\n\nParameters\n\n\n\n\narray: B\n\n\n\n\nReturns\n\n\n\n\nArrayKeys\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "class ArrayKeys"
        }, 
        {
            "location": "/builtin-ArrayKeys/#arraykeys91a-a-b-array91a93-read93", 
            "text": "class ref ArrayKeys[A: A, B: Array[A] #read] is\n  Iterator[USize val] ref", 
            "title": "ArrayKeys[A: A, B: Array[A] #read]"
        }, 
        {
            "location": "/builtin-ArrayKeys/#implements", 
            "text": "Iterator [ USize  val] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-ArrayKeys/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ArrayKeys/#create", 
            "text": "new ref create(\n  array: B)\n: ArrayKeys[A, B] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-ArrayKeys/#parameters", 
            "text": "array: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ArrayKeys/#returns", 
            "text": "ArrayKeys [A, B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayKeys/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ArrayKeys/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/builtin-ArrayKeys/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayKeys/#next", 
            "text": "fun ref next()\n: USize val", 
            "title": "next"
        }, 
        {
            "location": "/builtin-ArrayKeys/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayValues/", 
            "text": "ArrayValues[A: A, B: \nArray\n[A] #read]\n\n\nclass ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B-\nA] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[B-\nA] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  array: B)\n: ArrayValues[A, B] ref^\n\n\n\n\nParameters\n\n\n\n\narray: B\n\n\n\n\nReturns\n\n\n\n\nArrayValues\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: B-\nA ?\n\n\n\n\nReturns\n\n\n\n\nB-\nA ?\n\n\n\n\n\n\nrewind\n\n\nfun ref rewind()\n: ArrayValues[A, B] ref\n\n\n\n\nReturns\n\n\n\n\nArrayValues\n[A, B] ref", 
            "title": "class ArrayValues"
        }, 
        {
            "location": "/builtin-ArrayValues/#arrayvalues91a-a-b-array91a93-read93", 
            "text": "class ref ArrayValues[A: A, B: Array[A] #read] is\n  Iterator[B- A] ref", 
            "title": "ArrayValues[A: A, B: Array[A] #read]"
        }, 
        {
            "location": "/builtin-ArrayValues/#implements", 
            "text": "Iterator [B- A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-ArrayValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ArrayValues/#create", 
            "text": "new ref create(\n  array: B)\n: ArrayValues[A, B] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-ArrayValues/#parameters", 
            "text": "array: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ArrayValues/#returns", 
            "text": "ArrayValues [A, B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ArrayValues/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/builtin-ArrayValues/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayValues/#next", 
            "text": "fun ref next()\n: B- A ?", 
            "title": "next"
        }, 
        {
            "location": "/builtin-ArrayValues/#returns_2", 
            "text": "B- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayValues/#rewind", 
            "text": "fun ref rewind()\n: ArrayValues[A, B] ref", 
            "title": "rewind"
        }, 
        {
            "location": "/builtin-ArrayValues/#returns_3", 
            "text": "ArrayValues [A, B] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayPairs/", 
            "text": "ArrayPairs[A: A, B: \nArray\n[A] #read]\n\n\nclass ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B-\nA)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(\nUSize\n val , B-\nA)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  array: B)\n: ArrayPairs[A, B] ref^\n\n\n\n\nParameters\n\n\n\n\narray: B\n\n\n\n\nReturns\n\n\n\n\nArrayPairs\n[A, B] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (USize val , B-\nA) ?\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , B-\nA) ?", 
            "title": "class ArrayPairs"
        }, 
        {
            "location": "/builtin-ArrayPairs/#arraypairs91a-a-b-array91a93-read93", 
            "text": "class ref ArrayPairs[A: A, B: Array[A] #read] is\n  Iterator[(USize val , B- A)] ref", 
            "title": "ArrayPairs[A: A, B: Array[A] #read]"
        }, 
        {
            "location": "/builtin-ArrayPairs/#implements", 
            "text": "Iterator [( USize  val , B- A)] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/builtin-ArrayPairs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-ArrayPairs/#create", 
            "text": "new ref create(\n  array: B)\n: ArrayPairs[A, B] ref^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-ArrayPairs/#parameters", 
            "text": "array: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-ArrayPairs/#returns", 
            "text": "ArrayPairs [A, B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayPairs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-ArrayPairs/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/builtin-ArrayPairs/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-ArrayPairs/#next", 
            "text": "fun ref next()\n: (USize val , B- A) ?", 
            "title": "next"
        }, 
        {
            "location": "/builtin-ArrayPairs/#returns_2", 
            "text": "( USize  val , B- A) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-Any/", 
            "text": "Any\n\n\ninterface tag Any", 
            "title": "interface Any"
        }, 
        {
            "location": "/builtin-Any/#any", 
            "text": "interface tag Any", 
            "title": "Any"
        }, 
        {
            "location": "/builtin-AmbientAuth/", 
            "text": "AmbientAuth\n\n\nThis type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.\n\n\nAmbient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.\n\n\nThe root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.\n\n\nprimitive val AmbientAuth\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew val _create()\n: AmbientAuth val^\n\n\n\n\nReturns\n\n\n\n\nAmbientAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AmbientAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive AmbientAuth"
        }, 
        {
            "location": "/builtin-AmbientAuth/#ambientauth", 
            "text": "This type represents the root capability. When a Pony program starts, the\nEnv passed to the Main actor contains an instance of the root capability.  Ambient access to the root capability is denied outside of the builtin\npackage. Inside the builtin package, only Env creates a Root.  The root capability can be used by any package that wants to establish a\nprinciple of least authority. A typical usage is to have a parameter on a\nconstructor for some resource that expects a limiting capability specific to\nthe package, but will also accept the root capability as representing\nunlimited access.  primitive val AmbientAuth", 
            "title": "AmbientAuth"
        }, 
        {
            "location": "/builtin-AmbientAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-AmbientAuth/#_create", 
            "text": "new val _create()\n: AmbientAuth val^", 
            "title": "_create"
        }, 
        {
            "location": "/builtin-AmbientAuth/#returns", 
            "text": "AmbientAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AmbientAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-AmbientAuth/#eq", 
            "text": "fun box eq(\n  that: AmbientAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-AmbientAuth/#parameters", 
            "text": "that:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AmbientAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-AmbientAuth/#ne", 
            "text": "fun box ne(\n  that: AmbientAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-AmbientAuth/#parameters_1", 
            "text": "that:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-AmbientAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ToString/", 
            "text": "_ToString\n\n\nWorker type providing simple to string conversions for numbers.\n\n\nprimitive val _ToString\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ToString val^\n\n\n\n\nReturns\n\n\n\n\n_ToString\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ToString val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ToString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ToString val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ToString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_u64\n\n\nfun box _u64(\n  x: U64 val,\n  neg: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\nneg: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_u128\n\n\nfun box _u128(\n  x: U128 val,\n  neg: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU128\n val\n\n\nneg: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_f64\n\n\nfun box _f64(\n  x: F64 val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^", 
            "title": "primitive _ToString"
        }, 
        {
            "location": "/builtin-_ToString/#_tostring", 
            "text": "Worker type providing simple to string conversions for numbers.  primitive val _ToString", 
            "title": "_ToString"
        }, 
        {
            "location": "/builtin-_ToString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/builtin-_ToString/#create", 
            "text": "new val create()\n: _ToString val^", 
            "title": "create"
        }, 
        {
            "location": "/builtin-_ToString/#returns", 
            "text": "_ToString  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ToString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/builtin-_ToString/#eq", 
            "text": "fun box eq(\n  that: _ToString val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/builtin-_ToString/#parameters", 
            "text": "that:  _ToString  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_ToString/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ToString/#ne", 
            "text": "fun box ne(\n  that: _ToString val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/builtin-_ToString/#parameters_1", 
            "text": "that:  _ToString  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_ToString/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ToString/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/builtin-_ToString/#_u64", 
            "text": "fun box _u64(\n  x: U64 val,\n  neg: Bool val)\n: String iso^", 
            "title": "_u64"
        }, 
        {
            "location": "/builtin-_ToString/#parameters_2", 
            "text": "x:  U64  val  neg:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_ToString/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ToString/#_u128", 
            "text": "fun box _u128(\n  x: U128 val,\n  neg: Bool val)\n: String iso^", 
            "title": "_u128"
        }, 
        {
            "location": "/builtin-_ToString/#parameters_3", 
            "text": "x:  U128  val  neg:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_ToString/#returns_4", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/builtin-_ToString/#_f64", 
            "text": "fun box _f64(\n  x: F64 val)\n: String iso^", 
            "title": "_f64"
        }, 
        {
            "location": "/builtin-_ToString/#parameters_4", 
            "text": "x:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/builtin-_ToString/#returns_5", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/bureaucracy--index/", 
            "text": "Bureaucracy package\n\n\nIt happens to almost every program. It starts small, tiny if you will, like a\nvillage where every actor knows every other actor and shutdown is easy. One day\nyou realize your program is no longer a cute seaside hamlet, its a bustling\nmetropolis and you are doing way too much work to keep track of everything.\nWhat do you do? Call for a little bureaucracy.\n\n\nThe bureaucracy contains objects designed to ease your bookkeeping burdens.\nNeed to shutdown a number of actors together? Check out \nCustodian\n. Need\nto keep track of a lot of stuff and be able to look it up by name? Check out\n\nRegistrar\n.\n\n\nPut bureaucracy to use today and before long, you're sprawling metropolis of a\ncode base will be manageable again in no time.\n\n\nPublic Types\n\n\n\n\nactor Registrar\n\n\nactor Custodian", 
            "title": "Package"
        }, 
        {
            "location": "/bureaucracy--index/#bureaucracy-package", 
            "text": "It happens to almost every program. It starts small, tiny if you will, like a\nvillage where every actor knows every other actor and shutdown is easy. One day\nyou realize your program is no longer a cute seaside hamlet, its a bustling\nmetropolis and you are doing way too much work to keep track of everything.\nWhat do you do? Call for a little bureaucracy.  The bureaucracy contains objects designed to ease your bookkeeping burdens.\nNeed to shutdown a number of actors together? Check out  Custodian . Need\nto keep track of a lot of stuff and be able to look it up by name? Check out Registrar .  Put bureaucracy to use today and before long, you're sprawling metropolis of a\ncode base will be manageable again in no time.", 
            "title": "Bureaucracy package"
        }, 
        {
            "location": "/bureaucracy--index/#public-types", 
            "text": "actor Registrar  actor Custodian", 
            "title": "Public Types"
        }, 
        {
            "location": "/bureaucracy-Registrar/", 
            "text": "Registrar\n\n\nA Registrar keeps a map of lookup string to anything. Generally, this is used\nto keep a directory of long-lived service-providing actors that can be\nlooked up name.\n\n\nactor tag Registrar\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: Registrar tag^\n\n\n\n\nReturns\n\n\n\n\nRegistrar\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nupdate\n\n\nAdd, or change, a lookup mapping.\n\n\nbe update(\n  key: String val,\n  value: Any tag)\n\n\n\n\nParameters\n\n\n\n\nkey: \nString\n val\n\n\nvalue: \nAny\n tag\n\n\n\n\n\n\nremove\n\n\nRemove a mapping. This only takes effect if provided key currently maps to\nthe provided value. If the key maps to some other value (perhaps after\nupdating), the mapping won't be removed.\n\n\nbe remove(\n  key: String val,\n  value: Any tag)\n\n\n\n\nParameters\n\n\n\n\nkey: \nString\n val\n\n\nvalue: \nAny\n tag\n\n\n\n\n\n\nPublic Functions\n\n\napply[optional A: \nAny\n tag]\n\n\nLookup by name. Returns a promise that will be fulfilled with the mapped\nvalue if it exists and is a subtype of A. Otherwise, the promise will be\nrejected.\n\n\nfun tag apply[optional A: Any tag](\n  key: String val)\n: Promise[A] tag\n\n\n\n\nParameters\n\n\n\n\nkey: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nPromise\n[A] tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_fetch[A: \nAny\n tag]\n\n\nFulfills or rejects the promise.\n\n\nbe _fetch[A: Any tag](\n  key: String val,\n  promise: Promise[A] tag)\n\n\n\n\nParameters\n\n\n\n\nkey: \nString\n val\n\n\npromise: \nPromise\n[A] tag", 
            "title": "actor Registrar"
        }, 
        {
            "location": "/bureaucracy-Registrar/#registrar", 
            "text": "A Registrar keeps a map of lookup string to anything. Generally, this is used\nto keep a directory of long-lived service-providing actors that can be\nlooked up name.  actor tag Registrar", 
            "title": "Registrar"
        }, 
        {
            "location": "/bureaucracy-Registrar/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-Registrar/#create", 
            "text": "new tag create()\n: Registrar tag^", 
            "title": "create"
        }, 
        {
            "location": "/bureaucracy-Registrar/#returns", 
            "text": "Registrar  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/bureaucracy-Registrar/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/bureaucracy-Registrar/#update", 
            "text": "Add, or change, a lookup mapping.  be update(\n  key: String val,\n  value: Any tag)", 
            "title": "update"
        }, 
        {
            "location": "/bureaucracy-Registrar/#parameters", 
            "text": "key:  String  val  value:  Any  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/bureaucracy-Registrar/#remove", 
            "text": "Remove a mapping. This only takes effect if provided key currently maps to\nthe provided value. If the key maps to some other value (perhaps after\nupdating), the mapping won't be removed.  be remove(\n  key: String val,\n  value: Any tag)", 
            "title": "remove"
        }, 
        {
            "location": "/bureaucracy-Registrar/#parameters_1", 
            "text": "key:  String  val  value:  Any  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/bureaucracy-Registrar/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/bureaucracy-Registrar/#apply91optional-a-any-tag93", 
            "text": "Lookup by name. Returns a promise that will be fulfilled with the mapped\nvalue if it exists and is a subtype of A. Otherwise, the promise will be\nrejected.  fun tag apply[optional A: Any tag](\n  key: String val)\n: Promise[A] tag", 
            "title": "apply[optional A: Any tag]"
        }, 
        {
            "location": "/bureaucracy-Registrar/#parameters_2", 
            "text": "key:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/bureaucracy-Registrar/#returns_1", 
            "text": "Promise [A] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/bureaucracy-Registrar/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/bureaucracy-Registrar/#_fetch91a-any-tag93", 
            "text": "Fulfills or rejects the promise.  be _fetch[A: Any tag](\n  key: String val,\n  promise: Promise[A] tag)", 
            "title": "_fetch[A: Any tag]"
        }, 
        {
            "location": "/bureaucracy-Registrar/#parameters_3", 
            "text": "key:  String  val  promise:  Promise [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/bureaucracy-Custodian/", 
            "text": "Custodian\n\n\nA Custodian keeps a set of actors to dispose. When the Custodian is disposed,\nit disposes of the actors in its set and then clears the set.\n\n\nExample program\n\n\nImagine you have a program with 3 actors that you need to shutdown when it\nreceives a TERM signal. We can set up a Custodian that knows about each\nof our actors and when a TERM signal is received, is disposed of.\n\n\nuse \nbureaucracy\n\nuse \nsignals\n\n\nactor Actor1\n  be dispose() =\n None // dispose of resources here.\n\nactor Actor2\n  be dispose() =\n None // dispose of resources here.\n\nactor Actor3\n  be dispose() =\n None // dispose of resources here.\n\nactor Main\n  new create(env: Env) =\n\n    let actor1 = Actor1\n    let actor2 = Actor2\n    let actor3 = Actor3\n\n    let custodian = Custodian\n    custodian(actor1)\n    custodian(actor2)\n    custodian(actor3)\n\n    SignalHandler(TermHandler(custodian), Sig.term())\n\nclass TermHandler is SignalNotify\n  let _custodian: Custodian\n\n  new iso create(custodian: Custodian) =\n\n    _custodian = custodian\n\n  fun ref apply(count: U32): Bool =\n\n    _custodian.dispose()\n    true\n\n\n\n\nactor tag Custodian\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: Custodian tag^\n\n\n\n\nReturns\n\n\n\n\nCustodian\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nAdd an actor to be disposed of.\n\n\nbe apply(\n  worker: DisposableActor tag)\n\n\n\n\nParameters\n\n\n\n\nworker: \nDisposableActor\n tag\n\n\n\n\n\n\nremove\n\n\nRemoves an actor from the set of things to be disposed.\n\n\nbe remove(\n  worker: DisposableActor tag)\n\n\n\n\nParameters\n\n\n\n\nworker: \nDisposableActor\n tag\n\n\n\n\n\n\ndispose\n\n\nDispose of the actors in the set and then clear the set.\n\n\nbe dispose()", 
            "title": "actor Custodian"
        }, 
        {
            "location": "/bureaucracy-Custodian/#custodian", 
            "text": "A Custodian keeps a set of actors to dispose. When the Custodian is disposed,\nit disposes of the actors in its set and then clears the set.", 
            "title": "Custodian"
        }, 
        {
            "location": "/bureaucracy-Custodian/#example-program", 
            "text": "Imagine you have a program with 3 actors that you need to shutdown when it\nreceives a TERM signal. We can set up a Custodian that knows about each\nof our actors and when a TERM signal is received, is disposed of.  use  bureaucracy \nuse  signals \n\nactor Actor1\n  be dispose() =  None // dispose of resources here.\n\nactor Actor2\n  be dispose() =  None // dispose of resources here.\n\nactor Actor3\n  be dispose() =  None // dispose of resources here.\n\nactor Main\n  new create(env: Env) = \n    let actor1 = Actor1\n    let actor2 = Actor2\n    let actor3 = Actor3\n\n    let custodian = Custodian\n    custodian(actor1)\n    custodian(actor2)\n    custodian(actor3)\n\n    SignalHandler(TermHandler(custodian), Sig.term())\n\nclass TermHandler is SignalNotify\n  let _custodian: Custodian\n\n  new iso create(custodian: Custodian) = \n    _custodian = custodian\n\n  fun ref apply(count: U32): Bool = \n    _custodian.dispose()\n    true  actor tag Custodian", 
            "title": "Example program"
        }, 
        {
            "location": "/bureaucracy-Custodian/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/bureaucracy-Custodian/#create", 
            "text": "new tag create()\n: Custodian tag^", 
            "title": "create"
        }, 
        {
            "location": "/bureaucracy-Custodian/#returns", 
            "text": "Custodian  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/bureaucracy-Custodian/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/bureaucracy-Custodian/#apply", 
            "text": "Add an actor to be disposed of.  be apply(\n  worker: DisposableActor tag)", 
            "title": "apply"
        }, 
        {
            "location": "/bureaucracy-Custodian/#parameters", 
            "text": "worker:  DisposableActor  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/bureaucracy-Custodian/#remove", 
            "text": "Removes an actor from the set of things to be disposed.  be remove(\n  worker: DisposableActor tag)", 
            "title": "remove"
        }, 
        {
            "location": "/bureaucracy-Custodian/#parameters_1", 
            "text": "worker:  DisposableActor  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/bureaucracy-Custodian/#dispose", 
            "text": "Dispose of the actors in the set and then clear the set.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/capsicum--index/", 
            "text": "No package doc string provided for capsicum.\n\n\nPublic Types\n\n\n\n\ntype CapRights\n\n\nclass CapRights0\n\n\nprimitive Cap", 
            "title": "Package"
        }, 
        {
            "location": "/capsicum--index/#public-types", 
            "text": "type CapRights  class CapRights0  primitive Cap", 
            "title": "Public Types"
        }, 
        {
            "location": "/capsicum-CapRights/", 
            "text": "CapRights\n\n\ntype CapRights is\n  CapRights0 ref\n\n\n\n\nType Alias For\n\n\n\n\nCapRights0\n ref", 
            "title": "type CapRights"
        }, 
        {
            "location": "/capsicum-CapRights/#caprights", 
            "text": "type CapRights is\n  CapRights0 ref", 
            "title": "CapRights"
        }, 
        {
            "location": "/capsicum-CapRights/#type-alias-for", 
            "text": "CapRights0  ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/capsicum-CapRights0/", 
            "text": "CapRights0\n\n\nVersion 0 of the capsicum cap_rights_t structure.\n\n\nclass ref CapRights0\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create()\n: CapRights0 ref^\n\n\n\n\nReturns\n\n\n\n\nCapRights0\n ref^\n\n\n\n\n\n\nfrom\n\n\nnew ref from(\n  caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box)\n: CapRights0 ref^\n\n\n\n\nParameters\n\n\n\n\ncaps: \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] box\n\n\n\n\nReturns\n\n\n\n\nCapRights0\n ref^\n\n\n\n\n\n\ndescriptor\n\n\nnew ref descriptor(\n  fd: I32 val)\n: CapRights0 ref^\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nCapRights0\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nset\n\n\nfun ref set(\n  cap: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ncap: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\n\nfun ref unset(\n  cap: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ncap: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlimit\n\n\nLimits the fd to the encoded rights.\n\n\nfun box limit(\n  fd: I32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmerge\n\n\nMerge the rights in that into this.\n\n\nfun ref merge(\n  that: CapRights0 ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCapRights0\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove the rights in that from this.\n\n\nfun ref remove(\n  that: CapRights0 ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCapRights0\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nClear all rights.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncontains\n\n\nCheck that this is a superset of the rights in that.\n\n\nfun box contains(\n  that: CapRights0 ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCapRights0\n ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_version\n\n\nfun box _version()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val", 
            "title": "class CapRights0"
        }, 
        {
            "location": "/capsicum-CapRights0/#caprights0", 
            "text": "Version 0 of the capsicum cap_rights_t structure.  class ref CapRights0", 
            "title": "CapRights0"
        }, 
        {
            "location": "/capsicum-CapRights0/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/capsicum-CapRights0/#create", 
            "text": "new ref create()\n: CapRights0 ref^", 
            "title": "create"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns", 
            "text": "CapRights0  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#from", 
            "text": "new ref from(\n  caps: Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] box)\n: CapRights0 ref^", 
            "title": "from"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters", 
            "text": "caps:  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_1", 
            "text": "CapRights0  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#descriptor", 
            "text": "new ref descriptor(\n  fd: I32 val)\n: CapRights0 ref^", 
            "title": "descriptor"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_1", 
            "text": "fd:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_2", 
            "text": "CapRights0  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/capsicum-CapRights0/#set", 
            "text": "fun ref set(\n  cap: U64 val)\n: None val", 
            "title": "set"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_2", 
            "text": "cap:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#unset", 
            "text": "fun ref unset(\n  cap: U64 val)\n: None val", 
            "title": "unset"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_3", 
            "text": "cap:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#limit", 
            "text": "Limits the fd to the encoded rights.  fun box limit(\n  fd: I32 val)\n: Bool val", 
            "title": "limit"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_4", 
            "text": "fd:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#merge", 
            "text": "Merge the rights in that into this.  fun ref merge(\n  that: CapRights0 ref)\n: None val", 
            "title": "merge"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_5", 
            "text": "that:  CapRights0  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#remove", 
            "text": "Remove the rights in that from this.  fun ref remove(\n  that: CapRights0 ref)\n: None val", 
            "title": "remove"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_6", 
            "text": "that:  CapRights0  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#clear", 
            "text": "Clear all rights.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#contains", 
            "text": "Check that this is a superset of the rights in that.  fun box contains(\n  that: CapRights0 ref)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/capsicum-CapRights0/#parameters_7", 
            "text": "that:  CapRights0  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-CapRights0/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/capsicum-CapRights0/#_version", 
            "text": "fun box _version()\n: I32 val", 
            "title": "_version"
        }, 
        {
            "location": "/capsicum-CapRights0/#returns_10", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/", 
            "text": "Cap\n\n\nThe Capsicum rights.\n\n\nprimitive val Cap\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Cap val^\n\n\n\n\nReturns\n\n\n\n\nCap\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nenter\n\n\nThis places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.\n\n\nfun box enter()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nread\n\n\nfun box read()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nwrite\n\n\nfun box write()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nseek_tell\n\n\nfun box seek_tell()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nseek\n\n\nfun box seek()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npread\n\n\nfun box pread()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npwrite\n\n\nfun box pwrite()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap\n\n\nfun box mmap()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_r\n\n\nfun box mmap_r()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_w\n\n\nfun box mmap_w()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_x\n\n\nfun box mmap_x()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_rw\n\n\nfun box mmap_rw()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_rx\n\n\nfun box mmap_rx()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_wx\n\n\nfun box mmap_wx()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmmap_rwx\n\n\nfun box mmap_rwx()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ncreat\n\n\nfun box creat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfexecve\n\n\nfun box fexecve()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfsync\n\n\nfun box fsync()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nftruncate\n\n\nfun box ftruncate()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nlookup\n\n\nfun box lookup()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchdir\n\n\nfun box fchdir()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchflags\n\n\nfun box fchflags()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nchflagsat\n\n\nfun box chflagsat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchmod\n\n\nfun box fchmod()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchmodat\n\n\nfun box fchmodat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchown\n\n\nfun box fchown()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfchownat\n\n\nfun box fchownat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfcntl\n\n\nfun box fcntl()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nflock\n\n\nfun box flock()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfpathconf\n\n\nfun box fpathconf()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfsck\n\n\nfun box fsck()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfstat\n\n\nfun box fstat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfstatat\n\n\nfun box fstatat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfstatfs\n\n\nfun box fstatfs()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfutimes\n\n\nfun box futimes()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfutimesat\n\n\nfun box futimesat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nlinkat\n\n\nfun box linkat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmkdirat\n\n\nfun box mkdirat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmkfifoat\n\n\nfun box mkfifoat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmknodat\n\n\nfun box mknodat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrenameat\n\n\nfun box renameat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsymlinkat\n\n\nfun box symlinkat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nunlinkat\n\n\nfun box unlinkat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\naccept\n\n\nfun box accept()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbind\n\n\nfun box bind()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nconnect\n\n\nfun box connect()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ngetpeername\n\n\nfun box getpeername()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ngetsockname\n\n\nfun box getsockname()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ngetsockopt\n\n\nfun box getsockopt()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nlisten\n\n\nfun box listen()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npeeloff\n\n\nfun box peeloff()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nrecv\n\n\nfun box recv()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsend\n\n\nfun box send()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsetsockopt\n\n\nfun box setsockopt()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nshutdown\n\n\nfun box shutdown()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nbindat\n\n\nfun box bindat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nconnectat\n\n\nfun box connectat()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsock_client\n\n\nfun box sock_client()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsock_server\n\n\nfun box sock_server()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmac_get\n\n\nfun box mac_get()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmac_set\n\n\nfun box mac_set()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsem_getvalue\n\n\nfun box sem_getvalue()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsem_post\n\n\nfun box sem_post()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nsem_wait\n\n\nfun box sem_wait()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nevent\n\n\nfun box event()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nkqueue_event\n\n\nfun box kqueue_event()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nioctl\n\n\nfun box ioctl()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nttyhook\n\n\nfun box ttyhook()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npdgetpid\n\n\nfun box pdgetpid()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npdwait\n\n\nfun box pdwait()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\npdkill\n\n\nfun box pdkill()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_delete\n\n\nfun box exattr_delete()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_get\n\n\nfun box exattr_get()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_list\n\n\nfun box exattr_list()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nexattr_set\n\n\nfun box exattr_set()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_check\n\n\nfun box acl_check()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_delete\n\n\nfun box acl_delete()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_get\n\n\nfun box acl_get()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nacl_set\n\n\nfun box acl_set()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nkqueue_change\n\n\nfun box kqueue_change()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nkqueue\n\n\nfun box kqueue()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Cap val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCap\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Cap val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCap\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_id\n\n\nBuild a Capsicum ID from an index and a bit position.\n\n\nfun box _id(\n  idx: U64 val,\n  bit: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nidx: \nU64\n val\n\n\nbit: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "primitive Cap"
        }, 
        {
            "location": "/capsicum-Cap/#cap", 
            "text": "The Capsicum rights.  primitive val Cap", 
            "title": "Cap"
        }, 
        {
            "location": "/capsicum-Cap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/capsicum-Cap/#create", 
            "text": "new val create()\n: Cap val^", 
            "title": "create"
        }, 
        {
            "location": "/capsicum-Cap/#returns", 
            "text": "Cap  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/capsicum-Cap/#enter", 
            "text": "This places the current process into capability mode, a mode of execution\nin which processes may only issue system calls operating on file\ndescriptors or reading limited global system state. Access to global name\nspaces, such as file system or IPC name spaces, is prevented.  fun box enter()\n: Bool val", 
            "title": "enter"
        }, 
        {
            "location": "/capsicum-Cap/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#read", 
            "text": "fun box read()\n: U64 val", 
            "title": "read"
        }, 
        {
            "location": "/capsicum-Cap/#returns_2", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#write", 
            "text": "fun box write()\n: U64 val", 
            "title": "write"
        }, 
        {
            "location": "/capsicum-Cap/#returns_3", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#seek_tell", 
            "text": "fun box seek_tell()\n: U64 val", 
            "title": "seek_tell"
        }, 
        {
            "location": "/capsicum-Cap/#returns_4", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#seek", 
            "text": "fun box seek()\n: U64 val", 
            "title": "seek"
        }, 
        {
            "location": "/capsicum-Cap/#returns_5", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#pread", 
            "text": "fun box pread()\n: U64 val", 
            "title": "pread"
        }, 
        {
            "location": "/capsicum-Cap/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#pwrite", 
            "text": "fun box pwrite()\n: U64 val", 
            "title": "pwrite"
        }, 
        {
            "location": "/capsicum-Cap/#returns_7", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap", 
            "text": "fun box mmap()\n: U64 val", 
            "title": "mmap"
        }, 
        {
            "location": "/capsicum-Cap/#returns_8", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_r", 
            "text": "fun box mmap_r()\n: U64 val", 
            "title": "mmap_r"
        }, 
        {
            "location": "/capsicum-Cap/#returns_9", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_w", 
            "text": "fun box mmap_w()\n: U64 val", 
            "title": "mmap_w"
        }, 
        {
            "location": "/capsicum-Cap/#returns_10", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_x", 
            "text": "fun box mmap_x()\n: U64 val", 
            "title": "mmap_x"
        }, 
        {
            "location": "/capsicum-Cap/#returns_11", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_rw", 
            "text": "fun box mmap_rw()\n: U64 val", 
            "title": "mmap_rw"
        }, 
        {
            "location": "/capsicum-Cap/#returns_12", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_rx", 
            "text": "fun box mmap_rx()\n: U64 val", 
            "title": "mmap_rx"
        }, 
        {
            "location": "/capsicum-Cap/#returns_13", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_wx", 
            "text": "fun box mmap_wx()\n: U64 val", 
            "title": "mmap_wx"
        }, 
        {
            "location": "/capsicum-Cap/#returns_14", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mmap_rwx", 
            "text": "fun box mmap_rwx()\n: U64 val", 
            "title": "mmap_rwx"
        }, 
        {
            "location": "/capsicum-Cap/#returns_15", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#creat", 
            "text": "fun box creat()\n: U64 val", 
            "title": "creat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_16", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fexecve", 
            "text": "fun box fexecve()\n: U64 val", 
            "title": "fexecve"
        }, 
        {
            "location": "/capsicum-Cap/#returns_17", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fsync", 
            "text": "fun box fsync()\n: U64 val", 
            "title": "fsync"
        }, 
        {
            "location": "/capsicum-Cap/#returns_18", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#ftruncate", 
            "text": "fun box ftruncate()\n: U64 val", 
            "title": "ftruncate"
        }, 
        {
            "location": "/capsicum-Cap/#returns_19", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#lookup", 
            "text": "fun box lookup()\n: U64 val", 
            "title": "lookup"
        }, 
        {
            "location": "/capsicum-Cap/#returns_20", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fchdir", 
            "text": "fun box fchdir()\n: U64 val", 
            "title": "fchdir"
        }, 
        {
            "location": "/capsicum-Cap/#returns_21", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fchflags", 
            "text": "fun box fchflags()\n: U64 val", 
            "title": "fchflags"
        }, 
        {
            "location": "/capsicum-Cap/#returns_22", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#chflagsat", 
            "text": "fun box chflagsat()\n: U64 val", 
            "title": "chflagsat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_23", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fchmod", 
            "text": "fun box fchmod()\n: U64 val", 
            "title": "fchmod"
        }, 
        {
            "location": "/capsicum-Cap/#returns_24", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fchmodat", 
            "text": "fun box fchmodat()\n: U64 val", 
            "title": "fchmodat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_25", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fchown", 
            "text": "fun box fchown()\n: U64 val", 
            "title": "fchown"
        }, 
        {
            "location": "/capsicum-Cap/#returns_26", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fchownat", 
            "text": "fun box fchownat()\n: U64 val", 
            "title": "fchownat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_27", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fcntl", 
            "text": "fun box fcntl()\n: U64 val", 
            "title": "fcntl"
        }, 
        {
            "location": "/capsicum-Cap/#returns_28", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#flock", 
            "text": "fun box flock()\n: U64 val", 
            "title": "flock"
        }, 
        {
            "location": "/capsicum-Cap/#returns_29", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fpathconf", 
            "text": "fun box fpathconf()\n: U64 val", 
            "title": "fpathconf"
        }, 
        {
            "location": "/capsicum-Cap/#returns_30", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fsck", 
            "text": "fun box fsck()\n: U64 val", 
            "title": "fsck"
        }, 
        {
            "location": "/capsicum-Cap/#returns_31", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fstat", 
            "text": "fun box fstat()\n: U64 val", 
            "title": "fstat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_32", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fstatat", 
            "text": "fun box fstatat()\n: U64 val", 
            "title": "fstatat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_33", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#fstatfs", 
            "text": "fun box fstatfs()\n: U64 val", 
            "title": "fstatfs"
        }, 
        {
            "location": "/capsicum-Cap/#returns_34", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#futimes", 
            "text": "fun box futimes()\n: U64 val", 
            "title": "futimes"
        }, 
        {
            "location": "/capsicum-Cap/#returns_35", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#futimesat", 
            "text": "fun box futimesat()\n: U64 val", 
            "title": "futimesat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_36", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#linkat", 
            "text": "fun box linkat()\n: U64 val", 
            "title": "linkat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_37", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mkdirat", 
            "text": "fun box mkdirat()\n: U64 val", 
            "title": "mkdirat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_38", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mkfifoat", 
            "text": "fun box mkfifoat()\n: U64 val", 
            "title": "mkfifoat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_39", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mknodat", 
            "text": "fun box mknodat()\n: U64 val", 
            "title": "mknodat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_40", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#renameat", 
            "text": "fun box renameat()\n: U64 val", 
            "title": "renameat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_41", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#symlinkat", 
            "text": "fun box symlinkat()\n: U64 val", 
            "title": "symlinkat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_42", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#unlinkat", 
            "text": "fun box unlinkat()\n: U64 val", 
            "title": "unlinkat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_43", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#accept", 
            "text": "fun box accept()\n: U64 val", 
            "title": "accept"
        }, 
        {
            "location": "/capsicum-Cap/#returns_44", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#bind", 
            "text": "fun box bind()\n: U64 val", 
            "title": "bind"
        }, 
        {
            "location": "/capsicum-Cap/#returns_45", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#connect", 
            "text": "fun box connect()\n: U64 val", 
            "title": "connect"
        }, 
        {
            "location": "/capsicum-Cap/#returns_46", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#getpeername", 
            "text": "fun box getpeername()\n: U64 val", 
            "title": "getpeername"
        }, 
        {
            "location": "/capsicum-Cap/#returns_47", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#getsockname", 
            "text": "fun box getsockname()\n: U64 val", 
            "title": "getsockname"
        }, 
        {
            "location": "/capsicum-Cap/#returns_48", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#getsockopt", 
            "text": "fun box getsockopt()\n: U64 val", 
            "title": "getsockopt"
        }, 
        {
            "location": "/capsicum-Cap/#returns_49", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#listen", 
            "text": "fun box listen()\n: U64 val", 
            "title": "listen"
        }, 
        {
            "location": "/capsicum-Cap/#returns_50", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#peeloff", 
            "text": "fun box peeloff()\n: U64 val", 
            "title": "peeloff"
        }, 
        {
            "location": "/capsicum-Cap/#returns_51", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#recv", 
            "text": "fun box recv()\n: U64 val", 
            "title": "recv"
        }, 
        {
            "location": "/capsicum-Cap/#returns_52", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#send", 
            "text": "fun box send()\n: U64 val", 
            "title": "send"
        }, 
        {
            "location": "/capsicum-Cap/#returns_53", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#setsockopt", 
            "text": "fun box setsockopt()\n: U64 val", 
            "title": "setsockopt"
        }, 
        {
            "location": "/capsicum-Cap/#returns_54", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#shutdown", 
            "text": "fun box shutdown()\n: U64 val", 
            "title": "shutdown"
        }, 
        {
            "location": "/capsicum-Cap/#returns_55", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#bindat", 
            "text": "fun box bindat()\n: U64 val", 
            "title": "bindat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_56", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#connectat", 
            "text": "fun box connectat()\n: U64 val", 
            "title": "connectat"
        }, 
        {
            "location": "/capsicum-Cap/#returns_57", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#sock_client", 
            "text": "fun box sock_client()\n: U64 val", 
            "title": "sock_client"
        }, 
        {
            "location": "/capsicum-Cap/#returns_58", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#sock_server", 
            "text": "fun box sock_server()\n: U64 val", 
            "title": "sock_server"
        }, 
        {
            "location": "/capsicum-Cap/#returns_59", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mac_get", 
            "text": "fun box mac_get()\n: U64 val", 
            "title": "mac_get"
        }, 
        {
            "location": "/capsicum-Cap/#returns_60", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#mac_set", 
            "text": "fun box mac_set()\n: U64 val", 
            "title": "mac_set"
        }, 
        {
            "location": "/capsicum-Cap/#returns_61", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#sem_getvalue", 
            "text": "fun box sem_getvalue()\n: U64 val", 
            "title": "sem_getvalue"
        }, 
        {
            "location": "/capsicum-Cap/#returns_62", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#sem_post", 
            "text": "fun box sem_post()\n: U64 val", 
            "title": "sem_post"
        }, 
        {
            "location": "/capsicum-Cap/#returns_63", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#sem_wait", 
            "text": "fun box sem_wait()\n: U64 val", 
            "title": "sem_wait"
        }, 
        {
            "location": "/capsicum-Cap/#returns_64", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#event", 
            "text": "fun box event()\n: U64 val", 
            "title": "event"
        }, 
        {
            "location": "/capsicum-Cap/#returns_65", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#kqueue_event", 
            "text": "fun box kqueue_event()\n: U64 val", 
            "title": "kqueue_event"
        }, 
        {
            "location": "/capsicum-Cap/#returns_66", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#ioctl", 
            "text": "fun box ioctl()\n: U64 val", 
            "title": "ioctl"
        }, 
        {
            "location": "/capsicum-Cap/#returns_67", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#ttyhook", 
            "text": "fun box ttyhook()\n: U64 val", 
            "title": "ttyhook"
        }, 
        {
            "location": "/capsicum-Cap/#returns_68", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#pdgetpid", 
            "text": "fun box pdgetpid()\n: U64 val", 
            "title": "pdgetpid"
        }, 
        {
            "location": "/capsicum-Cap/#returns_69", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#pdwait", 
            "text": "fun box pdwait()\n: U64 val", 
            "title": "pdwait"
        }, 
        {
            "location": "/capsicum-Cap/#returns_70", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#pdkill", 
            "text": "fun box pdkill()\n: U64 val", 
            "title": "pdkill"
        }, 
        {
            "location": "/capsicum-Cap/#returns_71", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#exattr_delete", 
            "text": "fun box exattr_delete()\n: U64 val", 
            "title": "exattr_delete"
        }, 
        {
            "location": "/capsicum-Cap/#returns_72", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#exattr_get", 
            "text": "fun box exattr_get()\n: U64 val", 
            "title": "exattr_get"
        }, 
        {
            "location": "/capsicum-Cap/#returns_73", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#exattr_list", 
            "text": "fun box exattr_list()\n: U64 val", 
            "title": "exattr_list"
        }, 
        {
            "location": "/capsicum-Cap/#returns_74", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#exattr_set", 
            "text": "fun box exattr_set()\n: U64 val", 
            "title": "exattr_set"
        }, 
        {
            "location": "/capsicum-Cap/#returns_75", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#acl_check", 
            "text": "fun box acl_check()\n: U64 val", 
            "title": "acl_check"
        }, 
        {
            "location": "/capsicum-Cap/#returns_76", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#acl_delete", 
            "text": "fun box acl_delete()\n: U64 val", 
            "title": "acl_delete"
        }, 
        {
            "location": "/capsicum-Cap/#returns_77", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#acl_get", 
            "text": "fun box acl_get()\n: U64 val", 
            "title": "acl_get"
        }, 
        {
            "location": "/capsicum-Cap/#returns_78", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#acl_set", 
            "text": "fun box acl_set()\n: U64 val", 
            "title": "acl_set"
        }, 
        {
            "location": "/capsicum-Cap/#returns_79", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#kqueue_change", 
            "text": "fun box kqueue_change()\n: U64 val", 
            "title": "kqueue_change"
        }, 
        {
            "location": "/capsicum-Cap/#returns_80", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#kqueue", 
            "text": "fun box kqueue()\n: U64 val", 
            "title": "kqueue"
        }, 
        {
            "location": "/capsicum-Cap/#returns_81", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#eq", 
            "text": "fun box eq(\n  that: Cap val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/capsicum-Cap/#parameters", 
            "text": "that:  Cap  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-Cap/#returns_82", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#ne", 
            "text": "fun box ne(\n  that: Cap val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/capsicum-Cap/#parameters_1", 
            "text": "that:  Cap  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-Cap/#returns_83", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/capsicum-Cap/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/capsicum-Cap/#_id", 
            "text": "Build a Capsicum ID from an index and a bit position.  fun box _id(\n  idx: U64 val,\n  bit: U64 val)\n: U64 val", 
            "title": "_id"
        }, 
        {
            "location": "/capsicum-Cap/#parameters_2", 
            "text": "idx:  U64  val  bit:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/capsicum-Cap/#returns_84", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli--index/", 
            "text": "CLI Package\n\n\nThe CLI package provides enhanced Posix+GNU command line parsing with the\nfeature of commands that can be specified in a hierarchy.\n\n\nSee \nRFC-0038\n for more background.\n\n\nThe general EBNF of a command line is:\n\n\n  command_line ::= root_command (option | command)* (option | arg)*\n  command ::= alphanum_word\n  alphanum_word ::= alphachar(alphachar | numchar | '_' | '-')*\n  option ::= longoption | shortoptionset\n  longoption ::= '--'alphanum_word['='arg | ' 'arg]\n  shortoptionset := '-'alphachar[alphachar]...['='arg | ' 'arg]\n  arg := boolarg | intarg | floatarg | stringarg\n  boolarg := 'true' | 'false'\n  intarg\n := ['-'] numchar...\n  floatarg ::= ['-'] numchar... ['.' numchar...]\n  stringarg ::= anychar\n\n\n\n\nSome examples:\n\n\n  usage: ls [\noptions\n] [\nargs\n ...]\n  usage: make [\noptions\n] \ncommand\n [\noptions\n] [\nargs\n ...]\n  usage: chat [\noptions\n] \ncommand\n  \nsubcommand\n [\noptions\n] [\nargs\n ...]\n\n\n\n\nUsage\n\n\nThe types in the cli package are broken down into three groups:\n\n\nSpecs\n\n\nPony programs use constructors to create the spec objects to specify their\ncommand line syntax. Many aspects of the spec are checked for correctness at\ncompile time, and the result represents everything the parser needs to know\nwhen parsing a command line or forming syntax help messages.\n\n\nOption and Arg value types\n\n\nOptions and Args parse values from the command line as one of four Pony types:\n\nBool\n, \nString\n, \nI64\n and \nF64\n. Values of each of these types can then be\nretrieved using the corresponding accessor funtions.\n\n\nIn addition, there is a string_seq type that accepts string values from the\ncommand line and collects them into a sequence which can then be retrieved as\na \nReadSeq[String]\n using the \nstring_seq()\n accessor function.\n\n\nSome specific details:\n\n\n\n\n\n\nbool Options: have a default value of 'true' if no value is given. That is,\n  \n-f\n is equivalent to \n-f=true\n.\n\n\n\n\n\n\nstring_seq Options: the option prefix has to be used each time, like:\n  \n--file=f1 --file=f2 --file=f3\n with the results being collected into\n  a single sequence.\n\n\n\n\n\n\nstring_seq Args: there is no way to indicate termination, so a string_seq\n  Arg should be the last arg for a command, and will consume all remaining\n  command line arguments.\n\n\n\n\n\n\nParser\n\n\nPrograms then use the CommandSpec they've built to instantiate a parser to\nparse any given command line. This is often env.args(), but could also be\ncommands from files or other input sources. The result of a parse is either a\nparsed command, a command help, or a syntax error object.\n\n\nCommands\n\n\nPrograms then match the object returned by the parser to determine what kind\nit is. Errors and help requests typically print messages and exit. For\ncommands, the fullname can be matched and the effective values for the\ncommand's options and arguments can be retrieved.\n\n\nExample program\n\n\nThis program echos its command line arguments with the option of uppercasing\nthem.\n\n\nuse \ncli\n\n\nactor Main\n  new create(env: Env) =\n\n    let cs =\n      try\n        CommandSpec.leaf(\necho\n, \nA sample echo program\n, [\n          OptionSpec.bool(\nupper\n, \nUppercase words\n\n            where short' = 'U', default' = false)\n        ], [\n          ArgSpec.string_seq(\nwords\n, \nThe words to echo\n)\n        ])? .\n add_help()?\n      else\n        env.exitcode(-1)  // some kind of coding error\n        return\n      end\n\n    let cmd =\n      match CommandParser(cs).parse(env.args, env.vars())\n      | let c: Command =\n c\n      | let ch: CommandHelp =\n\n          ch.print_help(env.out)\n          env.exitcode(0)\n          return\n      | let se: SyntaxError =\n\n          env.out.print(se.string())\n          env.exitcode(1)\n          return\n      end\n\n    let upper = cmd.option(\nupper\n).bool()\n    let words = cmd.arg(\nwords\n).string_seq()\n    for word in words.values() do\n      env.out.write(if upper then word.upper() else word end + \n \n)\n    end\n    env.out.print(\n)\n\n\n\n\nPublic Types\n\n\n\n\nprimitive EnvVars\n\n\nclass CommandSpec\n\n\nclass OptionSpec\n\n\nclass ArgSpec\n\n\nclass CommandParser\n\n\nprimitive Help\n\n\nclass CommandHelp\n\n\nclass Command\n\n\nclass Option\n\n\nclass Arg\n\n\nclass SyntaxError\n\n\n\n\nPrivate Types\n\n\n\n\nclass _StringSeq\n\n\ntype _Value\n\n\ntrait _ValueType\n\n\nprimitive _BoolType\n\n\nprimitive _StringType\n\n\nprimitive _I64Type\n\n\nprimitive _F64Type\n\n\nprimitive _StringSeqType\n\n\nprimitive _OptionParser\n\n\nprimitive _ArgParser\n\n\nprimitive _ValueParser\n\n\nprimitive _Columns\n\n\nprimitive _Fixtures", 
            "title": "Package"
        }, 
        {
            "location": "/cli--index/#cli-package", 
            "text": "The CLI package provides enhanced Posix+GNU command line parsing with the\nfeature of commands that can be specified in a hierarchy.  See  RFC-0038  for more background.  The general EBNF of a command line is:    command_line ::= root_command (option | command)* (option | arg)*\n  command ::= alphanum_word\n  alphanum_word ::= alphachar(alphachar | numchar | '_' | '-')*\n  option ::= longoption | shortoptionset\n  longoption ::= '--'alphanum_word['='arg | ' 'arg]\n  shortoptionset := '-'alphachar[alphachar]...['='arg | ' 'arg]\n  arg := boolarg | intarg | floatarg | stringarg\n  boolarg := 'true' | 'false'\n  intarg  := ['-'] numchar...\n  floatarg ::= ['-'] numchar... ['.' numchar...]\n  stringarg ::= anychar  Some examples:    usage: ls [ options ] [ args  ...]\n  usage: make [ options ]  command  [ options ] [ args  ...]\n  usage: chat [ options ]  command    subcommand  [ options ] [ args  ...]", 
            "title": "CLI Package"
        }, 
        {
            "location": "/cli--index/#usage", 
            "text": "The types in the cli package are broken down into three groups:", 
            "title": "Usage"
        }, 
        {
            "location": "/cli--index/#specs", 
            "text": "Pony programs use constructors to create the spec objects to specify their\ncommand line syntax. Many aspects of the spec are checked for correctness at\ncompile time, and the result represents everything the parser needs to know\nwhen parsing a command line or forming syntax help messages.", 
            "title": "Specs"
        }, 
        {
            "location": "/cli--index/#option-and-arg-value-types", 
            "text": "Options and Args parse values from the command line as one of four Pony types: Bool ,  String ,  I64  and  F64 . Values of each of these types can then be\nretrieved using the corresponding accessor funtions.  In addition, there is a string_seq type that accepts string values from the\ncommand line and collects them into a sequence which can then be retrieved as\na  ReadSeq[String]  using the  string_seq()  accessor function.  Some specific details:    bool Options: have a default value of 'true' if no value is given. That is,\n   -f  is equivalent to  -f=true .    string_seq Options: the option prefix has to be used each time, like:\n   --file=f1 --file=f2 --file=f3  with the results being collected into\n  a single sequence.    string_seq Args: there is no way to indicate termination, so a string_seq\n  Arg should be the last arg for a command, and will consume all remaining\n  command line arguments.", 
            "title": "Option and Arg value types"
        }, 
        {
            "location": "/cli--index/#parser", 
            "text": "Programs then use the CommandSpec they've built to instantiate a parser to\nparse any given command line. This is often env.args(), but could also be\ncommands from files or other input sources. The result of a parse is either a\nparsed command, a command help, or a syntax error object.", 
            "title": "Parser"
        }, 
        {
            "location": "/cli--index/#commands", 
            "text": "Programs then match the object returned by the parser to determine what kind\nit is. Errors and help requests typically print messages and exit. For\ncommands, the fullname can be matched and the effective values for the\ncommand's options and arguments can be retrieved.", 
            "title": "Commands"
        }, 
        {
            "location": "/cli--index/#example-program", 
            "text": "This program echos its command line arguments with the option of uppercasing\nthem.  use  cli \n\nactor Main\n  new create(env: Env) = \n    let cs =\n      try\n        CommandSpec.leaf( echo ,  A sample echo program , [\n          OptionSpec.bool( upper ,  Uppercase words \n            where short' = 'U', default' = false)\n        ], [\n          ArgSpec.string_seq( words ,  The words to echo )\n        ])? .  add_help()?\n      else\n        env.exitcode(-1)  // some kind of coding error\n        return\n      end\n\n    let cmd =\n      match CommandParser(cs).parse(env.args, env.vars())\n      | let c: Command =  c\n      | let ch: CommandHelp = \n          ch.print_help(env.out)\n          env.exitcode(0)\n          return\n      | let se: SyntaxError = \n          env.out.print(se.string())\n          env.exitcode(1)\n          return\n      end\n\n    let upper = cmd.option( upper ).bool()\n    let words = cmd.arg( words ).string_seq()\n    for word in words.values() do\n      env.out.write(if upper then word.upper() else word end +    )\n    end\n    env.out.print( )", 
            "title": "Example program"
        }, 
        {
            "location": "/cli--index/#public-types", 
            "text": "primitive EnvVars  class CommandSpec  class OptionSpec  class ArgSpec  class CommandParser  primitive Help  class CommandHelp  class Command  class Option  class Arg  class SyntaxError", 
            "title": "Public Types"
        }, 
        {
            "location": "/cli--index/#private-types", 
            "text": "class _StringSeq  type _Value  trait _ValueType  primitive _BoolType  primitive _StringType  primitive _I64Type  primitive _F64Type  primitive _StringSeqType  primitive _OptionParser  primitive _ArgParser  primitive _ValueParser  primitive _Columns  primitive _Fixtures", 
            "title": "Private Types"
        }, 
        {
            "location": "/cli-EnvVars/", 
            "text": "EnvVars\n\n\nprimitive val EnvVars\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: EnvVars val^\n\n\n\n\nReturns\n\n\n\n\nEnvVars\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nTurns an array of strings that look like environment variables, ie.\nkey=value, into a map of string to string. Can optionally filter for\nkeys matching a 'prefix', and will squash resulting keys to lowercase\niff 'squash' is true.\n\n\nSo:\n  \n=\n\nbecomes:\n  {KEY, VALUE} or {key, VALUE}\n\n\nfun box apply(\n  envs: (Array[String val] box | None val),\n  prefix: String val = seq,\n  squash: Bool val = seq)\n: HashMap[String val, String val, HashEq[String val] val] val\n\n\n\n\nParameters\n\n\n\n\nenvs: (\nArray\n[\nString\n val] box | \nNone\n val)\n\n\nprefix: \nString\n val = seq\n\n\nsquash: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: EnvVars val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nEnvVars\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: EnvVars val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nEnvVars\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive EnvVars"
        }, 
        {
            "location": "/cli-EnvVars/#envvars", 
            "text": "primitive val EnvVars", 
            "title": "EnvVars"
        }, 
        {
            "location": "/cli-EnvVars/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-EnvVars/#create", 
            "text": "new val create()\n: EnvVars val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-EnvVars/#returns", 
            "text": "EnvVars  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-EnvVars/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-EnvVars/#apply", 
            "text": "Turns an array of strings that look like environment variables, ie.\nkey=value, into a map of string to string. Can optionally filter for\nkeys matching a 'prefix', and will squash resulting keys to lowercase\niff 'squash' is true.  So:\n   = \nbecomes:\n  {KEY, VALUE} or {key, VALUE}  fun box apply(\n  envs: (Array[String val] box | None val),\n  prefix: String val = seq,\n  squash: Bool val = seq)\n: HashMap[String val, String val, HashEq[String val] val] val", 
            "title": "apply"
        }, 
        {
            "location": "/cli-EnvVars/#parameters", 
            "text": "envs: ( Array [ String  val] box |  None  val)  prefix:  String  val = seq  squash:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-EnvVars/#returns_1", 
            "text": "HashMap [ String  val,  String  val,  HashEq [ String  val] val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-EnvVars/#eq", 
            "text": "fun box eq(\n  that: EnvVars val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-EnvVars/#parameters_1", 
            "text": "that:  EnvVars  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-EnvVars/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-EnvVars/#ne", 
            "text": "fun box ne(\n  that: EnvVars val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-EnvVars/#parameters_2", 
            "text": "that:  EnvVars  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-EnvVars/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/", 
            "text": "CommandSpec\n\n\nCommandSpec describes the specification of a parent or leaf command. Each\ncommand has the following attributes:\n\n\n\n\na name: a simple string token that identifies the command.\n\n\na description: used in the syntax message.\n\n\na map of options: the valid options for this command.\n\n\nan optional help option+command name for help parsing\n\n\none of:\n\n\na Map of child commands.\n\n\nan Array of arguments.\n\n\n\n\nclass ref CommandSpec\n\n\n\n\nConstructors\n\n\nparent\n\n\nnew ref parent(\n  name': String val,\n  descr': String val = seq,\n  options': Array[OptionSpec val] box = seq,\n  commands': Array[CommandSpec ref] box = seq)\n: CommandSpec ref^ ?\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\noptions': \nArray\n[\nOptionSpec\n val] box = seq\n\n\ncommands': \nArray\n[\nCommandSpec\n ref] box = seq\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n ref^ ?\n\n\n\n\n\n\nleaf\n\n\nnew ref leaf(\n  name': String val,\n  descr': String val = seq,\n  options': Array[OptionSpec val] box = seq,\n  args': Array[ArgSpec val] box = seq)\n: CommandSpec ref^ ?\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\noptions': \nArray\n[\nOptionSpec\n val] box = seq\n\n\nargs': \nArray\n[\nArgSpec\n val] box = seq\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n ref^ ?\n\n\n\n\n\n\nPublic Functions\n\n\nadd_command\n\n\nAdds an additional child command to this parent command.\n\n\nfun ref add_command(\n  cmd: CommandSpec box)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ncmd: \nCommandSpec\n box\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nadd_help\n\n\nAdds a standard help option and, optionally command, to a root command.\n\n\nfun ref add_help(\n  hname: String val = seq)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nhname: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nname\n\n\nReturns the name of this command.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndescr\n\n\nReturns the description for this command.\n\n\nfun box descr()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\noptions\n\n\nReturns a map by name of the named options of this command.\n\n\nfun box options()\n: HashMap[String val, OptionSpec val, HashEq[String val] val] box\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[\nString\n val, \nOptionSpec\n val, \nHashEq\n[\nString\n val] val] box\n\n\n\n\n\n\ncommands\n\n\nReturns a map by name of the child commands of this command.\n\n\nfun box commands()\n: HashMap[String val, CommandSpec box, HashEq[String val] val] box\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[\nString\n val, \nCommandSpec\n box, \nHashEq\n[\nString\n val] val] box\n\n\n\n\n\n\nargs\n\n\nReturns an array of the positional arguments of this command.\n\n\nfun box args()\n: Array[ArgSpec val] box\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nArgSpec\n val] box\n\n\n\n\n\n\nhelp_name\n\n\nReturns the name of the help command, which defaults to \"help\".\n\n\nfun box help_name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nhelp_string\n\n\nReturns a formated help string for this command and all of its arguments.\n\n\nfun box help_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_assertName\n\n\nfun tag _assertName(\n  nm: String val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\nnm: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?", 
            "title": "class CommandSpec"
        }, 
        {
            "location": "/cli-CommandSpec/#commandspec", 
            "text": "CommandSpec describes the specification of a parent or leaf command. Each\ncommand has the following attributes:   a name: a simple string token that identifies the command.  a description: used in the syntax message.  a map of options: the valid options for this command.  an optional help option+command name for help parsing  one of:  a Map of child commands.  an Array of arguments.   class ref CommandSpec", 
            "title": "CommandSpec"
        }, 
        {
            "location": "/cli-CommandSpec/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-CommandSpec/#parent", 
            "text": "new ref parent(\n  name': String val,\n  descr': String val = seq,\n  options': Array[OptionSpec val] box = seq,\n  commands': Array[CommandSpec ref] box = seq)\n: CommandSpec ref^ ?", 
            "title": "parent"
        }, 
        {
            "location": "/cli-CommandSpec/#parameters", 
            "text": "name':  String  val  descr':  String  val = seq  options':  Array [ OptionSpec  val] box = seq  commands':  Array [ CommandSpec  ref] box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandSpec/#returns", 
            "text": "CommandSpec  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#leaf", 
            "text": "new ref leaf(\n  name': String val,\n  descr': String val = seq,\n  options': Array[OptionSpec val] box = seq,\n  args': Array[ArgSpec val] box = seq)\n: CommandSpec ref^ ?", 
            "title": "leaf"
        }, 
        {
            "location": "/cli-CommandSpec/#parameters_1", 
            "text": "name':  String  val  descr':  String  val = seq  options':  Array [ OptionSpec  val] box = seq  args':  Array [ ArgSpec  val] box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_1", 
            "text": "CommandSpec  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-CommandSpec/#add_command", 
            "text": "Adds an additional child command to this parent command.  fun ref add_command(\n  cmd: CommandSpec box)\n: None val ?", 
            "title": "add_command"
        }, 
        {
            "location": "/cli-CommandSpec/#parameters_2", 
            "text": "cmd:  CommandSpec  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_2", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#add_help", 
            "text": "Adds a standard help option and, optionally command, to a root command.  fun ref add_help(\n  hname: String val = seq)\n: None val ?", 
            "title": "add_help"
        }, 
        {
            "location": "/cli-CommandSpec/#parameters_3", 
            "text": "hname:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_3", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#name", 
            "text": "Returns the name of this command.  fun box name()\n: String val", 
            "title": "name"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_4", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#descr", 
            "text": "Returns the description for this command.  fun box descr()\n: String val", 
            "title": "descr"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_5", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#options", 
            "text": "Returns a map by name of the named options of this command.  fun box options()\n: HashMap[String val, OptionSpec val, HashEq[String val] val] box", 
            "title": "options"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_6", 
            "text": "HashMap [ String  val,  OptionSpec  val,  HashEq [ String  val] val] box", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#commands", 
            "text": "Returns a map by name of the child commands of this command.  fun box commands()\n: HashMap[String val, CommandSpec box, HashEq[String val] val] box", 
            "title": "commands"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_7", 
            "text": "HashMap [ String  val,  CommandSpec  box,  HashEq [ String  val] val] box", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#args", 
            "text": "Returns an array of the positional arguments of this command.  fun box args()\n: Array[ArgSpec val] box", 
            "title": "args"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_8", 
            "text": "Array [ ArgSpec  val] box", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#help_name", 
            "text": "Returns the name of the help command, which defaults to \"help\".  fun box help_name()\n: String val", 
            "title": "help_name"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_9", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#help_string", 
            "text": "Returns a formated help string for this command and all of its arguments.  fun box help_string()\n: String val", 
            "title": "help_string"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_10", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandSpec/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-CommandSpec/#_assertname", 
            "text": "fun tag _assertName(\n  nm: String val)\n: String val ?", 
            "title": "_assertName"
        }, 
        {
            "location": "/cli-CommandSpec/#parameters_4", 
            "text": "nm:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandSpec/#returns_11", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/", 
            "text": "OptionSpec\n\n\nOptionSpec describes the specification of a named Option. They have a name,\ndescr(iption), a short-name, a typ(e), and a default value when they are not\nrequired.\n\n\nOptions can be placed anywhere before or after commands, and can be thought\nof as named arguments.\n\n\nclass val OptionSpec\n\n\n\n\nConstructors\n\n\nbool\n\n\nCreates an Option with a Bool typed value that can be used like\n  \n--opt\n or \n-O\n or \n--opt=true\n or \n-O=true\n\nto yield an option value like\n  \ncmd.option(\"opt\").bool() == true\n.\n\n\nnew val bool(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (Bool val | None val) = seq)\n: OptionSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\nshort': (\nU8\n val | \nNone\n val) = seq\n\n\ndefault': (\nBool\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nOptionSpec\n val^\n\n\n\n\n\n\nstring\n\n\nCreates an Option with a String typed value that can be used like\n  \n--file=dir/filename\n or \n-F=dir/filename\n or \n-Fdir/filename\n\nto yield an option value like\n  \ncmd.option(\"file\").string() == \"dir/filename\"\n.\n\n\nnew val string(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (String val | None val) = seq)\n: OptionSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\nshort': (\nU8\n val | \nNone\n val) = seq\n\n\ndefault': (\nString\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nOptionSpec\n val^\n\n\n\n\n\n\ni64\n\n\nCreates an Option with an I64 typed value that can be used like\n  \n--count=42 -C=42\n\nto yield an option value like\n  \ncmd.option(\"count\").i64() == I64(64)\n.\n\n\nnew val i64(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (I64 val | None val) = seq)\n: OptionSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\nshort': (\nU8\n val | \nNone\n val) = seq\n\n\ndefault': (\nI64\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nOptionSpec\n val^\n\n\n\n\n\n\nf64\n\n\nCreates an Option with a F64 typed value that can be used like\n  \n--ratio=1.039\n or \n-R=1.039\n\nto yield an option value like\n  \ncmd.option(\"ratio\").f64() == F64(1.039)\n.\n\n\nnew val f64(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (F64 val | None val) = seq)\n: OptionSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\nshort': (\nU8\n val | \nNone\n val) = seq\n\n\ndefault': (\nF64\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nOptionSpec\n val^\n\n\n\n\n\n\nstring_seq\n\n\nCreates an Option with a ReadSeq[String] typed value that can be used like\n  \n--files=file1 --files=files2 --files=files2\n\nto yield a sequence of three strings equivalent to\n  \ncmd.option(\"ratio\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"]\n.\n\n\nnew val string_seq(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq)\n: OptionSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\nshort': (\nU8\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nOptionSpec\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nname\n\n\nReturns the name of this option.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndescr\n\n\nReturns the description for this option.\n\n\nfun box descr()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nrequired\n\n\nReturns true iff this option is required to be present in the command line.\n\n\nfun box required()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhelp_string\n\n\nReturns a formated help string for this option.\n\n\nfun box help_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndeb_string\n\n\nfun box deb_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_init\n\n\nfun tag _init(\n  typ': _ValueType val,\n  default': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val | None val))\n: (_ValueType val , (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) , Bool val)\n\n\n\n\nParameters\n\n\n\n\ntyp': \n_ValueType\n val\n\n\ndefault': (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\n(\n_ValueType\n val , (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val) , \nBool\n val)\n\n\n\n\n\n\n_typ_p\n\n\nfun box _typ_p()\n: _ValueType val\n\n\n\n\nReturns\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\n_default_p\n\n\nfun box _default_p()\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\n_requires_arg\n\n\nfun box _requires_arg()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_default_arg\n\n\nfun box _default_arg()\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\n_has_short\n\n\nfun box _has_short(\n  sh: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsh: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class OptionSpec"
        }, 
        {
            "location": "/cli-OptionSpec/#optionspec", 
            "text": "OptionSpec describes the specification of a named Option. They have a name,\ndescr(iption), a short-name, a typ(e), and a default value when they are not\nrequired.  Options can be placed anywhere before or after commands, and can be thought\nof as named arguments.  class val OptionSpec", 
            "title": "OptionSpec"
        }, 
        {
            "location": "/cli-OptionSpec/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-OptionSpec/#bool", 
            "text": "Creates an Option with a Bool typed value that can be used like\n   --opt  or  -O  or  --opt=true  or  -O=true \nto yield an option value like\n   cmd.option(\"opt\").bool() == true .  new val bool(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (Bool val | None val) = seq)\n: OptionSpec val^", 
            "title": "bool"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters", 
            "text": "name':  String  val  descr':  String  val = seq  short': ( U8  val |  None  val) = seq  default': ( Bool  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns", 
            "text": "OptionSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#string", 
            "text": "Creates an Option with a String typed value that can be used like\n   --file=dir/filename  or  -F=dir/filename  or  -Fdir/filename \nto yield an option value like\n   cmd.option(\"file\").string() == \"dir/filename\" .  new val string(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (String val | None val) = seq)\n: OptionSpec val^", 
            "title": "string"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters_1", 
            "text": "name':  String  val  descr':  String  val = seq  short': ( U8  val |  None  val) = seq  default': ( String  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_1", 
            "text": "OptionSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#i64", 
            "text": "Creates an Option with an I64 typed value that can be used like\n   --count=42 -C=42 \nto yield an option value like\n   cmd.option(\"count\").i64() == I64(64) .  new val i64(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (I64 val | None val) = seq)\n: OptionSpec val^", 
            "title": "i64"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters_2", 
            "text": "name':  String  val  descr':  String  val = seq  short': ( U8  val |  None  val) = seq  default': ( I64  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_2", 
            "text": "OptionSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#f64", 
            "text": "Creates an Option with a F64 typed value that can be used like\n   --ratio=1.039  or  -R=1.039 \nto yield an option value like\n   cmd.option(\"ratio\").f64() == F64(1.039) .  new val f64(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq,\n  default': (F64 val | None val) = seq)\n: OptionSpec val^", 
            "title": "f64"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters_3", 
            "text": "name':  String  val  descr':  String  val = seq  short': ( U8  val |  None  val) = seq  default': ( F64  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_3", 
            "text": "OptionSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#string_seq", 
            "text": "Creates an Option with a ReadSeq[String] typed value that can be used like\n   --files=file1 --files=files2 --files=files2 \nto yield a sequence of three strings equivalent to\n   cmd.option(\"ratio\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"] .  new val string_seq(\n  name': String val,\n  descr': String val = seq,\n  short': (U8 val | None val) = seq)\n: OptionSpec val^", 
            "title": "string_seq"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters_4", 
            "text": "name':  String  val  descr':  String  val = seq  short': ( U8  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_4", 
            "text": "OptionSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-OptionSpec/#name", 
            "text": "Returns the name of this option.  fun box name()\n: String val", 
            "title": "name"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_5", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#descr", 
            "text": "Returns the description for this option.  fun box descr()\n: String val", 
            "title": "descr"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_6", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#required", 
            "text": "Returns true iff this option is required to be present in the command line.  fun box required()\n: Bool val", 
            "title": "required"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#help_string", 
            "text": "Returns a formated help string for this option.  fun box help_string()\n: String val", 
            "title": "help_string"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_8", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#deb_string", 
            "text": "fun box deb_string()\n: String val", 
            "title": "deb_string"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_9", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-OptionSpec/#_init", 
            "text": "fun tag _init(\n  typ': _ValueType val,\n  default': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val | None val))\n: (_ValueType val , (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) , Bool val)", 
            "title": "_init"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters_5", 
            "text": "typ':  _ValueType  val  default': ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_10", 
            "text": "( _ValueType  val , ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val) ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#_typ_p", 
            "text": "fun box _typ_p()\n: _ValueType val", 
            "title": "_typ_p"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_11", 
            "text": "_ValueType  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#_default_p", 
            "text": "fun box _default_p()\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "_default_p"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_12", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#_requires_arg", 
            "text": "fun box _requires_arg()\n: Bool val", 
            "title": "_requires_arg"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#_default_arg", 
            "text": "fun box _default_arg()\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "_default_arg"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_14", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-OptionSpec/#_has_short", 
            "text": "fun box _has_short(\n  sh: U8 val)\n: Bool val", 
            "title": "_has_short"
        }, 
        {
            "location": "/cli-OptionSpec/#parameters_6", 
            "text": "sh:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-OptionSpec/#returns_15", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/", 
            "text": "ArgSpec\n\n\nArgSpec describes the specification of a positional Arg(ument). They have a\nname, descr(iption), a typ(e), and a default value when they are not\nrequired.\n\n\nArgs always come after a leaf command, and are assigned in their positional\norder.\n\n\nclass val ArgSpec\n\n\n\n\nConstructors\n\n\nbool\n\n\nCreates an Arg with a Bool typed value that can be used like\n  \ncmd\n true\n\nto yield an arg value like\n  \ncmd.arg(\"opt\").bool() == true\n.\n\n\nnew val bool(\n  name': String val,\n  descr': String val = seq,\n  default': (Bool val | None val) = seq)\n: ArgSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\ndefault': (\nBool\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nArgSpec\n val^\n\n\n\n\n\n\nstring\n\n\nCreates an Arg with a String typed value that can be used like\n  \ncmd\n filename\n\nto yield an arg value\n  \ncmd.arg(\"file\").string() == \"filename\"\n.\n\n\nnew val string(\n  name': String val,\n  descr': String val = seq,\n  default': (String val | None val) = seq)\n: ArgSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\ndefault': (\nString\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nArgSpec\n val^\n\n\n\n\n\n\ni64\n\n\nCreates an Arg with an I64 typed value that can be used like\n  \ncmd\n 42\n\nto yield an arg value like\n  \ncmd.arg(\"count\").i64() == I64(42)\n.\n\n\nnew val i64(\n  name': String val,\n  descr': String val = seq,\n  default': (I64 val | None val) = seq)\n: ArgSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\ndefault': (\nI64\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nArgSpec\n val^\n\n\n\n\n\n\nf64\n\n\nCreates an Arg with a F64 typed value that can be used like\n  \ncmd\n 1.039\n\nto yield an arg value like\n  \ncmd.arg(\"ratio\").f64() == F64(1.039)\n.\n\n\nnew val f64(\n  name': String val,\n  descr': String val = seq,\n  default': (F64 val | None val) = seq)\n: ArgSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\ndefault': (\nF64\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nArgSpec\n val^\n\n\n\n\n\n\nstring_seq\n\n\nCreates an Arg with a ReadSeq[String] typed value that can be used like\n  \ncmd\n file1 file2 file3\n\nto yield a sequence of three strings equivalent to\n  \ncmd.arg(\"file\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"]\n.\n\n\nnew val string_seq(\n  name': String val,\n  descr': String val = seq)\n: ArgSpec val^\n\n\n\n\nParameters\n\n\n\n\nname': \nString\n val\n\n\ndescr': \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArgSpec\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nname\n\n\nReturns the name of this arg.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndescr\n\n\nReturns the description for this arg.\n\n\nfun box descr()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nrequired\n\n\nReturns true iff this arg is required to be present in the command line.\n\n\nfun box required()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhelp_string\n\n\nReturns a formated help string for this arg.\n\n\nfun box help_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndeb_string\n\n\nfun box deb_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_init\n\n\nfun tag _init(\n  typ': _ValueType val,\n  default': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val | None val))\n: (_ValueType val , (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) , Bool val)\n\n\n\n\nParameters\n\n\n\n\ntyp': \n_ValueType\n val\n\n\ndefault': (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\n(\n_ValueType\n val , (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val) , \nBool\n val)\n\n\n\n\n\n\n_typ_p\n\n\nfun box _typ_p()\n: _ValueType val\n\n\n\n\nReturns\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\n_default_p\n\n\nfun box _default_p()\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)", 
            "title": "class ArgSpec"
        }, 
        {
            "location": "/cli-ArgSpec/#argspec", 
            "text": "ArgSpec describes the specification of a positional Arg(ument). They have a\nname, descr(iption), a typ(e), and a default value when they are not\nrequired.  Args always come after a leaf command, and are assigned in their positional\norder.  class val ArgSpec", 
            "title": "ArgSpec"
        }, 
        {
            "location": "/cli-ArgSpec/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-ArgSpec/#bool", 
            "text": "Creates an Arg with a Bool typed value that can be used like\n   cmd  true \nto yield an arg value like\n   cmd.arg(\"opt\").bool() == true .  new val bool(\n  name': String val,\n  descr': String val = seq,\n  default': (Bool val | None val) = seq)\n: ArgSpec val^", 
            "title": "bool"
        }, 
        {
            "location": "/cli-ArgSpec/#parameters", 
            "text": "name':  String  val  descr':  String  val = seq  default': ( Bool  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-ArgSpec/#returns", 
            "text": "ArgSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#string", 
            "text": "Creates an Arg with a String typed value that can be used like\n   cmd  filename \nto yield an arg value\n   cmd.arg(\"file\").string() == \"filename\" .  new val string(\n  name': String val,\n  descr': String val = seq,\n  default': (String val | None val) = seq)\n: ArgSpec val^", 
            "title": "string"
        }, 
        {
            "location": "/cli-ArgSpec/#parameters_1", 
            "text": "name':  String  val  descr':  String  val = seq  default': ( String  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_1", 
            "text": "ArgSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#i64", 
            "text": "Creates an Arg with an I64 typed value that can be used like\n   cmd  42 \nto yield an arg value like\n   cmd.arg(\"count\").i64() == I64(42) .  new val i64(\n  name': String val,\n  descr': String val = seq,\n  default': (I64 val | None val) = seq)\n: ArgSpec val^", 
            "title": "i64"
        }, 
        {
            "location": "/cli-ArgSpec/#parameters_2", 
            "text": "name':  String  val  descr':  String  val = seq  default': ( I64  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_2", 
            "text": "ArgSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#f64", 
            "text": "Creates an Arg with a F64 typed value that can be used like\n   cmd  1.039 \nto yield an arg value like\n   cmd.arg(\"ratio\").f64() == F64(1.039) .  new val f64(\n  name': String val,\n  descr': String val = seq,\n  default': (F64 val | None val) = seq)\n: ArgSpec val^", 
            "title": "f64"
        }, 
        {
            "location": "/cli-ArgSpec/#parameters_3", 
            "text": "name':  String  val  descr':  String  val = seq  default': ( F64  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_3", 
            "text": "ArgSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#string_seq", 
            "text": "Creates an Arg with a ReadSeq[String] typed value that can be used like\n   cmd  file1 file2 file3 \nto yield a sequence of three strings equivalent to\n   cmd.arg(\"file\").string_seq() (equiv) [\"file1\"; \"file2\"; \"file3\"] .  new val string_seq(\n  name': String val,\n  descr': String val = seq)\n: ArgSpec val^", 
            "title": "string_seq"
        }, 
        {
            "location": "/cli-ArgSpec/#parameters_4", 
            "text": "name':  String  val  descr':  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_4", 
            "text": "ArgSpec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-ArgSpec/#name", 
            "text": "Returns the name of this arg.  fun box name()\n: String val", 
            "title": "name"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_5", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#descr", 
            "text": "Returns the description for this arg.  fun box descr()\n: String val", 
            "title": "descr"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_6", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#required", 
            "text": "Returns true iff this arg is required to be present in the command line.  fun box required()\n: Bool val", 
            "title": "required"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#help_string", 
            "text": "Returns a formated help string for this arg.  fun box help_string()\n: String val", 
            "title": "help_string"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_8", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#deb_string", 
            "text": "fun box deb_string()\n: String val", 
            "title": "deb_string"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_9", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-ArgSpec/#_init", 
            "text": "fun tag _init(\n  typ': _ValueType val,\n  default': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val | None val))\n: (_ValueType val , (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) , Bool val)", 
            "title": "_init"
        }, 
        {
            "location": "/cli-ArgSpec/#parameters_5", 
            "text": "typ':  _ValueType  val  default': ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_10", 
            "text": "( _ValueType  val , ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val) ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#_typ_p", 
            "text": "fun box _typ_p()\n: _ValueType val", 
            "title": "_typ_p"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_11", 
            "text": "_ValueType  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-ArgSpec/#_default_p", 
            "text": "fun box _default_p()\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "_default_p"
        }, 
        {
            "location": "/cli-ArgSpec/#returns_12", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/", 
            "text": "_StringSeq\n\n\n_StringSeq is a wrapper / helper class for working with String sequence\nvalues while parsing. It assists in collecting the strings as they are\nparsed, and producing a ReadSeq[String] as a result.\n\n\nclass ref _StringSeq is\n  ReadSeq[String val] box\n\n\n\n\nImplements\n\n\n\n\nReadSeq\n[\nString\n val] box\n\n\n\n\n\n\nConstructors\n\n\nempty\n\n\nnew val empty()\n: _StringSeq val^\n\n\n\n\nReturns\n\n\n\n\n_StringSeq\n val^\n\n\n\n\n\n\nfrom_string\n\n\nnew val from_string(\n  s: String val)\n: _StringSeq val^\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n_StringSeq\n val^\n\n\n\n\n\n\nfrom_concat\n\n\nnew val from_concat(\n  ss0: _StringSeq val,\n  ss1: _StringSeq val)\n: _StringSeq val^\n\n\n\n\nParameters\n\n\n\n\nss0: \n_StringSeq\n val\n\n\nss1: \n_StringSeq\n val\n\n\n\n\nReturns\n\n\n\n\n_StringSeq\n val^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet strings: \nVec\n[\nString\n val] val\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nsize\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nfun box apply(\n  i: USize val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nvalues\n\n\nfun box values()\n: Iterator[String val] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[\nString\n val] ref^", 
            "title": "class _StringSeq"
        }, 
        {
            "location": "/cli-_StringSeq/#_stringseq", 
            "text": "_StringSeq is a wrapper / helper class for working with String sequence\nvalues while parsing. It assists in collecting the strings as they are\nparsed, and producing a ReadSeq[String] as a result.  class ref _StringSeq is\n  ReadSeq[String val] box", 
            "title": "_StringSeq"
        }, 
        {
            "location": "/cli-_StringSeq/#implements", 
            "text": "ReadSeq [ String  val] box", 
            "title": "Implements"
        }, 
        {
            "location": "/cli-_StringSeq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_StringSeq/#empty", 
            "text": "new val empty()\n: _StringSeq val^", 
            "title": "empty"
        }, 
        {
            "location": "/cli-_StringSeq/#returns", 
            "text": "_StringSeq  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/#from_string", 
            "text": "new val from_string(\n  s: String val)\n: _StringSeq val^", 
            "title": "from_string"
        }, 
        {
            "location": "/cli-_StringSeq/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeq/#returns_1", 
            "text": "_StringSeq  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/#from_concat", 
            "text": "new val from_concat(\n  ss0: _StringSeq val,\n  ss1: _StringSeq val)\n: _StringSeq val^", 
            "title": "from_concat"
        }, 
        {
            "location": "/cli-_StringSeq/#parameters_1", 
            "text": "ss0:  _StringSeq  val  ss1:  _StringSeq  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeq/#returns_2", 
            "text": "_StringSeq  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/#public-fields", 
            "text": "let strings:  Vec [ String  val] val", 
            "title": "Public fields"
        }, 
        {
            "location": "/cli-_StringSeq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_StringSeq/#string", 
            "text": "fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/cli-_StringSeq/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/#size", 
            "text": "fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/cli-_StringSeq/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/#apply", 
            "text": "fun box apply(\n  i: USize val)\n: String val ?", 
            "title": "apply"
        }, 
        {
            "location": "/cli-_StringSeq/#parameters_2", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeq/#returns_5", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeq/#values", 
            "text": "fun box values()\n: Iterator[String val] ref^", 
            "title": "values"
        }, 
        {
            "location": "/cli-_StringSeq/#returns_6", 
            "text": "Iterator [ String  val] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Value/", 
            "text": "_Value\n\n\ntype _Value is\n  (Bool val | String val | I64 val | F64 val | _StringSeq val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \nF64\n val | \n_StringSeq\n val)", 
            "title": "type _Value"
        }, 
        {
            "location": "/cli-_Value/#_value", 
            "text": "type _Value is\n  (Bool val | String val | I64 val | F64 val | _StringSeq val)", 
            "title": "_Value"
        }, 
        {
            "location": "/cli-_Value/#type-alias-for", 
            "text": "( Bool  val |  String  val |  I64  val |  F64  val |  _StringSeq  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/cli-_ValueType/", 
            "text": "_ValueType\n\n\ntrait val _ValueType\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvalue_of\n\n\nfun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val) ?\n\n\n\n\n\n\nis_seq\n\n\nfun box is_seq()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nfun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\nv1: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\nv2: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)", 
            "title": "trait _ValueType"
        }, 
        {
            "location": "/cli-_ValueType/#_valuetype", 
            "text": "trait val _ValueType", 
            "title": "_ValueType"
        }, 
        {
            "location": "/cli-_ValueType/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_ValueType/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-_ValueType/#returns", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueType/#value_of", 
            "text": "fun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) ?", 
            "title": "value_of"
        }, 
        {
            "location": "/cli-_ValueType/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ValueType/#returns_1", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueType/#is_seq", 
            "text": "fun box is_seq()\n: Bool val", 
            "title": "is_seq"
        }, 
        {
            "location": "/cli-_ValueType/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueType/#append", 
            "text": "fun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "append"
        }, 
        {
            "location": "/cli-_ValueType/#parameters_1", 
            "text": "v1: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)  v2: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ValueType/#returns_3", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/", 
            "text": "_BoolType\n\n\nprimitive val _BoolType is\n  _ValueType val\n\n\n\n\nImplements\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _BoolType val^\n\n\n\n\nReturns\n\n\n\n\n_BoolType\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvalue_of\n\n\nfun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val) ?\n\n\n\n\n\n\nis_seq\n\n\nfun box is_seq()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nfun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\nv1: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\nv2: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _BoolType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_BoolType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _BoolType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_BoolType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _BoolType"
        }, 
        {
            "location": "/cli-_BoolType/#_booltype", 
            "text": "primitive val _BoolType is\n  _ValueType val", 
            "title": "_BoolType"
        }, 
        {
            "location": "/cli-_BoolType/#implements", 
            "text": "_ValueType  val", 
            "title": "Implements"
        }, 
        {
            "location": "/cli-_BoolType/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_BoolType/#create", 
            "text": "new val create()\n: _BoolType val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_BoolType/#returns", 
            "text": "_BoolType  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_BoolType/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-_BoolType/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/#value_of", 
            "text": "fun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) ?", 
            "title": "value_of"
        }, 
        {
            "location": "/cli-_BoolType/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_BoolType/#returns_2", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/#is_seq", 
            "text": "fun box is_seq()\n: Bool val", 
            "title": "is_seq"
        }, 
        {
            "location": "/cli-_BoolType/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/#append", 
            "text": "fun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "append"
        }, 
        {
            "location": "/cli-_BoolType/#parameters_1", 
            "text": "v1: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)  v2: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_BoolType/#returns_4", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/#eq", 
            "text": "fun box eq(\n  that: _BoolType val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_BoolType/#parameters_2", 
            "text": "that:  _BoolType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_BoolType/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_BoolType/#ne", 
            "text": "fun box ne(\n  that: _BoolType val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_BoolType/#parameters_3", 
            "text": "that:  _BoolType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_BoolType/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/", 
            "text": "_StringType\n\n\nprimitive val _StringType is\n  _ValueType val\n\n\n\n\nImplements\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _StringType val^\n\n\n\n\nReturns\n\n\n\n\n_StringType\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvalue_of\n\n\nfun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\nis_seq\n\n\nfun box is_seq()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nfun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\nv1: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\nv2: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _StringType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_StringType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _StringType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_StringType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _StringType"
        }, 
        {
            "location": "/cli-_StringType/#_stringtype", 
            "text": "primitive val _StringType is\n  _ValueType val", 
            "title": "_StringType"
        }, 
        {
            "location": "/cli-_StringType/#implements", 
            "text": "_ValueType  val", 
            "title": "Implements"
        }, 
        {
            "location": "/cli-_StringType/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_StringType/#create", 
            "text": "new val create()\n: _StringType val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_StringType/#returns", 
            "text": "_StringType  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_StringType/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-_StringType/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/#value_of", 
            "text": "fun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "value_of"
        }, 
        {
            "location": "/cli-_StringType/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringType/#returns_2", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/#is_seq", 
            "text": "fun box is_seq()\n: Bool val", 
            "title": "is_seq"
        }, 
        {
            "location": "/cli-_StringType/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/#append", 
            "text": "fun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "append"
        }, 
        {
            "location": "/cli-_StringType/#parameters_1", 
            "text": "v1: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)  v2: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringType/#returns_4", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/#eq", 
            "text": "fun box eq(\n  that: _StringType val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_StringType/#parameters_2", 
            "text": "that:  _StringType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringType/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringType/#ne", 
            "text": "fun box ne(\n  that: _StringType val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_StringType/#parameters_3", 
            "text": "that:  _StringType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringType/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/", 
            "text": "_I64Type\n\n\nprimitive val _I64Type is\n  _ValueType val\n\n\n\n\nImplements\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _I64Type val^\n\n\n\n\nReturns\n\n\n\n\n_I64Type\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvalue_of\n\n\nfun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) ?\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val) ?\n\n\n\n\n\n\nis_seq\n\n\nfun box is_seq()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nfun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\nv1: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\nv2: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _I64Type val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_I64Type\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _I64Type val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_I64Type\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _I64Type"
        }, 
        {
            "location": "/cli-_I64Type/#_i64type", 
            "text": "primitive val _I64Type is\n  _ValueType val", 
            "title": "_I64Type"
        }, 
        {
            "location": "/cli-_I64Type/#implements", 
            "text": "_ValueType  val", 
            "title": "Implements"
        }, 
        {
            "location": "/cli-_I64Type/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_I64Type/#create", 
            "text": "new val create()\n: _I64Type val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_I64Type/#returns", 
            "text": "_I64Type  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_I64Type/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-_I64Type/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/#value_of", 
            "text": "fun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val) ?", 
            "title": "value_of"
        }, 
        {
            "location": "/cli-_I64Type/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_I64Type/#returns_2", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/#is_seq", 
            "text": "fun box is_seq()\n: Bool val", 
            "title": "is_seq"
        }, 
        {
            "location": "/cli-_I64Type/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/#append", 
            "text": "fun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "append"
        }, 
        {
            "location": "/cli-_I64Type/#parameters_1", 
            "text": "v1: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)  v2: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_I64Type/#returns_4", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/#eq", 
            "text": "fun box eq(\n  that: _I64Type val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_I64Type/#parameters_2", 
            "text": "that:  _I64Type  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_I64Type/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_I64Type/#ne", 
            "text": "fun box ne(\n  that: _I64Type val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_I64Type/#parameters_3", 
            "text": "that:  _I64Type  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_I64Type/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/", 
            "text": "_F64Type\n\n\nprimitive val _F64Type is\n  _ValueType val\n\n\n\n\nImplements\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _F64Type val^\n\n\n\n\nReturns\n\n\n\n\n_F64Type\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvalue_of\n\n\nfun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\nis_seq\n\n\nfun box is_seq()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nfun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\nv1: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\nv2: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _F64Type val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_F64Type\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _F64Type val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_F64Type\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _F64Type"
        }, 
        {
            "location": "/cli-_F64Type/#_f64type", 
            "text": "primitive val _F64Type is\n  _ValueType val", 
            "title": "_F64Type"
        }, 
        {
            "location": "/cli-_F64Type/#implements", 
            "text": "_ValueType  val", 
            "title": "Implements"
        }, 
        {
            "location": "/cli-_F64Type/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_F64Type/#create", 
            "text": "new val create()\n: _F64Type val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_F64Type/#returns", 
            "text": "_F64Type  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_F64Type/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-_F64Type/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/#value_of", 
            "text": "fun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "value_of"
        }, 
        {
            "location": "/cli-_F64Type/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_F64Type/#returns_2", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/#is_seq", 
            "text": "fun box is_seq()\n: Bool val", 
            "title": "is_seq"
        }, 
        {
            "location": "/cli-_F64Type/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/#append", 
            "text": "fun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "append"
        }, 
        {
            "location": "/cli-_F64Type/#parameters_1", 
            "text": "v1: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)  v2: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_F64Type/#returns_4", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/#eq", 
            "text": "fun box eq(\n  that: _F64Type val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_F64Type/#parameters_2", 
            "text": "that:  _F64Type  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_F64Type/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_F64Type/#ne", 
            "text": "fun box ne(\n  that: _F64Type val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_F64Type/#parameters_3", 
            "text": "that:  _F64Type  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_F64Type/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/", 
            "text": "_StringSeqType\n\n\nprimitive val _StringSeqType is\n  _ValueType val\n\n\n\n\nImplements\n\n\n\n\n_ValueType\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _StringSeqType val^\n\n\n\n\nReturns\n\n\n\n\n_StringSeqType\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvalue_of\n\n\nfun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\nis_seq\n\n\nfun box is_seq()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nWhen is_seq() returns true, append() is called during parsing to append\na new parsed value onto an existing value.\n\n\nfun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)\n\n\n\n\nParameters\n\n\n\n\nv1: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\nv2: (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _StringSeqType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_StringSeqType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _StringSeqType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_StringSeqType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _StringSeqType"
        }, 
        {
            "location": "/cli-_StringSeqType/#_stringseqtype", 
            "text": "primitive val _StringSeqType is\n  _ValueType val", 
            "title": "_StringSeqType"
        }, 
        {
            "location": "/cli-_StringSeqType/#implements", 
            "text": "_ValueType  val", 
            "title": "Implements"
        }, 
        {
            "location": "/cli-_StringSeqType/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_StringSeqType/#create", 
            "text": "new val create()\n: _StringSeqType val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns", 
            "text": "_StringSeqType  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_StringSeqType/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/#value_of", 
            "text": "fun box value_of(\n  s: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "value_of"
        }, 
        {
            "location": "/cli-_StringSeqType/#parameters", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns_2", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/#is_seq", 
            "text": "fun box is_seq()\n: Bool val", 
            "title": "is_seq"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/#append", 
            "text": "When is_seq() returns true, append() is called during parsing to append\na new parsed value onto an existing value.  fun box append(\n  v1: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val),\n  v2: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val)", 
            "title": "append"
        }, 
        {
            "location": "/cli-_StringSeqType/#parameters_1", 
            "text": "v1: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)  v2: ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns_4", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/#eq", 
            "text": "fun box eq(\n  that: _StringSeqType val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_StringSeqType/#parameters_2", 
            "text": "that:  _StringSeqType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_StringSeqType/#ne", 
            "text": "fun box ne(\n  that: _StringSeqType val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_StringSeqType/#parameters_3", 
            "text": "that:  _StringSeqType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_StringSeqType/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/", 
            "text": "CommandParser\n\n\nclass ref CommandParser\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreates a new parser for a given command spec.\n\n\nnew box create(\n  spec': CommandSpec box)\n: CommandParser box^\n\n\n\n\nParameters\n\n\n\n\nspec': \nCommandSpec\n box\n\n\n\n\nReturns\n\n\n\n\nCommandParser\n box^\n\n\n\n\n\n\n_sub\n\n\nnew box _sub(\n  spec': CommandSpec box,\n  parent': CommandParser box)\n: CommandParser box^\n\n\n\n\nParameters\n\n\n\n\nspec': \nCommandSpec\n box\n\n\nparent': \nCommandParser\n box\n\n\n\n\nReturns\n\n\n\n\nCommandParser\n box^\n\n\n\n\n\n\nPublic Functions\n\n\nparse\n\n\nParses all of the command line tokens and env vars and returns a Command,\nor the first SyntaxError.\n\n\nfun box parse(\n  argv: Array[String val] box,\n  envs: (Array[String val] box | None val) = seq)\n: (Command box | CommandHelp box | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\nargv: \nArray\n[\nString\n val] box\n\n\nenvs: (\nArray\n[\nString\n val] box | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\n(\nCommand\n box | \nCommandHelp\n box | \nSyntaxError\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_fullname\n\n\nfun box _fullname()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_root_spec\n\n\nfun box _root_spec()\n: CommandSpec box\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n box\n\n\n\n\n\n\n_parse_command\n\n\nParses all of the command line tokens and env vars into the given options\nand args maps. Returns the first SyntaxError, or the Command when OK.\n\n\nfun box _parse_command(\n  tokens: Array[String val] ref,\n  options: HashMap[String val, Option val, HashEq[String val] val] ref,\n  args: HashMap[String val, Arg val, HashEq[String val] val] ref,\n  envsmap: HashMap[String val, String val, HashEq[String val] val] box,\n  ostop: Bool val)\n: (Command box | CommandHelp box | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ntokens: \nArray\n[\nString\n val] ref\n\n\noptions: \nHashMap\n[\nString\n val, \nOption\n val, \nHashEq\n[\nString\n val] val] ref\n\n\nargs: \nHashMap\n[\nString\n val, \nArg\n val, \nHashEq\n[\nString\n val] val] ref\n\n\nenvsmap: \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] box\n\n\nostop: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\n(\nCommand\n box | \nCommandHelp\n box | \nSyntaxError\n val)\n\n\n\n\n\n\n_parse_long_option\n\n\n--opt=foo =\n --opt has argument foo\n--opt foo =\n --opt has argument foo, iff arg is required\n\n\nfun box _parse_long_option(\n  token: String val,\n  args: Array[String val] ref)\n: (Option val | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ntoken: \nString\n val\n\n\nargs: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\n(\nOption\n val | \nSyntaxError\n val)\n\n\n\n\n\n\n_parse_short_options\n\n\nif 'O' requires an argument\n  -OFoo  =\n -O has argument Foo\n  -O=Foo =\n -O has argument Foo\n  -O Foo =\n -O has argument Foo\nelse\n  -O=Foo =\n -O has argument foo\n-abc =\n options a, b, c.\n-abcFoo =\n options a, b, c. c has argument Foo iff its arg is required.\n-abc=Foo =\n options a, b, c. c has argument Foo.\n-abc Foo =\n options a, b, c. c has argument Foo iff its arg is required.\n\n\nfun box _parse_short_options(\n  token: String val,\n  args: Array[String val] ref)\n: (Array[Option val] ref | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ntoken: \nString\n val\n\n\nargs: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\n(\nArray\n[\nOption\n val] ref | \nSyntaxError\n val)\n\n\n\n\n\n\n_parse_arg\n\n\nfun box _parse_arg(\n  token: String val,\n  arg_pos: USize val)\n: (Arg val | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ntoken: \nString\n val\n\n\narg_pos: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nArg\n val | \nSyntaxError\n val)\n\n\n\n\n\n\n_option_with_name\n\n\nfun box _option_with_name(\n  name: String val)\n: (OptionSpec val | None val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nOptionSpec\n val | \nNone\n val)\n\n\n\n\n\n\n_option_with_short\n\n\nfun box _option_with_short(\n  short: U8 val)\n: (OptionSpec val | None val)\n\n\n\n\nParameters\n\n\n\n\nshort: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nOptionSpec\n val | \nNone\n val)\n\n\n\n\n\n\n_short_string\n\n\nfun tag _short_string(\n  c: U8 val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nc: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_help_name\n\n\nfun box _help_name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "class CommandParser"
        }, 
        {
            "location": "/cli-CommandParser/#commandparser", 
            "text": "class ref CommandParser", 
            "title": "CommandParser"
        }, 
        {
            "location": "/cli-CommandParser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-CommandParser/#create", 
            "text": "Creates a new parser for a given command spec.  new box create(\n  spec': CommandSpec box)\n: CommandParser box^", 
            "title": "create"
        }, 
        {
            "location": "/cli-CommandParser/#parameters", 
            "text": "spec':  CommandSpec  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns", 
            "text": "CommandParser  box^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_sub", 
            "text": "new box _sub(\n  spec': CommandSpec box,\n  parent': CommandParser box)\n: CommandParser box^", 
            "title": "_sub"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_1", 
            "text": "spec':  CommandSpec  box  parent':  CommandParser  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_1", 
            "text": "CommandParser  box^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-CommandParser/#parse", 
            "text": "Parses all of the command line tokens and env vars and returns a Command,\nor the first SyntaxError.  fun box parse(\n  argv: Array[String val] box,\n  envs: (Array[String val] box | None val) = seq)\n: (Command box | CommandHelp box | SyntaxError val)", 
            "title": "parse"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_2", 
            "text": "argv:  Array [ String  val] box  envs: ( Array [ String  val] box |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_2", 
            "text": "( Command  box |  CommandHelp  box |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-CommandParser/#_fullname", 
            "text": "fun box _fullname()\n: String val", 
            "title": "_fullname"
        }, 
        {
            "location": "/cli-CommandParser/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_root_spec", 
            "text": "fun box _root_spec()\n: CommandSpec box", 
            "title": "_root_spec"
        }, 
        {
            "location": "/cli-CommandParser/#returns_4", 
            "text": "CommandSpec  box", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_parse_command", 
            "text": "Parses all of the command line tokens and env vars into the given options\nand args maps. Returns the first SyntaxError, or the Command when OK.  fun box _parse_command(\n  tokens: Array[String val] ref,\n  options: HashMap[String val, Option val, HashEq[String val] val] ref,\n  args: HashMap[String val, Arg val, HashEq[String val] val] ref,\n  envsmap: HashMap[String val, String val, HashEq[String val] val] box,\n  ostop: Bool val)\n: (Command box | CommandHelp box | SyntaxError val)", 
            "title": "_parse_command"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_3", 
            "text": "tokens:  Array [ String  val] ref  options:  HashMap [ String  val,  Option  val,  HashEq [ String  val] val] ref  args:  HashMap [ String  val,  Arg  val,  HashEq [ String  val] val] ref  envsmap:  HashMap [ String  val,  String  val,  HashEq [ String  val] val] box  ostop:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_5", 
            "text": "( Command  box |  CommandHelp  box |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_parse_long_option", 
            "text": "--opt=foo =  --opt has argument foo\n--opt foo =  --opt has argument foo, iff arg is required  fun box _parse_long_option(\n  token: String val,\n  args: Array[String val] ref)\n: (Option val | SyntaxError val)", 
            "title": "_parse_long_option"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_4", 
            "text": "token:  String  val  args:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_6", 
            "text": "( Option  val |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_parse_short_options", 
            "text": "if 'O' requires an argument\n  -OFoo  =  -O has argument Foo\n  -O=Foo =  -O has argument Foo\n  -O Foo =  -O has argument Foo\nelse\n  -O=Foo =  -O has argument foo\n-abc =  options a, b, c.\n-abcFoo =  options a, b, c. c has argument Foo iff its arg is required.\n-abc=Foo =  options a, b, c. c has argument Foo.\n-abc Foo =  options a, b, c. c has argument Foo iff its arg is required.  fun box _parse_short_options(\n  token: String val,\n  args: Array[String val] ref)\n: (Array[Option val] ref | SyntaxError val)", 
            "title": "_parse_short_options"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_5", 
            "text": "token:  String  val  args:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_7", 
            "text": "( Array [ Option  val] ref |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_parse_arg", 
            "text": "fun box _parse_arg(\n  token: String val,\n  arg_pos: USize val)\n: (Arg val | SyntaxError val)", 
            "title": "_parse_arg"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_6", 
            "text": "token:  String  val  arg_pos:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_8", 
            "text": "( Arg  val |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_option_with_name", 
            "text": "fun box _option_with_name(\n  name: String val)\n: (OptionSpec val | None val)", 
            "title": "_option_with_name"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_7", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_9", 
            "text": "( OptionSpec  val |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_option_with_short", 
            "text": "fun box _option_with_short(\n  short: U8 val)\n: (OptionSpec val | None val)", 
            "title": "_option_with_short"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_8", 
            "text": "short:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_10", 
            "text": "( OptionSpec  val |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_short_string", 
            "text": "fun tag _short_string(\n  c: U8 val)\n: String val", 
            "title": "_short_string"
        }, 
        {
            "location": "/cli-CommandParser/#parameters_9", 
            "text": "c:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandParser/#returns_11", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandParser/#_help_name", 
            "text": "fun box _help_name()\n: String val", 
            "title": "_help_name"
        }, 
        {
            "location": "/cli-CommandParser/#returns_12", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_OptionParser/", 
            "text": "_OptionParser\n\n\nprimitive val _OptionParser\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _OptionParser val^\n\n\n\n\nReturns\n\n\n\n\n_OptionParser\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nparse\n\n\nfun box parse(\n  spec: OptionSpec val,\n  targ: (String val | None val),\n  args: Array[String val] ref)\n: (Option val | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\nspec: \nOptionSpec\n val\n\n\ntarg: (\nString\n val | \nNone\n val)\n\n\nargs: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\n(\nOption\n val | \nSyntaxError\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _OptionParser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_OptionParser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _OptionParser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_OptionParser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _OptionParser"
        }, 
        {
            "location": "/cli-_OptionParser/#_optionparser", 
            "text": "primitive val _OptionParser", 
            "title": "_OptionParser"
        }, 
        {
            "location": "/cli-_OptionParser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_OptionParser/#create", 
            "text": "new val create()\n: _OptionParser val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_OptionParser/#returns", 
            "text": "_OptionParser  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_OptionParser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_OptionParser/#parse", 
            "text": "fun box parse(\n  spec: OptionSpec val,\n  targ: (String val | None val),\n  args: Array[String val] ref)\n: (Option val | SyntaxError val)", 
            "title": "parse"
        }, 
        {
            "location": "/cli-_OptionParser/#parameters", 
            "text": "spec:  OptionSpec  val  targ: ( String  val |  None  val)  args:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_OptionParser/#returns_1", 
            "text": "( Option  val |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_OptionParser/#eq", 
            "text": "fun box eq(\n  that: _OptionParser val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_OptionParser/#parameters_1", 
            "text": "that:  _OptionParser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_OptionParser/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_OptionParser/#ne", 
            "text": "fun box ne(\n  that: _OptionParser val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_OptionParser/#parameters_2", 
            "text": "that:  _OptionParser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_OptionParser/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ArgParser/", 
            "text": "_ArgParser\n\n\nprimitive val _ArgParser\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ArgParser val^\n\n\n\n\nReturns\n\n\n\n\n_ArgParser\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nparse\n\n\nfun box parse(\n  spec: ArgSpec val,\n  arg: String val)\n: (Arg val | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\nspec: \nArgSpec\n val\n\n\narg: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nArg\n val | \nSyntaxError\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ArgParser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ArgParser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ArgParser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ArgParser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ArgParser"
        }, 
        {
            "location": "/cli-_ArgParser/#_argparser", 
            "text": "primitive val _ArgParser", 
            "title": "_ArgParser"
        }, 
        {
            "location": "/cli-_ArgParser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_ArgParser/#create", 
            "text": "new val create()\n: _ArgParser val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_ArgParser/#returns", 
            "text": "_ArgParser  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ArgParser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_ArgParser/#parse", 
            "text": "fun box parse(\n  spec: ArgSpec val,\n  arg: String val)\n: (Arg val | SyntaxError val)", 
            "title": "parse"
        }, 
        {
            "location": "/cli-_ArgParser/#parameters", 
            "text": "spec:  ArgSpec  val  arg:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ArgParser/#returns_1", 
            "text": "( Arg  val |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ArgParser/#eq", 
            "text": "fun box eq(\n  that: _ArgParser val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_ArgParser/#parameters_1", 
            "text": "that:  _ArgParser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ArgParser/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ArgParser/#ne", 
            "text": "fun box ne(\n  that: _ArgParser val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_ArgParser/#parameters_2", 
            "text": "that:  _ArgParser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ArgParser/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueParser/", 
            "text": "_ValueParser\n\n\nprimitive val _ValueParser\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ValueParser val^\n\n\n\n\nReturns\n\n\n\n\n_ValueParser\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nparse\n\n\nfun box parse(\n  typ: _ValueType val,\n  arg: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ntyp: \n_ValueType\n val\n\n\narg: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val | \nSyntaxError\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ValueParser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ValueParser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ValueParser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ValueParser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ValueParser"
        }, 
        {
            "location": "/cli-_ValueParser/#_valueparser", 
            "text": "primitive val _ValueParser", 
            "title": "_ValueParser"
        }, 
        {
            "location": "/cli-_ValueParser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_ValueParser/#create", 
            "text": "new val create()\n: _ValueParser val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_ValueParser/#returns", 
            "text": "_ValueParser  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueParser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_ValueParser/#parse", 
            "text": "fun box parse(\n  typ: _ValueType val,\n  arg: String val)\n: (Bool val | String val | I64 val | \n    F64 val | _StringSeq val | SyntaxError val)", 
            "title": "parse"
        }, 
        {
            "location": "/cli-_ValueParser/#parameters", 
            "text": "typ:  _ValueType  val  arg:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ValueParser/#returns_1", 
            "text": "( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueParser/#eq", 
            "text": "fun box eq(\n  that: _ValueParser val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_ValueParser/#parameters_1", 
            "text": "that:  _ValueParser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ValueParser/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_ValueParser/#ne", 
            "text": "fun box ne(\n  that: _ValueParser val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_ValueParser/#parameters_2", 
            "text": "that:  _ValueParser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_ValueParser/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Help/", 
            "text": "Help\n\n\nprimitive val Help\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Help val^\n\n\n\n\nReturns\n\n\n\n\nHelp\n val^\n\n\n\n\n\n\nPublic Functions\n\n\ngeneral\n\n\nCreates a command help that can print a general program help message.\n\n\nfun box general(\n  cs: CommandSpec box)\n: CommandHelp box\n\n\n\n\nParameters\n\n\n\n\ncs: \nCommandSpec\n box\n\n\n\n\nReturns\n\n\n\n\nCommandHelp\n box\n\n\n\n\n\n\nfor_command\n\n\nCreates a command help for a specific command that can print a detailed\nhelp message.\n\n\nfun box for_command(\n  cs: CommandSpec box,\n  argv: Array[String val] box)\n: (CommandHelp box | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ncs: \nCommandSpec\n box\n\n\nargv: \nArray\n[\nString\n val] box\n\n\n\n\nReturns\n\n\n\n\n(\nCommandHelp\n box | \nSyntaxError\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Help val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHelp\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Help val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHelp\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_parse\n\n\nfun box _parse(\n  cs: CommandSpec box,\n  ch: CommandHelp box,\n  argv: Array[String val] box)\n: (CommandHelp box | SyntaxError val)\n\n\n\n\nParameters\n\n\n\n\ncs: \nCommandSpec\n box\n\n\nch: \nCommandHelp\n box\n\n\nargv: \nArray\n[\nString\n val] box\n\n\n\n\nReturns\n\n\n\n\n(\nCommandHelp\n box | \nSyntaxError\n val)", 
            "title": "primitive Help"
        }, 
        {
            "location": "/cli-Help/#help", 
            "text": "primitive val Help", 
            "title": "Help"
        }, 
        {
            "location": "/cli-Help/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-Help/#create", 
            "text": "new val create()\n: Help val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-Help/#returns", 
            "text": "Help  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Help/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-Help/#general", 
            "text": "Creates a command help that can print a general program help message.  fun box general(\n  cs: CommandSpec box)\n: CommandHelp box", 
            "title": "general"
        }, 
        {
            "location": "/cli-Help/#parameters", 
            "text": "cs:  CommandSpec  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Help/#returns_1", 
            "text": "CommandHelp  box", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Help/#for_command", 
            "text": "Creates a command help for a specific command that can print a detailed\nhelp message.  fun box for_command(\n  cs: CommandSpec box,\n  argv: Array[String val] box)\n: (CommandHelp box | SyntaxError val)", 
            "title": "for_command"
        }, 
        {
            "location": "/cli-Help/#parameters_1", 
            "text": "cs:  CommandSpec  box  argv:  Array [ String  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Help/#returns_2", 
            "text": "( CommandHelp  box |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Help/#eq", 
            "text": "fun box eq(\n  that: Help val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-Help/#parameters_2", 
            "text": "that:  Help  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Help/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Help/#ne", 
            "text": "fun box ne(\n  that: Help val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-Help/#parameters_3", 
            "text": "that:  Help  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Help/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Help/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-Help/#_parse", 
            "text": "fun box _parse(\n  cs: CommandSpec box,\n  ch: CommandHelp box,\n  argv: Array[String val] box)\n: (CommandHelp box | SyntaxError val)", 
            "title": "_parse"
        }, 
        {
            "location": "/cli-Help/#parameters_4", 
            "text": "cs:  CommandSpec  box  ch:  CommandHelp  box  argv:  Array [ String  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Help/#returns_5", 
            "text": "( CommandHelp  box |  SyntaxError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/", 
            "text": "CommandHelp\n\n\nCommandHelp encapsulates the information needed to generate a user help\nmessage for a given CommandSpec, optionally with a specific command\nidentified to print help about. Use \nHelp.general()\n or \nHelp.for_command()\n\nto create a CommandHelp instance.\n\n\nclass box CommandHelp\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew ref _create(\n  parent': (CommandHelp box | None val),\n  spec': CommandSpec box)\n: CommandHelp ref^\n\n\n\n\nParameters\n\n\n\n\nparent': (\nCommandHelp\n box | \nNone\n val)\n\n\nspec': \nCommandSpec\n box\n\n\n\n\nReturns\n\n\n\n\nCommandHelp\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nfullname\n\n\nfun box fullname()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nhelp_string\n\n\nRenders the help message as a String.\n\n\nfun box help_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nprint_help\n\n\nPrints the help message to an OutStream.\n\n\nfun box print_help(\n  os: OutStream tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nos: \nOutStream\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_write_help\n\n\nfun box _write_help(\n  w: Writer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_usage\n\n\nfun box _write_usage(\n  w: Writer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_options\n\n\nfun box _write_options(\n  w: Writer ref,\n  options: Array[OptionSpec box] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\noptions: \nArray\n[\nOptionSpec\n box] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_commands\n\n\nfun box _write_commands(\n  w: Writer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_list_commands\n\n\nfun box _list_commands(\n  cs: CommandSpec box,\n  cols: Array[(USize val , String val , String val)] ref,\n  level: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ncs: \nCommandSpec\n box\n\n\ncols: \nArray\n[(\nUSize\n val , \nString\n val , \nString\n val)] ref\n\n\nlevel: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_args\n\n\nfun box _write_args(\n  w: Writer ref,\n  args: Array[ArgSpec val] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\nargs: \nArray\n[\nArgSpec\n val] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_any_options\n\n\nfun box _any_options()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_all_options\n\n\nfun box _all_options()\n: Array[OptionSpec box] ref\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nOptionSpec\n box] ref\n\n\n\n\n\n\n_all_options_fill\n\n\nfun box _all_options_fill(\n  options: Array[OptionSpec box] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\noptions: \nArray\n[\nOptionSpec\n box] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class CommandHelp"
        }, 
        {
            "location": "/cli-CommandHelp/#commandhelp", 
            "text": "CommandHelp encapsulates the information needed to generate a user help\nmessage for a given CommandSpec, optionally with a specific command\nidentified to print help about. Use  Help.general()  or  Help.for_command() \nto create a CommandHelp instance.  class box CommandHelp", 
            "title": "CommandHelp"
        }, 
        {
            "location": "/cli-CommandHelp/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-CommandHelp/#_create", 
            "text": "new ref _create(\n  parent': (CommandHelp box | None val),\n  spec': CommandSpec box)\n: CommandHelp ref^", 
            "title": "_create"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters", 
            "text": "parent': ( CommandHelp  box |  None  val)  spec':  CommandSpec  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns", 
            "text": "CommandHelp  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-CommandHelp/#fullname", 
            "text": "fun box fullname()\n: String val", 
            "title": "fullname"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#help_string", 
            "text": "Renders the help message as a String.  fun box help_string()\n: String val", 
            "title": "help_string"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#print_help", 
            "text": "Prints the help message to an OutStream.  fun box print_help(\n  os: OutStream tag)\n: None val", 
            "title": "print_help"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_1", 
            "text": "os:  OutStream  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-CommandHelp/#_write_help", 
            "text": "fun box _write_help(\n  w: Writer ref)\n: None val", 
            "title": "_write_help"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_2", 
            "text": "w:  Writer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_write_usage", 
            "text": "fun box _write_usage(\n  w: Writer ref)\n: None val", 
            "title": "_write_usage"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_3", 
            "text": "w:  Writer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_write_options", 
            "text": "fun box _write_options(\n  w: Writer ref,\n  options: Array[OptionSpec box] box)\n: None val", 
            "title": "_write_options"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_4", 
            "text": "w:  Writer  ref  options:  Array [ OptionSpec  box] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_write_commands", 
            "text": "fun box _write_commands(\n  w: Writer ref)\n: None val", 
            "title": "_write_commands"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_5", 
            "text": "w:  Writer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_list_commands", 
            "text": "fun box _list_commands(\n  cs: CommandSpec box,\n  cols: Array[(USize val , String val , String val)] ref,\n  level: USize val)\n: None val", 
            "title": "_list_commands"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_6", 
            "text": "cs:  CommandSpec  box  cols:  Array [( USize  val ,  String  val ,  String  val)] ref  level:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_write_args", 
            "text": "fun box _write_args(\n  w: Writer ref,\n  args: Array[ArgSpec val] box)\n: None val", 
            "title": "_write_args"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_7", 
            "text": "w:  Writer  ref  args:  Array [ ArgSpec  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_any_options", 
            "text": "fun box _any_options()\n: Bool val", 
            "title": "_any_options"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_all_options", 
            "text": "fun box _all_options()\n: Array[OptionSpec box] ref", 
            "title": "_all_options"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_12", 
            "text": "Array [ OptionSpec  box] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-CommandHelp/#_all_options_fill", 
            "text": "fun box _all_options_fill(\n  options: Array[OptionSpec box] ref)\n: None val", 
            "title": "_all_options_fill"
        }, 
        {
            "location": "/cli-CommandHelp/#parameters_8", 
            "text": "options:  Array [ OptionSpec  box] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-CommandHelp/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Columns/", 
            "text": "_Columns\n\n\nprimitive val _Columns\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Columns val^\n\n\n\n\nReturns\n\n\n\n\n_Columns\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nindent\n\n\nfun box indent(\n  w: Writer ref,\n  n: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwrite\n\n\nfun box write(\n  w: Writer ref,\n  cols: Array[(USize val , String val , String val)] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nw: \nWriter\n ref\n\n\ncols: \nArray\n[(\nUSize\n val , \nString\n val , \nString\n val)] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _Columns val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Columns\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Columns val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Columns\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Columns"
        }, 
        {
            "location": "/cli-_Columns/#_columns", 
            "text": "primitive val _Columns", 
            "title": "_Columns"
        }, 
        {
            "location": "/cli-_Columns/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_Columns/#create", 
            "text": "new val create()\n: _Columns val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_Columns/#returns", 
            "text": "_Columns  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Columns/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_Columns/#indent", 
            "text": "fun box indent(\n  w: Writer ref,\n  n: USize val)\n: None val", 
            "title": "indent"
        }, 
        {
            "location": "/cli-_Columns/#parameters", 
            "text": "w:  Writer  ref  n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_Columns/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Columns/#write", 
            "text": "fun box write(\n  w: Writer ref,\n  cols: Array[(USize val , String val , String val)] ref)\n: None val", 
            "title": "write"
        }, 
        {
            "location": "/cli-_Columns/#parameters_1", 
            "text": "w:  Writer  ref  cols:  Array [( USize  val ,  String  val ,  String  val)] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_Columns/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Columns/#eq", 
            "text": "fun box eq(\n  that: _Columns val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_Columns/#parameters_2", 
            "text": "that:  _Columns  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_Columns/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Columns/#ne", 
            "text": "fun box ne(\n  that: _Columns val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_Columns/#parameters_3", 
            "text": "that:  _Columns  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_Columns/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Command/", 
            "text": "Command\n\n\nCommand contains all of the information describing a command with its spec\nand effective options and arguments, ready to use.\n\n\nclass box Command\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew ref _create(\n  spec': CommandSpec box,\n  fullname': String val,\n  options': HashMap[String val, Option val, HashEq[String val] val] box,\n  args': HashMap[String val, Arg val, HashEq[String val] val] box)\n: Command ref^\n\n\n\n\nParameters\n\n\n\n\nspec': \nCommandSpec\n box\n\n\nfullname': \nString\n val\n\n\noptions': \nHashMap\n[\nString\n val, \nOption\n val, \nHashEq\n[\nString\n val] val] box\n\n\nargs': \nHashMap\n[\nString\n val, \nArg\n val, \nHashEq\n[\nString\n val] val] box\n\n\n\n\nReturns\n\n\n\n\nCommand\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nReturns a representational string for this command.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nspec\n\n\nReturns the spec for this command.\n\n\nfun box spec()\n: CommandSpec box\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n box\n\n\n\n\n\n\nfullname\n\n\nReturns the full name of this command, with its parents prefixed.\n\n\nfun box fullname()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\noption\n\n\nReturns the Option by name, defaulting to a fake Option if unknown.\n\n\nfun box option(\n  name: String val)\n: Option val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nOption\n val\n\n\n\n\n\n\narg\n\n\nReturns the Arg by name, defaulting to a fake Arg if unknown.\n\n\nfun box arg(\n  name: String val)\n: Arg val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArg\n val", 
            "title": "class Command"
        }, 
        {
            "location": "/cli-Command/#command", 
            "text": "Command contains all of the information describing a command with its spec\nand effective options and arguments, ready to use.  class box Command", 
            "title": "Command"
        }, 
        {
            "location": "/cli-Command/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-Command/#_create", 
            "text": "new ref _create(\n  spec': CommandSpec box,\n  fullname': String val,\n  options': HashMap[String val, Option val, HashEq[String val] val] box,\n  args': HashMap[String val, Arg val, HashEq[String val] val] box)\n: Command ref^", 
            "title": "_create"
        }, 
        {
            "location": "/cli-Command/#parameters", 
            "text": "spec':  CommandSpec  box  fullname':  String  val  options':  HashMap [ String  val,  Option  val,  HashEq [ String  val] val] box  args':  HashMap [ String  val,  Arg  val,  HashEq [ String  val] val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Command/#returns", 
            "text": "Command  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Command/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-Command/#string", 
            "text": "Returns a representational string for this command.  fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/cli-Command/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Command/#spec", 
            "text": "Returns the spec for this command.  fun box spec()\n: CommandSpec box", 
            "title": "spec"
        }, 
        {
            "location": "/cli-Command/#returns_2", 
            "text": "CommandSpec  box", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Command/#fullname", 
            "text": "Returns the full name of this command, with its parents prefixed.  fun box fullname()\n: String val", 
            "title": "fullname"
        }, 
        {
            "location": "/cli-Command/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Command/#option", 
            "text": "Returns the Option by name, defaulting to a fake Option if unknown.  fun box option(\n  name: String val)\n: Option val", 
            "title": "option"
        }, 
        {
            "location": "/cli-Command/#parameters_1", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Command/#returns_4", 
            "text": "Option  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Command/#arg", 
            "text": "Returns the Arg by name, defaulting to a fake Arg if unknown.  fun box arg(\n  name: String val)\n: Arg val", 
            "title": "arg"
        }, 
        {
            "location": "/cli-Command/#parameters_2", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Command/#returns_5", 
            "text": "Arg  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/", 
            "text": "Option\n\n\nOption contains a spec and an effective value for a given option.\n\n\nclass val Option\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  spec': OptionSpec val,\n  value': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: Option val^\n\n\n\n\nParameters\n\n\n\n\nspec': \nOptionSpec\n val\n\n\nvalue': (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\nOption\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nspec\n\n\nfun box spec()\n: OptionSpec val\n\n\n\n\nReturns\n\n\n\n\nOptionSpec\n val\n\n\n\n\n\n\nbool\n\n\nReturns the option value as a Bool, defaulting to false.\n\n\nfun box bool()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nReturns the option value as a String, defaulting to empty.\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ni64\n\n\nReturns the option value as an I64, defaulting to 0.\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nf64\n\n\nReturns the option value as an F64, defaulting to 0.0.\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nstring_seq\n\n\nReturns the option value as a ReadSeq[String], defaulting to empty.\n\n\nfun box string_seq()\n: ReadSeq[String val] val\n\n\n\n\nReturns\n\n\n\n\nReadSeq\n[\nString\n val] val\n\n\n\n\n\n\ndeb_string\n\n\nfun box deb_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_append\n\n\nfun box _append(\n  next: Option val)\n: Option val\n\n\n\n\nParameters\n\n\n\n\nnext: \nOption\n val\n\n\n\n\nReturns\n\n\n\n\nOption\n val", 
            "title": "class Option"
        }, 
        {
            "location": "/cli-Option/#option", 
            "text": "Option contains a spec and an effective value for a given option.  class val Option", 
            "title": "Option"
        }, 
        {
            "location": "/cli-Option/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-Option/#create", 
            "text": "new val create(\n  spec': OptionSpec val,\n  value': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: Option val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-Option/#parameters", 
            "text": "spec':  OptionSpec  val  value': ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Option/#returns", 
            "text": "Option  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-Option/#spec", 
            "text": "fun box spec()\n: OptionSpec val", 
            "title": "spec"
        }, 
        {
            "location": "/cli-Option/#returns_1", 
            "text": "OptionSpec  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#bool", 
            "text": "Returns the option value as a Bool, defaulting to false.  fun box bool()\n: Bool val", 
            "title": "bool"
        }, 
        {
            "location": "/cli-Option/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#string", 
            "text": "Returns the option value as a String, defaulting to empty.  fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-Option/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#i64", 
            "text": "Returns the option value as an I64, defaulting to 0.  fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/cli-Option/#returns_4", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#f64", 
            "text": "Returns the option value as an F64, defaulting to 0.0.  fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/cli-Option/#returns_5", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#string_seq", 
            "text": "Returns the option value as a ReadSeq[String], defaulting to empty.  fun box string_seq()\n: ReadSeq[String val] val", 
            "title": "string_seq"
        }, 
        {
            "location": "/cli-Option/#returns_6", 
            "text": "ReadSeq [ String  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#deb_string", 
            "text": "fun box deb_string()\n: String val", 
            "title": "deb_string"
        }, 
        {
            "location": "/cli-Option/#returns_7", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Option/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-Option/#_append", 
            "text": "fun box _append(\n  next: Option val)\n: Option val", 
            "title": "_append"
        }, 
        {
            "location": "/cli-Option/#parameters_1", 
            "text": "next:  Option  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Option/#returns_8", 
            "text": "Option  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/", 
            "text": "Arg\n\n\nArg contains a spec and an effective value for a given arg.\n\n\nclass val Arg\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  spec': ArgSpec val,\n  value': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: Arg val^\n\n\n\n\nParameters\n\n\n\n\nspec': \nArgSpec\n val\n\n\nvalue': (\nBool\n val | \nString\n val | \nI64\n val | \n    \nF64\n val | \n_StringSeq\n val)\n\n\n\n\nReturns\n\n\n\n\nArg\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nspec\n\n\nfun box spec()\n: ArgSpec val\n\n\n\n\nReturns\n\n\n\n\nArgSpec\n val\n\n\n\n\n\n\nbool\n\n\nReturns the arg value as a Bool, defaulting to false.\n\n\nfun box bool()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nReturns the arg value as a String, defaulting to empty.\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ni64\n\n\nReturns the arg value as an I64, defaulting to 0.\n\n\nfun box i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nf64\n\n\nReturns the arg value as an F64, defaulting to 0.0.\n\n\nfun box f64()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nstring_seq\n\n\nReturns the arg value as a ReadSeq[String], defaulting to empty.\n\n\nfun box string_seq()\n: ReadSeq[String val] val\n\n\n\n\nReturns\n\n\n\n\nReadSeq\n[\nString\n val] val\n\n\n\n\n\n\ndeb_string\n\n\nfun box deb_string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_append\n\n\nfun box _append(\n  next: Arg val)\n: Arg val\n\n\n\n\nParameters\n\n\n\n\nnext: \nArg\n val\n\n\n\n\nReturns\n\n\n\n\nArg\n val", 
            "title": "class Arg"
        }, 
        {
            "location": "/cli-Arg/#arg", 
            "text": "Arg contains a spec and an effective value for a given arg.  class val Arg", 
            "title": "Arg"
        }, 
        {
            "location": "/cli-Arg/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-Arg/#create", 
            "text": "new val create(\n  spec': ArgSpec val,\n  value': (Bool val | String val | I64 val | \n    F64 val | _StringSeq val))\n: Arg val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-Arg/#parameters", 
            "text": "spec':  ArgSpec  val  value': ( Bool  val |  String  val |  I64  val | \n     F64  val |  _StringSeq  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Arg/#returns", 
            "text": "Arg  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-Arg/#spec", 
            "text": "fun box spec()\n: ArgSpec val", 
            "title": "spec"
        }, 
        {
            "location": "/cli-Arg/#returns_1", 
            "text": "ArgSpec  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#bool", 
            "text": "Returns the arg value as a Bool, defaulting to false.  fun box bool()\n: Bool val", 
            "title": "bool"
        }, 
        {
            "location": "/cli-Arg/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#string", 
            "text": "Returns the arg value as a String, defaulting to empty.  fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-Arg/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#i64", 
            "text": "Returns the arg value as an I64, defaulting to 0.  fun box i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/cli-Arg/#returns_4", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#f64", 
            "text": "Returns the arg value as an F64, defaulting to 0.0.  fun box f64()\n: F64 val", 
            "title": "f64"
        }, 
        {
            "location": "/cli-Arg/#returns_5", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#string_seq", 
            "text": "Returns the arg value as a ReadSeq[String], defaulting to empty.  fun box string_seq()\n: ReadSeq[String val] val", 
            "title": "string_seq"
        }, 
        {
            "location": "/cli-Arg/#returns_6", 
            "text": "ReadSeq [ String  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#deb_string", 
            "text": "fun box deb_string()\n: String val", 
            "title": "deb_string"
        }, 
        {
            "location": "/cli-Arg/#returns_7", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-Arg/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/cli-Arg/#_append", 
            "text": "fun box _append(\n  next: Arg val)\n: Arg val", 
            "title": "_append"
        }, 
        {
            "location": "/cli-Arg/#parameters_1", 
            "text": "next:  Arg  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-Arg/#returns_8", 
            "text": "Arg  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-SyntaxError/", 
            "text": "SyntaxError\n\n\nSyntaxError summarizes a syntax error in a given parsed command line.\n\n\nclass val SyntaxError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  token': String val,\n  msg': String val)\n: SyntaxError val^\n\n\n\n\nParameters\n\n\n\n\ntoken': \nString\n val\n\n\nmsg': \nString\n val\n\n\n\n\nReturns\n\n\n\n\nSyntaxError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\ntoken\n\n\nfun box token()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "class SyntaxError"
        }, 
        {
            "location": "/cli-SyntaxError/#syntaxerror", 
            "text": "SyntaxError summarizes a syntax error in a given parsed command line.  class val SyntaxError", 
            "title": "SyntaxError"
        }, 
        {
            "location": "/cli-SyntaxError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-SyntaxError/#create", 
            "text": "new val create(\n  token': String val,\n  msg': String val)\n: SyntaxError val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-SyntaxError/#parameters", 
            "text": "token':  String  val  msg':  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-SyntaxError/#returns", 
            "text": "SyntaxError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-SyntaxError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-SyntaxError/#token", 
            "text": "fun box token()\n: String val", 
            "title": "token"
        }, 
        {
            "location": "/cli-SyntaxError/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-SyntaxError/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/cli-SyntaxError/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Fixtures/", 
            "text": "_Fixtures\n\n\nprimitive val _Fixtures\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Fixtures val^\n\n\n\n\nReturns\n\n\n\n\n_Fixtures\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nbools_cli_spec\n\n\nBuilds and returns the spec for a CLI with four bool options.\n\n\nfun box bools_cli_spec()\n: CommandSpec box ?\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n box ?\n\n\n\n\n\n\nsimple_cli_spec\n\n\nBuilds and returns the spec for a CLI with short options of each type.\n\n\nfun box simple_cli_spec()\n: CommandSpec box ?\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n box ?\n\n\n\n\n\n\nchat_cli_spec\n\n\nBuilds and returns the spec for a sample chat client's CLI.\n\n\nfun box chat_cli_spec()\n: CommandSpec box ?\n\n\n\n\nReturns\n\n\n\n\nCommandSpec\n box ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _Fixtures val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Fixtures\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Fixtures val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Fixtures\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Fixtures"
        }, 
        {
            "location": "/cli-_Fixtures/#_fixtures", 
            "text": "primitive val _Fixtures", 
            "title": "_Fixtures"
        }, 
        {
            "location": "/cli-_Fixtures/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/cli-_Fixtures/#create", 
            "text": "new val create()\n: _Fixtures val^", 
            "title": "create"
        }, 
        {
            "location": "/cli-_Fixtures/#returns", 
            "text": "_Fixtures  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Fixtures/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/cli-_Fixtures/#bools_cli_spec", 
            "text": "Builds and returns the spec for a CLI with four bool options.  fun box bools_cli_spec()\n: CommandSpec box ?", 
            "title": "bools_cli_spec"
        }, 
        {
            "location": "/cli-_Fixtures/#returns_1", 
            "text": "CommandSpec  box ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Fixtures/#simple_cli_spec", 
            "text": "Builds and returns the spec for a CLI with short options of each type.  fun box simple_cli_spec()\n: CommandSpec box ?", 
            "title": "simple_cli_spec"
        }, 
        {
            "location": "/cli-_Fixtures/#returns_2", 
            "text": "CommandSpec  box ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Fixtures/#chat_cli_spec", 
            "text": "Builds and returns the spec for a sample chat client's CLI.  fun box chat_cli_spec()\n: CommandSpec box ?", 
            "title": "chat_cli_spec"
        }, 
        {
            "location": "/cli-_Fixtures/#returns_3", 
            "text": "CommandSpec  box ?", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Fixtures/#eq", 
            "text": "fun box eq(\n  that: _Fixtures val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/cli-_Fixtures/#parameters", 
            "text": "that:  _Fixtures  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_Fixtures/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/cli-_Fixtures/#ne", 
            "text": "fun box ne(\n  that: _Fixtures val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/cli-_Fixtures/#parameters_1", 
            "text": "that:  _Fixtures  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/cli-_Fixtures/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections--index/", 
            "text": "No package doc string provided for collections.\n\n\nPublic Types\n\n\n\n\nprimitive Sort\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass HashSet\n\n\nclass SetValues\n\n\nclass RingBuffer\n\n\nclass Reverse\n\n\nclass Range\n\n\ntype Map\n\n\ntype MapIs\n\n\nclass HashMap\n\n\nclass MapKeys\n\n\nclass MapValues\n\n\nclass MapPairs\n\n\nclass ListNode\n\n\nclass List\n\n\nclass ListNodes\n\n\nclass ListValues\n\n\ninterface Hashable\n\n\ninterface HashFunction\n\n\nprimitive HashEq\n\n\nprimitive HashIs\n\n\nprimitive HashByteSeq\n\n\ninterface Flag\n\n\nclass Flags\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _MapEmpty\n\n\nprimitive _MapDeleted", 
            "title": "Package"
        }, 
        {
            "location": "/collections--index/#public-types", 
            "text": "primitive Sort  type Set  type SetIs  class HashSet  class SetValues  class RingBuffer  class Reverse  class Range  type Map  type MapIs  class HashMap  class MapKeys  class MapValues  class MapPairs  class ListNode  class List  class ListNodes  class ListValues  interface Hashable  interface HashFunction  primitive HashEq  primitive HashIs  primitive HashByteSeq  interface Flag  class Flags", 
            "title": "Public Types"
        }, 
        {
            "location": "/collections--index/#private-types", 
            "text": "primitive _MapEmpty  primitive _MapDeleted", 
            "title": "Private Types"
        }, 
        {
            "location": "/collections-Sort/", 
            "text": "Sort[A: \nSeq\n[B] ref, B: \nComparable\n[B] #read]\n\n\nImplementation of dual-pivot quicksort.\n\n\nprimitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Sort[A, B] val^\n\n\n\n\nReturns\n\n\n\n\nSort\n[A, B] val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nSort the given seq.\n\n\nfun box apply(\n  a: A)\n: A^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Sort[A, B] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSort\n[A, B] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Sort[A, B] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSort\n[A, B] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_sort\n\n\nfun box _sort(\n  a: A,\n  lo: ISize val,\n  hi: ISize val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\nlo: \nISize\n val\n\n\nhi: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_swap\n\n\nfun box _swap(\n  a: A,\n  i: ISize val,\n  j: ISize val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\ni: \nISize\n val\n\n\nj: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?", 
            "title": "primitive Sort"
        }, 
        {
            "location": "/collections-Sort/#sort91a-seq91b93-ref-b-comparable91b93-read93", 
            "text": "Implementation of dual-pivot quicksort.  primitive val Sort[A: Seq[B] ref, B: Comparable[B] #read]", 
            "title": "Sort[A: Seq[B] ref, B: Comparable[B] #read]"
        }, 
        {
            "location": "/collections-Sort/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Sort/#create", 
            "text": "new val create()\n: Sort[A, B] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-Sort/#returns", 
            "text": "Sort [A, B] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Sort/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Sort/#apply", 
            "text": "Sort the given seq.  fun box apply(\n  a: A)\n: A^", 
            "title": "apply"
        }, 
        {
            "location": "/collections-Sort/#parameters", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Sort/#returns_1", 
            "text": "A^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Sort/#eq", 
            "text": "fun box eq(\n  that: Sort[A, B] val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-Sort/#parameters_1", 
            "text": "that:  Sort [A, B] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Sort/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Sort/#ne", 
            "text": "fun box ne(\n  that: Sort[A, B] val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-Sort/#parameters_2", 
            "text": "that:  Sort [A, B] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Sort/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Sort/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-Sort/#_sort", 
            "text": "fun box _sort(\n  a: A,\n  lo: ISize val,\n  hi: ISize val)\n: None val ?", 
            "title": "_sort"
        }, 
        {
            "location": "/collections-Sort/#parameters_3", 
            "text": "a: A  lo:  ISize  val  hi:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Sort/#returns_4", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Sort/#_swap", 
            "text": "fun box _swap(\n  a: A,\n  i: ISize val,\n  j: ISize val)\n: None val ?", 
            "title": "_swap"
        }, 
        {
            "location": "/collections-Sort/#parameters_4", 
            "text": "a: A  i:  ISize  val  j:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Sort/#returns_5", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Set/", 
            "text": "Set[A: (\nHashable\n #read \n \nEquatable\n[A] #read)]\n\n\ntype Set[A: (Hashable #read \n Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashSet\n[A, \nHashEq\n[A] val] ref", 
            "title": "type Set"
        }, 
        {
            "location": "/collections-Set/#set91a-hashable-read-equatable91a93-read93", 
            "text": "type Set[A: (Hashable #read   Equatable[A] #read)] is\n  HashSet[A, HashEq[A] val] ref", 
            "title": "Set[A: (Hashable #read &amp; Equatable[A] #read)]"
        }, 
        {
            "location": "/collections-Set/#type-alias-for", 
            "text": "HashSet [A,  HashEq [A] val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-SetIs/", 
            "text": "SetIs[A: A]\n\n\ntype SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashSet\n[A, \nHashIs\n[A!] val] ref", 
            "title": "type SetIs"
        }, 
        {
            "location": "/collections-SetIs/#setis91a-a93", 
            "text": "type SetIs[A: A] is\n  HashSet[A, HashIs[A!] val] ref", 
            "title": "SetIs[A: A]"
        }, 
        {
            "location": "/collections-SetIs/#type-alias-for", 
            "text": "HashSet [A,  HashIs [A!] val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-HashSet/", 
            "text": "HashSet[A: A, H: \nHashFunction\n[A!] val]\n\n\nA set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself\n\n\nclass ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref\n\n\n\n\nImplements\n\n\n\n\nComparable\n[\nHashSet\n[A, H] box] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nDefaults to a prealloc of 8.\n\n\nnew ref create(\n  prealloc: USize val = seq)\n: HashSet[A, H] ref^\n\n\n\n\nParameters\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nThe number of items in the set.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the set.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturn the value if its in the set, otherwise raise an error.\n\n\nfun box apply(\n  value: box-\nA!)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\nvalue: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\ncontains\n\n\nChecks whether the set contains the value.\n\n\nfun box contains(\n  value: box-\nA!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\n\nRemove all elements from the set.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\n\nAdd a value to the set.\n\n\nfun ref set(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\n\nRemove a value from the set.\n\n\nfun ref unset(\n  value: box-\nA!)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nextract\n\n\nRemove a value from the set and return it. Raises an error if the value\nwasn't in the set.\n\n\nfun ref extract(\n  value: box-\nA!)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\nvalue: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunion\n\n\nAdd everything in that to the set.\n\n\nfun ref union(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect[optional K: \nHashFunction\n[box-\nA!] val]\n\n\nRemove everything that isn't in that.\n\n\nfun ref intersect[optional K: HashFunction[box-\nA!] val](\n  that: HashSet[box-\nA!, K] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[box-\nA!, K] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\n\nRemove elements in this which are also in that. Add elements in that which\nare not in this.\n\n\nfun ref difference(\n  that: Iterator[A^] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIterator\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nRemove everything that is in that.\n\n\nfun ref remove(\n  that: Iterator[box-\nA!] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIterator\n[box-\nA!] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nAdd a value to the set.\n\n\nfun box add[optional K: HashFunction[this-\nA!] val](\n  value: this-\nA!)\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: this-\nA!\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\nsub[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nRemove a value from the set.\n\n\nfun box sub[optional K: HashFunction[this-\nA!] val](\n  value: box-\nthis-\nA!)\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: box-\nthis-\nA!\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\nop_or[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nCreate a set with the elements of both this and that.\n\n\nfun box op_or[optional K: HashFunction[this-\nA!] val](\n  that: this-\nHashSet[A, H] ref)\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this-\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\nop_and[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nCreate a set with the elements that are in both this and that.\n\n\nfun box op_and[optional K: HashFunction[this-\nA!] val](\n  that: this-\nHashSet[A, H] ref)\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this-\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\nop_xor[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nCreate a set with the elements that are in either set but not both.\n\n\nfun box op_xor[optional K: HashFunction[this-\nA!] val](\n  that: this-\nHashSet[A, H] ref)\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this-\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\nwithout[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nCreate a set with the elements of this that are not in that.\n\n\nfun box without[optional K: HashFunction[this-\nA!] val](\n  that: this-\nHashSet[A, H] ref)\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nParameters\n\n\n\n\nthat: this-\nHashSet\n[A, H] ref\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\nclone[optional K: \nHashFunction\n[this-\nA!] val]\n\n\nCreate a clone. The element type may be different due to aliasing and\nviewpoint adaptation.\n\n\nfun box clone[optional K: HashFunction[this-\nA!] val]()\n: HashSet[this-\nA!, K] ref^\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[this-\nA!, K] ref^\n\n\n\n\n\n\neq\n\n\nReturns true if the sets contain the same elements.\n\n\nfun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nReturns false if the sets contain the same elements.\n\n\nfun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturns true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturns true if every element in this is also in that.\n\n\nfun box le(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nReturns true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nReturns true if every element in that is also in this.\n\n\nfun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext_index\n\n\nGiven an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = seq)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nprev: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\n\nReturns the value at a given index. Raise an error if the index is not\npopulated.\n\n\nfun box index(\n  i: USize val)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: SetValues[A, H, this-\nHashSet[A, H] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nSetValues\n[A, H, this-\nHashSet\n[A, H] ref] ref^\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)", 
            "title": "class HashSet"
        }, 
        {
            "location": "/collections-HashSet/#hashset91a-a-h-hashfunction91a93-val93", 
            "text": "A set, built on top of a HashMap. This is implemented as map of an alias of\na type to itself  class ref HashSet[A: A, H: HashFunction[A!] val] is\n  Comparable[HashSet[A, H] box] ref", 
            "title": "HashSet[A: A, H: HashFunction[A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#implements", 
            "text": "Comparable [ HashSet [A, H] box] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-HashSet/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashSet/#create", 
            "text": "Defaults to a prealloc of 8.  new ref create(\n  prealloc: USize val = seq)\n: HashSet[A, H] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-HashSet/#parameters", 
            "text": "prealloc:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns", 
            "text": "HashSet [A, H] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashSet/#size", 
            "text": "The number of items in the set.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-HashSet/#returns_1", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#space", 
            "text": "The available space in the set.  fun box space()\n: USize val", 
            "title": "space"
        }, 
        {
            "location": "/collections-HashSet/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#apply", 
            "text": "Return the value if its in the set, otherwise raise an error.  fun box apply(\n  value: box- A!)\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-HashSet/#parameters_1", 
            "text": "value: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_3", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#contains", 
            "text": "Checks whether the set contains the value.  fun box contains(\n  value: box- A!)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/collections-HashSet/#parameters_2", 
            "text": "value: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#clear", 
            "text": "Remove all elements from the set.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/collections-HashSet/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#set", 
            "text": "Add a value to the set.  fun ref set(\n  value: A)\n: None val", 
            "title": "set"
        }, 
        {
            "location": "/collections-HashSet/#parameters_3", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#unset", 
            "text": "Remove a value from the set.  fun ref unset(\n  value: box- A!)\n: None val", 
            "title": "unset"
        }, 
        {
            "location": "/collections-HashSet/#parameters_4", 
            "text": "value: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#extract", 
            "text": "Remove a value from the set and return it. Raises an error if the value\nwasn't in the set.  fun ref extract(\n  value: box- A!)\n: A^ ?", 
            "title": "extract"
        }, 
        {
            "location": "/collections-HashSet/#parameters_5", 
            "text": "value: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_8", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#union", 
            "text": "Add everything in that to the set.  fun ref union(\n  that: Iterator[A^] ref)\n: None val", 
            "title": "union"
        }, 
        {
            "location": "/collections-HashSet/#parameters_6", 
            "text": "that:  Iterator [A^] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#intersect91optional-k-hashfunction91box-a93-val93", 
            "text": "Remove everything that isn't in that.  fun ref intersect[optional K: HashFunction[box- A!] val](\n  that: HashSet[box- A!, K] ref)\n: None val", 
            "title": "intersect[optional K: HashFunction[box-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_7", 
            "text": "that:  HashSet [box- A!, K] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#difference", 
            "text": "Remove elements in this which are also in that. Add elements in that which\nare not in this.  fun ref difference(\n  that: Iterator[A^] ref)\n: None val", 
            "title": "difference"
        }, 
        {
            "location": "/collections-HashSet/#parameters_8", 
            "text": "that:  Iterator [A^] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#remove", 
            "text": "Remove everything that is in that.  fun ref remove(\n  that: Iterator[box- A!] ref)\n: None val", 
            "title": "remove"
        }, 
        {
            "location": "/collections-HashSet/#parameters_9", 
            "text": "that:  Iterator [box- A!] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#add91optional-k-hashfunction91this-a93-val93", 
            "text": "Add a value to the set.  fun box add[optional K: HashFunction[this- A!] val](\n  value: this- A!)\n: HashSet[this- A!, K] ref^", 
            "title": "add[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_10", 
            "text": "value: this- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_13", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#sub91optional-k-hashfunction91this-a93-val93", 
            "text": "Remove a value from the set.  fun box sub[optional K: HashFunction[this- A!] val](\n  value: box- this- A!)\n: HashSet[this- A!, K] ref^", 
            "title": "sub[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_11", 
            "text": "value: box- this- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_14", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#op_or91optional-k-hashfunction91this-a93-val93", 
            "text": "Create a set with the elements of both this and that.  fun box op_or[optional K: HashFunction[this- A!] val](\n  that: this- HashSet[A, H] ref)\n: HashSet[this- A!, K] ref^", 
            "title": "op_or[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_12", 
            "text": "that: this- HashSet [A, H] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_15", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#op_and91optional-k-hashfunction91this-a93-val93", 
            "text": "Create a set with the elements that are in both this and that.  fun box op_and[optional K: HashFunction[this- A!] val](\n  that: this- HashSet[A, H] ref)\n: HashSet[this- A!, K] ref^", 
            "title": "op_and[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_13", 
            "text": "that: this- HashSet [A, H] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_16", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#op_xor91optional-k-hashfunction91this-a93-val93", 
            "text": "Create a set with the elements that are in either set but not both.  fun box op_xor[optional K: HashFunction[this- A!] val](\n  that: this- HashSet[A, H] ref)\n: HashSet[this- A!, K] ref^", 
            "title": "op_xor[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_14", 
            "text": "that: this- HashSet [A, H] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_17", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#without91optional-k-hashfunction91this-a93-val93", 
            "text": "Create a set with the elements of this that are not in that.  fun box without[optional K: HashFunction[this- A!] val](\n  that: this- HashSet[A, H] ref)\n: HashSet[this- A!, K] ref^", 
            "title": "without[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#parameters_15", 
            "text": "that: this- HashSet [A, H] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_18", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#clone91optional-k-hashfunction91this-a93-val93", 
            "text": "Create a clone. The element type may be different due to aliasing and\nviewpoint adaptation.  fun box clone[optional K: HashFunction[this- A!] val]()\n: HashSet[this- A!, K] ref^", 
            "title": "clone[optional K: HashFunction[this-&gt;A!] val]"
        }, 
        {
            "location": "/collections-HashSet/#returns_19", 
            "text": "HashSet [this- A!, K] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#eq", 
            "text": "Returns true if the sets contain the same elements.  fun box eq(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-HashSet/#parameters_16", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_20", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#ne", 
            "text": "Returns false if the sets contain the same elements.  fun box ne(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-HashSet/#parameters_17", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_21", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#lt", 
            "text": "Returns true if every element in this is also in that, and this has fewer\nelements than that.  fun box lt(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/collections-HashSet/#parameters_18", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_22", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#le", 
            "text": "Returns true if every element in this is also in that.  fun box le(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/collections-HashSet/#parameters_19", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#gt", 
            "text": "Returns true if every element in that is also in this, and this has more\nelements than that.  fun box gt(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/collections-HashSet/#parameters_20", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_24", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#ge", 
            "text": "Returns true if every element in that is also in this.  fun box ge(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/collections-HashSet/#parameters_21", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_25", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#next_index", 
            "text": "Given an index, return the next index that has a populated value. Raise an\nerror if there is no next populated index.  fun box next_index(\n  prev: USize val = seq)\n: USize val ?", 
            "title": "next_index"
        }, 
        {
            "location": "/collections-HashSet/#parameters_22", 
            "text": "prev:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_26", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#index", 
            "text": "Returns the value at a given index. Raise an error if the index is not\npopulated.  fun box index(\n  i: USize val)\n: this- A ?", 
            "title": "index"
        }, 
        {
            "location": "/collections-HashSet/#parameters_23", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_27", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#values", 
            "text": "Return an iterator over the values.  fun box values()\n: SetValues[A, H, this- HashSet[A, H] ref] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-HashSet/#returns_28", 
            "text": "SetValues [A, H, this- HashSet [A, H] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashSet/#compare", 
            "text": "fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/collections-HashSet/#parameters_24", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashSet/#returns_29", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-SetValues/", 
            "text": "SetValues[A: A, H: \nHashFunction\n[A!] val, S: \nHashSet\n[A, H] #read]\n\n\nAn iterator over the values in a set.\n\n\nclass ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S-\nA] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[S-\nA] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  set: S)\n: SetValues[A, H, S] ref^\n\n\n\n\nParameters\n\n\n\n\nset: S\n\n\n\n\nReturns\n\n\n\n\nSetValues\n[A, H, S] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: S-\nA ?\n\n\n\n\nReturns\n\n\n\n\nS-\nA ?", 
            "title": "class SetValues"
        }, 
        {
            "location": "/collections-SetValues/#setvalues91a-a-h-hashfunction91a93-val-s-hashset91a-h93-read93", 
            "text": "An iterator over the values in a set.  class ref SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read] is\n  Iterator[S- A] ref", 
            "title": "SetValues[A: A, H: HashFunction[A!] val, S: HashSet[A, H] #read]"
        }, 
        {
            "location": "/collections-SetValues/#implements", 
            "text": "Iterator [S- A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-SetValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-SetValues/#create", 
            "text": "new ref create(\n  set: S)\n: SetValues[A, H, S] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-SetValues/#parameters", 
            "text": "set: S", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-SetValues/#returns", 
            "text": "SetValues [A, H, S] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-SetValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-SetValues/#has_next", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the set.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-SetValues/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-SetValues/#next", 
            "text": "Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: S- A ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-SetValues/#returns_2", 
            "text": "S- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/", 
            "text": "RingBuffer[A: A]\n\n\nA ring buffer.\n\n\nclass ref RingBuffer[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  len: USize val)\n: RingBuffer[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nRingBuffer\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhead\n\n\nThe first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.\n\n\nfun box head()\n: USize val ?\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nsize\n\n\nThe number of elements that have been added to the ring.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the ring.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.\n\n\nfun box apply(\n  i: USize val)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\npush\n\n\nAdd an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.\n\n\nfun ref push(\n  value: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclear\n\n\nClear the queue.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class RingBuffer"
        }, 
        {
            "location": "/collections-RingBuffer/#ringbuffer91a-a93", 
            "text": "A ring buffer.  class ref RingBuffer[A: A]", 
            "title": "RingBuffer[A: A]"
        }, 
        {
            "location": "/collections-RingBuffer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-RingBuffer/#create", 
            "text": "new ref create(\n  len: USize val)\n: RingBuffer[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-RingBuffer/#parameters", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-RingBuffer/#returns", 
            "text": "RingBuffer [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-RingBuffer/#head", 
            "text": "The first read that will succeed. If nothing has been written to the ring,\nthis will raise an error.  fun box head()\n: USize val ?", 
            "title": "head"
        }, 
        {
            "location": "/collections-RingBuffer/#returns_1", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/#size", 
            "text": "The number of elements that have been added to the ring.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-RingBuffer/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/#space", 
            "text": "The available space in the ring.  fun box space()\n: USize val", 
            "title": "space"
        }, 
        {
            "location": "/collections-RingBuffer/#returns_3", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/#apply", 
            "text": "Get the i-th element from the ring. If the i-th element has not yet been\nadded or is no longer available, this will raise an error.  fun box apply(\n  i: USize val)\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-RingBuffer/#parameters_1", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-RingBuffer/#returns_4", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/#push", 
            "text": "Add an element to the ring. If the ring is full, this will drop the oldest\nelement in the ring. Returns true if an element was dropped.  fun ref push(\n  value: A)\n: Bool val", 
            "title": "push"
        }, 
        {
            "location": "/collections-RingBuffer/#parameters_2", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-RingBuffer/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-RingBuffer/#clear", 
            "text": "Clear the queue.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/collections-RingBuffer/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Reverse/", 
            "text": "Reverse[optional A: (\nReal\n[A] val \n (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\n\nProduces [max, min].\n\n\nclass ref Reverse[optional A: (Real[A] val \n (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  max: A,\n  min: A,\n  dec: A = seq)\n: Reverse[A] ref^\n\n\n\n\nParameters\n\n\n\n\nmax: A\n\n\nmin: A\n\n\ndec: A = seq\n\n\n\n\nReturns\n\n\n\n\nReverse\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nrewind\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Reverse"
        }, 
        {
            "location": "/collections-Reverse/#reverse91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93", 
            "text": "Produces [max, min].  class ref Reverse[optional A: (Real[A] val   (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref", 
            "title": "Reverse[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        }, 
        {
            "location": "/collections-Reverse/#implements", 
            "text": "Iterator [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-Reverse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Reverse/#create", 
            "text": "new ref create(\n  max: A,\n  min: A,\n  dec: A = seq)\n: Reverse[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-Reverse/#parameters", 
            "text": "max: A  min: A  dec: A = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Reverse/#returns", 
            "text": "Reverse [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Reverse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Reverse/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-Reverse/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Reverse/#next", 
            "text": "fun ref next()\n: A", 
            "title": "next"
        }, 
        {
            "location": "/collections-Reverse/#returns_2", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Reverse/#rewind", 
            "text": "fun ref rewind()\n: None val", 
            "title": "rewind"
        }, 
        {
            "location": "/collections-Reverse/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Range/", 
            "text": "Range[optional A: (\nReal\n[A] val \n (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\n\nProduces \n[min, max)\n with a step of \ninc\n for any \nNumber\n type.\n\n\n// iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  handle_u8(range.next())\nend\n\n\n\n\nSupports \nmin\n being smaller than \nmax\n with negative \ninc\n\nbut only for signed integer types and floats:\n\n\nvar previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left \n previous) then\n    error\n  end\n  previous = left\nend\n\n\n\n\nIf the \nstep\n is not moving \nmin\n towards \nmax\n or if it is \n0\n,\nthe Range is considered infinite and iterating over it\nwill never terminate:\n\n\nlet infinite_range1 = Range(0, 1, 0)\ninfinite_range1.is_infinite() == true\n\nlet infinite_range2 = Range[I8](0, 10, -1)\nfor _ in infinite_range2 do\n  env.out.print(\nwill this ever end?\n)\n  env.err.print(\nno, never!\n)\nend\n\n\n\n\nWhen using \nRange\n with  floating point types (\nF32\n and \nF64\n)\n\ninc\n steps \n 1.0 are possible. If any of the arguments contains\n\nNaN\n, \n+Inf\n or \n-Inf\n the range is considered infinite as operations on\nany of them won't move \nmin\n towards \nmax\n.\nThe actual values produced by such a \nRange\n are determined by what IEEE 754\ndefines as the result of \nmin\n + \ninc\n:\n\n\nfor and_a_half in Range[F64](0.5, 100) do\n  handle_half(and_a_half)\nend\n\n// this Range will produce 0 at first, then infinitely NaN\nlet nan: F64 = F64(0) / F64(0)\nfor what_am_i in Range[F64](0, 1000, nan) do\n  wild_guess(what_am_i)\nend\n\n\n\n\nclass ref Range[optional A: (Real[A] val \n (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  min: A,\n  max: A,\n  inc: A = seq)\n: Range[A] ref^\n\n\n\n\nParameters\n\n\n\n\nmin: A\n\n\nmax: A\n\n\ninc: A = seq\n\n\n\n\nReturns\n\n\n\n\nRange\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nrewind\n\n\nfun ref rewind()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nis_infinite\n\n\nfun box is_infinite()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class Range"
        }, 
        {
            "location": "/collections-Range/#range91optional-a-real91a93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93", 
            "text": "Produces  [min, max)  with a step of  inc  for any  Number  type.  // iterating with for-loop\nfor i in Range(0, 10) do\n  env.out.print(i.string())\nend\n\n// iterating over Range of U8 with while-loop\nlet range = Range[U8](5, 100, 5)\nwhile range.has_next() do\n  handle_u8(range.next())\nend  Supports  min  being smaller than  max  with negative  inc \nbut only for signed integer types and floats:  var previous = 11\nfor left in Range[I64](10, -5, -1) do\n  if not (left   previous) then\n    error\n  end\n  previous = left\nend  If the  step  is not moving  min  towards  max  or if it is  0 ,\nthe Range is considered infinite and iterating over it\nwill never terminate:  let infinite_range1 = Range(0, 1, 0)\ninfinite_range1.is_infinite() == true\n\nlet infinite_range2 = Range[I8](0, 10, -1)\nfor _ in infinite_range2 do\n  env.out.print( will this ever end? )\n  env.err.print( no, never! )\nend  When using  Range  with  floating point types ( F32  and  F64 ) inc  steps   1.0 are possible. If any of the arguments contains NaN ,  +Inf  or  -Inf  the range is considered infinite as operations on\nany of them won't move  min  towards  max .\nThe actual values produced by such a  Range  are determined by what IEEE 754\ndefines as the result of  min  +  inc :  for and_a_half in Range[F64](0.5, 100) do\n  handle_half(and_a_half)\nend\n\n// this Range will produce 0 at first, then infinitely NaN\nlet nan: F64 = F64(0) / F64(0)\nfor what_am_i in Range[F64](0, 1000, nan) do\n  wild_guess(what_am_i)\nend  class ref Range[optional A: (Real[A] val   (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))] is\n  Iterator[A] ref", 
            "title": "Range[optional A: (Real[A] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        }, 
        {
            "location": "/collections-Range/#implements", 
            "text": "Iterator [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-Range/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Range/#create", 
            "text": "new ref create(\n  min: A,\n  max: A,\n  inc: A = seq)\n: Range[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-Range/#parameters", 
            "text": "min: A  max: A  inc: A = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Range/#returns", 
            "text": "Range [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Range/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Range/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-Range/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Range/#next", 
            "text": "fun ref next()\n: A", 
            "title": "next"
        }, 
        {
            "location": "/collections-Range/#returns_2", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Range/#rewind", 
            "text": "fun ref rewind()\n: None val", 
            "title": "rewind"
        }, 
        {
            "location": "/collections-Range/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Range/#is_infinite", 
            "text": "fun box is_infinite()\n: Bool val", 
            "title": "is_infinite"
        }, 
        {
            "location": "/collections-Range/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-_MapEmpty/", 
            "text": "_MapEmpty\n\n\nprimitive val _MapEmpty\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _MapEmpty val^\n\n\n\n\nReturns\n\n\n\n\n_MapEmpty\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _MapEmpty val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapEmpty\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _MapEmpty val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapEmpty\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _MapEmpty"
        }, 
        {
            "location": "/collections-_MapEmpty/#_mapempty", 
            "text": "primitive val _MapEmpty", 
            "title": "_MapEmpty"
        }, 
        {
            "location": "/collections-_MapEmpty/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_MapEmpty/#create", 
            "text": "new val create()\n: _MapEmpty val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-_MapEmpty/#returns", 
            "text": "_MapEmpty  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-_MapEmpty/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_MapEmpty/#eq", 
            "text": "fun box eq(\n  that: _MapEmpty val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-_MapEmpty/#parameters", 
            "text": "that:  _MapEmpty  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-_MapEmpty/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-_MapEmpty/#ne", 
            "text": "fun box ne(\n  that: _MapEmpty val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-_MapEmpty/#parameters_1", 
            "text": "that:  _MapEmpty  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-_MapEmpty/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-_MapDeleted/", 
            "text": "_MapDeleted\n\n\nprimitive val _MapDeleted\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _MapDeleted val^\n\n\n\n\nReturns\n\n\n\n\n_MapDeleted\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _MapDeleted val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapDeleted\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _MapDeleted val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MapDeleted\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _MapDeleted"
        }, 
        {
            "location": "/collections-_MapDeleted/#_mapdeleted", 
            "text": "primitive val _MapDeleted", 
            "title": "_MapDeleted"
        }, 
        {
            "location": "/collections-_MapDeleted/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-_MapDeleted/#create", 
            "text": "new val create()\n: _MapDeleted val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-_MapDeleted/#returns", 
            "text": "_MapDeleted  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-_MapDeleted/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-_MapDeleted/#eq", 
            "text": "fun box eq(\n  that: _MapDeleted val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-_MapDeleted/#parameters", 
            "text": "that:  _MapDeleted  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-_MapDeleted/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-_MapDeleted/#ne", 
            "text": "fun box ne(\n  that: _MapDeleted val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-_MapDeleted/#parameters_1", 
            "text": "that:  _MapDeleted  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-_MapDeleted/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Map/", 
            "text": "Map[K: (\nHashable\n #read \n \nEquatable\n[K] #read), V: V]\n\n\nThis is a map that uses structural equality on the key.\n\n\ntype Map[K: (Hashable #read \n Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[K, V, \nHashEq\n[K] val] ref", 
            "title": "type Map"
        }, 
        {
            "location": "/collections-Map/#map91k-hashable-read-equatable91k93-read-v-v93", 
            "text": "This is a map that uses structural equality on the key.  type Map[K: (Hashable #read   Equatable[K] #read), V: V] is\n  HashMap[K, V, HashEq[K] val] ref", 
            "title": "Map[K: (Hashable #read &amp; Equatable[K] #read), V: V]"
        }, 
        {
            "location": "/collections-Map/#type-alias-for", 
            "text": "HashMap [K, V,  HashEq [K] val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-MapIs/", 
            "text": "MapIs[K: K, V: V]\n\n\nThis is a map that uses identity comparison on the key.\n\n\ntype MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[K, V, \nHashIs\n[K] val] ref", 
            "title": "type MapIs"
        }, 
        {
            "location": "/collections-MapIs/#mapis91k-k-v-v93", 
            "text": "This is a map that uses identity comparison on the key.  type MapIs[K: K, V: V] is\n  HashMap[K, V, HashIs[K] val] ref", 
            "title": "MapIs[K: K, V: V]"
        }, 
        {
            "location": "/collections-MapIs/#type-alias-for", 
            "text": "HashMap [K, V,  HashIs [K] val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-HashMap/", 
            "text": "HashMap[K: K, V: V, H: \nHashFunction\n[K] val]\n\n\nA quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.\n\n\nclass ref HashMap[K: K, V: V, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  prealloc: USize val = seq)\n: HashMap[K, V, H] ref^\n\n\n\n\nParameters\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nThe number of items in the map.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nspace\n\n\nThe available space in the map. Resize will happen when\nsize / space \n= 0.75.\n\n\nfun box space()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGets a value from the map. Raises an error if no such item exists.\n\n\nfun box apply(\n  key: box-\nK!)\n: this-\nV ?\n\n\n\n\nParameters\n\n\n\n\nkey: box-\nK!\n\n\n\n\nReturns\n\n\n\n\nthis-\nV ?\n\n\n\n\n\n\nupdate\n\n\nSets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.\n\n\nfun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\n(V^ | \nNone\n val)\n\n\n\n\n\n\nupsert\n\n\nCombines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.\n\n\nAs a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call\n\n\nm.upsert(\"test\", 4, {(x, y) =\n x - y })\n\n\nThis changes the value associated with \"test\" to -2.\n\n\nIf we have not yet added the key \"new-key\" to the map and we call\n\n\nm.upsert(\"new-key\", 4, {(x, y) =\n x - y })\n\n\nthen \"new-key\" is added to the map with a value of -4.\n\n\nReturns the value that we set the key to\n\n\nfun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\nf: {(V, V): V^}[K, V, H] box\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert\n\n\nSet a value in the map. Returns the new value, allowing reuse.\n\n\nfun ref insert(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\ninsert_if_absent\n\n\nSet a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:\n\n\nif not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend\n\n\n\n\nReturns the value, the same as \ninsert\n, allowing 'insert_if_absent'\nto be used as a drop-in replacement for \ninsert\n.\n\n\nfun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\nremove\n\n\nDelete a value from the map and return it. Raises an error if there was no\nvalue for the given key.\n\n\nfun ref remove(\n  key: box-\nK!)\n: (K^ , V^) ?\n\n\n\n\nParameters\n\n\n\n\nkey: box-\nK!\n\n\n\n\nReturns\n\n\n\n\n(K^ , V^) ?\n\n\n\n\n\n\nget_or_else\n\n\nGet the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.\n\n\nfun box get_or_else(\n  key: box-\nK!,\n  alt: this-\nV)\n: this-\nV\n\n\n\n\nParameters\n\n\n\n\nkey: box-\nK!\n\n\nalt: this-\nV\n\n\n\n\nReturns\n\n\n\n\nthis-\nV\n\n\n\n\n\n\ncontains\n\n\nChecks whether the map contains the key k\n\n\nfun box contains(\n  k: box-\nK!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nk: box-\nK!\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nconcat\n\n\nAdd K, V pairs from the iterator to the map.\n\n\nfun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[(K^ , V^)] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd[optional H2: \nHashFunction\n[this-\nK!] val]\n\n\nThis with the new (key, value) mapping.\n\n\nfun box add[optional H2: HashFunction[this-\nK!] val](\n  key: this-\nK!,\n  value: this-\nV!)\n: HashMap[this-\nK!, this-\nV!, H2] ref^\n\n\n\n\nParameters\n\n\n\n\nkey: this-\nK!\n\n\nvalue: this-\nV!\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[this-\nK!, this-\nV!, H2] ref^\n\n\n\n\n\n\nsub[optional H2: \nHashFunction\n[this-\nK!] val]\n\n\nThis without the given key.\n\n\nfun box sub[optional H2: HashFunction[this-\nK!] val](\n  key: this-\nK!,\n  value: this-\nV!)\n: HashMap[this-\nK!, this-\nV!, H2] ref^\n\n\n\n\nParameters\n\n\n\n\nkey: this-\nK!\n\n\nvalue: this-\nV!\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[this-\nK!, this-\nV!, H2] ref^\n\n\n\n\n\n\nnext_index\n\n\nGiven an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.\n\n\nfun box next_index(\n  prev: USize val = seq)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nprev: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\nindex\n\n\nReturns the key and value at a given index.\nRaise an error if the index is not populated.\n\n\nfun box index(\n  i: USize val)\n: (this-\nK , this-\nV) ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(this-\nK , this-\nV) ?\n\n\n\n\n\n\ncompact\n\n\nMinimise the memory used for the map.\n\n\nfun ref compact()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone[optional H2: \nHashFunction\n[this-\nK!] val]\n\n\nCreate a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.\n\n\nfun box clone[optional H2: HashFunction[this-\nK!] val]()\n: HashMap[this-\nK!, this-\nV!, H2] ref^\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[this-\nK!, this-\nV!, H2] ref^\n\n\n\n\n\n\nclear\n\n\nRemove all entries.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nkeys\n\n\nReturn an iterator over the keys.\n\n\nfun box keys()\n: MapKeys[K, V, H, this-\nHashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nMapKeys\n[K, V, H, this-\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values.\n\n\nfun box values()\n: MapValues[K, V, H, this-\nHashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nMapValues\n[K, V, H, this-\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\npairs\n\n\nReturn an iterator over the keys and values.\n\n\nfun box pairs()\n: MapPairs[K, V, H, this-\nHashMap[K, V, H] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nMapPairs\n[K, V, H, this-\nHashMap\n[K, V, H] ref] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_search\n\n\nReturn a slot number and whether or not it's currently occupied.\n\n\nfun box _search(\n  key: box-\nK!)\n: (USize val , Bool val)\n\n\n\n\nParameters\n\n\n\n\nkey: box-\nK!\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nBool\n val)\n\n\n\n\n\n\n_resize\n\n\nChange the available space.\n\n\nfun ref _resize(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class HashMap"
        }, 
        {
            "location": "/collections-HashMap/#hashmap91k-k-v-v-h-hashfunction91k93-val93", 
            "text": "A quadratic probing hash map. Resize occurs at a load factor of 0.75. A\nresized map has 2 times the space. The hash function can be plugged in to the\ntype to create different kinds of maps.  class ref HashMap[K: K, V: V, H: HashFunction[K] val]", 
            "title": "HashMap[K: K, V: V, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-HashMap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashMap/#create", 
            "text": "new ref create(\n  prealloc: USize val = seq)\n: HashMap[K, V, H] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-HashMap/#parameters", 
            "text": "prealloc:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns", 
            "text": "HashMap [K, V, H] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashMap/#size", 
            "text": "The number of items in the map.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-HashMap/#returns_1", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#space", 
            "text": "The available space in the map. Resize will happen when\nsize / space  = 0.75.  fun box space()\n: USize val", 
            "title": "space"
        }, 
        {
            "location": "/collections-HashMap/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#apply", 
            "text": "Gets a value from the map. Raises an error if no such item exists.  fun box apply(\n  key: box- K!)\n: this- V ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-HashMap/#parameters_1", 
            "text": "key: box- K!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_3", 
            "text": "this- V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#update", 
            "text": "Sets a value in the map. Returns the old value if there was one, otherwise\nreturns None. If there was no previous value, this may trigger a resize.  fun ref update(\n  key: K,\n  value: V)\n: (V^ | None val)", 
            "title": "update"
        }, 
        {
            "location": "/collections-HashMap/#parameters_2", 
            "text": "key: K  value: V", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_4", 
            "text": "(V^ |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#upsert", 
            "text": "Combines a provided value with the current value for the provided key\nusing the provided function. If the provided key has not been added to\nthe map yet, it sets its value to the provided value.  As a simple example, say we had a map with I64 values and we wanted to\nadd 4 to the current value for key \"test\", which let's say is currently 2.\nWe call  m.upsert(\"test\", 4, {(x, y) =  x - y })  This changes the value associated with \"test\" to -2.  If we have not yet added the key \"new-key\" to the map and we call  m.upsert(\"new-key\", 4, {(x, y) =  x - y })  then \"new-key\" is added to the map with a value of -4.  Returns the value that we set the key to  fun ref upsert(\n  key: K,\n  value: V,\n  f: {(V, V): V^}[K, V, H] box)\n: V ?", 
            "title": "upsert"
        }, 
        {
            "location": "/collections-HashMap/#parameters_3", 
            "text": "key: K  value: V  f: {(V, V): V^}[K, V, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_5", 
            "text": "V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#insert", 
            "text": "Set a value in the map. Returns the new value, allowing reuse.  fun ref insert(\n  key: K,\n  value: V)\n: V ?", 
            "title": "insert"
        }, 
        {
            "location": "/collections-HashMap/#parameters_4", 
            "text": "key: K  value: V", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_6", 
            "text": "V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#insert_if_absent", 
            "text": "Set a value in the map if the key doesn't already exist in the Map.\nSaves an extra lookup when doing a pattern like:  if not my_map.contains(my_key) then\n  my_map(my_key) = my_value\nend  Returns the value, the same as  insert , allowing 'insert_if_absent'\nto be used as a drop-in replacement for  insert .  fun ref insert_if_absent(\n  key: K,\n  value: V)\n: V ?", 
            "title": "insert_if_absent"
        }, 
        {
            "location": "/collections-HashMap/#parameters_5", 
            "text": "key: K  value: V", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_7", 
            "text": "V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#remove", 
            "text": "Delete a value from the map and return it. Raises an error if there was no\nvalue for the given key.  fun ref remove(\n  key: box- K!)\n: (K^ , V^) ?", 
            "title": "remove"
        }, 
        {
            "location": "/collections-HashMap/#parameters_6", 
            "text": "key: box- K!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_8", 
            "text": "(K^ , V^) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#get_or_else", 
            "text": "Get the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.  fun box get_or_else(\n  key: box- K!,\n  alt: this- V)\n: this- V", 
            "title": "get_or_else"
        }, 
        {
            "location": "/collections-HashMap/#parameters_7", 
            "text": "key: box- K!  alt: this- V", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_9", 
            "text": "this- V", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#contains", 
            "text": "Checks whether the map contains the key k  fun box contains(\n  k: box- K!)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/collections-HashMap/#parameters_8", 
            "text": "k: box- K!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#concat", 
            "text": "Add K, V pairs from the iterator to the map.  fun ref concat(\n  iter: Iterator[(K^ , V^)] ref)\n: None val", 
            "title": "concat"
        }, 
        {
            "location": "/collections-HashMap/#parameters_9", 
            "text": "iter:  Iterator [(K^ , V^)] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#add91optional-h2-hashfunction91this-k93-val93", 
            "text": "This with the new (key, value) mapping.  fun box add[optional H2: HashFunction[this- K!] val](\n  key: this- K!,\n  value: this- V!)\n: HashMap[this- K!, this- V!, H2] ref^", 
            "title": "add[optional H2: HashFunction[this-&gt;K!] val]"
        }, 
        {
            "location": "/collections-HashMap/#parameters_10", 
            "text": "key: this- K!  value: this- V!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_12", 
            "text": "HashMap [this- K!, this- V!, H2] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#sub91optional-h2-hashfunction91this-k93-val93", 
            "text": "This without the given key.  fun box sub[optional H2: HashFunction[this- K!] val](\n  key: this- K!,\n  value: this- V!)\n: HashMap[this- K!, this- V!, H2] ref^", 
            "title": "sub[optional H2: HashFunction[this-&gt;K!] val]"
        }, 
        {
            "location": "/collections-HashMap/#parameters_11", 
            "text": "key: this- K!  value: this- V!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_13", 
            "text": "HashMap [this- K!, this- V!, H2] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#next_index", 
            "text": "Given an index, return the next index that has a populated key and value.\nRaise an error if there is no next populated index.  fun box next_index(\n  prev: USize val = seq)\n: USize val ?", 
            "title": "next_index"
        }, 
        {
            "location": "/collections-HashMap/#parameters_12", 
            "text": "prev:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_14", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#index", 
            "text": "Returns the key and value at a given index.\nRaise an error if the index is not populated.  fun box index(\n  i: USize val)\n: (this- K , this- V) ?", 
            "title": "index"
        }, 
        {
            "location": "/collections-HashMap/#parameters_13", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_15", 
            "text": "(this- K , this- V) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#compact", 
            "text": "Minimise the memory used for the map.  fun ref compact()\n: None val", 
            "title": "compact"
        }, 
        {
            "location": "/collections-HashMap/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#clone91optional-h2-hashfunction91this-k93-val93", 
            "text": "Create a clone. The key and value types may be different due to aliasing\nand viewpoint adaptation.  fun box clone[optional H2: HashFunction[this- K!] val]()\n: HashMap[this- K!, this- V!, H2] ref^", 
            "title": "clone[optional H2: HashFunction[this-&gt;K!] val]"
        }, 
        {
            "location": "/collections-HashMap/#returns_17", 
            "text": "HashMap [this- K!, this- V!, H2] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#clear", 
            "text": "Remove all entries.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/collections-HashMap/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#keys", 
            "text": "Return an iterator over the keys.  fun box keys()\n: MapKeys[K, V, H, this- HashMap[K, V, H] ref] ref^", 
            "title": "keys"
        }, 
        {
            "location": "/collections-HashMap/#returns_19", 
            "text": "MapKeys [K, V, H, this- HashMap [K, V, H] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#values", 
            "text": "Return an iterator over the values.  fun box values()\n: MapValues[K, V, H, this- HashMap[K, V, H] ref] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-HashMap/#returns_20", 
            "text": "MapValues [K, V, H, this- HashMap [K, V, H] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#pairs", 
            "text": "Return an iterator over the keys and values.  fun box pairs()\n: MapPairs[K, V, H, this- HashMap[K, V, H] ref] ref^", 
            "title": "pairs"
        }, 
        {
            "location": "/collections-HashMap/#returns_21", 
            "text": "MapPairs [K, V, H, this- HashMap [K, V, H] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-HashMap/#_search", 
            "text": "Return a slot number and whether or not it's currently occupied.  fun box _search(\n  key: box- K!)\n: (USize val , Bool val)", 
            "title": "_search"
        }, 
        {
            "location": "/collections-HashMap/#parameters_14", 
            "text": "key: box- K!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_22", 
            "text": "( USize  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashMap/#_resize", 
            "text": "Change the available space.  fun ref _resize(\n  len: USize val)\n: None val", 
            "title": "_resize"
        }, 
        {
            "location": "/collections-HashMap/#parameters_15", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashMap/#returns_23", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapKeys/", 
            "text": "MapKeys[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\n\nAn iterator over the keys in a map.\n\n\nclass ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M-\nK] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[M-\nK] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^\n\n\n\n\nParameters\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\n\n\n\nMapKeys\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.\n\n\nfun ref next()\n: M-\nK ?\n\n\n\n\nReturns\n\n\n\n\nM-\nK ?", 
            "title": "class MapKeys"
        }, 
        {
            "location": "/collections-MapKeys/#mapkeys91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93", 
            "text": "An iterator over the keys in a map.  class ref MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M- K] ref", 
            "title": "MapKeys[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        }, 
        {
            "location": "/collections-MapKeys/#implements", 
            "text": "Iterator [M- K] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-MapKeys/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-MapKeys/#create", 
            "text": "new ref create(\n  map: M)\n: MapKeys[K, V, H, M] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-MapKeys/#parameters", 
            "text": "map: M", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-MapKeys/#returns", 
            "text": "MapKeys [K, V, H, M] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapKeys/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-MapKeys/#has_next", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-MapKeys/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapKeys/#next", 
            "text": "Returns the next key, or raises an error if there isn't one. If keys are\nadded during iteration, this may not return all keys.  fun ref next()\n: M- K ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-MapKeys/#returns_2", 
            "text": "M- K ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapValues/", 
            "text": "MapValues[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\n\nAn iterator over the values in a map.\n\n\nclass ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M-\nV] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[M-\nV] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^\n\n\n\n\nParameters\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\n\n\n\nMapValues\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.\n\n\nfun ref next()\n: M-\nV ?\n\n\n\n\nReturns\n\n\n\n\nM-\nV ?", 
            "title": "class MapValues"
        }, 
        {
            "location": "/collections-MapValues/#mapvalues91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93", 
            "text": "An iterator over the values in a map.  class ref MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[M- V] ref", 
            "title": "MapValues[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        }, 
        {
            "location": "/collections-MapValues/#implements", 
            "text": "Iterator [M- V] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-MapValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-MapValues/#create", 
            "text": "new ref create(\n  map: M)\n: MapValues[K, V, H, M] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-MapValues/#parameters", 
            "text": "map: M", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-MapValues/#returns", 
            "text": "MapValues [K, V, H, M] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-MapValues/#has_next", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-MapValues/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapValues/#next", 
            "text": "Returns the next value, or raises an error if there isn't one. If values\nare added during iteration, this may not return all values.  fun ref next()\n: M- V ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-MapValues/#returns_2", 
            "text": "M- V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapPairs/", 
            "text": "MapPairs[K: K, V: V, H: \nHashFunction\n[K] val, M: \nHashMap\n[K, V, H] #read]\n\n\nAn iterator over the keys and values in a map.\n\n\nclass ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M-\nK , M-\nV)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[(M-\nK , M-\nV)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^\n\n\n\n\nParameters\n\n\n\n\nmap: M\n\n\n\n\nReturns\n\n\n\n\nMapPairs\n[K, V, H, M] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nTrue if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nReturns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.\n\n\nfun ref next()\n: (M-\nK , M-\nV) ?\n\n\n\n\nReturns\n\n\n\n\n(M-\nK , M-\nV) ?", 
            "title": "class MapPairs"
        }, 
        {
            "location": "/collections-MapPairs/#mappairs91k-k-v-v-h-hashfunction91k93-val-m-hashmap91k-v-h93-read93", 
            "text": "An iterator over the keys and values in a map.  class ref MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read] is\n  Iterator[(M- K , M- V)] ref", 
            "title": "MapPairs[K: K, V: V, H: HashFunction[K] val, M: HashMap[K, V, H] #read]"
        }, 
        {
            "location": "/collections-MapPairs/#implements", 
            "text": "Iterator [(M- K , M- V)] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-MapPairs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-MapPairs/#create", 
            "text": "new ref create(\n  map: M)\n: MapPairs[K, V, H, M] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-MapPairs/#parameters", 
            "text": "map: M", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-MapPairs/#returns", 
            "text": "MapPairs [K, V, H, M] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapPairs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-MapPairs/#has_next", 
            "text": "True if it believes there are remaining entries. May not be right if values\nwere added or removed from the map.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-MapPairs/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-MapPairs/#next", 
            "text": "Returns the next entry, or raises an error if there isn't one. If entries\nare added during iteration, this may not return all entries.  fun ref next()\n: (M- K , M- V) ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-MapPairs/#returns_2", 
            "text": "(M- K , M- V) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/", 
            "text": "ListNode[A: A]\n\n\nA node in a list.\n\n\nclass ref ListNode[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  item: (A | None val) = seq)\n: ListNode[A] ref^\n\n\n\n\nParameters\n\n\n\n\nitem: (A | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nListNode\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReturn the item, if we have one, otherwise raise an error.\n\n\nfun box apply()\n: this-\nA ?\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nupdate\n\n\nReplace the item and return the previous one. Raise an error if we have no\nprevious value.\n\n\nfun ref update(\n  value: (A | None val))\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\nvalue: (A | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\npop\n\n\nRemove the item from the node, if we have one, otherwise raise an error.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nprepend\n\n\nPrepend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is prepended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref prepend(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nappend\n\n\nAppend a node to this one. If \nthat\n is already in a list, it is removed\nbefore it is appended. Returns true if \nthat\n was removed from another\nlist.\n\n\nfun ref append(\n  that: ListNode[A] ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\n\nRemove a node from a list.\n\n\nfun ref remove()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_prev\n\n\nReturn true if there is a previous node.\n\n\nfun box has_prev()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhas_next\n\n\nReturn true if there is a next node.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nprev\n\n\nReturn the previous node.\n\n\nfun box prev()\n: (this-\nListNode[A] ref | None val)\n\n\n\n\nReturns\n\n\n\n\n(this-\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\n\n\nnext\n\n\nReturn the next node.\n\n\nfun box next()\n: (this-\nListNode[A] ref | None val)\n\n\n\n\nReturns\n\n\n\n\n(this-\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_set_list\n\n\nMake this node the only node on the given list.\n\n\nfun ref _set_list(\n  list: List[A] ref)\n: ListNode[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlist: \nList\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nListNode\n[A] ref^", 
            "title": "class ListNode"
        }, 
        {
            "location": "/collections-ListNode/#listnode91a-a93", 
            "text": "A node in a list.  class ref ListNode[A: A]", 
            "title": "ListNode[A: A]"
        }, 
        {
            "location": "/collections-ListNode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-ListNode/#create", 
            "text": "new ref create(\n  item: (A | None val) = seq)\n: ListNode[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-ListNode/#parameters", 
            "text": "item: (A |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListNode/#returns", 
            "text": "ListNode [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-ListNode/#apply", 
            "text": "Return the item, if we have one, otherwise raise an error.  fun box apply()\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-ListNode/#returns_1", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#update", 
            "text": "Replace the item and return the previous one. Raise an error if we have no\nprevious value.  fun ref update(\n  value: (A | None val))\n: A^ ?", 
            "title": "update"
        }, 
        {
            "location": "/collections-ListNode/#parameters_1", 
            "text": "value: (A |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListNode/#returns_2", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#pop", 
            "text": "Remove the item from the node, if we have one, otherwise raise an error.  fun ref pop()\n: A^ ?", 
            "title": "pop"
        }, 
        {
            "location": "/collections-ListNode/#returns_3", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#prepend", 
            "text": "Prepend a node to this one. If  that  is already in a list, it is removed\nbefore it is prepended. Returns true if  that  was removed from another\nlist.  fun ref prepend(\n  that: ListNode[A] ref)\n: Bool val", 
            "title": "prepend"
        }, 
        {
            "location": "/collections-ListNode/#parameters_2", 
            "text": "that:  ListNode [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListNode/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#append", 
            "text": "Append a node to this one. If  that  is already in a list, it is removed\nbefore it is appended. Returns true if  that  was removed from another\nlist.  fun ref append(\n  that: ListNode[A] ref)\n: Bool val", 
            "title": "append"
        }, 
        {
            "location": "/collections-ListNode/#parameters_3", 
            "text": "that:  ListNode [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListNode/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#remove", 
            "text": "Remove a node from a list.  fun ref remove()\n: None val", 
            "title": "remove"
        }, 
        {
            "location": "/collections-ListNode/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#has_prev", 
            "text": "Return true if there is a previous node.  fun box has_prev()\n: Bool val", 
            "title": "has_prev"
        }, 
        {
            "location": "/collections-ListNode/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#has_next", 
            "text": "Return true if there is a next node.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-ListNode/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#prev", 
            "text": "Return the previous node.  fun box prev()\n: (this- ListNode[A] ref | None val)", 
            "title": "prev"
        }, 
        {
            "location": "/collections-ListNode/#returns_9", 
            "text": "(this- ListNode [A] ref |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#next", 
            "text": "Return the next node.  fun box next()\n: (this- ListNode[A] ref | None val)", 
            "title": "next"
        }, 
        {
            "location": "/collections-ListNode/#returns_10", 
            "text": "(this- ListNode [A] ref |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-ListNode/#_set_list", 
            "text": "Make this node the only node on the given list.  fun ref _set_list(\n  list: List[A] ref)\n: ListNode[A] ref^", 
            "title": "_set_list"
        }, 
        {
            "location": "/collections-ListNode/#parameters_4", 
            "text": "list:  List [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListNode/#returns_11", 
            "text": "ListNode [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/", 
            "text": "List[A: A]\n\n\nA doubly linked list.\n\n\nclass ref List[A: A] is\n  Seq[A] ref\n\n\n\n\nImplements\n\n\n\n\nSeq\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  len: USize val = seq)\n: List[A] ref^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nunit\n\n\nnew ref unit(\n  a: A)\n: List[A] ref^\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nfrom\n\n\nnew ref from(\n  seq: Array[A^] ref)\n: List[A] ref^\n\n\n\n\nParameters\n\n\n\n\nseq: \nArray\n[A^] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nreserve\n\n\nDo nothing, but be compatible with Seq.\n\n\nfun ref reserve(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nReturns the number of items in the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val = seq)\n: this-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nthis-\nA ?\n\n\n\n\n\n\nupdate\n\n\nChange the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.\n\n\nfun ref update(\n  i: USize val,\n  value: A)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nindex\n\n\nGets the i-th node, raising an error if the index is out of bounds.\n\n\nfun box index(\n  i: USize val)\n: this-\nListNode[A] ref ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nthis-\nListNode\n[A] ref ?\n\n\n\n\n\n\nremove\n\n\nRemove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.\n\n\nfun ref remove(\n  i: USize val)\n: ListNode[A] ref ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nListNode\n[A] ref ?\n\n\n\n\n\n\nclear\n\n\nEmpties the list.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhead\n\n\nGet the head of the list.\n\n\nfun box head()\n: this-\nListNode[A] ref ?\n\n\n\n\nReturns\n\n\n\n\nthis-\nListNode\n[A] ref ?\n\n\n\n\n\n\ntail\n\n\nGet the tail of the list.\n\n\nfun box tail()\n: this-\nListNode[A] ref ?\n\n\n\n\nReturns\n\n\n\n\nthis-\nListNode\n[A] ref ?\n\n\n\n\n\n\nprepend_node\n\n\nAdds a node to the head of the list.\n\n\nfun ref prepend_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_node\n\n\nAdds a node to the tail of the list.\n\n\nfun ref append_node(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nappend_list\n\n\nRemove all nodes from that and append them to this.\n\n\nfun ref append_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprepend_list\n\n\nRemove all nodes from that and prepend them to this.\n\n\nfun ref prepend_list(\n  that: List[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nList\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npush\n\n\nAdds a value to the tail of the list.\n\n\nfun ref push(\n  a: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npop\n\n\nRemoves a value from the tail of the list.\n\n\nfun ref pop()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nunshift\n\n\nAdds a value to the head of the list.\n\n\nfun ref unshift(\n  a: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\na: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshift\n\n\nRemoves a value from the head of the list.\n\n\nfun ref shift()\n: A^ ?\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nappend\n\n\nAppend len elements from a sequence, starting from the given offset.\n\n\nfun ref append(\n  seq: (ReadSeq[A] box \n ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nseq: (\nReadSeq\n[A] box \n \nReadElement\n[A^] box)\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconcat\n\n\nAdd len iterated elements to the end of the list, starting from the given\noffset.\n\n\nfun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A^] ref\n\n\noffset: \nUSize\n val = seq\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntruncate\n\n\nTruncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.\n\n\nfun ref truncate(\n  len: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclone\n\n\nClone the list.\n\n\nfun box clone()\n: List[this-\nA!] ref^\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref^\n\n\n\n\n\n\nmap[B: B]\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun box map[B: B](\n  f: {(this-\nA!): B^}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): B^}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nflat_map[B: B]\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun box flat_map[B: B](\n  f: {(this-\nA!): List[B]}[A, B] box)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): List[B]}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\nfilter\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun box filter(\n  f: {(this-\nA!): Bool}[A] box)\n: List[this-\nA!] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref^\n\n\n\n\n\n\nfold[B: B]\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun box fold[B: B](\n  f: {(B!, this-\nA!): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nf: {(B!, this-\nA!): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun box every(\n  f: {(this-\nA!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun box exists(\n  f: {(this-\nA!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun box partition(\n  f: {(this-\nA!): Bool}[A] box)\n: (List[this-\nA!] ref^ , List[this-\nA!] ref^)\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n(\nList\n[this-\nA!] ref^ , \nList\n[this-\nA!] ref^)\n\n\n\n\n\n\ndrop\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun box drop(\n  n: USize val)\n: List[this-\nA!] ref^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref^\n\n\n\n\n\n\ntake\n\n\nBuilds a list of the first n elements.\n\n\nfun box take(\n  n: USize val)\n: List[this-\nA!] ref\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref\n\n\n\n\n\n\ntake_while\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun box take_while(\n  f: {(this-\nA!): Bool}[A] box)\n: List[this-\nA!] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref^\n\n\n\n\n\n\nreverse\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun box reverse()\n: List[this-\nA!] ref^\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref^\n\n\n\n\n\n\ncontains[optional B: (A \n \nHasEq\n[A!] #read)]\n\n\nReturns true if the list contains the provided element, false otherwise.\n\n\nfun box contains[optional B: (A \n HasEq[A!] #read)](\n  a: box-\nB)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\na: box-\nB\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnodes\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box nodes()\n: ListNodes[A, this-\nListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListNodes\n[A, this-\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrnodes\n\n\nReturn an iterator on the nodes in the list.\n\n\nfun box rnodes()\n: ListNodes[A, this-\nListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListNodes\n[A, this-\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator on the values in the list.\n\n\nfun box values()\n: ListValues[A, this-\nListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListValues\n[A, this-\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nrvalues\n\n\nReturn an iterator on the values in the list.\n\n\nfun box rvalues()\n: ListValues[A, this-\nListNode[A] ref] ref^\n\n\n\n\nReturns\n\n\n\n\nListValues\n[A, this-\nListNode\n[A] ref] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_map[B: B]\n\n\nPrivate helper for map, recursively working with ListNodes.\n\n\nfun box _map[B: B](\n  ln: this-\nListNode[A] ref,\n  f: {(this-\nA!): B^}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nf: {(this-\nA!): B^}[A, B] box\n\n\nacc: \nList\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\n_flat_map[B: B]\n\n\nPrivate helper for flat_map, recursively working with ListNodes.\n\n\nfun box _flat_map[B: B](\n  ln: this-\nListNode[A] ref,\n  f: {(this-\nA!): List[B]}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nf: {(this-\nA!): List[B]}[A, B] box\n\n\nacc: \nList\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[B] ref^\n\n\n\n\n\n\n_filter\n\n\nPrivate helper for filter, recursively working with ListNodes.\n\n\nfun box _filter(\n  ln: this-\nListNode[A] ref,\n  f: {(this-\nA!): Bool}[A] box,\n  acc: List[this-\nA!] ref)\n: List[this-\nA!] ref\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\nacc: \nList\n[this-\nA!] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref\n\n\n\n\n\n\n_fold[B: B]\n\n\nPrivate helper for fold, recursively working with ListNodes.\n\n\nfun box _fold[B: B](\n  ln: this-\nListNode[A] ref,\n  f: {(B!, this-\nA!): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nf: {(B!, this-\nA!): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\n_every\n\n\nPrivate helper for every, recursively working with ListNodes.\n\n\nfun box _every(\n  ln: this-\nListNode[A] ref,\n  f: {(this-\nA!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_exists\n\n\nPrivate helper for exists, recursively working with ListNodes.\n\n\nfun box _exists(\n  ln: this-\nListNode[A] ref,\n  f: {(this-\nA!): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nf: {(this-\nA!): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_reverse\n\n\nPrivate helper for reverse, recursively working with ListNodes.\n\n\nfun box _reverse(\n  ln: this-\nListNode[A] ref,\n  acc: List[this-\nA!] ref)\n: List[this-\nA!] ref^\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\nacc: \nList\n[this-\nA!] ref\n\n\n\n\nReturns\n\n\n\n\nList\n[this-\nA!] ref^\n\n\n\n\n\n\n_contains[optional B: (A \n \nHasEq\n[A!] #read)]\n\n\nPrivate helper for contains, recursively working with ListNodes.\n\n\nfun box _contains[optional B: (A \n HasEq[A!] #read)](\n  ln: this-\nListNode[A] ref,\n  a: box-\nB)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nln: this-\nListNode\n[A] ref\n\n\na: box-\nB\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_increment\n\n\nfun ref _increment()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_decrement\n\n\nfun ref _decrement()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_head\n\n\nfun ref _set_head(\n  head': (ListNode[A] ref | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nhead': (\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_tail\n\n\nfun ref _set_tail(\n  tail': (ListNode[A] ref | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ntail': (\nListNode\n[A] ref | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_both\n\n\nfun ref _set_both(\n  node: ListNode[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nnode: \nListNode\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class List"
        }, 
        {
            "location": "/collections-List/#list91a-a93", 
            "text": "A doubly linked list.  class ref List[A: A] is\n  Seq[A] ref", 
            "title": "List[A: A]"
        }, 
        {
            "location": "/collections-List/#implements", 
            "text": "Seq [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-List/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-List/#create", 
            "text": "new ref create(\n  len: USize val = seq)\n: List[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-List/#parameters", 
            "text": "len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns", 
            "text": "List [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#unit", 
            "text": "new ref unit(\n  a: A)\n: List[A] ref^", 
            "title": "unit"
        }, 
        {
            "location": "/collections-List/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_1", 
            "text": "List [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#from", 
            "text": "new ref from(\n  seq: Array[A^] ref)\n: List[A] ref^", 
            "title": "from"
        }, 
        {
            "location": "/collections-List/#parameters_2", 
            "text": "seq:  Array [A^] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_2", 
            "text": "List [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-List/#reserve", 
            "text": "Do nothing, but be compatible with Seq.  fun ref reserve(\n  len: USize val)\n: None val", 
            "title": "reserve"
        }, 
        {
            "location": "/collections-List/#parameters_3", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#size", 
            "text": "Returns the number of items in the list.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-List/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#apply", 
            "text": "Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val = seq)\n: this- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-List/#parameters_4", 
            "text": "i:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_5", 
            "text": "this- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#update", 
            "text": "Change the i-th element, raising an error if the index is out of bounds.\nReturns the previous value, which may be None if the node has been popped\nbut left on the list.  fun ref update(\n  i: USize val,\n  value: A)\n: A^ ?", 
            "title": "update"
        }, 
        {
            "location": "/collections-List/#parameters_5", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_6", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#index", 
            "text": "Gets the i-th node, raising an error if the index is out of bounds.  fun box index(\n  i: USize val)\n: this- ListNode[A] ref ?", 
            "title": "index"
        }, 
        {
            "location": "/collections-List/#parameters_6", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_7", 
            "text": "this- ListNode [A] ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#remove", 
            "text": "Remove the i-th node, raising an error if the index is out of bounds.\nThe removed node is returned.  fun ref remove(\n  i: USize val)\n: ListNode[A] ref ?", 
            "title": "remove"
        }, 
        {
            "location": "/collections-List/#parameters_7", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_8", 
            "text": "ListNode [A] ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#clear", 
            "text": "Empties the list.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/collections-List/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#head", 
            "text": "Get the head of the list.  fun box head()\n: this- ListNode[A] ref ?", 
            "title": "head"
        }, 
        {
            "location": "/collections-List/#returns_10", 
            "text": "this- ListNode [A] ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#tail", 
            "text": "Get the tail of the list.  fun box tail()\n: this- ListNode[A] ref ?", 
            "title": "tail"
        }, 
        {
            "location": "/collections-List/#returns_11", 
            "text": "this- ListNode [A] ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#prepend_node", 
            "text": "Adds a node to the head of the list.  fun ref prepend_node(\n  node: ListNode[A] ref)\n: None val", 
            "title": "prepend_node"
        }, 
        {
            "location": "/collections-List/#parameters_8", 
            "text": "node:  ListNode [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#append_node", 
            "text": "Adds a node to the tail of the list.  fun ref append_node(\n  node: ListNode[A] ref)\n: None val", 
            "title": "append_node"
        }, 
        {
            "location": "/collections-List/#parameters_9", 
            "text": "node:  ListNode [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#append_list", 
            "text": "Remove all nodes from that and append them to this.  fun ref append_list(\n  that: List[A] ref)\n: None val", 
            "title": "append_list"
        }, 
        {
            "location": "/collections-List/#parameters_10", 
            "text": "that:  List [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#prepend_list", 
            "text": "Remove all nodes from that and prepend them to this.  fun ref prepend_list(\n  that: List[A] ref)\n: None val", 
            "title": "prepend_list"
        }, 
        {
            "location": "/collections-List/#parameters_11", 
            "text": "that:  List [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#push", 
            "text": "Adds a value to the tail of the list.  fun ref push(\n  a: A)\n: None val", 
            "title": "push"
        }, 
        {
            "location": "/collections-List/#parameters_12", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#pop", 
            "text": "Removes a value from the tail of the list.  fun ref pop()\n: A^ ?", 
            "title": "pop"
        }, 
        {
            "location": "/collections-List/#returns_17", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#unshift", 
            "text": "Adds a value to the head of the list.  fun ref unshift(\n  a: A)\n: None val", 
            "title": "unshift"
        }, 
        {
            "location": "/collections-List/#parameters_13", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#shift", 
            "text": "Removes a value from the head of the list.  fun ref shift()\n: A^ ?", 
            "title": "shift"
        }, 
        {
            "location": "/collections-List/#returns_19", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#append", 
            "text": "Append len elements from a sequence, starting from the given offset.  fun ref append(\n  seq: (ReadSeq[A] box   ReadElement[A^] box),\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "append"
        }, 
        {
            "location": "/collections-List/#parameters_14", 
            "text": "seq: ( ReadSeq [A] box    ReadElement [A^] box)  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#concat", 
            "text": "Add len iterated elements to the end of the list, starting from the given\noffset.  fun ref concat(\n  iter: Iterator[A^] ref,\n  offset: USize val = seq,\n  len: USize val = seq)\n: None val", 
            "title": "concat"
        }, 
        {
            "location": "/collections-List/#parameters_15", 
            "text": "iter:  Iterator [A^] ref  offset:  USize  val = seq  len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_21", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#truncate", 
            "text": "Truncate the list to the given length, discarding excess elements.\nIf the list is already smaller than len, do nothing.  fun ref truncate(\n  len: USize val)\n: None val", 
            "title": "truncate"
        }, 
        {
            "location": "/collections-List/#parameters_16", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_22", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#clone", 
            "text": "Clone the list.  fun box clone()\n: List[this- A!] ref^", 
            "title": "clone"
        }, 
        {
            "location": "/collections-List/#returns_23", 
            "text": "List [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#map91b-b93", 
            "text": "Builds a new list by applying a function to every member of the list.  fun box map[B: B](\n  f: {(this- A!): B^}[A, B] box)\n: List[B] ref^", 
            "title": "map[B: B]"
        }, 
        {
            "location": "/collections-List/#parameters_17", 
            "text": "f: {(this- A!): B^}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_24", 
            "text": "List [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#flat_map91b-b93", 
            "text": "Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.  fun box flat_map[B: B](\n  f: {(this- A!): List[B]}[A, B] box)\n: List[B] ref^", 
            "title": "flat_map[B: B]"
        }, 
        {
            "location": "/collections-List/#parameters_18", 
            "text": "f: {(this- A!): List[B]}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_25", 
            "text": "List [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#filter", 
            "text": "Builds a new list with those elements that satisfy a provided predicate.  fun box filter(\n  f: {(this- A!): Bool}[A] box)\n: List[this- A!] ref^", 
            "title": "filter"
        }, 
        {
            "location": "/collections-List/#parameters_19", 
            "text": "f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_26", 
            "text": "List [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#fold91b-b93", 
            "text": "Folds the elements of the list using the supplied function.  fun box fold[B: B](\n  f: {(B!, this- A!): B^}[A, B] box,\n  acc: B)\n: B", 
            "title": "fold[B: B]"
        }, 
        {
            "location": "/collections-List/#parameters_20", 
            "text": "f: {(B!, this- A!): B^}[A, B] box  acc: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_27", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#every", 
            "text": "Returns true if every element satisfies the provided predicate, false\notherwise.  fun box every(\n  f: {(this- A!): Bool}[A] box)\n: Bool val", 
            "title": "every"
        }, 
        {
            "location": "/collections-List/#parameters_21", 
            "text": "f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_28", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#exists", 
            "text": "Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.  fun box exists(\n  f: {(this- A!): Bool}[A] box)\n: Bool val", 
            "title": "exists"
        }, 
        {
            "location": "/collections-List/#parameters_22", 
            "text": "f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_29", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#partition", 
            "text": "Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.  fun box partition(\n  f: {(this- A!): Bool}[A] box)\n: (List[this- A!] ref^ , List[this- A!] ref^)", 
            "title": "partition"
        }, 
        {
            "location": "/collections-List/#parameters_23", 
            "text": "f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_30", 
            "text": "( List [this- A!] ref^ ,  List [this- A!] ref^)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#drop", 
            "text": "Builds a list by dropping the first n elements.  fun box drop(\n  n: USize val)\n: List[this- A!] ref^", 
            "title": "drop"
        }, 
        {
            "location": "/collections-List/#parameters_24", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_31", 
            "text": "List [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#take", 
            "text": "Builds a list of the first n elements.  fun box take(\n  n: USize val)\n: List[this- A!] ref", 
            "title": "take"
        }, 
        {
            "location": "/collections-List/#parameters_25", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_32", 
            "text": "List [this- A!] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#take_while", 
            "text": "Builds a list of elements satisfying the provided predicate until one does\nnot.  fun box take_while(\n  f: {(this- A!): Bool}[A] box)\n: List[this- A!] ref^", 
            "title": "take_while"
        }, 
        {
            "location": "/collections-List/#parameters_26", 
            "text": "f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_33", 
            "text": "List [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#reverse", 
            "text": "Builds a new list by reversing the elements in the list.  fun box reverse()\n: List[this- A!] ref^", 
            "title": "reverse"
        }, 
        {
            "location": "/collections-List/#returns_34", 
            "text": "List [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#contains91optional-b-a-haseq91a93-read93", 
            "text": "Returns true if the list contains the provided element, false otherwise.  fun box contains[optional B: (A   HasEq[A!] #read)](\n  a: box- B)\n: Bool val", 
            "title": "contains[optional B: (A &amp; HasEq[A!] #read)]"
        }, 
        {
            "location": "/collections-List/#parameters_27", 
            "text": "a: box- B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_35", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#nodes", 
            "text": "Return an iterator on the nodes in the list.  fun box nodes()\n: ListNodes[A, this- ListNode[A] ref] ref^", 
            "title": "nodes"
        }, 
        {
            "location": "/collections-List/#returns_36", 
            "text": "ListNodes [A, this- ListNode [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#rnodes", 
            "text": "Return an iterator on the nodes in the list.  fun box rnodes()\n: ListNodes[A, this- ListNode[A] ref] ref^", 
            "title": "rnodes"
        }, 
        {
            "location": "/collections-List/#returns_37", 
            "text": "ListNodes [A, this- ListNode [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#values", 
            "text": "Return an iterator on the values in the list.  fun box values()\n: ListValues[A, this- ListNode[A] ref] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-List/#returns_38", 
            "text": "ListValues [A, this- ListNode [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#rvalues", 
            "text": "Return an iterator on the values in the list.  fun box rvalues()\n: ListValues[A, this- ListNode[A] ref] ref^", 
            "title": "rvalues"
        }, 
        {
            "location": "/collections-List/#returns_39", 
            "text": "ListValues [A, this- ListNode [A] ref] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-List/#_map91b-b93", 
            "text": "Private helper for map, recursively working with ListNodes.  fun box _map[B: B](\n  ln: this- ListNode[A] ref,\n  f: {(this- A!): B^}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^", 
            "title": "_map[B: B]"
        }, 
        {
            "location": "/collections-List/#parameters_28", 
            "text": "ln: this- ListNode [A] ref  f: {(this- A!): B^}[A, B] box  acc:  List [B] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_40", 
            "text": "List [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_flat_map91b-b93", 
            "text": "Private helper for flat_map, recursively working with ListNodes.  fun box _flat_map[B: B](\n  ln: this- ListNode[A] ref,\n  f: {(this- A!): List[B]}[A, B] box,\n  acc: List[B] ref)\n: List[B] ref^", 
            "title": "_flat_map[B: B]"
        }, 
        {
            "location": "/collections-List/#parameters_29", 
            "text": "ln: this- ListNode [A] ref  f: {(this- A!): List[B]}[A, B] box  acc:  List [B] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_41", 
            "text": "List [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_filter", 
            "text": "Private helper for filter, recursively working with ListNodes.  fun box _filter(\n  ln: this- ListNode[A] ref,\n  f: {(this- A!): Bool}[A] box,\n  acc: List[this- A!] ref)\n: List[this- A!] ref", 
            "title": "_filter"
        }, 
        {
            "location": "/collections-List/#parameters_30", 
            "text": "ln: this- ListNode [A] ref  f: {(this- A!): Bool}[A] box  acc:  List [this- A!] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_42", 
            "text": "List [this- A!] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_fold91b-b93", 
            "text": "Private helper for fold, recursively working with ListNodes.  fun box _fold[B: B](\n  ln: this- ListNode[A] ref,\n  f: {(B!, this- A!): B^}[A, B] box,\n  acc: B)\n: B", 
            "title": "_fold[B: B]"
        }, 
        {
            "location": "/collections-List/#parameters_31", 
            "text": "ln: this- ListNode [A] ref  f: {(B!, this- A!): B^}[A, B] box  acc: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_43", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_every", 
            "text": "Private helper for every, recursively working with ListNodes.  fun box _every(\n  ln: this- ListNode[A] ref,\n  f: {(this- A!): Bool}[A] box)\n: Bool val", 
            "title": "_every"
        }, 
        {
            "location": "/collections-List/#parameters_32", 
            "text": "ln: this- ListNode [A] ref  f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_44", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_exists", 
            "text": "Private helper for exists, recursively working with ListNodes.  fun box _exists(\n  ln: this- ListNode[A] ref,\n  f: {(this- A!): Bool}[A] box)\n: Bool val", 
            "title": "_exists"
        }, 
        {
            "location": "/collections-List/#parameters_33", 
            "text": "ln: this- ListNode [A] ref  f: {(this- A!): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_reverse", 
            "text": "Private helper for reverse, recursively working with ListNodes.  fun box _reverse(\n  ln: this- ListNode[A] ref,\n  acc: List[this- A!] ref)\n: List[this- A!] ref^", 
            "title": "_reverse"
        }, 
        {
            "location": "/collections-List/#parameters_34", 
            "text": "ln: this- ListNode [A] ref  acc:  List [this- A!] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_46", 
            "text": "List [this- A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_contains91optional-b-a-haseq91a93-read93", 
            "text": "Private helper for contains, recursively working with ListNodes.  fun box _contains[optional B: (A   HasEq[A!] #read)](\n  ln: this- ListNode[A] ref,\n  a: box- B)\n: Bool val", 
            "title": "_contains[optional B: (A &amp; HasEq[A!] #read)]"
        }, 
        {
            "location": "/collections-List/#parameters_35", 
            "text": "ln: this- ListNode [A] ref  a: box- B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_47", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_increment", 
            "text": "fun ref _increment()\n: None val", 
            "title": "_increment"
        }, 
        {
            "location": "/collections-List/#returns_48", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_decrement", 
            "text": "fun ref _decrement()\n: None val", 
            "title": "_decrement"
        }, 
        {
            "location": "/collections-List/#returns_49", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_set_head", 
            "text": "fun ref _set_head(\n  head': (ListNode[A] ref | None val))\n: None val", 
            "title": "_set_head"
        }, 
        {
            "location": "/collections-List/#parameters_36", 
            "text": "head': ( ListNode [A] ref |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_50", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_set_tail", 
            "text": "fun ref _set_tail(\n  tail': (ListNode[A] ref | None val))\n: None val", 
            "title": "_set_tail"
        }, 
        {
            "location": "/collections-List/#parameters_37", 
            "text": "tail': ( ListNode [A] ref |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_51", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-List/#_set_both", 
            "text": "fun ref _set_both(\n  node: ListNode[A] ref)\n: None val", 
            "title": "_set_both"
        }, 
        {
            "location": "/collections-List/#parameters_38", 
            "text": "node:  ListNode [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-List/#returns_52", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNodes/", 
            "text": "ListNodes[A: A, N: \nListNode\n[A] #read]\n\n\nIterate over the nodes in a list.\n\n\nclass ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[N] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListNodes[A, N] ref^\n\n\n\n\nParameters\n\n\n\n\nhead: (N | \nNone\n val)\n\n\nreverse: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nListNodes\n[A, N] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGet the list node and replace it with the next one.\n\n\nfun ref next()\n: N ?\n\n\n\n\nReturns\n\n\n\n\nN ?", 
            "title": "class ListNodes"
        }, 
        {
            "location": "/collections-ListNodes/#listnodes91a-a-n-listnode91a93-read93", 
            "text": "Iterate over the nodes in a list.  class ref ListNodes[A: A, N: ListNode[A] #read] is\n  Iterator[N] ref", 
            "title": "ListNodes[A: A, N: ListNode[A] #read]"
        }, 
        {
            "location": "/collections-ListNodes/#implements", 
            "text": "Iterator [N] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-ListNodes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-ListNodes/#create", 
            "text": "Keep the next list node to be examined.  new ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListNodes[A, N] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-ListNodes/#parameters", 
            "text": "head: (N |  None  val)  reverse:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListNodes/#returns", 
            "text": "ListNodes [A, N] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNodes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-ListNodes/#has_next", 
            "text": "If we have a list node, we have more values.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-ListNodes/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListNodes/#next", 
            "text": "Get the list node and replace it with the next one.  fun ref next()\n: N ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-ListNodes/#returns_2", 
            "text": "N ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListValues/", 
            "text": "ListValues[A: A, N: \nListNode\n[A] #read]\n\n\nIterate over the values in a list.\n\n\nclass ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N-\nA] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[N-\nA] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nKeep the next list node to be examined.\n\n\nnew ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListValues[A, N] ref^\n\n\n\n\nParameters\n\n\n\n\nhead: (N | \nNone\n val)\n\n\nreverse: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nListValues\n[A, N] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nIf we have a list node, we have more values.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGet the value of the list node and replace it with the next one.\n\n\nfun ref next()\n: N-\nA ?\n\n\n\n\nReturns\n\n\n\n\nN-\nA ?", 
            "title": "class ListValues"
        }, 
        {
            "location": "/collections-ListValues/#listvalues91a-a-n-listnode91a93-read93", 
            "text": "Iterate over the values in a list.  class ref ListValues[A: A, N: ListNode[A] #read] is\n  Iterator[N- A] ref", 
            "title": "ListValues[A: A, N: ListNode[A] #read]"
        }, 
        {
            "location": "/collections-ListValues/#implements", 
            "text": "Iterator [N- A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-ListValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-ListValues/#create", 
            "text": "Keep the next list node to be examined.  new ref create(\n  head: (N | None val),\n  reverse: Bool val = seq)\n: ListValues[A, N] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-ListValues/#parameters", 
            "text": "head: (N |  None  val)  reverse:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-ListValues/#returns", 
            "text": "ListValues [A, N] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-ListValues/#has_next", 
            "text": "If we have a list node, we have more values.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-ListValues/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-ListValues/#next", 
            "text": "Get the value of the list node and replace it with the next one.  fun ref next()\n: N- A ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-ListValues/#returns_2", 
            "text": "N- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Hashable/", 
            "text": "Hashable\n\n\nAnything with a hash method is hashable.\n\n\ninterface ref Hashable\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "interface Hashable"
        }, 
        {
            "location": "/collections-Hashable/#hashable", 
            "text": "Anything with a hash method is hashable.  interface ref Hashable", 
            "title": "Hashable"
        }, 
        {
            "location": "/collections-Hashable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Hashable/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/collections-Hashable/#returns", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashFunction/", 
            "text": "HashFunction[A: A]\n\n\nA pluggable hash function.\n\n\ninterface val HashFunction[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nData structures create instances internally. Use a primitive if possible.\n\n\nnew val create()\n: HashFunction[A] val^\n\n\n\n\nReturns\n\n\n\n\nHashFunction\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nCalculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.\n\n\nfun box hash(\n  x: box-\nA!)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nDetermine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.\n\n\nfun box eq(\n  x: box-\nA!,\n  y: box-\nA!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: box-\nA!\n\n\ny: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "interface HashFunction"
        }, 
        {
            "location": "/collections-HashFunction/#hashfunction91a-a93", 
            "text": "A pluggable hash function.  interface val HashFunction[A: A]", 
            "title": "HashFunction[A: A]"
        }, 
        {
            "location": "/collections-HashFunction/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashFunction/#create", 
            "text": "Data structures create instances internally. Use a primitive if possible.  new val create()\n: HashFunction[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-HashFunction/#returns", 
            "text": "HashFunction [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashFunction/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashFunction/#hash", 
            "text": "Calculate the hash of some type. This is an alias of the type parameter to\nallow data structures to hash things without consuming them.  fun box hash(\n  x: box- A!)\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/collections-HashFunction/#parameters", 
            "text": "x: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashFunction/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashFunction/#eq", 
            "text": "Determine equality between two keys with the same hash. This is done with\nviewpoint adapted aliases to allow data structures to determine equality\nin a box fun without consuming keys.  fun box eq(\n  x: box- A!,\n  y: box- A!)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-HashFunction/#parameters_1", 
            "text": "x: box- A!  y: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashFunction/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashEq/", 
            "text": "HashEq[A: (\nHashable\n #read \n \nEquatable\n[A] #read)]\n\n\nprimitive val HashEq[A: (Hashable #read \n Equatable[A] #read)] is\n  HashFunction[A] val\n\n\n\n\nImplements\n\n\n\n\nHashFunction\n[A] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashEq[A] val^\n\n\n\n\nReturns\n\n\n\n\nHashEq\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nUse the hash function from the type parameter.\n\n\nfun box hash(\n  x: box-\nA)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: box-\nA\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nUse the structural equality function from the type parameter.\n\n\nfun box eq(\n  x: box-\nA,\n  y: box-\nA)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: box-\nA\n\n\ny: box-\nA\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashEq[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashEq\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive HashEq"
        }, 
        {
            "location": "/collections-HashEq/#hasheq91a-hashable-read-equatable91a93-read93", 
            "text": "primitive val HashEq[A: (Hashable #read   Equatable[A] #read)] is\n  HashFunction[A] val", 
            "title": "HashEq[A: (Hashable #read &amp; Equatable[A] #read)]"
        }, 
        {
            "location": "/collections-HashEq/#implements", 
            "text": "HashFunction [A] val", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-HashEq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashEq/#create", 
            "text": "new val create()\n: HashEq[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-HashEq/#returns", 
            "text": "HashEq [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashEq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashEq/#hash", 
            "text": "Use the hash function from the type parameter.  fun box hash(\n  x: box- A)\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/collections-HashEq/#parameters", 
            "text": "x: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashEq/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashEq/#eq", 
            "text": "Use the structural equality function from the type parameter.  fun box eq(\n  x: box- A,\n  y: box- A)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-HashEq/#parameters_1", 
            "text": "x: box- A  y: box- A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashEq/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashEq/#ne", 
            "text": "fun box ne(\n  that: HashEq[A] val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-HashEq/#parameters_2", 
            "text": "that:  HashEq [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashEq/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashIs/", 
            "text": "HashIs[A: A]\n\n\nprimitive val HashIs[A: A] is\n  HashFunction[A] val\n\n\n\n\nImplements\n\n\n\n\nHashFunction\n[A] val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashIs[A] val^\n\n\n\n\nReturns\n\n\n\n\nHashIs\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nHash the identity rather than the contents.\n\n\nfun box hash(\n  x: box-\nA!)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nDetermine equality by identity rather than structurally.\n\n\nfun box eq(\n  x: box-\nA!,\n  y: box-\nA!)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: box-\nA!\n\n\ny: box-\nA!\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashIs[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashIs\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive HashIs"
        }, 
        {
            "location": "/collections-HashIs/#hashis91a-a93", 
            "text": "primitive val HashIs[A: A] is\n  HashFunction[A] val", 
            "title": "HashIs[A: A]"
        }, 
        {
            "location": "/collections-HashIs/#implements", 
            "text": "HashFunction [A] val", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-HashIs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashIs/#create", 
            "text": "new val create()\n: HashIs[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-HashIs/#returns", 
            "text": "HashIs [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashIs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashIs/#hash", 
            "text": "Hash the identity rather than the contents.  fun box hash(\n  x: box- A!)\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/collections-HashIs/#parameters", 
            "text": "x: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashIs/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashIs/#eq", 
            "text": "Determine equality by identity rather than structurally.  fun box eq(\n  x: box- A!,\n  y: box- A!)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-HashIs/#parameters_1", 
            "text": "x: box- A!  y: box- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashIs/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashIs/#ne", 
            "text": "fun box ne(\n  that: HashIs[A] val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-HashIs/#parameters_2", 
            "text": "that:  HashIs [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashIs/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashByteSeq/", 
            "text": "HashByteSeq\n\n\nHash and equality functions for arbitrary ByteSeq.\n\n\nprimitive val HashByteSeq\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashByteSeq val^\n\n\n\n\nReturns\n\n\n\n\nHashByteSeq\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nfun box hash(\n  x: (String box | Array[U8 val] box))\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nx: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\ny: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashByteSeq val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashByteSeq\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive HashByteSeq"
        }, 
        {
            "location": "/collections-HashByteSeq/#hashbyteseq", 
            "text": "Hash and equality functions for arbitrary ByteSeq.  primitive val HashByteSeq", 
            "title": "HashByteSeq"
        }, 
        {
            "location": "/collections-HashByteSeq/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-HashByteSeq/#create", 
            "text": "new val create()\n: HashByteSeq val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-HashByteSeq/#returns", 
            "text": "HashByteSeq  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashByteSeq/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-HashByteSeq/#hash", 
            "text": "fun box hash(\n  x: (String box | Array[U8 val] box))\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/collections-HashByteSeq/#parameters", 
            "text": "x: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashByteSeq/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashByteSeq/#eq", 
            "text": "fun box eq(\n  x: (String box | Array[U8 val] box),\n  y: (String box | Array[U8 val] box))\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-HashByteSeq/#parameters_1", 
            "text": "x: ( String  box |  Array [ U8  val] box)  y: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashByteSeq/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-HashByteSeq/#ne", 
            "text": "fun box ne(\n  that: HashByteSeq val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-HashByteSeq/#parameters_2", 
            "text": "that:  HashByteSeq  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-HashByteSeq/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flag/", 
            "text": "Flag[A: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nInteger\n[A] val)]\n\n\nA flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.\n\n\ninterface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) \n Integer[A] val)]\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "interface Flag"
        }, 
        {
            "location": "/collections-Flag/#flag91a-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a93-val93", 
            "text": "A flag should be a primitive with a value method that returns the bits that\nrepresent the flag. This allows a flag to encode a single bit, or any\ncombination of bits.  interface val Flag[A: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)   Integer[A] val)]", 
            "title": "Flag[A: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A] val)]"
        }, 
        {
            "location": "/collections-Flag/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Flag/#value", 
            "text": "fun box value()\n: A", 
            "title": "value"
        }, 
        {
            "location": "/collections-Flag/#returns", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/", 
            "text": "Flags[A: \nFlag\n[B] val, optional B: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nInteger\n[B] val)]\n\n\nFlags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:\n\n\nprimitive SSE\n  fun value(): U64 =\n 1\n\n\nprimitive AVX\n  fun value(): U64 =\n 2\n\n\nprimitive RDTSCP\n  fun value(): U64 =\n 4\n\n\ntype Features is Flags[(SSE | AVX | RDTSCP)]\n\n\nType parameter B is the unlying field used to store the flags.\n\n\nclass ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) \n Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref\n\n\n\n\nImplements\n\n\n\n\nComparable\n[\nFlags\n[A, B] box] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: Flags[A, B] iso^\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nReturns the bit encoding of the set flags.\n\n\nfun box value()\n: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\napply\n\n\nReturns true if the flag is set.\n\n\nfun box apply(\n  flag: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nall\n\n\nSets all bits, including undefined flags.\n\n\nfun ref all()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclear\n\n\nUnsets all flags.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset\n\n\nSets the flag.\n\n\nfun ref set(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunset\n\n\nUnsets the flag.\n\n\nfun ref unset(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nflip\n\n\nSets the flag if it is unset, unsets the flag if it is set.\n\n\nfun ref flip(\n  flag: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunion\n\n\nThe union of this and that.\n\n\nfun ref union(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nintersect\n\n\nThe intersection of this and that.\n\n\nfun ref intersect(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndifference\n\n\nThe symmetric difference of this and that.\n\n\nfun ref difference(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nremove\n\n\nUnset flags that are set in that.\n\n\nfun ref remove(\n  that: Flags[A, B] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadd\n\n\nThis with the flag set.\n\n\nfun box add(\n  flag: A)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nsub\n\n\nThis with the flag unset.\n\n\nfun box sub(\n  flag: A)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nflag: A\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_or\n\n\nThe union of this and that.\n\n\nfun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_and\n\n\nThe intersection of this and that.\n\n\nfun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nop_xor\n\n\nThe symmetric difference of this and that.\n\n\nfun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nwithout\n\n\nThe flags in this that are not in that.\n\n\nfun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\nclone\n\n\nCreate a clone.\n\n\nfun box clone()\n: Flags[A, B] iso^\n\n\n\n\nReturns\n\n\n\n\nFlags\n[A, B] iso^\n\n\n\n\n\n\neq\n\n\nReturns true if this has the same flags set as that.\n\n\nfun box eq(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.\n\n\nfun box lt(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.\n\n\nfun box le(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nReturns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.\n\n\nfun box gt(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nReturns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.\n\n\nfun box ge(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Flags[A, B] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFlags\n[A, B] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class Flags"
        }, 
        {
            "location": "/collections-Flags/#flags91a-flag91b93-val-optional-b-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91b93-val93", 
            "text": "Flags is a set of flags. The flags that are recognised should be passed as\na union type for type parameter A. For example:  primitive SSE\n  fun value(): U64 =  1  primitive AVX\n  fun value(): U64 =  2  primitive RDTSCP\n  fun value(): U64 =  4  type Features is Flags[(SSE | AVX | RDTSCP)]  Type parameter B is the unlying field used to store the flags.  class ref Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)   Integer[B] val)] is\n  Comparable[Flags[A, B] box] ref", 
            "title": "Flags[A: Flag[B] val, optional B: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[B] val)]"
        }, 
        {
            "location": "/collections-Flags/#implements", 
            "text": "Comparable [ Flags [A, B] box] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-Flags/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-Flags/#create", 
            "text": "new iso create()\n: Flags[A, B] iso^", 
            "title": "create"
        }, 
        {
            "location": "/collections-Flags/#returns", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-Flags/#value", 
            "text": "Returns the bit encoding of the set flags.  fun box value()\n: B", 
            "title": "value"
        }, 
        {
            "location": "/collections-Flags/#returns_1", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#apply", 
            "text": "Returns true if the flag is set.  fun box apply(\n  flag: A)\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/collections-Flags/#parameters", 
            "text": "flag: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#all", 
            "text": "Sets all bits, including undefined flags.  fun ref all()\n: None val", 
            "title": "all"
        }, 
        {
            "location": "/collections-Flags/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#clear", 
            "text": "Unsets all flags.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/collections-Flags/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#set", 
            "text": "Sets the flag.  fun ref set(\n  flag: A)\n: None val", 
            "title": "set"
        }, 
        {
            "location": "/collections-Flags/#parameters_1", 
            "text": "flag: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#unset", 
            "text": "Unsets the flag.  fun ref unset(\n  flag: A)\n: None val", 
            "title": "unset"
        }, 
        {
            "location": "/collections-Flags/#parameters_2", 
            "text": "flag: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#flip", 
            "text": "Sets the flag if it is unset, unsets the flag if it is set.  fun ref flip(\n  flag: A)\n: None val", 
            "title": "flip"
        }, 
        {
            "location": "/collections-Flags/#parameters_3", 
            "text": "flag: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#union", 
            "text": "The union of this and that.  fun ref union(\n  that: Flags[A, B] box)\n: None val", 
            "title": "union"
        }, 
        {
            "location": "/collections-Flags/#parameters_4", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#intersect", 
            "text": "The intersection of this and that.  fun ref intersect(\n  that: Flags[A, B] box)\n: None val", 
            "title": "intersect"
        }, 
        {
            "location": "/collections-Flags/#parameters_5", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#difference", 
            "text": "The symmetric difference of this and that.  fun ref difference(\n  that: Flags[A, B] box)\n: None val", 
            "title": "difference"
        }, 
        {
            "location": "/collections-Flags/#parameters_6", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#remove", 
            "text": "Unset flags that are set in that.  fun ref remove(\n  that: Flags[A, B] box)\n: None val", 
            "title": "remove"
        }, 
        {
            "location": "/collections-Flags/#parameters_7", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#add", 
            "text": "This with the flag set.  fun box add(\n  flag: A)\n: Flags[A, B] iso^", 
            "title": "add"
        }, 
        {
            "location": "/collections-Flags/#parameters_8", 
            "text": "flag: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_12", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#sub", 
            "text": "This with the flag unset.  fun box sub(\n  flag: A)\n: Flags[A, B] iso^", 
            "title": "sub"
        }, 
        {
            "location": "/collections-Flags/#parameters_9", 
            "text": "flag: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_13", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#op_or", 
            "text": "The union of this and that.  fun box op_or(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^", 
            "title": "op_or"
        }, 
        {
            "location": "/collections-Flags/#parameters_10", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_14", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#op_and", 
            "text": "The intersection of this and that.  fun box op_and(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^", 
            "title": "op_and"
        }, 
        {
            "location": "/collections-Flags/#parameters_11", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_15", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#op_xor", 
            "text": "The symmetric difference of this and that.  fun box op_xor(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^", 
            "title": "op_xor"
        }, 
        {
            "location": "/collections-Flags/#parameters_12", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_16", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#without", 
            "text": "The flags in this that are not in that.  fun box without(\n  that: Flags[A, B] box)\n: Flags[A, B] iso^", 
            "title": "without"
        }, 
        {
            "location": "/collections-Flags/#parameters_13", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_17", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#clone", 
            "text": "Create a clone.  fun box clone()\n: Flags[A, B] iso^", 
            "title": "clone"
        }, 
        {
            "location": "/collections-Flags/#returns_18", 
            "text": "Flags [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#eq", 
            "text": "Returns true if this has the same flags set as that.  fun box eq(\n  that: Flags[A, B] box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-Flags/#parameters_14", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_19", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#lt", 
            "text": "Returns true if the flags set on this are a strict subset of the flags set\non that. Flags is only partially ordered, so lt is not the opposite of ge.  fun box lt(\n  that: Flags[A, B] box)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/collections-Flags/#parameters_15", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_20", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#le", 
            "text": "Returns true if the flags set on this are a subset of the flags set on\nthat or they are the same. Flags is only partially ordered, so le is not\nthe opposite of te.  fun box le(\n  that: Flags[A, B] box)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/collections-Flags/#parameters_16", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_21", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#gt", 
            "text": "Returns true if the flags set on this are a struct superset of the flags\nset on that. Flags is only partially ordered, so gt is not the opposite of\nle.  fun box gt(\n  that: Flags[A, B] box)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/collections-Flags/#parameters_17", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_22", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#ge", 
            "text": "Returns true if the flags set on this are a superset of the flags set on\nthat or they are the same. Flags is only partially ordered, so ge is not\nthe opposite of lt.  fun box ge(\n  that: Flags[A, B] box)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/collections-Flags/#parameters_18", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#compare", 
            "text": "fun box compare(\n  that: Flags[A, B] box)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/collections-Flags/#parameters_19", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_24", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-Flags/#ne", 
            "text": "fun box ne(\n  that: Flags[A, B] box)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-Flags/#parameters_20", 
            "text": "that:  Flags [A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-Flags/#returns_25", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent--index/", 
            "text": "Persistent Collections Package\n\n\nList - A persistent list with functional transformations.\n\n\nMap - A persistent map based on the Compressed Hash Array Mapped Prefix-tree\nfrom 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju.\n\n\nSet - A persistent set implemented as a persistent map of an alias of a type\nto itself.\n\n\nVec - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.\n\n\nPublic Types\n\n\n\n\nclass Vec\n\n\nclass VecKeys\n\n\nclass VecValues\n\n\nclass VecPairs\n\n\ntype Set\n\n\ntype SetIs\n\n\nclass HashSet\n\n\ntype Map\n\n\ntype MapIs\n\n\nclass HashMap\n\n\nclass MapKeys\n\n\nclass MapValues\n\n\nclass MapPairs\n\n\ntype List\n\n\nprimitive Lists\n\n\nprimitive Nil\n\n\nclass Cons\n\n\n\n\nPrivate Types\n\n\n\n\ntype _VecLeafNodes\n\n\ntype _VecNodes\n\n\ntype _VecEntries\n\n\nclass _VecNode\n\n\ntype _MapCollisions\n\n\ntype _MapLeaf\n\n\ntype _MapEntry\n\n\nclass _MapNode\n\n\nprimitive _Bits", 
            "title": "Package"
        }, 
        {
            "location": "/collections-persistent--index/#persistent-collections-package", 
            "text": "List - A persistent list with functional transformations.  Map - A persistent map based on the Compressed Hash Array Mapped Prefix-tree\nfrom 'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju.  Set - A persistent set implemented as a persistent map of an alias of a type\nto itself.  Vec - A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.", 
            "title": "Persistent Collections Package"
        }, 
        {
            "location": "/collections-persistent--index/#public-types", 
            "text": "class Vec  class VecKeys  class VecValues  class VecPairs  type Set  type SetIs  class HashSet  type Map  type MapIs  class HashMap  class MapKeys  class MapValues  class MapPairs  type List  primitive Lists  primitive Nil  class Cons", 
            "title": "Public Types"
        }, 
        {
            "location": "/collections-persistent--index/#private-types", 
            "text": "type _VecLeafNodes  type _VecNodes  type _VecEntries  class _VecNode  type _MapCollisions  type _MapLeaf  type _MapEntry  class _MapNode  primitive _Bits", 
            "title": "Private Types"
        }, 
        {
            "location": "/collections-persistent-Vec/", 
            "text": "Vec[A: \nAny\n #share]\n\n\nA persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.\n\n\nclass val Vec[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Vec[A] val^\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val^\n\n\n\n\n\n\n_create\n\n\nnew val _create(\n  root': (_VecNode[A] val | None val),\n  tail': Array[A] val,\n  size': USize val,\n  depth': U8 val,\n  tail_offset': USize val)\n: Vec[A] val^\n\n\n\n\nParameters\n\n\n\n\nroot': (\n_VecNode\n[A] val | \nNone\n val)\n\n\ntail': \nArray\n[A] val\n\n\nsize': \nUSize\n val\n\n\ndepth': \nU8\n val\n\n\ntail_offset': \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturn the amount of values in the vector.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nGet the i-th element, raising an error if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nupdate\n\n\nReturn a vector with the i-th element changed, raising an error if the\nindex is out of bounds.\n\n\nfun val update(\n  i: USize val,\n  value: A)\n: Vec[A] val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\ninsert\n\n\nReturn a vector with an element inserted. Elements after this are moved\nup by one index, extending the vector. An out of bounds index raises an\nerror.\n\n\nfun val insert(\n  i: USize val,\n  value: A)\n: Vec[A] val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\ndelete\n\n\nReturn a vector with an element deleted. Elements after this are moved\ndown by one index, compacting the vector. An out of bounds index raises an\nerror.\n\n\nfun val delete(\n  i: USize val)\n: Vec[A] val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\nremove\n\n\nReturn a vector with n elements removed, beginning at index i.\n\n\nfun val remove(\n  i: USize val,\n  n: USize val)\n: Vec[A] val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\npush\n\n\nReturn a vector with the value added to the end.\n\n\nfun val push(\n  value: A)\n: Vec[A] val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\npop\n\n\nReturn a vector with the value at the end removed.\n\n\nfun val pop()\n: Vec[A] val ?\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val ?\n\n\n\n\n\n\nconcat\n\n\nReturn a vector with the values of the given iterator added to the end.\n\n\nfun val concat(\n  iter: Iterator[A] ref)\n: Vec[A] val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\nfind\n\n\nFind the \nnth\n appearance of \nvalue\n from the beginning of the vector,\nstarting at \noffset\n and examining higher indices, and using the\nsupplied \npredicate\n for comparisons. Returns the index of the value, or\nraise an error if the value isn't present.\n\n\nBy default, the search starts at the first element of the vector,\nreturns the first instance of \nvalue\n found, and uses object identity\nfor comparison.\n\n\nfun val find(\n  value: A,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(A, A): Bool}[A] val = seq)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\noffset: \nUSize\n val = seq\n\n\nnth: \nUSize\n val = seq\n\n\npredicate: {(A, A): Bool}[A] val = seq\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ncontains\n\n\nReturns true if the vector contains \nvalue\n, false otherwise.\n\n\nfun val contains(\n  value: A,\n  predicate: {(A, A): Bool}[A] val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\npredicate: {(A, A): Bool}[A] val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nslice\n\n\nReturn a vector that is a clone of a portion of this vector. The range is\nexclusive and saturated.\n\n\nfun val slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Vec[A] val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nUSize\n val = seq\n\n\nto: \nUSize\n val = seq\n\n\nstep: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\nreverse\n\n\nReturn a vector with the elements in reverse order.\n\n\nfun val reverse()\n: Vec[A] val\n\n\n\n\nReturns\n\n\n\n\nVec\n[A] val\n\n\n\n\n\n\nkeys\n\n\nReturn an iterator over the indices in the vector.\n\n\nfun val keys()\n: VecKeys[A] ref^\n\n\n\n\nReturns\n\n\n\n\nVecKeys\n[A] ref^\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values in the vector.\n\n\nfun val values()\n: VecValues[A] ref^\n\n\n\n\nReturns\n\n\n\n\nVecValues\n[A] ref^\n\n\n\n\n\n\npairs\n\n\nReturn an iterator over the (index, value) pairs in the vector.\n\n\nfun val pairs()\n: VecPairs[A] ref^\n\n\n\n\nReturns\n\n\n\n\nVecPairs\n[A] ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_pow32\n\n\nRaise 32 to the power of n.\n\n\nfun box _pow32(\n  n: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_leaf_nodes\n\n\nfun box _leaf_nodes()\n: Array[Array[A] val] ref^\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nArray\n[A] val] ref^", 
            "title": "class Vec"
        }, 
        {
            "location": "/collections-persistent-Vec/#vec91a-any-share93", 
            "text": "A persistent vector based on the Hash Array Mapped Trie from 'Ideal Hash\nTrees' by Phil Bagwell.  class val Vec[A: Any #share]", 
            "title": "Vec[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-Vec/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-Vec/#create", 
            "text": "new val create()\n: Vec[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns", 
            "text": "Vec [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#_create", 
            "text": "new val _create(\n  root': (_VecNode[A] val | None val),\n  tail': Array[A] val,\n  size': USize val,\n  depth': U8 val,\n  tail_offset': USize val)\n: Vec[A] val^", 
            "title": "_create"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters", 
            "text": "root': ( _VecNode [A] val |  None  val)  tail':  Array [A] val  size':  USize  val  depth':  U8  val  tail_offset':  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_1", 
            "text": "Vec [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-Vec/#size", 
            "text": "Return the amount of values in the vector.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#apply", 
            "text": "Get the i-th element, raising an error if the index is out of bounds.  fun box apply(\n  i: USize val)\n: A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_1", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_3", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#update", 
            "text": "Return a vector with the i-th element changed, raising an error if the\nindex is out of bounds.  fun val update(\n  i: USize val,\n  value: A)\n: Vec[A] val ?", 
            "title": "update"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_2", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_4", 
            "text": "Vec [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#insert", 
            "text": "Return a vector with an element inserted. Elements after this are moved\nup by one index, extending the vector. An out of bounds index raises an\nerror.  fun val insert(\n  i: USize val,\n  value: A)\n: Vec[A] val ?", 
            "title": "insert"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_3", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_5", 
            "text": "Vec [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#delete", 
            "text": "Return a vector with an element deleted. Elements after this are moved\ndown by one index, compacting the vector. An out of bounds index raises an\nerror.  fun val delete(\n  i: USize val)\n: Vec[A] val ?", 
            "title": "delete"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_4", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_6", 
            "text": "Vec [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#remove", 
            "text": "Return a vector with n elements removed, beginning at index i.  fun val remove(\n  i: USize val,\n  n: USize val)\n: Vec[A] val ?", 
            "title": "remove"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_5", 
            "text": "i:  USize  val  n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_7", 
            "text": "Vec [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#push", 
            "text": "Return a vector with the value added to the end.  fun val push(\n  value: A)\n: Vec[A] val", 
            "title": "push"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_6", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_8", 
            "text": "Vec [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#pop", 
            "text": "Return a vector with the value at the end removed.  fun val pop()\n: Vec[A] val ?", 
            "title": "pop"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_9", 
            "text": "Vec [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#concat", 
            "text": "Return a vector with the values of the given iterator added to the end.  fun val concat(\n  iter: Iterator[A] ref)\n: Vec[A] val", 
            "title": "concat"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_7", 
            "text": "iter:  Iterator [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_10", 
            "text": "Vec [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#find", 
            "text": "Find the  nth  appearance of  value  from the beginning of the vector,\nstarting at  offset  and examining higher indices, and using the\nsupplied  predicate  for comparisons. Returns the index of the value, or\nraise an error if the value isn't present.  By default, the search starts at the first element of the vector,\nreturns the first instance of  value  found, and uses object identity\nfor comparison.  fun val find(\n  value: A,\n  offset: USize val = seq,\n  nth: USize val = seq,\n  predicate: {(A, A): Bool}[A] val = seq)\n: USize val ?", 
            "title": "find"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_8", 
            "text": "value: A  offset:  USize  val = seq  nth:  USize  val = seq  predicate: {(A, A): Bool}[A] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_11", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#contains", 
            "text": "Returns true if the vector contains  value , false otherwise.  fun val contains(\n  value: A,\n  predicate: {(A, A): Bool}[A] val = seq)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_9", 
            "text": "value: A  predicate: {(A, A): Bool}[A] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#slice", 
            "text": "Return a vector that is a clone of a portion of this vector. The range is\nexclusive and saturated.  fun val slice(\n  from: USize val = seq,\n  to: USize val = seq,\n  step: USize val = seq)\n: Vec[A] val", 
            "title": "slice"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_10", 
            "text": "from:  USize  val = seq  to:  USize  val = seq  step:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_13", 
            "text": "Vec [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#reverse", 
            "text": "Return a vector with the elements in reverse order.  fun val reverse()\n: Vec[A] val", 
            "title": "reverse"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_14", 
            "text": "Vec [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#keys", 
            "text": "Return an iterator over the indices in the vector.  fun val keys()\n: VecKeys[A] ref^", 
            "title": "keys"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_15", 
            "text": "VecKeys [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#values", 
            "text": "Return an iterator over the values in the vector.  fun val values()\n: VecValues[A] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_16", 
            "text": "VecValues [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#pairs", 
            "text": "Return an iterator over the (index, value) pairs in the vector.  fun val pairs()\n: VecPairs[A] ref^", 
            "title": "pairs"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_17", 
            "text": "VecPairs [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-persistent-Vec/#_pow32", 
            "text": "Raise 32 to the power of n.  fun box _pow32(\n  n: USize val)\n: USize val", 
            "title": "_pow32"
        }, 
        {
            "location": "/collections-persistent-Vec/#parameters_11", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_18", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Vec/#_leaf_nodes", 
            "text": "fun box _leaf_nodes()\n: Array[Array[A] val] ref^", 
            "title": "_leaf_nodes"
        }, 
        {
            "location": "/collections-persistent-Vec/#returns_19", 
            "text": "Array [ Array [A] val] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecKeys/", 
            "text": "VecKeys[A: \nAny\n #share]\n\n\nclass ref VecKeys[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  v: Vec[A] val)\n: VecKeys[A] ref^\n\n\n\n\nParameters\n\n\n\n\nv: \nVec\n[A] val\n\n\n\n\nReturns\n\n\n\n\nVecKeys\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: USize val ?\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?", 
            "title": "class VecKeys"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#veckeys91a-any-share93", 
            "text": "class ref VecKeys[A: Any #share]", 
            "title": "VecKeys[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#create", 
            "text": "new ref create(\n  v: Vec[A] val)\n: VecKeys[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#parameters", 
            "text": "v:  Vec [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#returns", 
            "text": "VecKeys [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#next", 
            "text": "fun ref next()\n: USize val ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-persistent-VecKeys/#returns_2", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecValues/", 
            "text": "VecValues[A: \nAny\n #share]\n\n\nclass ref VecValues[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  v: Vec[A] val)\n: VecValues[A] ref^\n\n\n\n\nParameters\n\n\n\n\nv: \nVec\n[A] val\n\n\n\n\nReturns\n\n\n\n\nVecValues\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?", 
            "title": "class VecValues"
        }, 
        {
            "location": "/collections-persistent-VecValues/#vecvalues91a-any-share93", 
            "text": "class ref VecValues[A: Any #share]", 
            "title": "VecValues[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-VecValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-VecValues/#create", 
            "text": "new ref create(\n  v: Vec[A] val)\n: VecValues[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-VecValues/#parameters", 
            "text": "v:  Vec [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-VecValues/#returns", 
            "text": "VecValues [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-VecValues/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-persistent-VecValues/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecValues/#next", 
            "text": "fun ref next()\n: A ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-persistent-VecValues/#returns_2", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecPairs/", 
            "text": "VecPairs[A: \nAny\n #share]\n\n\nclass ref VecPairs[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  v: Vec[A] val)\n: VecPairs[A] ref^\n\n\n\n\nParameters\n\n\n\n\nv: \nVec\n[A] val\n\n\n\n\nReturns\n\n\n\n\nVecPairs\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (USize val , A) ?\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , A) ?", 
            "title": "class VecPairs"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#vecpairs91a-any-share93", 
            "text": "class ref VecPairs[A: Any #share]", 
            "title": "VecPairs[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#create", 
            "text": "new ref create(\n  v: Vec[A] val)\n: VecPairs[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#parameters", 
            "text": "v:  Vec [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#returns", 
            "text": "VecPairs [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#next", 
            "text": "fun ref next()\n: (USize val , A) ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-persistent-VecPairs/#returns_2", 
            "text": "( USize  val , A) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Set/", 
            "text": "Set[A: (\nHashable\n val \n \nEquatable\n[A])]\n\n\ntype Set[A: (Hashable val \n Equatable[A])] is\n  HashSet[A, HashEq[A] val] val\n\n\n\n\nType Alias For\n\n\n\n\nHashSet\n[A, \nHashEq\n[A] val] val", 
            "title": "type Set"
        }, 
        {
            "location": "/collections-persistent-Set/#set91a-hashable-val-equatable91a9393", 
            "text": "type Set[A: (Hashable val   Equatable[A])] is\n  HashSet[A, HashEq[A] val] val", 
            "title": "Set[A: (Hashable val &amp; Equatable[A])]"
        }, 
        {
            "location": "/collections-persistent-Set/#type-alias-for", 
            "text": "HashSet [A,  HashEq [A] val] val", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-SetIs/", 
            "text": "SetIs[A: \nAny\n #share]\n\n\ntype SetIs[A: Any #share] is\n  HashSet[A, HashIs[A] val] val\n\n\n\n\nType Alias For\n\n\n\n\nHashSet\n[A, \nHashIs\n[A] val] val", 
            "title": "type SetIs"
        }, 
        {
            "location": "/collections-persistent-SetIs/#setis91a-any-share93", 
            "text": "type SetIs[A: Any #share] is\n  HashSet[A, HashIs[A] val] val", 
            "title": "SetIs[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-SetIs/#type-alias-for", 
            "text": "HashSet [A,  HashIs [A] val] val", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-HashSet/", 
            "text": "HashSet[A: \nAny\n #share, H: \nHashFunction\n[A] val]\n\n\nA set, built on top of persistent Map. This is implemented as map of an\nalias of a type to itself.\n\n\nclass val HashSet[A: Any #share, H: HashFunction[A] val] is\n  Comparable[HashSet[A, H] box] ref\n\n\n\n\nImplements\n\n\n\n\nComparable\n[\nHashSet\n[A, H] box] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashSet[A, H] val^\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val^\n\n\n\n\n\n\n_create\n\n\nnew val _create(\n  map': HashMap[A, A, H] val)\n: HashSet[A, H] val^\n\n\n\n\nParameters\n\n\n\n\nmap': \nHashMap\n[A, A, H] val\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturn the number of elements in the set.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturn the value if it is in the set, otherwise raise an error.\n\n\nfun box apply(\n  value: A)\n: A ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\ncontains\n\n\nCheck whether the set contains the value.\n\n\nfun box contains(\n  value: A)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nadd\n\n\nReturn a set with the value added.\n\n\nfun val add(\n  value: A)\n: HashSet[A, H] val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nsub\n\n\nReturn a set with the value removed.\n\n\nfun val sub(\n  value: A)\n: HashSet[A, H] val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nop_or\n\n\nReturn a set with the elements of both this and that.\n\n\nfun val op_or(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nop_and\n\n\nReturn a set with the elements that are in both this and that.\n\n\nfun val op_and(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nop_xor\n\n\nReturn a set with elements that are in either this or that, but not both.\n\n\nfun val op_xor(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\nwithout\n\n\nReturn a set with the elements of this that are not in that.\n\n\nfun val without(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val\n\n\n\n\nParameters\n\n\n\n\nthat: (\nHashSet\n[A, H] val | \nIterator\n[A] ref)\n\n\n\n\nReturns\n\n\n\n\nHashSet\n[A, H] val\n\n\n\n\n\n\neq\n\n\nReturn true if this and that contain the same elements.\n\n\nfun box eq(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlt\n\n\nReturn true if every element in this is also in that, and this has fewer\nelements than that.\n\n\nfun box lt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nle\n\n\nReturn true if every element in this is also in that.\n\n\nfun box le(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ngt\n\n\nReturn true if every element in that is also in this, and this has more\nelements than that.\n\n\nfun box gt(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nge\n\n\nReturn true if every element in that is also in this.\n\n\nfun box ge(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nvalues\n\n\nReturn an iterator over the values in the set.\n\n\nfun box values()\n: Iterator[A] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[A] ref^\n\n\n\n\n\n\ncompare\n\n\nfun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\n(\nLess\n val | \nEqual\n val | \nGreater\n val)\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: HashSet[A, H] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nHashSet\n[A, H] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class HashSet"
        }, 
        {
            "location": "/collections-persistent-HashSet/#hashset91a-any-share-h-hashfunction91a93-val93", 
            "text": "A set, built on top of persistent Map. This is implemented as map of an\nalias of a type to itself.  class val HashSet[A: Any #share, H: HashFunction[A] val] is\n  Comparable[HashSet[A, H] box] ref", 
            "title": "HashSet[A: Any #share, H: HashFunction[A] val]"
        }, 
        {
            "location": "/collections-persistent-HashSet/#implements", 
            "text": "Comparable [ HashSet [A, H] box] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-persistent-HashSet/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-HashSet/#create", 
            "text": "new val create()\n: HashSet[A, H] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns", 
            "text": "HashSet [A, H] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#_create", 
            "text": "new val _create(\n  map': HashMap[A, A, H] val)\n: HashSet[A, H] val^", 
            "title": "_create"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters", 
            "text": "map':  HashMap [A, A, H] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_1", 
            "text": "HashSet [A, H] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-HashSet/#size", 
            "text": "Return the number of elements in the set.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#apply", 
            "text": "Return the value if it is in the set, otherwise raise an error.  fun box apply(\n  value: A)\n: A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_1", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_3", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#contains", 
            "text": "Check whether the set contains the value.  fun box contains(\n  value: A)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_2", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#add", 
            "text": "Return a set with the value added.  fun val add(\n  value: A)\n: HashSet[A, H] val", 
            "title": "add"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_3", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_5", 
            "text": "HashSet [A, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#sub", 
            "text": "Return a set with the value removed.  fun val sub(\n  value: A)\n: HashSet[A, H] val", 
            "title": "sub"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_4", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_6", 
            "text": "HashSet [A, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#op_or", 
            "text": "Return a set with the elements of both this and that.  fun val op_or(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val", 
            "title": "op_or"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_5", 
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_7", 
            "text": "HashSet [A, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#op_and", 
            "text": "Return a set with the elements that are in both this and that.  fun val op_and(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val", 
            "title": "op_and"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_6", 
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_8", 
            "text": "HashSet [A, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#op_xor", 
            "text": "Return a set with elements that are in either this or that, but not both.  fun val op_xor(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val", 
            "title": "op_xor"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_7", 
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_9", 
            "text": "HashSet [A, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#without", 
            "text": "Return a set with the elements of this that are not in that.  fun val without(\n  that: (HashSet[A, H] val | Iterator[A] ref))\n: HashSet[A, H] val", 
            "title": "without"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_8", 
            "text": "that: ( HashSet [A, H] val |  Iterator [A] ref)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_10", 
            "text": "HashSet [A, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#eq", 
            "text": "Return true if this and that contain the same elements.  fun box eq(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_9", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#lt", 
            "text": "Return true if every element in this is also in that, and this has fewer\nelements than that.  fun box lt(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "lt"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_10", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#le", 
            "text": "Return true if every element in this is also in that.  fun box le(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "le"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_11", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#gt", 
            "text": "Return true if every element in that is also in this, and this has more\nelements than that.  fun box gt(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "gt"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_12", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#ge", 
            "text": "Return true if every element in that is also in this.  fun box ge(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "ge"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_13", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_15", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#values", 
            "text": "Return an iterator over the values in the set.  fun box values()\n: Iterator[A] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_16", 
            "text": "Iterator [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#compare", 
            "text": "fun box compare(\n  that: HashSet[A, H] box)\n: (Less val | Equal val | Greater val)", 
            "title": "compare"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_14", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_17", 
            "text": "( Less  val |  Equal  val |  Greater  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashSet/#ne", 
            "text": "fun box ne(\n  that: HashSet[A, H] box)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-persistent-HashSet/#parameters_15", 
            "text": "that:  HashSet [A, H] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashSet/#returns_18", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Map/", 
            "text": "Map[K: (\nHashable\n val \n \nEquatable\n[K]), V: \nAny\n #share]\n\n\nA map that uses structural equality on the key.\n\n\ntype Map[K: (Hashable val \n Equatable[K]), V: Any #share] is\n  HashMap[K, V, HashEq[K] val] val\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[K, V, \nHashEq\n[K] val] val", 
            "title": "type Map"
        }, 
        {
            "location": "/collections-persistent-Map/#map91k-hashable-val-equatable91k93-v-any-share93", 
            "text": "A map that uses structural equality on the key.  type Map[K: (Hashable val   Equatable[K]), V: Any #share] is\n  HashMap[K, V, HashEq[K] val] val", 
            "title": "Map[K: (Hashable val &amp; Equatable[K]), V: Any #share]"
        }, 
        {
            "location": "/collections-persistent-Map/#type-alias-for", 
            "text": "HashMap [K, V,  HashEq [K] val] val", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-MapIs/", 
            "text": "MapIs[K: \nAny\n #share, V: \nAny\n #share]\n\n\nA map that uses identity comparison on the key.\n\n\ntype MapIs[K: Any #share, V: Any #share] is\n  HashMap[K, V, HashIs[K] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[K, V, \nHashIs\n[K] val] ref", 
            "title": "type MapIs"
        }, 
        {
            "location": "/collections-persistent-MapIs/#mapis91k-any-share-v-any-share93", 
            "text": "A map that uses identity comparison on the key.  type MapIs[K: Any #share, V: Any #share] is\n  HashMap[K, V, HashIs[K] val] ref", 
            "title": "MapIs[K: Any #share, V: Any #share]"
        }, 
        {
            "location": "/collections-persistent-MapIs/#type-alias-for", 
            "text": "HashMap [K, V,  HashIs [K] val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-HashMap/", 
            "text": "HashMap[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\nA persistent map based on the Compressed Hash Array Mapped Prefix-tree from\n'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju\n\n\nUsage\n\n\nuse \ncollections/persistent\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let m1 = Map[String, U32] // {}\n      // Update returns a new map with the provided key set\n      // to the provided value. The old map is unchanged.\n      let m2 = m1(\na\n) = 5 // {a: 5}\n      let m3 = m2(\nb\n) = 10 // {a: 5, b: 10}\n      let m4 = m3.remove(\na\n)? // {b: 10}\n      // You can create a new map from key value pairs.\n      let m5 = Map[String, U32].concat([(\na\n, 2); (\nb\n, 3)].values()) // {a: 2, b: 3}\n    end\n\n\n\n\nclass val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: HashMap[K, V, H] val^\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H] val^\n\n\n\n\n\n\n_create\n\n\nnew val _create(\n  r: _MapNode[K, V, H] val,\n  s: USize val)\n: HashMap[K, V, H] val^\n\n\n\n\nParameters\n\n\n\n\nr: \n_MapNode\n[K, V, H] val\n\n\ns: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H] val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nAttempt to get the value corresponding to k.\n\n\nfun val apply(\n  k: K)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nk: K\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\nsize\n\n\nReturn the amount of key-value pairs in the Map.\n\n\nfun val size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nupdate\n\n\nUpdate the value associated with the provided key.\n\n\nfun val update(\n  key: K,\n  value: V)\n: HashMap[K, V, H] val\n\n\n\n\nParameters\n\n\n\n\nkey: K\n\n\nvalue: V\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H] val\n\n\n\n\n\n\nremove\n\n\nTry to remove the provided key from the Map.\n\n\nfun val remove(\n  k: K)\n: HashMap[K, V, H] val ?\n\n\n\n\nParameters\n\n\n\n\nk: K\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H] val ?\n\n\n\n\n\n\nget_or_else\n\n\nGet the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.\n\n\nfun val get_or_else(\n  k: K,\n  alt: V)\n: V\n\n\n\n\nParameters\n\n\n\n\nk: K\n\n\nalt: V\n\n\n\n\nReturns\n\n\n\n\nV\n\n\n\n\n\n\ncontains\n\n\nCheck whether the node contains the provided key.\n\n\nfun val contains(\n  k: K)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nk: K\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nconcat\n\n\nAdd the K, V pairs from the given iterator to the map.\n\n\nfun val concat(\n  iter: Iterator[(K , V)] ref)\n: HashMap[K, V, H] val\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[(K , V)] ref\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[K, V, H] val\n\n\n\n\n\n\nkeys\n\n\nfun val keys()\n: MapKeys[K, V, H] ref\n\n\n\n\nReturns\n\n\n\n\nMapKeys\n[K, V, H] ref\n\n\n\n\n\n\nvalues\n\n\nfun val values()\n: MapValues[K, V, H] ref\n\n\n\n\nReturns\n\n\n\n\nMapValues\n[K, V, H] ref\n\n\n\n\n\n\npairs\n\n\nfun val pairs()\n: MapPairs[K, V, H] ref\n\n\n\n\nReturns\n\n\n\n\nMapPairs\n[K, V, H] ref\n\n\n\n\n\n\nPrivate Functions\n\n\n_root_node\n\n\nfun box _root_node()\n: _MapNode[K, V, H] val\n\n\n\n\nReturns\n\n\n\n\n_MapNode\n[K, V, H] val", 
            "title": "class HashMap"
        }, 
        {
            "location": "/collections-persistent-HashMap/#hashmap91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "A persistent map based on the Compressed Hash Array Mapped Prefix-tree from\n'Optimizing Hash-Array Mapped Tries for Fast and Lean Immutable JVM\nCollections' by Michael J. Steindorfer and Jurgen J. Vinju", 
            "title": "HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-HashMap/#usage", 
            "text": "use  collections/persistent \n\nactor Main\n  new create(env: Env) = \n    try\n      let m1 = Map[String, U32] // {}\n      // Update returns a new map with the provided key set\n      // to the provided value. The old map is unchanged.\n      let m2 = m1( a ) = 5 // {a: 5}\n      let m3 = m2( b ) = 10 // {a: 5, b: 10}\n      let m4 = m3.remove( a )? // {b: 10}\n      // You can create a new map from key value pairs.\n      let m5 = Map[String, U32].concat([( a , 2); ( b , 3)].values()) // {a: 2, b: 3}\n    end  class val HashMap[K: Any #share, V: Any #share, H: HashFunction[K] val]", 
            "title": "Usage"
        }, 
        {
            "location": "/collections-persistent-HashMap/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-HashMap/#create", 
            "text": "new val create()\n: HashMap[K, V, H] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns", 
            "text": "HashMap [K, V, H] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#_create", 
            "text": "new val _create(\n  r: _MapNode[K, V, H] val,\n  s: USize val)\n: HashMap[K, V, H] val^", 
            "title": "_create"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters", 
            "text": "r:  _MapNode [K, V, H] val  s:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_1", 
            "text": "HashMap [K, V, H] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-HashMap/#apply", 
            "text": "Attempt to get the value corresponding to k.  fun val apply(\n  k: K)\n: V ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters_1", 
            "text": "k: K", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_2", 
            "text": "V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#size", 
            "text": "Return the amount of key-value pairs in the Map.  fun val size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_3", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#update", 
            "text": "Update the value associated with the provided key.  fun val update(\n  key: K,\n  value: V)\n: HashMap[K, V, H] val", 
            "title": "update"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters_2", 
            "text": "key: K  value: V", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_4", 
            "text": "HashMap [K, V, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#remove", 
            "text": "Try to remove the provided key from the Map.  fun val remove(\n  k: K)\n: HashMap[K, V, H] val ?", 
            "title": "remove"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters_3", 
            "text": "k: K", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_5", 
            "text": "HashMap [K, V, H] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#get_or_else", 
            "text": "Get the value associated with provided key if present. Otherwise,\nreturn the provided alternate value.  fun val get_or_else(\n  k: K,\n  alt: V)\n: V", 
            "title": "get_or_else"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters_4", 
            "text": "k: K  alt: V", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_6", 
            "text": "V", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#contains", 
            "text": "Check whether the node contains the provided key.  fun val contains(\n  k: K)\n: Bool val", 
            "title": "contains"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters_5", 
            "text": "k: K", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#concat", 
            "text": "Add the K, V pairs from the given iterator to the map.  fun val concat(\n  iter: Iterator[(K , V)] ref)\n: HashMap[K, V, H] val", 
            "title": "concat"
        }, 
        {
            "location": "/collections-persistent-HashMap/#parameters_6", 
            "text": "iter:  Iterator [(K , V)] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_8", 
            "text": "HashMap [K, V, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#keys", 
            "text": "fun val keys()\n: MapKeys[K, V, H] ref", 
            "title": "keys"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_9", 
            "text": "MapKeys [K, V, H] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#values", 
            "text": "fun val values()\n: MapValues[K, V, H] ref", 
            "title": "values"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_10", 
            "text": "MapValues [K, V, H] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#pairs", 
            "text": "fun val pairs()\n: MapPairs[K, V, H] ref", 
            "title": "pairs"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_11", 
            "text": "MapPairs [K, V, H] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-HashMap/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-persistent-HashMap/#_root_node", 
            "text": "fun box _root_node()\n: _MapNode[K, V, H] val", 
            "title": "_root_node"
        }, 
        {
            "location": "/collections-persistent-HashMap/#returns_12", 
            "text": "_MapNode [K, V, H] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapKeys/", 
            "text": "MapKeys[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\nclass ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  m: HashMap[K, V, H] val)\n: MapKeys[K, V, H] ref^\n\n\n\n\nParameters\n\n\n\n\nm: \nHashMap\n[K, V, H] val\n\n\n\n\nReturns\n\n\n\n\nMapKeys\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: K ?\n\n\n\n\nReturns\n\n\n\n\nK ?", 
            "title": "class MapKeys"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#mapkeys91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "class ref MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]", 
            "title": "MapKeys[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#create", 
            "text": "new ref create(\n  m: HashMap[K, V, H] val)\n: MapKeys[K, V, H] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#parameters", 
            "text": "m:  HashMap [K, V, H] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#returns", 
            "text": "MapKeys [K, V, H] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#next", 
            "text": "fun ref next()\n: K ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-persistent-MapKeys/#returns_2", 
            "text": "K ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapValues/", 
            "text": "MapValues[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\nclass ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  m: HashMap[K, V, H] val)\n: MapValues[K, V, H] ref^\n\n\n\n\nParameters\n\n\n\n\nm: \nHashMap\n[K, V, H] val\n\n\n\n\nReturns\n\n\n\n\nMapValues\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: V ?\n\n\n\n\nReturns\n\n\n\n\nV ?", 
            "title": "class MapValues"
        }, 
        {
            "location": "/collections-persistent-MapValues/#mapvalues91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "class ref MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]", 
            "title": "MapValues[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-MapValues/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-MapValues/#create", 
            "text": "new ref create(\n  m: HashMap[K, V, H] val)\n: MapValues[K, V, H] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-MapValues/#parameters", 
            "text": "m:  HashMap [K, V, H] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-MapValues/#returns", 
            "text": "MapValues [K, V, H] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapValues/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-MapValues/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-persistent-MapValues/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapValues/#next", 
            "text": "fun ref next()\n: V ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-persistent-MapValues/#returns_2", 
            "text": "V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/", 
            "text": "MapPairs[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\nclass ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  m: HashMap[K, V, H] val)\n: MapPairs[K, V, H] ref^\n\n\n\n\nParameters\n\n\n\n\nm: \nHashMap\n[K, V, H] val\n\n\n\n\nReturns\n\n\n\n\nMapPairs\n[K, V, H] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: (K , V) ?\n\n\n\n\nReturns\n\n\n\n\n(K , V) ?\n\n\n\n\n\n\nPrivate Functions\n\n\n_push\n\n\nfun ref _push(\n  n: _MapNode[K, V, H] val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nn: \n_MapNode\n[K, V, H] val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_backup\n\n\nfun ref _backup()\n: None val ?\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_inc_i\n\n\nfun ref _inc_i()\n: None val ?\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_cur\n\n\nfun box _cur()\n: (_MapNode[K, V, H] val , USize val) ?\n\n\n\n\nReturns\n\n\n\n\n(\n_MapNode\n[K, V, H] val , \nUSize\n val) ?", 
            "title": "class MapPairs"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#mappairs91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "class ref MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]", 
            "title": "MapPairs[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#create", 
            "text": "new ref create(\n  m: HashMap[K, V, H] val)\n: MapPairs[K, V, H] ref^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#parameters", 
            "text": "m:  HashMap [K, V, H] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns", 
            "text": "MapPairs [K, V, H] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#next", 
            "text": "fun ref next()\n: (K , V) ?", 
            "title": "next"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns_2", 
            "text": "(K , V) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#_push", 
            "text": "fun ref _push(\n  n: _MapNode[K, V, H] val)\n: None val", 
            "title": "_push"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#parameters_1", 
            "text": "n:  _MapNode [K, V, H] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#_backup", 
            "text": "fun ref _backup()\n: None val ?", 
            "title": "_backup"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns_4", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#_inc_i", 
            "text": "fun ref _inc_i()\n: None val ?", 
            "title": "_inc_i"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns_5", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#_cur", 
            "text": "fun box _cur()\n: (_MapNode[K, V, H] val , USize val) ?", 
            "title": "_cur"
        }, 
        {
            "location": "/collections-persistent-MapPairs/#returns_6", 
            "text": "( _MapNode [K, V, H] val ,  USize  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-List/", 
            "text": "List[A: A]\n\n\nA persistent list with functional transformations.\n\n\nUsage\n\n\nuse \ncollections/persistent\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) =\n x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end\n\n\n\n\ntype List[A: A] is\n  (Cons[A] val | Nil[A] val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)", 
            "title": "type List"
        }, 
        {
            "location": "/collections-persistent-List/#list91a-a93", 
            "text": "A persistent list with functional transformations.", 
            "title": "List[A: A]"
        }, 
        {
            "location": "/collections-persistent-List/#usage", 
            "text": "use  collections/persistent \n\nactor Main\n  new create(env: Env) = \n    try\n      let l1 = Lists[U32]([2; 4; 6; 8]) // List(2, 4, 6, 8)\n\n      let empty = Lists[U32].empty() // List()\n\n      // prepend() returns a new List, leaving the\n      // old list unchanged\n      let l2 = empty.prepend(3) // List(3)\n      let l3 = l2.prepend(2) // List(2, 3)\n      let l4 = l3.prepend(1) // List(1, 2, 3)\n      let l4_head = l4.head() // 1\n      let l4_tail = l4.tail() // List(2, 3)\n\n      l4_head == 1\n      Lists[U32].eq(l4, Lists[U32]([1; 2; 3]))?\n      Lists[U32].eq(l4_tail, Lists[U32]([2; 3]))?\n\n      let doubled = l4.map[U32]({(x) =  x * 2 })\n\n      Lists[U32].eq(doubled, Lists[U32]([2; 4; 6]))?\n    end  type List[A: A] is\n  (Cons[A] val | Nil[A] val)", 
            "title": "Usage"
        }, 
        {
            "location": "/collections-persistent-List/#type-alias-for", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-Lists/", 
            "text": "Lists[A: A]\n\n\nA primitive containing helper functions for constructing and\ntesting Lists.\n\n\nprimitive val Lists[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Lists[A] val^\n\n\n\n\nReturns\n\n\n\n\nLists\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nempty\n\n\nReturns an empty list.\n\n\nfun box empty()\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ncons\n\n\nReturns a list that has h as a head and t as a tail.\n\n\nfun box cons(\n  h: val-\nA,\n  t: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nh: val-\nA\n\n\nt: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\napply\n\n\nBuilds a new list from an Array\n\n\nfun box apply(\n  arr: Array[val-\nA] ref)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\narr: \nArray\n[val-\nA] ref\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nfrom\n\n\nBuilds a new list from an iterator\n\n\nfun box from(\n  iter: Iterator[val-\nA] ref)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[val-\nA] ref\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\neq[optional T: \nEquatable\n[T] val]\n\n\nChecks whether two lists are equal.\n\n\nfun box eq[optional T: Equatable[T] val](\n  l1: (Cons[T] val | Nil[T] val),\n  l2: (Cons[T] val | Nil[T] val))\n: Bool val ?\n\n\n\n\nParameters\n\n\n\n\nl1: (\nCons\n[T] val | \nNil\n[T] val)\n\n\nl2: (\nCons\n[T] val | \nNil\n[T] val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Lists[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nLists\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Lists"
        }, 
        {
            "location": "/collections-persistent-Lists/#lists91a-a93", 
            "text": "A primitive containing helper functions for constructing and\ntesting Lists.  primitive val Lists[A: A]", 
            "title": "Lists[A: A]"
        }, 
        {
            "location": "/collections-persistent-Lists/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-Lists/#create", 
            "text": "new val create()\n: Lists[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns", 
            "text": "Lists [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Lists/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-Lists/#empty", 
            "text": "Returns an empty list.  fun box empty()\n: (Cons[A] val | Nil[A] val)", 
            "title": "empty"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns_1", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Lists/#cons", 
            "text": "Returns a list that has h as a head and t as a tail.  fun box cons(\n  h: val- A,\n  t: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)", 
            "title": "cons"
        }, 
        {
            "location": "/collections-persistent-Lists/#parameters", 
            "text": "h: val- A  t: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns_2", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Lists/#apply", 
            "text": "Builds a new list from an Array  fun box apply(\n  arr: Array[val- A] ref)\n: (Cons[A] val | Nil[A] val)", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-Lists/#parameters_1", 
            "text": "arr:  Array [val- A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns_3", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Lists/#from", 
            "text": "Builds a new list from an iterator  fun box from(\n  iter: Iterator[val- A] ref)\n: (Cons[A] val | Nil[A] val)", 
            "title": "from"
        }, 
        {
            "location": "/collections-persistent-Lists/#parameters_2", 
            "text": "iter:  Iterator [val- A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns_4", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Lists/#eq91optional-t-equatable91t93-val93", 
            "text": "Checks whether two lists are equal.  fun box eq[optional T: Equatable[T] val](\n  l1: (Cons[T] val | Nil[T] val),\n  l2: (Cons[T] val | Nil[T] val))\n: Bool val ?", 
            "title": "eq[optional T: Equatable[T] val]"
        }, 
        {
            "location": "/collections-persistent-Lists/#parameters_3", 
            "text": "l1: ( Cons [T] val |  Nil [T] val)  l2: ( Cons [T] val |  Nil [T] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns_5", 
            "text": "Bool  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Lists/#ne", 
            "text": "fun box ne(\n  that: Lists[A] val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-persistent-Lists/#parameters_4", 
            "text": "that:  Lists [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Lists/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/", 
            "text": "Nil[A: A]\n\n\nThe empty list of As.\n\n\nprimitive val Nil[A: A] is\n  ReadSeq[val-\nA] box\n\n\n\n\nImplements\n\n\n\n\nReadSeq\n[val-\nA] box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Nil[A] val^\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturns the size of the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturns the i-th element of the sequence. For the empty list this call will\nalways error because any index will be out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: val-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nval-\nA ?\n\n\n\n\n\n\nvalues\n\n\nReturns an empty iterator over the elements of the empty list.\n\n\nfun box values()\n: Iterator[val-\nA] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[val-\nA] ref^\n\n\n\n\n\n\nis_empty\n\n\nReturns a Bool indicating if the list is empty.\n\n\nfun box is_empty()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nis_non_empty\n\n\nReturns a Bool indicating if the list is non-empty.\n\n\nfun box is_non_empty()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhead\n\n\nReturns an error, since Nil has no head.\n\n\nfun box head()\n: val-\nA ?\n\n\n\n\nReturns\n\n\n\n\nval-\nA ?\n\n\n\n\n\n\ntail\n\n\nReturns an error, since Nil has no tail.\n\n\nfun box tail()\n: (Cons[A] val | Nil[A] val) ?\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val) ?\n\n\n\n\n\n\nreverse\n\n\nThe reverse of the empty list is the empty list.\n\n\nfun box reverse()\n: Nil[A] val\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\nprepend\n\n\nBuilds a new list with an element added to the front of this list.\n\n\nfun box prepend(\n  a: val-\nA!)\n: Cons[A] val\n\n\n\n\nParameters\n\n\n\n\na: val-\nA!\n\n\n\n\nReturns\n\n\n\n\nCons\n[A] val\n\n\n\n\n\n\nconcat\n\n\nThe concatenation of any list l with the empty list is l.\n\n\nfun box concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nmap[B: B]\n\n\nMapping a function from A to B over the empty list yields the\nempty list of Bs.\n\n\nfun box map[B: B](\n  f: {(val-\nA): val-\nB}[A, B] box)\n: Nil[B] val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): val-\nB}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nNil\n[B] val\n\n\n\n\n\n\nflat_map[B: B]\n\n\nFlatmapping a function from A to B over the empty list yields the\nempty list of Bs.\n\n\nfun box flat_map[B: B](\n  f: {(val-\nA): List[B]}[A, B] box)\n: Nil[B] val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): List[B]}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nNil\n[B] val\n\n\n\n\n\n\nfor_each\n\n\nApplying a function to every member of the empty list is a no-op.\n\n\nfun box for_each(\n  f: {(val-\nA)}[A] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA)}[A] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfilter\n\n\nFiltering the empty list yields the empty list.\n\n\nfun box filter(\n  f: {(val-\nA): Bool}[A] box)\n: Nil[A] val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\nfold[B: B]\n\n\nFolding over the empty list yields the initial accumulator.\n\n\nfun box fold[B: B](\n  f: {(B, val-\nA): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nf: {(B, val-\nA): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\n\nAny predicate is true of every member of the empty list.\n\n\nfun box every(\n  f: {(val-\nA): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\n\nFor any predicate, there is no element that satisfies it in the empty\nlist.\n\n\nfun box exists(\n  f: {(val-\nA): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\n\nThe only partition of the empty list is two empty lists.\n\n\nfun box partition(\n  f: {(val-\nA): Bool}[A] box)\n: (Nil[A] val , Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n(\nNil\n[A] val , \nNil\n[A] val)\n\n\n\n\n\n\ndrop\n\n\nThere are no elements to drop from the empty list.\n\n\nfun box drop(\n  n: USize val)\n: Nil[A] val\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ndrop_while\n\n\nThere are no elements to drop from the empty list.\n\n\nfun box drop_while(\n  f: {(val-\nA): Bool}[A] box)\n: Nil[A] val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ntake\n\n\nThere are no elements to take from the empty list.\n\n\nfun box take(\n  n: USize val)\n: Nil[A] val\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ntake_while\n\n\nThere are no elements to take from the empty list.\n\n\nfun box take_while(\n  f: {(val-\nA): Bool}[A] box)\n: Nil[A] val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nNil\n[A] val\n\n\n\n\n\n\ncontains[optional T: (A \n \nHasEq\n[A!] #read)]\n\n\nfun val contains[optional T: (A \n HasEq[A!] #read)](\n  a: val-\nT)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\na: val-\nT\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Nil[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNil\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Nil[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNil\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Nil"
        }, 
        {
            "location": "/collections-persistent-Nil/#nil91a-a93", 
            "text": "The empty list of As.  primitive val Nil[A: A] is\n  ReadSeq[val- A] box", 
            "title": "Nil[A: A]"
        }, 
        {
            "location": "/collections-persistent-Nil/#implements", 
            "text": "ReadSeq [val- A] box", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-persistent-Nil/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-Nil/#create", 
            "text": "new val create()\n: Nil[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns", 
            "text": "Nil [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-Nil/#size", 
            "text": "Returns the size of the list.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_1", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#apply", 
            "text": "Returns the i-th element of the sequence. For the empty list this call will\nalways error because any index will be out of bounds.  fun box apply(\n  i: USize val)\n: val- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_2", 
            "text": "val- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#values", 
            "text": "Returns an empty iterator over the elements of the empty list.  fun box values()\n: Iterator[val- A] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_3", 
            "text": "Iterator [val- A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#is_empty", 
            "text": "Returns a Bool indicating if the list is empty.  fun box is_empty()\n: Bool val", 
            "title": "is_empty"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#is_non_empty", 
            "text": "Returns a Bool indicating if the list is non-empty.  fun box is_non_empty()\n: Bool val", 
            "title": "is_non_empty"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#head", 
            "text": "Returns an error, since Nil has no head.  fun box head()\n: val- A ?", 
            "title": "head"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_6", 
            "text": "val- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#tail", 
            "text": "Returns an error, since Nil has no tail.  fun box tail()\n: (Cons[A] val | Nil[A] val) ?", 
            "title": "tail"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_7", 
            "text": "( Cons [A] val |  Nil [A] val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#reverse", 
            "text": "The reverse of the empty list is the empty list.  fun box reverse()\n: Nil[A] val", 
            "title": "reverse"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_8", 
            "text": "Nil [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#prepend", 
            "text": "Builds a new list with an element added to the front of this list.  fun box prepend(\n  a: val- A!)\n: Cons[A] val", 
            "title": "prepend"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_1", 
            "text": "a: val- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_9", 
            "text": "Cons [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#concat", 
            "text": "The concatenation of any list l with the empty list is l.  fun box concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)", 
            "title": "concat"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_2", 
            "text": "l: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_10", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#map91b-b93", 
            "text": "Mapping a function from A to B over the empty list yields the\nempty list of Bs.  fun box map[B: B](\n  f: {(val- A): val- B}[A, B] box)\n: Nil[B] val", 
            "title": "map[B: B]"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_3", 
            "text": "f: {(val- A): val- B}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_11", 
            "text": "Nil [B] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#flat_map91b-b93", 
            "text": "Flatmapping a function from A to B over the empty list yields the\nempty list of Bs.  fun box flat_map[B: B](\n  f: {(val- A): List[B]}[A, B] box)\n: Nil[B] val", 
            "title": "flat_map[B: B]"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_4", 
            "text": "f: {(val- A): List[B]}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_12", 
            "text": "Nil [B] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#for_each", 
            "text": "Applying a function to every member of the empty list is a no-op.  fun box for_each(\n  f: {(val- A)}[A] box)\n: None val", 
            "title": "for_each"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_5", 
            "text": "f: {(val- A)}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#filter", 
            "text": "Filtering the empty list yields the empty list.  fun box filter(\n  f: {(val- A): Bool}[A] box)\n: Nil[A] val", 
            "title": "filter"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_6", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_14", 
            "text": "Nil [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#fold91b-b93", 
            "text": "Folding over the empty list yields the initial accumulator.  fun box fold[B: B](\n  f: {(B, val- A): B^}[A, B] box,\n  acc: B)\n: B", 
            "title": "fold[B: B]"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_7", 
            "text": "f: {(B, val- A): B^}[A, B] box  acc: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_15", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#every", 
            "text": "Any predicate is true of every member of the empty list.  fun box every(\n  f: {(val- A): Bool}[A] box)\n: Bool val", 
            "title": "every"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_8", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_16", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#exists", 
            "text": "For any predicate, there is no element that satisfies it in the empty\nlist.  fun box exists(\n  f: {(val- A): Bool}[A] box)\n: Bool val", 
            "title": "exists"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_9", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_17", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#partition", 
            "text": "The only partition of the empty list is two empty lists.  fun box partition(\n  f: {(val- A): Bool}[A] box)\n: (Nil[A] val , Nil[A] val)", 
            "title": "partition"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_10", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_18", 
            "text": "( Nil [A] val ,  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#drop", 
            "text": "There are no elements to drop from the empty list.  fun box drop(\n  n: USize val)\n: Nil[A] val", 
            "title": "drop"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_11", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_19", 
            "text": "Nil [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#drop_while", 
            "text": "There are no elements to drop from the empty list.  fun box drop_while(\n  f: {(val- A): Bool}[A] box)\n: Nil[A] val", 
            "title": "drop_while"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_12", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_20", 
            "text": "Nil [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#take", 
            "text": "There are no elements to take from the empty list.  fun box take(\n  n: USize val)\n: Nil[A] val", 
            "title": "take"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_13", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_21", 
            "text": "Nil [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#take_while", 
            "text": "There are no elements to take from the empty list.  fun box take_while(\n  f: {(val- A): Bool}[A] box)\n: Nil[A] val", 
            "title": "take_while"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_14", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_22", 
            "text": "Nil [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#contains91optional-t-a-haseq91a93-read93", 
            "text": "fun val contains[optional T: (A   HasEq[A!] #read)](\n  a: val- T)\n: Bool val", 
            "title": "contains[optional T: (A &amp; HasEq[A!] #read)]"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_15", 
            "text": "a: val- T", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#eq", 
            "text": "fun box eq(\n  that: Nil[A] val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_16", 
            "text": "that:  Nil [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_24", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Nil/#ne", 
            "text": "fun box ne(\n  that: Nil[A] val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-persistent-Nil/#parameters_17", 
            "text": "that:  Nil [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Nil/#returns_25", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/", 
            "text": "Cons[A: A]\n\n\nA list with a head and a tail, where the tail can be empty.\n\n\nclass val Cons[A: A] is\n  ReadSeq[val-\nA] box\n\n\n\n\nImplements\n\n\n\n\nReadSeq\n[val-\nA] box\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  a: val-\nA,\n  t: (Cons[A] val | Nil[A] val))\n: Cons[A] val^\n\n\n\n\nParameters\n\n\n\n\na: val-\nA\n\n\nt: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\nCons\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturns the size of the list.\n\n\nfun box size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply\n\n\nReturns the i-th element of the list. Errors if the index is out of bounds.\n\n\nfun box apply(\n  i: USize val)\n: val-\nA ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nval-\nA ?\n\n\n\n\n\n\nvalues\n\n\nReturns an iterator over the elements of the list.\n\n\nfun box values()\n: Iterator[val-\nA] ref^\n\n\n\n\nReturns\n\n\n\n\nIterator\n[val-\nA] ref^\n\n\n\n\n\n\nis_empty\n\n\nReturns a Bool indicating if the list is empty.\n\n\nfun box is_empty()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nis_non_empty\n\n\nReturns a Bool indicating if the list is non-empty.\n\n\nfun box is_non_empty()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhead\n\n\nReturns the head of the list.\n\n\nfun box head()\n: val-\nA\n\n\n\n\nReturns\n\n\n\n\nval-\nA\n\n\n\n\n\n\ntail\n\n\nReturns the tail of the list.\n\n\nfun box tail()\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nreverse\n\n\nBuilds a new list by reversing the elements in the list.\n\n\nfun val reverse()\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nprepend\n\n\nBuilds a new list with an element added to the front of this list.\n\n\nfun val prepend(\n  a: val-\nA!)\n: Cons[A] val\n\n\n\n\nParameters\n\n\n\n\na: val-\nA!\n\n\n\n\nReturns\n\n\n\n\nCons\n[A] val\n\n\n\n\n\n\nconcat\n\n\nBuilds a new list that is the concatenation of this list and the provided\nlist.\n\n\nfun val concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nmap[B: B]\n\n\nBuilds a new list by applying a function to every member of the list.\n\n\nfun val map[B: B](\n  f: {(val-\nA): val-\nB}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): val-\nB}[A, B] box\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\nflat_map[B: B]\n\n\nBuilds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.\n\n\nfun val flat_map[B: B](\n  f: {(val-\nA): List[B]}[A, B] box)\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): List[B]}[A, B] box\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\nfor_each\n\n\nApplies the supplied function to every element of the list in order.\n\n\nfun val for_each(\n  f: {(val-\nA)}[A] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA)}[A] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfilter\n\n\nBuilds a new list with those elements that satisfy a provided predicate.\n\n\nfun val filter(\n  f: {(val-\nA): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nfold[B: B]\n\n\nFolds the elements of the list using the supplied function.\n\n\nfun val fold[B: B](\n  f: {(B, val-\nA): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nf: {(B, val-\nA): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\nevery\n\n\nReturns true if every element satisfies the provided predicate, false\notherwise.\n\n\nfun val every(\n  f: {(val-\nA): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexists\n\n\nReturns true if at least one element satisfies the provided predicate,\nfalse otherwise.\n\n\nfun val exists(\n  f: {(val-\nA): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\npartition\n\n\nBuilds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.\n\n\nfun val partition(\n  f: {(val-\nA): Bool}[A] box)\n: ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n((\nCons\n[A] val | \nNil\n[A] val) , (\nCons\n[A] val | \nNil\n[A] val))\n\n\n\n\n\n\ndrop\n\n\nBuilds a list by dropping the first n elements.\n\n\nfun val drop(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ndrop_while\n\n\nBuilds a list by dropping elements from the front of the list until one\nfails to satisfy the provided predicate.\n\n\nfun val drop_while(\n  f: {(val-\nA): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ntake\n\n\nBuilds a list of the first n elements.\n\n\nfun val take(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\ntake_while\n\n\nBuilds a list of elements satisfying the provided predicate until one does\nnot.\n\n\nfun val take_while(\n  f: {(val-\nA): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_reverse\n\n\nPrivate helper for reverse, recursively working on elements.\n\n\nfun val _reverse(\n  l: (Cons[A] val | Nil[A] val),\n  acc: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nacc: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\n_concat\n\n\nPrivate helper for concat that recursively builds the new list.\n\n\nfun val _concat(\n  l: (Cons[A] val | Nil[A] val),\n  acc: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nacc: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\n_map[B: B]\n\n\nPrivate helper for map, recursively applying function to elements.\n\n\nfun box _map[B: B](\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val-\nA): val-\nB}[A, B] box,\n  acc: (Cons[B] val | Nil[B] val))\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(val-\nA): val-\nB}[A, B] box\n\n\nacc: (\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\n_flat_map[B: B]\n\n\nPrivate helper for flat_map, recursively working on elements.\n\n\nfun box _flat_map[B: B](\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val-\nA): List[B]}[A, B] box,\n  acc: (Cons[B] val | Nil[B] val))\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(val-\nA): List[B]}[A, B] box\n\n\nacc: (\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\n_rev_prepend[B: B]\n\n\nPrepends l in reverse order onto target\n\n\nfun tag _rev_prepend[B: B](\n  l: (Cons[B] val | Nil[B] val),\n  target: (Cons[B] val | Nil[B] val))\n: (Cons[B] val | Nil[B] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[B] val | \nNil\n[B] val)\n\n\ntarget: (\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[B] val | \nNil\n[B] val)\n\n\n\n\n\n\n_for_each\n\n\nPrivate helper for for_each, recursively working on elements.\n\n\nfun box _for_each(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val-\nA)}[A] box)\n: None val\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(val-\nA)}[A] box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_filter\n\n\nPrivate helper for filter, recursively working on elements, keeping those\nthat match the predicate and discarding those that don't.\n\n\nfun box _filter(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val-\nA): Bool}[A] box,\n  acc: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(val-\nA): Bool}[A] box\n\n\nacc: (\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\nReturns\n\n\n\n\n(\nCons\n[A] val | \nNil\n[A] val)\n\n\n\n\n\n\n_fold[B: B]\n\n\nPrivate helper for fold, recursively working on elements.\n\n\nfun val _fold[B: B](\n  l: (Cons[A] val | Nil[A] val),\n  f: {(B, val-\nA): B^}[A, B] box,\n  acc: B)\n: B\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(B, val-\nA): B^}[A, B] box\n\n\nacc: B\n\n\n\n\nReturns\n\n\n\n\nB\n\n\n\n\n\n\n_every\n\n\nPrivate helper for every, recursively testing predicate on elements,\nreturning false immediately on an element that fails to satisfy the\npredicate.\n\n\nfun box _every(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val-\nA): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_exists\n\n\nPrivate helper for exists, recursively testing predicate on elements,\nreturning true immediately on an element satisfying the predicate.\n\n\nfun box _exists(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val-\nA): Bool}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nl: (\nCons\n[A] val | \nNil\n[A] val)\n\n\nf: {(val-\nA): Bool}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class Cons"
        }, 
        {
            "location": "/collections-persistent-Cons/#cons91a-a93", 
            "text": "A list with a head and a tail, where the tail can be empty.  class val Cons[A: A] is\n  ReadSeq[val- A] box", 
            "title": "Cons[A: A]"
        }, 
        {
            "location": "/collections-persistent-Cons/#implements", 
            "text": "ReadSeq [val- A] box", 
            "title": "Implements"
        }, 
        {
            "location": "/collections-persistent-Cons/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-Cons/#create", 
            "text": "new val create(\n  a: val- A,\n  t: (Cons[A] val | Nil[A] val))\n: Cons[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters", 
            "text": "a: val- A  t: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns", 
            "text": "Cons [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-Cons/#size", 
            "text": "Returns the size of the list.  fun box size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_1", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#apply", 
            "text": "Returns the i-th element of the list. Errors if the index is out of bounds.  fun box apply(\n  i: USize val)\n: val- A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_1", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_2", 
            "text": "val- A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#values", 
            "text": "Returns an iterator over the elements of the list.  fun box values()\n: Iterator[val- A] ref^", 
            "title": "values"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_3", 
            "text": "Iterator [val- A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#is_empty", 
            "text": "Returns a Bool indicating if the list is empty.  fun box is_empty()\n: Bool val", 
            "title": "is_empty"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#is_non_empty", 
            "text": "Returns a Bool indicating if the list is non-empty.  fun box is_non_empty()\n: Bool val", 
            "title": "is_non_empty"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#head", 
            "text": "Returns the head of the list.  fun box head()\n: val- A", 
            "title": "head"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_6", 
            "text": "val- A", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#tail", 
            "text": "Returns the tail of the list.  fun box tail()\n: (Cons[A] val | Nil[A] val)", 
            "title": "tail"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_7", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#reverse", 
            "text": "Builds a new list by reversing the elements in the list.  fun val reverse()\n: (Cons[A] val | Nil[A] val)", 
            "title": "reverse"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_8", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#prepend", 
            "text": "Builds a new list with an element added to the front of this list.  fun val prepend(\n  a: val- A!)\n: Cons[A] val", 
            "title": "prepend"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_2", 
            "text": "a: val- A!", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_9", 
            "text": "Cons [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#concat", 
            "text": "Builds a new list that is the concatenation of this list and the provided\nlist.  fun val concat(\n  l: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)", 
            "title": "concat"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_3", 
            "text": "l: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_10", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#map91b-b93", 
            "text": "Builds a new list by applying a function to every member of the list.  fun val map[B: B](\n  f: {(val- A): val- B}[A, B] box)\n: (Cons[B] val | Nil[B] val)", 
            "title": "map[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_4", 
            "text": "f: {(val- A): val- B}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_11", 
            "text": "( Cons [B] val |  Nil [B] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#flat_map91b-b93", 
            "text": "Builds a new list by applying a function to every member of the list and\nusing the elements of the resulting lists.  fun val flat_map[B: B](\n  f: {(val- A): List[B]}[A, B] box)\n: (Cons[B] val | Nil[B] val)", 
            "title": "flat_map[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_5", 
            "text": "f: {(val- A): List[B]}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_12", 
            "text": "( Cons [B] val |  Nil [B] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#for_each", 
            "text": "Applies the supplied function to every element of the list in order.  fun val for_each(\n  f: {(val- A)}[A] box)\n: None val", 
            "title": "for_each"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_6", 
            "text": "f: {(val- A)}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#filter", 
            "text": "Builds a new list with those elements that satisfy a provided predicate.  fun val filter(\n  f: {(val- A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)", 
            "title": "filter"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_7", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_14", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#fold91b-b93", 
            "text": "Folds the elements of the list using the supplied function.  fun val fold[B: B](\n  f: {(B, val- A): B^}[A, B] box,\n  acc: B)\n: B", 
            "title": "fold[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_8", 
            "text": "f: {(B, val- A): B^}[A, B] box  acc: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_15", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#every", 
            "text": "Returns true if every element satisfies the provided predicate, false\notherwise.  fun val every(\n  f: {(val- A): Bool}[A] box)\n: Bool val", 
            "title": "every"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_9", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_16", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#exists", 
            "text": "Returns true if at least one element satisfies the provided predicate,\nfalse otherwise.  fun val exists(\n  f: {(val- A): Bool}[A] box)\n: Bool val", 
            "title": "exists"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_10", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_17", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#partition", 
            "text": "Builds a pair of lists, the first of which is made up of the elements\nsatisfying the supplied predicate and the second of which is made up of\nthose that do not.  fun val partition(\n  f: {(val- A): Bool}[A] box)\n: ((Cons[A] val | Nil[A] val) , (Cons[A] val | Nil[A] val))", 
            "title": "partition"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_11", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_18", 
            "text": "(( Cons [A] val |  Nil [A] val) , ( Cons [A] val |  Nil [A] val))", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#drop", 
            "text": "Builds a list by dropping the first n elements.  fun val drop(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)", 
            "title": "drop"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_12", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_19", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#drop_while", 
            "text": "Builds a list by dropping elements from the front of the list until one\nfails to satisfy the provided predicate.  fun val drop_while(\n  f: {(val- A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)", 
            "title": "drop_while"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_13", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_20", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#take", 
            "text": "Builds a list of the first n elements.  fun val take(\n  n: USize val)\n: (Cons[A] val | Nil[A] val)", 
            "title": "take"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_14", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_21", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#take_while", 
            "text": "Builds a list of elements satisfying the provided predicate until one does\nnot.  fun val take_while(\n  f: {(val- A): Bool}[A] box)\n: (Cons[A] val | Nil[A] val)", 
            "title": "take_while"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_15", 
            "text": "f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_22", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-persistent-Cons/#_reverse", 
            "text": "Private helper for reverse, recursively working on elements.  fun val _reverse(\n  l: (Cons[A] val | Nil[A] val),\n  acc: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)", 
            "title": "_reverse"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_16", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  acc: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_23", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_concat", 
            "text": "Private helper for concat that recursively builds the new list.  fun val _concat(\n  l: (Cons[A] val | Nil[A] val),\n  acc: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)", 
            "title": "_concat"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_17", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  acc: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_24", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_map91b-b93", 
            "text": "Private helper for map, recursively applying function to elements.  fun box _map[B: B](\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val- A): val- B}[A, B] box,\n  acc: (Cons[B] val | Nil[B] val))\n: (Cons[B] val | Nil[B] val)", 
            "title": "_map[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_18", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(val- A): val- B}[A, B] box  acc: ( Cons [B] val |  Nil [B] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_25", 
            "text": "( Cons [B] val |  Nil [B] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_flat_map91b-b93", 
            "text": "Private helper for flat_map, recursively working on elements.  fun box _flat_map[B: B](\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val- A): List[B]}[A, B] box,\n  acc: (Cons[B] val | Nil[B] val))\n: (Cons[B] val | Nil[B] val)", 
            "title": "_flat_map[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_19", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(val- A): List[B]}[A, B] box  acc: ( Cons [B] val |  Nil [B] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_26", 
            "text": "( Cons [B] val |  Nil [B] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_rev_prepend91b-b93", 
            "text": "Prepends l in reverse order onto target  fun tag _rev_prepend[B: B](\n  l: (Cons[B] val | Nil[B] val),\n  target: (Cons[B] val | Nil[B] val))\n: (Cons[B] val | Nil[B] val)", 
            "title": "_rev_prepend[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_20", 
            "text": "l: ( Cons [B] val |  Nil [B] val)  target: ( Cons [B] val |  Nil [B] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_27", 
            "text": "( Cons [B] val |  Nil [B] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_for_each", 
            "text": "Private helper for for_each, recursively working on elements.  fun box _for_each(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val- A)}[A] box)\n: None val", 
            "title": "_for_each"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_21", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(val- A)}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_28", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_filter", 
            "text": "Private helper for filter, recursively working on elements, keeping those\nthat match the predicate and discarding those that don't.  fun box _filter(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val- A): Bool}[A] box,\n  acc: (Cons[A] val | Nil[A] val))\n: (Cons[A] val | Nil[A] val)", 
            "title": "_filter"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_22", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(val- A): Bool}[A] box  acc: ( Cons [A] val |  Nil [A] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_29", 
            "text": "( Cons [A] val |  Nil [A] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_fold91b-b93", 
            "text": "Private helper for fold, recursively working on elements.  fun val _fold[B: B](\n  l: (Cons[A] val | Nil[A] val),\n  f: {(B, val- A): B^}[A, B] box,\n  acc: B)\n: B", 
            "title": "_fold[B: B]"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_23", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(B, val- A): B^}[A, B] box  acc: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_30", 
            "text": "B", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_every", 
            "text": "Private helper for every, recursively testing predicate on elements,\nreturning false immediately on an element that fails to satisfy the\npredicate.  fun box _every(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val- A): Bool}[A] box)\n: Bool val", 
            "title": "_every"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_24", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_31", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-Cons/#_exists", 
            "text": "Private helper for exists, recursively testing predicate on elements,\nreturning true immediately on an element satisfying the predicate.  fun box _exists(\n  l: (Cons[A] val | Nil[A] val),\n  f: {(val- A): Bool}[A] box)\n: Bool val", 
            "title": "_exists"
        }, 
        {
            "location": "/collections-persistent-Cons/#parameters_25", 
            "text": "l: ( Cons [A] val |  Nil [A] val)  f: {(val- A): Bool}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-Cons/#returns_32", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecLeafNodes/", 
            "text": "_VecLeafNodes[A: \nAny\n #share]\n\n\ntype _VecLeafNodes[A: Any #share] is\n  Array[Array[A] val] val\n\n\n\n\nType Alias For\n\n\n\n\nArray\n[\nArray\n[A] val] val", 
            "title": "type _VecLeafNodes"
        }, 
        {
            "location": "/collections-persistent-_VecLeafNodes/#_vecleafnodes91a-any-share93", 
            "text": "type _VecLeafNodes[A: Any #share] is\n  Array[Array[A] val] val", 
            "title": "_VecLeafNodes[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-_VecLeafNodes/#type-alias-for", 
            "text": "Array [ Array [A] val] val", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-_VecNodes/", 
            "text": "_VecNodes[A: \nAny\n #share]\n\n\ntype _VecNodes[A: Any #share] is\n  Array[_VecNode[A] val] val\n\n\n\n\nType Alias For\n\n\n\n\nArray\n[\n_VecNode\n[A] val] val", 
            "title": "type _VecNodes"
        }, 
        {
            "location": "/collections-persistent-_VecNodes/#_vecnodes91a-any-share93", 
            "text": "type _VecNodes[A: Any #share] is\n  Array[_VecNode[A] val] val", 
            "title": "_VecNodes[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-_VecNodes/#type-alias-for", 
            "text": "Array [ _VecNode [A] val] val", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-_VecEntries/", 
            "text": "_VecEntries[A: \nAny\n #share]\n\n\ntype _VecEntries[A: Any #share] is\n  (Array[_VecNode[A] val] val | Array[Array[A] val] val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nArray\n[\n_VecNode\n[A] val] val | \nArray\n[\nArray\n[A] val] val)", 
            "title": "type _VecEntries"
        }, 
        {
            "location": "/collections-persistent-_VecEntries/#_vecentries91a-any-share93", 
            "text": "type _VecEntries[A: Any #share] is\n  (Array[_VecNode[A] val] val | Array[Array[A] val] val)", 
            "title": "_VecEntries[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-_VecEntries/#type-alias-for", 
            "text": "( Array [ _VecNode [A] val] val |  Array [ Array [A] val] val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-_VecNode/", 
            "text": "_VecNode[A: \nAny\n #share]\n\n\nclass val _VecNode[A: Any #share]\n\n\n\n\nConstructors\n\n\nempty\n\n\nnew val empty(\n  level: U8 val)\n: _VecNode[A] val^\n\n\n\n\nParameters\n\n\n\n\nlevel: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n_VecNode\n[A] val^\n\n\n\n\n\n\ncreate\n\n\nnew val create(\n  entries: (Array[_VecNode[A] val] val | Array[Array[A] val] val),\n  level: U8 val)\n: _VecNode[A] val^\n\n\n\n\nParameters\n\n\n\n\nentries: (\nArray\n[\n_VecNode\n[A] val] val | \nArray\n[\nArray\n[A] val] val)\n\n\nlevel: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n_VecNode\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\nnew_root\n\n\nfun val new_root()\n: _VecNode[A] val\n\n\n\n\nReturns\n\n\n\n\n_VecNode\n[A] val\n\n\n\n\n\n\napply\n\n\nfun box apply(\n  i: USize val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nupdate\n\n\nfun val update(\n  i: USize val,\n  value: A)\n: _VecNode[A] val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\n_VecNode\n[A] val ?\n\n\n\n\n\n\npush\n\n\nfun val push(\n  i: USize val,\n  tail: Array[A] val)\n: _VecNode[A] val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\ntail: \nArray\n[A] val\n\n\n\n\nReturns\n\n\n\n\n_VecNode\n[A] val ?\n\n\n\n\n\n\npop\n\n\nfun val pop(\n  i: USize val)\n: (_VecNode[A] val , Array[A] val) ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n(\n_VecNode\n[A] val , \nArray\n[A] val) ?\n\n\n\n\n\n\nleaf_nodes\n\n\nfun val leaf_nodes(\n  lns: Array[Array[A] val] ref)\n: Array[Array[A] val] ref^\n\n\n\n\nParameters\n\n\n\n\nlns: \nArray\n[\nArray\n[A] val] ref\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nArray\n[A] val] ref^", 
            "title": "class _VecNode"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#_vecnode91a-any-share93", 
            "text": "class val _VecNode[A: Any #share]", 
            "title": "_VecNode[A: Any #share]"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#empty", 
            "text": "new val empty(\n  level: U8 val)\n: _VecNode[A] val^", 
            "title": "empty"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters", 
            "text": "level:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns", 
            "text": "_VecNode [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#create", 
            "text": "new val create(\n  entries: (Array[_VecNode[A] val] val | Array[Array[A] val] val),\n  level: U8 val)\n: _VecNode[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters_1", 
            "text": "entries: ( Array [ _VecNode [A] val] val |  Array [ Array [A] val] val)  level:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_1", 
            "text": "_VecNode [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#new_root", 
            "text": "fun val new_root()\n: _VecNode[A] val", 
            "title": "new_root"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_2", 
            "text": "_VecNode [A] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#apply", 
            "text": "fun box apply(\n  i: USize val)\n: A ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters_2", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_3", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#update", 
            "text": "fun val update(\n  i: USize val,\n  value: A)\n: _VecNode[A] val ?", 
            "title": "update"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters_3", 
            "text": "i:  USize  val  value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_4", 
            "text": "_VecNode [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#push", 
            "text": "fun val push(\n  i: USize val,\n  tail: Array[A] val)\n: _VecNode[A] val ?", 
            "title": "push"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters_4", 
            "text": "i:  USize  val  tail:  Array [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_5", 
            "text": "_VecNode [A] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#pop", 
            "text": "fun val pop(\n  i: USize val)\n: (_VecNode[A] val , Array[A] val) ?", 
            "title": "pop"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters_5", 
            "text": "i:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_6", 
            "text": "( _VecNode [A] val ,  Array [A] val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#leaf_nodes", 
            "text": "fun val leaf_nodes(\n  lns: Array[Array[A] val] ref)\n: Array[Array[A] val] ref^", 
            "title": "leaf_nodes"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#parameters_6", 
            "text": "lns:  Array [ Array [A] val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_VecNode/#returns_7", 
            "text": "Array [ Array [A] val] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapCollisions/", 
            "text": "_MapCollisions[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\ntype _MapCollisions[K: Any #share, V: Any #share, H: HashFunction[K] val] is\n  Array[(K , V)] val\n\n\n\n\nType Alias For\n\n\n\n\nArray\n[(K , V)] val", 
            "title": "type _MapCollisions"
        }, 
        {
            "location": "/collections-persistent-_MapCollisions/#_mapcollisions91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "type _MapCollisions[K: Any #share, V: Any #share, H: HashFunction[K] val] is\n  Array[(K , V)] val", 
            "title": "_MapCollisions[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-_MapCollisions/#type-alias-for", 
            "text": "Array [(K , V)] val", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-_MapLeaf/", 
            "text": "_MapLeaf[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\ntype _MapLeaf[K: Any #share, V: Any #share, H: HashFunction[K] val] is\n  (K , V)\n\n\n\n\nType Alias For\n\n\n\n\n(K , V)", 
            "title": "type _MapLeaf"
        }, 
        {
            "location": "/collections-persistent-_MapLeaf/#_mapleaf91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "type _MapLeaf[K: Any #share, V: Any #share, H: HashFunction[K] val] is\n  (K , V)", 
            "title": "_MapLeaf[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-_MapLeaf/#type-alias-for", 
            "text": "(K , V)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-_MapEntry/", 
            "text": "_MapEntry[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\ntype _MapEntry[K: Any #share, V: Any #share, H: HashFunction[K] val] is\n  (_MapNode[K, V, H] val | Array[(K , V)] val | (K , V))\n\n\n\n\nType Alias For\n\n\n\n\n(\n_MapNode\n[K, V, H] val | \nArray\n[(K , V)] val | (K , V))", 
            "title": "type _MapEntry"
        }, 
        {
            "location": "/collections-persistent-_MapEntry/#_mapentry91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "type _MapEntry[K: Any #share, V: Any #share, H: HashFunction[K] val] is\n  (_MapNode[K, V, H] val | Array[(K , V)] val | (K , V))", 
            "title": "_MapEntry[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-_MapEntry/#type-alias-for", 
            "text": "( _MapNode [K, V, H] val |  Array [(K , V)] val | (K , V))", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/collections-persistent-_MapNode/", 
            "text": "_MapNode[K: \nAny\n #share, V: \nAny\n #share, H: \nHashFunction\n[K] val]\n\n\nclass val _MapNode[K: Any #share, V: Any #share, H: HashFunction[K] val]\n\n\n\n\nConstructors\n\n\nempty\n\n\nnew val empty(\n  l: U8 val)\n: _MapNode[K, V, H] val^\n\n\n\n\nParameters\n\n\n\n\nl: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n_MapNode\n[K, V, H] val^\n\n\n\n\n\n\ncreate\n\n\nnew val create(\n  es: Array[(_MapNode[K, V, H] val | Array[(K , V)] val | (K , V))] iso,\n  nm: U32 val,\n  dm: U32 val,\n  l: U8 val)\n: _MapNode[K, V, H] val^\n\n\n\n\nParameters\n\n\n\n\nes: \nArray\n[(\n_MapNode\n[K, V, H] val | \nArray\n[(K , V)] val | (K , V))] iso\n\n\nnm: \nU32\n val\n\n\ndm: \nU32\n val\n\n\nl: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n_MapNode\n[K, V, H] val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun val apply(\n  hash: U32 val,\n  key: K)\n: V ?\n\n\n\n\nParameters\n\n\n\n\nhash: \nU32\n val\n\n\nkey: K\n\n\n\n\nReturns\n\n\n\n\nV ?\n\n\n\n\n\n\nupdate\n\n\nfun val update(\n  hash: U32 val,\n  leaf: (K , V))\n: (_MapNode[K, V, H] val , Bool val) ?\n\n\n\n\nParameters\n\n\n\n\nhash: \nU32\n val\n\n\nleaf: (K , V)\n\n\n\n\nReturns\n\n\n\n\n(\n_MapNode\n[K, V, H] val , \nBool\n val) ?\n\n\n\n\n\n\nremove\n\n\nfun val remove(\n  hash: U32 val,\n  key: K)\n: _MapNode[K, V, H] val ?\n\n\n\n\nParameters\n\n\n\n\nhash: \nU32\n val\n\n\nkey: K\n\n\n\n\nReturns\n\n\n\n\n_MapNode\n[K, V, H] val ?\n\n\n\n\n\n\nentries\n\n\nfun box entries()\n: Array[(_MapNode[K, V, H] val | Array[(K , V)] val | (K , V))] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[(\n_MapNode\n[K, V, H] val | \nArray\n[(K , V)] val | (K , V))] val\n\n\n\n\n\n\nPrivate Functions\n\n\n_compressed_index\n\n\nfun box _compressed_index(\n  nm: U32 val,\n  dm: U32 val,\n  idx: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\nnm: \nU32\n val\n\n\ndm: \nU32\n val\n\n\nidx: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val", 
            "title": "class _MapNode"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#_mapnode91k-any-share-v-any-share-h-hashfunction91k93-val93", 
            "text": "class val _MapNode[K: Any #share, V: Any #share, H: HashFunction[K] val]", 
            "title": "_MapNode[K: Any #share, V: Any #share, H: HashFunction[K] val]"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#empty", 
            "text": "new val empty(\n  l: U8 val)\n: _MapNode[K, V, H] val^", 
            "title": "empty"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#parameters", 
            "text": "l:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns", 
            "text": "_MapNode [K, V, H] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#create", 
            "text": "new val create(\n  es: Array[(_MapNode[K, V, H] val | Array[(K , V)] val | (K , V))] iso,\n  nm: U32 val,\n  dm: U32 val,\n  l: U8 val)\n: _MapNode[K, V, H] val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#parameters_1", 
            "text": "es:  Array [( _MapNode [K, V, H] val |  Array [(K , V)] val | (K , V))] iso  nm:  U32  val  dm:  U32  val  l:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns_1", 
            "text": "_MapNode [K, V, H] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#apply", 
            "text": "fun val apply(\n  hash: U32 val,\n  key: K)\n: V ?", 
            "title": "apply"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#parameters_2", 
            "text": "hash:  U32  val  key: K", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns_2", 
            "text": "V ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#update", 
            "text": "fun val update(\n  hash: U32 val,\n  leaf: (K , V))\n: (_MapNode[K, V, H] val , Bool val) ?", 
            "title": "update"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#parameters_3", 
            "text": "hash:  U32  val  leaf: (K , V)", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns_3", 
            "text": "( _MapNode [K, V, H] val ,  Bool  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#remove", 
            "text": "fun val remove(\n  hash: U32 val,\n  key: K)\n: _MapNode[K, V, H] val ?", 
            "title": "remove"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#parameters_4", 
            "text": "hash:  U32  val  key: K", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns_4", 
            "text": "_MapNode [K, V, H] val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#entries", 
            "text": "fun box entries()\n: Array[(_MapNode[K, V, H] val | Array[(K , V)] val | (K , V))] val", 
            "title": "entries"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns_5", 
            "text": "Array [( _MapNode [K, V, H] val |  Array [(K , V)] val | (K , V))] val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#_compressed_index", 
            "text": "fun box _compressed_index(\n  nm: U32 val,\n  dm: U32 val,\n  idx: U32 val)\n: U32 val", 
            "title": "_compressed_index"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#parameters_5", 
            "text": "nm:  U32  val  dm:  U32  val  idx:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_MapNode/#returns_6", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/", 
            "text": "_Bits\n\n\nprimitive val _Bits\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Bits val^\n\n\n\n\nReturns\n\n\n\n\n_Bits\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nset_bit\n\n\nfun box set_bit(\n  bm: U32 val,\n  i: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\nbm: \nU32\n val\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nclear_bit\n\n\nfun box clear_bit(\n  bm: U32 val,\n  i: U32 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\nbm: \nU32\n val\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nhas_bit\n\n\nfun box has_bit(\n  bm: U32 val,\n  i: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nbm: \nU32\n val\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmask\n\n\nfun box mask(\n  hash: U32 val,\n  l: U8 val)\n: U32 val\n\n\n\n\nParameters\n\n\n\n\nhash: \nU32\n val\n\n\nl: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _Bits val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Bits\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Bits val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Bits\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Bits"
        }, 
        {
            "location": "/collections-persistent-_Bits/#_bits", 
            "text": "primitive val _Bits", 
            "title": "_Bits"
        }, 
        {
            "location": "/collections-persistent-_Bits/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/collections-persistent-_Bits/#create", 
            "text": "new val create()\n: _Bits val^", 
            "title": "create"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns", 
            "text": "_Bits  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/collections-persistent-_Bits/#set_bit", 
            "text": "fun box set_bit(\n  bm: U32 val,\n  i: U32 val)\n: U32 val", 
            "title": "set_bit"
        }, 
        {
            "location": "/collections-persistent-_Bits/#parameters", 
            "text": "bm:  U32  val  i:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/#clear_bit", 
            "text": "fun box clear_bit(\n  bm: U32 val,\n  i: U32 val)\n: U32 val", 
            "title": "clear_bit"
        }, 
        {
            "location": "/collections-persistent-_Bits/#parameters_1", 
            "text": "bm:  U32  val  i:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns_2", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/#has_bit", 
            "text": "fun box has_bit(\n  bm: U32 val,\n  i: U32 val)\n: Bool val", 
            "title": "has_bit"
        }, 
        {
            "location": "/collections-persistent-_Bits/#parameters_2", 
            "text": "bm:  U32  val  i:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/#mask", 
            "text": "fun box mask(\n  hash: U32 val,\n  l: U8 val)\n: U32 val", 
            "title": "mask"
        }, 
        {
            "location": "/collections-persistent-_Bits/#parameters_3", 
            "text": "hash:  U32  val  l:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns_4", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/#eq", 
            "text": "fun box eq(\n  that: _Bits val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/collections-persistent-_Bits/#parameters_4", 
            "text": "that:  _Bits  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/collections-persistent-_Bits/#ne", 
            "text": "fun box ne(\n  that: _Bits val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/collections-persistent-_Bits/#parameters_5", 
            "text": "that:  _Bits  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/collections-persistent-_Bits/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto--index/", 
            "text": "The crypto package includes a variety of common cryptographic algorithms\nand functions often useful in cryptographic code for their use in information\nsecurity.\n\n\nPublic Types\n\n\n\n\ninterface HashFn\n\n\nprimitive MD4\n\n\nprimitive MD5\n\n\nprimitive RIPEMD160\n\n\nprimitive SHA1\n\n\nprimitive SHA224\n\n\nprimitive SHA256\n\n\nprimitive SHA384\n\n\nprimitive SHA512\n\n\nprimitive ToHexString\n\n\nclass Digest\n\n\nprimitive ConstantTimeCompare\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _EVPMD\n\n\nprimitive _EVPCTX", 
            "title": "Package"
        }, 
        {
            "location": "/crypto--index/#public-types", 
            "text": "interface HashFn  primitive MD4  primitive MD5  primitive RIPEMD160  primitive SHA1  primitive SHA224  primitive SHA256  primitive SHA384  primitive SHA512  primitive ToHexString  class Digest  primitive ConstantTimeCompare", 
            "title": "Public Types"
        }, 
        {
            "location": "/crypto--index/#private-types", 
            "text": "primitive _EVPMD  primitive _EVPCTX", 
            "title": "Private Types"
        }, 
        {
            "location": "/crypto-HashFn/", 
            "text": "HashFn\n\n\nProduces a fixed-length byte array based on the input sequence.\n\n\ninterface ref HashFn\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val", 
            "title": "interface HashFn"
        }, 
        {
            "location": "/crypto-HashFn/#hashfn", 
            "text": "Produces a fixed-length byte array based on the input sequence.  interface ref HashFn", 
            "title": "HashFn"
        }, 
        {
            "location": "/crypto-HashFn/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-HashFn/#apply", 
            "text": "fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-HashFn/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-HashFn/#returns", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD4/", 
            "text": "MD4\n\n\nprimitive val MD4 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: MD4 val^\n\n\n\n\nReturns\n\n\n\n\nMD4\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the MD4 message digest conforming to RFC 1320\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: MD4 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMD4\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: MD4 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMD4\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive MD4"
        }, 
        {
            "location": "/crypto-MD4/#md4", 
            "text": "primitive val MD4 is\n  HashFn ref", 
            "title": "MD4"
        }, 
        {
            "location": "/crypto-MD4/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-MD4/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-MD4/#create", 
            "text": "new val create()\n: MD4 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-MD4/#returns", 
            "text": "MD4  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD4/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-MD4/#apply", 
            "text": "Compute the MD4 message digest conforming to RFC 1320  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-MD4/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-MD4/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD4/#eq", 
            "text": "fun box eq(\n  that: MD4 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-MD4/#parameters_1", 
            "text": "that:  MD4  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-MD4/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD4/#ne", 
            "text": "fun box ne(\n  that: MD4 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-MD4/#parameters_2", 
            "text": "that:  MD4  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-MD4/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD5/", 
            "text": "MD5\n\n\nprimitive val MD5 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: MD5 val^\n\n\n\n\nReturns\n\n\n\n\nMD5\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the MD5 message digest conforming to RFC 1321\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: MD5 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMD5\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: MD5 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMD5\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive MD5"
        }, 
        {
            "location": "/crypto-MD5/#md5", 
            "text": "primitive val MD5 is\n  HashFn ref", 
            "title": "MD5"
        }, 
        {
            "location": "/crypto-MD5/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-MD5/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-MD5/#create", 
            "text": "new val create()\n: MD5 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-MD5/#returns", 
            "text": "MD5  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD5/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-MD5/#apply", 
            "text": "Compute the MD5 message digest conforming to RFC 1321  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-MD5/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-MD5/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD5/#eq", 
            "text": "fun box eq(\n  that: MD5 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-MD5/#parameters_1", 
            "text": "that:  MD5  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-MD5/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-MD5/#ne", 
            "text": "fun box ne(\n  that: MD5 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-MD5/#parameters_2", 
            "text": "that:  MD5  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-MD5/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-RIPEMD160/", 
            "text": "RIPEMD160\n\n\nprimitive val RIPEMD160 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: RIPEMD160 val^\n\n\n\n\nReturns\n\n\n\n\nRIPEMD160\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the RIPEMD160 message digest conforming to ISO/IEC 10118-3\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: RIPEMD160 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nRIPEMD160\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: RIPEMD160 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nRIPEMD160\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive RIPEMD160"
        }, 
        {
            "location": "/crypto-RIPEMD160/#ripemd160", 
            "text": "primitive val RIPEMD160 is\n  HashFn ref", 
            "title": "RIPEMD160"
        }, 
        {
            "location": "/crypto-RIPEMD160/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-RIPEMD160/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-RIPEMD160/#create", 
            "text": "new val create()\n: RIPEMD160 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-RIPEMD160/#returns", 
            "text": "RIPEMD160  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-RIPEMD160/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-RIPEMD160/#apply", 
            "text": "Compute the RIPEMD160 message digest conforming to ISO/IEC 10118-3  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-RIPEMD160/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-RIPEMD160/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-RIPEMD160/#eq", 
            "text": "fun box eq(\n  that: RIPEMD160 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-RIPEMD160/#parameters_1", 
            "text": "that:  RIPEMD160  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-RIPEMD160/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-RIPEMD160/#ne", 
            "text": "fun box ne(\n  that: RIPEMD160 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-RIPEMD160/#parameters_2", 
            "text": "that:  RIPEMD160  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-RIPEMD160/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA1/", 
            "text": "SHA1\n\n\nprimitive val SHA1 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SHA1 val^\n\n\n\n\nReturns\n\n\n\n\nSHA1\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the SHA1 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: SHA1 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA1\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SHA1 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA1\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SHA1"
        }, 
        {
            "location": "/crypto-SHA1/#sha1", 
            "text": "primitive val SHA1 is\n  HashFn ref", 
            "title": "SHA1"
        }, 
        {
            "location": "/crypto-SHA1/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-SHA1/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-SHA1/#create", 
            "text": "new val create()\n: SHA1 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-SHA1/#returns", 
            "text": "SHA1  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA1/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-SHA1/#apply", 
            "text": "Compute the SHA1 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-SHA1/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA1/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA1/#eq", 
            "text": "fun box eq(\n  that: SHA1 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-SHA1/#parameters_1", 
            "text": "that:  SHA1  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA1/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA1/#ne", 
            "text": "fun box ne(\n  that: SHA1 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-SHA1/#parameters_2", 
            "text": "that:  SHA1  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA1/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA224/", 
            "text": "SHA224\n\n\nprimitive val SHA224 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SHA224 val^\n\n\n\n\nReturns\n\n\n\n\nSHA224\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the SHA224 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: SHA224 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA224\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SHA224 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA224\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SHA224"
        }, 
        {
            "location": "/crypto-SHA224/#sha224", 
            "text": "primitive val SHA224 is\n  HashFn ref", 
            "title": "SHA224"
        }, 
        {
            "location": "/crypto-SHA224/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-SHA224/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-SHA224/#create", 
            "text": "new val create()\n: SHA224 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-SHA224/#returns", 
            "text": "SHA224  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA224/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-SHA224/#apply", 
            "text": "Compute the SHA224 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-SHA224/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA224/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA224/#eq", 
            "text": "fun box eq(\n  that: SHA224 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-SHA224/#parameters_1", 
            "text": "that:  SHA224  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA224/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA224/#ne", 
            "text": "fun box ne(\n  that: SHA224 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-SHA224/#parameters_2", 
            "text": "that:  SHA224  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA224/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA256/", 
            "text": "SHA256\n\n\nprimitive val SHA256 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SHA256 val^\n\n\n\n\nReturns\n\n\n\n\nSHA256\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the SHA256 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: SHA256 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA256\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SHA256 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA256\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SHA256"
        }, 
        {
            "location": "/crypto-SHA256/#sha256", 
            "text": "primitive val SHA256 is\n  HashFn ref", 
            "title": "SHA256"
        }, 
        {
            "location": "/crypto-SHA256/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-SHA256/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-SHA256/#create", 
            "text": "new val create()\n: SHA256 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-SHA256/#returns", 
            "text": "SHA256  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA256/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-SHA256/#apply", 
            "text": "Compute the SHA256 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-SHA256/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA256/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA256/#eq", 
            "text": "fun box eq(\n  that: SHA256 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-SHA256/#parameters_1", 
            "text": "that:  SHA256  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA256/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA256/#ne", 
            "text": "fun box ne(\n  that: SHA256 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-SHA256/#parameters_2", 
            "text": "that:  SHA256  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA256/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA384/", 
            "text": "SHA384\n\n\nprimitive val SHA384 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SHA384 val^\n\n\n\n\nReturns\n\n\n\n\nSHA384\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the SHA384 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: SHA384 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA384\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SHA384 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA384\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SHA384"
        }, 
        {
            "location": "/crypto-SHA384/#sha384", 
            "text": "primitive val SHA384 is\n  HashFn ref", 
            "title": "SHA384"
        }, 
        {
            "location": "/crypto-SHA384/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-SHA384/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-SHA384/#create", 
            "text": "new val create()\n: SHA384 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-SHA384/#returns", 
            "text": "SHA384  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA384/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-SHA384/#apply", 
            "text": "Compute the SHA384 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-SHA384/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA384/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA384/#eq", 
            "text": "fun box eq(\n  that: SHA384 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-SHA384/#parameters_1", 
            "text": "that:  SHA384  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA384/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA384/#ne", 
            "text": "fun box ne(\n  that: SHA384 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-SHA384/#parameters_2", 
            "text": "that:  SHA384  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA384/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA512/", 
            "text": "SHA512\n\n\nprimitive val SHA512 is\n  HashFn ref\n\n\n\n\nImplements\n\n\n\n\nHashFn\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SHA512 val^\n\n\n\n\nReturns\n\n\n\n\nSHA512\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCompute the SHA512 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4\n\n\nfun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: SHA512 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA512\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SHA512 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSHA512\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SHA512"
        }, 
        {
            "location": "/crypto-SHA512/#sha512", 
            "text": "primitive val SHA512 is\n  HashFn ref", 
            "title": "SHA512"
        }, 
        {
            "location": "/crypto-SHA512/#implements", 
            "text": "HashFn  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/crypto-SHA512/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-SHA512/#create", 
            "text": "new val create()\n: SHA512 val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-SHA512/#returns", 
            "text": "SHA512  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA512/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-SHA512/#apply", 
            "text": "Compute the SHA512 message digest conforming to US Federal Information\nProcessing Standard FIPS PUB 180-4  fun tag apply(\n  input: (String val | Array[U8 val] val))\n: Array[U8 val] val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-SHA512/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA512/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA512/#eq", 
            "text": "fun box eq(\n  that: SHA512 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-SHA512/#parameters_1", 
            "text": "that:  SHA512  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA512/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-SHA512/#ne", 
            "text": "fun box ne(\n  that: SHA512 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-SHA512/#parameters_2", 
            "text": "that:  SHA512  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-SHA512/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ToHexString/", 
            "text": "ToHexString\n\n\nprimitive val ToHexString\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: ToHexString val^\n\n\n\n\nReturns\n\n\n\n\nToHexString\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReturn the lower-case hexadecimal string representation of the given Array\nof U8.\n\n\nfun tag apply(\n  bs: Array[U8 val] val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nbs: \nArray\n[\nU8\n val] val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: ToHexString val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nToHexString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ToHexString val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nToHexString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ToHexString"
        }, 
        {
            "location": "/crypto-ToHexString/#tohexstring", 
            "text": "primitive val ToHexString", 
            "title": "ToHexString"
        }, 
        {
            "location": "/crypto-ToHexString/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-ToHexString/#create", 
            "text": "new val create()\n: ToHexString val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-ToHexString/#returns", 
            "text": "ToHexString  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ToHexString/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-ToHexString/#apply", 
            "text": "Return the lower-case hexadecimal string representation of the given Array\nof U8.  fun tag apply(\n  bs: Array[U8 val] val)\n: String val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-ToHexString/#parameters", 
            "text": "bs:  Array [ U8  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-ToHexString/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ToHexString/#eq", 
            "text": "fun box eq(\n  that: ToHexString val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-ToHexString/#parameters_1", 
            "text": "that:  ToHexString  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-ToHexString/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ToHexString/#ne", 
            "text": "fun box ne(\n  that: ToHexString val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-ToHexString/#parameters_2", 
            "text": "that:  ToHexString  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-ToHexString/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-_EVPMD/", 
            "text": "_EVPMD\n\n\nprimitive val _EVPMD\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EVPMD val^\n\n\n\n\nReturns\n\n\n\n\n_EVPMD\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EVPMD val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EVPMD\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EVPMD val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EVPMD\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EVPMD"
        }, 
        {
            "location": "/crypto-_EVPMD/#_evpmd", 
            "text": "primitive val _EVPMD", 
            "title": "_EVPMD"
        }, 
        {
            "location": "/crypto-_EVPMD/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-_EVPMD/#create", 
            "text": "new val create()\n: _EVPMD val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-_EVPMD/#returns", 
            "text": "_EVPMD  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-_EVPMD/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-_EVPMD/#eq", 
            "text": "fun box eq(\n  that: _EVPMD val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-_EVPMD/#parameters", 
            "text": "that:  _EVPMD  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-_EVPMD/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-_EVPMD/#ne", 
            "text": "fun box ne(\n  that: _EVPMD val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-_EVPMD/#parameters_1", 
            "text": "that:  _EVPMD  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-_EVPMD/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-_EVPCTX/", 
            "text": "_EVPCTX\n\n\nprimitive val _EVPCTX\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EVPCTX val^\n\n\n\n\nReturns\n\n\n\n\n_EVPCTX\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EVPCTX val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EVPCTX\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EVPCTX val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EVPCTX\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EVPCTX"
        }, 
        {
            "location": "/crypto-_EVPCTX/#_evpctx", 
            "text": "primitive val _EVPCTX", 
            "title": "_EVPCTX"
        }, 
        {
            "location": "/crypto-_EVPCTX/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-_EVPCTX/#create", 
            "text": "new val create()\n: _EVPCTX val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-_EVPCTX/#returns", 
            "text": "_EVPCTX  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-_EVPCTX/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-_EVPCTX/#eq", 
            "text": "fun box eq(\n  that: _EVPCTX val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-_EVPCTX/#parameters", 
            "text": "that:  _EVPCTX  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-_EVPCTX/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-_EVPCTX/#ne", 
            "text": "fun box ne(\n  that: _EVPCTX val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-_EVPCTX/#parameters_1", 
            "text": "that:  _EVPCTX  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-_EVPCTX/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/", 
            "text": "Digest\n\n\nProduces a hash from the chunks of input. Feed the input with append() and\nproduce a final hash from the concatenation of the input with final().\n\n\nclass ref Digest\n\n\n\n\nConstructors\n\n\nmd5\n\n\nnew ref md5()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nripemd160\n\n\nnew ref ripemd160()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nsha1\n\n\nnew ref sha1()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nsha224\n\n\nnew ref sha224()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nsha256\n\n\nnew ref sha256()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nsha384\n\n\nnew ref sha384()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nsha512\n\n\nnew ref sha512()\n: Digest ref^\n\n\n\n\nReturns\n\n\n\n\nDigest\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nappend\n\n\nUpdate the Digest object with input. Throw an error if final() has been\ncalled.\n\n\nfun ref append(\n  input: (String val | Array[U8 val] val))\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ninput: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nfinal\n\n\nReturn the digest of the strings passed to the append() method.\n\n\nfun ref final()\n: Array[U8 val] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\ndigest_size\n\n\nReturn the size of the message digest in bytes.\n\n\nfun box digest_size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "class Digest"
        }, 
        {
            "location": "/crypto-Digest/#digest", 
            "text": "Produces a hash from the chunks of input. Feed the input with append() and\nproduce a final hash from the concatenation of the input with final().  class ref Digest", 
            "title": "Digest"
        }, 
        {
            "location": "/crypto-Digest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-Digest/#md5", 
            "text": "new ref md5()\n: Digest ref^", 
            "title": "md5"
        }, 
        {
            "location": "/crypto-Digest/#returns", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#ripemd160", 
            "text": "new ref ripemd160()\n: Digest ref^", 
            "title": "ripemd160"
        }, 
        {
            "location": "/crypto-Digest/#returns_1", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#sha1", 
            "text": "new ref sha1()\n: Digest ref^", 
            "title": "sha1"
        }, 
        {
            "location": "/crypto-Digest/#returns_2", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#sha224", 
            "text": "new ref sha224()\n: Digest ref^", 
            "title": "sha224"
        }, 
        {
            "location": "/crypto-Digest/#returns_3", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#sha256", 
            "text": "new ref sha256()\n: Digest ref^", 
            "title": "sha256"
        }, 
        {
            "location": "/crypto-Digest/#returns_4", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#sha384", 
            "text": "new ref sha384()\n: Digest ref^", 
            "title": "sha384"
        }, 
        {
            "location": "/crypto-Digest/#returns_5", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#sha512", 
            "text": "new ref sha512()\n: Digest ref^", 
            "title": "sha512"
        }, 
        {
            "location": "/crypto-Digest/#returns_6", 
            "text": "Digest  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-Digest/#append", 
            "text": "Update the Digest object with input. Throw an error if final() has been\ncalled.  fun ref append(\n  input: (String val | Array[U8 val] val))\n: None val ?", 
            "title": "append"
        }, 
        {
            "location": "/crypto-Digest/#parameters", 
            "text": "input: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-Digest/#returns_7", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#final", 
            "text": "Return the digest of the strings passed to the append() method.  fun ref final()\n: Array[U8 val] val", 
            "title": "final"
        }, 
        {
            "location": "/crypto-Digest/#returns_8", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-Digest/#digest_size", 
            "text": "Return the size of the message digest in bytes.  fun box digest_size()\n: USize val", 
            "title": "digest_size"
        }, 
        {
            "location": "/crypto-Digest/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/", 
            "text": "ConstantTimeCompare\n\n\nprimitive val ConstantTimeCompare\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: ConstantTimeCompare val^\n\n\n\n\nReturns\n\n\n\n\nConstantTimeCompare\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReturn true if the two ByteSeqs, xs and ys, have equal contents. The time\ntaken is independent of the contents.\n\n\nfun box apply(\n  xs: (String val | Array[U8 val] val),\n  ys: (String val | Array[U8 val] val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nxs: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nys: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: ConstantTimeCompare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nConstantTimeCompare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ConstantTimeCompare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nConstantTimeCompare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ConstantTimeCompare"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#constanttimecompare", 
            "text": "primitive val ConstantTimeCompare", 
            "title": "ConstantTimeCompare"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#create", 
            "text": "new val create()\n: ConstantTimeCompare val^", 
            "title": "create"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#returns", 
            "text": "ConstantTimeCompare  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#apply", 
            "text": "Return true if the two ByteSeqs, xs and ys, have equal contents. The time\ntaken is independent of the contents.  fun box apply(\n  xs: (String val | Array[U8 val] val),\n  ys: (String val | Array[U8 val] val))\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#parameters", 
            "text": "xs: ( String  val |  Array [ U8  val] val)  ys: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#eq", 
            "text": "fun box eq(\n  that: ConstantTimeCompare val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#parameters_1", 
            "text": "that:  ConstantTimeCompare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#ne", 
            "text": "fun box ne(\n  that: ConstantTimeCompare val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#parameters_2", 
            "text": "that:  ConstantTimeCompare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/crypto-ConstantTimeCompare/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug--index/", 
            "text": "Debug package\n\n\nProvides facilities to create output to either \nSTDOUT\n or \nSTDERR\n that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the \n-d\n flag to \nponyc\n when compiling e.g.:\n\n\nponyc -d\n\n\nExample code\n\n\nactor Main\n  new create(env: Env) =\n\n    Debug.out(\nThis will only bee seen when configured for debug info\n)\n    env.out.print(\nThis will always be seen\n)\n\n\n\n\nPublic Types\n\n\n\n\nprimitive DebugOut\n\n\nprimitive DebugErr\n\n\ntype DebugStream\n\n\nprimitive Debug", 
            "title": "Package"
        }, 
        {
            "location": "/debug--index/#debug-package", 
            "text": "Provides facilities to create output to either  STDOUT  or  STDERR  that will\nonly appear when the platform is debug configured. To create a binary with\ndebug configured, pass the  -d  flag to  ponyc  when compiling e.g.:  ponyc -d", 
            "title": "Debug package"
        }, 
        {
            "location": "/debug--index/#example-code", 
            "text": "actor Main\n  new create(env: Env) = \n    Debug.out( This will only bee seen when configured for debug info )\n    env.out.print( This will always be seen )", 
            "title": "Example code"
        }, 
        {
            "location": "/debug--index/#public-types", 
            "text": "primitive DebugOut  primitive DebugErr  type DebugStream  primitive Debug", 
            "title": "Public Types"
        }, 
        {
            "location": "/debug-DebugOut/", 
            "text": "DebugOut\n\n\nprimitive val DebugOut\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DebugOut val^\n\n\n\n\nReturns\n\n\n\n\nDebugOut\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: DebugOut val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugOut\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DebugOut val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugOut\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DebugOut"
        }, 
        {
            "location": "/debug-DebugOut/#debugout", 
            "text": "primitive val DebugOut", 
            "title": "DebugOut"
        }, 
        {
            "location": "/debug-DebugOut/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/debug-DebugOut/#create", 
            "text": "new val create()\n: DebugOut val^", 
            "title": "create"
        }, 
        {
            "location": "/debug-DebugOut/#returns", 
            "text": "DebugOut  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-DebugOut/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/debug-DebugOut/#eq", 
            "text": "fun box eq(\n  that: DebugOut val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/debug-DebugOut/#parameters", 
            "text": "that:  DebugOut  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-DebugOut/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-DebugOut/#ne", 
            "text": "fun box ne(\n  that: DebugOut val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/debug-DebugOut/#parameters_1", 
            "text": "that:  DebugOut  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-DebugOut/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-DebugErr/", 
            "text": "DebugErr\n\n\nprimitive val DebugErr\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DebugErr val^\n\n\n\n\nReturns\n\n\n\n\nDebugErr\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: DebugErr val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugErr\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DebugErr val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebugErr\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DebugErr"
        }, 
        {
            "location": "/debug-DebugErr/#debugerr", 
            "text": "primitive val DebugErr", 
            "title": "DebugErr"
        }, 
        {
            "location": "/debug-DebugErr/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/debug-DebugErr/#create", 
            "text": "new val create()\n: DebugErr val^", 
            "title": "create"
        }, 
        {
            "location": "/debug-DebugErr/#returns", 
            "text": "DebugErr  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-DebugErr/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/debug-DebugErr/#eq", 
            "text": "fun box eq(\n  that: DebugErr val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/debug-DebugErr/#parameters", 
            "text": "that:  DebugErr  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-DebugErr/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-DebugErr/#ne", 
            "text": "fun box ne(\n  that: DebugErr val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/debug-DebugErr/#parameters_1", 
            "text": "that:  DebugErr  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-DebugErr/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-DebugStream/", 
            "text": "DebugStream\n\n\ntype DebugStream is\n  (DebugOut val | DebugErr val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nDebugOut\n val | \nDebugErr\n val)", 
            "title": "type DebugStream"
        }, 
        {
            "location": "/debug-DebugStream/#debugstream", 
            "text": "type DebugStream is\n  (DebugOut val | DebugErr val)", 
            "title": "DebugStream"
        }, 
        {
            "location": "/debug-DebugStream/#type-alias-for", 
            "text": "( DebugOut  val |  DebugErr  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/debug-Debug/", 
            "text": "Debug\n\n\nThis is a debug only print utility.\n\n\nprimitive val Debug\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Debug val^\n\n\n\n\nReturns\n\n\n\n\nDebug\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nout\n\n\nIf platform is debug configured, print message to standard output\n\n\nfun box out(\n  msg: Stringable box = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nStringable\n box = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nerr\n\n\nIf platform is debug configured, print message to standard error\n\n\nfun box err(\n  msg: Stringable box = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nStringable\n box = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\napply\n\n\napply(msg: Stringable, sep: String, stream: DebugStream): None\n: If platform is debug configured, print a stringable. The default output\nstream is stdout.\n\n\napply(msg: ReadSeq[Stringable], sep: String, stream: DebugStream): None\n: If platform is debug configured, print a sequence of stringables. The\ndefault separator is \", \", and the default output stream is stdout.\n\n\nfun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val = seq,\n  stream: (DebugOut val | DebugErr val) = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: (\nStringable\n box | \nReadSeq\n[\nStringable\n box] box)\n\n\nsep: \nString\n val = seq\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Debug val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebug\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Debug val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDebug\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_print\n\n\nfun box _print(\n  msg: String val,\n  stream: (DebugOut val | DebugErr val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_stream\n\n\nfun box _stream(\n  stream: (DebugOut val | DebugErr val))\n: Pointer[U8 val] ref\n\n\n\n\nParameters\n\n\n\n\nstream: (\nDebugOut\n val | \nDebugErr\n val)\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\nU8\n val] ref", 
            "title": "primitive Debug"
        }, 
        {
            "location": "/debug-Debug/#debug", 
            "text": "This is a debug only print utility.  primitive val Debug", 
            "title": "Debug"
        }, 
        {
            "location": "/debug-Debug/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/debug-Debug/#create", 
            "text": "new val create()\n: Debug val^", 
            "title": "create"
        }, 
        {
            "location": "/debug-Debug/#returns", 
            "text": "Debug  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/debug-Debug/#out", 
            "text": "If platform is debug configured, print message to standard output  fun box out(\n  msg: Stringable box = seq)\n: None val", 
            "title": "out"
        }, 
        {
            "location": "/debug-Debug/#parameters", 
            "text": "msg:  Stringable  box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#err", 
            "text": "If platform is debug configured, print message to standard error  fun box err(\n  msg: Stringable box = seq)\n: None val", 
            "title": "err"
        }, 
        {
            "location": "/debug-Debug/#parameters_1", 
            "text": "msg:  Stringable  box = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#apply", 
            "text": "apply(msg: Stringable, sep: String, stream: DebugStream): None : If platform is debug configured, print a stringable. The default output\nstream is stdout.  apply(msg: ReadSeq[Stringable], sep: String, stream: DebugStream): None : If platform is debug configured, print a sequence of stringables. The\ndefault separator is \", \", and the default output stream is stdout.  fun box apply(\n  msg: (Stringable box | ReadSeq[Stringable box] box),\n  sep: String val = seq,\n  stream: (DebugOut val | DebugErr val) = seq)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/debug-Debug/#parameters_2", 
            "text": "msg: ( Stringable  box |  ReadSeq [ Stringable  box] box)  sep:  String  val = seq  stream: ( DebugOut  val |  DebugErr  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#eq", 
            "text": "fun box eq(\n  that: Debug val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/debug-Debug/#parameters_3", 
            "text": "that:  Debug  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#ne", 
            "text": "fun box ne(\n  that: Debug val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/debug-Debug/#parameters_4", 
            "text": "that:  Debug  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/debug-Debug/#_print", 
            "text": "fun box _print(\n  msg: String val,\n  stream: (DebugOut val | DebugErr val))\n: None val", 
            "title": "_print"
        }, 
        {
            "location": "/debug-Debug/#parameters_5", 
            "text": "msg:  String  val  stream: ( DebugOut  val |  DebugErr  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/debug-Debug/#_stream", 
            "text": "fun box _stream(\n  stream: (DebugOut val | DebugErr val))\n: Pointer[U8 val] ref", 
            "title": "_stream"
        }, 
        {
            "location": "/debug-Debug/#parameters_6", 
            "text": "stream: ( DebugOut  val |  DebugErr  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/debug-Debug/#returns_7", 
            "text": "Pointer [ U8  val] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64--index/", 
            "text": "Base64 package\n\n\nThe Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.\n\n\nTo learn more about Base64, we suggest you check out the\n\nwikipedia entry\n.\n\n\nExample code\n\n\nuse \nencode/base64\n\n\nactor Main\n  new create(env: Env) =\n\n    env.out.print(Base64.encode(\nfoobar\n))\n    try\n      env.out.print(Base64.decode[String iso](\nZm9vYmFy\n)?)\n    end\n\n\n\n\nPublic Types\n\n\n\n\nprimitive Base64", 
            "title": "Package"
        }, 
        {
            "location": "/encode-base64--index/#base64-package", 
            "text": "The Base64 package contains support for doing Base64 binary-to-text encodings.\nWe currently have support 3 encodings: PEM, MIME and URL.  To learn more about Base64, we suggest you check out the wikipedia entry .", 
            "title": "Base64 package"
        }, 
        {
            "location": "/encode-base64--index/#example-code", 
            "text": "use  encode/base64 \n\nactor Main\n  new create(env: Env) = \n    env.out.print(Base64.encode( foobar ))\n    try\n      env.out.print(Base64.decode[String iso]( Zm9vYmFy )?)\n    end", 
            "title": "Example code"
        }, 
        {
            "location": "/encode-base64--index/#public-types", 
            "text": "primitive Base64", 
            "title": "Public Types"
        }, 
        {
            "location": "/encode-base64-Base64/", 
            "text": "Base64\n\n\nprimitive val Base64\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Base64 val^\n\n\n\n\nReturns\n\n\n\n\nBase64\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nencode_pem\n\n\nEncode for PEM (RFC 1421).\n\n\nfun box encode_pem(\n  data: ReadSeq[U8 val] box)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nencode_mime\n\n\nEncode for MIME (RFC 2045).\n\n\nfun box encode_mime(\n  data: ReadSeq[U8 val] box)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nencode_url[optional A: \nSeq\n[\nU8\n val] iso]\n\n\nEncode for URLs (RFC 4648). Padding characters are stripped by default.\n\n\nfun box encode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  pad: Bool val = seq)\n: A^\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\npad: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\nencode[optional A: \nSeq\n[\nU8\n val] iso]\n\n\nConfigurable encoding. The defaults are for RFC 4648.\n\n\nfun box encode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq,\n  linelen: USize val = seq,\n  linesep: String val = seq)\n: A^\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\nat62: \nU8\n val = seq\n\n\nat63: \nU8\n val = seq\n\n\npad: \nU8\n val = seq\n\n\nlinelen: \nUSize\n val = seq\n\n\nlinesep: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nA^\n\n\n\n\n\n\ndecode_url[optional A: \nSeq\n[\nU8\n val] iso]\n\n\nDecode for URLs (RFC 4648).\n\n\nfun box decode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\ndecode[optional A: \nSeq\n[\nU8\n val] iso]\n\n\nConfigurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.\n\n\nfun box decode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nU8\n val] box\n\n\nat62: \nU8\n val = seq\n\n\nat63: \nU8\n val = seq\n\n\npad: \nU8\n val = seq\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Base64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nBase64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Base64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nBase64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_enc_byte\n\n\nEncode a single byte.\n\n\nfun box _enc_byte(\n  i: U8 val,\n  at62: U8 val,\n  at63: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nU8\n val\n\n\nat62: \nU8\n val\n\n\nat63: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?", 
            "title": "primitive Base64"
        }, 
        {
            "location": "/encode-base64-Base64/#base64", 
            "text": "primitive val Base64", 
            "title": "Base64"
        }, 
        {
            "location": "/encode-base64-Base64/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/encode-base64-Base64/#create", 
            "text": "new val create()\n: Base64 val^", 
            "title": "create"
        }, 
        {
            "location": "/encode-base64-Base64/#returns", 
            "text": "Base64  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/encode-base64-Base64/#encode_pem", 
            "text": "Encode for PEM (RFC 1421).  fun box encode_pem(\n  data: ReadSeq[U8 val] box)\n: String iso^", 
            "title": "encode_pem"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters", 
            "text": "data:  ReadSeq [ U8  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#encode_mime", 
            "text": "Encode for MIME (RFC 2045).  fun box encode_mime(\n  data: ReadSeq[U8 val] box)\n: String iso^", 
            "title": "encode_mime"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_1", 
            "text": "data:  ReadSeq [ U8  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_2", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#encode_url91optional-a-seq91u8-val93-iso93", 
            "text": "Encode for URLs (RFC 4648). Padding characters are stripped by default.  fun box encode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  pad: Bool val = seq)\n: A^", 
            "title": "encode_url[optional A: Seq[U8 val] iso]"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_2", 
            "text": "data:  ReadSeq [ U8  val] box  pad:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_3", 
            "text": "A^", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#encode91optional-a-seq91u8-val93-iso93", 
            "text": "Configurable encoding. The defaults are for RFC 4648.  fun box encode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq,\n  linelen: USize val = seq,\n  linesep: String val = seq)\n: A^", 
            "title": "encode[optional A: Seq[U8 val] iso]"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_3", 
            "text": "data:  ReadSeq [ U8  val] box  at62:  U8  val = seq  at63:  U8  val = seq  pad:  U8  val = seq  linelen:  USize  val = seq  linesep:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_4", 
            "text": "A^", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#decode_url91optional-a-seq91u8-val93-iso93", 
            "text": "Decode for URLs (RFC 4648).  fun box decode_url[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box)\n: A^ ?", 
            "title": "decode_url[optional A: Seq[U8 val] iso]"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_4", 
            "text": "data:  ReadSeq [ U8  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_5", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#decode91optional-a-seq91u8-val93-iso93", 
            "text": "Configurable decoding. The defaults are for RFC 4648. Missing padding is\nnot an error. Non-base64 data, other than whitespace (which can appear at\nany time), is an error.  fun box decode[optional A: Seq[U8 val] iso](\n  data: ReadSeq[U8 val] box,\n  at62: U8 val = seq,\n  at63: U8 val = seq,\n  pad: U8 val = seq)\n: A^ ?", 
            "title": "decode[optional A: Seq[U8 val] iso]"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_5", 
            "text": "data:  ReadSeq [ U8  val] box  at62:  U8  val = seq  at63:  U8  val = seq  pad:  U8  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_6", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#eq", 
            "text": "fun box eq(\n  that: Base64 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_6", 
            "text": "that:  Base64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#ne", 
            "text": "fun box ne(\n  that: Base64 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_7", 
            "text": "that:  Base64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/encode-base64-Base64/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/encode-base64-Base64/#_enc_byte", 
            "text": "Encode a single byte.  fun box _enc_byte(\n  i: U8 val,\n  at62: U8 val,\n  at63: U8 val)\n: U8 val ?", 
            "title": "_enc_byte"
        }, 
        {
            "location": "/encode-base64-Base64/#parameters_8", 
            "text": "i:  U8  val  at62:  U8  val  at63:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/encode-base64-Base64/#returns_9", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files--index/", 
            "text": "Files package\n\n\nThe Files package provides classes for working with files and\ndirectories.\n\n\nFiles are identified by \nFilePath\n objects, which represent both the\npath to the file and the capabilites for accessing the file at that\npath. \nFilePath\n objects can be used with the \nCreateFile\n and\n\nOpenFile\n primitives and the \nFile\n class to get a reference to a\nfile that can be used to write to and/or read from the file. It can\nalso be used with the \nDirectory\n object to get a reference to a\ndirectory object that can be used for directory operations.\n\n\nThe \nFileLine\n class allows a file to be accessed one line at a time.\n\n\nThe \nFileStream\n actor provides the ability to asynchronously write to\na file.\n\n\nThe \nPath\n primitive can be used to do path-related operations on\nstrings and characters.\n\n\nExample program\n\n\nThis program opens the files that are given as command line arguments\nand prints their contents.\n\n\nuse \nfiles\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      for file_name in env.args.slice(1).values() do\n        let path = FilePath(env.root as AmbientAuth, file_name)?\n        match OpenFile(path)\n        | let file: File =\n\n          while file.errno() is FileOK do\n            env.out.write(file.read(1024))\n          end\n        else\n          env.err.print(\nError opening file '\n + file_name + \n'\n)\n        end\n      end\n    end\n\n\n\n\nPublic Types\n\n\n\n\nprimitive Path\n\n\nactor FileStream\n\n\ninterface WalkHandler\n\n\nclass FilePath\n\n\nclass FileMode\n\n\nclass FileInfo\n\n\nprimitive FileCreate\n\n\nprimitive FileChmod\n\n\nprimitive FileChown\n\n\nprimitive FileLink\n\n\nprimitive FileLookup\n\n\nprimitive FileMkdir\n\n\nprimitive FileRead\n\n\nprimitive FileRemove\n\n\nprimitive FileRename\n\n\nprimitive FileSeek\n\n\nprimitive FileStat\n\n\nprimitive FileSync\n\n\nprimitive FileTime\n\n\nprimitive FileTruncate\n\n\nprimitive FileWrite\n\n\nprimitive FileExec\n\n\ntype FileCaps\n\n\nprimitive FileOK\n\n\nprimitive FileError\n\n\nprimitive FileEOF\n\n\nprimitive FileBadFileNumber\n\n\nprimitive FileExists\n\n\nprimitive FilePermissionDenied\n\n\ntype FileErrNo\n\n\nprimitive CreateFile\n\n\nprimitive OpenFile\n\n\nclass File\n\n\nclass FileLines\n\n\nclass Directory\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _PathSep\n\n\nprimitive _PathDot\n\n\nprimitive _PathDot2\n\n\nprimitive _PathOther\n\n\ntype _PathState\n\n\nprimitive _EBADF\n\n\nprimitive _EEXIST\n\n\nprimitive _EACCES\n\n\nprimitive _DirectoryHandle\n\n\nprimitive _DirectoryEntry\n\n\nprimitive _FileHelper\n\n\nprimitive _FileDes", 
            "title": "Package"
        }, 
        {
            "location": "/files--index/#files-package", 
            "text": "The Files package provides classes for working with files and\ndirectories.  Files are identified by  FilePath  objects, which represent both the\npath to the file and the capabilites for accessing the file at that\npath.  FilePath  objects can be used with the  CreateFile  and OpenFile  primitives and the  File  class to get a reference to a\nfile that can be used to write to and/or read from the file. It can\nalso be used with the  Directory  object to get a reference to a\ndirectory object that can be used for directory operations.  The  FileLine  class allows a file to be accessed one line at a time.  The  FileStream  actor provides the ability to asynchronously write to\na file.  The  Path  primitive can be used to do path-related operations on\nstrings and characters.", 
            "title": "Files package"
        }, 
        {
            "location": "/files--index/#example-program", 
            "text": "This program opens the files that are given as command line arguments\nand prints their contents.  use  files \n\nactor Main\n  new create(env: Env) = \n    try\n      for file_name in env.args.slice(1).values() do\n        let path = FilePath(env.root as AmbientAuth, file_name)?\n        match OpenFile(path)\n        | let file: File = \n          while file.errno() is FileOK do\n            env.out.write(file.read(1024))\n          end\n        else\n          env.err.print( Error opening file '  + file_name +  ' )\n        end\n      end\n    end", 
            "title": "Example program"
        }, 
        {
            "location": "/files--index/#public-types", 
            "text": "primitive Path  actor FileStream  interface WalkHandler  class FilePath  class FileMode  class FileInfo  primitive FileCreate  primitive FileChmod  primitive FileChown  primitive FileLink  primitive FileLookup  primitive FileMkdir  primitive FileRead  primitive FileRemove  primitive FileRename  primitive FileSeek  primitive FileStat  primitive FileSync  primitive FileTime  primitive FileTruncate  primitive FileWrite  primitive FileExec  type FileCaps  primitive FileOK  primitive FileError  primitive FileEOF  primitive FileBadFileNumber  primitive FileExists  primitive FilePermissionDenied  type FileErrNo  primitive CreateFile  primitive OpenFile  class File  class FileLines  class Directory", 
            "title": "Public Types"
        }, 
        {
            "location": "/files--index/#private-types", 
            "text": "primitive _PathSep  primitive _PathDot  primitive _PathDot2  primitive _PathOther  type _PathState  primitive _EBADF  primitive _EEXIST  primitive _EACCES  primitive _DirectoryHandle  primitive _DirectoryEntry  primitive _FileHelper  primitive _FileDes", 
            "title": "Private Types"
        }, 
        {
            "location": "/files-_PathSep/", 
            "text": "_PathSep\n\n\nprimitive val _PathSep\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _PathSep val^\n\n\n\n\nReturns\n\n\n\n\n_PathSep\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _PathSep val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathSep\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _PathSep val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathSep\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _PathSep"
        }, 
        {
            "location": "/files-_PathSep/#_pathsep", 
            "text": "primitive val _PathSep", 
            "title": "_PathSep"
        }, 
        {
            "location": "/files-_PathSep/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathSep/#create", 
            "text": "new val create()\n: _PathSep val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_PathSep/#returns", 
            "text": "_PathSep  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathSep/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathSep/#eq", 
            "text": "fun box eq(\n  that: _PathSep val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_PathSep/#parameters", 
            "text": "that:  _PathSep  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathSep/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathSep/#ne", 
            "text": "fun box ne(\n  that: _PathSep val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_PathSep/#parameters_1", 
            "text": "that:  _PathSep  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathSep/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathDot/", 
            "text": "_PathDot\n\n\nprimitive val _PathDot\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _PathDot val^\n\n\n\n\nReturns\n\n\n\n\n_PathDot\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _PathDot val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathDot\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _PathDot val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathDot\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _PathDot"
        }, 
        {
            "location": "/files-_PathDot/#_pathdot", 
            "text": "primitive val _PathDot", 
            "title": "_PathDot"
        }, 
        {
            "location": "/files-_PathDot/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathDot/#create", 
            "text": "new val create()\n: _PathDot val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_PathDot/#returns", 
            "text": "_PathDot  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathDot/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathDot/#eq", 
            "text": "fun box eq(\n  that: _PathDot val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_PathDot/#parameters", 
            "text": "that:  _PathDot  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathDot/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathDot/#ne", 
            "text": "fun box ne(\n  that: _PathDot val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_PathDot/#parameters_1", 
            "text": "that:  _PathDot  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathDot/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathDot2/", 
            "text": "_PathDot2\n\n\nprimitive val _PathDot2\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _PathDot2 val^\n\n\n\n\nReturns\n\n\n\n\n_PathDot2\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _PathDot2 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathDot2\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _PathDot2 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathDot2\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _PathDot2"
        }, 
        {
            "location": "/files-_PathDot2/#_pathdot2", 
            "text": "primitive val _PathDot2", 
            "title": "_PathDot2"
        }, 
        {
            "location": "/files-_PathDot2/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathDot2/#create", 
            "text": "new val create()\n: _PathDot2 val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_PathDot2/#returns", 
            "text": "_PathDot2  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathDot2/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathDot2/#eq", 
            "text": "fun box eq(\n  that: _PathDot2 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_PathDot2/#parameters", 
            "text": "that:  _PathDot2  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathDot2/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathDot2/#ne", 
            "text": "fun box ne(\n  that: _PathDot2 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_PathDot2/#parameters_1", 
            "text": "that:  _PathDot2  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathDot2/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathOther/", 
            "text": "_PathOther\n\n\nprimitive val _PathOther\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _PathOther val^\n\n\n\n\nReturns\n\n\n\n\n_PathOther\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _PathOther val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathOther\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _PathOther val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PathOther\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _PathOther"
        }, 
        {
            "location": "/files-_PathOther/#_pathother", 
            "text": "primitive val _PathOther", 
            "title": "_PathOther"
        }, 
        {
            "location": "/files-_PathOther/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_PathOther/#create", 
            "text": "new val create()\n: _PathOther val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_PathOther/#returns", 
            "text": "_PathOther  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathOther/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_PathOther/#eq", 
            "text": "fun box eq(\n  that: _PathOther val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_PathOther/#parameters", 
            "text": "that:  _PathOther  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathOther/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathOther/#ne", 
            "text": "fun box ne(\n  that: _PathOther val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_PathOther/#parameters_1", 
            "text": "that:  _PathOther  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_PathOther/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_PathState/", 
            "text": "_PathState\n\n\ntype _PathState is\n  (_PathSep val | _PathDot val | _PathDot2 val | _PathOther val)\n\n\n\n\nType Alias For\n\n\n\n\n(\n_PathSep\n val | \n_PathDot\n val | \n_PathDot2\n val | \n_PathOther\n val)", 
            "title": "type _PathState"
        }, 
        {
            "location": "/files-_PathState/#_pathstate", 
            "text": "type _PathState is\n  (_PathSep val | _PathDot val | _PathDot2 val | _PathOther val)", 
            "title": "_PathState"
        }, 
        {
            "location": "/files-_PathState/#type-alias-for", 
            "text": "( _PathSep  val |  _PathDot  val |  _PathDot2  val |  _PathOther  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/files-Path/", 
            "text": "Path\n\n\nOperations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.\n\n\nprimitive val Path\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Path val^\n\n\n\n\nReturns\n\n\n\n\nPath\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nis_sep\n\n\nDetermine if a byte is a path separator.\n\n\nfun box is_sep(\n  c: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nc: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsep\n\n\nReturn the path separator as a string.\n\n\nfun tag sep()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nis_abs\n\n\nReturn true if the path is an absolute path.\n\n\nfun box is_abs(\n  path: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\njoin\n\n\nJoin two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.\n\n\nfun box join(\n  path: String val,\n  next_path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\nnext_path: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nclean\n\n\nReplace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.\n\n\nfun box clean(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nnormcase\n\n\nNormalizes the case of path for the runtime platform.\n\n\nfun box normcase(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ncwd\n\n\nReturns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.\n\n\nfun box cwd()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nabs\n\n\nReturns a cleaned, absolute path.\n\n\nfun box abs(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nrel\n\n\nReturns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.\n\n\nfun box rel(\n  to: String val,\n  target: String val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\nto: \nString\n val\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nsplit\n\n\nSplits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().\n\n\nfun box split(\n  path: String val,\n  separator: String val = seq)\n: (String val , String val)\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\nseparator: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val , \nString\n val)\n\n\n\n\n\n\nbase\n\n\nReturn the path after the last separator, or the whole path if there is no\nseparator.\nIf \nwith_ext\n is \nfalse\n, the extension as defined by the \next()\n method\nwill be omitted from the result.\n\n\nfun box base(\n  path: String val,\n  with_ext: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\nwith_ext: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndir\n\n\nReturn a cleaned path before the last separator, or the whole path if there\nis no separator.\n\n\nfun box dir(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\next\n\n\nReturn the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.\n\n\nfun box ext(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nvolume\n\n\nOn Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.\n\n\nfun box volume(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nfrom_slash\n\n\nChanges each / in the path to the OS specific separator.\n\n\nfun box from_slash(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nto_slash\n\n\nChanges each OS specific separator in the path to /.\n\n\nfun box to_slash(\n  path: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ncanonical\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun box canonical(\n  path: String val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nis_list_sep\n\n\nDetermine if a byte is a path list separator.\n\n\nfun box is_list_sep(\n  c: U8 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nc: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlist_sep\n\n\nReturn the path list separator as a string.\n\n\nfun box list_sep()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nsplit_list\n\n\nSeparate a list of paths into an array of cleaned paths.\n\n\nfun box split_list(\n  path: String val)\n: Array[String val] iso^\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\nrandom\n\n\nReturns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.\n\n\nfun box random(\n  len: USize val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Path val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Path val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_drive_letter\n\n\nLook for a drive letter followed by a ':', returning true if we find it.\n\n\nfun box _drive_letter(\n  path: String val,\n  offset: ISize val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_network_share\n\n\nLook for a host, a \\, and a resource. Return the path up to that point if\nwe found one, otherwise an empty String.\n\n\nfun box _network_share(\n  path: String val,\n  offset: ISize val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\noffset: \nISize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "primitive Path"
        }, 
        {
            "location": "/files-Path/#path", 
            "text": "Operations on paths that do not require a capability. The operations can be\nused to manipulate path names, but give no access to the resulting paths.  primitive val Path", 
            "title": "Path"
        }, 
        {
            "location": "/files-Path/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-Path/#create", 
            "text": "new val create()\n: Path val^", 
            "title": "create"
        }, 
        {
            "location": "/files-Path/#returns", 
            "text": "Path  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-Path/#is_sep", 
            "text": "Determine if a byte is a path separator.  fun box is_sep(\n  c: U8 val)\n: Bool val", 
            "title": "is_sep"
        }, 
        {
            "location": "/files-Path/#parameters", 
            "text": "c:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#sep", 
            "text": "Return the path separator as a string.  fun tag sep()\n: String val", 
            "title": "sep"
        }, 
        {
            "location": "/files-Path/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#is_abs", 
            "text": "Return true if the path is an absolute path.  fun box is_abs(\n  path: String val)\n: Bool val", 
            "title": "is_abs"
        }, 
        {
            "location": "/files-Path/#parameters_1", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#join", 
            "text": "Join two paths together. If the next_path is absolute, simply return it.\nThe returned path will be cleaned.  fun box join(\n  path: String val,\n  next_path: String val)\n: String val", 
            "title": "join"
        }, 
        {
            "location": "/files-Path/#parameters_2", 
            "text": "path:  String  val  next_path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_4", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#clean", 
            "text": "Replace multiple separators with a single separator.\nConvert / to the OS separator.\nRemove instances of . from the path.\nRemove instances of .. and the preceding path element from the path.\nThe result will have no trailing slash unless it is a root directory.\nIf the result would be empty, \".\" will be returned instead.  fun box clean(\n  path: String val)\n: String val", 
            "title": "clean"
        }, 
        {
            "location": "/files-Path/#parameters_3", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_5", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#normcase", 
            "text": "Normalizes the case of path for the runtime platform.  fun box normcase(\n  path: String val)\n: String val", 
            "title": "normcase"
        }, 
        {
            "location": "/files-Path/#parameters_4", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_6", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#cwd", 
            "text": "Returns the program's working directory. Setting the working directory is\nnot supported, as it is not concurrency-safe.  fun box cwd()\n: String val", 
            "title": "cwd"
        }, 
        {
            "location": "/files-Path/#returns_7", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#abs", 
            "text": "Returns a cleaned, absolute path.  fun box abs(\n  path: String val)\n: String val", 
            "title": "abs"
        }, 
        {
            "location": "/files-Path/#parameters_5", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_8", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#rel", 
            "text": "Returns a path such that Path.join(to, Path.rel(to, target)) == target.\nRaises an error if this isn't possible.  fun box rel(\n  to: String val,\n  target: String val)\n: String val ?", 
            "title": "rel"
        }, 
        {
            "location": "/files-Path/#parameters_6", 
            "text": "to:  String  val  target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_9", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#split", 
            "text": "Splits the path into a pair, (head, tail) where tail is the last pathname\ncomponent and head is everything leading up to that. The tail part will\nnever contain a slash; if path ends in a slash, tail will be empty. If\nthere is no slash in path, head will be empty. If path is empty, both head\nand tail are empty. The path in head will be cleaned before it is returned.\nIn all cases, join(head, tail) returns a path to the same location as path\n(but the strings may differ). Also see the functions dir() and base().  fun box split(\n  path: String val,\n  separator: String val = seq)\n: (String val , String val)", 
            "title": "split"
        }, 
        {
            "location": "/files-Path/#parameters_7", 
            "text": "path:  String  val  separator:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_10", 
            "text": "( String  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#base", 
            "text": "Return the path after the last separator, or the whole path if there is no\nseparator.\nIf  with_ext  is  false , the extension as defined by the  ext()  method\nwill be omitted from the result.  fun box base(\n  path: String val,\n  with_ext: Bool val = seq)\n: String val", 
            "title": "base"
        }, 
        {
            "location": "/files-Path/#parameters_8", 
            "text": "path:  String  val  with_ext:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_11", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#dir", 
            "text": "Return a cleaned path before the last separator, or the whole path if there\nis no separator.  fun box dir(\n  path: String val)\n: String val", 
            "title": "dir"
        }, 
        {
            "location": "/files-Path/#parameters_9", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_12", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#ext", 
            "text": "Return the file extension, i.e. the part after the last dot as long as that\ndot is after all separators. Return an empty string for no extension.  fun box ext(\n  path: String val)\n: String val", 
            "title": "ext"
        }, 
        {
            "location": "/files-Path/#parameters_10", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_13", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#volume", 
            "text": "On Windows, this returns the drive letter or UNC base at the beginning of\nthe path, if there is one. Otherwise, this returns an empty string.  fun box volume(\n  path: String val)\n: String val", 
            "title": "volume"
        }, 
        {
            "location": "/files-Path/#parameters_11", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_14", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#from_slash", 
            "text": "Changes each / in the path to the OS specific separator.  fun box from_slash(\n  path: String val)\n: String val", 
            "title": "from_slash"
        }, 
        {
            "location": "/files-Path/#parameters_12", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_15", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#to_slash", 
            "text": "Changes each OS specific separator in the path to /.  fun box to_slash(\n  path: String val)\n: String val", 
            "title": "to_slash"
        }, 
        {
            "location": "/files-Path/#parameters_13", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_16", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#canonical", 
            "text": "Return the equivalent canonical absolute path. Raise an error if there\nisn't one.  fun box canonical(\n  path: String val)\n: String val ?", 
            "title": "canonical"
        }, 
        {
            "location": "/files-Path/#parameters_14", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_17", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#is_list_sep", 
            "text": "Determine if a byte is a path list separator.  fun box is_list_sep(\n  c: U8 val)\n: Bool val", 
            "title": "is_list_sep"
        }, 
        {
            "location": "/files-Path/#parameters_15", 
            "text": "c:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_18", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#list_sep", 
            "text": "Return the path list separator as a string.  fun box list_sep()\n: String val", 
            "title": "list_sep"
        }, 
        {
            "location": "/files-Path/#returns_19", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#split_list", 
            "text": "Separate a list of paths into an array of cleaned paths.  fun box split_list(\n  path: String val)\n: Array[String val] iso^", 
            "title": "split_list"
        }, 
        {
            "location": "/files-Path/#parameters_16", 
            "text": "path:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_20", 
            "text": "Array [ String  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#random", 
            "text": "Returns a pseudo-random base, suitable as a temporary file name or\ndirectory name, but not guaranteed to not already exist.  fun box random(\n  len: USize val = seq)\n: String val", 
            "title": "random"
        }, 
        {
            "location": "/files-Path/#parameters_17", 
            "text": "len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_21", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#eq", 
            "text": "fun box eq(\n  that: Path val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-Path/#parameters_18", 
            "text": "that:  Path  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_22", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#ne", 
            "text": "fun box ne(\n  that: Path val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-Path/#parameters_19", 
            "text": "that:  Path  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-Path/#_drive_letter", 
            "text": "Look for a drive letter followed by a ':', returning true if we find it.  fun box _drive_letter(\n  path: String val,\n  offset: ISize val = seq)\n: Bool val", 
            "title": "_drive_letter"
        }, 
        {
            "location": "/files-Path/#parameters_20", 
            "text": "path:  String  val  offset:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_24", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Path/#_network_share", 
            "text": "Look for a host, a \\, and a resource. Return the path up to that point if\nwe found one, otherwise an empty String.  fun box _network_share(\n  path: String val,\n  offset: ISize val = seq)\n: String val", 
            "title": "_network_share"
        }, 
        {
            "location": "/files-Path/#parameters_21", 
            "text": "path:  String  val  offset:  ISize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Path/#returns_25", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileStream/", 
            "text": "FileStream\n\n\nAsynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.\n\n\nactor tag FileStream is\n  OutStream tag\n\n\n\n\nImplements\n\n\n\n\nOutStream\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  file: File iso)\n: FileStream tag^\n\n\n\n\nParameters\n\n\n\n\nfile: \nFile\n iso\n\n\n\n\nReturns\n\n\n\n\nFileStream\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nprint\n\n\nPrint some bytes and insert a newline afterwards.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\n\nPrint some bytes without inserting a newline afterwards.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val", 
            "title": "actor FileStream"
        }, 
        {
            "location": "/files-FileStream/#filestream", 
            "text": "Asynchronous access to a File object. Wraps file operations print, write,\nprintv and writev. The File will be disposed through File._final.  actor tag FileStream is\n  OutStream tag", 
            "title": "FileStream"
        }, 
        {
            "location": "/files-FileStream/#implements", 
            "text": "OutStream  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/files-FileStream/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileStream/#create", 
            "text": "new tag create(\n  file: File iso)\n: FileStream tag^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileStream/#parameters", 
            "text": "file:  File  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileStream/#returns", 
            "text": "FileStream  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileStream/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/files-FileStream/#print", 
            "text": "Print some bytes and insert a newline afterwards.  be print(\n  data: (String val | Array[U8 val] val))", 
            "title": "print"
        }, 
        {
            "location": "/files-FileStream/#parameters_1", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileStream/#write", 
            "text": "Print some bytes without inserting a newline afterwards.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/files-FileStream/#parameters_2", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileStream/#printv", 
            "text": "Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)", 
            "title": "printv"
        }, 
        {
            "location": "/files-FileStream/#parameters_3", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileStream/#writev", 
            "text": "Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)", 
            "title": "writev"
        }, 
        {
            "location": "/files-FileStream/#parameters_4", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-WalkHandler/", 
            "text": "WalkHandler\n\n\nA handler for \nFilePath.walk\n.\n\n\ninterface ref WalkHandler\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  dir_path: FilePath val,\n  dir_entries: Array[String val] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndir_path: \nFilePath\n val\n\n\ndir_entries: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface WalkHandler"
        }, 
        {
            "location": "/files-WalkHandler/#walkhandler", 
            "text": "A handler for  FilePath.walk .  interface ref WalkHandler", 
            "title": "WalkHandler"
        }, 
        {
            "location": "/files-WalkHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-WalkHandler/#apply", 
            "text": "fun ref apply(\n  dir_path: FilePath val,\n  dir_entries: Array[String val] ref)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/files-WalkHandler/#parameters", 
            "text": "dir_path:  FilePath  val  dir_entries:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-WalkHandler/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/", 
            "text": "FilePath\n\n\nA FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.\n\n\nclass val FilePath\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  base: (FilePath val | AmbientAuth val),\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?\n\n\n\n\nParameters\n\n\n\n\nbase: (\nFilePath\n val | \nAmbientAuth\n val)\n\n\npath': \nString\n val\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val = seq\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val^ ?\n\n\n\n\n\n\nmkdtemp\n\n\nnew val mkdtemp(\n  base: (FilePath val | AmbientAuth val),\n  prefix: String val = seq,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?\n\n\n\n\nParameters\n\n\n\n\nbase: (\nFilePath\n val | \nAmbientAuth\n val)\n\n\nprefix: \nString\n val = seq\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val = seq\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val^ ?\n\n\n\n\n\n\n_create\n\n\nnew val _create(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val)\n: FilePath val^\n\n\n\n\nParameters\n\n\n\n\npath': \nString\n val\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet path: \nString\n val\n\n\n\n\n\n\n\n\nlet caps: \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] ref\n\n\n\n\n\n\nPublic Functions\n\n\njoin\n\n\nReturn a new path relative to this one.\n\n\nfun val join(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val ?\n\n\n\n\nParameters\n\n\n\n\npath': \nString\n val\n\n\ncaps': \nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] val = seq\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val ?\n\n\n\n\n\n\nwalk\n\n\nWalks a directory structure starting at this.\n\n\nhandler(dir_path, dir_entries)\n will be called for each directory\nstarting with this one. The handler can control which subdirectories are\nexpanded by removing them from the \ndir_entries\n list.\n\n\nfun val walk(\n  handler: WalkHandler ref,\n  follow_links: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nhandler: \nWalkHandler\n ref\n\n\nfollow_links: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncanonical\n\n\nReturn the equivalent canonical absolute path. Raise an error if there\nisn't one.\n\n\nfun val canonical()\n: FilePath val ?\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val ?\n\n\n\n\n\n\nexists\n\n\nReturns true if the path exists. Returns false for a broken symlink.\n\n\nfun val exists()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nmkdir\n\n\nCreates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.\n\n\nfun val mkdir(\n  must_create: Bool val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nmust_create: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun val remove()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrename\n\n\nRename a file or directory.\n\n\nfun box rename(\n  new_path: FilePath val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nnew_path: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsymlink\n\n\nCreate a symlink to a file or directory.\n\n\nfun box symlink(\n  link_name: FilePath val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nlink_name: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchmod\n\n\nSet the FileMode for a path.\n\n\nfun box chmod(\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\n\nSet the owner and group for a path. Does nothing on Windows.\n\n\nfun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\n\nSet the last access and modification times of a path to now.\n\n\nfun box touch()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\n\nSet the last access and modification times of a path to the given values.\n\n\nfun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class FilePath"
        }, 
        {
            "location": "/files-FilePath/#filepath", 
            "text": "A FilePath represents a capability to access a path. The path will be\nrepresented as an absolute path and a set of capabilities for operations on\nthat path.  class val FilePath", 
            "title": "FilePath"
        }, 
        {
            "location": "/files-FilePath/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FilePath/#create", 
            "text": "new val create(\n  base: (FilePath val | AmbientAuth val),\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?", 
            "title": "create"
        }, 
        {
            "location": "/files-FilePath/#parameters", 
            "text": "base: ( FilePath  val |  AmbientAuth  val)  path':  String  val  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns", 
            "text": "FilePath  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#mkdtemp", 
            "text": "new val mkdtemp(\n  base: (FilePath val | AmbientAuth val),\n  prefix: String val = seq,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val^ ?", 
            "title": "mkdtemp"
        }, 
        {
            "location": "/files-FilePath/#parameters_1", 
            "text": "base: ( FilePath  val |  AmbientAuth  val)  prefix:  String  val = seq  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_1", 
            "text": "FilePath  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#_create", 
            "text": "new val _create(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val)\n: FilePath val^", 
            "title": "_create"
        }, 
        {
            "location": "/files-FilePath/#parameters_2", 
            "text": "path':  String  val  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_2", 
            "text": "FilePath  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#public-fields", 
            "text": "let path:  String  val     let caps:  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-FilePath/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FilePath/#join", 
            "text": "Return a new path relative to this one.  fun val join(\n  path': String val,\n  caps': Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] val = seq)\n: FilePath val ?", 
            "title": "join"
        }, 
        {
            "location": "/files-FilePath/#parameters_3", 
            "text": "path':  String  val  caps':  Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_3", 
            "text": "FilePath  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#walk", 
            "text": "Walks a directory structure starting at this.  handler(dir_path, dir_entries)  will be called for each directory\nstarting with this one. The handler can control which subdirectories are\nexpanded by removing them from the  dir_entries  list.  fun val walk(\n  handler: WalkHandler ref,\n  follow_links: Bool val = seq)\n: None val", 
            "title": "walk"
        }, 
        {
            "location": "/files-FilePath/#parameters_4", 
            "text": "handler:  WalkHandler  ref  follow_links:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#canonical", 
            "text": "Return the equivalent canonical absolute path. Raise an error if there\nisn't one.  fun val canonical()\n: FilePath val ?", 
            "title": "canonical"
        }, 
        {
            "location": "/files-FilePath/#returns_5", 
            "text": "FilePath  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#exists", 
            "text": "Returns true if the path exists. Returns false for a broken symlink.  fun val exists()\n: Bool val", 
            "title": "exists"
        }, 
        {
            "location": "/files-FilePath/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#mkdir", 
            "text": "Creates the directory. Will recursively create each element. Returns true\nif the directory exists when we're done, false if it does not. If we do not\nhave the FileStat permission, this will return false even if the directory\ndoes exist.  fun val mkdir(\n  must_create: Bool val = seq)\n: Bool val", 
            "title": "mkdir"
        }, 
        {
            "location": "/files-FilePath/#parameters_5", 
            "text": "must_create:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#remove", 
            "text": "Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.  fun val remove()\n: Bool val", 
            "title": "remove"
        }, 
        {
            "location": "/files-FilePath/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#rename", 
            "text": "Rename a file or directory.  fun box rename(\n  new_path: FilePath val)\n: Bool val", 
            "title": "rename"
        }, 
        {
            "location": "/files-FilePath/#parameters_6", 
            "text": "new_path:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#symlink", 
            "text": "Create a symlink to a file or directory.  fun box symlink(\n  link_name: FilePath val)\n: Bool val", 
            "title": "symlink"
        }, 
        {
            "location": "/files-FilePath/#parameters_7", 
            "text": "link_name:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#chmod", 
            "text": "Set the FileMode for a path.  fun box chmod(\n  mode: FileMode box)\n: Bool val", 
            "title": "chmod"
        }, 
        {
            "location": "/files-FilePath/#parameters_8", 
            "text": "mode:  FileMode  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#chown", 
            "text": "Set the owner and group for a path. Does nothing on Windows.  fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val", 
            "title": "chown"
        }, 
        {
            "location": "/files-FilePath/#parameters_9", 
            "text": "uid:  U32  val  gid:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#touch", 
            "text": "Set the last access and modification times of a path to now.  fun box touch()\n: Bool val", 
            "title": "touch"
        }, 
        {
            "location": "/files-FilePath/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePath/#set_time", 
            "text": "Set the last access and modification times of a path to the given values.  fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val", 
            "title": "set_time"
        }, 
        {
            "location": "/files-FilePath/#parameters_10", 
            "text": "atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePath/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMode/", 
            "text": "FileMode\n\n\nThis stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.\n\n\nThe default mode is read/write for the owner, read-only for everyone else.\n\n\nclass ref FileMode\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: FileMode iso^\n\n\n\n\nReturns\n\n\n\n\nFileMode\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar setuid: \nBool\n val\n\n\n\n\n\n\n\n\nvar setgid: \nBool\n val\n\n\n\n\n\n\n\n\nvar sticky: \nBool\n val\n\n\n\n\n\n\n\n\nvar owner_read: \nBool\n val\n\n\n\n\n\n\n\n\nvar owner_write: \nBool\n val\n\n\n\n\n\n\n\n\nvar owner_exec: \nBool\n val\n\n\n\n\n\n\n\n\nvar group_read: \nBool\n val\n\n\n\n\n\n\n\n\nvar group_write: \nBool\n val\n\n\n\n\n\n\n\n\nvar group_exec: \nBool\n val\n\n\n\n\n\n\n\n\nvar any_read: \nBool\n val\n\n\n\n\n\n\n\n\nvar any_write: \nBool\n val\n\n\n\n\n\n\n\n\nvar any_exec: \nBool\n val\n\n\n\n\n\n\nPublic Functions\n\n\nexec\n\n\nSet the executable flag for everyone.\n\n\nfun ref exec()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nshared\n\n\nSet the write flag for everyone to the same as owner_write.\n\n\nfun ref shared()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ngroup\n\n\nClear all of the any-user flags.\n\n\nfun ref group()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprivate\n\n\nClear all of the group and any-user flags.\n\n\nfun ref private()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_os\n\n\nGet the OS specific integer for a file mode. On Windows, if any read flag\nis set, the path is made readable, and if any write flag is set, the path\nis made writeable.\n\n\nfun box _os()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val", 
            "title": "class FileMode"
        }, 
        {
            "location": "/files-FileMode/#filemode", 
            "text": "This stores a UNIX-style mode broken out into a Bool for each bit. For other\noperating systems, the mapping will be approximate. For example, on Windows,\nif the file is readable all the read Bools will be set, and if the file is\nwriteable, all the write Bools will be set.  The default mode is read/write for the owner, read-only for everyone else.  class ref FileMode", 
            "title": "FileMode"
        }, 
        {
            "location": "/files-FileMode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileMode/#create", 
            "text": "new iso create()\n: FileMode iso^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileMode/#returns", 
            "text": "FileMode  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMode/#public-fields", 
            "text": "var setuid:  Bool  val     var setgid:  Bool  val     var sticky:  Bool  val     var owner_read:  Bool  val     var owner_write:  Bool  val     var owner_exec:  Bool  val     var group_read:  Bool  val     var group_write:  Bool  val     var group_exec:  Bool  val     var any_read:  Bool  val     var any_write:  Bool  val     var any_exec:  Bool  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-FileMode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileMode/#exec", 
            "text": "Set the executable flag for everyone.  fun ref exec()\n: None val", 
            "title": "exec"
        }, 
        {
            "location": "/files-FileMode/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMode/#shared", 
            "text": "Set the write flag for everyone to the same as owner_write.  fun ref shared()\n: None val", 
            "title": "shared"
        }, 
        {
            "location": "/files-FileMode/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMode/#group", 
            "text": "Clear all of the any-user flags.  fun ref group()\n: None val", 
            "title": "group"
        }, 
        {
            "location": "/files-FileMode/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMode/#private", 
            "text": "Clear all of the group and any-user flags.  fun ref private()\n: None val", 
            "title": "private"
        }, 
        {
            "location": "/files-FileMode/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-FileMode/#_os", 
            "text": "Get the OS specific integer for a file mode. On Windows, if any read flag\nis set, the path is made readable, and if any write flag is set, the path\nis made writeable.  fun box _os()\n: U32 val", 
            "title": "_os"
        }, 
        {
            "location": "/files-FileMode/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileInfo/", 
            "text": "FileInfo\n\n\nThis contains file system metadata for a path. The times are in the same\nformat as Time.now(), i.e. seconds and nanoseconds since the epoch.\n\n\nThe INODE is UNIX specific. It will be zero on Windows.\n\n\nThe UID and GID are UNIX-style user and group IDs. These will be zero on\nWindows. The change_time will actually be the file creation time on Windows.\n\n\nA symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.\n\n\nclass val FileInfo\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: FilePath val)\n: FileInfo val^ ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nFileInfo\n val^ ?\n\n\n\n\n\n\n_descriptor\n\n\nnew val _descriptor(\n  fd: I32 val,\n  path: FilePath val)\n: FileInfo val^ ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nFileInfo\n val^ ?\n\n\n\n\n\n\n_relative\n\n\nnew val _relative(\n  fd: I32 val,\n  path: FilePath val,\n  from: String val)\n: FileInfo val^ ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nFileInfo\n val^ ?\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet filepath: \nFilePath\n val\n\n\n\n\n\n\n\n\nlet mode: \nFileMode\n val\n\n\n\n\n\n\n\n\nlet hard_links: \nU32\n val\n\n\n\n\n\n\n\n\nlet device: \nU64\n val\n\n\n\n\n\n\n\n\nlet inode: \nU64\n val\n\n\n\n\n\n\n\n\nlet uid: \nU32\n val\n\n\n\n\n\n\n\n\nlet gid: \nU32\n val\n\n\n\n\n\n\n\n\nlet size: \nUSize\n val\n\n\n\n\n\n\n\n\nlet access_time: (\nI64\n val , \nI64\n val)\n\n\n\n\n\n\n\n\nlet modified_time: (\nI64\n val , \nI64\n val)\n\n\n\n\n\n\n\n\nlet change_time: (\nI64\n val , \nI64\n val)\n\n\n\n\n\n\n\n\nlet file: \nBool\n val\n\n\n\n\n\n\n\n\nlet directory: \nBool\n val\n\n\n\n\n\n\n\n\nlet pipe: \nBool\n val\n\n\n\n\n\n\n\n\nlet symlink: \nBool\n val\n\n\n\n\n\n\n\n\nlet broken: \nBool\n val", 
            "title": "class FileInfo"
        }, 
        {
            "location": "/files-FileInfo/#fileinfo", 
            "text": "This contains file system metadata for a path. The times are in the same\nformat as Time.now(), i.e. seconds and nanoseconds since the epoch.  The INODE is UNIX specific. It will be zero on Windows.  The UID and GID are UNIX-style user and group IDs. These will be zero on\nWindows. The change_time will actually be the file creation time on Windows.  A symlink will report information about itself, other than the size which\nwill be the size of the target. A broken symlink will report as much as it\ncan and will set the broken flag.  class val FileInfo", 
            "title": "FileInfo"
        }, 
        {
            "location": "/files-FileInfo/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileInfo/#create", 
            "text": "new val create(\n  from: FilePath val)\n: FileInfo val^ ?", 
            "title": "create"
        }, 
        {
            "location": "/files-FileInfo/#parameters", 
            "text": "from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileInfo/#returns", 
            "text": "FileInfo  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileInfo/#_descriptor", 
            "text": "new val _descriptor(\n  fd: I32 val,\n  path: FilePath val)\n: FileInfo val^ ?", 
            "title": "_descriptor"
        }, 
        {
            "location": "/files-FileInfo/#parameters_1", 
            "text": "fd:  I32  val  path:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileInfo/#returns_1", 
            "text": "FileInfo  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileInfo/#_relative", 
            "text": "new val _relative(\n  fd: I32 val,\n  path: FilePath val,\n  from: String val)\n: FileInfo val^ ?", 
            "title": "_relative"
        }, 
        {
            "location": "/files-FileInfo/#parameters_2", 
            "text": "fd:  I32  val  path:  FilePath  val  from:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileInfo/#returns_2", 
            "text": "FileInfo  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileInfo/#public-fields", 
            "text": "let filepath:  FilePath  val     let mode:  FileMode  val     let hard_links:  U32  val     let device:  U64  val     let inode:  U64  val     let uid:  U32  val     let gid:  U32  val     let size:  USize  val     let access_time: ( I64  val ,  I64  val)     let modified_time: ( I64  val ,  I64  val)     let change_time: ( I64  val ,  I64  val)     let file:  Bool  val     let directory:  Bool  val     let pipe:  Bool  val     let symlink:  Bool  val     let broken:  Bool  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-FileCreate/", 
            "text": "FileCreate\n\n\nprimitive val FileCreate\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileCreate val^\n\n\n\n\nReturns\n\n\n\n\nFileCreate\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileCreate val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileCreate\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileCreate val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileCreate\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileCreate"
        }, 
        {
            "location": "/files-FileCreate/#filecreate", 
            "text": "primitive val FileCreate", 
            "title": "FileCreate"
        }, 
        {
            "location": "/files-FileCreate/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileCreate/#create", 
            "text": "new val create()\n: FileCreate val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileCreate/#returns", 
            "text": "FileCreate  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileCreate/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileCreate/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileCreate/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileCreate/#eq", 
            "text": "fun box eq(\n  that: FileCreate val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileCreate/#parameters", 
            "text": "that:  FileCreate  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileCreate/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileCreate/#ne", 
            "text": "fun box ne(\n  that: FileCreate val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileCreate/#parameters_1", 
            "text": "that:  FileCreate  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileCreate/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChmod/", 
            "text": "FileChmod\n\n\nprimitive val FileChmod\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileChmod val^\n\n\n\n\nReturns\n\n\n\n\nFileChmod\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileChmod val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileChmod\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileChmod val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileChmod\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileChmod"
        }, 
        {
            "location": "/files-FileChmod/#filechmod", 
            "text": "primitive val FileChmod", 
            "title": "FileChmod"
        }, 
        {
            "location": "/files-FileChmod/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileChmod/#create", 
            "text": "new val create()\n: FileChmod val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileChmod/#returns", 
            "text": "FileChmod  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChmod/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileChmod/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileChmod/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChmod/#eq", 
            "text": "fun box eq(\n  that: FileChmod val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileChmod/#parameters", 
            "text": "that:  FileChmod  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileChmod/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChmod/#ne", 
            "text": "fun box ne(\n  that: FileChmod val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileChmod/#parameters_1", 
            "text": "that:  FileChmod  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileChmod/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChown/", 
            "text": "FileChown\n\n\nprimitive val FileChown\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileChown val^\n\n\n\n\nReturns\n\n\n\n\nFileChown\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileChown val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileChown\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileChown val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileChown\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileChown"
        }, 
        {
            "location": "/files-FileChown/#filechown", 
            "text": "primitive val FileChown", 
            "title": "FileChown"
        }, 
        {
            "location": "/files-FileChown/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileChown/#create", 
            "text": "new val create()\n: FileChown val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileChown/#returns", 
            "text": "FileChown  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChown/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileChown/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileChown/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChown/#eq", 
            "text": "fun box eq(\n  that: FileChown val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileChown/#parameters", 
            "text": "that:  FileChown  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileChown/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileChown/#ne", 
            "text": "fun box ne(\n  that: FileChown val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileChown/#parameters_1", 
            "text": "that:  FileChown  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileChown/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLink/", 
            "text": "FileLink\n\n\nprimitive val FileLink\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileLink val^\n\n\n\n\nReturns\n\n\n\n\nFileLink\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileLink val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileLink\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileLink val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileLink\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileLink"
        }, 
        {
            "location": "/files-FileLink/#filelink", 
            "text": "primitive val FileLink", 
            "title": "FileLink"
        }, 
        {
            "location": "/files-FileLink/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileLink/#create", 
            "text": "new val create()\n: FileLink val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileLink/#returns", 
            "text": "FileLink  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLink/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileLink/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileLink/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLink/#eq", 
            "text": "fun box eq(\n  that: FileLink val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileLink/#parameters", 
            "text": "that:  FileLink  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileLink/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLink/#ne", 
            "text": "fun box ne(\n  that: FileLink val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileLink/#parameters_1", 
            "text": "that:  FileLink  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileLink/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLookup/", 
            "text": "FileLookup\n\n\nprimitive val FileLookup\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileLookup val^\n\n\n\n\nReturns\n\n\n\n\nFileLookup\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileLookup val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileLookup\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileLookup val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileLookup\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileLookup"
        }, 
        {
            "location": "/files-FileLookup/#filelookup", 
            "text": "primitive val FileLookup", 
            "title": "FileLookup"
        }, 
        {
            "location": "/files-FileLookup/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileLookup/#create", 
            "text": "new val create()\n: FileLookup val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileLookup/#returns", 
            "text": "FileLookup  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLookup/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileLookup/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileLookup/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLookup/#eq", 
            "text": "fun box eq(\n  that: FileLookup val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileLookup/#parameters", 
            "text": "that:  FileLookup  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileLookup/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLookup/#ne", 
            "text": "fun box ne(\n  that: FileLookup val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileLookup/#parameters_1", 
            "text": "that:  FileLookup  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileLookup/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMkdir/", 
            "text": "FileMkdir\n\n\nprimitive val FileMkdir\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileMkdir val^\n\n\n\n\nReturns\n\n\n\n\nFileMkdir\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileMkdir val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileMkdir\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileMkdir val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileMkdir\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileMkdir"
        }, 
        {
            "location": "/files-FileMkdir/#filemkdir", 
            "text": "primitive val FileMkdir", 
            "title": "FileMkdir"
        }, 
        {
            "location": "/files-FileMkdir/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileMkdir/#create", 
            "text": "new val create()\n: FileMkdir val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileMkdir/#returns", 
            "text": "FileMkdir  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMkdir/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileMkdir/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileMkdir/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMkdir/#eq", 
            "text": "fun box eq(\n  that: FileMkdir val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileMkdir/#parameters", 
            "text": "that:  FileMkdir  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileMkdir/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileMkdir/#ne", 
            "text": "fun box ne(\n  that: FileMkdir val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileMkdir/#parameters_1", 
            "text": "that:  FileMkdir  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileMkdir/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRead/", 
            "text": "FileRead\n\n\nprimitive val FileRead\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileRead val^\n\n\n\n\nReturns\n\n\n\n\nFileRead\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileRead val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileRead\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileRead val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileRead\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileRead"
        }, 
        {
            "location": "/files-FileRead/#fileread", 
            "text": "primitive val FileRead", 
            "title": "FileRead"
        }, 
        {
            "location": "/files-FileRead/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileRead/#create", 
            "text": "new val create()\n: FileRead val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileRead/#returns", 
            "text": "FileRead  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRead/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileRead/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileRead/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRead/#eq", 
            "text": "fun box eq(\n  that: FileRead val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileRead/#parameters", 
            "text": "that:  FileRead  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileRead/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRead/#ne", 
            "text": "fun box ne(\n  that: FileRead val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileRead/#parameters_1", 
            "text": "that:  FileRead  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileRead/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRemove/", 
            "text": "FileRemove\n\n\nprimitive val FileRemove\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileRemove val^\n\n\n\n\nReturns\n\n\n\n\nFileRemove\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileRemove val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileRemove\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileRemove val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileRemove\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileRemove"
        }, 
        {
            "location": "/files-FileRemove/#fileremove", 
            "text": "primitive val FileRemove", 
            "title": "FileRemove"
        }, 
        {
            "location": "/files-FileRemove/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileRemove/#create", 
            "text": "new val create()\n: FileRemove val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileRemove/#returns", 
            "text": "FileRemove  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRemove/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileRemove/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileRemove/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRemove/#eq", 
            "text": "fun box eq(\n  that: FileRemove val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileRemove/#parameters", 
            "text": "that:  FileRemove  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileRemove/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRemove/#ne", 
            "text": "fun box ne(\n  that: FileRemove val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileRemove/#parameters_1", 
            "text": "that:  FileRemove  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileRemove/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRename/", 
            "text": "FileRename\n\n\nprimitive val FileRename\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileRename val^\n\n\n\n\nReturns\n\n\n\n\nFileRename\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileRename val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileRename\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileRename val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileRename\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileRename"
        }, 
        {
            "location": "/files-FileRename/#filerename", 
            "text": "primitive val FileRename", 
            "title": "FileRename"
        }, 
        {
            "location": "/files-FileRename/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileRename/#create", 
            "text": "new val create()\n: FileRename val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileRename/#returns", 
            "text": "FileRename  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRename/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileRename/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileRename/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRename/#eq", 
            "text": "fun box eq(\n  that: FileRename val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileRename/#parameters", 
            "text": "that:  FileRename  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileRename/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileRename/#ne", 
            "text": "fun box ne(\n  that: FileRename val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileRename/#parameters_1", 
            "text": "that:  FileRename  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileRename/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSeek/", 
            "text": "FileSeek\n\n\nprimitive val FileSeek\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileSeek val^\n\n\n\n\nReturns\n\n\n\n\nFileSeek\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileSeek val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileSeek\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileSeek val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileSeek\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileSeek"
        }, 
        {
            "location": "/files-FileSeek/#fileseek", 
            "text": "primitive val FileSeek", 
            "title": "FileSeek"
        }, 
        {
            "location": "/files-FileSeek/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileSeek/#create", 
            "text": "new val create()\n: FileSeek val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileSeek/#returns", 
            "text": "FileSeek  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSeek/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileSeek/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileSeek/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSeek/#eq", 
            "text": "fun box eq(\n  that: FileSeek val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileSeek/#parameters", 
            "text": "that:  FileSeek  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileSeek/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSeek/#ne", 
            "text": "fun box ne(\n  that: FileSeek val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileSeek/#parameters_1", 
            "text": "that:  FileSeek  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileSeek/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileStat/", 
            "text": "FileStat\n\n\nprimitive val FileStat\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileStat val^\n\n\n\n\nReturns\n\n\n\n\nFileStat\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileStat val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileStat\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileStat val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileStat\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileStat"
        }, 
        {
            "location": "/files-FileStat/#filestat", 
            "text": "primitive val FileStat", 
            "title": "FileStat"
        }, 
        {
            "location": "/files-FileStat/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileStat/#create", 
            "text": "new val create()\n: FileStat val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileStat/#returns", 
            "text": "FileStat  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileStat/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileStat/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileStat/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileStat/#eq", 
            "text": "fun box eq(\n  that: FileStat val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileStat/#parameters", 
            "text": "that:  FileStat  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileStat/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileStat/#ne", 
            "text": "fun box ne(\n  that: FileStat val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileStat/#parameters_1", 
            "text": "that:  FileStat  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileStat/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSync/", 
            "text": "FileSync\n\n\nprimitive val FileSync\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileSync val^\n\n\n\n\nReturns\n\n\n\n\nFileSync\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileSync val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileSync\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileSync val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileSync\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileSync"
        }, 
        {
            "location": "/files-FileSync/#filesync", 
            "text": "primitive val FileSync", 
            "title": "FileSync"
        }, 
        {
            "location": "/files-FileSync/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileSync/#create", 
            "text": "new val create()\n: FileSync val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileSync/#returns", 
            "text": "FileSync  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSync/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileSync/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileSync/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSync/#eq", 
            "text": "fun box eq(\n  that: FileSync val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileSync/#parameters", 
            "text": "that:  FileSync  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileSync/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileSync/#ne", 
            "text": "fun box ne(\n  that: FileSync val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileSync/#parameters_1", 
            "text": "that:  FileSync  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileSync/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTime/", 
            "text": "FileTime\n\n\nprimitive val FileTime\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileTime val^\n\n\n\n\nReturns\n\n\n\n\nFileTime\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileTime val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileTime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileTime val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileTime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileTime"
        }, 
        {
            "location": "/files-FileTime/#filetime", 
            "text": "primitive val FileTime", 
            "title": "FileTime"
        }, 
        {
            "location": "/files-FileTime/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileTime/#create", 
            "text": "new val create()\n: FileTime val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileTime/#returns", 
            "text": "FileTime  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTime/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileTime/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileTime/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTime/#eq", 
            "text": "fun box eq(\n  that: FileTime val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileTime/#parameters", 
            "text": "that:  FileTime  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileTime/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTime/#ne", 
            "text": "fun box ne(\n  that: FileTime val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileTime/#parameters_1", 
            "text": "that:  FileTime  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileTime/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTruncate/", 
            "text": "FileTruncate\n\n\nprimitive val FileTruncate\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileTruncate val^\n\n\n\n\nReturns\n\n\n\n\nFileTruncate\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileTruncate val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileTruncate\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileTruncate val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileTruncate\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileTruncate"
        }, 
        {
            "location": "/files-FileTruncate/#filetruncate", 
            "text": "primitive val FileTruncate", 
            "title": "FileTruncate"
        }, 
        {
            "location": "/files-FileTruncate/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileTruncate/#create", 
            "text": "new val create()\n: FileTruncate val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileTruncate/#returns", 
            "text": "FileTruncate  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTruncate/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileTruncate/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileTruncate/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTruncate/#eq", 
            "text": "fun box eq(\n  that: FileTruncate val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileTruncate/#parameters", 
            "text": "that:  FileTruncate  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileTruncate/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileTruncate/#ne", 
            "text": "fun box ne(\n  that: FileTruncate val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileTruncate/#parameters_1", 
            "text": "that:  FileTruncate  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileTruncate/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileWrite/", 
            "text": "FileWrite\n\n\nprimitive val FileWrite\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileWrite val^\n\n\n\n\nReturns\n\n\n\n\nFileWrite\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileWrite val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileWrite\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileWrite val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileWrite\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileWrite"
        }, 
        {
            "location": "/files-FileWrite/#filewrite", 
            "text": "primitive val FileWrite", 
            "title": "FileWrite"
        }, 
        {
            "location": "/files-FileWrite/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileWrite/#create", 
            "text": "new val create()\n: FileWrite val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileWrite/#returns", 
            "text": "FileWrite  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileWrite/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileWrite/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileWrite/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileWrite/#eq", 
            "text": "fun box eq(\n  that: FileWrite val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileWrite/#parameters", 
            "text": "that:  FileWrite  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileWrite/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileWrite/#ne", 
            "text": "fun box ne(\n  that: FileWrite val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileWrite/#parameters_1", 
            "text": "that:  FileWrite  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileWrite/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExec/", 
            "text": "FileExec\n\n\nprimitive val FileExec\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileExec val^\n\n\n\n\nReturns\n\n\n\n\nFileExec\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalue\n\n\nfun box value()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: FileExec val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileExec\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileExec val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileExec\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileExec"
        }, 
        {
            "location": "/files-FileExec/#fileexec", 
            "text": "primitive val FileExec", 
            "title": "FileExec"
        }, 
        {
            "location": "/files-FileExec/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileExec/#create", 
            "text": "new val create()\n: FileExec val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileExec/#returns", 
            "text": "FileExec  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExec/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileExec/#value", 
            "text": "fun box value()\n: U32 val", 
            "title": "value"
        }, 
        {
            "location": "/files-FileExec/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExec/#eq", 
            "text": "fun box eq(\n  that: FileExec val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileExec/#parameters", 
            "text": "that:  FileExec  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileExec/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExec/#ne", 
            "text": "fun box ne(\n  that: FileExec val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileExec/#parameters_1", 
            "text": "that:  FileExec  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileExec/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileCaps/", 
            "text": "FileCaps\n\n\ntype FileCaps is\n  Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref\n\n\n\n\nType Alias For\n\n\n\n\nFlags\n[(\nFileCreate\n val | \nFileChmod\n val | \nFileChown\n val | \nFileLink\n val | \nFileLookup\n val | \nFileMkdir\n val | \nFileRead\n val | \nFileRemove\n val | \nFileRename\n val | \nFileSeek\n val | \nFileStat\n val | \nFileSync\n val | \nFileTime\n val | \nFileTruncate\n val | \nFileWrite\n val | \nFileExec\n val), \nU32\n val] ref", 
            "title": "type FileCaps"
        }, 
        {
            "location": "/files-FileCaps/#filecaps", 
            "text": "type FileCaps is\n  Flags[(FileCreate val | FileChmod val | FileChown val | FileLink val | FileLookup val | FileMkdir val | FileRead val | FileRemove val | FileRename val | FileSeek val | FileStat val | FileSync val | FileTime val | FileTruncate val | FileWrite val | FileExec val), U32 val] ref", 
            "title": "FileCaps"
        }, 
        {
            "location": "/files-FileCaps/#type-alias-for", 
            "text": "Flags [( FileCreate  val |  FileChmod  val |  FileChown  val |  FileLink  val |  FileLookup  val |  FileMkdir  val |  FileRead  val |  FileRemove  val |  FileRename  val |  FileSeek  val |  FileStat  val |  FileSync  val |  FileTime  val |  FileTruncate  val |  FileWrite  val |  FileExec  val),  U32  val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/files-FileOK/", 
            "text": "FileOK\n\n\nprimitive val FileOK\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileOK val^\n\n\n\n\nReturns\n\n\n\n\nFileOK\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FileOK val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileOK\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileOK val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileOK\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileOK"
        }, 
        {
            "location": "/files-FileOK/#fileok", 
            "text": "primitive val FileOK", 
            "title": "FileOK"
        }, 
        {
            "location": "/files-FileOK/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileOK/#create", 
            "text": "new val create()\n: FileOK val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileOK/#returns", 
            "text": "FileOK  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileOK/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileOK/#eq", 
            "text": "fun box eq(\n  that: FileOK val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileOK/#parameters", 
            "text": "that:  FileOK  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileOK/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileOK/#ne", 
            "text": "fun box ne(\n  that: FileOK val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileOK/#parameters_1", 
            "text": "that:  FileOK  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileOK/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileError/", 
            "text": "FileError\n\n\nprimitive val FileError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileError val^\n\n\n\n\nReturns\n\n\n\n\nFileError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FileError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileError"
        }, 
        {
            "location": "/files-FileError/#fileerror", 
            "text": "primitive val FileError", 
            "title": "FileError"
        }, 
        {
            "location": "/files-FileError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileError/#create", 
            "text": "new val create()\n: FileError val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileError/#returns", 
            "text": "FileError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileError/#eq", 
            "text": "fun box eq(\n  that: FileError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileError/#parameters", 
            "text": "that:  FileError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileError/#ne", 
            "text": "fun box ne(\n  that: FileError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileError/#parameters_1", 
            "text": "that:  FileError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileEOF/", 
            "text": "FileEOF\n\n\nprimitive val FileEOF\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileEOF val^\n\n\n\n\nReturns\n\n\n\n\nFileEOF\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FileEOF val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileEOF\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileEOF val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileEOF\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileEOF"
        }, 
        {
            "location": "/files-FileEOF/#fileeof", 
            "text": "primitive val FileEOF", 
            "title": "FileEOF"
        }, 
        {
            "location": "/files-FileEOF/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileEOF/#create", 
            "text": "new val create()\n: FileEOF val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileEOF/#returns", 
            "text": "FileEOF  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileEOF/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileEOF/#eq", 
            "text": "fun box eq(\n  that: FileEOF val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileEOF/#parameters", 
            "text": "that:  FileEOF  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileEOF/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileEOF/#ne", 
            "text": "fun box ne(\n  that: FileEOF val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileEOF/#parameters_1", 
            "text": "that:  FileEOF  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileEOF/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileBadFileNumber/", 
            "text": "FileBadFileNumber\n\n\nprimitive val FileBadFileNumber\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileBadFileNumber val^\n\n\n\n\nReturns\n\n\n\n\nFileBadFileNumber\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FileBadFileNumber val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileBadFileNumber\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileBadFileNumber val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileBadFileNumber\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileBadFileNumber"
        }, 
        {
            "location": "/files-FileBadFileNumber/#filebadfilenumber", 
            "text": "primitive val FileBadFileNumber", 
            "title": "FileBadFileNumber"
        }, 
        {
            "location": "/files-FileBadFileNumber/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileBadFileNumber/#create", 
            "text": "new val create()\n: FileBadFileNumber val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileBadFileNumber/#returns", 
            "text": "FileBadFileNumber  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileBadFileNumber/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileBadFileNumber/#eq", 
            "text": "fun box eq(\n  that: FileBadFileNumber val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileBadFileNumber/#parameters", 
            "text": "that:  FileBadFileNumber  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileBadFileNumber/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileBadFileNumber/#ne", 
            "text": "fun box ne(\n  that: FileBadFileNumber val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileBadFileNumber/#parameters_1", 
            "text": "that:  FileBadFileNumber  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileBadFileNumber/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExists/", 
            "text": "FileExists\n\n\nprimitive val FileExists\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FileExists val^\n\n\n\n\nReturns\n\n\n\n\nFileExists\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FileExists val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileExists\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FileExists val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFileExists\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FileExists"
        }, 
        {
            "location": "/files-FileExists/#fileexists", 
            "text": "primitive val FileExists", 
            "title": "FileExists"
        }, 
        {
            "location": "/files-FileExists/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileExists/#create", 
            "text": "new val create()\n: FileExists val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileExists/#returns", 
            "text": "FileExists  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExists/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileExists/#eq", 
            "text": "fun box eq(\n  that: FileExists val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FileExists/#parameters", 
            "text": "that:  FileExists  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileExists/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileExists/#ne", 
            "text": "fun box ne(\n  that: FileExists val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FileExists/#parameters_1", 
            "text": "that:  FileExists  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileExists/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePermissionDenied/", 
            "text": "FilePermissionDenied\n\n\nprimitive val FilePermissionDenied\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FilePermissionDenied val^\n\n\n\n\nReturns\n\n\n\n\nFilePermissionDenied\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FilePermissionDenied val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFilePermissionDenied\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FilePermissionDenied val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFilePermissionDenied\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FilePermissionDenied"
        }, 
        {
            "location": "/files-FilePermissionDenied/#filepermissiondenied", 
            "text": "primitive val FilePermissionDenied", 
            "title": "FilePermissionDenied"
        }, 
        {
            "location": "/files-FilePermissionDenied/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FilePermissionDenied/#create", 
            "text": "new val create()\n: FilePermissionDenied val^", 
            "title": "create"
        }, 
        {
            "location": "/files-FilePermissionDenied/#returns", 
            "text": "FilePermissionDenied  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePermissionDenied/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FilePermissionDenied/#eq", 
            "text": "fun box eq(\n  that: FilePermissionDenied val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-FilePermissionDenied/#parameters", 
            "text": "that:  FilePermissionDenied  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePermissionDenied/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FilePermissionDenied/#ne", 
            "text": "fun box ne(\n  that: FilePermissionDenied val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-FilePermissionDenied/#parameters_1", 
            "text": "that:  FilePermissionDenied  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FilePermissionDenied/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EBADF/", 
            "text": "_EBADF\n\n\nprimitive val _EBADF\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EBADF val^\n\n\n\n\nReturns\n\n\n\n\n_EBADF\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _EBADF val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EBADF\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EBADF val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EBADF\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EBADF"
        }, 
        {
            "location": "/files-_EBADF/#_ebadf", 
            "text": "primitive val _EBADF", 
            "title": "_EBADF"
        }, 
        {
            "location": "/files-_EBADF/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_EBADF/#create", 
            "text": "new val create()\n: _EBADF val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_EBADF/#returns", 
            "text": "_EBADF  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EBADF/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_EBADF/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/files-_EBADF/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EBADF/#eq", 
            "text": "fun box eq(\n  that: _EBADF val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_EBADF/#parameters", 
            "text": "that:  _EBADF  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_EBADF/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EBADF/#ne", 
            "text": "fun box ne(\n  that: _EBADF val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_EBADF/#parameters_1", 
            "text": "that:  _EBADF  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_EBADF/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EEXIST/", 
            "text": "_EEXIST\n\n\nprimitive val _EEXIST\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EEXIST val^\n\n\n\n\nReturns\n\n\n\n\n_EEXIST\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _EEXIST val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EEXIST\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EEXIST val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EEXIST\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EEXIST"
        }, 
        {
            "location": "/files-_EEXIST/#_eexist", 
            "text": "primitive val _EEXIST", 
            "title": "_EEXIST"
        }, 
        {
            "location": "/files-_EEXIST/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_EEXIST/#create", 
            "text": "new val create()\n: _EEXIST val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_EEXIST/#returns", 
            "text": "_EEXIST  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EEXIST/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_EEXIST/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/files-_EEXIST/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EEXIST/#eq", 
            "text": "fun box eq(\n  that: _EEXIST val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_EEXIST/#parameters", 
            "text": "that:  _EEXIST  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_EEXIST/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EEXIST/#ne", 
            "text": "fun box ne(\n  that: _EEXIST val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_EEXIST/#parameters_1", 
            "text": "that:  _EEXIST  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_EEXIST/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EACCES/", 
            "text": "_EACCES\n\n\nprimitive val _EACCES\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EACCES val^\n\n\n\n\nReturns\n\n\n\n\n_EACCES\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _EACCES val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EACCES\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EACCES val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EACCES\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EACCES"
        }, 
        {
            "location": "/files-_EACCES/#_eacces", 
            "text": "primitive val _EACCES", 
            "title": "_EACCES"
        }, 
        {
            "location": "/files-_EACCES/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_EACCES/#create", 
            "text": "new val create()\n: _EACCES val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_EACCES/#returns", 
            "text": "_EACCES  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EACCES/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_EACCES/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/files-_EACCES/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EACCES/#eq", 
            "text": "fun box eq(\n  that: _EACCES val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_EACCES/#parameters", 
            "text": "that:  _EACCES  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_EACCES/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_EACCES/#ne", 
            "text": "fun box ne(\n  that: _EACCES val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_EACCES/#parameters_1", 
            "text": "that:  _EACCES  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_EACCES/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileErrNo/", 
            "text": "FileErrNo\n\n\ntype FileErrNo is\n  (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nFileOK\n val | \nFileError\n val | \nFileEOF\n val | \nFileBadFileNumber\n val | \nFileExists\n val | \nFilePermissionDenied\n val)", 
            "title": "type FileErrNo"
        }, 
        {
            "location": "/files-FileErrNo/#fileerrno", 
            "text": "type FileErrNo is\n  (FileOK val | FileError val | FileEOF val | FileBadFileNumber val | FileExists val | FilePermissionDenied val)", 
            "title": "FileErrNo"
        }, 
        {
            "location": "/files-FileErrNo/#type-alias-for", 
            "text": "( FileOK  val |  FileError  val |  FileEOF  val |  FileBadFileNumber  val |  FileExists  val |  FilePermissionDenied  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/files-CreateFile/", 
            "text": "CreateFile\n\n\nOpen a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.\n\n\nprimitive val CreateFile\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: CreateFile val^\n\n\n\n\nReturns\n\n\n\n\nCreateFile\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)\n\n\n\n\nParameters\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\n(\nFile\n ref | \nFileOK\n val | \nFileError\n val | \n    \nFileEOF\n val | \nFileBadFileNumber\n val | \nFileExists\n val | \n    \nFilePermissionDenied\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: CreateFile val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCreateFile\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: CreateFile val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCreateFile\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive CreateFile"
        }, 
        {
            "location": "/files-CreateFile/#createfile", 
            "text": "Open a File for read/write, creating if it doesn't exist, preserving the\ncontents if it does exist.  primitive val CreateFile", 
            "title": "CreateFile"
        }, 
        {
            "location": "/files-CreateFile/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-CreateFile/#create", 
            "text": "new val create()\n: CreateFile val^", 
            "title": "create"
        }, 
        {
            "location": "/files-CreateFile/#returns", 
            "text": "CreateFile  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-CreateFile/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-CreateFile/#apply", 
            "text": "fun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)", 
            "title": "apply"
        }, 
        {
            "location": "/files-CreateFile/#parameters", 
            "text": "from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-CreateFile/#returns_1", 
            "text": "( File  ref |  FileOK  val |  FileError  val | \n     FileEOF  val |  FileBadFileNumber  val |  FileExists  val | \n     FilePermissionDenied  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/files-CreateFile/#eq", 
            "text": "fun box eq(\n  that: CreateFile val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-CreateFile/#parameters_1", 
            "text": "that:  CreateFile  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-CreateFile/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-CreateFile/#ne", 
            "text": "fun box ne(\n  that: CreateFile val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-CreateFile/#parameters_2", 
            "text": "that:  CreateFile  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-CreateFile/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-OpenFile/", 
            "text": "OpenFile\n\n\nOpen a File for read only.\n\n\nprimitive val OpenFile\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: OpenFile val^\n\n\n\n\nReturns\n\n\n\n\nOpenFile\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)\n\n\n\n\nParameters\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\n(\nFile\n ref | \nFileOK\n val | \nFileError\n val | \n    \nFileEOF\n val | \nFileBadFileNumber\n val | \nFileExists\n val | \n    \nFilePermissionDenied\n val)\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: OpenFile val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOpenFile\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: OpenFile val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOpenFile\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive OpenFile"
        }, 
        {
            "location": "/files-OpenFile/#openfile", 
            "text": "Open a File for read only.  primitive val OpenFile", 
            "title": "OpenFile"
        }, 
        {
            "location": "/files-OpenFile/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-OpenFile/#create", 
            "text": "new val create()\n: OpenFile val^", 
            "title": "create"
        }, 
        {
            "location": "/files-OpenFile/#returns", 
            "text": "OpenFile  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-OpenFile/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-OpenFile/#apply", 
            "text": "fun box apply(\n  from: FilePath val)\n: (File ref | FileOK val | FileError val | \n    FileEOF val | FileBadFileNumber val | FileExists val | \n    FilePermissionDenied val)", 
            "title": "apply"
        }, 
        {
            "location": "/files-OpenFile/#parameters", 
            "text": "from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-OpenFile/#returns_1", 
            "text": "( File  ref |  FileOK  val |  FileError  val | \n     FileEOF  val |  FileBadFileNumber  val |  FileExists  val | \n     FilePermissionDenied  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/files-OpenFile/#eq", 
            "text": "fun box eq(\n  that: OpenFile val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-OpenFile/#parameters_1", 
            "text": "that:  OpenFile  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-OpenFile/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-OpenFile/#ne", 
            "text": "fun box ne(\n  that: OpenFile val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-OpenFile/#parameters_2", 
            "text": "that:  OpenFile  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-OpenFile/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/", 
            "text": "File\n\n\nOperations on a file.\n\n\nclass ref File\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  from: FilePath val)\n: File ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nFile\n ref^\n\n\n\n\n\n\nopen\n\n\nnew ref open(\n  from: FilePath val)\n: File ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nFile\n ref^\n\n\n\n\n\n\n_descriptor\n\n\nnew ref _descriptor(\n  fd: I32 val,\n  from: FilePath val)\n: File ref^ ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nFile\n ref^ ?\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet path: \nFilePath\n val\n\n\n\n\n\n\n\n\nlet writeable: \nBool\n val\n\n\n\n\n\n\nPublic Functions\n\n\nerrno\n\n\nReturns the last error code set for this File\n\n\nfun box errno()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n\n\n\n\nReturns\n\n\n\n\n(\nFileOK\n val | \nFileError\n val | \nFileEOF\n val | \n    \nFileBadFileNumber\n val | \nFileExists\n val | \nFilePermissionDenied\n val)\n\n\n\n\n\n\nclear_errno\n\n\nClears the last error code set for this File.\nClears the error indicator for the stream.\n\n\nfun ref clear_errno()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nvalid\n\n\nReturns true if the file is currently open.\n\n\nfun box valid()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nline\n\n\nReturns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error. If there is a file error,\nthis raises an error.\n\n\nfun ref line()\n: String iso^ ?\n\n\n\n\nReturns\n\n\n\n\nString\n iso^ ?\n\n\n\n\n\n\nread\n\n\nReturns up to len bytes.\n\n\nfun ref read(\n  len: USize val)\n: Array[U8 val] iso^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] iso^\n\n\n\n\n\n\nread_string\n\n\nReturns up to len bytes. The resulting string may have internal null\ncharacters.\n\n\nfun ref read_string(\n  len: USize val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nprint\n\n\nSame as write, buts adds a newline.\n\n\nfun ref print(\n  data: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nfun ref printv(\n  data: ByteSeqIter box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwrite\n\n\nReturns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.\n\n\nfun ref write(\n  data: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nfun ref writev(\n  data: ByteSeqIter box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nqueue\n\n\nQueue data to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data\n\n\nfun ref queue(\n  data: (String box | Array[U8 val] box))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nqueuev\n\n\nQueue an iterable collection of ByteSeqs to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data\n\n\nfun ref queuev(\n  data: ByteSeqIter box)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n box\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nflush\n\n\nFlush any queued data\n\n\nfun ref flush()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nposition\n\n\nReturn the current cursor position in the file.\n\n\nfun ref position()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nsize\n\n\nReturn the total length of the file.\n\n\nfun ref size()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nseek_start\n\n\nSet the cursor position relative to the start of the file.\n\n\nfun ref seek_start(\n  offset: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nseek_end\n\n\nSet the cursor position relative to the end of the file.\n\n\nfun ref seek_end(\n  offset: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nseek\n\n\nMove the cursor position.\n\n\nfun ref seek(\n  offset: ISize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsync\n\n\nSync the file contents to physical storage.\n\n\nfun ref sync()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndatasync\n\n\nSync the file contents to physical storage.\n\n\nfun ref datasync()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_length\n\n\nChange the file size. If it is made larger, the new contents are undefined.\n\n\nfun ref set_length(\n  len: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfo\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun box info()\n: FileInfo val ?\n\n\n\n\nReturns\n\n\n\n\nFileInfo\n val ?\n\n\n\n\n\n\nchmod\n\n\nSet the FileMode for this directory.\n\n\nfun box chmod(\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box touch()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlines\n\n\nReturns an iterator for reading lines from the file.\n\n\nfun ref lines()\n: FileLines ref\n\n\n\n\nReturns\n\n\n\n\nFileLines\n ref\n\n\n\n\n\n\ndispose\n\n\nClose the file. Future operations will do nothing.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_get_error\n\n\nFetch errno from the OS.\n\n\nfun box _get_error()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)\n\n\n\n\nReturns\n\n\n\n\n(\nFileOK\n val | \nFileError\n val | \nFileEOF\n val | \n    \nFileBadFileNumber\n val | \nFileExists\n val | \nFilePermissionDenied\n val)\n\n\n\n\n\n\n_pending_writes\n\n\nWrite pending data.\nReturns false if the file wasn't opened with write permission.\nReturns false and closes the file and discards all pending data\nif not all the bytes were written.\nReturns true if it sent all pending data.\n\n\nfun ref _pending_writes()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_write_to_disk\n\n\nWrite pending data.\nReturns false if the file wasn't opened with write permission.\nReturns raises error if not all the bytes were written.\nReturns true if it sent all pending data.\nReturns num_processed and new pending_total also.\n\n\nfun box _write_to_disk()\n: (Bool val , USize val , USize val) ?\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val , \nUSize\n val , \nUSize\n val) ?\n\n\n\n\n\n\n_seek\n\n\nMove the cursor position.\n\n\nfun ref _seek(\n  offset: I64 val,\n  base: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noffset: \nI64\n val\n\n\nbase: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_final\n\n\nClose the file.\n\n\nfun box _final()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class File"
        }, 
        {
            "location": "/files-File/#file", 
            "text": "Operations on a file.  class ref File", 
            "title": "File"
        }, 
        {
            "location": "/files-File/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-File/#create", 
            "text": "new ref create(\n  from: FilePath val)\n: File ref^", 
            "title": "create"
        }, 
        {
            "location": "/files-File/#parameters", 
            "text": "from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns", 
            "text": "File  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#open", 
            "text": "new ref open(\n  from: FilePath val)\n: File ref^", 
            "title": "open"
        }, 
        {
            "location": "/files-File/#parameters_1", 
            "text": "from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_1", 
            "text": "File  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#_descriptor", 
            "text": "new ref _descriptor(\n  fd: I32 val,\n  from: FilePath val)\n: File ref^ ?", 
            "title": "_descriptor"
        }, 
        {
            "location": "/files-File/#parameters_2", 
            "text": "fd:  I32  val  from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_2", 
            "text": "File  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#public-fields", 
            "text": "let path:  FilePath  val     let writeable:  Bool  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-File/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-File/#errno", 
            "text": "Returns the last error code set for this File  fun box errno()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)", 
            "title": "errno"
        }, 
        {
            "location": "/files-File/#returns_3", 
            "text": "( FileOK  val |  FileError  val |  FileEOF  val | \n     FileBadFileNumber  val |  FileExists  val |  FilePermissionDenied  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#clear_errno", 
            "text": "Clears the last error code set for this File.\nClears the error indicator for the stream.  fun ref clear_errno()\n: None val", 
            "title": "clear_errno"
        }, 
        {
            "location": "/files-File/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#valid", 
            "text": "Returns true if the file is currently open.  fun box valid()\n: Bool val", 
            "title": "valid"
        }, 
        {
            "location": "/files-File/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#line", 
            "text": "Returns a line as a String. The newline is not included in the string. If\nthere is no more data, this raises an error. If there is a file error,\nthis raises an error.  fun ref line()\n: String iso^ ?", 
            "title": "line"
        }, 
        {
            "location": "/files-File/#returns_6", 
            "text": "String  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#read", 
            "text": "Returns up to len bytes.  fun ref read(\n  len: USize val)\n: Array[U8 val] iso^", 
            "title": "read"
        }, 
        {
            "location": "/files-File/#parameters_3", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_7", 
            "text": "Array [ U8  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#read_string", 
            "text": "Returns up to len bytes. The resulting string may have internal null\ncharacters.  fun ref read_string(\n  len: USize val)\n: String iso^", 
            "title": "read_string"
        }, 
        {
            "location": "/files-File/#parameters_4", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_8", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#print", 
            "text": "Same as write, buts adds a newline.  fun ref print(\n  data: (String box | Array[U8 val] box))\n: Bool val", 
            "title": "print"
        }, 
        {
            "location": "/files-File/#parameters_5", 
            "text": "data: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#printv", 
            "text": "Print an iterable collection of ByteSeqs.  fun ref printv(\n  data: ByteSeqIter box)\n: Bool val", 
            "title": "printv"
        }, 
        {
            "location": "/files-File/#parameters_6", 
            "text": "data:  ByteSeqIter  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#write", 
            "text": "Returns false if the file wasn't opened with write permission.\nReturns false and closes the file if not all the bytes were written.  fun ref write(\n  data: (String box | Array[U8 val] box))\n: Bool val", 
            "title": "write"
        }, 
        {
            "location": "/files-File/#parameters_7", 
            "text": "data: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#writev", 
            "text": "Write an iterable collection of ByteSeqs.  fun ref writev(\n  data: ByteSeqIter box)\n: Bool val", 
            "title": "writev"
        }, 
        {
            "location": "/files-File/#parameters_8", 
            "text": "data:  ByteSeqIter  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#queue", 
            "text": "Queue data to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data  fun ref queue(\n  data: (String box | Array[U8 val] box))\n: None val", 
            "title": "queue"
        }, 
        {
            "location": "/files-File/#parameters_9", 
            "text": "data: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#queuev", 
            "text": "Queue an iterable collection of ByteSeqs to be written\nNOTE: Queue'd data will always be written before normal print/write\nrequested data  fun ref queuev(\n  data: ByteSeqIter box)\n: None val", 
            "title": "queuev"
        }, 
        {
            "location": "/files-File/#parameters_10", 
            "text": "data:  ByteSeqIter  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#flush", 
            "text": "Flush any queued data  fun ref flush()\n: Bool val", 
            "title": "flush"
        }, 
        {
            "location": "/files-File/#returns_15", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#position", 
            "text": "Return the current cursor position in the file.  fun ref position()\n: USize val", 
            "title": "position"
        }, 
        {
            "location": "/files-File/#returns_16", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#size", 
            "text": "Return the total length of the file.  fun ref size()\n: USize val", 
            "title": "size"
        }, 
        {
            "location": "/files-File/#returns_17", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#seek_start", 
            "text": "Set the cursor position relative to the start of the file.  fun ref seek_start(\n  offset: USize val)\n: None val", 
            "title": "seek_start"
        }, 
        {
            "location": "/files-File/#parameters_11", 
            "text": "offset:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#seek_end", 
            "text": "Set the cursor position relative to the end of the file.  fun ref seek_end(\n  offset: USize val)\n: None val", 
            "title": "seek_end"
        }, 
        {
            "location": "/files-File/#parameters_12", 
            "text": "offset:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#seek", 
            "text": "Move the cursor position.  fun ref seek(\n  offset: ISize val)\n: None val", 
            "title": "seek"
        }, 
        {
            "location": "/files-File/#parameters_13", 
            "text": "offset:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#sync", 
            "text": "Sync the file contents to physical storage.  fun ref sync()\n: None val", 
            "title": "sync"
        }, 
        {
            "location": "/files-File/#returns_21", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#datasync", 
            "text": "Sync the file contents to physical storage.  fun ref datasync()\n: None val", 
            "title": "datasync"
        }, 
        {
            "location": "/files-File/#returns_22", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#set_length", 
            "text": "Change the file size. If it is made larger, the new contents are undefined.  fun ref set_length(\n  len: USize val)\n: Bool val", 
            "title": "set_length"
        }, 
        {
            "location": "/files-File/#parameters_14", 
            "text": "len:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_23", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#info", 
            "text": "Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.  fun box info()\n: FileInfo val ?", 
            "title": "info"
        }, 
        {
            "location": "/files-File/#returns_24", 
            "text": "FileInfo  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#chmod", 
            "text": "Set the FileMode for this directory.  fun box chmod(\n  mode: FileMode box)\n: Bool val", 
            "title": "chmod"
        }, 
        {
            "location": "/files-File/#parameters_15", 
            "text": "mode:  FileMode  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_25", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#chown", 
            "text": "Set the owner and group for this directory. Does nothing on Windows.  fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val", 
            "title": "chown"
        }, 
        {
            "location": "/files-File/#parameters_16", 
            "text": "uid:  U32  val  gid:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_26", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#touch", 
            "text": "Set the last access and modification times of the directory to now.  fun box touch()\n: Bool val", 
            "title": "touch"
        }, 
        {
            "location": "/files-File/#returns_27", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#set_time", 
            "text": "Set the last access and modification times of the directory to the given\nvalues.  fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val", 
            "title": "set_time"
        }, 
        {
            "location": "/files-File/#parameters_17", 
            "text": "atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_28", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#lines", 
            "text": "Returns an iterator for reading lines from the file.  fun ref lines()\n: FileLines ref", 
            "title": "lines"
        }, 
        {
            "location": "/files-File/#returns_29", 
            "text": "FileLines  ref", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#dispose", 
            "text": "Close the file. Future operations will do nothing.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/files-File/#returns_30", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-File/#_get_error", 
            "text": "Fetch errno from the OS.  fun box _get_error()\n: (FileOK val | FileError val | FileEOF val | \n    FileBadFileNumber val | FileExists val | FilePermissionDenied val)", 
            "title": "_get_error"
        }, 
        {
            "location": "/files-File/#returns_31", 
            "text": "( FileOK  val |  FileError  val |  FileEOF  val | \n     FileBadFileNumber  val |  FileExists  val |  FilePermissionDenied  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#_pending_writes", 
            "text": "Write pending data.\nReturns false if the file wasn't opened with write permission.\nReturns false and closes the file and discards all pending data\nif not all the bytes were written.\nReturns true if it sent all pending data.  fun ref _pending_writes()\n: Bool val", 
            "title": "_pending_writes"
        }, 
        {
            "location": "/files-File/#returns_32", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#_write_to_disk", 
            "text": "Write pending data.\nReturns false if the file wasn't opened with write permission.\nReturns raises error if not all the bytes were written.\nReturns true if it sent all pending data.\nReturns num_processed and new pending_total also.  fun box _write_to_disk()\n: (Bool val , USize val , USize val) ?", 
            "title": "_write_to_disk"
        }, 
        {
            "location": "/files-File/#returns_33", 
            "text": "( Bool  val ,  USize  val ,  USize  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#_seek", 
            "text": "Move the cursor position.  fun ref _seek(\n  offset: I64 val,\n  base: I32 val)\n: None val", 
            "title": "_seek"
        }, 
        {
            "location": "/files-File/#parameters_18", 
            "text": "offset:  I64  val  base:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-File/#returns_34", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-File/#_final", 
            "text": "Close the file.  fun box _final()\n: None val", 
            "title": "_final"
        }, 
        {
            "location": "/files-File/#returns_35", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLines/", 
            "text": "FileLines\n\n\nIterate over the lines in a file.\n\n\nclass ref FileLines is\n  Iterator[String val] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nString\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  file: File ref)\n: FileLines ref^\n\n\n\n\nParameters\n\n\n\n\nfile: \nFile\n ref\n\n\n\n\nReturns\n\n\n\n\nFileLines\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "class FileLines"
        }, 
        {
            "location": "/files-FileLines/#filelines", 
            "text": "Iterate over the lines in a file.  class ref FileLines is\n  Iterator[String val] ref", 
            "title": "FileLines"
        }, 
        {
            "location": "/files-FileLines/#implements", 
            "text": "Iterator [ String  val] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/files-FileLines/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-FileLines/#create", 
            "text": "new ref create(\n  file: File ref)\n: FileLines ref^", 
            "title": "create"
        }, 
        {
            "location": "/files-FileLines/#parameters", 
            "text": "file:  File  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-FileLines/#returns", 
            "text": "FileLines  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLines/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-FileLines/#has_next", 
            "text": "fun ref has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/files-FileLines/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-FileLines/#next", 
            "text": "fun ref next()\n: String val", 
            "title": "next"
        }, 
        {
            "location": "/files-FileLines/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_DirectoryHandle/", 
            "text": "_DirectoryHandle\n\n\nprimitive val _DirectoryHandle\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _DirectoryHandle val^\n\n\n\n\nReturns\n\n\n\n\n_DirectoryHandle\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _DirectoryHandle val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_DirectoryHandle\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _DirectoryHandle val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_DirectoryHandle\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _DirectoryHandle"
        }, 
        {
            "location": "/files-_DirectoryHandle/#_directoryhandle", 
            "text": "primitive val _DirectoryHandle", 
            "title": "_DirectoryHandle"
        }, 
        {
            "location": "/files-_DirectoryHandle/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_DirectoryHandle/#create", 
            "text": "new val create()\n: _DirectoryHandle val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_DirectoryHandle/#returns", 
            "text": "_DirectoryHandle  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_DirectoryHandle/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_DirectoryHandle/#eq", 
            "text": "fun box eq(\n  that: _DirectoryHandle val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_DirectoryHandle/#parameters", 
            "text": "that:  _DirectoryHandle  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_DirectoryHandle/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_DirectoryHandle/#ne", 
            "text": "fun box ne(\n  that: _DirectoryHandle val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_DirectoryHandle/#parameters_1", 
            "text": "that:  _DirectoryHandle  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_DirectoryHandle/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_DirectoryEntry/", 
            "text": "_DirectoryEntry\n\n\nprimitive val _DirectoryEntry\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _DirectoryEntry val^\n\n\n\n\nReturns\n\n\n\n\n_DirectoryEntry\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _DirectoryEntry val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_DirectoryEntry\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _DirectoryEntry val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_DirectoryEntry\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _DirectoryEntry"
        }, 
        {
            "location": "/files-_DirectoryEntry/#_directoryentry", 
            "text": "primitive val _DirectoryEntry", 
            "title": "_DirectoryEntry"
        }, 
        {
            "location": "/files-_DirectoryEntry/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_DirectoryEntry/#create", 
            "text": "new val create()\n: _DirectoryEntry val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_DirectoryEntry/#returns", 
            "text": "_DirectoryEntry  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_DirectoryEntry/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_DirectoryEntry/#eq", 
            "text": "fun box eq(\n  that: _DirectoryEntry val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_DirectoryEntry/#parameters", 
            "text": "that:  _DirectoryEntry  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_DirectoryEntry/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_DirectoryEntry/#ne", 
            "text": "fun box ne(\n  that: _DirectoryEntry val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_DirectoryEntry/#parameters_1", 
            "text": "that:  _DirectoryEntry  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_DirectoryEntry/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/", 
            "text": "Directory\n\n\nOperations on a directory.\n\n\nThe directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.\n\n\nclass ref Directory\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  from: FilePath val)\n: Directory ref^ ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nDirectory\n ref^ ?\n\n\n\n\n\n\n_relative\n\n\nnew iso _relative(\n  path': FilePath val,\n  fd': I32 val)\n: Directory iso^\n\n\n\n\nParameters\n\n\n\n\npath': \nFilePath\n val\n\n\nfd': \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nDirectory\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet path: \nFilePath\n val\n\n\n\n\n\n\nPublic Functions\n\n\nentries\n\n\nThe entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".\n\n\nfun box entries()\n: Array[String val] iso^ ?\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^ ?\n\n\n\n\n\n\nopen\n\n\nOpen a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.\n\n\nfun box open(\n  target: String val)\n: Directory iso^ ?\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nDirectory\n iso^ ?\n\n\n\n\n\n\nmkdir\n\n\nCreates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.\n\n\nfun box mkdir(\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncreate_file\n\n\nOpen for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.\n\n\nfun box create_file(\n  target: String val)\n: File iso^ ?\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nFile\n iso^ ?\n\n\n\n\n\n\nopen_file\n\n\nOpen for read only, failing if it doesn't exist.\n\n\nfun box open_file(\n  target: String val)\n: File iso^ ?\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nFile\n iso^ ?\n\n\n\n\n\n\ninfo\n\n\nReturn a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.\n\n\nfun box info()\n: FileInfo val ?\n\n\n\n\nReturns\n\n\n\n\nFileInfo\n val ?\n\n\n\n\n\n\nchmod\n\n\nSet the FileMode for this directory.\n\n\nfun box chmod(\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\n\nSet the owner and group for this directory. Does nothing on Windows.\n\n\nfun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box touch()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ninfoat\n\n\nReturn a FileInfo for some path relative to this directory.\n\n\nfun box infoat(\n  target: String val)\n: FileInfo val ?\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nFileInfo\n val ?\n\n\n\n\n\n\nchmodat\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun box chmodat(\n  target: String val,\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchownat\n\n\nSet the FileMode for some path relative to this directory.\n\n\nfun box chownat(\n  target: String val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouchat\n\n\nSet the last access and modification times of the directory to now.\n\n\nfun box touchat(\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time_at\n\n\nSet the last access and modification times of the directory to the given\nvalues.\n\n\nfun box set_time_at(\n  target: String val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsymlink\n\n\nLink the source path to the link_name, where the link_name is relative to\nthis directory.\n\n\nfun box symlink(\n  source: FilePath val,\n  link_name: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsource: \nFilePath\n val\n\n\nlink_name: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nremove\n\n\nRemove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.\n\n\nfun box remove(\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrename\n\n\nRename source (which is relative to this directory) to target (which is\nrelative to the \nto\n directory).\n\n\nfun box rename(\n  source: String val,\n  to: Directory box,\n  target: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsource: \nString\n val\n\n\nto: \nDirectory\n box\n\n\ntarget: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\n\nClose the directory.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_final\n\n\nClose the file descriptor.\n\n\nfun box _final()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Directory"
        }, 
        {
            "location": "/files-Directory/#directory", 
            "text": "Operations on a directory.  The directory-relative functions (open, etc) use the *at interface on FreeBSD\nand Linux. This isn't available on OS X prior to 10.10, so it is not used. On\nFreeBSD, this allows the directory-relative functions to take advantage of\nCapsicum.  class ref Directory", 
            "title": "Directory"
        }, 
        {
            "location": "/files-Directory/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-Directory/#create", 
            "text": "new ref create(\n  from: FilePath val)\n: Directory ref^ ?", 
            "title": "create"
        }, 
        {
            "location": "/files-Directory/#parameters", 
            "text": "from:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns", 
            "text": "Directory  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#_relative", 
            "text": "new iso _relative(\n  path': FilePath val,\n  fd': I32 val)\n: Directory iso^", 
            "title": "_relative"
        }, 
        {
            "location": "/files-Directory/#parameters_1", 
            "text": "path':  FilePath  val  fd':  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_1", 
            "text": "Directory  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#public-fields", 
            "text": "let path:  FilePath  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/files-Directory/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-Directory/#entries", 
            "text": "The entries will include everything in the directory, but it is not\nrecursive. The path for the entry will be relative to the directory, so it\nwill contain no directory separators. The entries will not include \".\" or\n\"..\".  fun box entries()\n: Array[String val] iso^ ?", 
            "title": "entries"
        }, 
        {
            "location": "/files-Directory/#returns_2", 
            "text": "Array [ String  val] iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#open", 
            "text": "Open a directory relative to this one. Raises an error if the path is not\nwithin this directory hierarchy.  fun box open(\n  target: String val)\n: Directory iso^ ?", 
            "title": "open"
        }, 
        {
            "location": "/files-Directory/#parameters_2", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_3", 
            "text": "Directory  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#mkdir", 
            "text": "Creates a directory relative to this one. Returns false if the path is\nnot within this directory hierarchy or if FileMkdir permission is missing.  fun box mkdir(\n  target: String val)\n: Bool val", 
            "title": "mkdir"
        }, 
        {
            "location": "/files-Directory/#parameters_3", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#create_file", 
            "text": "Open for read/write, creating if it doesn't exist, preserving the contents\nif it does exist.  fun box create_file(\n  target: String val)\n: File iso^ ?", 
            "title": "create_file"
        }, 
        {
            "location": "/files-Directory/#parameters_4", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_5", 
            "text": "File  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#open_file", 
            "text": "Open for read only, failing if it doesn't exist.  fun box open_file(\n  target: String val)\n: File iso^ ?", 
            "title": "open_file"
        }, 
        {
            "location": "/files-Directory/#parameters_5", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_6", 
            "text": "File  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#info", 
            "text": "Return a FileInfo for this directory. Raise an error if the fd is invalid\nor if we don't have FileStat permission.  fun box info()\n: FileInfo val ?", 
            "title": "info"
        }, 
        {
            "location": "/files-Directory/#returns_7", 
            "text": "FileInfo  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#chmod", 
            "text": "Set the FileMode for this directory.  fun box chmod(\n  mode: FileMode box)\n: Bool val", 
            "title": "chmod"
        }, 
        {
            "location": "/files-Directory/#parameters_6", 
            "text": "mode:  FileMode  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#chown", 
            "text": "Set the owner and group for this directory. Does nothing on Windows.  fun box chown(\n  uid: U32 val,\n  gid: U32 val)\n: Bool val", 
            "title": "chown"
        }, 
        {
            "location": "/files-Directory/#parameters_7", 
            "text": "uid:  U32  val  gid:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#touch", 
            "text": "Set the last access and modification times of the directory to now.  fun box touch()\n: Bool val", 
            "title": "touch"
        }, 
        {
            "location": "/files-Directory/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#set_time", 
            "text": "Set the last access and modification times of the directory to the given\nvalues.  fun box set_time(\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val", 
            "title": "set_time"
        }, 
        {
            "location": "/files-Directory/#parameters_8", 
            "text": "atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#infoat", 
            "text": "Return a FileInfo for some path relative to this directory.  fun box infoat(\n  target: String val)\n: FileInfo val ?", 
            "title": "infoat"
        }, 
        {
            "location": "/files-Directory/#parameters_9", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_12", 
            "text": "FileInfo  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#chmodat", 
            "text": "Set the FileMode for some path relative to this directory.  fun box chmodat(\n  target: String val,\n  mode: FileMode box)\n: Bool val", 
            "title": "chmodat"
        }, 
        {
            "location": "/files-Directory/#parameters_10", 
            "text": "target:  String  val  mode:  FileMode  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_13", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#chownat", 
            "text": "Set the FileMode for some path relative to this directory.  fun box chownat(\n  target: String val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val", 
            "title": "chownat"
        }, 
        {
            "location": "/files-Directory/#parameters_11", 
            "text": "target:  String  val  uid:  U32  val  gid:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#touchat", 
            "text": "Set the last access and modification times of the directory to now.  fun box touchat(\n  target: String val)\n: Bool val", 
            "title": "touchat"
        }, 
        {
            "location": "/files-Directory/#parameters_12", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_15", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#set_time_at", 
            "text": "Set the last access and modification times of the directory to the given\nvalues.  fun box set_time_at(\n  target: String val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val", 
            "title": "set_time_at"
        }, 
        {
            "location": "/files-Directory/#parameters_13", 
            "text": "target:  String  val  atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_16", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#symlink", 
            "text": "Link the source path to the link_name, where the link_name is relative to\nthis directory.  fun box symlink(\n  source: FilePath val,\n  link_name: String val)\n: Bool val", 
            "title": "symlink"
        }, 
        {
            "location": "/files-Directory/#parameters_14", 
            "text": "source:  FilePath  val  link_name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_17", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#remove", 
            "text": "Remove the file or directory. The directory contents will be removed as\nwell, recursively. Symlinks will be removed but not traversed.  fun box remove(\n  target: String val)\n: Bool val", 
            "title": "remove"
        }, 
        {
            "location": "/files-Directory/#parameters_15", 
            "text": "target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_18", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#rename", 
            "text": "Rename source (which is relative to this directory) to target (which is\nrelative to the  to  directory).  fun box rename(\n  source: String val,\n  to: Directory box,\n  target: String val)\n: Bool val", 
            "title": "rename"
        }, 
        {
            "location": "/files-Directory/#parameters_16", 
            "text": "source:  String  val  to:  Directory  box  target:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-Directory/#returns_19", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#dispose", 
            "text": "Close the directory.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/files-Directory/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-Directory/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/files-Directory/#_final", 
            "text": "Close the file descriptor.  fun box _final()\n: None val", 
            "title": "_final"
        }, 
        {
            "location": "/files-Directory/#returns_21", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileHelper/", 
            "text": "_FileHelper\n\n\nprimitive val _FileHelper\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FileHelper val^\n\n\n\n\nReturns\n\n\n\n\n_FileHelper\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nmake_files\n\n\nfun box make_files(\n  h: TestHelper val,\n  files: Array[String val] ref)\n: FilePath val ?\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\nfiles: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FileHelper val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FileHelper\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FileHelper val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FileHelper\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FileHelper"
        }, 
        {
            "location": "/files-_FileHelper/#_filehelper", 
            "text": "primitive val _FileHelper", 
            "title": "_FileHelper"
        }, 
        {
            "location": "/files-_FileHelper/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_FileHelper/#create", 
            "text": "new val create()\n: _FileHelper val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_FileHelper/#returns", 
            "text": "_FileHelper  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileHelper/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_FileHelper/#make_files", 
            "text": "fun box make_files(\n  h: TestHelper val,\n  files: Array[String val] ref)\n: FilePath val ?", 
            "title": "make_files"
        }, 
        {
            "location": "/files-_FileHelper/#parameters", 
            "text": "h:  TestHelper  val  files:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileHelper/#returns_1", 
            "text": "FilePath  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileHelper/#eq", 
            "text": "fun box eq(\n  that: _FileHelper val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_FileHelper/#parameters_1", 
            "text": "that:  _FileHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileHelper/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileHelper/#ne", 
            "text": "fun box ne(\n  that: _FileHelper val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_FileHelper/#parameters_2", 
            "text": "that:  _FileHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileHelper/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/", 
            "text": "_FileDes\n\n\nConvenience operations on file descriptors.\n\n\nprimitive val _FileDes\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FileDes val^\n\n\n\n\nReturns\n\n\n\n\n_FileDes\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nchmod\n\n\nSet the FileMode for this fd.\n\n\nfun box chmod(\n  fd: I32 val,\n  path: FilePath val,\n  mode: FileMode box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\nmode: \nFileMode\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nchown\n\n\nSet the owner and group for this file. Does nothing on Windows.\n\n\nfun box chown(\n  fd: I32 val,\n  path: FilePath val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\nuid: \nU32\n val\n\n\ngid: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ntouch\n\n\nSet the last access and modification times of the file to now.\n\n\nfun box touch(\n  fd: I32 val,\n  path: FilePath val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_time\n\n\nSet the last access and modification times of the file to the given values.\n\n\nfun box set_time(\n  fd: I32 val,\n  path: FilePath val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\natime: (\nI64\n val , \nI64\n val)\n\n\nmtime: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nset_rights\n\n\nSet the Capsicum rights on the file descriptor.\n\n\nfun box set_rights(\n  fd: I32 val,\n  path: FilePath val,\n  writeable: Bool val = seq)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nI32\n val\n\n\npath: \nFilePath\n val\n\n\nwriteable: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FileDes val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FileDes\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FileDes val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FileDes\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FileDes"
        }, 
        {
            "location": "/files-_FileDes/#_filedes", 
            "text": "Convenience operations on file descriptors.  primitive val _FileDes", 
            "title": "_FileDes"
        }, 
        {
            "location": "/files-_FileDes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/files-_FileDes/#create", 
            "text": "new val create()\n: _FileDes val^", 
            "title": "create"
        }, 
        {
            "location": "/files-_FileDes/#returns", 
            "text": "_FileDes  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/files-_FileDes/#chmod", 
            "text": "Set the FileMode for this fd.  fun box chmod(\n  fd: I32 val,\n  path: FilePath val,\n  mode: FileMode box)\n: Bool val", 
            "title": "chmod"
        }, 
        {
            "location": "/files-_FileDes/#parameters", 
            "text": "fd:  I32  val  path:  FilePath  val  mode:  FileMode  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#chown", 
            "text": "Set the owner and group for this file. Does nothing on Windows.  fun box chown(\n  fd: I32 val,\n  path: FilePath val,\n  uid: U32 val,\n  gid: U32 val)\n: Bool val", 
            "title": "chown"
        }, 
        {
            "location": "/files-_FileDes/#parameters_1", 
            "text": "fd:  I32  val  path:  FilePath  val  uid:  U32  val  gid:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#touch", 
            "text": "Set the last access and modification times of the file to now.  fun box touch(\n  fd: I32 val,\n  path: FilePath val)\n: Bool val", 
            "title": "touch"
        }, 
        {
            "location": "/files-_FileDes/#parameters_2", 
            "text": "fd:  I32  val  path:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#set_time", 
            "text": "Set the last access and modification times of the file to the given values.  fun box set_time(\n  fd: I32 val,\n  path: FilePath val,\n  atime: (I64 val , I64 val),\n  mtime: (I64 val , I64 val))\n: Bool val", 
            "title": "set_time"
        }, 
        {
            "location": "/files-_FileDes/#parameters_3", 
            "text": "fd:  I32  val  path:  FilePath  val  atime: ( I64  val ,  I64  val)  mtime: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#set_rights", 
            "text": "Set the Capsicum rights on the file descriptor.  fun box set_rights(\n  fd: I32 val,\n  path: FilePath val,\n  writeable: Bool val = seq)\n: None val ?", 
            "title": "set_rights"
        }, 
        {
            "location": "/files-_FileDes/#parameters_4", 
            "text": "fd:  I32  val  path:  FilePath  val  writeable:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_5", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#eq", 
            "text": "fun box eq(\n  that: _FileDes val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/files-_FileDes/#parameters_5", 
            "text": "that:  _FileDes  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/files-_FileDes/#ne", 
            "text": "fun box ne(\n  that: _FileDes val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/files-_FileDes/#parameters_6", 
            "text": "that:  _FileDes  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/files-_FileDes/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format--index/", 
            "text": "Format package\n\n\nThe Format package provides support for formatting strings. It can be\nused to set things like width, padding and alignment, as well as\ncontrolling the way numbers are displayed (decimal, octal,\nhexadecimal).\n\n\nExample program\n\n\nuse \nformat\n\n\nactor Main\n  fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String =\n\n    Format(desc where width = 10)\n      + \n:\n\n      + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\n\n  new create(env: Env) =\n\n    try\n      (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\n      env.out.print(disp(\nx\n, x))\n      env.out.print(disp(\ny\n, y))\n      env.out.print(disp(\nhex(x)\n, x, FormatHex))\n      env.out.print(disp(\nhex(y)\n, y, FormatHex))\n      env.out.print(disp(\nx * y\n, x * y))\n    else\n      let exe = try env.args(0)? else \nfmt_example\n end\n      env.err.print(\nUsage: \n + exe + \n NUMBER1 NUMBER2\n)\n    end\n\n\n\n\nPublic Types\n\n\n\n\ntrait PrefixSpec\n\n\nprimitive PrefixDefault\n\n\nprimitive PrefixSpace\n\n\nprimitive PrefixSign\n\n\ntype PrefixNumber\n\n\ntrait FormatSpec\n\n\nprimitive FormatDefault\n\n\nprimitive FormatUTF32\n\n\nprimitive FormatBinary\n\n\nprimitive FormatBinaryBare\n\n\nprimitive FormatOctal\n\n\nprimitive FormatOctalBare\n\n\nprimitive FormatHex\n\n\nprimitive FormatHexBare\n\n\nprimitive FormatHexSmall\n\n\nprimitive FormatHexSmallBare\n\n\ntype FormatInt\n\n\nprimitive FormatExp\n\n\nprimitive FormatExpLarge\n\n\nprimitive FormatFix\n\n\nprimitive FormatFixLarge\n\n\nprimitive FormatGeneral\n\n\nprimitive FormatGeneralLarge\n\n\ntype FormatFloat\n\n\nprimitive Format\n\n\nprimitive AlignLeft\n\n\nprimitive AlignRight\n\n\nprimitive AlignCenter\n\n\ntype Align\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _FormatInt\n\n\nprimitive _FormatFloat", 
            "title": "Package"
        }, 
        {
            "location": "/format--index/#format-package", 
            "text": "The Format package provides support for formatting strings. It can be\nused to set things like width, padding and alignment, as well as\ncontrolling the way numbers are displayed (decimal, octal,\nhexadecimal).", 
            "title": "Format package"
        }, 
        {
            "location": "/format--index/#example-program", 
            "text": "use  format \n\nactor Main\n  fun disp(desc: String, v: I32, fmt: FormatInt = FormatDefault): String = \n    Format(desc where width = 10)\n      +  : \n      + Format.int[I32](v where width = 10, align = AlignRight, fmt = fmt)\n\n  new create(env: Env) = \n    try\n      (let x, let y) = (env.args(1)?.i32()?, env.args(2)?.i32()?)\n      env.out.print(disp( x , x))\n      env.out.print(disp( y , y))\n      env.out.print(disp( hex(x) , x, FormatHex))\n      env.out.print(disp( hex(y) , y, FormatHex))\n      env.out.print(disp( x * y , x * y))\n    else\n      let exe = try env.args(0)? else  fmt_example  end\n      env.err.print( Usage:   + exe +   NUMBER1 NUMBER2 )\n    end", 
            "title": "Example program"
        }, 
        {
            "location": "/format--index/#public-types", 
            "text": "trait PrefixSpec  primitive PrefixDefault  primitive PrefixSpace  primitive PrefixSign  type PrefixNumber  trait FormatSpec  primitive FormatDefault  primitive FormatUTF32  primitive FormatBinary  primitive FormatBinaryBare  primitive FormatOctal  primitive FormatOctalBare  primitive FormatHex  primitive FormatHexBare  primitive FormatHexSmall  primitive FormatHexSmallBare  type FormatInt  primitive FormatExp  primitive FormatExpLarge  primitive FormatFix  primitive FormatFixLarge  primitive FormatGeneral  primitive FormatGeneralLarge  type FormatFloat  primitive Format  primitive AlignLeft  primitive AlignRight  primitive AlignCenter  type Align", 
            "title": "Public Types"
        }, 
        {
            "location": "/format--index/#private-types", 
            "text": "primitive _FormatInt  primitive _FormatFloat", 
            "title": "Private Types"
        }, 
        {
            "location": "/format-PrefixSpec/", 
            "text": "PrefixSpec\n\n\ntrait val PrefixSpec", 
            "title": "trait PrefixSpec"
        }, 
        {
            "location": "/format-PrefixSpec/#prefixspec", 
            "text": "trait val PrefixSpec", 
            "title": "PrefixSpec"
        }, 
        {
            "location": "/format-PrefixDefault/", 
            "text": "PrefixDefault\n\n\nprimitive val PrefixDefault is\n  PrefixSpec val\n\n\n\n\nImplements\n\n\n\n\nPrefixSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: PrefixDefault val^\n\n\n\n\nReturns\n\n\n\n\nPrefixDefault\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: PrefixDefault val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPrefixDefault\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: PrefixDefault val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPrefixDefault\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive PrefixDefault"
        }, 
        {
            "location": "/format-PrefixDefault/#prefixdefault", 
            "text": "primitive val PrefixDefault is\n  PrefixSpec val", 
            "title": "PrefixDefault"
        }, 
        {
            "location": "/format-PrefixDefault/#implements", 
            "text": "PrefixSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-PrefixDefault/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-PrefixDefault/#create", 
            "text": "new val create()\n: PrefixDefault val^", 
            "title": "create"
        }, 
        {
            "location": "/format-PrefixDefault/#returns", 
            "text": "PrefixDefault  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixDefault/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-PrefixDefault/#eq", 
            "text": "fun box eq(\n  that: PrefixDefault val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-PrefixDefault/#parameters", 
            "text": "that:  PrefixDefault  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-PrefixDefault/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixDefault/#ne", 
            "text": "fun box ne(\n  that: PrefixDefault val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-PrefixDefault/#parameters_1", 
            "text": "that:  PrefixDefault  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-PrefixDefault/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixSpace/", 
            "text": "PrefixSpace\n\n\nprimitive val PrefixSpace is\n  PrefixSpec val\n\n\n\n\nImplements\n\n\n\n\nPrefixSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: PrefixSpace val^\n\n\n\n\nReturns\n\n\n\n\nPrefixSpace\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: PrefixSpace val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPrefixSpace\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: PrefixSpace val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPrefixSpace\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive PrefixSpace"
        }, 
        {
            "location": "/format-PrefixSpace/#prefixspace", 
            "text": "primitive val PrefixSpace is\n  PrefixSpec val", 
            "title": "PrefixSpace"
        }, 
        {
            "location": "/format-PrefixSpace/#implements", 
            "text": "PrefixSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-PrefixSpace/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-PrefixSpace/#create", 
            "text": "new val create()\n: PrefixSpace val^", 
            "title": "create"
        }, 
        {
            "location": "/format-PrefixSpace/#returns", 
            "text": "PrefixSpace  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixSpace/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-PrefixSpace/#eq", 
            "text": "fun box eq(\n  that: PrefixSpace val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-PrefixSpace/#parameters", 
            "text": "that:  PrefixSpace  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-PrefixSpace/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixSpace/#ne", 
            "text": "fun box ne(\n  that: PrefixSpace val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-PrefixSpace/#parameters_1", 
            "text": "that:  PrefixSpace  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-PrefixSpace/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixSign/", 
            "text": "PrefixSign\n\n\nprimitive val PrefixSign is\n  PrefixSpec val\n\n\n\n\nImplements\n\n\n\n\nPrefixSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: PrefixSign val^\n\n\n\n\nReturns\n\n\n\n\nPrefixSign\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: PrefixSign val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPrefixSign\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: PrefixSign val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPrefixSign\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive PrefixSign"
        }, 
        {
            "location": "/format-PrefixSign/#prefixsign", 
            "text": "primitive val PrefixSign is\n  PrefixSpec val", 
            "title": "PrefixSign"
        }, 
        {
            "location": "/format-PrefixSign/#implements", 
            "text": "PrefixSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-PrefixSign/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-PrefixSign/#create", 
            "text": "new val create()\n: PrefixSign val^", 
            "title": "create"
        }, 
        {
            "location": "/format-PrefixSign/#returns", 
            "text": "PrefixSign  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixSign/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-PrefixSign/#eq", 
            "text": "fun box eq(\n  that: PrefixSign val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-PrefixSign/#parameters", 
            "text": "that:  PrefixSign  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-PrefixSign/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixSign/#ne", 
            "text": "fun box ne(\n  that: PrefixSign val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-PrefixSign/#parameters_1", 
            "text": "that:  PrefixSign  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-PrefixSign/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-PrefixNumber/", 
            "text": "PrefixNumber\n\n\ntype PrefixNumber is\n  (PrefixDefault val | PrefixSpace val | PrefixSign val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)", 
            "title": "type PrefixNumber"
        }, 
        {
            "location": "/format-PrefixNumber/#prefixnumber", 
            "text": "type PrefixNumber is\n  (PrefixDefault val | PrefixSpace val | PrefixSign val)", 
            "title": "PrefixNumber"
        }, 
        {
            "location": "/format-PrefixNumber/#type-alias-for", 
            "text": "( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/format-FormatSpec/", 
            "text": "FormatSpec\n\n\ntrait val FormatSpec", 
            "title": "trait FormatSpec"
        }, 
        {
            "location": "/format-FormatSpec/#formatspec", 
            "text": "trait val FormatSpec", 
            "title": "FormatSpec"
        }, 
        {
            "location": "/format-FormatDefault/", 
            "text": "FormatDefault\n\n\nprimitive val FormatDefault is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatDefault val^\n\n\n\n\nReturns\n\n\n\n\nFormatDefault\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatDefault val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatDefault\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatDefault val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatDefault\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatDefault"
        }, 
        {
            "location": "/format-FormatDefault/#formatdefault", 
            "text": "primitive val FormatDefault is\n  FormatSpec val", 
            "title": "FormatDefault"
        }, 
        {
            "location": "/format-FormatDefault/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatDefault/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatDefault/#create", 
            "text": "new val create()\n: FormatDefault val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatDefault/#returns", 
            "text": "FormatDefault  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatDefault/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatDefault/#eq", 
            "text": "fun box eq(\n  that: FormatDefault val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatDefault/#parameters", 
            "text": "that:  FormatDefault  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatDefault/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatDefault/#ne", 
            "text": "fun box ne(\n  that: FormatDefault val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatDefault/#parameters_1", 
            "text": "that:  FormatDefault  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatDefault/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatUTF32/", 
            "text": "FormatUTF32\n\n\nprimitive val FormatUTF32 is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatUTF32 val^\n\n\n\n\nReturns\n\n\n\n\nFormatUTF32\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatUTF32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatUTF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatUTF32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatUTF32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatUTF32"
        }, 
        {
            "location": "/format-FormatUTF32/#formatutf32", 
            "text": "primitive val FormatUTF32 is\n  FormatSpec val", 
            "title": "FormatUTF32"
        }, 
        {
            "location": "/format-FormatUTF32/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatUTF32/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatUTF32/#create", 
            "text": "new val create()\n: FormatUTF32 val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatUTF32/#returns", 
            "text": "FormatUTF32  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatUTF32/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatUTF32/#eq", 
            "text": "fun box eq(\n  that: FormatUTF32 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatUTF32/#parameters", 
            "text": "that:  FormatUTF32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatUTF32/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatUTF32/#ne", 
            "text": "fun box ne(\n  that: FormatUTF32 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatUTF32/#parameters_1", 
            "text": "that:  FormatUTF32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatUTF32/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatBinary/", 
            "text": "FormatBinary\n\n\nprimitive val FormatBinary is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatBinary val^\n\n\n\n\nReturns\n\n\n\n\nFormatBinary\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatBinary val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatBinary\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatBinary val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatBinary\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatBinary"
        }, 
        {
            "location": "/format-FormatBinary/#formatbinary", 
            "text": "primitive val FormatBinary is\n  FormatSpec val", 
            "title": "FormatBinary"
        }, 
        {
            "location": "/format-FormatBinary/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatBinary/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatBinary/#create", 
            "text": "new val create()\n: FormatBinary val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatBinary/#returns", 
            "text": "FormatBinary  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatBinary/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatBinary/#eq", 
            "text": "fun box eq(\n  that: FormatBinary val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatBinary/#parameters", 
            "text": "that:  FormatBinary  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatBinary/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatBinary/#ne", 
            "text": "fun box ne(\n  that: FormatBinary val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatBinary/#parameters_1", 
            "text": "that:  FormatBinary  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatBinary/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatBinaryBare/", 
            "text": "FormatBinaryBare\n\n\nprimitive val FormatBinaryBare is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatBinaryBare val^\n\n\n\n\nReturns\n\n\n\n\nFormatBinaryBare\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatBinaryBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatBinaryBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatBinaryBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatBinaryBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatBinaryBare"
        }, 
        {
            "location": "/format-FormatBinaryBare/#formatbinarybare", 
            "text": "primitive val FormatBinaryBare is\n  FormatSpec val", 
            "title": "FormatBinaryBare"
        }, 
        {
            "location": "/format-FormatBinaryBare/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatBinaryBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatBinaryBare/#create", 
            "text": "new val create()\n: FormatBinaryBare val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatBinaryBare/#returns", 
            "text": "FormatBinaryBare  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatBinaryBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatBinaryBare/#eq", 
            "text": "fun box eq(\n  that: FormatBinaryBare val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatBinaryBare/#parameters", 
            "text": "that:  FormatBinaryBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatBinaryBare/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatBinaryBare/#ne", 
            "text": "fun box ne(\n  that: FormatBinaryBare val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatBinaryBare/#parameters_1", 
            "text": "that:  FormatBinaryBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatBinaryBare/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatOctal/", 
            "text": "FormatOctal\n\n\nprimitive val FormatOctal is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatOctal val^\n\n\n\n\nReturns\n\n\n\n\nFormatOctal\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatOctal val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatOctal\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatOctal val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatOctal\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatOctal"
        }, 
        {
            "location": "/format-FormatOctal/#formatoctal", 
            "text": "primitive val FormatOctal is\n  FormatSpec val", 
            "title": "FormatOctal"
        }, 
        {
            "location": "/format-FormatOctal/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatOctal/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatOctal/#create", 
            "text": "new val create()\n: FormatOctal val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatOctal/#returns", 
            "text": "FormatOctal  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatOctal/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatOctal/#eq", 
            "text": "fun box eq(\n  that: FormatOctal val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatOctal/#parameters", 
            "text": "that:  FormatOctal  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatOctal/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatOctal/#ne", 
            "text": "fun box ne(\n  that: FormatOctal val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatOctal/#parameters_1", 
            "text": "that:  FormatOctal  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatOctal/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatOctalBare/", 
            "text": "FormatOctalBare\n\n\nprimitive val FormatOctalBare is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatOctalBare val^\n\n\n\n\nReturns\n\n\n\n\nFormatOctalBare\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatOctalBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatOctalBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatOctalBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatOctalBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatOctalBare"
        }, 
        {
            "location": "/format-FormatOctalBare/#formatoctalbare", 
            "text": "primitive val FormatOctalBare is\n  FormatSpec val", 
            "title": "FormatOctalBare"
        }, 
        {
            "location": "/format-FormatOctalBare/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatOctalBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatOctalBare/#create", 
            "text": "new val create()\n: FormatOctalBare val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatOctalBare/#returns", 
            "text": "FormatOctalBare  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatOctalBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatOctalBare/#eq", 
            "text": "fun box eq(\n  that: FormatOctalBare val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatOctalBare/#parameters", 
            "text": "that:  FormatOctalBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatOctalBare/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatOctalBare/#ne", 
            "text": "fun box ne(\n  that: FormatOctalBare val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatOctalBare/#parameters_1", 
            "text": "that:  FormatOctalBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatOctalBare/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHex/", 
            "text": "FormatHex\n\n\nprimitive val FormatHex is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatHex val^\n\n\n\n\nReturns\n\n\n\n\nFormatHex\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatHex val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHex\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatHex val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHex\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatHex"
        }, 
        {
            "location": "/format-FormatHex/#formathex", 
            "text": "primitive val FormatHex is\n  FormatSpec val", 
            "title": "FormatHex"
        }, 
        {
            "location": "/format-FormatHex/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatHex/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatHex/#create", 
            "text": "new val create()\n: FormatHex val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatHex/#returns", 
            "text": "FormatHex  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHex/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatHex/#eq", 
            "text": "fun box eq(\n  that: FormatHex val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatHex/#parameters", 
            "text": "that:  FormatHex  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHex/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHex/#ne", 
            "text": "fun box ne(\n  that: FormatHex val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatHex/#parameters_1", 
            "text": "that:  FormatHex  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHex/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexBare/", 
            "text": "FormatHexBare\n\n\nprimitive val FormatHexBare is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatHexBare val^\n\n\n\n\nReturns\n\n\n\n\nFormatHexBare\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatHexBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHexBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatHexBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHexBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatHexBare"
        }, 
        {
            "location": "/format-FormatHexBare/#formathexbare", 
            "text": "primitive val FormatHexBare is\n  FormatSpec val", 
            "title": "FormatHexBare"
        }, 
        {
            "location": "/format-FormatHexBare/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatHexBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatHexBare/#create", 
            "text": "new val create()\n: FormatHexBare val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatHexBare/#returns", 
            "text": "FormatHexBare  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatHexBare/#eq", 
            "text": "fun box eq(\n  that: FormatHexBare val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatHexBare/#parameters", 
            "text": "that:  FormatHexBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHexBare/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexBare/#ne", 
            "text": "fun box ne(\n  that: FormatHexBare val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatHexBare/#parameters_1", 
            "text": "that:  FormatHexBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHexBare/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexSmall/", 
            "text": "FormatHexSmall\n\n\nprimitive val FormatHexSmall is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatHexSmall val^\n\n\n\n\nReturns\n\n\n\n\nFormatHexSmall\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatHexSmall val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHexSmall\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatHexSmall val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHexSmall\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatHexSmall"
        }, 
        {
            "location": "/format-FormatHexSmall/#formathexsmall", 
            "text": "primitive val FormatHexSmall is\n  FormatSpec val", 
            "title": "FormatHexSmall"
        }, 
        {
            "location": "/format-FormatHexSmall/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatHexSmall/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatHexSmall/#create", 
            "text": "new val create()\n: FormatHexSmall val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatHexSmall/#returns", 
            "text": "FormatHexSmall  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexSmall/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatHexSmall/#eq", 
            "text": "fun box eq(\n  that: FormatHexSmall val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatHexSmall/#parameters", 
            "text": "that:  FormatHexSmall  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHexSmall/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexSmall/#ne", 
            "text": "fun box ne(\n  that: FormatHexSmall val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatHexSmall/#parameters_1", 
            "text": "that:  FormatHexSmall  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHexSmall/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexSmallBare/", 
            "text": "FormatHexSmallBare\n\n\nprimitive val FormatHexSmallBare is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatHexSmallBare val^\n\n\n\n\nReturns\n\n\n\n\nFormatHexSmallBare\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatHexSmallBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHexSmallBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatHexSmallBare val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatHexSmallBare\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatHexSmallBare"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#formathexsmallbare", 
            "text": "primitive val FormatHexSmallBare is\n  FormatSpec val", 
            "title": "FormatHexSmallBare"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#create", 
            "text": "new val create()\n: FormatHexSmallBare val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#returns", 
            "text": "FormatHexSmallBare  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#eq", 
            "text": "fun box eq(\n  that: FormatHexSmallBare val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#parameters", 
            "text": "that:  FormatHexSmallBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#ne", 
            "text": "fun box ne(\n  that: FormatHexSmallBare val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#parameters_1", 
            "text": "that:  FormatHexSmallBare  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatHexSmallBare/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatInt/", 
            "text": "FormatInt\n\n\ntype FormatInt is\n  (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \nFormatHexSmallBare\n val)", 
            "title": "type FormatInt"
        }, 
        {
            "location": "/format-FormatInt/#formatint", 
            "text": "type FormatInt is\n  (FormatDefault val | FormatUTF32 val | FormatBinary val | FormatBinaryBare val | FormatOctal val | FormatOctalBare val | FormatHex val | FormatHexBare val | FormatHexSmall val | FormatHexSmallBare val)", 
            "title": "FormatInt"
        }, 
        {
            "location": "/format-FormatInt/#type-alias-for", 
            "text": "( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val |  FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val |  FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val |  FormatHexSmallBare  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/format-FormatExp/", 
            "text": "FormatExp\n\n\nprimitive val FormatExp is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatExp val^\n\n\n\n\nReturns\n\n\n\n\nFormatExp\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatExp val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatExp\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatExp val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatExp\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatExp"
        }, 
        {
            "location": "/format-FormatExp/#formatexp", 
            "text": "primitive val FormatExp is\n  FormatSpec val", 
            "title": "FormatExp"
        }, 
        {
            "location": "/format-FormatExp/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatExp/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatExp/#create", 
            "text": "new val create()\n: FormatExp val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatExp/#returns", 
            "text": "FormatExp  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatExp/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatExp/#eq", 
            "text": "fun box eq(\n  that: FormatExp val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatExp/#parameters", 
            "text": "that:  FormatExp  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatExp/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatExp/#ne", 
            "text": "fun box ne(\n  that: FormatExp val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatExp/#parameters_1", 
            "text": "that:  FormatExp  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatExp/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatExpLarge/", 
            "text": "FormatExpLarge\n\n\nprimitive val FormatExpLarge is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatExpLarge val^\n\n\n\n\nReturns\n\n\n\n\nFormatExpLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatExpLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatExpLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatExpLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatExpLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatExpLarge"
        }, 
        {
            "location": "/format-FormatExpLarge/#formatexplarge", 
            "text": "primitive val FormatExpLarge is\n  FormatSpec val", 
            "title": "FormatExpLarge"
        }, 
        {
            "location": "/format-FormatExpLarge/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatExpLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatExpLarge/#create", 
            "text": "new val create()\n: FormatExpLarge val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatExpLarge/#returns", 
            "text": "FormatExpLarge  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatExpLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatExpLarge/#eq", 
            "text": "fun box eq(\n  that: FormatExpLarge val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatExpLarge/#parameters", 
            "text": "that:  FormatExpLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatExpLarge/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatExpLarge/#ne", 
            "text": "fun box ne(\n  that: FormatExpLarge val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatExpLarge/#parameters_1", 
            "text": "that:  FormatExpLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatExpLarge/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFix/", 
            "text": "FormatFix\n\n\nprimitive val FormatFix is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatFix val^\n\n\n\n\nReturns\n\n\n\n\nFormatFix\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatFix val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatFix\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatFix val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatFix\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatFix"
        }, 
        {
            "location": "/format-FormatFix/#formatfix", 
            "text": "primitive val FormatFix is\n  FormatSpec val", 
            "title": "FormatFix"
        }, 
        {
            "location": "/format-FormatFix/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatFix/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatFix/#create", 
            "text": "new val create()\n: FormatFix val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatFix/#returns", 
            "text": "FormatFix  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFix/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatFix/#eq", 
            "text": "fun box eq(\n  that: FormatFix val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatFix/#parameters", 
            "text": "that:  FormatFix  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatFix/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFix/#ne", 
            "text": "fun box ne(\n  that: FormatFix val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatFix/#parameters_1", 
            "text": "that:  FormatFix  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatFix/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFixLarge/", 
            "text": "FormatFixLarge\n\n\nprimitive val FormatFixLarge is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatFixLarge val^\n\n\n\n\nReturns\n\n\n\n\nFormatFixLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatFixLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatFixLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatFixLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatFixLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatFixLarge"
        }, 
        {
            "location": "/format-FormatFixLarge/#formatfixlarge", 
            "text": "primitive val FormatFixLarge is\n  FormatSpec val", 
            "title": "FormatFixLarge"
        }, 
        {
            "location": "/format-FormatFixLarge/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatFixLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatFixLarge/#create", 
            "text": "new val create()\n: FormatFixLarge val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatFixLarge/#returns", 
            "text": "FormatFixLarge  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFixLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatFixLarge/#eq", 
            "text": "fun box eq(\n  that: FormatFixLarge val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatFixLarge/#parameters", 
            "text": "that:  FormatFixLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatFixLarge/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFixLarge/#ne", 
            "text": "fun box ne(\n  that: FormatFixLarge val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatFixLarge/#parameters_1", 
            "text": "that:  FormatFixLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatFixLarge/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatGeneral/", 
            "text": "FormatGeneral\n\n\nprimitive val FormatGeneral is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatGeneral val^\n\n\n\n\nReturns\n\n\n\n\nFormatGeneral\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatGeneral val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatGeneral\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatGeneral val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatGeneral\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatGeneral"
        }, 
        {
            "location": "/format-FormatGeneral/#formatgeneral", 
            "text": "primitive val FormatGeneral is\n  FormatSpec val", 
            "title": "FormatGeneral"
        }, 
        {
            "location": "/format-FormatGeneral/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatGeneral/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatGeneral/#create", 
            "text": "new val create()\n: FormatGeneral val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatGeneral/#returns", 
            "text": "FormatGeneral  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatGeneral/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatGeneral/#eq", 
            "text": "fun box eq(\n  that: FormatGeneral val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatGeneral/#parameters", 
            "text": "that:  FormatGeneral  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatGeneral/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatGeneral/#ne", 
            "text": "fun box ne(\n  that: FormatGeneral val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatGeneral/#parameters_1", 
            "text": "that:  FormatGeneral  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatGeneral/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatGeneralLarge/", 
            "text": "FormatGeneralLarge\n\n\nprimitive val FormatGeneralLarge is\n  FormatSpec val\n\n\n\n\nImplements\n\n\n\n\nFormatSpec\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: FormatGeneralLarge val^\n\n\n\n\nReturns\n\n\n\n\nFormatGeneralLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: FormatGeneralLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatGeneralLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: FormatGeneralLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormatGeneralLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive FormatGeneralLarge"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#formatgenerallarge", 
            "text": "primitive val FormatGeneralLarge is\n  FormatSpec val", 
            "title": "FormatGeneralLarge"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#implements", 
            "text": "FormatSpec  val", 
            "title": "Implements"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#create", 
            "text": "new val create()\n: FormatGeneralLarge val^", 
            "title": "create"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#returns", 
            "text": "FormatGeneralLarge  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#eq", 
            "text": "fun box eq(\n  that: FormatGeneralLarge val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#parameters", 
            "text": "that:  FormatGeneralLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#ne", 
            "text": "fun box ne(\n  that: FormatGeneralLarge val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#parameters_1", 
            "text": "that:  FormatGeneralLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-FormatGeneralLarge/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-FormatFloat/", 
            "text": "FormatFloat\n\n\ntype FormatFloat is\n  (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nFormatDefault\n val | \nFormatExp\n val | \nFormatExpLarge\n val | \nFormatFix\n val | \nFormatFixLarge\n val | \nFormatGeneral\n val | \nFormatGeneralLarge\n val)", 
            "title": "type FormatFloat"
        }, 
        {
            "location": "/format-FormatFloat/#formatfloat", 
            "text": "type FormatFloat is\n  (FormatDefault val | FormatExp val | FormatExpLarge val | FormatFix val | FormatFixLarge val | FormatGeneral val | FormatGeneralLarge val)", 
            "title": "FormatFloat"
        }, 
        {
            "location": "/format-FormatFloat/#type-alias-for", 
            "text": "( FormatDefault  val |  FormatExp  val |  FormatExpLarge  val |  FormatFix  val |  FormatFixLarge  val |  FormatGeneral  val |  FormatGeneralLarge  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/format-Format/", 
            "text": "Format\n\n\nProvides functions for generating formatted strings.\n\n\n\n\nfmt. Format to use.\n\n\nprefix. Prefix to use.\n\n\nprec. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.\n\n\nwidth. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough.\n\nalign. Specify whether fill characters should be added at the beginning or\nend of the generated string, or both.\n\nfill: The character to pad a string with if is is shorter than width.\n\n\n\n\nprimitive val Format\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Format val^\n\n\n\n\nReturns\n\n\n\n\nFormat\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  str: String val,\n  fmt: FormatDefault val = seq,\n  prefix: PrefixDefault val = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nstr: \nString\n val\n\n\nfmt: \nFormatDefault\n val = seq\n\n\nprefix: \nPrefixDefault\n val = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nint[A: ((\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nInteger\n[A])]\n\n\nfun box int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val) \n Integer[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: A\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val) = seq\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val) = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nfloat[A: ((\nF32\n val | \nF64\n val) \n \nFloatingPoint\n[A])]\n\n\nfun box float[A: ((F32 val | F64 val) \n FloatingPoint[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: A\n\n\nfmt: (\nFormatDefault\n val | \nFormatExp\n val | \nFormatExpLarge\n val | \n    \nFormatFix\n val | \nFormatFixLarge\n val | \nFormatGeneral\n val | \n    \nFormatGeneralLarge\n val) = seq\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val) = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Format val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormat\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Format val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFormat\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Format"
        }, 
        {
            "location": "/format-Format/#format", 
            "text": "Provides functions for generating formatted strings.   fmt. Format to use.  prefix. Prefix to use.  prec. Precision to use. The exact meaning of this depends on the type,\nbut is generally the number of characters used for all, or part, of the\nstring. A value of -1 indicates that the default for the type should be\nused.  width. The minimum number of characters that will be in the produced\nstring. If necessary the string will be padded with the fill character to\nmake it long enough. align. Specify whether fill characters should be added at the beginning or\nend of the generated string, or both. fill: The character to pad a string with if is is shorter than width.   primitive val Format", 
            "title": "Format"
        }, 
        {
            "location": "/format-Format/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-Format/#create", 
            "text": "new val create()\n: Format val^", 
            "title": "create"
        }, 
        {
            "location": "/format-Format/#returns", 
            "text": "Format  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-Format/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-Format/#apply", 
            "text": "fun box apply(\n  str: String val,\n  fmt: FormatDefault val = seq,\n  prefix: PrefixDefault val = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^", 
            "title": "apply"
        }, 
        {
            "location": "/format-Format/#parameters", 
            "text": "str:  String  val  fmt:  FormatDefault  val = seq  prefix:  PrefixDefault  val = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-Format/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-Format/#int91a-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-integer91a9393", 
            "text": "fun box int[A: ((I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val)   Integer[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^", 
            "title": "int[A: ((I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Integer[A])]"
        }, 
        {
            "location": "/format-Format/#parameters_1", 
            "text": "x: A  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val) = seq  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val) = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-Format/#returns_2", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-Format/#float91a-f32-val-f64-val-floatingpoint91a9393", 
            "text": "fun box float[A: ((F32 val | F64 val)   FloatingPoint[A])](\n  x: A,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^", 
            "title": "float[A: ((F32 val | F64 val) &amp; FloatingPoint[A])]"
        }, 
        {
            "location": "/format-Format/#parameters_2", 
            "text": "x: A  fmt: ( FormatDefault  val |  FormatExp  val |  FormatExpLarge  val | \n     FormatFix  val |  FormatFixLarge  val |  FormatGeneral  val | \n     FormatGeneralLarge  val) = seq  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val) = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-Format/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-Format/#eq", 
            "text": "fun box eq(\n  that: Format val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-Format/#parameters_3", 
            "text": "that:  Format  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-Format/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-Format/#ne", 
            "text": "fun box ne(\n  that: Format val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-Format/#parameters_4", 
            "text": "that:  Format  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-Format/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignLeft/", 
            "text": "AlignLeft\n\n\nprimitive val AlignLeft\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: AlignLeft val^\n\n\n\n\nReturns\n\n\n\n\nAlignLeft\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: AlignLeft val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAlignLeft\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AlignLeft val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAlignLeft\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive AlignLeft"
        }, 
        {
            "location": "/format-AlignLeft/#alignleft", 
            "text": "primitive val AlignLeft", 
            "title": "AlignLeft"
        }, 
        {
            "location": "/format-AlignLeft/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-AlignLeft/#create", 
            "text": "new val create()\n: AlignLeft val^", 
            "title": "create"
        }, 
        {
            "location": "/format-AlignLeft/#returns", 
            "text": "AlignLeft  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignLeft/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-AlignLeft/#eq", 
            "text": "fun box eq(\n  that: AlignLeft val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-AlignLeft/#parameters", 
            "text": "that:  AlignLeft  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-AlignLeft/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignLeft/#ne", 
            "text": "fun box ne(\n  that: AlignLeft val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-AlignLeft/#parameters_1", 
            "text": "that:  AlignLeft  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-AlignLeft/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignRight/", 
            "text": "AlignRight\n\n\nprimitive val AlignRight\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: AlignRight val^\n\n\n\n\nReturns\n\n\n\n\nAlignRight\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: AlignRight val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAlignRight\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AlignRight val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAlignRight\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive AlignRight"
        }, 
        {
            "location": "/format-AlignRight/#alignright", 
            "text": "primitive val AlignRight", 
            "title": "AlignRight"
        }, 
        {
            "location": "/format-AlignRight/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-AlignRight/#create", 
            "text": "new val create()\n: AlignRight val^", 
            "title": "create"
        }, 
        {
            "location": "/format-AlignRight/#returns", 
            "text": "AlignRight  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignRight/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-AlignRight/#eq", 
            "text": "fun box eq(\n  that: AlignRight val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-AlignRight/#parameters", 
            "text": "that:  AlignRight  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-AlignRight/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignRight/#ne", 
            "text": "fun box ne(\n  that: AlignRight val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-AlignRight/#parameters_1", 
            "text": "that:  AlignRight  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-AlignRight/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignCenter/", 
            "text": "AlignCenter\n\n\nprimitive val AlignCenter\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: AlignCenter val^\n\n\n\n\nReturns\n\n\n\n\nAlignCenter\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: AlignCenter val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAlignCenter\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AlignCenter val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAlignCenter\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive AlignCenter"
        }, 
        {
            "location": "/format-AlignCenter/#aligncenter", 
            "text": "primitive val AlignCenter", 
            "title": "AlignCenter"
        }, 
        {
            "location": "/format-AlignCenter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-AlignCenter/#create", 
            "text": "new val create()\n: AlignCenter val^", 
            "title": "create"
        }, 
        {
            "location": "/format-AlignCenter/#returns", 
            "text": "AlignCenter  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignCenter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-AlignCenter/#eq", 
            "text": "fun box eq(\n  that: AlignCenter val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-AlignCenter/#parameters", 
            "text": "that:  AlignCenter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-AlignCenter/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-AlignCenter/#ne", 
            "text": "fun box ne(\n  that: AlignCenter val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-AlignCenter/#parameters_1", 
            "text": "that:  AlignCenter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-AlignCenter/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-Align/", 
            "text": "Align\n\n\ntype Align is\n  (AlignLeft val | AlignRight val | AlignCenter val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)", 
            "title": "type Align"
        }, 
        {
            "location": "/format-Align/#align", 
            "text": "type Align is\n  (AlignLeft val | AlignRight val | AlignCenter val)", 
            "title": "Align"
        }, 
        {
            "location": "/format-Align/#type-alias-for", 
            "text": "( AlignLeft  val |  AlignRight  val |  AlignCenter  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/format-_FormatInt/", 
            "text": "_FormatInt\n\n\nWorker type providing to string conversions for integers.\n\n\nprimitive val _FormatInt\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FormatInt val^\n\n\n\n\nReturns\n\n\n\n\n_FormatInt\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nu8\n\n\nfun box u8(\n  x: U8 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU8\n val\n\n\nneg: \nBool\n val\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val)\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)\n\n\nprec: \nUSize\n val\n\n\nwidth: \nUSize\n val\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)\n\n\nfill: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nu16\n\n\nfun box u16(\n  x: U16 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU16\n val\n\n\nneg: \nBool\n val\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val)\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)\n\n\nprec: \nUSize\n val\n\n\nwidth: \nUSize\n val\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)\n\n\nfill: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nu32\n\n\nfun box u32(\n  x: U32 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU32\n val\n\n\nneg: \nBool\n val\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val)\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)\n\n\nprec: \nUSize\n val\n\n\nwidth: \nUSize\n val\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)\n\n\nfill: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nu64\n\n\nfun box u64(\n  x: U64 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\nneg: \nBool\n val\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val)\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)\n\n\nprec: \nUSize\n val\n\n\nwidth: \nUSize\n val\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)\n\n\nfill: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\nu128\n\n\nfun box u128(\n  x: U128 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nU128\n val\n\n\nneg: \nBool\n val\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val) = seq\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val) = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FormatInt val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FormatInt\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FormatInt val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FormatInt\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_large\n\n\nfun box _large()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_small\n\n\nfun box _small()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_fmt_int\n\n\nfun box _fmt_int(\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val))\n: (U32 val , String val , String val)\n\n\n\n\nParameters\n\n\n\n\nfmt: (\nFormatDefault\n val | \nFormatUTF32\n val | \nFormatBinary\n val | \n    \nFormatBinaryBare\n val | \nFormatOctal\n val | \nFormatOctalBare\n val | \n    \nFormatHex\n val | \nFormatHexBare\n val | \nFormatHexSmall\n val | \n    \nFormatHexSmallBare\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nString\n val , \nString\n val)\n\n\n\n\n\n\n_prefix\n\n\nfun box _prefix(\n  neg: Bool val,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val))\n: String val\n\n\n\n\nParameters\n\n\n\n\nneg: \nBool\n val\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val)\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_extend_digits\n\n\nfun box _extend_digits(\n  s: String ref,\n  digits: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n ref\n\n\ndigits: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pad\n\n\nfun box _pad(\n  s: String ref,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n ref\n\n\nwidth: \nUSize\n val\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val)\n\n\nfill: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "primitive _FormatInt"
        }, 
        {
            "location": "/format-_FormatInt/#_formatint", 
            "text": "Worker type providing to string conversions for integers.  primitive val _FormatInt", 
            "title": "_FormatInt"
        }, 
        {
            "location": "/format-_FormatInt/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-_FormatInt/#create", 
            "text": "new val create()\n: _FormatInt val^", 
            "title": "create"
        }, 
        {
            "location": "/format-_FormatInt/#returns", 
            "text": "_FormatInt  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-_FormatInt/#u8", 
            "text": "fun box u8(\n  x: U8 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^", 
            "title": "u8"
        }, 
        {
            "location": "/format-_FormatInt/#parameters", 
            "text": "x:  U8  val  neg:  Bool  val  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val)  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)  prec:  USize  val  width:  USize  val  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val)  fill:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#u16", 
            "text": "fun box u16(\n  x: U16 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^", 
            "title": "u16"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_1", 
            "text": "x:  U16  val  neg:  Bool  val  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val)  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)  prec:  USize  val  width:  USize  val  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val)  fill:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_2", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#u32", 
            "text": "fun box u32(\n  x: U32 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^", 
            "title": "u32"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_2", 
            "text": "x:  U32  val  neg:  Bool  val  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val)  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)  prec:  USize  val  width:  USize  val  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val)  fill:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#u64", 
            "text": "fun box u64(\n  x: U64 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val),\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val),\n  prec: USize val,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: String iso^", 
            "title": "u64"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_3", 
            "text": "x:  U64  val  neg:  Bool  val  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val)  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)  prec:  USize  val  width:  USize  val  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val)  fill:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_4", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#u128", 
            "text": "fun box u128(\n  x: U128 val,\n  neg: Bool val,\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^", 
            "title": "u128"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_4", 
            "text": "x:  U128  val  neg:  Bool  val  fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val) = seq  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val) = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_5", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#eq", 
            "text": "fun box eq(\n  that: _FormatInt val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_5", 
            "text": "that:  _FormatInt  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#ne", 
            "text": "fun box ne(\n  that: _FormatInt val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_6", 
            "text": "that:  _FormatInt  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/format-_FormatInt/#_large", 
            "text": "fun box _large()\n: String val", 
            "title": "_large"
        }, 
        {
            "location": "/format-_FormatInt/#returns_8", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#_small", 
            "text": "fun box _small()\n: String val", 
            "title": "_small"
        }, 
        {
            "location": "/format-_FormatInt/#returns_9", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#_fmt_int", 
            "text": "fun box _fmt_int(\n  fmt: (FormatDefault val | FormatUTF32 val | FormatBinary val | \n    FormatBinaryBare val | FormatOctal val | FormatOctalBare val | \n    FormatHex val | FormatHexBare val | FormatHexSmall val | \n    FormatHexSmallBare val))\n: (U32 val , String val , String val)", 
            "title": "_fmt_int"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_7", 
            "text": "fmt: ( FormatDefault  val |  FormatUTF32  val |  FormatBinary  val | \n     FormatBinaryBare  val |  FormatOctal  val |  FormatOctalBare  val | \n     FormatHex  val |  FormatHexBare  val |  FormatHexSmall  val | \n     FormatHexSmallBare  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_10", 
            "text": "( U32  val ,  String  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#_prefix", 
            "text": "fun box _prefix(\n  neg: Bool val,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val))\n: String val", 
            "title": "_prefix"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_8", 
            "text": "neg:  Bool  val  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_11", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#_extend_digits", 
            "text": "fun box _extend_digits(\n  s: String ref,\n  digits: USize val)\n: None val", 
            "title": "_extend_digits"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_9", 
            "text": "s:  String  ref  digits:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatInt/#_pad", 
            "text": "fun box _pad(\n  s: String ref,\n  width: USize val,\n  align: (AlignLeft val | AlignRight val | AlignCenter val),\n  fill: U32 val)\n: None val", 
            "title": "_pad"
        }, 
        {
            "location": "/format-_FormatInt/#parameters_10", 
            "text": "s:  String  ref  width:  USize  val  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val)  fill:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatInt/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatFloat/", 
            "text": "_FormatFloat\n\n\nWorker type providing to string conversions for floats.\n\n\nprimitive val _FormatFloat\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FormatFloat val^\n\n\n\n\nReturns\n\n\n\n\n_FormatFloat\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nf64\n\n\nfun box f64(\n  x: F64 val,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nx: \nF64\n val\n\n\nfmt: (\nFormatDefault\n val | \nFormatExp\n val | \nFormatExpLarge\n val | \n    \nFormatFix\n val | \nFormatFixLarge\n val | \nFormatGeneral\n val | \n    \nFormatGeneralLarge\n val) = seq\n\n\nprefix: (\nPrefixDefault\n val | \nPrefixSpace\n val | \nPrefixSign\n val) = seq\n\n\nprec: \nUSize\n val = seq\n\n\nwidth: \nUSize\n val = seq\n\n\nalign: (\nAlignLeft\n val | \nAlignRight\n val | \nAlignCenter\n val) = seq\n\n\nfill: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FormatFloat val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FormatFloat\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FormatFloat val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FormatFloat\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FormatFloat"
        }, 
        {
            "location": "/format-_FormatFloat/#_formatfloat", 
            "text": "Worker type providing to string conversions for floats.  primitive val _FormatFloat", 
            "title": "_FormatFloat"
        }, 
        {
            "location": "/format-_FormatFloat/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/format-_FormatFloat/#create", 
            "text": "new val create()\n: _FormatFloat val^", 
            "title": "create"
        }, 
        {
            "location": "/format-_FormatFloat/#returns", 
            "text": "_FormatFloat  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatFloat/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/format-_FormatFloat/#f64", 
            "text": "fun box f64(\n  x: F64 val,\n  fmt: (FormatDefault val | FormatExp val | FormatExpLarge val | \n    FormatFix val | FormatFixLarge val | FormatGeneral val | \n    FormatGeneralLarge val) = seq,\n  prefix: (PrefixDefault val | PrefixSpace val | PrefixSign val) = seq,\n  prec: USize val = seq,\n  width: USize val = seq,\n  align: (AlignLeft val | AlignRight val | AlignCenter val) = seq,\n  fill: U32 val = seq)\n: String iso^", 
            "title": "f64"
        }, 
        {
            "location": "/format-_FormatFloat/#parameters", 
            "text": "x:  F64  val  fmt: ( FormatDefault  val |  FormatExp  val |  FormatExpLarge  val | \n     FormatFix  val |  FormatFixLarge  val |  FormatGeneral  val | \n     FormatGeneralLarge  val) = seq  prefix: ( PrefixDefault  val |  PrefixSpace  val |  PrefixSign  val) = seq  prec:  USize  val = seq  width:  USize  val = seq  align: ( AlignLeft  val |  AlignRight  val |  AlignCenter  val) = seq  fill:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatFloat/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatFloat/#eq", 
            "text": "fun box eq(\n  that: _FormatFloat val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/format-_FormatFloat/#parameters_1", 
            "text": "that:  _FormatFloat  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatFloat/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/format-_FormatFloat/#ne", 
            "text": "fun box ne(\n  that: _FormatFloat val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/format-_FormatFloat/#parameters_2", 
            "text": "that:  _FormatFloat  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/format-_FormatFloat/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob--index/", 
            "text": "Glob package\n\n\nThe Glob package provides the ability find all pathnames matching a given\npattern based on Unix shell rules. Its adapted from the\n\nglob2 python module\n.\n\n\nSee \nprimitive Glob\n for additional usage details.\n\n\nPublic Types\n\n\n\n\ninterface GlobHandler\n\n\nprimitive Glob\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _FileHelper", 
            "title": "Package"
        }, 
        {
            "location": "/glob--index/#glob-package", 
            "text": "The Glob package provides the ability find all pathnames matching a given\npattern based on Unix shell rules. Its adapted from the glob2 python module .  See  primitive Glob  for additional usage details.", 
            "title": "Glob package"
        }, 
        {
            "location": "/glob--index/#public-types", 
            "text": "interface GlobHandler  primitive Glob", 
            "title": "Public Types"
        }, 
        {
            "location": "/glob--index/#private-types", 
            "text": "primitive _FileHelper", 
            "title": "Private Types"
        }, 
        {
            "location": "/glob-GlobHandler/", 
            "text": "GlobHandler\n\n\nA handler for \nGlob.iglob\n. Each path which matches the glob will be called\nwith the groups that matched the various wildcards supplies in the\n\nmatch_groups\n array.\n\n\ninterface ref GlobHandler\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  path: FilePath val,\n  match_groups: Array[String val] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\npath: \nFilePath\n val\n\n\nmatch_groups: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface GlobHandler"
        }, 
        {
            "location": "/glob-GlobHandler/#globhandler", 
            "text": "A handler for  Glob.iglob . Each path which matches the glob will be called\nwith the groups that matched the various wildcards supplies in the match_groups  array.  interface ref GlobHandler", 
            "title": "GlobHandler"
        }, 
        {
            "location": "/glob-GlobHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-GlobHandler/#apply", 
            "text": "fun ref apply(\n  path: FilePath val,\n  match_groups: Array[String val] ref)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/glob-GlobHandler/#parameters", 
            "text": "path:  FilePath  val  match_groups:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-GlobHandler/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/", 
            "text": "Glob\n\n\nFilename matching and globbing with shell patterns.\n\n\nfnmatch(file_name, pattern)\n matches according to the local convention.\n\nfnmatchcase(file_name, pattern)\n always takes case into account. The\nfunctions operate by translating the pattern into a regular expression.\n\n\nThe function translate(PATTERN) returns a regular expression corresponding to\nPATTERN.\n\n\nPatterns are Unix shell style:\n    *       | matches multiple characters within a directory\n    **      | matches multiple characters across directories\n    ?       | matches any single character\n    [seq]   | matches any character in seq\n    [!seq]  | matches any char not in seq\n\n\nprimitive val Glob\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Glob val^\n\n\n\n\nReturns\n\n\n\n\nGlob\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nfnmatch\n\n\nTests whether \nname\n matches \npattern\n.\n\n\nAn initial period in \nname\n is not special.\n\n\nBoth \nname\n and \npattern\n are first case-normalized if the operating system\nrequires it. If you don't want this, use \nfnmatchcase\n.\n\n\nfun box fnmatch(\n  name: String val,\n  pattern: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\npattern: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nfnmatchcase\n\n\nTests whether \nname\n matches \npattern\n, including case.\n\n\nfun box fnmatchcase(\n  name: String val,\n  pattern: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\npattern: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nfilter\n\n\nReturns \nname\n and the matching subgroups for \nnames\n that match \npattern\n.\n\n\nAll strings are first case-normalized if the operating system requires it.\n\n\nfun box filter(\n  names: Array[String val] ref,\n  pattern: String val)\n: Array[(String val , Array[String val] ref)] val\n\n\n\n\nParameters\n\n\n\n\nnames: \nArray\n[\nString\n val] ref\n\n\npattern: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[(\nString\n val , \nArray\n[\nString\n val] ref)] val\n\n\n\n\n\n\ntranslate\n\n\nTranslates a shell \npattern\n to a regular expression.\nThere is no way to quote meta-characters.\n\n\nfun box translate(\n  pat: String val)\n: String ref^\n\n\n\n\nParameters\n\n\n\n\npat: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n ref^\n\n\n\n\n\n\nglob\n\n\nReturns an Array[FilePath] for each path below \nroot_path\n that matches\n\npattern\n.\n\n\nThe pattern may contain shell-style wildcards. See the type documentation\non \nGlob\n for details.\n\n\nfun box glob(\n  root_path: FilePath val,\n  pattern: String val)\n: Array[FilePath val] ref\n\n\n\n\nParameters\n\n\n\n\nroot_path: \nFilePath\n val\n\n\npattern: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nFilePath\n val] ref\n\n\n\n\n\n\niglob\n\n\nCalls \nGlobHandler.apply\n for each path below \nroot\n that matches\n\npattern\n.\n\n\nThe pattern may contain shell-style wildcards. See the type documentation\non \nGlob\n for details.\n\n\nfun box iglob(\n  root: FilePath val,\n  pattern: String val,\n  glob_handler: GlobHandler ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nroot: \nFilePath\n val\n\n\npattern: \nString\n val\n\n\nglob_handler: \nGlobHandler\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Glob val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nGlob\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Glob val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nGlob\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_apply_glob_to_walk\n\n\nfun box _apply_glob_to_walk(\n  pattern: String val,\n  compiled_pattern: Regex ref,\n  root: FilePath val,\n  glob_handler: GlobHandler ref,\n  dir: FilePath val,\n  entries: Array[String val] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\npattern: \nString\n val\n\n\ncompiled_pattern: \nRegex\n ref\n\n\nroot: \nFilePath\n val\n\n\nglob_handler: \nGlobHandler\n ref\n\n\ndir: \nFilePath\n val\n\n\nentries: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "primitive Glob"
        }, 
        {
            "location": "/glob-Glob/#glob", 
            "text": "Filename matching and globbing with shell patterns.  fnmatch(file_name, pattern)  matches according to the local convention. fnmatchcase(file_name, pattern)  always takes case into account. The\nfunctions operate by translating the pattern into a regular expression.  The function translate(PATTERN) returns a regular expression corresponding to\nPATTERN.  Patterns are Unix shell style:\n    *       | matches multiple characters within a directory\n    **      | matches multiple characters across directories\n    ?       | matches any single character\n    [seq]   | matches any character in seq\n    [!seq]  | matches any char not in seq  primitive val Glob", 
            "title": "Glob"
        }, 
        {
            "location": "/glob-Glob/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-Glob/#create", 
            "text": "new val create()\n: Glob val^", 
            "title": "create"
        }, 
        {
            "location": "/glob-Glob/#returns", 
            "text": "Glob  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-Glob/#fnmatch", 
            "text": "Tests whether  name  matches  pattern .  An initial period in  name  is not special.  Both  name  and  pattern  are first case-normalized if the operating system\nrequires it. If you don't want this, use  fnmatchcase .  fun box fnmatch(\n  name: String val,\n  pattern: String val)\n: Bool val", 
            "title": "fnmatch"
        }, 
        {
            "location": "/glob-Glob/#parameters", 
            "text": "name:  String  val  pattern:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#fnmatchcase", 
            "text": "Tests whether  name  matches  pattern , including case.  fun box fnmatchcase(\n  name: String val,\n  pattern: String val)\n: Bool val", 
            "title": "fnmatchcase"
        }, 
        {
            "location": "/glob-Glob/#parameters_1", 
            "text": "name:  String  val  pattern:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#filter", 
            "text": "Returns  name  and the matching subgroups for  names  that match  pattern .  All strings are first case-normalized if the operating system requires it.  fun box filter(\n  names: Array[String val] ref,\n  pattern: String val)\n: Array[(String val , Array[String val] ref)] val", 
            "title": "filter"
        }, 
        {
            "location": "/glob-Glob/#parameters_2", 
            "text": "names:  Array [ String  val] ref  pattern:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_3", 
            "text": "Array [( String  val ,  Array [ String  val] ref)] val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#translate", 
            "text": "Translates a shell  pattern  to a regular expression.\nThere is no way to quote meta-characters.  fun box translate(\n  pat: String val)\n: String ref^", 
            "title": "translate"
        }, 
        {
            "location": "/glob-Glob/#parameters_3", 
            "text": "pat:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_4", 
            "text": "String  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#glob_1", 
            "text": "Returns an Array[FilePath] for each path below  root_path  that matches pattern .  The pattern may contain shell-style wildcards. See the type documentation\non  Glob  for details.  fun box glob(\n  root_path: FilePath val,\n  pattern: String val)\n: Array[FilePath val] ref", 
            "title": "glob"
        }, 
        {
            "location": "/glob-Glob/#parameters_4", 
            "text": "root_path:  FilePath  val  pattern:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_5", 
            "text": "Array [ FilePath  val] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#iglob", 
            "text": "Calls  GlobHandler.apply  for each path below  root  that matches pattern .  The pattern may contain shell-style wildcards. See the type documentation\non  Glob  for details.  fun box iglob(\n  root: FilePath val,\n  pattern: String val,\n  glob_handler: GlobHandler ref)\n: None val", 
            "title": "iglob"
        }, 
        {
            "location": "/glob-Glob/#parameters_5", 
            "text": "root:  FilePath  val  pattern:  String  val  glob_handler:  GlobHandler  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#eq", 
            "text": "fun box eq(\n  that: Glob val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/glob-Glob/#parameters_6", 
            "text": "that:  Glob  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#ne", 
            "text": "fun box ne(\n  that: Glob val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/glob-Glob/#parameters_7", 
            "text": "that:  Glob  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-Glob/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/glob-Glob/#_apply_glob_to_walk", 
            "text": "fun box _apply_glob_to_walk(\n  pattern: String val,\n  compiled_pattern: Regex ref,\n  root: FilePath val,\n  glob_handler: GlobHandler ref,\n  dir: FilePath val,\n  entries: Array[String val] ref)\n: None val", 
            "title": "_apply_glob_to_walk"
        }, 
        {
            "location": "/glob-Glob/#parameters_8", 
            "text": "pattern:  String  val  compiled_pattern:  Regex  ref  root:  FilePath  val  glob_handler:  GlobHandler  ref  dir:  FilePath  val  entries:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-Glob/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-_FileHelper/", 
            "text": "_FileHelper\n\n\nprimitive val _FileHelper\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FileHelper val^\n\n\n\n\nReturns\n\n\n\n\n_FileHelper\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nmake_files\n\n\nfun box make_files(\n  h: TestHelper val,\n  files: Array[String val] ref)\n: FilePath val ?\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\nfiles: \nArray\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\nFilePath\n val ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FileHelper val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FileHelper\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FileHelper val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FileHelper\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FileHelper"
        }, 
        {
            "location": "/glob-_FileHelper/#_filehelper", 
            "text": "primitive val _FileHelper", 
            "title": "_FileHelper"
        }, 
        {
            "location": "/glob-_FileHelper/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/glob-_FileHelper/#create", 
            "text": "new val create()\n: _FileHelper val^", 
            "title": "create"
        }, 
        {
            "location": "/glob-_FileHelper/#returns", 
            "text": "_FileHelper  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-_FileHelper/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/glob-_FileHelper/#make_files", 
            "text": "fun box make_files(\n  h: TestHelper val,\n  files: Array[String val] ref)\n: FilePath val ?", 
            "title": "make_files"
        }, 
        {
            "location": "/glob-_FileHelper/#parameters", 
            "text": "h:  TestHelper  val  files:  Array [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-_FileHelper/#returns_1", 
            "text": "FilePath  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-_FileHelper/#eq", 
            "text": "fun box eq(\n  that: _FileHelper val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/glob-_FileHelper/#parameters_1", 
            "text": "that:  _FileHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-_FileHelper/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/glob-_FileHelper/#ne", 
            "text": "fun box ne(\n  that: _FileHelper val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/glob-_FileHelper/#parameters_2", 
            "text": "that:  _FileHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/glob-_FileHelper/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini--index/", 
            "text": "Ini package\n\n\nThe Ini package provides support for parsing\n\nINI file\n formatted text.\n\n\n\n\nCurrently \ndoes not\n support multi-line entries.\n\n\nAny keys not in a section will be placed in the section \"\"\n\n\n\n\nExample code\n\n\n// Parses the file 'example.ini' in the current working directory\n// Output all the content\nuse \nini\n\nuse \nfiles\n\n\nactor Main\n  new create(env:Env) =\n\n    try\n      let ini_file = File(FilePath(env.root as AmbientAuth, \nexample.ini\n)?)\n      let sections = IniParse(ini_file.lines())?\n      for section in sections.keys() do\n        env.out.print(\nSection name is: \n + section)\n        for key in sections(section)?.keys() do\n          env.out.print(key + \n = \n + sections(section)?(key)?)\n        end\n      end\n    end\n\n\n\n\nPublic Types\n\n\n\n\ntype IniMap\n\n\nprimitive IniParse\n\n\nprimitive IniIncompleteSection\n\n\nprimitive IniNoDelimiter\n\n\ntype IniError\n\n\ninterface IniNotify\n\n\nprimitive Ini", 
            "title": "Package"
        }, 
        {
            "location": "/ini--index/#ini-package", 
            "text": "The Ini package provides support for parsing INI file  formatted text.   Currently  does not  support multi-line entries.  Any keys not in a section will be placed in the section \"\"", 
            "title": "Ini package"
        }, 
        {
            "location": "/ini--index/#example-code", 
            "text": "// Parses the file 'example.ini' in the current working directory\n// Output all the content\nuse  ini \nuse  files \n\nactor Main\n  new create(env:Env) = \n    try\n      let ini_file = File(FilePath(env.root as AmbientAuth,  example.ini )?)\n      let sections = IniParse(ini_file.lines())?\n      for section in sections.keys() do\n        env.out.print( Section name is:   + section)\n        for key in sections(section)?.keys() do\n          env.out.print(key +   =   + sections(section)?(key)?)\n        end\n      end\n    end", 
            "title": "Example code"
        }, 
        {
            "location": "/ini--index/#public-types", 
            "text": "type IniMap  primitive IniParse  primitive IniIncompleteSection  primitive IniNoDelimiter  type IniError  interface IniNotify  primitive Ini", 
            "title": "Public Types"
        }, 
        {
            "location": "/ini-IniMap/", 
            "text": "IniMap\n\n\ntype IniMap is\n  HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref\n\n\n\n\nType Alias For\n\n\n\n\nHashMap\n[\nString\n val, \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref, \nHashEq\n[\nString\n val] val] ref", 
            "title": "type IniMap"
        }, 
        {
            "location": "/ini-IniMap/#inimap", 
            "text": "type IniMap is\n  HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref", 
            "title": "IniMap"
        }, 
        {
            "location": "/ini-IniMap/#type-alias-for", 
            "text": "HashMap [ String  val,  HashMap [ String  val,  String  val,  HashEq [ String  val] val] ref,  HashEq [ String  val] val] ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/ini-IniParse/", 
            "text": "IniParse\n\n\nThis is used to parse INI formatted text as a nested map of strings.\n\n\nprimitive val IniParse\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: IniParse val^\n\n\n\n\nReturns\n\n\n\n\nIniParse\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nThis accepts a string iterator and returns a nested map of strings. If\nparsing fails, an error is raised.\n\n\nfun box apply(\n  lines: Iterator[String val] ref)\n: HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ?\n\n\n\n\nParameters\n\n\n\n\nlines: \nIterator\n[\nString\n val] ref\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[\nString\n val, \nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref, \nHashEq\n[\nString\n val] val] ref^ ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: IniParse val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIniParse\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: IniParse val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIniParse\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive IniParse"
        }, 
        {
            "location": "/ini-IniParse/#iniparse", 
            "text": "This is used to parse INI formatted text as a nested map of strings.  primitive val IniParse", 
            "title": "IniParse"
        }, 
        {
            "location": "/ini-IniParse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-IniParse/#create", 
            "text": "new val create()\n: IniParse val^", 
            "title": "create"
        }, 
        {
            "location": "/ini-IniParse/#returns", 
            "text": "IniParse  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniParse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniParse/#apply", 
            "text": "This accepts a string iterator and returns a nested map of strings. If\nparsing fails, an error is raised.  fun box apply(\n  lines: Iterator[String val] ref)\n: HashMap[String val, HashMap[String val, String val, HashEq[String val] val] ref, HashEq[String val] val] ref^ ?", 
            "title": "apply"
        }, 
        {
            "location": "/ini-IniParse/#parameters", 
            "text": "lines:  Iterator [ String  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniParse/#returns_1", 
            "text": "HashMap [ String  val,  HashMap [ String  val,  String  val,  HashEq [ String  val] val] ref,  HashEq [ String  val] val] ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniParse/#eq", 
            "text": "fun box eq(\n  that: IniParse val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/ini-IniParse/#parameters_1", 
            "text": "that:  IniParse  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniParse/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniParse/#ne", 
            "text": "fun box ne(\n  that: IniParse val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/ini-IniParse/#parameters_2", 
            "text": "that:  IniParse  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniParse/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniIncompleteSection/", 
            "text": "IniIncompleteSection\n\n\nprimitive val IniIncompleteSection\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: IniIncompleteSection val^\n\n\n\n\nReturns\n\n\n\n\nIniIncompleteSection\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: IniIncompleteSection val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIniIncompleteSection\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: IniIncompleteSection val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIniIncompleteSection\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive IniIncompleteSection"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#iniincompletesection", 
            "text": "primitive val IniIncompleteSection", 
            "title": "IniIncompleteSection"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#create", 
            "text": "new val create()\n: IniIncompleteSection val^", 
            "title": "create"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#returns", 
            "text": "IniIncompleteSection  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#eq", 
            "text": "fun box eq(\n  that: IniIncompleteSection val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#parameters", 
            "text": "that:  IniIncompleteSection  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#ne", 
            "text": "fun box ne(\n  that: IniIncompleteSection val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#parameters_1", 
            "text": "that:  IniIncompleteSection  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniIncompleteSection/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniNoDelimiter/", 
            "text": "IniNoDelimiter\n\n\nprimitive val IniNoDelimiter\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: IniNoDelimiter val^\n\n\n\n\nReturns\n\n\n\n\nIniNoDelimiter\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: IniNoDelimiter val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIniNoDelimiter\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: IniNoDelimiter val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIniNoDelimiter\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive IniNoDelimiter"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#ininodelimiter", 
            "text": "primitive val IniNoDelimiter", 
            "title": "IniNoDelimiter"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#create", 
            "text": "new val create()\n: IniNoDelimiter val^", 
            "title": "create"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#returns", 
            "text": "IniNoDelimiter  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#eq", 
            "text": "fun box eq(\n  that: IniNoDelimiter val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#parameters", 
            "text": "that:  IniNoDelimiter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#ne", 
            "text": "fun box ne(\n  that: IniNoDelimiter val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#parameters_1", 
            "text": "that:  IniNoDelimiter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniNoDelimiter/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniError/", 
            "text": "IniError\n\n\ntype IniError is\n  (IniIncompleteSection val | IniNoDelimiter val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nIniIncompleteSection\n val | \nIniNoDelimiter\n val)", 
            "title": "type IniError"
        }, 
        {
            "location": "/ini-IniError/#inierror", 
            "text": "type IniError is\n  (IniIncompleteSection val | IniNoDelimiter val)", 
            "title": "IniError"
        }, 
        {
            "location": "/ini-IniError/#type-alias-for", 
            "text": "( IniIncompleteSection  val |  IniNoDelimiter  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/ini-IniNotify/", 
            "text": "IniNotify\n\n\nNotifications for INI parsing.\n\n\ninterface ref IniNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nThis is called for every valid entry in the INI file. If key/value pairs\noccur before a section name, the section can be an empty string. Return\nfalse to halt processing.\n\n\nfun ref apply(\n  section: String val,\n  key: String val,\n  value: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsection: \nString\n val\n\n\nkey: \nString\n val\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nadd_section\n\n\nThis is called for every valid section in the INI file. Return false\nto halt processing.\n\n\nfun ref add_section(\n  section: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsection: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nerrors\n\n\nThis is called for each error encountered. Return false to halt processing.\n\n\nfun ref errors(\n  line: USize val,\n  err: (IniIncompleteSection val | IniNoDelimiter val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nline: \nUSize\n val\n\n\nerr: (\nIniIncompleteSection\n val | \nIniNoDelimiter\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "interface IniNotify"
        }, 
        {
            "location": "/ini-IniNotify/#ininotify", 
            "text": "Notifications for INI parsing.  interface ref IniNotify", 
            "title": "IniNotify"
        }, 
        {
            "location": "/ini-IniNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-IniNotify/#apply", 
            "text": "This is called for every valid entry in the INI file. If key/value pairs\noccur before a section name, the section can be an empty string. Return\nfalse to halt processing.  fun ref apply(\n  section: String val,\n  key: String val,\n  value: String val)\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/ini-IniNotify/#parameters", 
            "text": "section:  String  val  key:  String  val  value:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniNotify/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniNotify/#add_section", 
            "text": "This is called for every valid section in the INI file. Return false\nto halt processing.  fun ref add_section(\n  section: String val)\n: Bool val", 
            "title": "add_section"
        }, 
        {
            "location": "/ini-IniNotify/#parameters_1", 
            "text": "section:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniNotify/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-IniNotify/#errors", 
            "text": "This is called for each error encountered. Return false to halt processing.  fun ref errors(\n  line: USize val,\n  err: (IniIncompleteSection val | IniNoDelimiter val))\n: Bool val", 
            "title": "errors"
        }, 
        {
            "location": "/ini-IniNotify/#parameters_2", 
            "text": "line:  USize  val  err: ( IniIncompleteSection  val |  IniNoDelimiter  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-IniNotify/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-Ini/", 
            "text": "Ini\n\n\nA streaming parser for INI formatted lines of test.\n\n\nprimitive val Ini\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Ini val^\n\n\n\n\nReturns\n\n\n\n\nIni\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nThis accepts a string iterator and calls the IniNotify for each new entry.\nIf any errors are encountered, this will return false. Otherwise, it\nreturns true.\n\n\nfun box apply(\n  lines: Iterator[String box] ref,\n  f: IniNotify ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nlines: \nIterator\n[\nString\n box] ref\n\n\nf: \nIniNotify\n ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Ini val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIni\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Ini val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nIni\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Ini"
        }, 
        {
            "location": "/ini-Ini/#ini", 
            "text": "A streaming parser for INI formatted lines of test.  primitive val Ini", 
            "title": "Ini"
        }, 
        {
            "location": "/ini-Ini/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ini-Ini/#create", 
            "text": "new val create()\n: Ini val^", 
            "title": "create"
        }, 
        {
            "location": "/ini-Ini/#returns", 
            "text": "Ini  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-Ini/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ini-Ini/#apply", 
            "text": "This accepts a string iterator and calls the IniNotify for each new entry.\nIf any errors are encountered, this will return false. Otherwise, it\nreturns true.  fun box apply(\n  lines: Iterator[String box] ref,\n  f: IniNotify ref)\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/ini-Ini/#parameters", 
            "text": "lines:  Iterator [ String  box] ref  f:  IniNotify  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-Ini/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-Ini/#eq", 
            "text": "fun box eq(\n  that: Ini val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/ini-Ini/#parameters_1", 
            "text": "that:  Ini  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-Ini/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ini-Ini/#ne", 
            "text": "fun box ne(\n  that: Ini val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/ini-Ini/#parameters_2", 
            "text": "that:  Ini  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ini-Ini/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools--index/", 
            "text": "Itertools Package\n\n\nThe itertools package provides the \nIter\n class for doing useful things with\niterators. It is Inspired by Python's itertools library, Rust's Iterator, and\nElixir's Enum and Stream.\n\n\nIter\n\n\nThe Iter class wraps iterators so that additional methods may be applied to it.\nSome methods, such as fold and collect, run through the underlying iterator in\norder to return a result. Others, such as map and filter, are lazy. This means\nthat they return another Iter so that the resulting values are computed one by\none as needed. Lazy methods return Iter types.\n\n\nFor example, the following code creates an Iter from the values of an array\ncontaining the numbers 1 through 5, increments each number by one, filters out\nany odd numbers, and prints the rest.\n\n\nlet xs = Iter[I64]([1; 2; 3; 4; 5].values())\n  .map[I64]({(x) =\n x + 1 })\n  .filter({(x) =\n (x % 2) == 0 })\n  .map[None]({(x) =\n env.out.print(x.string()) })\n\n\n\n\nThis will result in an iterator that prints the numbers 2, 4, and 6. However,\ndue to the lazy nature of the map and filter, no iteration has actually occurred\nand nothing will be printed. One solution to this would be to loop over the\nresulting Iter as so:\n\n\nfor x in xs do\n  None\nend\n\n\n\n\nThis will trigger the iteration and print out the values 2, 4, and 6. This is\nwhere the \nrun\n method comes in handy by doing the iteration without the need\nfor a loop. So the final code would be as follows:\n\n\nIter[I64]([1; 2; 3; 4; 5].values())\n  .map[I64]({(x) =\n x + 1 })\n  .filter({(x) =\n (x % 2) == 0 })\n  .map[None]({(x) =\n env.out.print(x.string()) })\n  .run()\n\n\n\n\nOutput:\n\n\n2\n4\n6\n\n\n\n\nPublic Types\n\n\n\n\nclass Iter\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _None\n\n\nclass _EmptyIter", 
            "title": "Package"
        }, 
        {
            "location": "/itertools--index/#itertools-package", 
            "text": "The itertools package provides the  Iter  class for doing useful things with\niterators. It is Inspired by Python's itertools library, Rust's Iterator, and\nElixir's Enum and Stream.", 
            "title": "Itertools Package"
        }, 
        {
            "location": "/itertools--index/#iter", 
            "text": "The Iter class wraps iterators so that additional methods may be applied to it.\nSome methods, such as fold and collect, run through the underlying iterator in\norder to return a result. Others, such as map and filter, are lazy. This means\nthat they return another Iter so that the resulting values are computed one by\none as needed. Lazy methods return Iter types.  For example, the following code creates an Iter from the values of an array\ncontaining the numbers 1 through 5, increments each number by one, filters out\nany odd numbers, and prints the rest.  let xs = Iter[I64]([1; 2; 3; 4; 5].values())\n  .map[I64]({(x) =  x + 1 })\n  .filter({(x) =  (x % 2) == 0 })\n  .map[None]({(x) =  env.out.print(x.string()) })  This will result in an iterator that prints the numbers 2, 4, and 6. However,\ndue to the lazy nature of the map and filter, no iteration has actually occurred\nand nothing will be printed. One solution to this would be to loop over the\nresulting Iter as so:  for x in xs do\n  None\nend  This will trigger the iteration and print out the values 2, 4, and 6. This is\nwhere the  run  method comes in handy by doing the iteration without the need\nfor a loop. So the final code would be as follows:  Iter[I64]([1; 2; 3; 4; 5].values())\n  .map[I64]({(x) =  x + 1 })\n  .filter({(x) =  (x % 2) == 0 })\n  .map[None]({(x) =  env.out.print(x.string()) })\n  .run()  Output:  2\n4\n6", 
            "title": "Iter"
        }, 
        {
            "location": "/itertools--index/#public-types", 
            "text": "class Iter", 
            "title": "Public Types"
        }, 
        {
            "location": "/itertools--index/#private-types", 
            "text": "primitive _None  class _EmptyIter", 
            "title": "Private Types"
        }, 
        {
            "location": "/itertools-Iter/", 
            "text": "Iter[A: A]\n\n\nWrapper class containing methods to modify iterators.\n\n\nclass ref Iter[A: A] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  iter: Iterator[A] ref)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\niter: \nIterator\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nchain\n\n\nTake an iterator of iterators and return an Iter containing the\nitems of the first one, then the second one, and so on.\n\n\nExample\n\n\nlet xs = [as I64: 1; 2].values()\nlet ys = [as I64: 3; 4].values()\n\nIter[I64].chain([xs; ys].values())\n\n\n\n\n1 2 3 4\n\n\nnew ref chain(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nouter_iterator: \nIterator\n[\nIterator\n[A] ref] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nrepeat_value\n\n\nCreate an iterator that returns the given value forever.\n\n\nExample\n\n\nIter[U32].repeat_value(7)\n\n\n\n\n7 7 7 7 7 7 7 7 7 ...\n\n\nnew ref repeat_value(\n  value: A)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nmap_stateful[B: B]\n\n\nAllows stateful transformaion of each element from the iterator, similar\nto \nmap\n.\n\n\nfun ref map_stateful[B: B](\n  f: {ref(A!): B ?}[A, B] ref)\n: Iter[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {ref(A!): B ?}[A, B] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[B] ref^\n\n\n\n\n\n\nfilter_stateful\n\n\nAllows filtering of elements based on a stateful adapter, similar to\n\nfilter\n.\n\n\nfun ref filter_stateful(\n  f: {ref(A!): Bool ?}[A] ref)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {ref(A!): Bool ?}[A] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nfilter_map_stateful[B: B]\n\n\nAllows stateful modification to the stream of elements from an iterator,\nsimilar to \nfilter_map\n.\n\n\nfun ref filter_map_stateful[B: B](\n  f: {ref(A!): (B | None) ?}[A, B] ref)\n: Iter[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {ref(A!): (B | None) ?}[A, B] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[B] ref^\n\n\n\n\n\n\nall\n\n\nReturn false if at least one value of the iterator fails to match the\npredicate \nf\n. This method short-circuits at the first value where the\npredicate returns false, otherwise true is returned.\n\n\nExamples\n\n\nIter[I64]([2; 4; 6].values())\n  .all({(x) =\n (x % 2) == 0 })\n\n\n\n\ntrue\n\n\nIter[I64]([2; 3; 4].values())\n  .all({(x) =\n (x % 2) == 0 })\n\n\n\n\nfalse\n\n\nfun ref all(\n  f: {(A!): Bool ?}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nany\n\n\nReturn true if at least one value of the iterator matches the predicate\n\nf\n. This method short-circuits at the first value where the predicate\nreturns true, otherwise false is returned.\n\n\nExamples\n\n\nIter[I64]([2; 4; 6].values())\n  .any({(I64) =\n (x % 2) == 1 })\n\n\n\n\nfalse\n\n\nIter[I64]([2; 3; 4].values())\n  .any({(I64) =\n (x % 2) == 1 })\n\n\n\n\ntrue\n\n\nfun ref any(\n  f: {(A!): Bool ?}[A] box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncollect[optional B: \nSeq\n[A!] ref]\n\n\nPush each value from the iterator into the collection \ncoll\n.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .collect(Array[I64](3))\n\n\n\n\n[1, 2, 3]\n\n\nfun ref collect[optional B: Seq[A!] ref](\n  coll: B)\n: B^\n\n\n\n\nParameters\n\n\n\n\ncoll: B\n\n\n\n\nReturns\n\n\n\n\nB^\n\n\n\n\n\n\ncount\n\n\nReturn the number of values in the iterator.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .count()\n\n\n\n\n3\n\n\nfun ref count()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ncycle\n\n\nRepeatedly cycle through the values from the iterator.\n\n\nWARNING: The values returned by the original iterator are cached, so\nthe input iterator should be finite.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .cycle()\n\n\n\n\n1 2 3 1 2 3 1 2 3 ...\n\n\nfun ref cycle()\n: Iter[A!] ref^\n\n\n\n\nReturns\n\n\n\n\nIter\n[A!] ref^\n\n\n\n\n\n\nenum[optional B: (\nReal\n[B] val \n (\nI8\n val | \nI16\n val | \nI32\n val | \nI64\n val | \nI128\n val | \nILong\n val | \nISize\n val | \nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val | \nF32\n val | \nF64\n val))]\n\n\nAn iterator which yields the current iteration count as well as the next\nvalue from the iterator.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .enum()\n\n\n\n\n(0, 1) (1, 2) (2, 3)\n\n\nfun ref enum[optional B: (Real[B] val \n (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))]()\n: Iter[(B , A)] ref^\n\n\n\n\nReturns\n\n\n\n\nIter\n[(B , A)] ref^\n\n\n\n\n\n\nfilter\n\n\nReturn an iterator that only returns items that match the predicate \nf\n.\n\n\nExample\n\n\nIter[I64]([1; 2; 3; 4; 5; 6].values())\n  .filter({(x) =\n (x % 2) == 0 })\n\n\n\n\n2 4 6\n\n\nfun ref filter(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nfind\n\n\nReturn the nth value in the iterator that satisfies the predicate \nf\n.\n\n\nExamples\n\n\nIter[I64]([1; 2; 3].values())\n  .find({(x) =\n (x % 2) == 0 })\n\n\n\n\n2\n\n\nIter[I64]([1; 2; 3; 4].values())\n  .find({(x) =\n (x % 2) == 0 }, 2)\n\n\n\n\n4\n\n\nfun ref find(\n  f: {(A!): Bool ?}[A] box,\n  n: USize val = seq)\n: A! ?\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\nn: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nA! ?\n\n\n\n\n\n\nfilter_map[B: B]\n\n\nReturn an iterator which applies \nf\n to each element. If \nNone\n is\nreturned, then the iterator will try again by applying \nf\n to the next\nelement. Otherwise, the value of type \nB\n is returned.\n\n\nExample\n\n\nIter[I64]([as I64: 1; -2; 4; 7; -5])\n  .filter_map[USize](\n    {(i: I64): (USize | None) =\n if i \n= 0 then i.usize() end })\n\n\n\n\n1 4 7\n\n\n\n\n```pony\nfun ref filter_map[B: B](\n  f: {(A!): (B | None) ?}[A, B] box)\n: Iter[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): (B | None) ?}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[B] ref^\n\n\n\n\n\n\nflat_map[B: B]\n\n\nReturn an iterator over the values of the iterators produced from the\napplication of the given function.\n\n\nExample\n\n\nIter[String]([\nalpha\n; \nbeta\n; \ngamma\n])\n  .flat_map[U8]({(s: String): Iterator[U8] =\n s.values() })\n\n\n\n\na l p h a b e t a g a m m a\n\n\nfun ref flat_map[B: B](\n  f: {(A!): Iterator[B] ?}[A, B] box)\n: Iter[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Iterator[B] ?}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[B] ref^\n\n\n\n\n\n\nfold[B: B]\n\n\nApply a function to every element, producing an accumulated value.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .fold[I64](0, {(sum, x) =\n sum + x })\n\n\n\n\n6\n\n\nfun ref fold[B: B](\n  acc: B,\n  f: {(B, A!): B^}[A, B] box)\n: B^\n\n\n\n\nParameters\n\n\n\n\nacc: B\n\n\nf: {(B, A!): B^}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nB^\n\n\n\n\n\n\nfold_partial[B: B]\n\n\nA partial version of \nfold\n.\n\n\nfun ref fold_partial[B: B](\n  acc: B,\n  f: {(B, A!): B^ ?}[A, B] box)\n: B^ ?\n\n\n\n\nParameters\n\n\n\n\nacc: B\n\n\nf: {(B, A!): B^ ?}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nB^ ?\n\n\n\n\n\n\nlast\n\n\nReturn the last value of the iterator.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .last()\n\n\n\n\n3\n\n\nfun ref last()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nmap[B: B]\n\n\nReturn an iterator where each item's value is the application of the given\nfunction to the value in the original iterator.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .map[I64]({(x) =\n x * x })\n\n\n\n\n1 4 9\n\n\nfun ref map[B: B](\n  f: {(A!): B ?}[A, B] box)\n: Iter[B] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): B ?}[A, B] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[B] ref^\n\n\n\n\n\n\nnth\n\n\nReturn the nth value of the iterator.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .nth(2)\n\n\n\n\n2\n\n\nfun ref nth(\n  n: USize val)\n: A ?\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nA ?\n\n\n\n\n\n\nrun\n\n\nIterate through the values of the iterator without a for loop. The\nfunction \non_error\n will be called if the iterator's \nhas_next\n method\nreturns true but its \nnext\n method throws an error.\n\n\nExample\n\n\nIter[I64]([1; 2; 3].values())\n  .map[None]({(x) =\n env.out.print(x.string()) })\n  .run()\n\n\n\n\n1\n2\n3\n\n\n\n\nfun ref run(\n  on_error: {ref()}[A] ref = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\non_error: {ref()}[A] ref = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nskip\n\n\nSkip the first n values of the iterator.\n\n\nExample\n\n\nIter[I64]([1; 2; 3; 4; 5; 6].values())\n  .skip(3)\n\n\n\n\n4 5 6\n\n\nIter[I64]([1; 2; 3].values())\n  .skip(3)\n  .has_next()\n\n\n\n\nfalse\n\n\nfun ref skip(\n  n: USize val)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nskip_while\n\n\nSkip values of the iterator while the predicate \nf\n returns true.\n\n\nExample\n\n\nIter[I64]([1; 2; 3; 4; 5; 6].values())\n  .skip_while({(x) =\n x \n 4 })\n\n\n\n\n4 5 6\n\n\nfun ref skip_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\ntake\n\n\nReturn an iterator for the first n elements.\n\n\nExample\n\n\nIter[I64]([1; 2; 3; 4; 5; 6].values())\n  .take(3)\n\n\n\n\n1 2 3\n\n\nfun ref take(\n  n: USize val)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\ntake_while\n\n\nReturn an iterator that returns values while the predicate \nf\n returns\ntrue. This iterator short-circuits the first time that \nf\n returns false or\nraises an error.\n\n\nExample\n\n\nIter[I64]([1; 2; 3; 4; 5; 6].values())\n  .take_while({(x) =\n x \n 4 })\n\n\n\n\n1 2 3\n\n\nfun ref take_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^\n\n\n\n\nParameters\n\n\n\n\nf: {(A!): Bool ?}[A] box\n\n\n\n\nReturns\n\n\n\n\nIter\n[A] ref^\n\n\n\n\n\n\nzip[B: B]\n\n\nZip two iterators together so that each call to next() results in\na tuple with the next value of the first iterator and the next value\nof the second iterator. The number of items returned is the minimum of\nthe number of items returned by the two iterators.\n\n\nExample\n\n\nIter[I64]([1; 2].values())\n  .zip[I64]([3; 4].values())\n\n\n\n\n(1, 3) (2, 4)\n\n\nfun ref zip[B: B](\n  i2: Iterator[B] ref)\n: Iter[(A , B)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B)] ref^\n\n\n\n\n\n\nzip2[B: B, C: C]\n\n\nZip three iterators together so that each call to next() results in\na tuple with the next value of the first iterator, the next value\nof the second iterator, and the value of the third iterator. The\nnumber of items returned is the minimum of the number of items\nreturned by the three iterators.\n\n\nfun ref zip2[B: B, C: C](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Iter[(A , B , C)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B , C)] ref^\n\n\n\n\n\n\nzip3[B: B, C: C, D: D]\n\n\nZip four iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.\n\n\nfun ref zip3[B: B, C: C, D: D](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Iter[(A , B , C , D)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\ni4: \nIterator\n[D] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B , C , D)] ref^\n\n\n\n\n\n\nzip4[B: B, C: C, D: D, E: E]\n\n\nZip five iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.\n\n\nfun ref zip4[B: B, C: C, D: D, E: E](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Iter[(A , B , C , D , E)] ref^\n\n\n\n\nParameters\n\n\n\n\ni2: \nIterator\n[B] ref\n\n\ni3: \nIterator\n[C] ref\n\n\ni4: \nIterator\n[D] ref\n\n\ni5: \nIterator\n[E] ref\n\n\n\n\nReturns\n\n\n\n\nIter\n[(A , B , C , D , E)] ref^", 
            "title": "class Iter"
        }, 
        {
            "location": "/itertools-Iter/#iter91a-a93", 
            "text": "Wrapper class containing methods to modify iterators.  class ref Iter[A: A] is\n  Iterator[A] ref", 
            "title": "Iter[A: A]"
        }, 
        {
            "location": "/itertools-Iter/#implements", 
            "text": "Iterator [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/itertools-Iter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/itertools-Iter/#create", 
            "text": "new ref create(\n  iter: Iterator[A] ref)\n: Iter[A] ref^", 
            "title": "create"
        }, 
        {
            "location": "/itertools-Iter/#parameters", 
            "text": "iter:  Iterator [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#chain", 
            "text": "Take an iterator of iterators and return an Iter containing the\nitems of the first one, then the second one, and so on.", 
            "title": "chain"
        }, 
        {
            "location": "/itertools-Iter/#example", 
            "text": "let xs = [as I64: 1; 2].values()\nlet ys = [as I64: 3; 4].values()\n\nIter[I64].chain([xs; ys].values())  1 2 3 4  new ref chain(\n  outer_iterator: Iterator[Iterator[A] ref] ref)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_1", 
            "text": "outer_iterator:  Iterator [ Iterator [A] ref] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_1", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#repeat_value", 
            "text": "Create an iterator that returns the given value forever.", 
            "title": "repeat_value"
        }, 
        {
            "location": "/itertools-Iter/#example_1", 
            "text": "Iter[U32].repeat_value(7)  7 7 7 7 7 7 7 7 7 ...  new ref repeat_value(\n  value: A)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_2", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_2", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/itertools-Iter/#has_next", 
            "text": "fun ref has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/itertools-Iter/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#next", 
            "text": "fun ref next()\n: A ?", 
            "title": "next"
        }, 
        {
            "location": "/itertools-Iter/#returns_4", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#map_stateful91b-b93", 
            "text": "Allows stateful transformaion of each element from the iterator, similar\nto  map .  fun ref map_stateful[B: B](\n  f: {ref(A!): B ?}[A, B] ref)\n: Iter[B] ref^", 
            "title": "map_stateful[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#parameters_3", 
            "text": "f: {ref(A!): B ?}[A, B] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_5", 
            "text": "Iter [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#filter_stateful", 
            "text": "Allows filtering of elements based on a stateful adapter, similar to filter .  fun ref filter_stateful(\n  f: {ref(A!): Bool ?}[A] ref)\n: Iter[A] ref^", 
            "title": "filter_stateful"
        }, 
        {
            "location": "/itertools-Iter/#parameters_4", 
            "text": "f: {ref(A!): Bool ?}[A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_6", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#filter_map_stateful91b-b93", 
            "text": "Allows stateful modification to the stream of elements from an iterator,\nsimilar to  filter_map .  fun ref filter_map_stateful[B: B](\n  f: {ref(A!): (B | None) ?}[A, B] ref)\n: Iter[B] ref^", 
            "title": "filter_map_stateful[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#parameters_5", 
            "text": "f: {ref(A!): (B | None) ?}[A, B] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_7", 
            "text": "Iter [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#all", 
            "text": "Return false if at least one value of the iterator fails to match the\npredicate  f . This method short-circuits at the first value where the\npredicate returns false, otherwise true is returned.", 
            "title": "all"
        }, 
        {
            "location": "/itertools-Iter/#examples", 
            "text": "Iter[I64]([2; 4; 6].values())\n  .all({(x) =  (x % 2) == 0 })  true  Iter[I64]([2; 3; 4].values())\n  .all({(x) =  (x % 2) == 0 })  false  fun ref all(\n  f: {(A!): Bool ?}[A] box)\n: Bool val", 
            "title": "Examples"
        }, 
        {
            "location": "/itertools-Iter/#parameters_6", 
            "text": "f: {(A!): Bool ?}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#any", 
            "text": "Return true if at least one value of the iterator matches the predicate f . This method short-circuits at the first value where the predicate\nreturns true, otherwise false is returned.", 
            "title": "any"
        }, 
        {
            "location": "/itertools-Iter/#examples_1", 
            "text": "Iter[I64]([2; 4; 6].values())\n  .any({(I64) =  (x % 2) == 1 })  false  Iter[I64]([2; 3; 4].values())\n  .any({(I64) =  (x % 2) == 1 })  true  fun ref any(\n  f: {(A!): Bool ?}[A] box)\n: Bool val", 
            "title": "Examples"
        }, 
        {
            "location": "/itertools-Iter/#parameters_7", 
            "text": "f: {(A!): Bool ?}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#collect91optional-b-seq91a93-ref93", 
            "text": "Push each value from the iterator into the collection  coll .", 
            "title": "collect[optional B: Seq[A!] ref]"
        }, 
        {
            "location": "/itertools-Iter/#example_2", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .collect(Array[I64](3))  [1, 2, 3]  fun ref collect[optional B: Seq[A!] ref](\n  coll: B)\n: B^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_8", 
            "text": "coll: B", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_10", 
            "text": "B^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#count", 
            "text": "Return the number of values in the iterator.", 
            "title": "count"
        }, 
        {
            "location": "/itertools-Iter/#example_3", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .count()  3  fun ref count()\n: USize val", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#returns_11", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#cycle", 
            "text": "Repeatedly cycle through the values from the iterator.  WARNING: The values returned by the original iterator are cached, so\nthe input iterator should be finite.", 
            "title": "cycle"
        }, 
        {
            "location": "/itertools-Iter/#example_4", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .cycle()  1 2 3 1 2 3 1 2 3 ...  fun ref cycle()\n: Iter[A!] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#returns_12", 
            "text": "Iter [A!] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#enum91optional-b-real91b93-val-i8-val-i16-val-i32-val-i64-val-i128-val-ilong-val-isize-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-f32-val-f64-val93", 
            "text": "An iterator which yields the current iteration count as well as the next\nvalue from the iterator.", 
            "title": "enum[optional B: (Real[B] val &amp; (I8 val | I16 val | I32 val | I64 val | I128 val | ILong val | ISize val | U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val | F32 val | F64 val))]"
        }, 
        {
            "location": "/itertools-Iter/#example_5", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .enum()  (0, 1) (1, 2) (2, 3)  fun ref enum[optional B: (Real[B] val   (I8 val | I16 val | I32 val | \n    I64 val | I128 val | ILong val | \n    ISize val | U8 val | U16 val | \n    U32 val | U64 val | U128 val | \n    ULong val | USize val | F32 val | \n    F64 val))]()\n: Iter[(B , A)] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#returns_13", 
            "text": "Iter [(B , A)] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#filter", 
            "text": "Return an iterator that only returns items that match the predicate  f .", 
            "title": "filter"
        }, 
        {
            "location": "/itertools-Iter/#example_6", 
            "text": "Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .filter({(x) =  (x % 2) == 0 })  2 4 6  fun ref filter(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_9", 
            "text": "f: {(A!): Bool ?}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_14", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#find", 
            "text": "Return the nth value in the iterator that satisfies the predicate  f .", 
            "title": "find"
        }, 
        {
            "location": "/itertools-Iter/#examples_2", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .find({(x) =  (x % 2) == 0 })  2  Iter[I64]([1; 2; 3; 4].values())\n  .find({(x) =  (x % 2) == 0 }, 2)  4  fun ref find(\n  f: {(A!): Bool ?}[A] box,\n  n: USize val = seq)\n: A! ?", 
            "title": "Examples"
        }, 
        {
            "location": "/itertools-Iter/#parameters_10", 
            "text": "f: {(A!): Bool ?}[A] box  n:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_15", 
            "text": "A! ?", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#filter_map91b-b93", 
            "text": "Return an iterator which applies  f  to each element. If  None  is\nreturned, then the iterator will try again by applying  f  to the next\nelement. Otherwise, the value of type  B  is returned.", 
            "title": "filter_map[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#example_7", 
            "text": "Iter[I64]([as I64: 1; -2; 4; 7; -5])\n  .filter_map[USize](\n    {(i: I64): (USize | None) =  if i  = 0 then i.usize() end })  1 4 7  \n\n```pony\nfun ref filter_map[B: B](\n  f: {(A!): (B | None) ?}[A, B] box)\n: Iter[B] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_11", 
            "text": "f: {(A!): (B | None) ?}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_16", 
            "text": "Iter [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#flat_map91b-b93", 
            "text": "Return an iterator over the values of the iterators produced from the\napplication of the given function.", 
            "title": "flat_map[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#example_8", 
            "text": "Iter[String]([ alpha ;  beta ;  gamma ])\n  .flat_map[U8]({(s: String): Iterator[U8] =  s.values() })  a l p h a b e t a g a m m a  fun ref flat_map[B: B](\n  f: {(A!): Iterator[B] ?}[A, B] box)\n: Iter[B] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_12", 
            "text": "f: {(A!): Iterator[B] ?}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_17", 
            "text": "Iter [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#fold91b-b93", 
            "text": "Apply a function to every element, producing an accumulated value.", 
            "title": "fold[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#example_9", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .fold[I64](0, {(sum, x) =  sum + x })  6  fun ref fold[B: B](\n  acc: B,\n  f: {(B, A!): B^}[A, B] box)\n: B^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_13", 
            "text": "acc: B  f: {(B, A!): B^}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_18", 
            "text": "B^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#fold_partial91b-b93", 
            "text": "A partial version of  fold .  fun ref fold_partial[B: B](\n  acc: B,\n  f: {(B, A!): B^ ?}[A, B] box)\n: B^ ?", 
            "title": "fold_partial[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#parameters_14", 
            "text": "acc: B  f: {(B, A!): B^ ?}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_19", 
            "text": "B^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#last", 
            "text": "Return the last value of the iterator.", 
            "title": "last"
        }, 
        {
            "location": "/itertools-Iter/#example_10", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .last()  3  fun ref last()\n: A ?", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#returns_20", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#map91b-b93", 
            "text": "Return an iterator where each item's value is the application of the given\nfunction to the value in the original iterator.", 
            "title": "map[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#example_11", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .map[I64]({(x) =  x * x })  1 4 9  fun ref map[B: B](\n  f: {(A!): B ?}[A, B] box)\n: Iter[B] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_15", 
            "text": "f: {(A!): B ?}[A, B] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_21", 
            "text": "Iter [B] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#nth", 
            "text": "Return the nth value of the iterator.", 
            "title": "nth"
        }, 
        {
            "location": "/itertools-Iter/#example_12", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .nth(2)  2  fun ref nth(\n  n: USize val)\n: A ?", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_16", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_22", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#run", 
            "text": "Iterate through the values of the iterator without a for loop. The\nfunction  on_error  will be called if the iterator's  has_next  method\nreturns true but its  next  method throws an error.", 
            "title": "run"
        }, 
        {
            "location": "/itertools-Iter/#example_13", 
            "text": "Iter[I64]([1; 2; 3].values())\n  .map[None]({(x) =  env.out.print(x.string()) })\n  .run()  1\n2\n3  fun ref run(\n  on_error: {ref()}[A] ref = seq)\n: None val", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_17", 
            "text": "on_error: {ref()}[A] ref = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_23", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#skip", 
            "text": "Skip the first n values of the iterator.", 
            "title": "skip"
        }, 
        {
            "location": "/itertools-Iter/#example_14", 
            "text": "Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .skip(3)  4 5 6  Iter[I64]([1; 2; 3].values())\n  .skip(3)\n  .has_next()  false  fun ref skip(\n  n: USize val)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_18", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_24", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#skip_while", 
            "text": "Skip values of the iterator while the predicate  f  returns true.", 
            "title": "skip_while"
        }, 
        {
            "location": "/itertools-Iter/#example_15", 
            "text": "Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .skip_while({(x) =  x   4 })  4 5 6  fun ref skip_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_19", 
            "text": "f: {(A!): Bool ?}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_25", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#take", 
            "text": "Return an iterator for the first n elements.", 
            "title": "take"
        }, 
        {
            "location": "/itertools-Iter/#example_16", 
            "text": "Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .take(3)  1 2 3  fun ref take(\n  n: USize val)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_20", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_26", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#take_while", 
            "text": "Return an iterator that returns values while the predicate  f  returns\ntrue. This iterator short-circuits the first time that  f  returns false or\nraises an error.", 
            "title": "take_while"
        }, 
        {
            "location": "/itertools-Iter/#example_17", 
            "text": "Iter[I64]([1; 2; 3; 4; 5; 6].values())\n  .take_while({(x) =  x   4 })  1 2 3  fun ref take_while(\n  f: {(A!): Bool ?}[A] box)\n: Iter[A] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_21", 
            "text": "f: {(A!): Bool ?}[A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_27", 
            "text": "Iter [A] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#zip91b-b93", 
            "text": "Zip two iterators together so that each call to next() results in\na tuple with the next value of the first iterator and the next value\nof the second iterator. The number of items returned is the minimum of\nthe number of items returned by the two iterators.", 
            "title": "zip[B: B]"
        }, 
        {
            "location": "/itertools-Iter/#example_18", 
            "text": "Iter[I64]([1; 2].values())\n  .zip[I64]([3; 4].values())  (1, 3) (2, 4)  fun ref zip[B: B](\n  i2: Iterator[B] ref)\n: Iter[(A , B)] ref^", 
            "title": "Example"
        }, 
        {
            "location": "/itertools-Iter/#parameters_22", 
            "text": "i2:  Iterator [B] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_28", 
            "text": "Iter [(A , B)] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#zip291b-b-c-c93", 
            "text": "Zip three iterators together so that each call to next() results in\na tuple with the next value of the first iterator, the next value\nof the second iterator, and the value of the third iterator. The\nnumber of items returned is the minimum of the number of items\nreturned by the three iterators.  fun ref zip2[B: B, C: C](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref)\n: Iter[(A , B , C)] ref^", 
            "title": "zip2[B: B, C: C]"
        }, 
        {
            "location": "/itertools-Iter/#parameters_23", 
            "text": "i2:  Iterator [B] ref  i3:  Iterator [C] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_29", 
            "text": "Iter [(A , B , C)] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#zip391b-b-c-c-d-d93", 
            "text": "Zip four iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.  fun ref zip3[B: B, C: C, D: D](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref)\n: Iter[(A , B , C , D)] ref^", 
            "title": "zip3[B: B, C: C, D: D]"
        }, 
        {
            "location": "/itertools-Iter/#parameters_24", 
            "text": "i2:  Iterator [B] ref  i3:  Iterator [C] ref  i4:  Iterator [D] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_30", 
            "text": "Iter [(A , B , C , D)] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-Iter/#zip491b-b-c-c-d-d-e-e93", 
            "text": "Zip five iterators together so that each call to next() results in\na tuple with the next value of each of the iterators. The number of\nitems returned is the minimum of the number of items returned by the\niterators.  fun ref zip4[B: B, C: C, D: D, E: E](\n  i2: Iterator[B] ref,\n  i3: Iterator[C] ref,\n  i4: Iterator[D] ref,\n  i5: Iterator[E] ref)\n: Iter[(A , B , C , D , E)] ref^", 
            "title": "zip4[B: B, C: C, D: D, E: E]"
        }, 
        {
            "location": "/itertools-Iter/#parameters_25", 
            "text": "i2:  Iterator [B] ref  i3:  Iterator [C] ref  i4:  Iterator [D] ref  i5:  Iterator [E] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-Iter/#returns_31", 
            "text": "Iter [(A , B , C , D , E)] ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-_None/", 
            "text": "_None\n\n\nprimitive val _None\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _None val^\n\n\n\n\nReturns\n\n\n\n\n_None\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_None\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_None\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _None"
        }, 
        {
            "location": "/itertools-_None/#_none", 
            "text": "primitive val _None", 
            "title": "_None"
        }, 
        {
            "location": "/itertools-_None/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/itertools-_None/#create", 
            "text": "new val create()\n: _None val^", 
            "title": "create"
        }, 
        {
            "location": "/itertools-_None/#returns", 
            "text": "_None  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-_None/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/itertools-_None/#eq", 
            "text": "fun box eq(\n  that: _None val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/itertools-_None/#parameters", 
            "text": "that:  _None  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-_None/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-_None/#ne", 
            "text": "fun box ne(\n  that: _None val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/itertools-_None/#parameters_1", 
            "text": "that:  _None  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/itertools-_None/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-_EmptyIter/", 
            "text": "_EmptyIter[A: A]\n\n\nclass ref _EmptyIter[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _EmptyIter[A] iso^\n\n\n\n\nReturns\n\n\n\n\n_EmptyIter\n[A] iso^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nfun ref has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?", 
            "title": "class _EmptyIter"
        }, 
        {
            "location": "/itertools-_EmptyIter/#_emptyiter91a-a93", 
            "text": "class ref _EmptyIter[A: A]", 
            "title": "_EmptyIter[A: A]"
        }, 
        {
            "location": "/itertools-_EmptyIter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/itertools-_EmptyIter/#create", 
            "text": "new iso create()\n: _EmptyIter[A] iso^", 
            "title": "create"
        }, 
        {
            "location": "/itertools-_EmptyIter/#returns", 
            "text": "_EmptyIter [A] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-_EmptyIter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/itertools-_EmptyIter/#has_next", 
            "text": "fun ref has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/itertools-_EmptyIter/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/itertools-_EmptyIter/#next", 
            "text": "fun ref next()\n: A ?", 
            "title": "next"
        }, 
        {
            "location": "/itertools-_EmptyIter/#returns_2", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json--index/", 
            "text": "No package doc string provided for json.\n\n\nPublic Types\n\n\n\n\ntype JsonType\n\n\nclass JsonArray\n\n\nclass JsonObject\n\n\nclass JsonDoc\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _JsonPrint", 
            "title": "Package"
        }, 
        {
            "location": "/json--index/#public-types", 
            "text": "type JsonType  class JsonArray  class JsonObject  class JsonDoc", 
            "title": "Public Types"
        }, 
        {
            "location": "/json--index/#private-types", 
            "text": "primitive _JsonPrint", 
            "title": "Private Types"
        }, 
        {
            "location": "/json-JsonType/", 
            "text": "JsonType\n\n\nAll JSON data types.\n\n\ntype JsonType is\n  (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)\n\n\n\n\nType Alias For\n\n\n\n\n(\nF64\n val | \nI64\n val | \nBool\n val | \nNone\n val | \nString\n val | \nJsonArray\n ref | \nJsonObject\n ref)", 
            "title": "type JsonType"
        }, 
        {
            "location": "/json-JsonType/#jsontype", 
            "text": "All JSON data types.  type JsonType is\n  (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)", 
            "title": "JsonType"
        }, 
        {
            "location": "/json-JsonType/#type-alias-for", 
            "text": "( F64  val |  I64  val |  Bool  val |  None  val |  String  val |  JsonArray  ref |  JsonObject  ref)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/json-JsonArray/", 
            "text": "JsonArray\n\n\nclass ref JsonArray\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate an array with zero elements, but space for len elements.\n\n\nnew iso create(\n  len: USize val = seq)\n: JsonArray iso^\n\n\n\n\nParameters\n\n\n\n\nlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nJsonArray\n iso^\n\n\n\n\n\n\nfrom_array\n\n\nCreate a Json array from an actual array.\n\n\nnew ref from_array(\n  data': Array[(F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref)\n: JsonArray ref^\n\n\n\n\nParameters\n\n\n\n\ndata': \nArray\n[(\nF64\n val | \nI64\n val | \nBool\n val | \nNone\n val | \nString\n val | \nJsonArray\n ref | \nJsonObject\n ref)] ref\n\n\n\n\nReturns\n\n\n\n\nJsonArray\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar data: \nArray\n[(\nF64\n val | \nI64\n val | \nBool\n val | \nNone\n val | \nString\n val | \nJsonArray\n ref | \nJsonObject\n ref)] ref\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nGenerate string representation of this array.\n\n\nfun box string(\n  indent: String val = seq,\n  pretty_print: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nindent: \nString\n val = seq\n\n\npretty_print: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_show\n\n\nAppend the string representation of this array to the provided String.\n\n\nfun box _show(\n  buf': String iso,\n  indent: String val = seq,\n  level: USize val,\n  pretty: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nbuf': \nString\n iso\n\n\nindent: \nString\n val = seq\n\n\nlevel: \nUSize\n val\n\n\npretty: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^", 
            "title": "class JsonArray"
        }, 
        {
            "location": "/json-JsonArray/#jsonarray", 
            "text": "class ref JsonArray", 
            "title": "JsonArray"
        }, 
        {
            "location": "/json-JsonArray/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-JsonArray/#create", 
            "text": "Create an array with zero elements, but space for len elements.  new iso create(\n  len: USize val = seq)\n: JsonArray iso^", 
            "title": "create"
        }, 
        {
            "location": "/json-JsonArray/#parameters", 
            "text": "len:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonArray/#returns", 
            "text": "JsonArray  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonArray/#from_array", 
            "text": "Create a Json array from an actual array.  new ref from_array(\n  data': Array[(F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref)] ref)\n: JsonArray ref^", 
            "title": "from_array"
        }, 
        {
            "location": "/json-JsonArray/#parameters_1", 
            "text": "data':  Array [( F64  val |  I64  val |  Bool  val |  None  val |  String  val |  JsonArray  ref |  JsonObject  ref)] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonArray/#returns_1", 
            "text": "JsonArray  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonArray/#public-fields", 
            "text": "var data:  Array [( F64  val |  I64  val |  Bool  val |  None  val |  String  val |  JsonArray  ref |  JsonObject  ref)] ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/json-JsonArray/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-JsonArray/#string", 
            "text": "Generate string representation of this array.  fun box string(\n  indent: String val = seq,\n  pretty_print: Bool val = seq)\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/json-JsonArray/#parameters_2", 
            "text": "indent:  String  val = seq  pretty_print:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonArray/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonArray/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/json-JsonArray/#_show", 
            "text": "Append the string representation of this array to the provided String.  fun box _show(\n  buf': String iso,\n  indent: String val = seq,\n  level: USize val,\n  pretty: Bool val)\n: String iso^", 
            "title": "_show"
        }, 
        {
            "location": "/json-JsonArray/#parameters_3", 
            "text": "buf':  String  iso  indent:  String  val = seq  level:  USize  val  pretty:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonArray/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonObject/", 
            "text": "JsonObject\n\n\nclass ref JsonObject\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate a map with space for prealloc elements without triggering a\nresize. Defaults to 6.\n\n\nnew iso create(\n  prealloc: USize val = seq)\n: JsonObject iso^\n\n\n\n\nParameters\n\n\n\n\nprealloc: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nJsonObject\n iso^\n\n\n\n\n\n\nfrom_map\n\n\nCreate a Json object from a map.\n\n\nnew ref from_map(\n  data': HashMap[String val, (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq[String val] val] ref)\n: JsonObject ref^\n\n\n\n\nParameters\n\n\n\n\ndata': \nHashMap\n[\nString\n val, (\nF64\n val | \nI64\n val | \nBool\n val | \nNone\n val | \nString\n val | \nJsonArray\n ref | \nJsonObject\n ref), \nHashEq\n[\nString\n val] val] ref\n\n\n\n\nReturns\n\n\n\n\nJsonObject\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar data: \nHashMap\n[\nString\n val, (\nF64\n val | \nI64\n val | \nBool\n val | \nNone\n val | \nString\n val | \nJsonArray\n ref | \nJsonObject\n ref), \nHashEq\n[\nString\n val] val] ref\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nGenerate string representation of this object.\n\n\nfun box string(\n  indent: String val = seq,\n  pretty_print: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nindent: \nString\n val = seq\n\n\npretty_print: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_show\n\n\nAppend the string representation of this object to the provided String.\n\n\nfun box _show(\n  buf': String iso,\n  indent: String val = seq,\n  level: USize val,\n  pretty: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nbuf': \nString\n iso\n\n\nindent: \nString\n val = seq\n\n\nlevel: \nUSize\n val\n\n\npretty: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^", 
            "title": "class JsonObject"
        }, 
        {
            "location": "/json-JsonObject/#jsonobject", 
            "text": "class ref JsonObject", 
            "title": "JsonObject"
        }, 
        {
            "location": "/json-JsonObject/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-JsonObject/#create", 
            "text": "Create a map with space for prealloc elements without triggering a\nresize. Defaults to 6.  new iso create(\n  prealloc: USize val = seq)\n: JsonObject iso^", 
            "title": "create"
        }, 
        {
            "location": "/json-JsonObject/#parameters", 
            "text": "prealloc:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonObject/#returns", 
            "text": "JsonObject  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonObject/#from_map", 
            "text": "Create a Json object from a map.  new ref from_map(\n  data': HashMap[String val, (F64 val | I64 val | Bool val | None val | String val | JsonArray ref | JsonObject ref), HashEq[String val] val] ref)\n: JsonObject ref^", 
            "title": "from_map"
        }, 
        {
            "location": "/json-JsonObject/#parameters_1", 
            "text": "data':  HashMap [ String  val, ( F64  val |  I64  val |  Bool  val |  None  val |  String  val |  JsonArray  ref |  JsonObject  ref),  HashEq [ String  val] val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonObject/#returns_1", 
            "text": "JsonObject  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonObject/#public-fields", 
            "text": "var data:  HashMap [ String  val, ( F64  val |  I64  val |  Bool  val |  None  val |  String  val |  JsonArray  ref |  JsonObject  ref),  HashEq [ String  val] val] ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/json-JsonObject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-JsonObject/#string", 
            "text": "Generate string representation of this object.  fun box string(\n  indent: String val = seq,\n  pretty_print: Bool val = seq)\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/json-JsonObject/#parameters_2", 
            "text": "indent:  String  val = seq  pretty_print:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonObject/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonObject/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/json-JsonObject/#_show", 
            "text": "Append the string representation of this object to the provided String.  fun box _show(\n  buf': String iso,\n  indent: String val = seq,\n  level: USize val,\n  pretty: Bool val)\n: String iso^", 
            "title": "_show"
        }, 
        {
            "location": "/json-JsonObject/#parameters_3", 
            "text": "buf':  String  iso  indent:  String  val = seq  level:  USize  val  pretty:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonObject/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/", 
            "text": "JsonDoc\n\n\nTop level JSON type containing an entire document.\nA JSON document consists of exactly 1 value.\n\n\nclass ref JsonDoc\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: JsonDoc iso^\n\n\n\n\nReturns\n\n\n\n\nJsonDoc\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar data: (\nF64\n val | \nI64\n val | \nBool\n val | \n    \nNone\n val | \nString\n val | \nJsonArray\n ref | \n    \nJsonObject\n ref)\n\n\n\n\n\n\nPublic Functions\n\n\nstring\n\n\nGenerate string representation of this document.\n\n\nfun box string(\n  indent: String val = seq,\n  pretty_print: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nindent: \nString\n val = seq\n\n\npretty_print: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nparse\n\n\nParse the given string as a JSON file, building a document.\nRaise error on invalid JSON in given source.\n\n\nfun ref parse(\n  source: String val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nsource: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nparse_report\n\n\nGive details of the error that occurred last time we attempted to parse.\nIf parse was successful returns (0, \"\").\n\n\nfun box parse_report()\n: (USize val , String val)\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val , \nString\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_parse_value\n\n\nParse a single JSON value of any type, which MUST be present.\nRaise error on invalid or missing value.\n\n\nfun ref _parse_value(\n  context: String val)\n: (F64 val | I64 val | Bool val | \n    None val | String val | JsonArray ref | \n    JsonObject ref) ?\n\n\n\n\nParameters\n\n\n\n\ncontext: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val | \nI64\n val | \nBool\n val | \n    \nNone\n val | \nString\n val | \nJsonArray\n ref | \n    \nJsonObject\n ref) ?\n\n\n\n\n\n\n_parse_keyword\n\n\nParse a keyword, the first letter of which has already been peeked.\n\n\nfun ref _parse_keyword()\n: (Bool val | None val) ?\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val | \nNone\n val) ?\n\n\n\n\n\n\n_parse_number\n\n\nParse a number, the leading character of which has already been peeked.\n\n\nfun ref _parse_number()\n: (F64 val | I64 val) ?\n\n\n\n\nReturns\n\n\n\n\n(\nF64\n val | \nI64\n val) ?\n\n\n\n\n\n\n_parse_decimal\n\n\nParse a decimal integer which must appear immediately in the source.\n\n\nfun ref _parse_decimal()\n: (I64 val , U8 val) ?\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nU8\n val) ?\n\n\n\n\n\n\n_parse_object\n\n\nParse a JSON object, the leading { of which has already been peeked.\n\n\nfun ref _parse_object()\n: JsonObject ref ?\n\n\n\n\nReturns\n\n\n\n\nJsonObject\n ref ?\n\n\n\n\n\n\n_parse_array\n\n\nParse an array, the leading [ of which has already been peeked.\n\n\nfun ref _parse_array()\n: JsonArray ref ?\n\n\n\n\nReturns\n\n\n\n\nJsonArray\n ref ?\n\n\n\n\n\n\n_parse_string\n\n\nParse a string, which must be the next thing found, other than whitesapce.\n\n\nfun ref _parse_string(\n  context: String val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\ncontext: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\n_parse_escape\n\n\nProcess a string escape sequence, the leading \\ of which has already been\nconsumed.\n\n\nfun ref _parse_escape()\n: String val ?\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\n_parse_unicode_escape\n\n\nProcess a Unicode escape sequence, the leading \\u of which has already been\nconsumed.\n\n\nfun ref _parse_unicode_escape()\n: String val ?\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\n_parse_unicode_digits\n\n\nParse the hex digits of a Unicode escape sequence, the leading \\u of which\nhas already been consumed, and return the encoded character value.\n\n\nfun ref _parse_unicode_digits()\n: U32 val ?\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\n_dump_whitespace\n\n\nDump all whitespace at the current read location in source, if any.\n\n\nfun ref _dump_whitespace()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_peek_char\n\n\nPeek the next char in the source, without consuming it.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.\n\n\nfun ref _peek_char(\n  eof_context: (String val | None val) = seq)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\neof_context: (\nString\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\n_get_char\n\n\nGet and consume the next char in the source.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.\n\n\nfun ref _get_char(\n  eof_context: (String val | None val) = seq)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\neof_context: (\nString\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\n_last_char\n\n\nGet the last character peeked or got from the source as a String.\nFor use generating error messages.\n\n\nfun ref _last_char()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_error\n\n\nRecord an error with the given message.\n\n\nfun ref _error(\n  msg: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class JsonDoc"
        }, 
        {
            "location": "/json-JsonDoc/#jsondoc", 
            "text": "Top level JSON type containing an entire document.\nA JSON document consists of exactly 1 value.  class ref JsonDoc", 
            "title": "JsonDoc"
        }, 
        {
            "location": "/json-JsonDoc/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-JsonDoc/#create", 
            "text": "new iso create()\n: JsonDoc iso^", 
            "title": "create"
        }, 
        {
            "location": "/json-JsonDoc/#returns", 
            "text": "JsonDoc  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#public-fields", 
            "text": "var data: ( F64  val |  I64  val |  Bool  val | \n     None  val |  String  val |  JsonArray  ref | \n     JsonObject  ref)", 
            "title": "Public fields"
        }, 
        {
            "location": "/json-JsonDoc/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-JsonDoc/#string", 
            "text": "Generate string representation of this document.  fun box string(\n  indent: String val = seq,\n  pretty_print: Bool val = seq)\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/json-JsonDoc/#parameters", 
            "text": "indent:  String  val = seq  pretty_print:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#parse", 
            "text": "Parse the given string as a JSON file, building a document.\nRaise error on invalid JSON in given source.  fun ref parse(\n  source: String val)\n: None val ?", 
            "title": "parse"
        }, 
        {
            "location": "/json-JsonDoc/#parameters_1", 
            "text": "source:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_2", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#parse_report", 
            "text": "Give details of the error that occurred last time we attempted to parse.\nIf parse was successful returns (0, \"\").  fun box parse_report()\n: (USize val , String val)", 
            "title": "parse_report"
        }, 
        {
            "location": "/json-JsonDoc/#returns_3", 
            "text": "( USize  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_value", 
            "text": "Parse a single JSON value of any type, which MUST be present.\nRaise error on invalid or missing value.  fun ref _parse_value(\n  context: String val)\n: (F64 val | I64 val | Bool val | \n    None val | String val | JsonArray ref | \n    JsonObject ref) ?", 
            "title": "_parse_value"
        }, 
        {
            "location": "/json-JsonDoc/#parameters_2", 
            "text": "context:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_4", 
            "text": "( F64  val |  I64  val |  Bool  val | \n     None  val |  String  val |  JsonArray  ref | \n     JsonObject  ref) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_keyword", 
            "text": "Parse a keyword, the first letter of which has already been peeked.  fun ref _parse_keyword()\n: (Bool val | None val) ?", 
            "title": "_parse_keyword"
        }, 
        {
            "location": "/json-JsonDoc/#returns_5", 
            "text": "( Bool  val |  None  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_number", 
            "text": "Parse a number, the leading character of which has already been peeked.  fun ref _parse_number()\n: (F64 val | I64 val) ?", 
            "title": "_parse_number"
        }, 
        {
            "location": "/json-JsonDoc/#returns_6", 
            "text": "( F64  val |  I64  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_decimal", 
            "text": "Parse a decimal integer which must appear immediately in the source.  fun ref _parse_decimal()\n: (I64 val , U8 val) ?", 
            "title": "_parse_decimal"
        }, 
        {
            "location": "/json-JsonDoc/#returns_7", 
            "text": "( I64  val ,  U8  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_object", 
            "text": "Parse a JSON object, the leading { of which has already been peeked.  fun ref _parse_object()\n: JsonObject ref ?", 
            "title": "_parse_object"
        }, 
        {
            "location": "/json-JsonDoc/#returns_8", 
            "text": "JsonObject  ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_array", 
            "text": "Parse an array, the leading [ of which has already been peeked.  fun ref _parse_array()\n: JsonArray ref ?", 
            "title": "_parse_array"
        }, 
        {
            "location": "/json-JsonDoc/#returns_9", 
            "text": "JsonArray  ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_string", 
            "text": "Parse a string, which must be the next thing found, other than whitesapce.  fun ref _parse_string(\n  context: String val)\n: String val ?", 
            "title": "_parse_string"
        }, 
        {
            "location": "/json-JsonDoc/#parameters_3", 
            "text": "context:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_10", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_escape", 
            "text": "Process a string escape sequence, the leading \\ of which has already been\nconsumed.  fun ref _parse_escape()\n: String val ?", 
            "title": "_parse_escape"
        }, 
        {
            "location": "/json-JsonDoc/#returns_11", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_unicode_escape", 
            "text": "Process a Unicode escape sequence, the leading \\u of which has already been\nconsumed.  fun ref _parse_unicode_escape()\n: String val ?", 
            "title": "_parse_unicode_escape"
        }, 
        {
            "location": "/json-JsonDoc/#returns_12", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_parse_unicode_digits", 
            "text": "Parse the hex digits of a Unicode escape sequence, the leading \\u of which\nhas already been consumed, and return the encoded character value.  fun ref _parse_unicode_digits()\n: U32 val ?", 
            "title": "_parse_unicode_digits"
        }, 
        {
            "location": "/json-JsonDoc/#returns_13", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_dump_whitespace", 
            "text": "Dump all whitespace at the current read location in source, if any.  fun ref _dump_whitespace()\n: None val", 
            "title": "_dump_whitespace"
        }, 
        {
            "location": "/json-JsonDoc/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_peek_char", 
            "text": "Peek the next char in the source, without consuming it.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.  fun ref _peek_char(\n  eof_context: (String val | None val) = seq)\n: U8 val ?", 
            "title": "_peek_char"
        }, 
        {
            "location": "/json-JsonDoc/#parameters_4", 
            "text": "eof_context: ( String  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_15", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_get_char", 
            "text": "Get and consume the next char in the source.\nIf an eof_context is given then an error is thrown on eof, setting a\nsuitable message.\nIf eof_context is None then 0 is returned on EOF. It up to the caller to\nhandle this appropriately.  fun ref _get_char(\n  eof_context: (String val | None val) = seq)\n: U8 val ?", 
            "title": "_get_char"
        }, 
        {
            "location": "/json-JsonDoc/#parameters_5", 
            "text": "eof_context: ( String  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_16", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_last_char", 
            "text": "Get the last character peeked or got from the source as a String.\nFor use generating error messages.  fun ref _last_char()\n: String val", 
            "title": "_last_char"
        }, 
        {
            "location": "/json-JsonDoc/#returns_17", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-JsonDoc/#_error", 
            "text": "Record an error with the given message.  fun ref _error(\n  msg: String val)\n: None val", 
            "title": "_error"
        }, 
        {
            "location": "/json-JsonDoc/#parameters_6", 
            "text": "msg:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-JsonDoc/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-_JsonPrint/", 
            "text": "_JsonPrint\n\n\nprimitive val _JsonPrint\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _JsonPrint val^\n\n\n\n\nReturns\n\n\n\n\n_JsonPrint\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _JsonPrint val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_JsonPrint\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _JsonPrint val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_JsonPrint\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_indent\n\n\nAdd indentation to the buf to the appropriate indent_level\n\n\nfun box _indent(\n  buf: String iso,\n  indent: String val,\n  level': USize val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nbuf: \nString\n iso\n\n\nindent: \nString\n val\n\n\nlevel': \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_string\n\n\nGenerate string representation of the given data.\n\n\nfun box _string(\n  d: (F64 val | I64 val | Bool val | \n    None val | String val | JsonArray box | \n    JsonObject box),\n  buf': String iso,\n  indent: String val,\n  level: USize val,\n  pretty: Bool val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nd: (\nF64\n val | \nI64\n val | \nBool\n val | \n    \nNone\n val | \nString\n val | \nJsonArray\n box | \n    \nJsonObject\n box)\n\n\nbuf': \nString\n iso\n\n\nindent: \nString\n val\n\n\nlevel: \nUSize\n val\n\n\npretty: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\n_escaped_string\n\n\nGenerate a version of the given string with escapes for all non-printable\nand non-ASCII characters.\n\n\nfun box _escaped_string(\n  buf: String iso,\n  s: String val)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\nbuf: \nString\n iso\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n iso^", 
            "title": "primitive _JsonPrint"
        }, 
        {
            "location": "/json-_JsonPrint/#_jsonprint", 
            "text": "primitive val _JsonPrint", 
            "title": "_JsonPrint"
        }, 
        {
            "location": "/json-_JsonPrint/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/json-_JsonPrint/#create", 
            "text": "new val create()\n: _JsonPrint val^", 
            "title": "create"
        }, 
        {
            "location": "/json-_JsonPrint/#returns", 
            "text": "_JsonPrint  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-_JsonPrint/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/json-_JsonPrint/#eq", 
            "text": "fun box eq(\n  that: _JsonPrint val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/json-_JsonPrint/#parameters", 
            "text": "that:  _JsonPrint  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-_JsonPrint/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-_JsonPrint/#ne", 
            "text": "fun box ne(\n  that: _JsonPrint val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/json-_JsonPrint/#parameters_1", 
            "text": "that:  _JsonPrint  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-_JsonPrint/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/json-_JsonPrint/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/json-_JsonPrint/#_indent", 
            "text": "Add indentation to the buf to the appropriate indent_level  fun box _indent(\n  buf: String iso,\n  indent: String val,\n  level': USize val)\n: String iso^", 
            "title": "_indent"
        }, 
        {
            "location": "/json-_JsonPrint/#parameters_2", 
            "text": "buf:  String  iso  indent:  String  val  level':  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-_JsonPrint/#returns_3", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-_JsonPrint/#_string", 
            "text": "Generate string representation of the given data.  fun box _string(\n  d: (F64 val | I64 val | Bool val | \n    None val | String val | JsonArray box | \n    JsonObject box),\n  buf': String iso,\n  indent: String val,\n  level: USize val,\n  pretty: Bool val)\n: String iso^", 
            "title": "_string"
        }, 
        {
            "location": "/json-_JsonPrint/#parameters_3", 
            "text": "d: ( F64  val |  I64  val |  Bool  val | \n     None  val |  String  val |  JsonArray  box | \n     JsonObject  box)  buf':  String  iso  indent:  String  val  level:  USize  val  pretty:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-_JsonPrint/#returns_4", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/json-_JsonPrint/#_escaped_string", 
            "text": "Generate a version of the given string with escapes for all non-printable\nand non-ASCII characters.  fun box _escaped_string(\n  buf: String iso,\n  s: String val)\n: String iso^", 
            "title": "_escaped_string"
        }, 
        {
            "location": "/json-_JsonPrint/#parameters_4", 
            "text": "buf:  String  iso  s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/json-_JsonPrint/#returns_5", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger--index/", 
            "text": "Logger package\n\n\nProvides basic logging facilities. For most use cases, the \nStringLogger\n class\nwill be used. On construction, it takes 2 parameters and a 3rd optional\nparameter:\n\n\n\n\nLogLevel below which no output will be logged\n\n\nOutStream to log to\n\n\nOptional LogFormatter\n\n\n\n\nIf you need to log arbitrary objects, take a look at \nObjectLogger[A]\n which\ncan log arbitrary objects so long as you provide it a lambda to covert from A\nto String.\n\n\nAPI Philosophy\n\n\nThe API for using Logger is an attempt to abide by the Pony philosophy of first,\nbe correct and secondly, aim for performance. One of the ways that logging can\nslow your system down is by having to evaluate expressions to be logged\nwhether they will be logged or not (based on the level of logging). For example:\n\n\nlogger.log(Warn, name + \": \" + reason)\n\n\nwill construct a new String regardless of whether we will end up logging the\nmessage or not.\n\n\nThe Logger API uses boolean short circuiting to avoid this.\n\n\nlogger(Warn) and logger.log(name + \": \" + reason)\n\n\nwill not evaluate the expression to be logged unless the log level Warn is at\nor above the overall log level for our logging. This is as close as we can get\nto zero cost for items that aren't going to end up being logged.\n\n\nExample programs\n\n\nString Logger\n\n\nThe following program will output 'my warn message' and 'my error message' to\nSTDOUT in the standard default log format.\n\n\nuse \nlogger\n\n\nactor Main\n  new create(env: Env) =\n\n    let logger = StringLogger(\n      Warn,\n      env.out)\n\n    logger(Fine) and logger.log(\nmy fine message\n)\n    logger(Info) and logger.log(\nmy info message\n)\n    logger(Warn) and logger.log(\nmy warn message\n)\n    logger(Error) and logger.log(\nmy error message\n)\n\n\n\n\nLogger[A]\n\n\nThe following program will output '42' to STDOUT in the standard default log\nformat.\n\n\nuse \nlogger\n\n\nactor Main\n  new create(env: Env) =\n\n    let logger = Logger[U64](Fine, env.out, {(a) =\n a.string() })\n\n    logger(Error) and logger.log(U64(42))\n\n\n\n\nCustom formatting your logs\n\n\nThe Logger package provides an interface for formatting logs. If you wish to\noverride the standard formatting, you can create an object that implements:\n\n\ninterface val LogFormatter\n  fun apply(\n    msg: String,\n    file_name: String,\n    file_linenum: String,\n    file_linepos: String): String\n\n\n\n\nThis can either be a class or because the interface only has a single apply\nmethod, can also be a lambda.\n\n\nPublic Types\n\n\n\n\ntype LogLevel\n\n\nprimitive Fine\n\n\nprimitive Info\n\n\nprimitive Warn\n\n\nprimitive Error\n\n\nclass Logger\n\n\nprimitive StringLogger\n\n\ninterface LogFormatter\n\n\nprimitive DefaultLogFormatter", 
            "title": "Package"
        }, 
        {
            "location": "/logger--index/#logger-package", 
            "text": "Provides basic logging facilities. For most use cases, the  StringLogger  class\nwill be used. On construction, it takes 2 parameters and a 3rd optional\nparameter:   LogLevel below which no output will be logged  OutStream to log to  Optional LogFormatter   If you need to log arbitrary objects, take a look at  ObjectLogger[A]  which\ncan log arbitrary objects so long as you provide it a lambda to covert from A\nto String.", 
            "title": "Logger package"
        }, 
        {
            "location": "/logger--index/#api-philosophy", 
            "text": "The API for using Logger is an attempt to abide by the Pony philosophy of first,\nbe correct and secondly, aim for performance. One of the ways that logging can\nslow your system down is by having to evaluate expressions to be logged\nwhether they will be logged or not (based on the level of logging). For example:  logger.log(Warn, name + \": \" + reason)  will construct a new String regardless of whether we will end up logging the\nmessage or not.  The Logger API uses boolean short circuiting to avoid this.  logger(Warn) and logger.log(name + \": \" + reason)  will not evaluate the expression to be logged unless the log level Warn is at\nor above the overall log level for our logging. This is as close as we can get\nto zero cost for items that aren't going to end up being logged.", 
            "title": "API Philosophy"
        }, 
        {
            "location": "/logger--index/#example-programs", 
            "text": "", 
            "title": "Example programs"
        }, 
        {
            "location": "/logger--index/#string-logger", 
            "text": "The following program will output 'my warn message' and 'my error message' to\nSTDOUT in the standard default log format.  use  logger \n\nactor Main\n  new create(env: Env) = \n    let logger = StringLogger(\n      Warn,\n      env.out)\n\n    logger(Fine) and logger.log( my fine message )\n    logger(Info) and logger.log( my info message )\n    logger(Warn) and logger.log( my warn message )\n    logger(Error) and logger.log( my error message )", 
            "title": "String Logger"
        }, 
        {
            "location": "/logger--index/#loggera", 
            "text": "The following program will output '42' to STDOUT in the standard default log\nformat.  use  logger \n\nactor Main\n  new create(env: Env) = \n    let logger = Logger[U64](Fine, env.out, {(a) =  a.string() })\n\n    logger(Error) and logger.log(U64(42))", 
            "title": "Logger[A]"
        }, 
        {
            "location": "/logger--index/#custom-formatting-your-logs", 
            "text": "The Logger package provides an interface for formatting logs. If you wish to\noverride the standard formatting, you can create an object that implements:  interface val LogFormatter\n  fun apply(\n    msg: String,\n    file_name: String,\n    file_linenum: String,\n    file_linepos: String): String  This can either be a class or because the interface only has a single apply\nmethod, can also be a lambda.", 
            "title": "Custom formatting your logs"
        }, 
        {
            "location": "/logger--index/#public-types", 
            "text": "type LogLevel  primitive Fine  primitive Info  primitive Warn  primitive Error  class Logger  primitive StringLogger  interface LogFormatter  primitive DefaultLogFormatter", 
            "title": "Public Types"
        }, 
        {
            "location": "/logger-LogLevel/", 
            "text": "LogLevel\n\n\ntype LogLevel is\n  (Fine val | Info val | Warn val | Error val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nFine\n val | \nInfo\n val | \nWarn\n val | \nError\n val)", 
            "title": "type LogLevel"
        }, 
        {
            "location": "/logger-LogLevel/#loglevel", 
            "text": "type LogLevel is\n  (Fine val | Info val | Warn val | Error val)", 
            "title": "LogLevel"
        }, 
        {
            "location": "/logger-LogLevel/#type-alias-for", 
            "text": "( Fine  val |  Info  val |  Warn  val |  Error  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/logger-Fine/", 
            "text": "Fine\n\n\nprimitive val Fine\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Fine val^\n\n\n\n\nReturns\n\n\n\n\nFine\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Fine val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFine\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Fine val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nFine\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Fine"
        }, 
        {
            "location": "/logger-Fine/#fine", 
            "text": "primitive val Fine", 
            "title": "Fine"
        }, 
        {
            "location": "/logger-Fine/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-Fine/#create", 
            "text": "new val create()\n: Fine val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-Fine/#returns", 
            "text": "Fine  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Fine/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-Fine/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-Fine/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Fine/#eq", 
            "text": "fun box eq(\n  that: Fine val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/logger-Fine/#parameters", 
            "text": "that:  Fine  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Fine/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Fine/#ne", 
            "text": "fun box ne(\n  that: Fine val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/logger-Fine/#parameters_1", 
            "text": "that:  Fine  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Fine/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Info/", 
            "text": "Info\n\n\nprimitive val Info\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Info val^\n\n\n\n\nReturns\n\n\n\n\nInfo\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Info val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nInfo\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Info val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nInfo\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Info"
        }, 
        {
            "location": "/logger-Info/#info", 
            "text": "primitive val Info", 
            "title": "Info"
        }, 
        {
            "location": "/logger-Info/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-Info/#create", 
            "text": "new val create()\n: Info val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-Info/#returns", 
            "text": "Info  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Info/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-Info/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-Info/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Info/#eq", 
            "text": "fun box eq(\n  that: Info val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/logger-Info/#parameters", 
            "text": "that:  Info  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Info/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Info/#ne", 
            "text": "fun box ne(\n  that: Info val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/logger-Info/#parameters_1", 
            "text": "that:  Info  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Info/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Warn/", 
            "text": "Warn\n\n\nprimitive val Warn\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Warn val^\n\n\n\n\nReturns\n\n\n\n\nWarn\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Warn val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nWarn\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Warn val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nWarn\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Warn"
        }, 
        {
            "location": "/logger-Warn/#warn", 
            "text": "primitive val Warn", 
            "title": "Warn"
        }, 
        {
            "location": "/logger-Warn/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-Warn/#create", 
            "text": "new val create()\n: Warn val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-Warn/#returns", 
            "text": "Warn  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Warn/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-Warn/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-Warn/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Warn/#eq", 
            "text": "fun box eq(\n  that: Warn val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/logger-Warn/#parameters", 
            "text": "that:  Warn  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Warn/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Warn/#ne", 
            "text": "fun box ne(\n  that: Warn val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/logger-Warn/#parameters_1", 
            "text": "that:  Warn  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Warn/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Error/", 
            "text": "Error\n\n\nprimitive val Error\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Error val^\n\n\n\n\nReturns\n\n\n\n\nError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Error val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Error val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Error"
        }, 
        {
            "location": "/logger-Error/#error", 
            "text": "primitive val Error", 
            "title": "Error"
        }, 
        {
            "location": "/logger-Error/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-Error/#create", 
            "text": "new val create()\n: Error val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-Error/#returns", 
            "text": "Error  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Error/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-Error/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-Error/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Error/#eq", 
            "text": "fun box eq(\n  that: Error val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/logger-Error/#parameters", 
            "text": "that:  Error  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Error/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Error/#ne", 
            "text": "fun box ne(\n  that: Error val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/logger-Error/#parameters_1", 
            "text": "that:  Error  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Error/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Logger/", 
            "text": "Logger[A: A]\n\n\nclass val Logger[A: A]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  level: (Fine val | Info val | Warn val | \n    Error val),\n  out: OutStream tag,\n  f: {(A): String}[A] val,\n  formatter: LogFormatter val = seq)\n: Logger[A] val^\n\n\n\n\nParameters\n\n\n\n\nlevel: (\nFine\n val | \nInfo\n val | \nWarn\n val | \n    \nError\n val)\n\n\nout: \nOutStream\n tag\n\n\nf: {(A): String}[A] val\n\n\nformatter: \nLogFormatter\n val = seq\n\n\n\n\nReturns\n\n\n\n\nLogger\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  level: (Fine val | Info val | Warn val | \n    Error val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nlevel: (\nFine\n val | \nInfo\n val | \nWarn\n val | \n    \nError\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlog\n\n\nfun box log(\n  value: A,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class Logger"
        }, 
        {
            "location": "/logger-Logger/#logger91a-a93", 
            "text": "class val Logger[A: A]", 
            "title": "Logger[A: A]"
        }, 
        {
            "location": "/logger-Logger/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-Logger/#create", 
            "text": "new val create(\n  level: (Fine val | Info val | Warn val | \n    Error val),\n  out: OutStream tag,\n  f: {(A): String}[A] val,\n  formatter: LogFormatter val = seq)\n: Logger[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-Logger/#parameters", 
            "text": "level: ( Fine  val |  Info  val |  Warn  val | \n     Error  val)  out:  OutStream  tag  f: {(A): String}[A] val  formatter:  LogFormatter  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Logger/#returns", 
            "text": "Logger [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Logger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-Logger/#apply", 
            "text": "fun box apply(\n  level: (Fine val | Info val | Warn val | \n    Error val))\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-Logger/#parameters_1", 
            "text": "level: ( Fine  val |  Info  val |  Warn  val | \n     Error  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Logger/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-Logger/#log", 
            "text": "fun box log(\n  value: A,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "log"
        }, 
        {
            "location": "/logger-Logger/#parameters_2", 
            "text": "value: A  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-Logger/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-StringLogger/", 
            "text": "StringLogger\n\n\nprimitive val StringLogger\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StringLogger val^\n\n\n\n\nReturns\n\n\n\n\nStringLogger\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  level: (Fine val | Info val | Warn val | \n    Error val),\n  out: OutStream tag,\n  formatter: LogFormatter val = seq)\n: Logger[String val] val\n\n\n\n\nParameters\n\n\n\n\nlevel: (\nFine\n val | \nInfo\n val | \nWarn\n val | \n    \nError\n val)\n\n\nout: \nOutStream\n tag\n\n\nformatter: \nLogFormatter\n val = seq\n\n\n\n\nReturns\n\n\n\n\nLogger\n[\nString\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StringLogger val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStringLogger\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StringLogger val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStringLogger\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StringLogger"
        }, 
        {
            "location": "/logger-StringLogger/#stringlogger", 
            "text": "primitive val StringLogger", 
            "title": "StringLogger"
        }, 
        {
            "location": "/logger-StringLogger/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-StringLogger/#create", 
            "text": "new val create()\n: StringLogger val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-StringLogger/#returns", 
            "text": "StringLogger  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-StringLogger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-StringLogger/#apply", 
            "text": "fun box apply(\n  level: (Fine val | Info val | Warn val | \n    Error val),\n  out: OutStream tag,\n  formatter: LogFormatter val = seq)\n: Logger[String val] val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-StringLogger/#parameters", 
            "text": "level: ( Fine  val |  Info  val |  Warn  val | \n     Error  val)  out:  OutStream  tag  formatter:  LogFormatter  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-StringLogger/#returns_1", 
            "text": "Logger [ String  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-StringLogger/#eq", 
            "text": "fun box eq(\n  that: StringLogger val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/logger-StringLogger/#parameters_1", 
            "text": "that:  StringLogger  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-StringLogger/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-StringLogger/#ne", 
            "text": "fun box ne(\n  that: StringLogger val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/logger-StringLogger/#parameters_2", 
            "text": "that:  StringLogger  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-StringLogger/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-LogFormatter/", 
            "text": "LogFormatter\n\n\nInterface required to implement custom log formatting.\n\n\n\n\nmsg\n is the logged message\n\n\nloc\n is the location log was called from\n\n\n\n\nSee \nDefaultLogFormatter\n for an example of how to implement a LogFormatter.\n\n\ninterface val LogFormatter\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  msg: String val,\n  loc: SourceLoc val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "interface LogFormatter"
        }, 
        {
            "location": "/logger-LogFormatter/#logformatter", 
            "text": "Interface required to implement custom log formatting.   msg  is the logged message  loc  is the location log was called from   See  DefaultLogFormatter  for an example of how to implement a LogFormatter.  interface val LogFormatter", 
            "title": "LogFormatter"
        }, 
        {
            "location": "/logger-LogFormatter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-LogFormatter/#apply", 
            "text": "fun box apply(\n  msg: String val,\n  loc: SourceLoc val)\n: String val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-LogFormatter/#parameters", 
            "text": "msg:  String  val  loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-LogFormatter/#returns", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/", 
            "text": "DefaultLogFormatter\n\n\nprimitive val DefaultLogFormatter is\n  LogFormatter val\n\n\n\n\nImplements\n\n\n\n\nLogFormatter\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DefaultLogFormatter val^\n\n\n\n\nReturns\n\n\n\n\nDefaultLogFormatter\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  msg: String val,\n  loc: SourceLoc val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: DefaultLogFormatter val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDefaultLogFormatter\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DefaultLogFormatter val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDefaultLogFormatter\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DefaultLogFormatter"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#defaultlogformatter", 
            "text": "primitive val DefaultLogFormatter is\n  LogFormatter val", 
            "title": "DefaultLogFormatter"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#implements", 
            "text": "LogFormatter  val", 
            "title": "Implements"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#create", 
            "text": "new val create()\n: DefaultLogFormatter val^", 
            "title": "create"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#returns", 
            "text": "DefaultLogFormatter  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#apply", 
            "text": "fun box apply(\n  msg: String val,\n  loc: SourceLoc val)\n: String val", 
            "title": "apply"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#parameters", 
            "text": "msg:  String  val  loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#eq", 
            "text": "fun box eq(\n  that: DefaultLogFormatter val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#parameters_1", 
            "text": "that:  DefaultLogFormatter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#ne", 
            "text": "fun box ne(\n  that: DefaultLogFormatter val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#parameters_2", 
            "text": "that:  DefaultLogFormatter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/logger-DefaultLogFormatter/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/math--index/", 
            "text": "Math package\n\n\nGiven the name \nMath\n for this package, you'd expect it have a broad and grand\nscope. Surprise! Not currently. However, we do have the most useful of all\nprogramming language math constructs: fibonacci!\n\n\nPeople like to make fun of fibonacci but let's face it, no fibonacci, no\nbenchmarks. We hear from some of our engineer friends that math is very\nimportant to programming, we call upon that particular class of engineer friends\nto help us fill out this package with more maths than you can shake a stick at.\nBtw, in case you are wondering, yes we can shake a stick at a lot of maths.\n\n\nPublic Types\n\n\n\n\nclass Fibonacci", 
            "title": "Package"
        }, 
        {
            "location": "/math--index/#math-package", 
            "text": "Given the name  Math  for this package, you'd expect it have a broad and grand\nscope. Surprise! Not currently. However, we do have the most useful of all\nprogramming language math constructs: fibonacci!  People like to make fun of fibonacci but let's face it, no fibonacci, no\nbenchmarks. We hear from some of our engineer friends that math is very\nimportant to programming, we call upon that particular class of engineer friends\nto help us fill out this package with more maths than you can shake a stick at.\nBtw, in case you are wondering, yes we can shake a stick at a lot of maths.", 
            "title": "Math package"
        }, 
        {
            "location": "/math--index/#public-types", 
            "text": "class Fibonacci", 
            "title": "Public Types"
        }, 
        {
            "location": "/math-Fibonacci/", 
            "text": "Fibonacci[optional A: (\nInteger\n[A] val \n (\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val))]\n\n\nUseful for microbenchmarks to impress your friends. Look y'all, Pony goes\nfast! We suppose if you are into Agile planning poker that you could also\nuse this in conjunction with \nRandom\n to assign User Story Points.\n\n\nclass ref Fibonacci[optional A: (Integer[A] val \n (U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val))] is\n  Iterator[A] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[A] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: Fibonacci[A] iso^\n\n\n\n\nReturns\n\n\n\n\nFibonacci\n[A] iso^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  n: U8 val)\n: A\n\n\n\n\nParameters\n\n\n\n\nn: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nA\n\n\n\n\n\n\nhas_next\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nfun ref next()\n: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "class Fibonacci"
        }, 
        {
            "location": "/math-Fibonacci/#fibonacci91optional-a-integer91a93-val-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val93", 
            "text": "Useful for microbenchmarks to impress your friends. Look y'all, Pony goes\nfast! We suppose if you are into Agile planning poker that you could also\nuse this in conjunction with  Random  to assign User Story Points.  class ref Fibonacci[optional A: (Integer[A] val   (U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val))] is\n  Iterator[A] ref", 
            "title": "Fibonacci[optional A: (Integer[A] val &amp; (U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val))]"
        }, 
        {
            "location": "/math-Fibonacci/#implements", 
            "text": "Iterator [A] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/math-Fibonacci/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/math-Fibonacci/#create", 
            "text": "new iso create()\n: Fibonacci[A] iso^", 
            "title": "create"
        }, 
        {
            "location": "/math-Fibonacci/#returns", 
            "text": "Fibonacci [A] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/math-Fibonacci/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/math-Fibonacci/#apply", 
            "text": "fun box apply(\n  n: U8 val)\n: A", 
            "title": "apply"
        }, 
        {
            "location": "/math-Fibonacci/#parameters", 
            "text": "n:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/math-Fibonacci/#returns_1", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/math-Fibonacci/#has_next", 
            "text": "fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/math-Fibonacci/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/math-Fibonacci/#next", 
            "text": "fun ref next()\n: A", 
            "title": "next"
        }, 
        {
            "location": "/math-Fibonacci/#returns_3", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/net--index/", 
            "text": "Net package\n\n\nThe Net package provides support for creating UDP and TCP clients and\nservers, reading and writing network data, and establishing UDP and\nTCP connections.\n\n\nPublic Types\n\n\n\n\ntype UDPSocketAuth\n\n\nactor UDPSocket\n\n\ninterface UDPNotify\n\n\ntype TCPListenerAuth\n\n\nactor TCPListener\n\n\ninterface TCPListenNotify\n\n\ninterface TCPConnectionNotify\n\n\ntype TCPConnectionAuth\n\n\nactor TCPConnection\n\n\nclass NetAddress\n\n\ntype DNSLookupAuth\n\n\nprimitive DNS\n\n\nprimitive NetAuth\n\n\nprimitive DNSAuth\n\n\nprimitive UDPAuth\n\n\nprimitive TCPAuth\n\n\nprimitive TCPListenAuth\n\n\nprimitive TCPConnectAuth", 
            "title": "Package"
        }, 
        {
            "location": "/net--index/#net-package", 
            "text": "The Net package provides support for creating UDP and TCP clients and\nservers, reading and writing network data, and establishing UDP and\nTCP connections.", 
            "title": "Net package"
        }, 
        {
            "location": "/net--index/#public-types", 
            "text": "type UDPSocketAuth  actor UDPSocket  interface UDPNotify  type TCPListenerAuth  actor TCPListener  interface TCPListenNotify  interface TCPConnectionNotify  type TCPConnectionAuth  actor TCPConnection  class NetAddress  type DNSLookupAuth  primitive DNS  primitive NetAuth  primitive DNSAuth  primitive UDPAuth  primitive TCPAuth  primitive TCPListenAuth  primitive TCPConnectAuth", 
            "title": "Public Types"
        }, 
        {
            "location": "/net-UDPSocketAuth/", 
            "text": "UDPSocketAuth\n\n\ntype UDPSocketAuth is\n  (AmbientAuth val | NetAuth val | UDPAuth val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)", 
            "title": "type UDPSocketAuth"
        }, 
        {
            "location": "/net-UDPSocketAuth/#udpsocketauth", 
            "text": "type UDPSocketAuth is\n  (AmbientAuth val | NetAuth val | UDPAuth val)", 
            "title": "UDPSocketAuth"
        }, 
        {
            "location": "/net-UDPSocketAuth/#type-alias-for", 
            "text": "( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-UDPSocket/", 
            "text": "UDPSocket\n\n\nCreates a UDP socket that can be used for sending and receiving UDP messages.\n\n\nThe following examples create:\n\n an echo server that listens for connections and returns whatever message it\n  receives\n\n a client that connects to the server, sends a message, and prints the\n  message it receives in response\n\n\nThe server is implemented like this:\n\n\nuse \nnet\n\n\nclass MyUDPNotify is UDPNotify\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =\n\n    sock.write(consume data, from)\n\n  fun ref not_listening(sock: UDPSocket ref) =\n\n    None\n\nactor Main\n  new create(env: Env) =\n\n    try\n      UDPSocket(env.root as AmbientAuth,\n        MyUDPNotify, \n, \n8989\n)\n    end\n\n\n\n\nThe client is implemented like this:\n\n\nuse \nnet\n\n\nclass MyUDPNotify is UDPNotify\n  let _out: OutStream\n  let _destination: NetAddress\n\n  new create(\n    out: OutStream,\n    destination: NetAddress)\n  =\n\n    _out = out\n    _destination = destination\n\n  fun ref listening(sock: UDPSocket ref) =\n\n    sock.write(\nhello world\n, _destination)\n\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  =\n\n    _out.print(\nGOT:\n + String.from_array(consume data))\n    sock.dispose()\n\n  fun ref not_listening(sock: UDPSocket ref) =\n\n    None\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let destination =\n        DNS.ip4(env.root as AmbientAuth, \nlocalhost\n, \n8989\n)(0)?\n      UDPSocket(env.root as AmbientAuth,\n        recover MyUDPNotify(env.out, consume destination) end)\n    end\n\n\n\n\nactor tag UDPSocket\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)\n\n\nnotify: \nUDPNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nsize: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUDPSocket\n tag^\n\n\n\n\n\n\nip4\n\n\nnew tag ip4(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)\n\n\nnotify: \nUDPNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nsize: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUDPSocket\n tag^\n\n\n\n\n\n\nip6\n\n\nnew tag ip6(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nUDPAuth\n val)\n\n\nnotify: \nUDPNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nsize: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nUDPSocket\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nwrite\n\n\nWrite a single sequence of bytes.\n\n\nbe write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nto: \nNetAddress\n val\n\n\n\n\n\n\nwritev\n\n\nWrite a sequence of sequences of bytes.\n\n\nbe writev(\n  data: ByteSeqIter val,\n  to: NetAddress val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\nto: \nNetAddress\n val\n\n\n\n\n\n\nset_notify\n\n\nChange the notifier.\n\n\nbe set_notify(\n  notify: UDPNotify iso)\n\n\n\n\nParameters\n\n\n\n\nnotify: \nUDPNotify\n iso\n\n\n\n\n\n\nset_broadcast\n\n\nEnable or disable broadcasting from this socket.\n\n\nbe set_broadcast(\n  state: Bool val)\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\n\n\nset_multicast_interface\n\n\nBy default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.\n\n\nbe set_multicast_interface(\n  from: String val = seq)\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val = seq\n\n\n\n\n\n\nset_multicast_loopback\n\n\nBy default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.\n\n\nbe set_multicast_loopback(\n  loopback: Bool val)\n\n\n\n\nParameters\n\n\n\n\nloopback: \nBool\n val\n\n\n\n\n\n\nset_multicast_ttl\n\n\nSet the TTL for multicast sends. Defaults to 1.\n\n\nbe set_multicast_ttl(\n  ttl: U8 val)\n\n\n\n\nParameters\n\n\n\n\nttl: \nU8\n val\n\n\n\n\n\n\nmulticast_join\n\n\nAdd a multicast group. This can be limited to packets arriving on a\nspecific interface.\n\n\nbe multicast_join(\n  group: String val,\n  to: String val = seq)\n\n\n\n\nParameters\n\n\n\n\ngroup: \nString\n val\n\n\nto: \nString\n val = seq\n\n\n\n\n\n\nmulticast_leave\n\n\nDrop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.\n\n\nbe multicast_leave(\n  group: String val,\n  to: String val = seq)\n\n\n\n\nParameters\n\n\n\n\ngroup: \nString\n val\n\n\nto: \nString\n val = seq\n\n\n\n\n\n\ndispose\n\n\nStop listening.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\n\nlocal_address\n\n\nReturn the bound IP address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nWhen we are readable, we accept new connections until none remain.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\n_read_again\n\n\nResume reading.\n\n\nbe _read_again()\n\n\n\n\n\n\nPrivate Functions\n\n\n_pending_reads\n\n\nRead while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.\n\n\nfun ref _pending_reads()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_complete_reads\n\n\nThe OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun ref _complete_reads(\n  len: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_start_next_read\n\n\nStart our next receive.\nThis is used only with IOCP on Windows.\n\n\nfun ref _start_next_read()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write\n\n\nWrite the datagram to the socket.\n\n\nfun ref _write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nto: \nNetAddress\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_notify_listening\n\n\nInform the notifier that we're listening.\n\n\nfun ref _notify_listening()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_close\n\n\nInform the notifier that we've closed.\n\n\nfun ref _close()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor UDPSocket"
        }, 
        {
            "location": "/net-UDPSocket/#udpsocket", 
            "text": "Creates a UDP socket that can be used for sending and receiving UDP messages.  The following examples create:  an echo server that listens for connections and returns whatever message it\n  receives  a client that connects to the server, sends a message, and prints the\n  message it receives in response  The server is implemented like this:  use  net \n\nclass MyUDPNotify is UDPNotify\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  = \n    sock.write(consume data, from)\n\n  fun ref not_listening(sock: UDPSocket ref) = \n    None\n\nactor Main\n  new create(env: Env) = \n    try\n      UDPSocket(env.root as AmbientAuth,\n        MyUDPNotify,  ,  8989 )\n    end  The client is implemented like this:  use  net \n\nclass MyUDPNotify is UDPNotify\n  let _out: OutStream\n  let _destination: NetAddress\n\n  new create(\n    out: OutStream,\n    destination: NetAddress)\n  = \n    _out = out\n    _destination = destination\n\n  fun ref listening(sock: UDPSocket ref) = \n    sock.write( hello world , _destination)\n\n  fun ref received(\n    sock: UDPSocket ref,\n    data: Array[U8] iso,\n    from: NetAddress)\n  = \n    _out.print( GOT:  + String.from_array(consume data))\n    sock.dispose()\n\n  fun ref not_listening(sock: UDPSocket ref) = \n    None\n\nactor Main\n  new create(env: Env) = \n    try\n      let destination =\n        DNS.ip4(env.root as AmbientAuth,  localhost ,  8989 )(0)?\n      UDPSocket(env.root as AmbientAuth,\n        recover MyUDPNotify(env.out, consume destination) end)\n    end  actor tag UDPSocket", 
            "title": "UDPSocket"
        }, 
        {
            "location": "/net-UDPSocket/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-UDPSocket/#create", 
            "text": "new tag create(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^", 
            "title": "create"
        }, 
        {
            "location": "/net-UDPSocket/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)  notify:  UDPNotify  iso  host:  String  val = seq  service:  String  val = seq  size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#returns", 
            "text": "UDPSocket  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#ip4", 
            "text": "new tag ip4(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^", 
            "title": "ip4"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_1", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)  notify:  UDPNotify  iso  host:  String  val = seq  service:  String  val = seq  size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#returns_1", 
            "text": "UDPSocket  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#ip6", 
            "text": "new tag ip6(\n  auth: (AmbientAuth val | NetAuth val | UDPAuth val),\n  notify: UDPNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  size: USize val = seq)\n: UDPSocket tag^", 
            "title": "ip6"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_2", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  UDPAuth  val)  notify:  UDPNotify  iso  host:  String  val = seq  service:  String  val = seq  size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#returns_2", 
            "text": "UDPSocket  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-UDPSocket/#write", 
            "text": "Write a single sequence of bytes.  be write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)", 
            "title": "write"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_3", 
            "text": "data: ( String  val |  Array [ U8  val] val)  to:  NetAddress  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#writev", 
            "text": "Write a sequence of sequences of bytes.  be writev(\n  data: ByteSeqIter val,\n  to: NetAddress val)", 
            "title": "writev"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_4", 
            "text": "data:  ByteSeqIter  val  to:  NetAddress  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#set_notify", 
            "text": "Change the notifier.  be set_notify(\n  notify: UDPNotify iso)", 
            "title": "set_notify"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_5", 
            "text": "notify:  UDPNotify  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#set_broadcast", 
            "text": "Enable or disable broadcasting from this socket.  be set_broadcast(\n  state: Bool val)", 
            "title": "set_broadcast"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_6", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#set_multicast_interface", 
            "text": "By default, the OS will choose which address is used to send packets bound\nfor multicast addresses. This can be used to force a specific interface. To\nrevert to allowing the OS to choose, call with an empty string.  be set_multicast_interface(\n  from: String val = seq)", 
            "title": "set_multicast_interface"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_7", 
            "text": "from:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#set_multicast_loopback", 
            "text": "By default, packets sent to a multicast address will be received by the\nsending system if it has subscribed to that address. Disabling loopback\nprevents this.  be set_multicast_loopback(\n  loopback: Bool val)", 
            "title": "set_multicast_loopback"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_8", 
            "text": "loopback:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#set_multicast_ttl", 
            "text": "Set the TTL for multicast sends. Defaults to 1.  be set_multicast_ttl(\n  ttl: U8 val)", 
            "title": "set_multicast_ttl"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_9", 
            "text": "ttl:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#multicast_join", 
            "text": "Add a multicast group. This can be limited to packets arriving on a\nspecific interface.  be multicast_join(\n  group: String val,\n  to: String val = seq)", 
            "title": "multicast_join"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_10", 
            "text": "group:  String  val  to:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#multicast_leave", 
            "text": "Drop a multicast group. This can be limited to packets arriving on a\nspecific interface. No attempt is made to check that this socket has\npreviously added this group.  be multicast_leave(\n  group: String val,\n  to: String val = seq)", 
            "title": "multicast_leave"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_11", 
            "text": "group:  String  val  to:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#dispose", 
            "text": "Stop listening.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-UDPSocket/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-UDPSocket/#local_address", 
            "text": "Return the bound IP address.  fun box local_address()\n: NetAddress val", 
            "title": "local_address"
        }, 
        {
            "location": "/net-UDPSocket/#returns_3", 
            "text": "NetAddress  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-UDPSocket/#_event_notify", 
            "text": "When we are readable, we accept new connections until none remain.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_12", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#_read_again", 
            "text": "Resume reading.  be _read_again()", 
            "title": "_read_again"
        }, 
        {
            "location": "/net-UDPSocket/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-UDPSocket/#_pending_reads", 
            "text": "Read while data is available, guessing the next packet length as we go. If\nwe read 4 kb of data, send ourself a resume message and stop reading, to\navoid starving other actors.  fun ref _pending_reads()\n: None val", 
            "title": "_pending_reads"
        }, 
        {
            "location": "/net-UDPSocket/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#_complete_reads", 
            "text": "The OS has informed as that len bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.  fun ref _complete_reads(\n  len: U32 val)\n: None val", 
            "title": "_complete_reads"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_13", 
            "text": "len:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#_start_next_read", 
            "text": "Start our next receive.\nThis is used only with IOCP on Windows.  fun ref _start_next_read()\n: None val", 
            "title": "_start_next_read"
        }, 
        {
            "location": "/net-UDPSocket/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#_write", 
            "text": "Write the datagram to the socket.  fun ref _write(\n  data: (String val | Array[U8 val] val),\n  to: NetAddress val)\n: None val", 
            "title": "_write"
        }, 
        {
            "location": "/net-UDPSocket/#parameters_14", 
            "text": "data: ( String  val |  Array [ U8  val] val)  to:  NetAddress  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPSocket/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#_notify_listening", 
            "text": "Inform the notifier that we're listening.  fun ref _notify_listening()\n: None val", 
            "title": "_notify_listening"
        }, 
        {
            "location": "/net-UDPSocket/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPSocket/#_close", 
            "text": "Inform the notifier that we've closed.  fun ref _close()\n: None val", 
            "title": "_close"
        }, 
        {
            "location": "/net-UDPSocket/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPNotify/", 
            "text": "UDPNotify\n\n\nNotifications for UDP connections.\n\n\nFor an example of using this class please see the documentatoin for the\n\nUDPSocket\n actor.\n\n\ninterface ref UDPNotify\n\n\n\n\nPublic Functions\n\n\nlistening\n\n\nCalled when the socket has been bound to an address.\n\n\nfun ref listening(\n  sock: UDPSocket ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\n\nCalled if it wasn't possible to bind the socket to an address.\n\n\nIt is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:\n\n\nfun ref not_listening(sock: UDPSocket ref) =\n\n  None\n\n\n\n\nfun ref not_listening(\n  sock: UDPSocket ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreceived\n\n\nCalled when new data is received on the socket.\n\n\nfun ref received(\n  sock: UDPSocket ref,\n  data: Array[U8 val] iso,\n  from: NetAddress val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\nfrom: \nNetAddress\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nCalled when the socket is closed.\n\n\nfun ref closed(\n  sock: UDPSocket ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsock: \nUDPSocket\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface UDPNotify"
        }, 
        {
            "location": "/net-UDPNotify/#udpnotify", 
            "text": "Notifications for UDP connections.  For an example of using this class please see the documentatoin for the UDPSocket  actor.  interface ref UDPNotify", 
            "title": "UDPNotify"
        }, 
        {
            "location": "/net-UDPNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-UDPNotify/#listening", 
            "text": "Called when the socket has been bound to an address.  fun ref listening(\n  sock: UDPSocket ref)\n: None val", 
            "title": "listening"
        }, 
        {
            "location": "/net-UDPNotify/#parameters", 
            "text": "sock:  UDPSocket  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPNotify/#not_listening", 
            "text": "Called if it wasn't possible to bind the socket to an address.  It is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:  fun ref not_listening(sock: UDPSocket ref) = \n  None  fun ref not_listening(\n  sock: UDPSocket ref)\n: None val", 
            "title": "not_listening"
        }, 
        {
            "location": "/net-UDPNotify/#parameters_1", 
            "text": "sock:  UDPSocket  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPNotify/#received", 
            "text": "Called when new data is received on the socket.  fun ref received(\n  sock: UDPSocket ref,\n  data: Array[U8 val] iso,\n  from: NetAddress val)\n: None val", 
            "title": "received"
        }, 
        {
            "location": "/net-UDPNotify/#parameters_2", 
            "text": "sock:  UDPSocket  ref  data:  Array [ U8  val] iso  from:  NetAddress  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPNotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPNotify/#closed", 
            "text": "Called when the socket is closed.  fun ref closed(\n  sock: UDPSocket ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-UDPNotify/#parameters_3", 
            "text": "sock:  UDPSocket  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPNotify/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenerAuth/", 
            "text": "TCPListenerAuth\n\n\ntype TCPListenerAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \nTCPListenAuth\n val)", 
            "title": "type TCPListenerAuth"
        }, 
        {
            "location": "/net-TCPListenerAuth/#tcplistenerauth", 
            "text": "type TCPListenerAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPListenAuth val)", 
            "title": "TCPListenerAuth"
        }, 
        {
            "location": "/net-TCPListenerAuth/#type-alias-for", 
            "text": "( AmbientAuth  val |  NetAuth  val |  TCPAuth  val |  TCPListenAuth  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-TCPListener/", 
            "text": "TCPListener\n\n\nListens for new network connections.\n\n\nThe following program creates an echo server that listens for\nconnections on port 8989 and echoes back any data it receives.\n\n\nuse \nnet\n\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =\n\n    conn.write(String.from_array(consume data))\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =\n\n    None\n\nclass MyTCPListenNotify is TCPListenNotify\n  fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ =\n\n    MyTCPConnectionNotify\n\n  fun ref not_listening(listen: TCPListener ref) =\n\n    None\n\nactor Main\n  new create(env: Env) =\n\n    try\n      TCPListener(env.root as AmbientAuth,\n        recover MyTCPListenNotify end, \n, \n8989\n)\n    end\n\n\n\n\nactor tag TCPListener\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nTCPListenNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPListener\n tag^\n\n\n\n\n\n\nip4\n\n\nnew tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nTCPListenNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPListener\n tag^\n\n\n\n\n\n\nip6\n\n\nnew tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nTCPListenNotify\n iso\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPListener\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nset_notify\n\n\nChange the notifier.\n\n\nbe set_notify(\n  notify: TCPListenNotify iso)\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTCPListenNotify\n iso\n\n\n\n\n\n\ndispose\n\n\nStop listening.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\n\nlocal_address\n\n\nReturn the bound IP address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nclose\n\n\nDispose of resources.\n\n\nfun ref close()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nWhen we are readable, we accept new connections until none remain.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\n_conn_closed\n\n\nAn accepted connection has closed. If we have dropped below the limit, try\nto accept new connections.\n\n\nbe _conn_closed()\n\n\n\n\n\n\nPrivate Functions\n\n\n_accept\n\n\nAccept connections as long as we have spawned fewer than our limit.\n\n\nfun ref _accept(\n  ns: U32 val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nns: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_spawn\n\n\nSpawn a new connection.\n\n\nfun ref _spawn(\n  ns: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nns: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_notify_listening\n\n\nInform the notifier that we're listening.\n\n\nfun ref _notify_listening()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor TCPListener"
        }, 
        {
            "location": "/net-TCPListener/#tcplistener", 
            "text": "Listens for new network connections.  The following program creates an echo server that listens for\nconnections on port 8989 and echoes back any data it receives.  use  net \n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  = \n    conn.write(String.from_array(consume data))\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) = \n    None\n\nclass MyTCPListenNotify is TCPListenNotify\n  fun ref connected(listen: TCPListener ref): TCPConnectionNotify iso^ = \n    MyTCPConnectionNotify\n\n  fun ref not_listening(listen: TCPListener ref) = \n    None\n\nactor Main\n  new create(env: Env) = \n    try\n      TCPListener(env.root as AmbientAuth,\n        recover MyTCPListenNotify end,  ,  8989 )\n    end  actor tag TCPListener", 
            "title": "TCPListener"
        }, 
        {
            "location": "/net-TCPListener/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPListener/#create", 
            "text": "new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^", 
            "title": "create"
        }, 
        {
            "location": "/net-TCPListener/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  TCPListenNotify  iso  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#returns", 
            "text": "TCPListener  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#ip4", 
            "text": "new tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^", 
            "title": "ip4"
        }, 
        {
            "location": "/net-TCPListener/#parameters_1", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  TCPListenNotify  iso  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#returns_1", 
            "text": "TCPListener  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#ip6", 
            "text": "new tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: TCPListenNotify iso,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPListener tag^", 
            "title": "ip6"
        }, 
        {
            "location": "/net-TCPListener/#parameters_2", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  TCPListenNotify  iso  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#returns_2", 
            "text": "TCPListener  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-TCPListener/#set_notify", 
            "text": "Change the notifier.  be set_notify(\n  notify: TCPListenNotify iso)", 
            "title": "set_notify"
        }, 
        {
            "location": "/net-TCPListener/#parameters_3", 
            "text": "notify:  TCPListenNotify  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#dispose", 
            "text": "Stop listening.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-TCPListener/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPListener/#local_address", 
            "text": "Return the bound IP address.  fun box local_address()\n: NetAddress val", 
            "title": "local_address"
        }, 
        {
            "location": "/net-TCPListener/#returns_3", 
            "text": "NetAddress  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#close", 
            "text": "Dispose of resources.  fun ref close()\n: None val", 
            "title": "close"
        }, 
        {
            "location": "/net-TCPListener/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-TCPListener/#_event_notify", 
            "text": "When we are readable, we accept new connections until none remain.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/net-TCPListener/#parameters_4", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#_conn_closed", 
            "text": "An accepted connection has closed. If we have dropped below the limit, try\nto accept new connections.  be _conn_closed()", 
            "title": "_conn_closed"
        }, 
        {
            "location": "/net-TCPListener/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-TCPListener/#_accept", 
            "text": "Accept connections as long as we have spawned fewer than our limit.  fun ref _accept(\n  ns: U32 val = seq)\n: None val", 
            "title": "_accept"
        }, 
        {
            "location": "/net-TCPListener/#parameters_5", 
            "text": "ns:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#_spawn", 
            "text": "Spawn a new connection.  fun ref _spawn(\n  ns: U32 val)\n: None val", 
            "title": "_spawn"
        }, 
        {
            "location": "/net-TCPListener/#parameters_6", 
            "text": "ns:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListener/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListener/#_notify_listening", 
            "text": "Inform the notifier that we're listening.  fun ref _notify_listening()\n: None val", 
            "title": "_notify_listening"
        }, 
        {
            "location": "/net-TCPListener/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenNotify/", 
            "text": "TCPListenNotify\n\n\nNotifications for TCP listeners.\n\n\nFor an example of using this class, please see the documentation for the\n\nTCPListener\n actor.\n\n\ninterface ref TCPListenNotify\n\n\n\n\nPublic Functions\n\n\nlistening\n\n\nCalled when the listener has been bound to an address.\n\n\nfun ref listening(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\n\nCalled if it wasn't possible to bind the listener to an address.\n\n\nIt is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:\n\n\nfun ref not_listening(listen: TCPListener ref) =\n\n  None\n\n\n\n\nfun ref not_listening(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nCalled when the listener is closed.\n\n\nfun ref closed(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\n\nCreate a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.\n\n\nfun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^ ?\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nTCPConnectionNotify\n iso^ ?", 
            "title": "interface TCPListenNotify"
        }, 
        {
            "location": "/net-TCPListenNotify/#tcplistennotify", 
            "text": "Notifications for TCP listeners.  For an example of using this class, please see the documentation for the TCPListener  actor.  interface ref TCPListenNotify", 
            "title": "TCPListenNotify"
        }, 
        {
            "location": "/net-TCPListenNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPListenNotify/#listening", 
            "text": "Called when the listener has been bound to an address.  fun ref listening(\n  listen: TCPListener ref)\n: None val", 
            "title": "listening"
        }, 
        {
            "location": "/net-TCPListenNotify/#parameters", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenNotify/#not_listening", 
            "text": "Called if it wasn't possible to bind the listener to an address.  It is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:  fun ref not_listening(listen: TCPListener ref) = \n  None  fun ref not_listening(\n  listen: TCPListener ref)\n: None val", 
            "title": "not_listening"
        }, 
        {
            "location": "/net-TCPListenNotify/#parameters_1", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenNotify/#closed", 
            "text": "Called when the listener is closed.  fun ref closed(\n  listen: TCPListener ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-TCPListenNotify/#parameters_2", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenNotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenNotify/#connected", 
            "text": "Create a new TCPConnectionNotify to attach to a new TCPConnection for a\nnewly established connection to the server.  fun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^ ?", 
            "title": "connected"
        }, 
        {
            "location": "/net-TCPListenNotify/#parameters_3", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenNotify/#returns_3", 
            "text": "TCPConnectionNotify  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/", 
            "text": "TCPConnectionNotify\n\n\nNotifications for TCP connections.\n\n\nFor an example of using this class please see the documentation for the\n\nTCPConnection\n and \nTCPListener\n actors.\n\n\ninterface ref TCPConnectionNotify\n\n\n\n\nPublic Functions\n\n\naccepted\n\n\nCalled when a TCPConnection is accepted by a TCPListener.\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\n\nCalled if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\n\nCalled when we have successfully connected to the server.\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\n\nCalled when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.\n\n\nIt is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:\n\n\nfun ref connect_failed(conn: TCPConnection ref) =\n\n  None\n\n\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nauth_failed\n\n\nA raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (e.g. SSL).\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\n\nCalled when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. To swallow data,\nreturn an empty string.\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\n\nCalled when multiple chunks of data are sent to the connection in a single\ncall. This gives the notifier an opportunity to modify the sent data chunks\nbefore they are written. To swallow the send, return an empty\nArray[String].\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nreceived\n\n\nCalled when new data is received on the connection. Return true if you\nwant to continue receiving messages without yielding until you read\nmax_size on the TCPConnection. Return false to cause the TCPConnection\nto yield now.\n\n\nIncludes the number of times during the current behavior, that received has\nbeen called. This allows the notifier to end reads on a regular basis.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexpect\n\n\nCalled when the connection has been told to expect a certain quantity of\nbytes. This allows nested notifiers to change the expected quantity, which\nallows a lower level protocol to handle any framing (e.g. SSL).\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclosed\n\n\nCalled when the connection is closed.\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\n\nCalled when the connection starts experiencing TCP backpressure. You should\nrespond to this by pausing additional calls to \nwrite\n and \nwritev\n until\nyou are informed that pressure has been released. Failure to respond to\nthe \nthrottled\n notification will result in outgoing data queuing in the\nconnection and increasing memory usage.\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\n\nCalled when the connection stops experiencing TCP backpressure. Upon\nreceiving this notification, you should feel free to start making calls to\n\nwrite\n and \nwritev\n again.\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface TCPConnectionNotify"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#tcpconnectionnotify", 
            "text": "Notifications for TCP connections.  For an example of using this class please see the documentation for the TCPConnection  and  TCPListener  actors.  interface ref TCPConnectionNotify", 
            "title": "TCPConnectionNotify"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#accepted", 
            "text": "Called when a TCPConnection is accepted by a TCPListener.  fun ref accepted(\n  conn: TCPConnection ref)\n: None val", 
            "title": "accepted"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#connecting", 
            "text": "Called if name resolution succeeded for a TCPConnection and we are now\nwaiting for a connection to the server to succeed. The count is the number\nof connections we're trying. The notifier will be informed each time the\ncount changes, until a connection is made or connect_failed() is called.  fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val", 
            "title": "connecting"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_1", 
            "text": "conn:  TCPConnection  ref  count:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#connected", 
            "text": "Called when we have successfully connected to the server.  fun ref connected(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connected"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_2", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#connect_failed", 
            "text": "Called when we have failed to connect to all possible addresses for the\nserver. At this point, the connection will never be established.  It is expected to implement proper error handling. You need to opt in to\nignoring errors, which can be implemented like this:  fun ref connect_failed(conn: TCPConnection ref) = \n  None  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connect_failed"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_3", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#auth_failed", 
            "text": "A raw TCPConnection has no authentication mechanism. However, when\nprotocols are wrapped in other protocols, this can be used to report an\nauthentication failure in a lower level protocol (e.g. SSL).  fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "auth_failed"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_4", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#sent", 
            "text": "Called when data is sent on the connection. This gives the notifier an\nopportunity to modify sent data before it is written. To swallow data,\nreturn an empty string.  fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)", 
            "title": "sent"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_5", 
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_5", 
            "text": "( String  val |  Array [ U8  val] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#sentv", 
            "text": "Called when multiple chunks of data are sent to the connection in a single\ncall. This gives the notifier an opportunity to modify the sent data chunks\nbefore they are written. To swallow the send, return an empty\nArray[String].  fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val", 
            "title": "sentv"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_6", 
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_6", 
            "text": "ByteSeqIter  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#received", 
            "text": "Called when new data is received on the connection. Return true if you\nwant to continue receiving messages without yielding until you read\nmax_size on the TCPConnection. Return false to cause the TCPConnection\nto yield now.  Includes the number of times during the current behavior, that received has\nbeen called. This allows the notifier to end reads on a regular basis.  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val", 
            "title": "received"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_7", 
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#expect", 
            "text": "Called when the connection has been told to expect a certain quantity of\nbytes. This allows nested notifiers to change the expected quantity, which\nallows a lower level protocol to handle any framing (e.g. SSL).  fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val", 
            "title": "expect"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_8", 
            "text": "conn:  TCPConnection  ref  qty:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_8", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#closed", 
            "text": "Called when the connection is closed.  fun ref closed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_9", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#throttled", 
            "text": "Called when the connection starts experiencing TCP backpressure. You should\nrespond to this by pausing additional calls to  write  and  writev  until\nyou are informed that pressure has been released. Failure to respond to\nthe  throttled  notification will result in outgoing data queuing in the\nconnection and increasing memory usage.  fun ref throttled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "throttled"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_10", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#unthrottled", 
            "text": "Called when the connection stops experiencing TCP backpressure. Upon\nreceiving this notification, you should feel free to start making calls to write  and  writev  again.  fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#parameters_11", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectionNotify/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectionAuth/", 
            "text": "TCPConnectionAuth\n\n\ntype TCPConnectionAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \nTCPConnectAuth\n val)", 
            "title": "type TCPConnectionAuth"
        }, 
        {
            "location": "/net-TCPConnectionAuth/#tcpconnectionauth", 
            "text": "type TCPConnectionAuth is\n  (AmbientAuth val | NetAuth val | TCPAuth val | TCPConnectAuth val)", 
            "title": "TCPConnectionAuth"
        }, 
        {
            "location": "/net-TCPConnectionAuth/#type-alias-for", 
            "text": "( AmbientAuth  val |  NetAuth  val |  TCPAuth  val |  TCPConnectAuth  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-TCPConnection/", 
            "text": "TCPConnection\n\n\nA TCP connection. When connecting, the Happy Eyeballs algorithm is used.\n\n\nThe following code creates a client that connects to port 8989 of\nthe local host, writes \"hello world\", and listens for a response,\nwhich it then prints.\n\n\nuse \nnet\n\n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  let _out: OutStream\n\n  new create(out: OutStream) =\n\n    _out = out\n\n  fun ref connected(conn: TCPConnection ref) =\n\n    conn.write(\nhello world\n)\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  =\n\n    _out.print(\nGOT:\n + String.from_array(consume data))\n    conn.close()\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) =\n\n    None\n\nactor Main\n  new create(env: Env) =\n\n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover MyTCPConnectionNotify(env.out) end, \n, \n8989\n)\n    end\n\n\n\n\nNote: when writing to the connection data will be silently discarded if the\nconnection has not yet been established.\n\n\nBackpressure support\n\n\nWrite\n\n\nThe TCP protocol has built-in backpressure support. This is generally\nexperienced as the outgoing write buffer becoming full and being unable\nto write all requested data to the socket. In \nTCPConnection\n, this is\nhidden from the programmer. When this occurs, \nTCPConnection\n will buffer\nthe extra data until such time as it is able to be sent. Left unchecked,\nthis could result in uncontrolled queuing. To address this,\n\nTCPConnectionNotify\n implements two methods \nthrottled\n and \nunthrottled\n\nthat are called when backpressure is applied and released.\n\n\nUpon receiving a \nthrottled\n notification, your application has two choices\non how to handle it. One is to inform the Pony runtime that it can no\nlonger make progress and that runtime backpressure should be applied to\nany actors sending this one messages. For example, you might construct your\napplication like:\n\n\n// Here we have a TCPConnectionNotify that upon construction\n// is given a BackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\n\nuse \nbackpressure\n\nuse \ncollections\n\nuse \nnet\n\n\nclass SlowDown is TCPConnectionNotify\n  let _auth: BackpressureAuth\n  let _out: StdStream\n\n  new iso create(auth: BackpressureAuth, out: StdStream) =\n\n    _auth = auth\n    _out = out\n\n  fun ref throttled(connection: TCPConnection ref) =\n\n    _out.print(\nExperiencing backpressure!\n)\n    Backpressure.apply(_auth)\n\n  fun ref unthrottled(connection: TCPConnection ref) =\n\n    _out.print(\nReleasing backpressure!\n)\n    Backpressure.release(_auth)\n\n  fun ref connect_failed(conn: TCPConnection ref) =\n\n    None\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let auth = env.root as AmbientAuth\n      let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n        \n, \n7669\n)\n    end\n\n\n\n\n\nOr if you want, you could handle backpressure by shedding load, that is,\ndropping the extra data rather than carrying out the send. This might look\nlike:\n\n\nuse \nnet\n\n\nclass ThrowItAway is TCPConnectionNotify\n  var _throttled: Bool = false\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq =\n\n    if not _throttled then\n      data\n    else\n      \n\n    end\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter =\n\n    if not _throttled then\n      data\n    else\n      recover Array[String] end\n    end\n\n  fun ref throttled(connection: TCPConnection ref) =\n\n    _throttled = true\n\n  fun ref unthrottled(connection: TCPConnection ref) =\n\n    _throttled = false\n\n  fun ref connect_failed(conn: TCPConnection ref) =\n\n    None\n\nactor Main\n  new create(env: Env) =\n\n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover ThrowItAway end, \n, \n7669\n)\n    end\n\n\n\n\nIn general, unless you have a very specific use case, we strongly advise that\nyou don't implement a load shedding scheme where you drop data.\n\n\nRead\n\n\nIf your application is unable to keep up with data being sent to it over\na \nTCPConnection\n you can use the builtin read backpressure support to\npause reading the socket which will in turn start to exert backpressure on\nthe corresponding writer on the other end of that socket.\n\n\nThe \nmute\n behavior allow any other actors in your application to request\nthe cessation of additional reads until such time as \nunmute\n is called.\nPlease note that this cessation is not guaranteed to happen immediately as\nit is the result of an asynchronous behavior call and as such will have to\nwait for existing messages in the \nTCPConnection\n's mailbox to be handled.\n\n\nOn non-windows platforms, your \nTCPConnection\n will not notice if the\nother end of the connection closes until you unmute it. Unix type systems\nlike FreeBSD, Linux and OSX learn about a closed connection upon read. On\nthese platforms, you \nmust\n call \nunmute\n on a muted connection to have\nit close. Without calling \nunmute\n the \nTCPConnection\n actor will never\nexit.\n\n\nactor tag TCPConnection\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nfrom: \nString\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\nip4\n\n\nnew tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nfrom: \nString\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\nip6\n\n\nnew tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nfrom: \nString\n val = seq\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\n_accept\n\n\nnew tag _accept(\n  listen: TCPListener tag,\n  notify: TCPConnectionNotify iso,\n  fd: U32 val,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n tag\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nfd: \nU32\n val\n\n\ninit_size: \nUSize\n val = seq\n\n\nmax_size: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTCPConnection\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nwrite\n\n\nWrite a single sequence of bytes. Data will be silently discarded if the\nconnection has not yet been established though.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwritev\n\n\nWrite a sequence of sequences of bytes. Data will be silently discarded if\nthe connection has not yet been established though.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nmute\n\n\nTemporarily suspend reading off this TCPConnection until such time as\n\nunmute\n is called.\n\n\nbe mute()\n\n\n\n\n\n\nunmute\n\n\nStart reading off this TCPConnection again after having been muted.\n\n\nbe unmute()\n\n\n\n\n\n\nset_notify\n\n\nChange the notifier.\n\n\nbe set_notify(\n  notify: TCPConnectionNotify iso)\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\n\n\n\n\ndispose\n\n\nClose the connection gracefully once all writes are sent.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\n\nlocal_address\n\n\nReturn the local IP address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nremote_address\n\n\nReturn the remote IP address.\n\n\nfun box remote_address()\n: NetAddress val\n\n\n\n\nReturns\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nexpect\n\n\nA \nreceived\n call on the notifier must contain exactly \nqty\n bytes. If\n\nqty\n is zero, the call can contain any amount of data. This has no effect\nif called in the \nsent\n notifier callback.\n\n\nfun ref expect(\n  qty: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nqty: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_nodelay\n\n\nTurn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.\n\n\nfun ref set_nodelay(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_keepalive\n\n\nSets the TCP keepalive timeout to approximately \nsecs\n seconds. Exact\ntiming is OS dependent. If \nsecs\n is zero, TCP keepalive is disabled. TCP\nkeepalive is disabled by default. This can only be set on a connected\nsocket.\n\n\nfun ref set_keepalive(\n  secs: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsecs: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nwrite_final\n\n\nWrite as much as possible to the socket. Set \n_writeable\n to \nfalse\n if not\neverything was written. On an error, close the connection. This is for data\nthat has already been transformed by the notifier. Data will be silently\ndiscarded if the connection has not yet been established though.\n\n\nfun ref write_final(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclose\n\n\nAttempt to perform a graceful shutdown. Don't accept new writes. If the\nconnection isn't muted then we won't finish closing until we get a zero\nlength read. If the connection is muted, perform a hard close and shut\ndown immediately.\n\n\nfun ref close()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nHandle socket events.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\n_read_again\n\n\nResume reading.\n\n\nbe _read_again()\n\n\n\n\n\n\nPrivate Functions\n\n\n_complete_writes\n\n\nThe OS has informed us that \nlen\n bytes of pending writes have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun ref _complete_writes(\n  len: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pending_writes\n\n\nSend pending data. If any data can't be sent, keep it and mark as not\nwriteable. On an error, dispose of the connection. Returns whether\nit sent all pending data or not.\n\n\nfun ref _pending_writes()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_manage_pending_buffer\n\n\nManage pending buffer for data sent. Returns a boolean of whether\nthe pending buffer is empty or not.\n\n\nfun ref _manage_pending_buffer(\n  bytes_sent: USize val,\n  bytes_to_send: USize val,\n  num_to_send: USize val)\n: Bool val ?\n\n\n\n\nParameters\n\n\n\n\nbytes_sent: \nUSize\n val\n\n\nbytes_to_send: \nUSize\n val\n\n\nnum_to_send: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\n_complete_reads\n\n\nThe OS has informed us that \nlen\n bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.\n\n\nfun ref _complete_reads(\n  len: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlen: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_read_buf_size\n\n\nResize the read buffer.\n\n\nfun ref _read_buf_size()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_queue_read\n\n\nBegin an IOCP read on Windows.\n\n\nfun ref _queue_read()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pending_reads\n\n\nUnless this connection is currently muted, read while data is available,\nguessing the next packet length as we go. If we read 4 kb of data, send\nourself a resume message and stop reading, to avoid starving other actors.\n\n\nfun ref _pending_reads()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_notify_connecting\n\n\nInform the notifier that we're connecting.\n\n\nfun ref _notify_connecting()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_close\n\n\nfun ref _close()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_try_shutdown\n\n\nIf we have closed and we have no remaining writes or pending connections,\nthen shutdown.\n\n\nfun ref _try_shutdown()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_hard_close\n\n\nWhen an error happens, do a non-graceful close.\n\n\nfun ref _hard_close()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_apply_backpressure\n\n\nfun ref _apply_backpressure()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_release_backpressure\n\n\nfun ref _release_backpressure()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor TCPConnection"
        }, 
        {
            "location": "/net-TCPConnection/#tcpconnection", 
            "text": "A TCP connection. When connecting, the Happy Eyeballs algorithm is used.  The following code creates a client that connects to port 8989 of\nthe local host, writes \"hello world\", and listens for a response,\nwhich it then prints.  use  net \n\nclass MyTCPConnectionNotify is TCPConnectionNotify\n  let _out: OutStream\n\n  new create(out: OutStream) = \n    _out = out\n\n  fun ref connected(conn: TCPConnection ref) = \n    conn.write( hello world )\n\n  fun ref received(\n    conn: TCPConnection ref,\n    data: Array[U8] iso,\n    times: USize)\n    : Bool\n  = \n    _out.print( GOT:  + String.from_array(consume data))\n    conn.close()\n    true\n\n  fun ref connect_failed(conn: TCPConnection ref) = \n    None\n\nactor Main\n  new create(env: Env) = \n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover MyTCPConnectionNotify(env.out) end,  ,  8989 )\n    end  Note: when writing to the connection data will be silently discarded if the\nconnection has not yet been established.", 
            "title": "TCPConnection"
        }, 
        {
            "location": "/net-TCPConnection/#backpressure-support", 
            "text": "", 
            "title": "Backpressure support"
        }, 
        {
            "location": "/net-TCPConnection/#write", 
            "text": "The TCP protocol has built-in backpressure support. This is generally\nexperienced as the outgoing write buffer becoming full and being unable\nto write all requested data to the socket. In  TCPConnection , this is\nhidden from the programmer. When this occurs,  TCPConnection  will buffer\nthe extra data until such time as it is able to be sent. Left unchecked,\nthis could result in uncontrolled queuing. To address this, TCPConnectionNotify  implements two methods  throttled  and  unthrottled \nthat are called when backpressure is applied and released.  Upon receiving a  throttled  notification, your application has two choices\non how to handle it. One is to inform the Pony runtime that it can no\nlonger make progress and that runtime backpressure should be applied to\nany actors sending this one messages. For example, you might construct your\napplication like:  // Here we have a TCPConnectionNotify that upon construction\n// is given a BackpressureAuth token. This allows the notifier\n// to inform the Pony runtime when to apply and release backpressure\n// as the connection experiences it.\n// Note the calls to\n//\n// Backpressure.apply(_auth)\n// Backpressure.release(_auth)\n//\n// that apply and release backpressure as needed\n\nuse  backpressure \nuse  collections \nuse  net \n\nclass SlowDown is TCPConnectionNotify\n  let _auth: BackpressureAuth\n  let _out: StdStream\n\n  new iso create(auth: BackpressureAuth, out: StdStream) = \n    _auth = auth\n    _out = out\n\n  fun ref throttled(connection: TCPConnection ref) = \n    _out.print( Experiencing backpressure! )\n    Backpressure.apply(_auth)\n\n  fun ref unthrottled(connection: TCPConnection ref) = \n    _out.print( Releasing backpressure! )\n    Backpressure.release(_auth)\n\n  fun ref connect_failed(conn: TCPConnection ref) = \n    None\n\nactor Main\n  new create(env: Env) = \n    try\n      let auth = env.root as AmbientAuth\n      let socket = TCPConnection(auth, recover SlowDown(auth, env.out) end,\n         ,  7669 )\n    end  Or if you want, you could handle backpressure by shedding load, that is,\ndropping the extra data rather than carrying out the send. This might look\nlike:  use  net \n\nclass ThrowItAway is TCPConnectionNotify\n  var _throttled: Bool = false\n\n  fun ref sent(conn: TCPConnection ref, data: ByteSeq): ByteSeq = \n    if not _throttled then\n      data\n    else\n       \n    end\n\n  fun ref sentv(conn: TCPConnection ref, data: ByteSeqIter): ByteSeqIter = \n    if not _throttled then\n      data\n    else\n      recover Array[String] end\n    end\n\n  fun ref throttled(connection: TCPConnection ref) = \n    _throttled = true\n\n  fun ref unthrottled(connection: TCPConnection ref) = \n    _throttled = false\n\n  fun ref connect_failed(conn: TCPConnection ref) = \n    None\n\nactor Main\n  new create(env: Env) = \n    try\n      TCPConnection(env.root as AmbientAuth,\n        recover ThrowItAway end,  ,  7669 )\n    end  In general, unless you have a very specific use case, we strongly advise that\nyou don't implement a load shedding scheme where you drop data.", 
            "title": "Write"
        }, 
        {
            "location": "/net-TCPConnection/#read", 
            "text": "If your application is unable to keep up with data being sent to it over\na  TCPConnection  you can use the builtin read backpressure support to\npause reading the socket which will in turn start to exert backpressure on\nthe corresponding writer on the other end of that socket.  The  mute  behavior allow any other actors in your application to request\nthe cessation of additional reads until such time as  unmute  is called.\nPlease note that this cessation is not guaranteed to happen immediately as\nit is the result of an asynchronous behavior call and as such will have to\nwait for existing messages in the  TCPConnection 's mailbox to be handled.  On non-windows platforms, your  TCPConnection  will not notice if the\nother end of the connection closes until you unmute it. Unix type systems\nlike FreeBSD, Linux and OSX learn about a closed connection upon read. On\nthese platforms, you  must  call  unmute  on a muted connection to have\nit close. Without calling  unmute  the  TCPConnection  actor will never\nexit.  actor tag TCPConnection", 
            "title": "Read"
        }, 
        {
            "location": "/net-TCPConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPConnection/#create", 
            "text": "new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^", 
            "title": "create"
        }, 
        {
            "location": "/net-TCPConnection/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  notify:  TCPConnectionNotify  iso  host:  String  val  service:  String  val  from:  String  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns", 
            "text": "TCPConnection  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#ip4", 
            "text": "new tag ip4(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^", 
            "title": "ip4"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_1", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  notify:  TCPConnectionNotify  iso  host:  String  val  service:  String  val  from:  String  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_1", 
            "text": "TCPConnection  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#ip6", 
            "text": "new tag ip6(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  notify: TCPConnectionNotify iso,\n  host: String val,\n  service: String val,\n  from: String val = seq,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^", 
            "title": "ip6"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_2", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  notify:  TCPConnectionNotify  iso  host:  String  val  service:  String  val  from:  String  val = seq  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_2", 
            "text": "TCPConnection  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_accept", 
            "text": "new tag _accept(\n  listen: TCPListener tag,\n  notify: TCPConnectionNotify iso,\n  fd: U32 val,\n  init_size: USize val = seq,\n  max_size: USize val = seq)\n: TCPConnection tag^", 
            "title": "_accept"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_3", 
            "text": "listen:  TCPListener  tag  notify:  TCPConnectionNotify  iso  fd:  U32  val  init_size:  USize  val = seq  max_size:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_3", 
            "text": "TCPConnection  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-TCPConnection/#write_1", 
            "text": "Write a single sequence of bytes. Data will be silently discarded if the\nconnection has not yet been established though.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_4", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#writev", 
            "text": "Write a sequence of sequences of bytes. Data will be silently discarded if\nthe connection has not yet been established though.  be writev(\n  data: ByteSeqIter val)", 
            "title": "writev"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_5", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#mute", 
            "text": "Temporarily suspend reading off this TCPConnection until such time as unmute  is called.  be mute()", 
            "title": "mute"
        }, 
        {
            "location": "/net-TCPConnection/#unmute", 
            "text": "Start reading off this TCPConnection again after having been muted.  be unmute()", 
            "title": "unmute"
        }, 
        {
            "location": "/net-TCPConnection/#set_notify", 
            "text": "Change the notifier.  be set_notify(\n  notify: TCPConnectionNotify iso)", 
            "title": "set_notify"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_6", 
            "text": "notify:  TCPConnectionNotify  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#dispose", 
            "text": "Close the connection gracefully once all writes are sent.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-TCPConnection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPConnection/#local_address", 
            "text": "Return the local IP address.  fun box local_address()\n: NetAddress val", 
            "title": "local_address"
        }, 
        {
            "location": "/net-TCPConnection/#returns_4", 
            "text": "NetAddress  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#remote_address", 
            "text": "Return the remote IP address.  fun box remote_address()\n: NetAddress val", 
            "title": "remote_address"
        }, 
        {
            "location": "/net-TCPConnection/#returns_5", 
            "text": "NetAddress  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#expect", 
            "text": "A  received  call on the notifier must contain exactly  qty  bytes. If qty  is zero, the call can contain any amount of data. This has no effect\nif called in the  sent  notifier callback.  fun ref expect(\n  qty: USize val = seq)\n: None val", 
            "title": "expect"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_7", 
            "text": "qty:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#set_nodelay", 
            "text": "Turn Nagle on/off. Defaults to on. This can only be set on a connected\nsocket.  fun ref set_nodelay(\n  state: Bool val)\n: None val", 
            "title": "set_nodelay"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_8", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#set_keepalive", 
            "text": "Sets the TCP keepalive timeout to approximately  secs  seconds. Exact\ntiming is OS dependent. If  secs  is zero, TCP keepalive is disabled. TCP\nkeepalive is disabled by default. This can only be set on a connected\nsocket.  fun ref set_keepalive(\n  secs: U32 val)\n: None val", 
            "title": "set_keepalive"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_9", 
            "text": "secs:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#write_final", 
            "text": "Write as much as possible to the socket. Set  _writeable  to  false  if not\neverything was written. On an error, close the connection. This is for data\nthat has already been transformed by the notifier. Data will be silently\ndiscarded if the connection has not yet been established though.  fun ref write_final(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "write_final"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_10", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#close", 
            "text": "Attempt to perform a graceful shutdown. Don't accept new writes. If the\nconnection isn't muted then we won't finish closing until we get a zero\nlength read. If the connection is muted, perform a hard close and shut\ndown immediately.  fun ref close()\n: None val", 
            "title": "close"
        }, 
        {
            "location": "/net-TCPConnection/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-TCPConnection/#_event_notify", 
            "text": "Handle socket events.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_11", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#_read_again", 
            "text": "Resume reading.  be _read_again()", 
            "title": "_read_again"
        }, 
        {
            "location": "/net-TCPConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-TCPConnection/#_complete_writes", 
            "text": "The OS has informed us that  len  bytes of pending writes have completed.\nThis occurs only with IOCP on Windows.  fun ref _complete_writes(\n  len: U32 val)\n: None val", 
            "title": "_complete_writes"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_12", 
            "text": "len:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_pending_writes", 
            "text": "Send pending data. If any data can't be sent, keep it and mark as not\nwriteable. On an error, dispose of the connection. Returns whether\nit sent all pending data or not.  fun ref _pending_writes()\n: Bool val", 
            "title": "_pending_writes"
        }, 
        {
            "location": "/net-TCPConnection/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_manage_pending_buffer", 
            "text": "Manage pending buffer for data sent. Returns a boolean of whether\nthe pending buffer is empty or not.  fun ref _manage_pending_buffer(\n  bytes_sent: USize val,\n  bytes_to_send: USize val,\n  num_to_send: USize val)\n: Bool val ?", 
            "title": "_manage_pending_buffer"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_13", 
            "text": "bytes_sent:  USize  val  bytes_to_send:  USize  val  num_to_send:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_13", 
            "text": "Bool  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_complete_reads", 
            "text": "The OS has informed us that  len  bytes of pending reads have completed.\nThis occurs only with IOCP on Windows.  fun ref _complete_reads(\n  len: U32 val)\n: None val", 
            "title": "_complete_reads"
        }, 
        {
            "location": "/net-TCPConnection/#parameters_14", 
            "text": "len:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnection/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_read_buf_size", 
            "text": "Resize the read buffer.  fun ref _read_buf_size()\n: None val", 
            "title": "_read_buf_size"
        }, 
        {
            "location": "/net-TCPConnection/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_queue_read", 
            "text": "Begin an IOCP read on Windows.  fun ref _queue_read()\n: None val", 
            "title": "_queue_read"
        }, 
        {
            "location": "/net-TCPConnection/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_pending_reads", 
            "text": "Unless this connection is currently muted, read while data is available,\nguessing the next packet length as we go. If we read 4 kb of data, send\nourself a resume message and stop reading, to avoid starving other actors.  fun ref _pending_reads()\n: None val", 
            "title": "_pending_reads"
        }, 
        {
            "location": "/net-TCPConnection/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_notify_connecting", 
            "text": "Inform the notifier that we're connecting.  fun ref _notify_connecting()\n: None val", 
            "title": "_notify_connecting"
        }, 
        {
            "location": "/net-TCPConnection/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_close", 
            "text": "fun ref _close()\n: None val", 
            "title": "_close"
        }, 
        {
            "location": "/net-TCPConnection/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_try_shutdown", 
            "text": "If we have closed and we have no remaining writes or pending connections,\nthen shutdown.  fun ref _try_shutdown()\n: None val", 
            "title": "_try_shutdown"
        }, 
        {
            "location": "/net-TCPConnection/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_hard_close", 
            "text": "When an error happens, do a non-graceful close.  fun ref _hard_close()\n: None val", 
            "title": "_hard_close"
        }, 
        {
            "location": "/net-TCPConnection/#returns_21", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_apply_backpressure", 
            "text": "fun ref _apply_backpressure()\n: None val", 
            "title": "_apply_backpressure"
        }, 
        {
            "location": "/net-TCPConnection/#returns_22", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnection/#_release_backpressure", 
            "text": "fun ref _release_backpressure()\n: None val", 
            "title": "_release_backpressure"
        }, 
        {
            "location": "/net-TCPConnection/#returns_23", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/", 
            "text": "NetAddress\n\n\nRepresents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.\n\n\nThis class is modelled after the C data structure for holding socket\naddresses for both IPv4 and IPv6 \nsockaddr_storage\n.\n\n\nThe public fields of this class model exactly the fields of \nsockaddr_in\n\nand are in network byte order. Use the \nname\n method\nto obtain address/hostname and port/service as Strings.\n\n\nclass val NetAddress is\n  Equatable[NetAddress val] ref\n\n\n\n\nImplements\n\n\n\n\nEquatable\n[\nNetAddress\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: NetAddress iso^\n\n\n\n\nReturns\n\n\n\n\nNetAddress\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet length: \nU8\n val\n\n\n\n\n\n\n\n\nlet family: \nU8\n val\n\n\n\n\n\n\n\n\nlet port: \nU16\n val\n\n\n\n\n\n\n\n\nlet addr: \nU32\n val\n\n\n\n\n\n\n\n\nlet addr1: \nU32\n val\n\n\n\n\n\n\n\n\nlet addr2: \nU32\n val\n\n\n\n\n\n\n\n\nlet addr3: \nU32\n val\n\n\n\n\n\n\n\n\nlet addr4: \nU32\n val\n\n\n\n\n\n\n\n\nlet scope: \nU32\n val\n\n\n\n\n\n\nPublic Functions\n\n\nip4\n\n\nReturns true for an IPv4 address.\n\n\nfun box ip4()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nip6\n\n\nReturns true for an IPv6 address.\n\n\nfun box ip6()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nname\n\n\nReturns the host and service name.\n\n\nIf \nreversedns\n is an instance of \nDNSLookupAuth\n\na DNS lookup will be executed and the hostname\nfor this address is returned as first element of the result tuple.\nIf no hostname could be found, an error is raised.\nIf \nreversedns\n is \nNone\n the plain IP address is given\nand no DNS lookup is executed.\n\n\nIf \nservicename\n is \nfalse\n the numeric port is returned\nas second element of the result tuple.\nIf it is \ntrue\n the port is translated into its\ncorresponding servicename (e.g. port 80 is returned as \n\"http\"\n).\n\n\nInternally this method uses the POSIX C function \ngetnameinfo\n.\n\n\nfun box name(\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq,\n  servicename: Bool val = seq)\n: (String val , String val) ?\n\n\n\n\nParameters\n\n\n\n\nreversedns: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val | \n    \nNone\n val) = seq\n\n\nservicename: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val , \nString\n val) ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: NetAddress box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNetAddress\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhost_eq\n\n\nfun box host_eq(\n  that: NetAddress box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNetAddress\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: NetAddress val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNetAddress\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class NetAddress"
        }, 
        {
            "location": "/net-NetAddress/#netaddress", 
            "text": "Represents an IPv4 or IPv6 address. The family field indicates the address\ntype. The addr field is either the IPv4 address or the IPv6 flow info. The\naddr1-4 fields are the IPv6 address, or invalid for an IPv4 address. The\nscope field is the IPv6 scope, or invalid for an IPv4 address.  This class is modelled after the C data structure for holding socket\naddresses for both IPv4 and IPv6  sockaddr_storage .  The public fields of this class model exactly the fields of  sockaddr_in \nand are in network byte order. Use the  name  method\nto obtain address/hostname and port/service as Strings.  class val NetAddress is\n  Equatable[NetAddress val] ref", 
            "title": "NetAddress"
        }, 
        {
            "location": "/net-NetAddress/#implements", 
            "text": "Equatable [ NetAddress  val] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-NetAddress/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-NetAddress/#create", 
            "text": "new iso create()\n: NetAddress iso^", 
            "title": "create"
        }, 
        {
            "location": "/net-NetAddress/#returns", 
            "text": "NetAddress  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/#public-fields", 
            "text": "let length:  U8  val     let family:  U8  val     let port:  U16  val     let addr:  U32  val     let addr1:  U32  val     let addr2:  U32  val     let addr3:  U32  val     let addr4:  U32  val     let scope:  U32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-NetAddress/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-NetAddress/#ip4", 
            "text": "Returns true for an IPv4 address.  fun box ip4()\n: Bool val", 
            "title": "ip4"
        }, 
        {
            "location": "/net-NetAddress/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/#ip6", 
            "text": "Returns true for an IPv6 address.  fun box ip6()\n: Bool val", 
            "title": "ip6"
        }, 
        {
            "location": "/net-NetAddress/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/#name", 
            "text": "Returns the host and service name.  If  reversedns  is an instance of  DNSLookupAuth \na DNS lookup will be executed and the hostname\nfor this address is returned as first element of the result tuple.\nIf no hostname could be found, an error is raised.\nIf  reversedns  is  None  the plain IP address is given\nand no DNS lookup is executed.  If  servicename  is  false  the numeric port is returned\nas second element of the result tuple.\nIf it is  true  the port is translated into its\ncorresponding servicename (e.g. port 80 is returned as  \"http\" ).  Internally this method uses the POSIX C function  getnameinfo .  fun box name(\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq,\n  servicename: Bool val = seq)\n: (String val , String val) ?", 
            "title": "name"
        }, 
        {
            "location": "/net-NetAddress/#parameters", 
            "text": "reversedns: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val | \n     None  val) = seq  servicename:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAddress/#returns_3", 
            "text": "( String  val ,  String  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/#eq", 
            "text": "fun box eq(\n  that: NetAddress box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-NetAddress/#parameters_1", 
            "text": "that:  NetAddress  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAddress/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/#host_eq", 
            "text": "fun box host_eq(\n  that: NetAddress box)\n: Bool val", 
            "title": "host_eq"
        }, 
        {
            "location": "/net-NetAddress/#parameters_2", 
            "text": "that:  NetAddress  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAddress/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAddress/#ne", 
            "text": "fun box ne(\n  that: NetAddress val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-NetAddress/#parameters_3", 
            "text": "that:  NetAddress  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAddress/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNSLookupAuth/", 
            "text": "DNSLookupAuth\n\n\ntype DNSLookupAuth is\n  (AmbientAuth val | NetAuth val | DNSAuth val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)", 
            "title": "type DNSLookupAuth"
        }, 
        {
            "location": "/net-DNSLookupAuth/#dnslookupauth", 
            "text": "type DNSLookupAuth is\n  (AmbientAuth val | NetAuth val | DNSAuth val)", 
            "title": "DNSLookupAuth"
        }, 
        {
            "location": "/net-DNSLookupAuth/#type-alias-for", 
            "text": "( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-DNS/", 
            "text": "DNS\n\n\nHelper functions for resolving DNS queries.\n\n\nprimitive val DNS\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DNS val^\n\n\n\n\nReturns\n\n\n\n\nDNS\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nGets all IPv4 and IPv6 addresses for a host and service.\n\n\nfun box apply(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nip4\n\n\nGets all IPv4 addresses for a host and service.\n\n\nfun box ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nip6\n\n\nGets all IPv6 addresses for a host and service.\n\n\nfun box ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nbroadcast_ip4\n\n\nLink-local IP4 broadcast address.\n\n\nfun box broadcast_ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nbroadcast_ip6\n\n\nLink-local IP6 broadcast address.\n\n\nfun box broadcast_ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nNetAddress\n val] iso^\n\n\n\n\n\n\nis_ip4\n\n\nReturns true if the host is a literal IPv4 address.\n\n\nfun box is_ip4(\n  host: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nhost: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nis_ip6\n\n\nReturns true if the host is a literal IPv6 address.\n\n\nfun box is_ip6(\n  host: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nhost: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: DNS val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDNS\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DNS val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDNS\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_resolve\n\n\nTurns an addrinfo pointer into an array of addresses.\n\n\nfun box _resolve(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  family: U32 val,\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val)\n\n\nfamily: \nU32\n val\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nNetAddress\n val] iso^", 
            "title": "primitive DNS"
        }, 
        {
            "location": "/net-DNS/#dns", 
            "text": "Helper functions for resolving DNS queries.  primitive val DNS", 
            "title": "DNS"
        }, 
        {
            "location": "/net-DNS/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-DNS/#create", 
            "text": "new val create()\n: DNS val^", 
            "title": "create"
        }, 
        {
            "location": "/net-DNS/#returns", 
            "text": "DNS  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-DNS/#apply", 
            "text": "Gets all IPv4 and IPv6 addresses for a host and service.  fun box apply(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^", 
            "title": "apply"
        }, 
        {
            "location": "/net-DNS/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  host:  String  val  service:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_1", 
            "text": "Array [ NetAddress  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#ip4", 
            "text": "Gets all IPv4 addresses for a host and service.  fun box ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^", 
            "title": "ip4"
        }, 
        {
            "location": "/net-DNS/#parameters_1", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  host:  String  val  service:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_2", 
            "text": "Array [ NetAddress  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#ip6", 
            "text": "Gets all IPv6 addresses for a host and service.  fun box ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^", 
            "title": "ip6"
        }, 
        {
            "location": "/net-DNS/#parameters_2", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  host:  String  val  service:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_3", 
            "text": "Array [ NetAddress  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#broadcast_ip4", 
            "text": "Link-local IP4 broadcast address.  fun box broadcast_ip4(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^", 
            "title": "broadcast_ip4"
        }, 
        {
            "location": "/net-DNS/#parameters_3", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  service:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_4", 
            "text": "Array [ NetAddress  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#broadcast_ip6", 
            "text": "Link-local IP6 broadcast address.  fun box broadcast_ip6(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  service: String val)\n: Array[NetAddress val] iso^", 
            "title": "broadcast_ip6"
        }, 
        {
            "location": "/net-DNS/#parameters_4", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  service:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_5", 
            "text": "Array [ NetAddress  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#is_ip4", 
            "text": "Returns true if the host is a literal IPv4 address.  fun box is_ip4(\n  host: String val)\n: Bool val", 
            "title": "is_ip4"
        }, 
        {
            "location": "/net-DNS/#parameters_5", 
            "text": "host:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#is_ip6", 
            "text": "Returns true if the host is a literal IPv6 address.  fun box is_ip6(\n  host: String val)\n: Bool val", 
            "title": "is_ip6"
        }, 
        {
            "location": "/net-DNS/#parameters_6", 
            "text": "host:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#eq", 
            "text": "fun box eq(\n  that: DNS val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-DNS/#parameters_7", 
            "text": "that:  DNS  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#ne", 
            "text": "fun box ne(\n  that: DNS val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-DNS/#parameters_8", 
            "text": "that:  DNS  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNS/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-DNS/#_resolve", 
            "text": "Turns an addrinfo pointer into an array of addresses.  fun box _resolve(\n  auth: (AmbientAuth val | NetAuth val | DNSAuth val),\n  family: U32 val,\n  host: String val,\n  service: String val)\n: Array[NetAddress val] iso^", 
            "title": "_resolve"
        }, 
        {
            "location": "/net-DNS/#parameters_9", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val)  family:  U32  val  host:  String  val  service:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNS/#returns_10", 
            "text": "Array [ NetAddress  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAuth/", 
            "text": "NetAuth\n\n\nprimitive val NetAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: AmbientAuth val)\n: NetAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nNetAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: NetAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNetAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: NetAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNetAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive NetAuth"
        }, 
        {
            "location": "/net-NetAuth/#netauth", 
            "text": "primitive val NetAuth", 
            "title": "NetAuth"
        }, 
        {
            "location": "/net-NetAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-NetAuth/#create", 
            "text": "new val create(\n  from: AmbientAuth val)\n: NetAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/net-NetAuth/#parameters", 
            "text": "from:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAuth/#returns", 
            "text": "NetAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-NetAuth/#eq", 
            "text": "fun box eq(\n  that: NetAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-NetAuth/#parameters_1", 
            "text": "that:  NetAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-NetAuth/#ne", 
            "text": "fun box ne(\n  that: NetAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-NetAuth/#parameters_2", 
            "text": "that:  NetAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-NetAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNSAuth/", 
            "text": "DNSAuth\n\n\nprimitive val DNSAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val))\n: DNSAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nDNSAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: DNSAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDNSAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DNSAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDNSAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DNSAuth"
        }, 
        {
            "location": "/net-DNSAuth/#dnsauth", 
            "text": "primitive val DNSAuth", 
            "title": "DNSAuth"
        }, 
        {
            "location": "/net-DNSAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-DNSAuth/#create", 
            "text": "new val create(\n  from: (AmbientAuth val | NetAuth val))\n: DNSAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/net-DNSAuth/#parameters", 
            "text": "from: ( AmbientAuth  val |  NetAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNSAuth/#returns", 
            "text": "DNSAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNSAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-DNSAuth/#eq", 
            "text": "fun box eq(\n  that: DNSAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-DNSAuth/#parameters_1", 
            "text": "that:  DNSAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNSAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-DNSAuth/#ne", 
            "text": "fun box ne(\n  that: DNSAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-DNSAuth/#parameters_2", 
            "text": "that:  DNSAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-DNSAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPAuth/", 
            "text": "UDPAuth\n\n\nprimitive val UDPAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val))\n: UDPAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nUDPAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: UDPAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nUDPAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: UDPAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nUDPAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive UDPAuth"
        }, 
        {
            "location": "/net-UDPAuth/#udpauth", 
            "text": "primitive val UDPAuth", 
            "title": "UDPAuth"
        }, 
        {
            "location": "/net-UDPAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-UDPAuth/#create", 
            "text": "new val create(\n  from: (AmbientAuth val | NetAuth val))\n: UDPAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/net-UDPAuth/#parameters", 
            "text": "from: ( AmbientAuth  val |  NetAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPAuth/#returns", 
            "text": "UDPAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-UDPAuth/#eq", 
            "text": "fun box eq(\n  that: UDPAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-UDPAuth/#parameters_1", 
            "text": "that:  UDPAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-UDPAuth/#ne", 
            "text": "fun box ne(\n  that: UDPAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-UDPAuth/#parameters_2", 
            "text": "that:  UDPAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-UDPAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPAuth/", 
            "text": "TCPAuth\n\n\nprimitive val TCPAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val))\n: TCPAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nTCPAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: TCPAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTCPAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: TCPAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTCPAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive TCPAuth"
        }, 
        {
            "location": "/net-TCPAuth/#tcpauth", 
            "text": "primitive val TCPAuth", 
            "title": "TCPAuth"
        }, 
        {
            "location": "/net-TCPAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPAuth/#create", 
            "text": "new val create(\n  from: (AmbientAuth val | NetAuth val))\n: TCPAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/net-TCPAuth/#parameters", 
            "text": "from: ( AmbientAuth  val |  NetAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPAuth/#returns", 
            "text": "TCPAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPAuth/#eq", 
            "text": "fun box eq(\n  that: TCPAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-TCPAuth/#parameters_1", 
            "text": "that:  TCPAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPAuth/#ne", 
            "text": "fun box ne(\n  that: TCPAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-TCPAuth/#parameters_2", 
            "text": "that:  TCPAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenAuth/", 
            "text": "TCPListenAuth\n\n\nprimitive val TCPListenAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPListenAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nTCPListenAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: TCPListenAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTCPListenAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: TCPListenAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTCPListenAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive TCPListenAuth"
        }, 
        {
            "location": "/net-TCPListenAuth/#tcplistenauth", 
            "text": "primitive val TCPListenAuth", 
            "title": "TCPListenAuth"
        }, 
        {
            "location": "/net-TCPListenAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPListenAuth/#create", 
            "text": "new val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPListenAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/net-TCPListenAuth/#parameters", 
            "text": "from: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenAuth/#returns", 
            "text": "TCPListenAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPListenAuth/#eq", 
            "text": "fun box eq(\n  that: TCPListenAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-TCPListenAuth/#parameters_1", 
            "text": "that:  TCPListenAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPListenAuth/#ne", 
            "text": "fun box ne(\n  that: TCPListenAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-TCPListenAuth/#parameters_2", 
            "text": "that:  TCPListenAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPListenAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectAuth/", 
            "text": "TCPConnectAuth\n\n\nprimitive val TCPConnectAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPConnectAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val)\n\n\n\n\nReturns\n\n\n\n\nTCPConnectAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: TCPConnectAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTCPConnectAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: TCPConnectAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTCPConnectAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive TCPConnectAuth"
        }, 
        {
            "location": "/net-TCPConnectAuth/#tcpconnectauth", 
            "text": "primitive val TCPConnectAuth", 
            "title": "TCPConnectAuth"
        }, 
        {
            "location": "/net-TCPConnectAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-TCPConnectAuth/#create", 
            "text": "new val create(\n  from: (AmbientAuth val | NetAuth val | TCPAuth val))\n: TCPConnectAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/net-TCPConnectAuth/#parameters", 
            "text": "from: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectAuth/#returns", 
            "text": "TCPConnectAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-TCPConnectAuth/#eq", 
            "text": "fun box eq(\n  that: TCPConnectAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-TCPConnectAuth/#parameters_1", 
            "text": "that:  TCPConnectAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-TCPConnectAuth/#ne", 
            "text": "fun box ne(\n  that: TCPConnectAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-TCPConnectAuth/#parameters_2", 
            "text": "that:  TCPConnectAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-TCPConnectAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http--index/", 
            "text": "This package includes all the support functions necessary to build client\nand server applications for the HTTP protocol.\n\n\nThe important interfaces an application needs to deal with are:\n\n\n\n\n\n\nHTTPSession\n, the API to an HTTP connection.\n\n\n\n\n\n\nHTTPHandler\n, the interface to a handler you\nneed to write that will receive notifications from the \nHTTPSession\n.\n\n\n\n\n\n\nHandlerFactory\n, the interface to a class you\nneed to write that creates instances of your \nHTTPHandler\n.\n\n\n\n\n\n\nPayload\n, the class that represents a single HTTP\nmessage, with its headers.\n\n\n\n\n\n\nIf you are writing a client, you will need to deal with the\n\nHTTPClient\n class.\n\n\nIf you are writing a server, you will need to deal with the\n\nHTTPServer\n class.\n\n\nPublic Types\n\n\n\n\nprimitive URLPartUser\n\n\nprimitive URLPartPassword\n\n\nprimitive URLPartHost\n\n\nprimitive URLPartPath\n\n\nprimitive URLPartQuery\n\n\nprimitive URLPartFragment\n\n\ntype URLPart\n\n\nprimitive URLEncode\n\n\nclass URL\n\n\ntrait Status\n\n\nprimitive StatusContinue\n\n\nprimitive StatusSwitchingProtocols\n\n\nprimitive StatusOK\n\n\nprimitive StatusCreated\n\n\nprimitive StatusAccepted\n\n\nprimitive StatusNonAuthoritativeInfo\n\n\nprimitive StatusNoContent\n\n\nprimitive StatusResetContent\n\n\nprimitive StatusPartialContent\n\n\nprimitive StatusMultipleChoices\n\n\nprimitive StatusMovedPermanently\n\n\nprimitive StatusFound\n\n\nprimitive StatusSeeOther\n\n\nprimitive StatusNotModified\n\n\nprimitive StatusUseProxy\n\n\nprimitive StatusTemporaryRedirect\n\n\nprimitive StatusBadRequest\n\n\nprimitive StatusUnauthorized\n\n\nprimitive StatusPaymentRequired\n\n\nprimitive StatusForbidden\n\n\nprimitive StatusNotFound\n\n\nprimitive StatusMethodNotAllowed\n\n\nprimitive StatusNotAcceptable\n\n\nprimitive StatusProxyAuthRequired\n\n\nprimitive StatusRequestTimeout\n\n\nprimitive StatusConflict\n\n\nprimitive StatusGone\n\n\nprimitive StatusLengthRequired\n\n\nprimitive StatusPreconditionFailed\n\n\nprimitive StatusRequestEntityTooLarge\n\n\nprimitive StatusRequestURITooLong\n\n\nprimitive StatusUnsupportedMediaType\n\n\nprimitive StatusRequestedRangeNotSatisfiable\n\n\nprimitive StatusExpectationFailed\n\n\nprimitive StatusTeapot\n\n\nprimitive StatusPreconditionRequired\n\n\nprimitive StatusTooManyRequests\n\n\nprimitive StatusRequestHeaderFieldsTooLarge\n\n\nprimitive StatusUnavailableForLegalReasons\n\n\nprimitive StatusInternalServerError\n\n\nprimitive StatusNotImplemented\n\n\nprimitive StatusBadGateway\n\n\nprimitive StatusServiceUnavailable\n\n\nprimitive StatusGatewayTimeout\n\n\nprimitive StatusHTTPVersionNotSupported\n\n\nprimitive StatusNetworkAuthenticationRequired\n\n\ninterface Logger\n\n\ninterface ServerNotify\n\n\nactor HTTPServer\n\n\nprimitive ChunkedTransfer\n\n\nprimitive StreamTransfer\n\n\nprimitive OneshotTransfer\n\n\ntype TransferMode\n\n\nclass Payload\n\n\nprimitive MimeTypes\n\n\ninterface HTTPSession\n\n\ninterface HTTPHandler\n\n\ninterface HandlerFactory\n\n\nprimitive DiscardLog\n\n\nclass ContentsLog\n\n\nclass CommonLog\n\n\nclass HTTPClient\n\n\n\n\nPrivate Types\n\n\n\n\nclass _SessionGuard\n\n\nclass _HTTPConnTestHandler\n\n\nclass _HTTPConnTestHandlerFactory\n\n\nprimitive _FixedResponseHTTPServerNotify\n\n\nclass _ServerListener\n\n\nactor _ServerConnection\n\n\nclass _ServerConnHandler\n\n\nprimitive _ExpectRequest\n\n\nprimitive _ExpectResponse\n\n\nprimitive _ExpectHeaders\n\n\nprimitive _ExpectContentLength\n\n\nprimitive _ExpectChunkStart\n\n\nprimitive _ExpectChunk\n\n\nprimitive _ExpectChunkEnd\n\n\nprimitive _ExpectBody\n\n\nprimitive _ExpectReady\n\n\nprimitive _ExpectError\n\n\ntype _PayloadState\n\n\nclass _HTTPParser\n\n\nclass _HostService\n\n\nprimitive _ConnConnecting\n\n\nactor _ClientConnection\n\n\nclass _ClientConnHandler", 
            "title": "Package"
        }, 
        {
            "location": "/net-http--index/#public-types", 
            "text": "primitive URLPartUser  primitive URLPartPassword  primitive URLPartHost  primitive URLPartPath  primitive URLPartQuery  primitive URLPartFragment  type URLPart  primitive URLEncode  class URL  trait Status  primitive StatusContinue  primitive StatusSwitchingProtocols  primitive StatusOK  primitive StatusCreated  primitive StatusAccepted  primitive StatusNonAuthoritativeInfo  primitive StatusNoContent  primitive StatusResetContent  primitive StatusPartialContent  primitive StatusMultipleChoices  primitive StatusMovedPermanently  primitive StatusFound  primitive StatusSeeOther  primitive StatusNotModified  primitive StatusUseProxy  primitive StatusTemporaryRedirect  primitive StatusBadRequest  primitive StatusUnauthorized  primitive StatusPaymentRequired  primitive StatusForbidden  primitive StatusNotFound  primitive StatusMethodNotAllowed  primitive StatusNotAcceptable  primitive StatusProxyAuthRequired  primitive StatusRequestTimeout  primitive StatusConflict  primitive StatusGone  primitive StatusLengthRequired  primitive StatusPreconditionFailed  primitive StatusRequestEntityTooLarge  primitive StatusRequestURITooLong  primitive StatusUnsupportedMediaType  primitive StatusRequestedRangeNotSatisfiable  primitive StatusExpectationFailed  primitive StatusTeapot  primitive StatusPreconditionRequired  primitive StatusTooManyRequests  primitive StatusRequestHeaderFieldsTooLarge  primitive StatusUnavailableForLegalReasons  primitive StatusInternalServerError  primitive StatusNotImplemented  primitive StatusBadGateway  primitive StatusServiceUnavailable  primitive StatusGatewayTimeout  primitive StatusHTTPVersionNotSupported  primitive StatusNetworkAuthenticationRequired  interface Logger  interface ServerNotify  actor HTTPServer  primitive ChunkedTransfer  primitive StreamTransfer  primitive OneshotTransfer  type TransferMode  class Payload  primitive MimeTypes  interface HTTPSession  interface HTTPHandler  interface HandlerFactory  primitive DiscardLog  class ContentsLog  class CommonLog  class HTTPClient", 
            "title": "Public Types"
        }, 
        {
            "location": "/net-http--index/#private-types", 
            "text": "class _SessionGuard  class _HTTPConnTestHandler  class _HTTPConnTestHandlerFactory  primitive _FixedResponseHTTPServerNotify  class _ServerListener  actor _ServerConnection  class _ServerConnHandler  primitive _ExpectRequest  primitive _ExpectResponse  primitive _ExpectHeaders  primitive _ExpectContentLength  primitive _ExpectChunkStart  primitive _ExpectChunk  primitive _ExpectChunkEnd  primitive _ExpectBody  primitive _ExpectReady  primitive _ExpectError  type _PayloadState  class _HTTPParser  class _HostService  primitive _ConnConnecting  actor _ClientConnection  class _ClientConnHandler", 
            "title": "Private Types"
        }, 
        {
            "location": "/net-http-URLPartUser/", 
            "text": "URLPartUser\n\n\nprimitive val URLPartUser\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLPartUser val^\n\n\n\n\nReturns\n\n\n\n\nURLPartUser\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: URLPartUser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartUser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLPartUser val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartUser\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive URLPartUser"
        }, 
        {
            "location": "/net-http-URLPartUser/#urlpartuser", 
            "text": "primitive val URLPartUser", 
            "title": "URLPartUser"
        }, 
        {
            "location": "/net-http-URLPartUser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartUser/#create", 
            "text": "new val create()\n: URLPartUser val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLPartUser/#returns", 
            "text": "URLPartUser  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartUser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartUser/#eq", 
            "text": "fun box eq(\n  that: URLPartUser val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLPartUser/#parameters", 
            "text": "that:  URLPartUser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartUser/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartUser/#ne", 
            "text": "fun box ne(\n  that: URLPartUser val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLPartUser/#parameters_1", 
            "text": "that:  URLPartUser  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartUser/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartPassword/", 
            "text": "URLPartPassword\n\n\nprimitive val URLPartPassword\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLPartPassword val^\n\n\n\n\nReturns\n\n\n\n\nURLPartPassword\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: URLPartPassword val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartPassword\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLPartPassword val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartPassword\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive URLPartPassword"
        }, 
        {
            "location": "/net-http-URLPartPassword/#urlpartpassword", 
            "text": "primitive val URLPartPassword", 
            "title": "URLPartPassword"
        }, 
        {
            "location": "/net-http-URLPartPassword/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartPassword/#create", 
            "text": "new val create()\n: URLPartPassword val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLPartPassword/#returns", 
            "text": "URLPartPassword  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartPassword/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartPassword/#eq", 
            "text": "fun box eq(\n  that: URLPartPassword val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLPartPassword/#parameters", 
            "text": "that:  URLPartPassword  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartPassword/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartPassword/#ne", 
            "text": "fun box ne(\n  that: URLPartPassword val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLPartPassword/#parameters_1", 
            "text": "that:  URLPartPassword  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartPassword/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartHost/", 
            "text": "URLPartHost\n\n\nprimitive val URLPartHost\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLPartHost val^\n\n\n\n\nReturns\n\n\n\n\nURLPartHost\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: URLPartHost val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartHost\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLPartHost val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartHost\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive URLPartHost"
        }, 
        {
            "location": "/net-http-URLPartHost/#urlparthost", 
            "text": "primitive val URLPartHost", 
            "title": "URLPartHost"
        }, 
        {
            "location": "/net-http-URLPartHost/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartHost/#create", 
            "text": "new val create()\n: URLPartHost val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLPartHost/#returns", 
            "text": "URLPartHost  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartHost/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartHost/#eq", 
            "text": "fun box eq(\n  that: URLPartHost val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLPartHost/#parameters", 
            "text": "that:  URLPartHost  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartHost/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartHost/#ne", 
            "text": "fun box ne(\n  that: URLPartHost val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLPartHost/#parameters_1", 
            "text": "that:  URLPartHost  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartHost/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartPath/", 
            "text": "URLPartPath\n\n\nprimitive val URLPartPath\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLPartPath val^\n\n\n\n\nReturns\n\n\n\n\nURLPartPath\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: URLPartPath val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartPath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLPartPath val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartPath\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive URLPartPath"
        }, 
        {
            "location": "/net-http-URLPartPath/#urlpartpath", 
            "text": "primitive val URLPartPath", 
            "title": "URLPartPath"
        }, 
        {
            "location": "/net-http-URLPartPath/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartPath/#create", 
            "text": "new val create()\n: URLPartPath val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLPartPath/#returns", 
            "text": "URLPartPath  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartPath/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartPath/#eq", 
            "text": "fun box eq(\n  that: URLPartPath val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLPartPath/#parameters", 
            "text": "that:  URLPartPath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartPath/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartPath/#ne", 
            "text": "fun box ne(\n  that: URLPartPath val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLPartPath/#parameters_1", 
            "text": "that:  URLPartPath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartPath/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartQuery/", 
            "text": "URLPartQuery\n\n\nprimitive val URLPartQuery\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLPartQuery val^\n\n\n\n\nReturns\n\n\n\n\nURLPartQuery\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: URLPartQuery val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartQuery\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLPartQuery val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartQuery\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive URLPartQuery"
        }, 
        {
            "location": "/net-http-URLPartQuery/#urlpartquery", 
            "text": "primitive val URLPartQuery", 
            "title": "URLPartQuery"
        }, 
        {
            "location": "/net-http-URLPartQuery/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartQuery/#create", 
            "text": "new val create()\n: URLPartQuery val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLPartQuery/#returns", 
            "text": "URLPartQuery  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartQuery/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartQuery/#eq", 
            "text": "fun box eq(\n  that: URLPartQuery val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLPartQuery/#parameters", 
            "text": "that:  URLPartQuery  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartQuery/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartQuery/#ne", 
            "text": "fun box ne(\n  that: URLPartQuery val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLPartQuery/#parameters_1", 
            "text": "that:  URLPartQuery  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartQuery/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartFragment/", 
            "text": "URLPartFragment\n\n\nprimitive val URLPartFragment\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLPartFragment val^\n\n\n\n\nReturns\n\n\n\n\nURLPartFragment\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: URLPartFragment val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartFragment\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLPartFragment val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLPartFragment\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive URLPartFragment"
        }, 
        {
            "location": "/net-http-URLPartFragment/#urlpartfragment", 
            "text": "primitive val URLPartFragment", 
            "title": "URLPartFragment"
        }, 
        {
            "location": "/net-http-URLPartFragment/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLPartFragment/#create", 
            "text": "new val create()\n: URLPartFragment val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLPartFragment/#returns", 
            "text": "URLPartFragment  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartFragment/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLPartFragment/#eq", 
            "text": "fun box eq(\n  that: URLPartFragment val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLPartFragment/#parameters", 
            "text": "that:  URLPartFragment  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartFragment/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPartFragment/#ne", 
            "text": "fun box ne(\n  that: URLPartFragment val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLPartFragment/#parameters_1", 
            "text": "that:  URLPartFragment  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLPartFragment/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLPart/", 
            "text": "URLPart\n\n\ntype URLPart is\n  (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)", 
            "title": "type URLPart"
        }, 
        {
            "location": "/net-http-URLPart/#urlpart", 
            "text": "type URLPart is\n  (URLPartUser val | URLPartPassword val | URLPartHost val | URLPartPath val | URLPartQuery val | URLPartFragment val)", 
            "title": "URLPart"
        }, 
        {
            "location": "/net-http-URLPart/#type-alias-for", 
            "text": "( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val |  URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-http-URLEncode/", 
            "text": "URLEncode\n\n\nFunctions for checking, encoding, and decoding parts of URLs.\n\n\nprimitive val URLEncode\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URLEncode val^\n\n\n\n\nReturns\n\n\n\n\nURLEncode\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nencode\n\n\nURL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue =\n given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse =\n given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.\n\n\nfun box encode(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val),\n  percent_encoded: Bool val = seq)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\npercent_encoded: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\ndecode\n\n\nURL decode a string. Raise an error on invalid URL encoded.\n\n\nfun box decode(\n  from: String val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\ncheck_scheme\n\n\nCheck that the given string is a valid scheme.\n\n\nfun box check_scheme(\n  scheme: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nscheme: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncheck\n\n\nCheck that the given string is valid to be the given URL part without\nfurther encoding. Canonical form is not checked for, merely validity.\n\n\nfun box check(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: URLEncode val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLEncode\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: URLEncode val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURLEncode\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_is_char_legal\n\n\nDetermine whether the given character is legal to appear in the specified\nURL part.\n\n\nfun box _is_char_legal(\n  value: U8 val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_normal_decode\n\n\nDetermine whether the given character should be decoded to give normal\nform. Some characters, such as sub-delims, are valid to have either in\nencoded or unencoded form. These should be left as they are when\nnormalising. This will return false for such characters.\n\n\nfun box _normal_decode(\n  value: U8 val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_is_host_ipv6\n\n\nCheck whether the given string is a valid IPv6 format host.\nReturns:\n  true if string is a valid IPv6 format host.\n  false if string is not an IPv6 foramt host at all.\n  Raises an error if string is an invalid IPv6 format host.\n\n\nfun box _is_host_ipv6(\n  host: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val ?\n\n\n\n\nParameters\n\n\n\n\nhost: \nString\n val\n\n\npart: (\nURLPartUser\n val | \nURLPartPassword\n val | \nURLPartHost\n val | \n    \nURLPartPath\n val | \nURLPartQuery\n val | \nURLPartFragment\n val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val ?\n\n\n\n\n\n\n_hex\n\n\nTurn 4 bits into a hex value.\n\n\nfun box _hex(\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?\n\n\n\n\n\n\n_unhex\n\n\nTurn a hex value into 4 bits.\n\n\nfun box _unhex(\n  value: U8 val)\n: U8 val ?\n\n\n\n\nParameters\n\n\n\n\nvalue: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nU8\n val ?", 
            "title": "primitive URLEncode"
        }, 
        {
            "location": "/net-http-URLEncode/#urlencode", 
            "text": "Functions for checking, encoding, and decoding parts of URLs.  primitive val URLEncode", 
            "title": "URLEncode"
        }, 
        {
            "location": "/net-http-URLEncode/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URLEncode/#create", 
            "text": "new val create()\n: URLEncode val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URLEncode/#returns", 
            "text": "URLEncode  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URLEncode/#encode", 
            "text": "URL encode and normilase the given string.\nThe percent_encoded parameter indicates how '%' characters should be\ninterpretted.\ntrue =  given string is already at least partially encoded, so '%'s\n  indicate an encoded character.\nfalse =  given string is not yet encoded at all, so '%'s are just '%'s.\nAn error is raised on invalid existing encoding or illegal characters that\ncannot be encoded.  fun box encode(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val),\n  percent_encoded: Bool val = seq)\n: String val ?", 
            "title": "encode"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters", 
            "text": "from:  String  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)  percent_encoded:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_1", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#decode", 
            "text": "URL decode a string. Raise an error on invalid URL encoded.  fun box decode(\n  from: String val)\n: String val ?", 
            "title": "decode"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_1", 
            "text": "from:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_2", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#check_scheme", 
            "text": "Check that the given string is a valid scheme.  fun box check_scheme(\n  scheme: String val)\n: Bool val", 
            "title": "check_scheme"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_2", 
            "text": "scheme:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#check", 
            "text": "Check that the given string is valid to be the given URL part without\nfurther encoding. Canonical form is not checked for, merely validity.  fun box check(\n  from: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val", 
            "title": "check"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_3", 
            "text": "from:  String  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#eq", 
            "text": "fun box eq(\n  that: URLEncode val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_4", 
            "text": "that:  URLEncode  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#ne", 
            "text": "fun box ne(\n  that: URLEncode val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_5", 
            "text": "that:  URLEncode  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-URLEncode/#_is_char_legal", 
            "text": "Determine whether the given character is legal to appear in the specified\nURL part.  fun box _is_char_legal(\n  value: U8 val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val", 
            "title": "_is_char_legal"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_6", 
            "text": "value:  U8  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#_normal_decode", 
            "text": "Determine whether the given character should be decoded to give normal\nform. Some characters, such as sub-delims, are valid to have either in\nencoded or unencoded form. These should be left as they are when\nnormalising. This will return false for such characters.  fun box _normal_decode(\n  value: U8 val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val", 
            "title": "_normal_decode"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_7", 
            "text": "value:  U8  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#_is_host_ipv6", 
            "text": "Check whether the given string is a valid IPv6 format host.\nReturns:\n  true if string is a valid IPv6 format host.\n  false if string is not an IPv6 foramt host at all.\n  Raises an error if string is an invalid IPv6 format host.  fun box _is_host_ipv6(\n  host: String val,\n  part: (URLPartUser val | URLPartPassword val | URLPartHost val | \n    URLPartPath val | URLPartQuery val | URLPartFragment val))\n: Bool val ?", 
            "title": "_is_host_ipv6"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_8", 
            "text": "host:  String  val  part: ( URLPartUser  val |  URLPartPassword  val |  URLPartHost  val | \n     URLPartPath  val |  URLPartQuery  val |  URLPartFragment  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_9", 
            "text": "Bool  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#_hex", 
            "text": "Turn 4 bits into a hex value.  fun box _hex(\n  value: U8 val)\n: U8 val ?", 
            "title": "_hex"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_9", 
            "text": "value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_10", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URLEncode/#_unhex", 
            "text": "Turn a hex value into 4 bits.  fun box _unhex(\n  value: U8 val)\n: U8 val ?", 
            "title": "_unhex"
        }, 
        {
            "location": "/net-http-URLEncode/#parameters_10", 
            "text": "value:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URLEncode/#returns_11", 
            "text": "U8  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/", 
            "text": "URL\n\n\nHolds the components of a URL. These are always stored as valid, URL-encoded\nvalues.\n\n\nclass val URL\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: URL val^\n\n\n\n\nReturns\n\n\n\n\nURL\n val^\n\n\n\n\n\n\nbuild\n\n\nnew val build(\n  from: String val,\n  percent_encoded: Bool val = seq)\n: URL val^ ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\npercent_encoded: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nURL\n val^ ?\n\n\n\n\n\n\nvalid\n\n\nnew val valid(\n  from: String val)\n: URL val^ ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nURL\n val^ ?\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar scheme: \nString\n val\n\n\n\n\n\n\n\n\nvar user: \nString\n val\n\n\n\n\n\n\n\n\nvar password: \nString\n val\n\n\n\n\n\n\n\n\nvar host: \nString\n val\n\n\n\n\n\n\n\n\nvar port: \nU16\n val\n\n\n\n\n\n\n\n\nvar path: \nString\n val\n\n\n\n\n\n\n\n\nvar query: \nString\n val\n\n\n\n\n\n\n\n\nvar fragment: \nString\n val\n\n\n\n\n\n\nPublic Functions\n\n\nis_valid\n\n\nReturn true if all elements are correctly URL encoded.\n\n\nfun box is_valid()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nstring\n\n\nCombine the components into a string.\n\n\nfun box string()\n: String iso^\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\njoin\n\n\nUsing this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.\n\n\nfun val join(\n  that: URL val)\n: URL val\n\n\n\n\nParameters\n\n\n\n\nthat: \nURL\n val\n\n\n\n\nReturns\n\n\n\n\nURL\n val\n\n\n\n\n\n\ndefault_port\n\n\nReport the default port for our scheme.\nReturns 0 for unrecognised schemes.\n\n\nfun box default_port()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_parse\n\n\nParse the given string as a URL.\nRaises an error on invalid port number.\n\n\nfun ref _parse(\n  from: String val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_parse_scheme\n\n\nFind the scheme, if any, at the start of the given string.\nThe offset of the part following the scheme is returned.\n\n\nfun box _parse_scheme(\n  from: String val)\n: (ISize val , String val)\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nString\n val)\n\n\n\n\n\n\n_parse_part\n\n\nAttempt to parse the specified part out of the given string. Only attempt\nthe parse if the given prefix is found first. Pass \"\" if no prefix is\nneeded. The part ends when any one of the given terminator characters is\nfound, or the end of the input is reached. The offset of the terminator is\nreturned, if one is found.\n\n\nfun box _parse_part(\n  from: String val,\n  prefix: String val,\n  terminators: String val,\n  offset: ISize val)\n: (ISize val , String val)\n\n\n\n\nParameters\n\n\n\n\nfrom: \nString\n val\n\n\nprefix: \nString\n val\n\n\nterminators: \nString\n val\n\n\noffset: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\nISize\n val , \nString\n val)\n\n\n\n\n\n\n_split\n\n\nSplit the given string in 2 around the first instance of the specified\nseparator. If the string does not contain the separator then the first\nresulting string is the whole src and the second is empty.\n\n\nfun box _split(\n  src: String val,\n  separator: U8 val)\n: (String val , String val)\n\n\n\n\nParameters\n\n\n\n\nsrc: \nString\n val\n\n\nseparator: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val , \nString\n val)\n\n\n\n\n\n\n_parse_hostport\n\n\nSplit the given \"host and port\" string into the host and port parts.\n\n\nfun box _parse_hostport(\n  hostport: String val)\n: (String val , String val)\n\n\n\n\nParameters\n\n\n\n\nhostport: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val , \nString\n val)", 
            "title": "class URL"
        }, 
        {
            "location": "/net-http-URL/#url", 
            "text": "Holds the components of a URL. These are always stored as valid, URL-encoded\nvalues.  class val URL", 
            "title": "URL"
        }, 
        {
            "location": "/net-http-URL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-URL/#create", 
            "text": "new val create()\n: URL val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-URL/#returns", 
            "text": "URL  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#build", 
            "text": "new val build(\n  from: String val,\n  percent_encoded: Bool val = seq)\n: URL val^ ?", 
            "title": "build"
        }, 
        {
            "location": "/net-http-URL/#parameters", 
            "text": "from:  String  val  percent_encoded:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_1", 
            "text": "URL  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#valid", 
            "text": "new val valid(\n  from: String val)\n: URL val^ ?", 
            "title": "valid"
        }, 
        {
            "location": "/net-http-URL/#parameters_1", 
            "text": "from:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_2", 
            "text": "URL  val^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#public-fields", 
            "text": "var scheme:  String  val     var user:  String  val     var password:  String  val     var host:  String  val     var port:  U16  val     var path:  String  val     var query:  String  val     var fragment:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-URL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-URL/#is_valid", 
            "text": "Return true if all elements are correctly URL encoded.  fun box is_valid()\n: Bool val", 
            "title": "is_valid"
        }, 
        {
            "location": "/net-http-URL/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#string", 
            "text": "Combine the components into a string.  fun box string()\n: String iso^", 
            "title": "string"
        }, 
        {
            "location": "/net-http-URL/#returns_4", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#join", 
            "text": "Using this as a base URL, concatenate with another, possibly relative, URL\nin the same way a browser does for a link.  fun val join(\n  that: URL val)\n: URL val", 
            "title": "join"
        }, 
        {
            "location": "/net-http-URL/#parameters_2", 
            "text": "that:  URL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_5", 
            "text": "URL  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#default_port", 
            "text": "Report the default port for our scheme.\nReturns 0 for unrecognised schemes.  fun box default_port()\n: U16 val", 
            "title": "default_port"
        }, 
        {
            "location": "/net-http-URL/#returns_6", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-URL/#_parse", 
            "text": "Parse the given string as a URL.\nRaises an error on invalid port number.  fun ref _parse(\n  from: String val)\n: None val ?", 
            "title": "_parse"
        }, 
        {
            "location": "/net-http-URL/#parameters_3", 
            "text": "from:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_7", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#_parse_scheme", 
            "text": "Find the scheme, if any, at the start of the given string.\nThe offset of the part following the scheme is returned.  fun box _parse_scheme(\n  from: String val)\n: (ISize val , String val)", 
            "title": "_parse_scheme"
        }, 
        {
            "location": "/net-http-URL/#parameters_4", 
            "text": "from:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_8", 
            "text": "( ISize  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#_parse_part", 
            "text": "Attempt to parse the specified part out of the given string. Only attempt\nthe parse if the given prefix is found first. Pass \"\" if no prefix is\nneeded. The part ends when any one of the given terminator characters is\nfound, or the end of the input is reached. The offset of the terminator is\nreturned, if one is found.  fun box _parse_part(\n  from: String val,\n  prefix: String val,\n  terminators: String val,\n  offset: ISize val)\n: (ISize val , String val)", 
            "title": "_parse_part"
        }, 
        {
            "location": "/net-http-URL/#parameters_5", 
            "text": "from:  String  val  prefix:  String  val  terminators:  String  val  offset:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_9", 
            "text": "( ISize  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#_split", 
            "text": "Split the given string in 2 around the first instance of the specified\nseparator. If the string does not contain the separator then the first\nresulting string is the whole src and the second is empty.  fun box _split(\n  src: String val,\n  separator: U8 val)\n: (String val , String val)", 
            "title": "_split"
        }, 
        {
            "location": "/net-http-URL/#parameters_6", 
            "text": "src:  String  val  separator:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_10", 
            "text": "( String  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-URL/#_parse_hostport", 
            "text": "Split the given \"host and port\" string into the host and port parts.  fun box _parse_hostport(\n  hostport: String val)\n: (String val , String val)", 
            "title": "_parse_hostport"
        }, 
        {
            "location": "/net-http-URL/#parameters_7", 
            "text": "hostport:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-URL/#returns_11", 
            "text": "( String  val ,  String  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Status/", 
            "text": "Status\n\n\ntrait val Status\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "trait Status"
        }, 
        {
            "location": "/net-http-Status/#status", 
            "text": "trait val Status", 
            "title": "Status"
        }, 
        {
            "location": "/net-http-Status/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Status/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-Status/#returns", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Status/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-Status/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusContinue/", 
            "text": "StatusContinue\n\n\nprimitive val StatusContinue is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusContinue val^\n\n\n\n\nReturns\n\n\n\n\nStatusContinue\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusContinue val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusContinue\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusContinue val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusContinue\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusContinue"
        }, 
        {
            "location": "/net-http-StatusContinue/#statuscontinue", 
            "text": "primitive val StatusContinue is\n  Status val", 
            "title": "StatusContinue"
        }, 
        {
            "location": "/net-http-StatusContinue/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusContinue/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusContinue/#create", 
            "text": "new val create()\n: StatusContinue val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusContinue/#returns", 
            "text": "StatusContinue  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusContinue/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusContinue/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusContinue/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusContinue/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusContinue/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusContinue/#eq", 
            "text": "fun box eq(\n  that: StatusContinue val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusContinue/#parameters", 
            "text": "that:  StatusContinue  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusContinue/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusContinue/#ne", 
            "text": "fun box ne(\n  that: StatusContinue val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusContinue/#parameters_1", 
            "text": "that:  StatusContinue  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusContinue/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/", 
            "text": "StatusSwitchingProtocols\n\n\nprimitive val StatusSwitchingProtocols is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusSwitchingProtocols val^\n\n\n\n\nReturns\n\n\n\n\nStatusSwitchingProtocols\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusSwitchingProtocols val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusSwitchingProtocols\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusSwitchingProtocols val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusSwitchingProtocols\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusSwitchingProtocols"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#statusswitchingprotocols", 
            "text": "primitive val StatusSwitchingProtocols is\n  Status val", 
            "title": "StatusSwitchingProtocols"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#create", 
            "text": "new val create()\n: StatusSwitchingProtocols val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#returns", 
            "text": "StatusSwitchingProtocols  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#eq", 
            "text": "fun box eq(\n  that: StatusSwitchingProtocols val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#parameters", 
            "text": "that:  StatusSwitchingProtocols  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#ne", 
            "text": "fun box ne(\n  that: StatusSwitchingProtocols val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#parameters_1", 
            "text": "that:  StatusSwitchingProtocols  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusSwitchingProtocols/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusOK/", 
            "text": "StatusOK\n\n\nprimitive val StatusOK is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusOK val^\n\n\n\n\nReturns\n\n\n\n\nStatusOK\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusOK val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusOK\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusOK val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusOK\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusOK"
        }, 
        {
            "location": "/net-http-StatusOK/#statusok", 
            "text": "primitive val StatusOK is\n  Status val", 
            "title": "StatusOK"
        }, 
        {
            "location": "/net-http-StatusOK/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusOK/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusOK/#create", 
            "text": "new val create()\n: StatusOK val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusOK/#returns", 
            "text": "StatusOK  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusOK/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusOK/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusOK/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusOK/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusOK/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusOK/#eq", 
            "text": "fun box eq(\n  that: StatusOK val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusOK/#parameters", 
            "text": "that:  StatusOK  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusOK/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusOK/#ne", 
            "text": "fun box ne(\n  that: StatusOK val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusOK/#parameters_1", 
            "text": "that:  StatusOK  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusOK/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusCreated/", 
            "text": "StatusCreated\n\n\nprimitive val StatusCreated is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusCreated val^\n\n\n\n\nReturns\n\n\n\n\nStatusCreated\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusCreated val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusCreated\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusCreated val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusCreated\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusCreated"
        }, 
        {
            "location": "/net-http-StatusCreated/#statuscreated", 
            "text": "primitive val StatusCreated is\n  Status val", 
            "title": "StatusCreated"
        }, 
        {
            "location": "/net-http-StatusCreated/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusCreated/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusCreated/#create", 
            "text": "new val create()\n: StatusCreated val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusCreated/#returns", 
            "text": "StatusCreated  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusCreated/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusCreated/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusCreated/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusCreated/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusCreated/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusCreated/#eq", 
            "text": "fun box eq(\n  that: StatusCreated val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusCreated/#parameters", 
            "text": "that:  StatusCreated  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusCreated/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusCreated/#ne", 
            "text": "fun box ne(\n  that: StatusCreated val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusCreated/#parameters_1", 
            "text": "that:  StatusCreated  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusCreated/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusAccepted/", 
            "text": "StatusAccepted\n\n\nprimitive val StatusAccepted is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusAccepted val^\n\n\n\n\nReturns\n\n\n\n\nStatusAccepted\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusAccepted val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusAccepted\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusAccepted val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusAccepted\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusAccepted"
        }, 
        {
            "location": "/net-http-StatusAccepted/#statusaccepted", 
            "text": "primitive val StatusAccepted is\n  Status val", 
            "title": "StatusAccepted"
        }, 
        {
            "location": "/net-http-StatusAccepted/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusAccepted/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusAccepted/#create", 
            "text": "new val create()\n: StatusAccepted val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusAccepted/#returns", 
            "text": "StatusAccepted  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusAccepted/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusAccepted/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusAccepted/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusAccepted/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusAccepted/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusAccepted/#eq", 
            "text": "fun box eq(\n  that: StatusAccepted val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusAccepted/#parameters", 
            "text": "that:  StatusAccepted  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusAccepted/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusAccepted/#ne", 
            "text": "fun box ne(\n  that: StatusAccepted val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusAccepted/#parameters_1", 
            "text": "that:  StatusAccepted  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusAccepted/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/", 
            "text": "StatusNonAuthoritativeInfo\n\n\nprimitive val StatusNonAuthoritativeInfo is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNonAuthoritativeInfo val^\n\n\n\n\nReturns\n\n\n\n\nStatusNonAuthoritativeInfo\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNonAuthoritativeInfo\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNonAuthoritativeInfo\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNonAuthoritativeInfo"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#statusnonauthoritativeinfo", 
            "text": "primitive val StatusNonAuthoritativeInfo is\n  Status val", 
            "title": "StatusNonAuthoritativeInfo"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#create", 
            "text": "new val create()\n: StatusNonAuthoritativeInfo val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#returns", 
            "text": "StatusNonAuthoritativeInfo  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#eq", 
            "text": "fun box eq(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#parameters", 
            "text": "that:  StatusNonAuthoritativeInfo  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#ne", 
            "text": "fun box ne(\n  that: StatusNonAuthoritativeInfo val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#parameters_1", 
            "text": "that:  StatusNonAuthoritativeInfo  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNonAuthoritativeInfo/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNoContent/", 
            "text": "StatusNoContent\n\n\nprimitive val StatusNoContent is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNoContent val^\n\n\n\n\nReturns\n\n\n\n\nStatusNoContent\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNoContent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNoContent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNoContent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNoContent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNoContent"
        }, 
        {
            "location": "/net-http-StatusNoContent/#statusnocontent", 
            "text": "primitive val StatusNoContent is\n  Status val", 
            "title": "StatusNoContent"
        }, 
        {
            "location": "/net-http-StatusNoContent/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNoContent/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNoContent/#create", 
            "text": "new val create()\n: StatusNoContent val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNoContent/#returns", 
            "text": "StatusNoContent  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNoContent/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNoContent/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNoContent/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNoContent/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNoContent/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNoContent/#eq", 
            "text": "fun box eq(\n  that: StatusNoContent val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNoContent/#parameters", 
            "text": "that:  StatusNoContent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNoContent/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNoContent/#ne", 
            "text": "fun box ne(\n  that: StatusNoContent val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNoContent/#parameters_1", 
            "text": "that:  StatusNoContent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNoContent/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusResetContent/", 
            "text": "StatusResetContent\n\n\nprimitive val StatusResetContent is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusResetContent val^\n\n\n\n\nReturns\n\n\n\n\nStatusResetContent\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusResetContent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusResetContent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusResetContent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusResetContent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusResetContent"
        }, 
        {
            "location": "/net-http-StatusResetContent/#statusresetcontent", 
            "text": "primitive val StatusResetContent is\n  Status val", 
            "title": "StatusResetContent"
        }, 
        {
            "location": "/net-http-StatusResetContent/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusResetContent/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusResetContent/#create", 
            "text": "new val create()\n: StatusResetContent val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusResetContent/#returns", 
            "text": "StatusResetContent  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusResetContent/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusResetContent/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusResetContent/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusResetContent/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusResetContent/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusResetContent/#eq", 
            "text": "fun box eq(\n  that: StatusResetContent val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusResetContent/#parameters", 
            "text": "that:  StatusResetContent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusResetContent/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusResetContent/#ne", 
            "text": "fun box ne(\n  that: StatusResetContent val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusResetContent/#parameters_1", 
            "text": "that:  StatusResetContent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusResetContent/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPartialContent/", 
            "text": "StatusPartialContent\n\n\nprimitive val StatusPartialContent is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusPartialContent val^\n\n\n\n\nReturns\n\n\n\n\nStatusPartialContent\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusPartialContent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPartialContent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusPartialContent val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPartialContent\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusPartialContent"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#statuspartialcontent", 
            "text": "primitive val StatusPartialContent is\n  Status val", 
            "title": "StatusPartialContent"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#create", 
            "text": "new val create()\n: StatusPartialContent val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#returns", 
            "text": "StatusPartialContent  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#eq", 
            "text": "fun box eq(\n  that: StatusPartialContent val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#parameters", 
            "text": "that:  StatusPartialContent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#ne", 
            "text": "fun box ne(\n  that: StatusPartialContent val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#parameters_1", 
            "text": "that:  StatusPartialContent  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPartialContent/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/", 
            "text": "StatusMultipleChoices\n\n\nprimitive val StatusMultipleChoices is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusMultipleChoices val^\n\n\n\n\nReturns\n\n\n\n\nStatusMultipleChoices\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusMultipleChoices val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusMultipleChoices\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusMultipleChoices val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusMultipleChoices\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusMultipleChoices"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#statusmultiplechoices", 
            "text": "primitive val StatusMultipleChoices is\n  Status val", 
            "title": "StatusMultipleChoices"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#create", 
            "text": "new val create()\n: StatusMultipleChoices val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#returns", 
            "text": "StatusMultipleChoices  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#eq", 
            "text": "fun box eq(\n  that: StatusMultipleChoices val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#parameters", 
            "text": "that:  StatusMultipleChoices  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#ne", 
            "text": "fun box ne(\n  that: StatusMultipleChoices val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#parameters_1", 
            "text": "that:  StatusMultipleChoices  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusMultipleChoices/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/", 
            "text": "StatusMovedPermanently\n\n\nprimitive val StatusMovedPermanently is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusMovedPermanently val^\n\n\n\n\nReturns\n\n\n\n\nStatusMovedPermanently\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusMovedPermanently val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusMovedPermanently\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusMovedPermanently val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusMovedPermanently\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusMovedPermanently"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#statusmovedpermanently", 
            "text": "primitive val StatusMovedPermanently is\n  Status val", 
            "title": "StatusMovedPermanently"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#create", 
            "text": "new val create()\n: StatusMovedPermanently val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#returns", 
            "text": "StatusMovedPermanently  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#eq", 
            "text": "fun box eq(\n  that: StatusMovedPermanently val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#parameters", 
            "text": "that:  StatusMovedPermanently  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#ne", 
            "text": "fun box ne(\n  that: StatusMovedPermanently val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#parameters_1", 
            "text": "that:  StatusMovedPermanently  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusMovedPermanently/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusFound/", 
            "text": "StatusFound\n\n\nprimitive val StatusFound is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusFound val^\n\n\n\n\nReturns\n\n\n\n\nStatusFound\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusFound val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusFound\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusFound val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusFound\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusFound"
        }, 
        {
            "location": "/net-http-StatusFound/#statusfound", 
            "text": "primitive val StatusFound is\n  Status val", 
            "title": "StatusFound"
        }, 
        {
            "location": "/net-http-StatusFound/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusFound/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusFound/#create", 
            "text": "new val create()\n: StatusFound val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusFound/#returns", 
            "text": "StatusFound  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusFound/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusFound/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusFound/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusFound/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusFound/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusFound/#eq", 
            "text": "fun box eq(\n  that: StatusFound val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusFound/#parameters", 
            "text": "that:  StatusFound  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusFound/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusFound/#ne", 
            "text": "fun box ne(\n  that: StatusFound val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusFound/#parameters_1", 
            "text": "that:  StatusFound  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusFound/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSeeOther/", 
            "text": "StatusSeeOther\n\n\nprimitive val StatusSeeOther is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusSeeOther val^\n\n\n\n\nReturns\n\n\n\n\nStatusSeeOther\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusSeeOther val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusSeeOther\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusSeeOther val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusSeeOther\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusSeeOther"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#statusseeother", 
            "text": "primitive val StatusSeeOther is\n  Status val", 
            "title": "StatusSeeOther"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#create", 
            "text": "new val create()\n: StatusSeeOther val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#returns", 
            "text": "StatusSeeOther  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#eq", 
            "text": "fun box eq(\n  that: StatusSeeOther val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#parameters", 
            "text": "that:  StatusSeeOther  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#ne", 
            "text": "fun box ne(\n  that: StatusSeeOther val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#parameters_1", 
            "text": "that:  StatusSeeOther  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusSeeOther/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotModified/", 
            "text": "StatusNotModified\n\n\nprimitive val StatusNotModified is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNotModified val^\n\n\n\n\nReturns\n\n\n\n\nStatusNotModified\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNotModified val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotModified\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNotModified val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotModified\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNotModified"
        }, 
        {
            "location": "/net-http-StatusNotModified/#statusnotmodified", 
            "text": "primitive val StatusNotModified is\n  Status val", 
            "title": "StatusNotModified"
        }, 
        {
            "location": "/net-http-StatusNotModified/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNotModified/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNotModified/#create", 
            "text": "new val create()\n: StatusNotModified val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNotModified/#returns", 
            "text": "StatusNotModified  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotModified/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNotModified/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNotModified/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotModified/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNotModified/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotModified/#eq", 
            "text": "fun box eq(\n  that: StatusNotModified val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNotModified/#parameters", 
            "text": "that:  StatusNotModified  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotModified/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotModified/#ne", 
            "text": "fun box ne(\n  that: StatusNotModified val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNotModified/#parameters_1", 
            "text": "that:  StatusNotModified  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotModified/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUseProxy/", 
            "text": "StatusUseProxy\n\n\nprimitive val StatusUseProxy is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusUseProxy val^\n\n\n\n\nReturns\n\n\n\n\nStatusUseProxy\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusUseProxy val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUseProxy\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusUseProxy val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUseProxy\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusUseProxy"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#statususeproxy", 
            "text": "primitive val StatusUseProxy is\n  Status val", 
            "title": "StatusUseProxy"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#create", 
            "text": "new val create()\n: StatusUseProxy val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#returns", 
            "text": "StatusUseProxy  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#eq", 
            "text": "fun box eq(\n  that: StatusUseProxy val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#parameters", 
            "text": "that:  StatusUseProxy  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#ne", 
            "text": "fun box ne(\n  that: StatusUseProxy val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#parameters_1", 
            "text": "that:  StatusUseProxy  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUseProxy/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/", 
            "text": "StatusTemporaryRedirect\n\n\nprimitive val StatusTemporaryRedirect is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusTemporaryRedirect val^\n\n\n\n\nReturns\n\n\n\n\nStatusTemporaryRedirect\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusTemporaryRedirect val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusTemporaryRedirect\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusTemporaryRedirect val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusTemporaryRedirect\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusTemporaryRedirect"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#statustemporaryredirect", 
            "text": "primitive val StatusTemporaryRedirect is\n  Status val", 
            "title": "StatusTemporaryRedirect"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#create", 
            "text": "new val create()\n: StatusTemporaryRedirect val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#returns", 
            "text": "StatusTemporaryRedirect  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#eq", 
            "text": "fun box eq(\n  that: StatusTemporaryRedirect val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#parameters", 
            "text": "that:  StatusTemporaryRedirect  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#ne", 
            "text": "fun box ne(\n  that: StatusTemporaryRedirect val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#parameters_1", 
            "text": "that:  StatusTemporaryRedirect  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusTemporaryRedirect/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadRequest/", 
            "text": "StatusBadRequest\n\n\nprimitive val StatusBadRequest is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusBadRequest val^\n\n\n\n\nReturns\n\n\n\n\nStatusBadRequest\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusBadRequest val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusBadRequest\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusBadRequest val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusBadRequest\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusBadRequest"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#statusbadrequest", 
            "text": "primitive val StatusBadRequest is\n  Status val", 
            "title": "StatusBadRequest"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#create", 
            "text": "new val create()\n: StatusBadRequest val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#returns", 
            "text": "StatusBadRequest  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#eq", 
            "text": "fun box eq(\n  that: StatusBadRequest val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#parameters", 
            "text": "that:  StatusBadRequest  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#ne", 
            "text": "fun box ne(\n  that: StatusBadRequest val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#parameters_1", 
            "text": "that:  StatusBadRequest  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusBadRequest/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/", 
            "text": "StatusUnauthorized\n\n\nprimitive val StatusUnauthorized is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusUnauthorized val^\n\n\n\n\nReturns\n\n\n\n\nStatusUnauthorized\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusUnauthorized val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUnauthorized\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusUnauthorized val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUnauthorized\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusUnauthorized"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#statusunauthorized", 
            "text": "primitive val StatusUnauthorized is\n  Status val", 
            "title": "StatusUnauthorized"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#create", 
            "text": "new val create()\n: StatusUnauthorized val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#returns", 
            "text": "StatusUnauthorized  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#eq", 
            "text": "fun box eq(\n  that: StatusUnauthorized val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#parameters", 
            "text": "that:  StatusUnauthorized  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#ne", 
            "text": "fun box ne(\n  that: StatusUnauthorized val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#parameters_1", 
            "text": "that:  StatusUnauthorized  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUnauthorized/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/", 
            "text": "StatusPaymentRequired\n\n\nprimitive val StatusPaymentRequired is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusPaymentRequired val^\n\n\n\n\nReturns\n\n\n\n\nStatusPaymentRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusPaymentRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPaymentRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusPaymentRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPaymentRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusPaymentRequired"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#statuspaymentrequired", 
            "text": "primitive val StatusPaymentRequired is\n  Status val", 
            "title": "StatusPaymentRequired"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#create", 
            "text": "new val create()\n: StatusPaymentRequired val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#returns", 
            "text": "StatusPaymentRequired  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#eq", 
            "text": "fun box eq(\n  that: StatusPaymentRequired val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#parameters", 
            "text": "that:  StatusPaymentRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#ne", 
            "text": "fun box ne(\n  that: StatusPaymentRequired val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#parameters_1", 
            "text": "that:  StatusPaymentRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPaymentRequired/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusForbidden/", 
            "text": "StatusForbidden\n\n\nprimitive val StatusForbidden is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusForbidden val^\n\n\n\n\nReturns\n\n\n\n\nStatusForbidden\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusForbidden val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusForbidden\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusForbidden val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusForbidden\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusForbidden"
        }, 
        {
            "location": "/net-http-StatusForbidden/#statusforbidden", 
            "text": "primitive val StatusForbidden is\n  Status val", 
            "title": "StatusForbidden"
        }, 
        {
            "location": "/net-http-StatusForbidden/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusForbidden/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusForbidden/#create", 
            "text": "new val create()\n: StatusForbidden val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusForbidden/#returns", 
            "text": "StatusForbidden  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusForbidden/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusForbidden/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusForbidden/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusForbidden/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusForbidden/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusForbidden/#eq", 
            "text": "fun box eq(\n  that: StatusForbidden val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusForbidden/#parameters", 
            "text": "that:  StatusForbidden  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusForbidden/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusForbidden/#ne", 
            "text": "fun box ne(\n  that: StatusForbidden val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusForbidden/#parameters_1", 
            "text": "that:  StatusForbidden  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusForbidden/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotFound/", 
            "text": "StatusNotFound\n\n\nprimitive val StatusNotFound is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNotFound val^\n\n\n\n\nReturns\n\n\n\n\nStatusNotFound\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNotFound val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotFound\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNotFound val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotFound\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNotFound"
        }, 
        {
            "location": "/net-http-StatusNotFound/#statusnotfound", 
            "text": "primitive val StatusNotFound is\n  Status val", 
            "title": "StatusNotFound"
        }, 
        {
            "location": "/net-http-StatusNotFound/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNotFound/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNotFound/#create", 
            "text": "new val create()\n: StatusNotFound val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNotFound/#returns", 
            "text": "StatusNotFound  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotFound/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNotFound/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNotFound/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotFound/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNotFound/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotFound/#eq", 
            "text": "fun box eq(\n  that: StatusNotFound val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNotFound/#parameters", 
            "text": "that:  StatusNotFound  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotFound/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotFound/#ne", 
            "text": "fun box ne(\n  that: StatusNotFound val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNotFound/#parameters_1", 
            "text": "that:  StatusNotFound  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotFound/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/", 
            "text": "StatusMethodNotAllowed\n\n\nprimitive val StatusMethodNotAllowed is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusMethodNotAllowed val^\n\n\n\n\nReturns\n\n\n\n\nStatusMethodNotAllowed\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusMethodNotAllowed val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusMethodNotAllowed\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusMethodNotAllowed val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusMethodNotAllowed\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusMethodNotAllowed"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#statusmethodnotallowed", 
            "text": "primitive val StatusMethodNotAllowed is\n  Status val", 
            "title": "StatusMethodNotAllowed"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#create", 
            "text": "new val create()\n: StatusMethodNotAllowed val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#returns", 
            "text": "StatusMethodNotAllowed  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#eq", 
            "text": "fun box eq(\n  that: StatusMethodNotAllowed val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#parameters", 
            "text": "that:  StatusMethodNotAllowed  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#ne", 
            "text": "fun box ne(\n  that: StatusMethodNotAllowed val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#parameters_1", 
            "text": "that:  StatusMethodNotAllowed  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusMethodNotAllowed/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/", 
            "text": "StatusNotAcceptable\n\n\nprimitive val StatusNotAcceptable is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNotAcceptable val^\n\n\n\n\nReturns\n\n\n\n\nStatusNotAcceptable\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNotAcceptable val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotAcceptable\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNotAcceptable val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotAcceptable\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNotAcceptable"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#statusnotacceptable", 
            "text": "primitive val StatusNotAcceptable is\n  Status val", 
            "title": "StatusNotAcceptable"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#create", 
            "text": "new val create()\n: StatusNotAcceptable val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#returns", 
            "text": "StatusNotAcceptable  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#eq", 
            "text": "fun box eq(\n  that: StatusNotAcceptable val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#parameters", 
            "text": "that:  StatusNotAcceptable  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#ne", 
            "text": "fun box ne(\n  that: StatusNotAcceptable val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#parameters_1", 
            "text": "that:  StatusNotAcceptable  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotAcceptable/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/", 
            "text": "StatusProxyAuthRequired\n\n\nprimitive val StatusProxyAuthRequired is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusProxyAuthRequired val^\n\n\n\n\nReturns\n\n\n\n\nStatusProxyAuthRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusProxyAuthRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusProxyAuthRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusProxyAuthRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusProxyAuthRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusProxyAuthRequired"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#statusproxyauthrequired", 
            "text": "primitive val StatusProxyAuthRequired is\n  Status val", 
            "title": "StatusProxyAuthRequired"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#create", 
            "text": "new val create()\n: StatusProxyAuthRequired val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#returns", 
            "text": "StatusProxyAuthRequired  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#eq", 
            "text": "fun box eq(\n  that: StatusProxyAuthRequired val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#parameters", 
            "text": "that:  StatusProxyAuthRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#ne", 
            "text": "fun box ne(\n  that: StatusProxyAuthRequired val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#parameters_1", 
            "text": "that:  StatusProxyAuthRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusProxyAuthRequired/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/", 
            "text": "StatusRequestTimeout\n\n\nprimitive val StatusRequestTimeout is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusRequestTimeout val^\n\n\n\n\nReturns\n\n\n\n\nStatusRequestTimeout\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusRequestTimeout val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestTimeout\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusRequestTimeout val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestTimeout\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusRequestTimeout"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#statusrequesttimeout", 
            "text": "primitive val StatusRequestTimeout is\n  Status val", 
            "title": "StatusRequestTimeout"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#create", 
            "text": "new val create()\n: StatusRequestTimeout val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#returns", 
            "text": "StatusRequestTimeout  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#eq", 
            "text": "fun box eq(\n  that: StatusRequestTimeout val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#parameters", 
            "text": "that:  StatusRequestTimeout  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#ne", 
            "text": "fun box ne(\n  that: StatusRequestTimeout val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#parameters_1", 
            "text": "that:  StatusRequestTimeout  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestTimeout/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusConflict/", 
            "text": "StatusConflict\n\n\nprimitive val StatusConflict is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusConflict val^\n\n\n\n\nReturns\n\n\n\n\nStatusConflict\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusConflict val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusConflict\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusConflict val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusConflict\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusConflict"
        }, 
        {
            "location": "/net-http-StatusConflict/#statusconflict", 
            "text": "primitive val StatusConflict is\n  Status val", 
            "title": "StatusConflict"
        }, 
        {
            "location": "/net-http-StatusConflict/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusConflict/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusConflict/#create", 
            "text": "new val create()\n: StatusConflict val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusConflict/#returns", 
            "text": "StatusConflict  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusConflict/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusConflict/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusConflict/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusConflict/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusConflict/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusConflict/#eq", 
            "text": "fun box eq(\n  that: StatusConflict val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusConflict/#parameters", 
            "text": "that:  StatusConflict  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusConflict/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusConflict/#ne", 
            "text": "fun box ne(\n  that: StatusConflict val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusConflict/#parameters_1", 
            "text": "that:  StatusConflict  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusConflict/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGone/", 
            "text": "StatusGone\n\n\nprimitive val StatusGone is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusGone val^\n\n\n\n\nReturns\n\n\n\n\nStatusGone\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusGone val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusGone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusGone val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusGone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusGone"
        }, 
        {
            "location": "/net-http-StatusGone/#statusgone", 
            "text": "primitive val StatusGone is\n  Status val", 
            "title": "StatusGone"
        }, 
        {
            "location": "/net-http-StatusGone/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusGone/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusGone/#create", 
            "text": "new val create()\n: StatusGone val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusGone/#returns", 
            "text": "StatusGone  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGone/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusGone/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusGone/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGone/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusGone/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGone/#eq", 
            "text": "fun box eq(\n  that: StatusGone val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusGone/#parameters", 
            "text": "that:  StatusGone  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusGone/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGone/#ne", 
            "text": "fun box ne(\n  that: StatusGone val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusGone/#parameters_1", 
            "text": "that:  StatusGone  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusGone/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/", 
            "text": "StatusLengthRequired\n\n\nprimitive val StatusLengthRequired is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusLengthRequired val^\n\n\n\n\nReturns\n\n\n\n\nStatusLengthRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusLengthRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusLengthRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusLengthRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusLengthRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusLengthRequired"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#statuslengthrequired", 
            "text": "primitive val StatusLengthRequired is\n  Status val", 
            "title": "StatusLengthRequired"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#create", 
            "text": "new val create()\n: StatusLengthRequired val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#returns", 
            "text": "StatusLengthRequired  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#eq", 
            "text": "fun box eq(\n  that: StatusLengthRequired val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#parameters", 
            "text": "that:  StatusLengthRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#ne", 
            "text": "fun box ne(\n  that: StatusLengthRequired val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#parameters_1", 
            "text": "that:  StatusLengthRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusLengthRequired/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/", 
            "text": "StatusPreconditionFailed\n\n\nprimitive val StatusPreconditionFailed is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusPreconditionFailed val^\n\n\n\n\nReturns\n\n\n\n\nStatusPreconditionFailed\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusPreconditionFailed val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPreconditionFailed\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusPreconditionFailed val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPreconditionFailed\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusPreconditionFailed"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#statuspreconditionfailed", 
            "text": "primitive val StatusPreconditionFailed is\n  Status val", 
            "title": "StatusPreconditionFailed"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#create", 
            "text": "new val create()\n: StatusPreconditionFailed val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#returns", 
            "text": "StatusPreconditionFailed  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#eq", 
            "text": "fun box eq(\n  that: StatusPreconditionFailed val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#parameters", 
            "text": "that:  StatusPreconditionFailed  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#ne", 
            "text": "fun box ne(\n  that: StatusPreconditionFailed val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#parameters_1", 
            "text": "that:  StatusPreconditionFailed  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPreconditionFailed/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/", 
            "text": "StatusRequestEntityTooLarge\n\n\nprimitive val StatusRequestEntityTooLarge is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusRequestEntityTooLarge val^\n\n\n\n\nReturns\n\n\n\n\nStatusRequestEntityTooLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusRequestEntityTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestEntityTooLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusRequestEntityTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestEntityTooLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusRequestEntityTooLarge"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#statusrequestentitytoolarge", 
            "text": "primitive val StatusRequestEntityTooLarge is\n  Status val", 
            "title": "StatusRequestEntityTooLarge"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#create", 
            "text": "new val create()\n: StatusRequestEntityTooLarge val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#returns", 
            "text": "StatusRequestEntityTooLarge  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#eq", 
            "text": "fun box eq(\n  that: StatusRequestEntityTooLarge val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#parameters", 
            "text": "that:  StatusRequestEntityTooLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#ne", 
            "text": "fun box ne(\n  that: StatusRequestEntityTooLarge val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#parameters_1", 
            "text": "that:  StatusRequestEntityTooLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestEntityTooLarge/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/", 
            "text": "StatusRequestURITooLong\n\n\nprimitive val StatusRequestURITooLong is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusRequestURITooLong val^\n\n\n\n\nReturns\n\n\n\n\nStatusRequestURITooLong\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusRequestURITooLong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestURITooLong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusRequestURITooLong val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestURITooLong\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusRequestURITooLong"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#statusrequesturitoolong", 
            "text": "primitive val StatusRequestURITooLong is\n  Status val", 
            "title": "StatusRequestURITooLong"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#create", 
            "text": "new val create()\n: StatusRequestURITooLong val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#returns", 
            "text": "StatusRequestURITooLong  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#eq", 
            "text": "fun box eq(\n  that: StatusRequestURITooLong val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#parameters", 
            "text": "that:  StatusRequestURITooLong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#ne", 
            "text": "fun box ne(\n  that: StatusRequestURITooLong val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#parameters_1", 
            "text": "that:  StatusRequestURITooLong  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestURITooLong/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/", 
            "text": "StatusUnsupportedMediaType\n\n\nprimitive val StatusUnsupportedMediaType is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusUnsupportedMediaType val^\n\n\n\n\nReturns\n\n\n\n\nStatusUnsupportedMediaType\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusUnsupportedMediaType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUnsupportedMediaType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusUnsupportedMediaType val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUnsupportedMediaType\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusUnsupportedMediaType"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#statusunsupportedmediatype", 
            "text": "primitive val StatusUnsupportedMediaType is\n  Status val", 
            "title": "StatusUnsupportedMediaType"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#create", 
            "text": "new val create()\n: StatusUnsupportedMediaType val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#returns", 
            "text": "StatusUnsupportedMediaType  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#eq", 
            "text": "fun box eq(\n  that: StatusUnsupportedMediaType val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#parameters", 
            "text": "that:  StatusUnsupportedMediaType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#ne", 
            "text": "fun box ne(\n  that: StatusUnsupportedMediaType val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#parameters_1", 
            "text": "that:  StatusUnsupportedMediaType  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUnsupportedMediaType/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/", 
            "text": "StatusRequestedRangeNotSatisfiable\n\n\nprimitive val StatusRequestedRangeNotSatisfiable is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusRequestedRangeNotSatisfiable val^\n\n\n\n\nReturns\n\n\n\n\nStatusRequestedRangeNotSatisfiable\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestedRangeNotSatisfiable\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestedRangeNotSatisfiable\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusRequestedRangeNotSatisfiable"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#statusrequestedrangenotsatisfiable", 
            "text": "primitive val StatusRequestedRangeNotSatisfiable is\n  Status val", 
            "title": "StatusRequestedRangeNotSatisfiable"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#create", 
            "text": "new val create()\n: StatusRequestedRangeNotSatisfiable val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#returns", 
            "text": "StatusRequestedRangeNotSatisfiable  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#eq", 
            "text": "fun box eq(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#parameters", 
            "text": "that:  StatusRequestedRangeNotSatisfiable  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#ne", 
            "text": "fun box ne(\n  that: StatusRequestedRangeNotSatisfiable val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#parameters_1", 
            "text": "that:  StatusRequestedRangeNotSatisfiable  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestedRangeNotSatisfiable/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/", 
            "text": "StatusExpectationFailed\n\n\nprimitive val StatusExpectationFailed is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusExpectationFailed val^\n\n\n\n\nReturns\n\n\n\n\nStatusExpectationFailed\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusExpectationFailed val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusExpectationFailed\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusExpectationFailed val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusExpectationFailed\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusExpectationFailed"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#statusexpectationfailed", 
            "text": "primitive val StatusExpectationFailed is\n  Status val", 
            "title": "StatusExpectationFailed"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#create", 
            "text": "new val create()\n: StatusExpectationFailed val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#returns", 
            "text": "StatusExpectationFailed  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#eq", 
            "text": "fun box eq(\n  that: StatusExpectationFailed val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#parameters", 
            "text": "that:  StatusExpectationFailed  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#ne", 
            "text": "fun box ne(\n  that: StatusExpectationFailed val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#parameters_1", 
            "text": "that:  StatusExpectationFailed  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusExpectationFailed/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTeapot/", 
            "text": "StatusTeapot\n\n\nprimitive val StatusTeapot is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusTeapot val^\n\n\n\n\nReturns\n\n\n\n\nStatusTeapot\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusTeapot val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusTeapot\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusTeapot val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusTeapot\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusTeapot"
        }, 
        {
            "location": "/net-http-StatusTeapot/#statusteapot", 
            "text": "primitive val StatusTeapot is\n  Status val", 
            "title": "StatusTeapot"
        }, 
        {
            "location": "/net-http-StatusTeapot/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusTeapot/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusTeapot/#create", 
            "text": "new val create()\n: StatusTeapot val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusTeapot/#returns", 
            "text": "StatusTeapot  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTeapot/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusTeapot/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusTeapot/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTeapot/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusTeapot/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTeapot/#eq", 
            "text": "fun box eq(\n  that: StatusTeapot val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusTeapot/#parameters", 
            "text": "that:  StatusTeapot  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusTeapot/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTeapot/#ne", 
            "text": "fun box ne(\n  that: StatusTeapot val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusTeapot/#parameters_1", 
            "text": "that:  StatusTeapot  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusTeapot/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/", 
            "text": "StatusPreconditionRequired\n\n\nprimitive val StatusPreconditionRequired is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusPreconditionRequired val^\n\n\n\n\nReturns\n\n\n\n\nStatusPreconditionRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusPreconditionRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPreconditionRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusPreconditionRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusPreconditionRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusPreconditionRequired"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#statuspreconditionrequired", 
            "text": "primitive val StatusPreconditionRequired is\n  Status val", 
            "title": "StatusPreconditionRequired"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#create", 
            "text": "new val create()\n: StatusPreconditionRequired val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#returns", 
            "text": "StatusPreconditionRequired  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#eq", 
            "text": "fun box eq(\n  that: StatusPreconditionRequired val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#parameters", 
            "text": "that:  StatusPreconditionRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#ne", 
            "text": "fun box ne(\n  that: StatusPreconditionRequired val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#parameters_1", 
            "text": "that:  StatusPreconditionRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusPreconditionRequired/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/", 
            "text": "StatusTooManyRequests\n\n\nprimitive val StatusTooManyRequests is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusTooManyRequests val^\n\n\n\n\nReturns\n\n\n\n\nStatusTooManyRequests\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusTooManyRequests val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusTooManyRequests\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusTooManyRequests val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusTooManyRequests\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusTooManyRequests"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#statustoomanyrequests", 
            "text": "primitive val StatusTooManyRequests is\n  Status val", 
            "title": "StatusTooManyRequests"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#create", 
            "text": "new val create()\n: StatusTooManyRequests val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#returns", 
            "text": "StatusTooManyRequests  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#eq", 
            "text": "fun box eq(\n  that: StatusTooManyRequests val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#parameters", 
            "text": "that:  StatusTooManyRequests  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#ne", 
            "text": "fun box ne(\n  that: StatusTooManyRequests val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#parameters_1", 
            "text": "that:  StatusTooManyRequests  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusTooManyRequests/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/", 
            "text": "StatusRequestHeaderFieldsTooLarge\n\n\nprimitive val StatusRequestHeaderFieldsTooLarge is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusRequestHeaderFieldsTooLarge val^\n\n\n\n\nReturns\n\n\n\n\nStatusRequestHeaderFieldsTooLarge\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestHeaderFieldsTooLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusRequestHeaderFieldsTooLarge\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusRequestHeaderFieldsTooLarge"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#statusrequestheaderfieldstoolarge", 
            "text": "primitive val StatusRequestHeaderFieldsTooLarge is\n  Status val", 
            "title": "StatusRequestHeaderFieldsTooLarge"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#create", 
            "text": "new val create()\n: StatusRequestHeaderFieldsTooLarge val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#returns", 
            "text": "StatusRequestHeaderFieldsTooLarge  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#eq", 
            "text": "fun box eq(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#parameters", 
            "text": "that:  StatusRequestHeaderFieldsTooLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#ne", 
            "text": "fun box ne(\n  that: StatusRequestHeaderFieldsTooLarge val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#parameters_1", 
            "text": "that:  StatusRequestHeaderFieldsTooLarge  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusRequestHeaderFieldsTooLarge/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/", 
            "text": "StatusUnavailableForLegalReasons\n\n\nprimitive val StatusUnavailableForLegalReasons is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusUnavailableForLegalReasons val^\n\n\n\n\nReturns\n\n\n\n\nStatusUnavailableForLegalReasons\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUnavailableForLegalReasons\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusUnavailableForLegalReasons\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusUnavailableForLegalReasons"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#statusunavailableforlegalreasons", 
            "text": "primitive val StatusUnavailableForLegalReasons is\n  Status val", 
            "title": "StatusUnavailableForLegalReasons"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#create", 
            "text": "new val create()\n: StatusUnavailableForLegalReasons val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#returns", 
            "text": "StatusUnavailableForLegalReasons  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#eq", 
            "text": "fun box eq(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#parameters", 
            "text": "that:  StatusUnavailableForLegalReasons  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#ne", 
            "text": "fun box ne(\n  that: StatusUnavailableForLegalReasons val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#parameters_1", 
            "text": "that:  StatusUnavailableForLegalReasons  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusUnavailableForLegalReasons/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/", 
            "text": "StatusInternalServerError\n\n\nprimitive val StatusInternalServerError is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusInternalServerError val^\n\n\n\n\nReturns\n\n\n\n\nStatusInternalServerError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusInternalServerError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusInternalServerError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusInternalServerError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusInternalServerError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusInternalServerError"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#statusinternalservererror", 
            "text": "primitive val StatusInternalServerError is\n  Status val", 
            "title": "StatusInternalServerError"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#create", 
            "text": "new val create()\n: StatusInternalServerError val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#returns", 
            "text": "StatusInternalServerError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#eq", 
            "text": "fun box eq(\n  that: StatusInternalServerError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#parameters", 
            "text": "that:  StatusInternalServerError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#ne", 
            "text": "fun box ne(\n  that: StatusInternalServerError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#parameters_1", 
            "text": "that:  StatusInternalServerError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusInternalServerError/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/", 
            "text": "StatusNotImplemented\n\n\nprimitive val StatusNotImplemented is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNotImplemented val^\n\n\n\n\nReturns\n\n\n\n\nStatusNotImplemented\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNotImplemented val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotImplemented\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNotImplemented val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNotImplemented\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNotImplemented"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#statusnotimplemented", 
            "text": "primitive val StatusNotImplemented is\n  Status val", 
            "title": "StatusNotImplemented"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#create", 
            "text": "new val create()\n: StatusNotImplemented val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#returns", 
            "text": "StatusNotImplemented  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#eq", 
            "text": "fun box eq(\n  that: StatusNotImplemented val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#parameters", 
            "text": "that:  StatusNotImplemented  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#ne", 
            "text": "fun box ne(\n  that: StatusNotImplemented val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#parameters_1", 
            "text": "that:  StatusNotImplemented  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNotImplemented/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadGateway/", 
            "text": "StatusBadGateway\n\n\nprimitive val StatusBadGateway is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusBadGateway val^\n\n\n\n\nReturns\n\n\n\n\nStatusBadGateway\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusBadGateway val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusBadGateway\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusBadGateway val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusBadGateway\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusBadGateway"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#statusbadgateway", 
            "text": "primitive val StatusBadGateway is\n  Status val", 
            "title": "StatusBadGateway"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#create", 
            "text": "new val create()\n: StatusBadGateway val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#returns", 
            "text": "StatusBadGateway  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#eq", 
            "text": "fun box eq(\n  that: StatusBadGateway val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#parameters", 
            "text": "that:  StatusBadGateway  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#ne", 
            "text": "fun box ne(\n  that: StatusBadGateway val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#parameters_1", 
            "text": "that:  StatusBadGateway  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusBadGateway/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/", 
            "text": "StatusServiceUnavailable\n\n\nprimitive val StatusServiceUnavailable is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusServiceUnavailable val^\n\n\n\n\nReturns\n\n\n\n\nStatusServiceUnavailable\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusServiceUnavailable val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusServiceUnavailable\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusServiceUnavailable val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusServiceUnavailable\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusServiceUnavailable"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#statusserviceunavailable", 
            "text": "primitive val StatusServiceUnavailable is\n  Status val", 
            "title": "StatusServiceUnavailable"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#create", 
            "text": "new val create()\n: StatusServiceUnavailable val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#returns", 
            "text": "StatusServiceUnavailable  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#eq", 
            "text": "fun box eq(\n  that: StatusServiceUnavailable val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#parameters", 
            "text": "that:  StatusServiceUnavailable  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#ne", 
            "text": "fun box ne(\n  that: StatusServiceUnavailable val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#parameters_1", 
            "text": "that:  StatusServiceUnavailable  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusServiceUnavailable/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/", 
            "text": "StatusGatewayTimeout\n\n\nprimitive val StatusGatewayTimeout is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusGatewayTimeout val^\n\n\n\n\nReturns\n\n\n\n\nStatusGatewayTimeout\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusGatewayTimeout val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusGatewayTimeout\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusGatewayTimeout val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusGatewayTimeout\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusGatewayTimeout"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#statusgatewaytimeout", 
            "text": "primitive val StatusGatewayTimeout is\n  Status val", 
            "title": "StatusGatewayTimeout"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#create", 
            "text": "new val create()\n: StatusGatewayTimeout val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#returns", 
            "text": "StatusGatewayTimeout  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#eq", 
            "text": "fun box eq(\n  that: StatusGatewayTimeout val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#parameters", 
            "text": "that:  StatusGatewayTimeout  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#ne", 
            "text": "fun box ne(\n  that: StatusGatewayTimeout val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#parameters_1", 
            "text": "that:  StatusGatewayTimeout  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusGatewayTimeout/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/", 
            "text": "StatusHTTPVersionNotSupported\n\n\nprimitive val StatusHTTPVersionNotSupported is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusHTTPVersionNotSupported val^\n\n\n\n\nReturns\n\n\n\n\nStatusHTTPVersionNotSupported\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusHTTPVersionNotSupported\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusHTTPVersionNotSupported\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusHTTPVersionNotSupported"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#statushttpversionnotsupported", 
            "text": "primitive val StatusHTTPVersionNotSupported is\n  Status val", 
            "title": "StatusHTTPVersionNotSupported"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#create", 
            "text": "new val create()\n: StatusHTTPVersionNotSupported val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#returns", 
            "text": "StatusHTTPVersionNotSupported  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#eq", 
            "text": "fun box eq(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#parameters", 
            "text": "that:  StatusHTTPVersionNotSupported  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#ne", 
            "text": "fun box ne(\n  that: StatusHTTPVersionNotSupported val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#parameters_1", 
            "text": "that:  StatusHTTPVersionNotSupported  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusHTTPVersionNotSupported/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/", 
            "text": "StatusNetworkAuthenticationRequired\n\n\nprimitive val StatusNetworkAuthenticationRequired is\n  Status val\n\n\n\n\nImplements\n\n\n\n\nStatus\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StatusNetworkAuthenticationRequired val^\n\n\n\n\nReturns\n\n\n\n\nStatusNetworkAuthenticationRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nstring\n\n\nfun box string()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNetworkAuthenticationRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStatusNetworkAuthenticationRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StatusNetworkAuthenticationRequired"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#statusnetworkauthenticationrequired", 
            "text": "primitive val StatusNetworkAuthenticationRequired is\n  Status val", 
            "title": "StatusNetworkAuthenticationRequired"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#implements", 
            "text": "Status  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#create", 
            "text": "new val create()\n: StatusNetworkAuthenticationRequired val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#returns", 
            "text": "StatusNetworkAuthenticationRequired  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#apply", 
            "text": "fun box apply()\n: U16 val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#returns_1", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#string", 
            "text": "fun box string()\n: String val", 
            "title": "string"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#eq", 
            "text": "fun box eq(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#parameters", 
            "text": "that:  StatusNetworkAuthenticationRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#ne", 
            "text": "fun box ne(\n  that: StatusNetworkAuthenticationRequired val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#parameters_1", 
            "text": "that:  StatusNetworkAuthenticationRequired  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StatusNetworkAuthenticationRequired/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Logger/", 
            "text": "Logger\n\n\nHandles logging request/response pairs.\n\n\ninterface val Logger\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: Any tag\n\n\n\n\nParameters\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nAny\n tag", 
            "title": "interface Logger"
        }, 
        {
            "location": "/net-http-Logger/#logger", 
            "text": "Handles logging request/response pairs.  interface val Logger", 
            "title": "Logger"
        }, 
        {
            "location": "/net-http-Logger/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Logger/#apply", 
            "text": "fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: Any tag", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-Logger/#parameters", 
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Logger/#returns", 
            "text": "Any  tag", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ServerNotify/", 
            "text": "ServerNotify\n\n\nNotifications about the creation and closing of \nTCPConnection\ns\nwithin HTTP servers.\n\n\ninterface ref ServerNotify\n\n\n\n\nPublic Functions\n\n\nlistening\n\n\nCalled when we are listening.\n\n\nfun ref listening(\n  server: HTTPServer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nserver: \nHTTPServer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\n\nCalled when we fail to listen.\n\n\nfun ref not_listening(\n  server: HTTPServer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nserver: \nHTTPServer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nCalled when we stop listening.\n\n\nfun ref closed(\n  server: HTTPServer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nserver: \nHTTPServer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface ServerNotify"
        }, 
        {
            "location": "/net-http-ServerNotify/#servernotify", 
            "text": "Notifications about the creation and closing of  TCPConnection s\nwithin HTTP servers.  interface ref ServerNotify", 
            "title": "ServerNotify"
        }, 
        {
            "location": "/net-http-ServerNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-ServerNotify/#listening", 
            "text": "Called when we are listening.  fun ref listening(\n  server: HTTPServer ref)\n: None val", 
            "title": "listening"
        }, 
        {
            "location": "/net-http-ServerNotify/#parameters", 
            "text": "server:  HTTPServer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ServerNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ServerNotify/#not_listening", 
            "text": "Called when we fail to listen.  fun ref not_listening(\n  server: HTTPServer ref)\n: None val", 
            "title": "not_listening"
        }, 
        {
            "location": "/net-http-ServerNotify/#parameters_1", 
            "text": "server:  HTTPServer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ServerNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ServerNotify/#closed", 
            "text": "Called when we stop listening.  fun ref closed(\n  server: HTTPServer ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-http-ServerNotify/#parameters_2", 
            "text": "server:  HTTPServer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ServerNotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPServer/", 
            "text": "HTTPServer\n\n\nRuns an HTTP server.\n\n\nServer operation\n\n\nInformation flow into the Server is as follows:\n\n\n\n\n\n\nServer\n listens for incoming TCP connections.\n\n\n\n\n\n\nRequestBuilder\n is the notification class for new connections. It creates\na \nServerConnection\n actor and receives all the raw data from TCP. It uses\nthe \nHTTPParser\n to assemble complete \nPayload\n objects which are passed off\nto the \nServerConnection\n.\n\n\n\n\n\n\nThe \nServerConnection\n actor deals with \ncompletely formed\n requests\nthat have been parsed by the \nHTTPParser\n. This is where requests get\ndispatched to the caller-provided Handler.\n\n\n\n\n\n\nWith streaming content, dispatch to the application's back end Handler\nhas to happen \nbefore\n all of the body has been received. This has to be\ncarefully choreographed because a \nPayload\n is an \niso\n object and can only\nbelong to one actor at a time, yet the \nRequestBuilder\n is running within\nthe \nTCPConnection\n actor while the \nRequestHandler\n is running under the\n\nServerConnection\n actor. Each incoming bufferful of body data, a\n\nByteSeq val\n, is handed off to \nServerConnection\n, to be passed on to the\nback end Handler.\n\n\n\n\n\n\nIt turns out that the issues in sending a request and a response are the\nsame, as are the issues in receiving them. Therefore the same notification\ninterface, \nHTTPHandler\n is used on both ends, and the same sending\ninterface \nHTTPSession\n is used. This makes the code easier to read as well.\n\n\n\n\n\n\nHTTPHandler.apply()\n will be the way the client/server is informed of a\nnew response/request message. All of the headers will be present so that the\nrequest can be dispatched for correct processing. Subsequent calls to a new\nfunction \nHTTPHandler.chunk\n will provide the body data, if any. This\nstream will be terminated by a call to the new function\n\nHTTPHandler.finished\n.\n\n\n\n\n\n\nPipelining of requests is to optimize the transmission of requests over\nslow links (such as over satellites), not to cause simultaneous execution\non the server within one session. Multiple received simple requests (\nGET\n,\n\nHEAD\n, and \nOPTIONS\n) are queued in the server and passed to the back end\napplication one at a time. If a client wants true parallel execution of\nrequests, it should use multiple sessions (which many browsers actually\ndo already).\n\n\n\n\n\n\nSince processing of a streaming response can take a relatively long time,\nacting on additional requests in the meantime does nothing but use up memory\nsince responses would have to be queued. And if the server is being used to\nstream media, it is possible that these additional requests will themselves\ngenerate large responses.  Instead we will just let the requests queue up\nuntil a maximum queue length is reached (a small number) at which point we\nwill back-pressure the inbound TCP stream.\n\n\nactor tag HTTPServer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: ServerNotify iso,\n  handler: HandlerFactory val,\n  logger: Logger val = seq,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  sslctx: (SSLContext val | None val) = seq,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq)\n: HTTPServer tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPListenAuth\n val)\n\n\nnotify: \nServerNotify\n iso\n\n\nhandler: \nHandlerFactory\n val\n\n\nlogger: \nLogger\n val = seq\n\n\nhost: \nString\n val = seq\n\n\nservice: \nString\n val = seq\n\n\nlimit: \nUSize\n val = seq\n\n\nsslctx: (\nSSLContext\n val | \nNone\n val) = seq\n\n\nreversedns: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val | \n    \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nHTTPServer\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nregister_session\n\n\nbe register_session(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\nunregister_session\n\n\nbe unregister_session(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\nset_handler\n\n\nReplace the request handler.\n\n\nbe set_handler(\n  handler: HandlerFactory val)\n\n\n\n\nParameters\n\n\n\n\nhandler: \nHandlerFactory\n val\n\n\n\n\n\n\nset_logger\n\n\nReplace the logger.\n\n\nbe set_logger(\n  logger: Logger val)\n\n\n\n\nParameters\n\n\n\n\nlogger: \nLogger\n val\n\n\n\n\n\n\ndispose\n\n\nShut down the server gracefully. To do this we have to eliminate\nand source of further inputs. So we stop listening for new incoming\nTCP connections, and close any that still exist.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\n\nlocal_address\n\n\nReturns the locally bound address.\n\n\nfun box local_address()\n: NetAddress val\n\n\n\n\nReturns\n\n\n\n\nNetAddress\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_listening\n\n\nCalled when we are listening.\n\n\nbe _listening(\n  address: NetAddress val)\n\n\n\n\nParameters\n\n\n\n\naddress: \nNetAddress\n val\n\n\n\n\n\n\n_not_listening\n\n\nCalled when we fail to listen.\n\n\nbe _not_listening()\n\n\n\n\n\n\n_closed\n\n\nCalled when we stop listening.\n\n\nbe _closed()", 
            "title": "actor HTTPServer"
        }, 
        {
            "location": "/net-http-HTTPServer/#httpserver", 
            "text": "Runs an HTTP server.", 
            "title": "HTTPServer"
        }, 
        {
            "location": "/net-http-HTTPServer/#server-operation", 
            "text": "Information flow into the Server is as follows:    Server  listens for incoming TCP connections.    RequestBuilder  is the notification class for new connections. It creates\na  ServerConnection  actor and receives all the raw data from TCP. It uses\nthe  HTTPParser  to assemble complete  Payload  objects which are passed off\nto the  ServerConnection .    The  ServerConnection  actor deals with  completely formed  requests\nthat have been parsed by the  HTTPParser . This is where requests get\ndispatched to the caller-provided Handler.    With streaming content, dispatch to the application's back end Handler\nhas to happen  before  all of the body has been received. This has to be\ncarefully choreographed because a  Payload  is an  iso  object and can only\nbelong to one actor at a time, yet the  RequestBuilder  is running within\nthe  TCPConnection  actor while the  RequestHandler  is running under the ServerConnection  actor. Each incoming bufferful of body data, a ByteSeq val , is handed off to  ServerConnection , to be passed on to the\nback end Handler.    It turns out that the issues in sending a request and a response are the\nsame, as are the issues in receiving them. Therefore the same notification\ninterface,  HTTPHandler  is used on both ends, and the same sending\ninterface  HTTPSession  is used. This makes the code easier to read as well.    HTTPHandler.apply()  will be the way the client/server is informed of a\nnew response/request message. All of the headers will be present so that the\nrequest can be dispatched for correct processing. Subsequent calls to a new\nfunction  HTTPHandler.chunk  will provide the body data, if any. This\nstream will be terminated by a call to the new function HTTPHandler.finished .    Pipelining of requests is to optimize the transmission of requests over\nslow links (such as over satellites), not to cause simultaneous execution\non the server within one session. Multiple received simple requests ( GET , HEAD , and  OPTIONS ) are queued in the server and passed to the back end\napplication one at a time. If a client wants true parallel execution of\nrequests, it should use multiple sessions (which many browsers actually\ndo already).    Since processing of a streaming response can take a relatively long time,\nacting on additional requests in the meantime does nothing but use up memory\nsince responses would have to be queued. And if the server is being used to\nstream media, it is possible that these additional requests will themselves\ngenerate large responses.  Instead we will just let the requests queue up\nuntil a maximum queue length is reached (a small number) at which point we\nwill back-pressure the inbound TCP stream.  actor tag HTTPServer", 
            "title": "Server operation"
        }, 
        {
            "location": "/net-http-HTTPServer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-HTTPServer/#create", 
            "text": "new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPListenAuth val),\n  notify: ServerNotify iso,\n  handler: HandlerFactory val,\n  logger: Logger val = seq,\n  host: String val = seq,\n  service: String val = seq,\n  limit: USize val = seq,\n  sslctx: (SSLContext val | None val) = seq,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val) = seq)\n: HTTPServer tag^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-HTTPServer/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPListenAuth  val)  notify:  ServerNotify  iso  handler:  HandlerFactory  val  logger:  Logger  val = seq  host:  String  val = seq  service:  String  val = seq  limit:  USize  val = seq  sslctx: ( SSLContext  val |  None  val) = seq  reversedns: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val | \n     None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPServer/#returns", 
            "text": "HTTPServer  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPServer/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-HTTPServer/#register_session", 
            "text": "be register_session(\n  conn: TCPConnection tag)", 
            "title": "register_session"
        }, 
        {
            "location": "/net-http-HTTPServer/#parameters_1", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPServer/#unregister_session", 
            "text": "be unregister_session(\n  conn: TCPConnection tag)", 
            "title": "unregister_session"
        }, 
        {
            "location": "/net-http-HTTPServer/#parameters_2", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPServer/#set_handler", 
            "text": "Replace the request handler.  be set_handler(\n  handler: HandlerFactory val)", 
            "title": "set_handler"
        }, 
        {
            "location": "/net-http-HTTPServer/#parameters_3", 
            "text": "handler:  HandlerFactory  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPServer/#set_logger", 
            "text": "Replace the logger.  be set_logger(\n  logger: Logger val)", 
            "title": "set_logger"
        }, 
        {
            "location": "/net-http-HTTPServer/#parameters_4", 
            "text": "logger:  Logger  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPServer/#dispose", 
            "text": "Shut down the server gracefully. To do this we have to eliminate\nand source of further inputs. So we stop listening for new incoming\nTCP connections, and close any that still exist.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-http-HTTPServer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-HTTPServer/#local_address", 
            "text": "Returns the locally bound address.  fun box local_address()\n: NetAddress val", 
            "title": "local_address"
        }, 
        {
            "location": "/net-http-HTTPServer/#returns_1", 
            "text": "NetAddress  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPServer/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-http-HTTPServer/#_listening", 
            "text": "Called when we are listening.  be _listening(\n  address: NetAddress val)", 
            "title": "_listening"
        }, 
        {
            "location": "/net-http-HTTPServer/#parameters_5", 
            "text": "address:  NetAddress  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPServer/#_not_listening", 
            "text": "Called when we fail to listen.  be _not_listening()", 
            "title": "_not_listening"
        }, 
        {
            "location": "/net-http-HTTPServer/#_closed", 
            "text": "Called when we stop listening.  be _closed()", 
            "title": "_closed"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/", 
            "text": "ChunkedTransfer\n\n\nprimitive val ChunkedTransfer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: ChunkedTransfer val^\n\n\n\n\nReturns\n\n\n\n\nChunkedTransfer\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: ChunkedTransfer val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nChunkedTransfer\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ChunkedTransfer val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nChunkedTransfer\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ChunkedTransfer"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#chunkedtransfer", 
            "text": "primitive val ChunkedTransfer", 
            "title": "ChunkedTransfer"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#create", 
            "text": "new val create()\n: ChunkedTransfer val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#returns", 
            "text": "ChunkedTransfer  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#eq", 
            "text": "fun box eq(\n  that: ChunkedTransfer val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#parameters", 
            "text": "that:  ChunkedTransfer  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#ne", 
            "text": "fun box ne(\n  that: ChunkedTransfer val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#parameters_1", 
            "text": "that:  ChunkedTransfer  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ChunkedTransfer/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StreamTransfer/", 
            "text": "StreamTransfer\n\n\nprimitive val StreamTransfer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StreamTransfer val^\n\n\n\n\nReturns\n\n\n\n\nStreamTransfer\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: StreamTransfer val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStreamTransfer\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StreamTransfer val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStreamTransfer\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StreamTransfer"
        }, 
        {
            "location": "/net-http-StreamTransfer/#streamtransfer", 
            "text": "primitive val StreamTransfer", 
            "title": "StreamTransfer"
        }, 
        {
            "location": "/net-http-StreamTransfer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-StreamTransfer/#create", 
            "text": "new val create()\n: StreamTransfer val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-StreamTransfer/#returns", 
            "text": "StreamTransfer  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StreamTransfer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-StreamTransfer/#eq", 
            "text": "fun box eq(\n  that: StreamTransfer val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-StreamTransfer/#parameters", 
            "text": "that:  StreamTransfer  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StreamTransfer/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-StreamTransfer/#ne", 
            "text": "fun box ne(\n  that: StreamTransfer val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-StreamTransfer/#parameters_1", 
            "text": "that:  StreamTransfer  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-StreamTransfer/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-OneshotTransfer/", 
            "text": "OneshotTransfer\n\n\nprimitive val OneshotTransfer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: OneshotTransfer val^\n\n\n\n\nReturns\n\n\n\n\nOneshotTransfer\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: OneshotTransfer val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOneshotTransfer\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: OneshotTransfer val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOneshotTransfer\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive OneshotTransfer"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#oneshottransfer", 
            "text": "primitive val OneshotTransfer", 
            "title": "OneshotTransfer"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#create", 
            "text": "new val create()\n: OneshotTransfer val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#returns", 
            "text": "OneshotTransfer  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#eq", 
            "text": "fun box eq(\n  that: OneshotTransfer val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#parameters", 
            "text": "that:  OneshotTransfer  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#ne", 
            "text": "fun box ne(\n  that: OneshotTransfer val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#parameters_1", 
            "text": "that:  OneshotTransfer  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-OneshotTransfer/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-TransferMode/", 
            "text": "TransferMode\n\n\ntype TransferMode is\n  (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nChunkedTransfer\n val | \nStreamTransfer\n val | \nOneshotTransfer\n val)", 
            "title": "type TransferMode"
        }, 
        {
            "location": "/net-http-TransferMode/#transfermode", 
            "text": "type TransferMode is\n  (ChunkedTransfer val | StreamTransfer val | OneshotTransfer val)", 
            "title": "TransferMode"
        }, 
        {
            "location": "/net-http-TransferMode/#type-alias-for", 
            "text": "( ChunkedTransfer  val |  StreamTransfer  val |  OneshotTransfer  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-http-Payload/", 
            "text": "Payload\n\n\nThis class represent a single HTTP message, which can be either a\n\nrequest\n or a \nresponse\n.\n\n\nTransfer Modes\n\n\nHTTP provides two ways to encode the transmission of a message 'body',\nof any size. This package supports both of them:\n\n\n\n\n\n\nStreamTransfer\n. This is used for payload bodies where the exact\n  length is known in advance, including most transfers of files. It is\n  selected by calling \nPayload.set_length\n with an integer bytecount.\n  Appication buffer sizes determine how much data is fed to the TCP\n  connection at once, but the total amount must match this size.\n\n\n\n\n\n\nChunkedTransfer\n. This is used when the payload length can not be\n  known in advance, but can be large. It is selected by calling\n  \nPayload.set_length\n with a parameter of \nNone\n. On the TCP link this mode\n  can be detected because there is no \nContent-Length\n header at all, being\n  replaced by the \nTransfer-Encoding: chunked\n header. In addition, the\n  message body is separated into chunks, each with its own bytecount. As with\n  \nStreamTransfer\n mode, transmission can be spread out over time with the\n  difference that it is the original data source that determines the chunk\n  size.\n\n\n\n\n\n\nIf \nPayload.set_length\n is never called at all, a variation on\n  \nStreamTransfer\n called \nOneshotTransfer\n is used. In this case, all of\n  the message body is placed into the message at once, using\n  \nPayload.add_chunk\n calls. The size will be determined when the message is\n  submitted for transmission. Care must be taken not to consume too much\n  memory, especially on a server where there can be multiple messages in\n  transit at once.\n\n\nThe type of transfer being used by an incoming message can be determined\n  from its \ntransfer_mode\n field, which will be one of the\n  \nTransferMode\n types.\n\n\nSequence\n\n\nFor example, to send a message of possibly large size:\n\n\n\n\nCreate the message with a call to \nPayload.request\n or \nPayload.response\n.\n\n\nSet the \nsession\n field of the message.\n\n\nCall \nPayload.set_length\n to indicate the length of the body.\n\n\nAdd any additional headers that may be required, such as \nContent-type\n.\n\n\nSubmit the message for transmission by calling the either the\n\nHTTPSession.apply\n method (in servers) or the \nHTTPCLient.apply\n method\nin clients.\n\n\nWait for the \nsend_body\n notification.\n\n\nMake any number of calls to \nPayload.send_chunk\n.\n\n\nCall \nPayload.finish\n.\n\n\n\n\nTo send a message of small, reasonable size (say, under 20KB), this\nsimplified method can be used instead:\n\n\n\n\nCreate the message with a call to \nPayload.request\n or \nPayload.response\n.\n\n\nSet the \nsession\n field of the message.\n\n\nAdd any additional headers that may be required, such as \nContent-type\n.\n\n\nCall \nadd_chunk\n one or more times to add body data.\n\n\nSubmit the message for transmission by calling the either the\n\nHTTPSession\n.apply\n method (in servers) or the\n\nHTTPClient\n.apply\n method in clients.\n\n\n\n\nclass trn Payload\n\n\n\n\nConstructors\n\n\nrequest\n\n\nnew iso request(\n  method': String val = seq,\n  url': URL val = seq)\n: Payload iso^\n\n\n\n\nParameters\n\n\n\n\nmethod': \nString\n val = seq\n\n\nurl': \nURL\n val = seq\n\n\n\n\nReturns\n\n\n\n\nPayload\n iso^\n\n\n\n\n\n\nresponse\n\n\nnew iso response(\n  status': Status val = seq)\n: Payload iso^\n\n\n\n\nParameters\n\n\n\n\nstatus': \nStatus\n val = seq\n\n\n\n\nReturns\n\n\n\n\nPayload\n iso^\n\n\n\n\n\n\n_empty\n\n\nnew iso _empty(\n  response': Bool val = seq)\n: Payload iso^\n\n\n\n\nParameters\n\n\n\n\nresponse': \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nPayload\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar proto: \nString\n val\n\n\n\n\n\n\n\n\nvar status: \nU16\n val\n\n\n\n\n\n\n\n\nvar method: \nString\n val\n\n\n\n\n\n\n\n\nvar url: \nURL\n val\n\n\n\n\n\n\n\n\nvar transfer_mode: (\nChunkedTransfer\n val | \nStreamTransfer\n val | \nOneshotTransfer\n val)\n\n\n\n\n\n\n\n\nvar session: (\nHTTPSession\n tag | \nNone\n val)\n\n\n\n\n\n\n\n\nvar username: \nString\n val\n\n\n\n\n\n\n\n\nvar password: \nString\n val\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nGet a header.\n\n\nfun box apply(\n  key: String val)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\nkey: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nis_safe\n\n\nA request method is \"safe\" if it does not modify state in the resource.\nThese methods can be guaranteed not to have any body data.\nReturn true for a safe request method, false otherwise.\n\n\nfun box is_safe()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nbody\n\n\nGet the body in \nOneshotTransfer\n mode.\nIn the other modes it raises an error.\n\n\nfun box body()\n: this-\nArray[(String val | Array[U8 val] val)] ref ?\n\n\n\n\nReturns\n\n\n\n\nthis-\nArray\n[(\nString\n val | \nArray\n[\nU8\n val] val)] ref ?\n\n\n\n\n\n\nset_length\n\n\nSet the body length when known in advance. This determines the\ntransfer mode that will be used. A parameter of 'None' will use\nChunked Transfer Encoding. A numeric value will use Streamed\ntransfer. Not calling this function at all will\nuse Oneshot transfer.\n\n\nfun ref set_length(\n  bytecount: (USize val | None val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nbytecount: (\nUSize\n val | \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nupdate\n\n\nSet any header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.\n\n\nfun ref update(\n  key: String val,\n  value: String val)\n: Payload ref^\n\n\n\n\nParameters\n\n\n\n\nkey: \nString\n val\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nPayload\n ref^\n\n\n\n\n\n\nheaders\n\n\nGet all the headers.\n\n\nfun box headers()\n: this-\nHashMap[String val, String val, HashEq[String val] val] ref\n\n\n\n\nReturns\n\n\n\n\nthis-\nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] ref\n\n\n\n\n\n\nbody_size\n\n\nGet the total intended size of the body.\n\nServerConnection\n accumulates actual size transferred for logging.\n\n\nfun box body_size()\n: (USize val | None val)\n\n\n\n\nReturns\n\n\n\n\n(\nUSize\n val | \nNone\n val)\n\n\n\n\n\n\nadd_chunk\n\n\nThis is how application code adds data to the body in\n\nOneshotTransfer\n mode. For large bodies, call \nset_length\n\nand use \nsend_chunk\n instead.\n\n\nfun ref add_chunk(\n  data: (String val | Array[U8 val] val))\n: Payload ref^\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nPayload\n ref^\n\n\n\n\n\n\nsend_chunk\n\n\nThis is how application code sends body data in \nStreamTransfer\n and\n\nChunkedTransfer\n modes. For smaller body lengths, \nadd_chunk\n in\n\nOneshot\n mode can be used instead.\n\n\nfun box send_chunk(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfinish\n\n\nMark the end of body transmission. This does not do anything,\nand is unnecessary, in Oneshot mode.\n\n\nfun val finish()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nrespond\n\n\nStart sending a response from the server to the client.\n\n\nfun val respond(\n  response': Payload trn)\n: None val\n\n\n\n\nParameters\n\n\n\n\nresponse': \nPayload\n trn\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhas_body\n\n\nDetermines whether a message has a body portion.\n\n\nfun box has_body()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_client_fail\n\n\nStart sending an error response.\n\n\nfun val _client_fail()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write\n\n\nWrites the payload to an HTTPSession. Requests and Responses differ\nonly in the first line of text - everything after that is the same format.\n\n\nfun val _write(\n  keepalive: Bool val = seq,\n  conn: TCPConnection tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nkeepalive: \nBool\n val = seq\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_request\n\n\nWrites the 'request' parts of an HTTP message.\n\n\nfun val _write_request(\n  keepalive: Bool val,\n  conn: TCPConnection tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nkeepalive: \nBool\n val\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_common\n\n\nWrites the parts of an HTTP message common to both requests and\nresponses.\n\n\nfun val _write_common(\n  conn: TCPConnection tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_response\n\n\nWrite the response-specific parts of an HTTP message. This is the\nstatus line, consisting of the protocol name, the status value,\nand a string representation of the status (carried in the \nmethod\n\nfield). Since writing it out is an actor behavior call, we go to\nthe trouble of packaging it into a single string before sending.\n\n\nfun val _write_response(\n  keepalive: Bool val,\n  conn: TCPConnection tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nkeepalive: \nBool\n val\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_headers\n\n\nWrite all of the HTTP headers to the comm link.\n\n\nfun box _write_headers(\n  conn: TCPConnection tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Payload"
        }, 
        {
            "location": "/net-http-Payload/#payload", 
            "text": "This class represent a single HTTP message, which can be either a request  or a  response .", 
            "title": "Payload"
        }, 
        {
            "location": "/net-http-Payload/#transfer-modes", 
            "text": "HTTP provides two ways to encode the transmission of a message 'body',\nof any size. This package supports both of them:    StreamTransfer . This is used for payload bodies where the exact\n  length is known in advance, including most transfers of files. It is\n  selected by calling  Payload.set_length  with an integer bytecount.\n  Appication buffer sizes determine how much data is fed to the TCP\n  connection at once, but the total amount must match this size.    ChunkedTransfer . This is used when the payload length can not be\n  known in advance, but can be large. It is selected by calling\n   Payload.set_length  with a parameter of  None . On the TCP link this mode\n  can be detected because there is no  Content-Length  header at all, being\n  replaced by the  Transfer-Encoding: chunked  header. In addition, the\n  message body is separated into chunks, each with its own bytecount. As with\n   StreamTransfer  mode, transmission can be spread out over time with the\n  difference that it is the original data source that determines the chunk\n  size.    If  Payload.set_length  is never called at all, a variation on\n   StreamTransfer  called  OneshotTransfer  is used. In this case, all of\n  the message body is placed into the message at once, using\n   Payload.add_chunk  calls. The size will be determined when the message is\n  submitted for transmission. Care must be taken not to consume too much\n  memory, especially on a server where there can be multiple messages in\n  transit at once.  The type of transfer being used by an incoming message can be determined\n  from its  transfer_mode  field, which will be one of the\n   TransferMode  types.", 
            "title": "Transfer Modes"
        }, 
        {
            "location": "/net-http-Payload/#sequence", 
            "text": "For example, to send a message of possibly large size:   Create the message with a call to  Payload.request  or  Payload.response .  Set the  session  field of the message.  Call  Payload.set_length  to indicate the length of the body.  Add any additional headers that may be required, such as  Content-type .  Submit the message for transmission by calling the either the HTTPSession.apply  method (in servers) or the  HTTPCLient.apply  method\nin clients.  Wait for the  send_body  notification.  Make any number of calls to  Payload.send_chunk .  Call  Payload.finish .   To send a message of small, reasonable size (say, under 20KB), this\nsimplified method can be used instead:   Create the message with a call to  Payload.request  or  Payload.response .  Set the  session  field of the message.  Add any additional headers that may be required, such as  Content-type .  Call  add_chunk  one or more times to add body data.  Submit the message for transmission by calling the either the HTTPSession .apply  method (in servers) or the HTTPClient .apply  method in clients.   class trn Payload", 
            "title": "Sequence"
        }, 
        {
            "location": "/net-http-Payload/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-Payload/#request", 
            "text": "new iso request(\n  method': String val = seq,\n  url': URL val = seq)\n: Payload iso^", 
            "title": "request"
        }, 
        {
            "location": "/net-http-Payload/#parameters", 
            "text": "method':  String  val = seq  url':  URL  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns", 
            "text": "Payload  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#response", 
            "text": "new iso response(\n  status': Status val = seq)\n: Payload iso^", 
            "title": "response"
        }, 
        {
            "location": "/net-http-Payload/#parameters_1", 
            "text": "status':  Status  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_1", 
            "text": "Payload  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#_empty", 
            "text": "new iso _empty(\n  response': Bool val = seq)\n: Payload iso^", 
            "title": "_empty"
        }, 
        {
            "location": "/net-http-Payload/#parameters_2", 
            "text": "response':  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_2", 
            "text": "Payload  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#public-fields", 
            "text": "var proto:  String  val     var status:  U16  val     var method:  String  val     var url:  URL  val     var transfer_mode: ( ChunkedTransfer  val |  StreamTransfer  val |  OneshotTransfer  val)     var session: ( HTTPSession  tag |  None  val)     var username:  String  val     var password:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-Payload/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-Payload/#apply", 
            "text": "Get a header.  fun box apply(\n  key: String val)\n: String val ?", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-Payload/#parameters_3", 
            "text": "key:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_3", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#is_safe", 
            "text": "A request method is \"safe\" if it does not modify state in the resource.\nThese methods can be guaranteed not to have any body data.\nReturn true for a safe request method, false otherwise.  fun box is_safe()\n: Bool val", 
            "title": "is_safe"
        }, 
        {
            "location": "/net-http-Payload/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#body", 
            "text": "Get the body in  OneshotTransfer  mode.\nIn the other modes it raises an error.  fun box body()\n: this- Array[(String val | Array[U8 val] val)] ref ?", 
            "title": "body"
        }, 
        {
            "location": "/net-http-Payload/#returns_5", 
            "text": "this- Array [( String  val |  Array [ U8  val] val)] ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#set_length", 
            "text": "Set the body length when known in advance. This determines the\ntransfer mode that will be used. A parameter of 'None' will use\nChunked Transfer Encoding. A numeric value will use Streamed\ntransfer. Not calling this function at all will\nuse Oneshot transfer.  fun ref set_length(\n  bytecount: (USize val | None val))\n: None val", 
            "title": "set_length"
        }, 
        {
            "location": "/net-http-Payload/#parameters_4", 
            "text": "bytecount: ( USize  val |  None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#update", 
            "text": "Set any header. If we've already received the header, append the value as a\ncomma separated list, as per RFC 2616 section 4.2.  fun ref update(\n  key: String val,\n  value: String val)\n: Payload ref^", 
            "title": "update"
        }, 
        {
            "location": "/net-http-Payload/#parameters_5", 
            "text": "key:  String  val  value:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_7", 
            "text": "Payload  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#headers", 
            "text": "Get all the headers.  fun box headers()\n: this- HashMap[String val, String val, HashEq[String val] val] ref", 
            "title": "headers"
        }, 
        {
            "location": "/net-http-Payload/#returns_8", 
            "text": "this- HashMap [ String  val,  String  val,  HashEq [ String  val] val] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#body_size", 
            "text": "Get the total intended size of the body. ServerConnection  accumulates actual size transferred for logging.  fun box body_size()\n: (USize val | None val)", 
            "title": "body_size"
        }, 
        {
            "location": "/net-http-Payload/#returns_9", 
            "text": "( USize  val |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#add_chunk", 
            "text": "This is how application code adds data to the body in OneshotTransfer  mode. For large bodies, call  set_length \nand use  send_chunk  instead.  fun ref add_chunk(\n  data: (String val | Array[U8 val] val))\n: Payload ref^", 
            "title": "add_chunk"
        }, 
        {
            "location": "/net-http-Payload/#parameters_6", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_10", 
            "text": "Payload  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#send_chunk", 
            "text": "This is how application code sends body data in  StreamTransfer  and ChunkedTransfer  modes. For smaller body lengths,  add_chunk  in Oneshot  mode can be used instead.  fun box send_chunk(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "send_chunk"
        }, 
        {
            "location": "/net-http-Payload/#parameters_7", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#finish", 
            "text": "Mark the end of body transmission. This does not do anything,\nand is unnecessary, in Oneshot mode.  fun val finish()\n: None val", 
            "title": "finish"
        }, 
        {
            "location": "/net-http-Payload/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#respond", 
            "text": "Start sending a response from the server to the client.  fun val respond(\n  response': Payload trn)\n: None val", 
            "title": "respond"
        }, 
        {
            "location": "/net-http-Payload/#parameters_8", 
            "text": "response':  Payload  trn", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#has_body", 
            "text": "Determines whether a message has a body portion.  fun box has_body()\n: Bool val", 
            "title": "has_body"
        }, 
        {
            "location": "/net-http-Payload/#returns_14", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-Payload/#_client_fail", 
            "text": "Start sending an error response.  fun val _client_fail()\n: None val", 
            "title": "_client_fail"
        }, 
        {
            "location": "/net-http-Payload/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#_write", 
            "text": "Writes the payload to an HTTPSession. Requests and Responses differ\nonly in the first line of text - everything after that is the same format.  fun val _write(\n  keepalive: Bool val = seq,\n  conn: TCPConnection tag)\n: None val", 
            "title": "_write"
        }, 
        {
            "location": "/net-http-Payload/#parameters_9", 
            "text": "keepalive:  Bool  val = seq  conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#_write_request", 
            "text": "Writes the 'request' parts of an HTTP message.  fun val _write_request(\n  keepalive: Bool val,\n  conn: TCPConnection tag)\n: None val", 
            "title": "_write_request"
        }, 
        {
            "location": "/net-http-Payload/#parameters_10", 
            "text": "keepalive:  Bool  val  conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#_write_common", 
            "text": "Writes the parts of an HTTP message common to both requests and\nresponses.  fun val _write_common(\n  conn: TCPConnection tag)\n: None val", 
            "title": "_write_common"
        }, 
        {
            "location": "/net-http-Payload/#parameters_11", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#_write_response", 
            "text": "Write the response-specific parts of an HTTP message. This is the\nstatus line, consisting of the protocol name, the status value,\nand a string representation of the status (carried in the  method \nfield). Since writing it out is an actor behavior call, we go to\nthe trouble of packaging it into a single string before sending.  fun val _write_response(\n  keepalive: Bool val,\n  conn: TCPConnection tag)\n: None val", 
            "title": "_write_response"
        }, 
        {
            "location": "/net-http-Payload/#parameters_12", 
            "text": "keepalive:  Bool  val  conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-Payload/#_write_headers", 
            "text": "Write all of the HTTP headers to the comm link.  fun box _write_headers(\n  conn: TCPConnection tag)\n: None val", 
            "title": "_write_headers"
        }, 
        {
            "location": "/net-http-Payload/#parameters_13", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-Payload/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-MimeTypes/", 
            "text": "MimeTypes\n\n\nProvide mapping from file names to MIME types.\nTODO load from /etc/mime.types\n\n\nprimitive val MimeTypes\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: MimeTypes val^\n\n\n\n\nReturns\n\n\n\n\nMimeTypes\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nMapping is based on the file type, following the last period in the name.\n\n\nfun box apply(\n  name: String val)\n: String val^\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: MimeTypes val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMimeTypes\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: MimeTypes val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMimeTypes\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive MimeTypes"
        }, 
        {
            "location": "/net-http-MimeTypes/#mimetypes", 
            "text": "Provide mapping from file names to MIME types.\nTODO load from /etc/mime.types  primitive val MimeTypes", 
            "title": "MimeTypes"
        }, 
        {
            "location": "/net-http-MimeTypes/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-MimeTypes/#create", 
            "text": "new val create()\n: MimeTypes val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-MimeTypes/#returns", 
            "text": "MimeTypes  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-MimeTypes/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-MimeTypes/#apply", 
            "text": "Mapping is based on the file type, following the last period in the name.  fun box apply(\n  name: String val)\n: String val^", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-MimeTypes/#parameters", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-MimeTypes/#returns_1", 
            "text": "String  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-MimeTypes/#eq", 
            "text": "fun box eq(\n  that: MimeTypes val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-MimeTypes/#parameters_1", 
            "text": "that:  MimeTypes  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-MimeTypes/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-MimeTypes/#ne", 
            "text": "fun box ne(\n  that: MimeTypes val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-MimeTypes/#parameters_2", 
            "text": "that:  MimeTypes  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-MimeTypes/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPSession/", 
            "text": "HTTPSession\n\n\nAn HTTP Session is the external API to the communication link\nbetween client and server. A session can only transfer one message\nat a time in each direction. The client and server each have their\nown ways of implementing this interface, but to application code (either\nin the client or in the server 'back end') this interface provides a\ncommon view of how information is passed \ninto\n the \nnet/http\n package.\n\n\ninterface tag HTTPSession\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nStart sending a request or response. The \nPayload\n must have all its\nessential fields filled in at this point, because ownership is being\ntransferred to the session actor. This begins an outbound message.\n\n\nbe apply(\n  payload: Payload val)\n\n\n\n\nParameters\n\n\n\n\npayload: \nPayload\n val\n\n\n\n\n\n\nfinish\n\n\nIndicate that all \noutbound\n \nadd_chunk\n calls have been made and\nsubmission of the HTTP message is complete.\n\n\nbe finish()\n\n\n\n\n\n\ndispose\n\n\nClose the connection from this end.\n\n\nbe dispose()\n\n\n\n\n\n\nwrite\n\n\nWrite raw byte stream to the outbound TCP connection.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\ncancel\n\n\nTell the session to stop sending an \noutbound\n message.\n\n\nbe cancel(\n  msg: Payload val)\n\n\n\n\nParameters\n\n\n\n\nmsg: \nPayload\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_mute\n\n\nStop delivering \nincoming\n data to the handler. This may not\nbe effective instantly.\n\n\nbe _mute()\n\n\n\n\n\n\n_unmute\n\n\nResume delivering incoming data to the handler.\n\n\nbe _unmute()\n\n\n\n\n\n\n_deliver\n\n\nThe appropriate Payload Builder will call this from the \nTCPConnection\n\nactor to start delivery of a new \ninbound\n message. If the \nPayload\ns\n\ntransfer_mode\n is \nOneshotTransfer\n, this is the only notification \nthat will happen for the message. Otherwise there will be one or more\n\n_chunk\n calls followed by a \n_finish\n call.\n\n\nbe _deliver(\n  payload: Payload val)\n\n\n\n\nParameters\n\n\n\n\npayload: \nPayload\n val\n\n\n\n\n\n\n_chunk\n\n\nDeliver a piece of \ninbound\n body data to the application \nHTTPHandler\n\nThis is called by the PayloadBuilder.\n\n\nbe _chunk(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\n_finish\n\n\nInidcates that the last \ninbound\n body chunk has been sent to\n\n_chunk\n. This is called by the PayloadBuilder.\n\n\nbe _finish()", 
            "title": "interface HTTPSession"
        }, 
        {
            "location": "/net-http-HTTPSession/#httpsession", 
            "text": "An HTTP Session is the external API to the communication link\nbetween client and server. A session can only transfer one message\nat a time in each direction. The client and server each have their\nown ways of implementing this interface, but to application code (either\nin the client or in the server 'back end') this interface provides a\ncommon view of how information is passed  into  the  net/http  package.  interface tag HTTPSession", 
            "title": "HTTPSession"
        }, 
        {
            "location": "/net-http-HTTPSession/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-HTTPSession/#apply", 
            "text": "Start sending a request or response. The  Payload  must have all its\nessential fields filled in at this point, because ownership is being\ntransferred to the session actor. This begins an outbound message.  be apply(\n  payload: Payload val)", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-HTTPSession/#parameters", 
            "text": "payload:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPSession/#finish", 
            "text": "Indicate that all  outbound   add_chunk  calls have been made and\nsubmission of the HTTP message is complete.  be finish()", 
            "title": "finish"
        }, 
        {
            "location": "/net-http-HTTPSession/#dispose", 
            "text": "Close the connection from this end.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-http-HTTPSession/#write", 
            "text": "Write raw byte stream to the outbound TCP connection.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/net-http-HTTPSession/#parameters_1", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPSession/#cancel", 
            "text": "Tell the session to stop sending an  outbound  message.  be cancel(\n  msg: Payload val)", 
            "title": "cancel"
        }, 
        {
            "location": "/net-http-HTTPSession/#parameters_2", 
            "text": "msg:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPSession/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-http-HTTPSession/#_mute", 
            "text": "Stop delivering  incoming  data to the handler. This may not\nbe effective instantly.  be _mute()", 
            "title": "_mute"
        }, 
        {
            "location": "/net-http-HTTPSession/#_unmute", 
            "text": "Resume delivering incoming data to the handler.  be _unmute()", 
            "title": "_unmute"
        }, 
        {
            "location": "/net-http-HTTPSession/#_deliver", 
            "text": "The appropriate Payload Builder will call this from the  TCPConnection \nactor to start delivery of a new  inbound  message. If the  Payload s transfer_mode  is  OneshotTransfer , this is the only notification \nthat will happen for the message. Otherwise there will be one or more _chunk  calls followed by a  _finish  call.  be _deliver(\n  payload: Payload val)", 
            "title": "_deliver"
        }, 
        {
            "location": "/net-http-HTTPSession/#parameters_3", 
            "text": "payload:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPSession/#_chunk", 
            "text": "Deliver a piece of  inbound  body data to the application  HTTPHandler \nThis is called by the PayloadBuilder.  be _chunk(\n  data: (String val | Array[U8 val] val))", 
            "title": "_chunk"
        }, 
        {
            "location": "/net-http-HTTPSession/#parameters_4", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPSession/#_finish", 
            "text": "Inidcates that the last  inbound  body chunk has been sent to _chunk . This is called by the PayloadBuilder.  be _finish()", 
            "title": "_finish"
        }, 
        {
            "location": "/net-http-HTTPHandler/", 
            "text": "HTTPHandler\n\n\nThis is the interface through which HTTP messages are delivered \nto\n\napplication code. On the server, this will be HTTP Requests (GET,\nHEAD, DELETE, POST, etc) sent from a client. On the client, this will\nbe the HTTP Responses coming back from the server. The protocol is largely\nsymmetrical and the same interface definition is used, though what\nprocessing happens behind the interface will of course vary.\n\n\nThis interface delivers asynchronous events when receiving an HTTP\nmessage (called a \nPayload\n). Calls to these methods are made in\nthe context of the \nHTTPSession\n actor so most of them should be\npassing data on to a processing actor.\n\n\nEach \nHTTPSession\n must have a unique instance of the handler. The\napplication code does not necessarily know when an \nHTTPSession\n is created,\nso the application must provide an instance of \nHandlerFactory\n that\nwill be called at the appropriate time.\n\n\ninterface ref HTTPHandler\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  payload: Payload val)\n: Any tag\n\n\n\n\nParameters\n\n\n\n\npayload: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nAny\n tag\n\n\n\n\n\n\nchunk\n\n\nfun ref chunk(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfinished\n\n\nfun ref finished()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncancelled\n\n\nfun ref cancelled()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\n\nfun ref throttled()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\n\nfun ref unthrottled()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nneed_body\n\n\nfun ref need_body()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface HTTPHandler"
        }, 
        {
            "location": "/net-http-HTTPHandler/#httphandler", 
            "text": "This is the interface through which HTTP messages are delivered  to \napplication code. On the server, this will be HTTP Requests (GET,\nHEAD, DELETE, POST, etc) sent from a client. On the client, this will\nbe the HTTP Responses coming back from the server. The protocol is largely\nsymmetrical and the same interface definition is used, though what\nprocessing happens behind the interface will of course vary.  This interface delivers asynchronous events when receiving an HTTP\nmessage (called a  Payload ). Calls to these methods are made in\nthe context of the  HTTPSession  actor so most of them should be\npassing data on to a processing actor.  Each  HTTPSession  must have a unique instance of the handler. The\napplication code does not necessarily know when an  HTTPSession  is created,\nso the application must provide an instance of  HandlerFactory  that\nwill be called at the appropriate time.  interface ref HTTPHandler", 
            "title": "HTTPHandler"
        }, 
        {
            "location": "/net-http-HTTPHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-HTTPHandler/#apply", 
            "text": "fun ref apply(\n  payload: Payload val)\n: Any tag", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-HTTPHandler/#parameters", 
            "text": "payload:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns", 
            "text": "Any  tag", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPHandler/#chunk", 
            "text": "fun ref chunk(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "chunk"
        }, 
        {
            "location": "/net-http-HTTPHandler/#parameters_1", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPHandler/#finished", 
            "text": "fun ref finished()\n: None val", 
            "title": "finished"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPHandler/#cancelled", 
            "text": "fun ref cancelled()\n: None val", 
            "title": "cancelled"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPHandler/#throttled", 
            "text": "fun ref throttled()\n: None val", 
            "title": "throttled"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPHandler/#unthrottled", 
            "text": "fun ref unthrottled()\n: None val", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPHandler/#need_body", 
            "text": "fun ref need_body()\n: None val", 
            "title": "need_body"
        }, 
        {
            "location": "/net-http-HTTPHandler/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HandlerFactory/", 
            "text": "HandlerFactory\n\n\nThe TCP connections that underlie HTTP sessions get created within\nthe \nnet/http\n package at times that the application code can not\npredict. Yet, the application code has to provide custom hooks into\nthese connections as they are created. To accomplish this, the\napplication code provides an instance of a \nclass\n that implements\nthis interface.\n\n\nThe \nHandlerFactory.apply\n method will be called when a new\n\nHTTPSession\n is created, giving the application a chance to create\nan instance of its own \nHTTPHandler\n. This happens on both\nclient and server ends.\n\n\ninterface ref HandlerFactory\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCalled by the \nHTTPSession\n when it needs a new instance of the\napplication's \nHTTPHandler\n. It is suggested that the\n\nsession\n value be passed to the constructor for the new\n\nHTTPHandler\n so that it is available for making\n\nthrottle\n and \nunthrottle\n calls.\n\n\nfun box apply(\n  session: HTTPSession tag)\n: HTTPHandler ref^\n\n\n\n\nParameters\n\n\n\n\nsession: \nHTTPSession\n tag\n\n\n\n\nReturns\n\n\n\n\nHTTPHandler\n ref^", 
            "title": "interface HandlerFactory"
        }, 
        {
            "location": "/net-http-HandlerFactory/#handlerfactory", 
            "text": "The TCP connections that underlie HTTP sessions get created within\nthe  net/http  package at times that the application code can not\npredict. Yet, the application code has to provide custom hooks into\nthese connections as they are created. To accomplish this, the\napplication code provides an instance of a  class  that implements\nthis interface.  The  HandlerFactory.apply  method will be called when a new HTTPSession  is created, giving the application a chance to create\nan instance of its own  HTTPHandler . This happens on both\nclient and server ends.  interface ref HandlerFactory", 
            "title": "HandlerFactory"
        }, 
        {
            "location": "/net-http-HandlerFactory/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-HandlerFactory/#apply", 
            "text": "Called by the  HTTPSession  when it needs a new instance of the\napplication's  HTTPHandler . It is suggested that the session  value be passed to the constructor for the new HTTPHandler  so that it is available for making throttle  and  unthrottle  calls.  fun box apply(\n  session: HTTPSession tag)\n: HTTPHandler ref^", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-HandlerFactory/#parameters", 
            "text": "session:  HTTPSession  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HandlerFactory/#returns", 
            "text": "HTTPHandler  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-DiscardLog/", 
            "text": "DiscardLog\n\n\nDoesn't log anything.\n\n\nprimitive val DiscardLog\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: DiscardLog val^\n\n\n\n\nReturns\n\n\n\n\nDiscardLog\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: DiscardLog val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDiscardLog\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DiscardLog val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDiscardLog\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DiscardLog"
        }, 
        {
            "location": "/net-http-DiscardLog/#discardlog", 
            "text": "Doesn't log anything.  primitive val DiscardLog", 
            "title": "DiscardLog"
        }, 
        {
            "location": "/net-http-DiscardLog/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-DiscardLog/#create", 
            "text": "new val create()\n: DiscardLog val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-DiscardLog/#returns", 
            "text": "DiscardLog  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-DiscardLog/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-DiscardLog/#apply", 
            "text": "fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-DiscardLog/#parameters", 
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-DiscardLog/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-DiscardLog/#eq", 
            "text": "fun box eq(\n  that: DiscardLog val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-DiscardLog/#parameters_1", 
            "text": "that:  DiscardLog  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-DiscardLog/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-DiscardLog/#ne", 
            "text": "fun box ne(\n  that: DiscardLog val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-DiscardLog/#parameters_2", 
            "text": "that:  DiscardLog  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-DiscardLog/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ContentsLog/", 
            "text": "ContentsLog\n\n\nLogs the contents of HTTP requests and responses.\n\n\nclass ref ContentsLog is\n  Logger val\n\n\n\n\nImplements\n\n\n\n\nLogger\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  out: OutStream tag)\n: ContentsLog val^\n\n\n\n\nParameters\n\n\n\n\nout: \nOutStream\n tag\n\n\n\n\nReturns\n\n\n\n\nContentsLog\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class ContentsLog"
        }, 
        {
            "location": "/net-http-ContentsLog/#contentslog", 
            "text": "Logs the contents of HTTP requests and responses.  class ref ContentsLog is\n  Logger val", 
            "title": "ContentsLog"
        }, 
        {
            "location": "/net-http-ContentsLog/#implements", 
            "text": "Logger  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-ContentsLog/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-ContentsLog/#create", 
            "text": "new val create(\n  out: OutStream tag)\n: ContentsLog val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-ContentsLog/#parameters", 
            "text": "out:  OutStream  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ContentsLog/#returns", 
            "text": "ContentsLog  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-ContentsLog/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-ContentsLog/#apply", 
            "text": "fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-ContentsLog/#parameters_1", 
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-ContentsLog/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-CommonLog/", 
            "text": "CommonLog\n\n\nLogs HTTP requests in the common log format.\n\n\nclass ref CommonLog is\n  Logger val\n\n\n\n\nImplements\n\n\n\n\nLogger\n val\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  out: OutStream tag)\n: CommonLog val^\n\n\n\n\nParameters\n\n\n\n\nout: \nOutStream\n tag\n\n\n\n\nReturns\n\n\n\n\nCommonLog\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nip: \nString\n val\n\n\nbody_size: \nUSize\n val\n\n\nrequest: \nPayload\n val\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_entry\n\n\nfun box _entry(\n  s: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\ns: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "class CommonLog"
        }, 
        {
            "location": "/net-http-CommonLog/#commonlog", 
            "text": "Logs HTTP requests in the common log format.  class ref CommonLog is\n  Logger val", 
            "title": "CommonLog"
        }, 
        {
            "location": "/net-http-CommonLog/#implements", 
            "text": "Logger  val", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-CommonLog/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-CommonLog/#create", 
            "text": "new val create(\n  out: OutStream tag)\n: CommonLog val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-CommonLog/#parameters", 
            "text": "out:  OutStream  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-CommonLog/#returns", 
            "text": "CommonLog  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-CommonLog/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-CommonLog/#apply", 
            "text": "fun val apply(\n  ip: String val,\n  body_size: USize val,\n  request: Payload val,\n  response: Payload val)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-CommonLog/#parameters_1", 
            "text": "ip:  String  val  body_size:  USize  val  request:  Payload  val  response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-CommonLog/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-CommonLog/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-CommonLog/#_entry", 
            "text": "fun box _entry(\n  s: String val)\n: String val", 
            "title": "_entry"
        }, 
        {
            "location": "/net-http-CommonLog/#parameters_2", 
            "text": "s:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-CommonLog/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPClient/", 
            "text": "HTTPClient\n\n\nManages a group of HTTP connections on behalf of a client application.\nA client should create one instance of this class.\n\n\nclass ref HTTPClient\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  sslctx: (SSLContext val | None val) = seq,\n  pipeline: Bool val = seq)\n: HTTPClient ref^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nsslctx: (\nSSLContext\n val | \nNone\n val) = seq\n\n\npipeline: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nHTTPClient\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nSchedule a request on an HTTP session. If a new connection is created,\na new instance of the application's Receive Handler will be created\nfor it. A \nval\n copy of the \nPayload\n is returned, and it can not be\nmodified after this point.\nThis is useful in Stream and Chunked transfer modes, so that the\napplication can follow up with calls to \nClient.send_body\n.\n\n\nfun ref apply(\n  request: Payload trn,\n  handlermaker: HandlerFactory val)\n: Payload val ?\n\n\n\n\nParameters\n\n\n\n\nrequest: \nPayload\n trn\n\n\nhandlermaker: \nHandlerFactory\n val\n\n\n\n\nReturns\n\n\n\n\nPayload\n val ?\n\n\n\n\n\n\ndispose\n\n\nDisposes the sessions and cancels all pending requests.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsend_body\n\n\nfun ref send_body(\n  data: (String val | Array[U8 val] val),\n  session: HTTPSession tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nsession: \nHTTPSession\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_get_session\n\n\nGets or creates an HTTP Session for the given URL. If a new session\nis created, a new Receive Handler instance is created too.\n\n\nfun ref _get_session(\n  url: URL val,\n  handlermaker: HandlerFactory val)\n: _ClientConnection tag ?\n\n\n\n\nParameters\n\n\n\n\nurl: \nURL\n val\n\n\nhandlermaker: \nHandlerFactory\n val\n\n\n\n\nReturns\n\n\n\n\n_ClientConnection\n tag ?", 
            "title": "class HTTPClient"
        }, 
        {
            "location": "/net-http-HTTPClient/#httpclient", 
            "text": "Manages a group of HTTP connections on behalf of a client application.\nA client should create one instance of this class.  class ref HTTPClient", 
            "title": "HTTPClient"
        }, 
        {
            "location": "/net-http-HTTPClient/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-HTTPClient/#create", 
            "text": "new ref create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  sslctx: (SSLContext val | None val) = seq,\n  pipeline: Bool val = seq)\n: HTTPClient ref^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-HTTPClient/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  sslctx: ( SSLContext  val |  None  val) = seq  pipeline:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPClient/#returns", 
            "text": "HTTPClient  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPClient/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-HTTPClient/#apply", 
            "text": "Schedule a request on an HTTP session. If a new connection is created,\na new instance of the application's Receive Handler will be created\nfor it. A  val  copy of the  Payload  is returned, and it can not be\nmodified after this point.\nThis is useful in Stream and Chunked transfer modes, so that the\napplication can follow up with calls to  Client.send_body .  fun ref apply(\n  request: Payload trn,\n  handlermaker: HandlerFactory val)\n: Payload val ?", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-HTTPClient/#parameters_1", 
            "text": "request:  Payload  trn  handlermaker:  HandlerFactory  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPClient/#returns_1", 
            "text": "Payload  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPClient/#dispose", 
            "text": "Disposes the sessions and cancels all pending requests.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/net-http-HTTPClient/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPClient/#send_body", 
            "text": "fun ref send_body(\n  data: (String val | Array[U8 val] val),\n  session: HTTPSession tag)\n: None val", 
            "title": "send_body"
        }, 
        {
            "location": "/net-http-HTTPClient/#parameters_2", 
            "text": "data: ( String  val |  Array [ U8  val] val)  session:  HTTPSession  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPClient/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-HTTPClient/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-HTTPClient/#_get_session", 
            "text": "Gets or creates an HTTP Session for the given URL. If a new session\nis created, a new Receive Handler instance is created too.  fun ref _get_session(\n  url: URL val,\n  handlermaker: HandlerFactory val)\n: _ClientConnection tag ?", 
            "title": "_get_session"
        }, 
        {
            "location": "/net-http-HTTPClient/#parameters_3", 
            "text": "url:  URL  val  handlermaker:  HandlerFactory  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-HTTPClient/#returns_4", 
            "text": "_ClientConnection  tag ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_SessionGuard/", 
            "text": "_SessionGuard\n\n\nEnforces the rule that an 'unsafe' request monopolizes the\nHTTPSession. A 'safe' request does not modify a resource state on\nthe server, and such a request has no body.\n\n\nclass ref _SessionGuard\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  session: HTTPSession tag)\n: _SessionGuard iso^\n\n\n\n\nParameters\n\n\n\n\nsession: \nHTTPSession\n tag\n\n\n\n\nReturns\n\n\n\n\n_SessionGuard\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar current: (\nPayload\n val | \nNone\n val)\n\n\n\n\n\n\nPublic Functions\n\n\nsubmit\n\n\nAccept a request for transmission to the server. This will fail if\nthe request is not \"safe\" and the HTTPSession is busy. Due to the\npossibly large body size, these requests can not be queued.\n\n\nfun ref submit(\n  request: Payload val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nrequest: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?", 
            "title": "class _SessionGuard"
        }, 
        {
            "location": "/net-http-_SessionGuard/#_sessionguard", 
            "text": "Enforces the rule that an 'unsafe' request monopolizes the\nHTTPSession. A 'safe' request does not modify a resource state on\nthe server, and such a request has no body.  class ref _SessionGuard", 
            "title": "_SessionGuard"
        }, 
        {
            "location": "/net-http-_SessionGuard/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_SessionGuard/#create", 
            "text": "new iso create(\n  session: HTTPSession tag)\n: _SessionGuard iso^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_SessionGuard/#parameters", 
            "text": "session:  HTTPSession  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_SessionGuard/#returns", 
            "text": "_SessionGuard  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_SessionGuard/#public-fields", 
            "text": "var current: ( Payload  val |  None  val)", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-_SessionGuard/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_SessionGuard/#submit", 
            "text": "Accept a request for transmission to the server. This will fail if\nthe request is not \"safe\" and the HTTPSession is busy. Due to the\npossibly large body size, these requests can not be queued.  fun ref submit(\n  request: Payload val)\n: None val ?", 
            "title": "submit"
        }, 
        {
            "location": "/net-http-_SessionGuard/#parameters_1", 
            "text": "request:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_SessionGuard/#returns_1", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/", 
            "text": "_HTTPConnTestHandler\n\n\nclass ref _HTTPConnTestHandler is\n  HTTPHandler ref\n\n\n\n\nImplements\n\n\n\n\nHTTPHandler\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  h': TestHelper val)\n: _HTTPConnTestHandler ref^\n\n\n\n\nParameters\n\n\n\n\nh': \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\n_HTTPConnTestHandler\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar n_received: \nU32\n val\n\n\n\n\n\n\n\n\nlet h: \nTestHelper\n val\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  payload: Payload val)\n: Any tag\n\n\n\n\nParameters\n\n\n\n\npayload: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nAny\n tag\n\n\n\n\n\n\nchunk\n\n\nfun ref chunk(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfinished\n\n\nfun ref finished()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncancelled\n\n\nfun ref cancelled()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\n\nfun ref throttled()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\n\nfun ref unthrottled()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nneed_body\n\n\nfun ref need_body()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class _HTTPConnTestHandler"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#_httpconntesthandler", 
            "text": "class ref _HTTPConnTestHandler is\n  HTTPHandler ref", 
            "title": "_HTTPConnTestHandler"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#implements", 
            "text": "HTTPHandler  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#create", 
            "text": "new ref create(\n  h': TestHelper val)\n: _HTTPConnTestHandler ref^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#parameters", 
            "text": "h':  TestHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns", 
            "text": "_HTTPConnTestHandler  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#public-fields", 
            "text": "var n_received:  U32  val     let h:  TestHelper  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#apply", 
            "text": "fun ref apply(\n  payload: Payload val)\n: Any tag", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#parameters_1", 
            "text": "payload:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_1", 
            "text": "Any  tag", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#chunk", 
            "text": "fun ref chunk(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "chunk"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#parameters_2", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#finished", 
            "text": "fun ref finished()\n: None val", 
            "title": "finished"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#cancelled", 
            "text": "fun ref cancelled()\n: None val", 
            "title": "cancelled"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#throttled", 
            "text": "fun ref throttled()\n: None val", 
            "title": "throttled"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#unthrottled", 
            "text": "fun ref unthrottled()\n: None val", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#need_body", 
            "text": "fun ref need_body()\n: None val", 
            "title": "need_body"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandler/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/", 
            "text": "_HTTPConnTestHandlerFactory\n\n\nclass val _HTTPConnTestHandlerFactory is\n  HandlerFactory ref\n\n\n\n\nImplements\n\n\n\n\nHandlerFactory\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  h': TestHelper val)\n: _HTTPConnTestHandlerFactory val^\n\n\n\n\nParameters\n\n\n\n\nh': \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\n_HTTPConnTestHandlerFactory\n val^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet h: \nTestHelper\n val\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  session: HTTPSession tag)\n: HTTPHandler ref^\n\n\n\n\nParameters\n\n\n\n\nsession: \nHTTPSession\n tag\n\n\n\n\nReturns\n\n\n\n\nHTTPHandler\n ref^", 
            "title": "class _HTTPConnTestHandlerFactory"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#_httpconntesthandlerfactory", 
            "text": "class val _HTTPConnTestHandlerFactory is\n  HandlerFactory ref", 
            "title": "_HTTPConnTestHandlerFactory"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#implements", 
            "text": "HandlerFactory  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#create", 
            "text": "new val create(\n  h': TestHelper val)\n: _HTTPConnTestHandlerFactory val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#parameters", 
            "text": "h':  TestHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#returns", 
            "text": "_HTTPConnTestHandlerFactory  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#public-fields", 
            "text": "let h:  TestHelper  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#apply", 
            "text": "fun box apply(\n  session: HTTPSession tag)\n: HTTPHandler ref^", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#parameters_1", 
            "text": "session:  HTTPSession  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPConnTestHandlerFactory/#returns_1", 
            "text": "HTTPHandler  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/", 
            "text": "_FixedResponseHTTPServerNotify\n\n\nTest http server that spits out fixed responses.\napply returns a TCPListenNotify object.\n\n\nprimitive val _FixedResponseHTTPServerNotify\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FixedResponseHTTPServerNotify val^\n\n\n\n\nReturns\n\n\n\n\n_FixedResponseHTTPServerNotify\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  h': TestHelper val,\n  f: {(String val)} iso,\n  r: Array[String val] val)\n: TCPListenNotify iso^\n\n\n\n\nParameters\n\n\n\n\nh': \nTestHelper\n val\n\n\nf: {(String val)} iso\n\n\nr: \nArray\n[\nString\n val] val\n\n\n\n\nReturns\n\n\n\n\nTCPListenNotify\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FixedResponseHTTPServerNotify val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FixedResponseHTTPServerNotify\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FixedResponseHTTPServerNotify val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FixedResponseHTTPServerNotify\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FixedResponseHTTPServerNotify"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#_fixedresponsehttpservernotify", 
            "text": "Test http server that spits out fixed responses.\napply returns a TCPListenNotify object.  primitive val _FixedResponseHTTPServerNotify", 
            "title": "_FixedResponseHTTPServerNotify"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#create", 
            "text": "new val create()\n: _FixedResponseHTTPServerNotify val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#returns", 
            "text": "_FixedResponseHTTPServerNotify  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#apply", 
            "text": "fun box apply(\n  h': TestHelper val,\n  f: {(String val)} iso,\n  r: Array[String val] val)\n: TCPListenNotify iso^", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#parameters", 
            "text": "h':  TestHelper  val  f: {(String val)} iso  r:  Array [ String  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#returns_1", 
            "text": "TCPListenNotify  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#eq", 
            "text": "fun box eq(\n  that: _FixedResponseHTTPServerNotify val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#parameters_1", 
            "text": "that:  _FixedResponseHTTPServerNotify  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#ne", 
            "text": "fun box ne(\n  that: _FixedResponseHTTPServerNotify val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#parameters_2", 
            "text": "that:  _FixedResponseHTTPServerNotify  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_FixedResponseHTTPServerNotify/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerListener/", 
            "text": "_ServerListener\n\n\nManages the listening socket for an HTTP server. Incoming requests\nare assembled and dispatched.\n\n\nclass ref _ServerListener is\n  TCPListenNotify ref\n\n\n\n\nImplements\n\n\n\n\nTCPListenNotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreates a new listening socket manager.\n\n\nnew iso create(\n  server: HTTPServer tag,\n  sslctx: (SSLContext val | None val),\n  handler: HandlerFactory val,\n  logger: Logger val,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val))\n: _ServerListener iso^\n\n\n\n\nParameters\n\n\n\n\nserver: \nHTTPServer\n tag\n\n\nsslctx: (\nSSLContext\n val | \nNone\n val)\n\n\nhandler: \nHandlerFactory\n val\n\n\nlogger: \nLogger\n val\n\n\nreversedns: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val | \n    \nNone\n val)\n\n\n\n\nReturns\n\n\n\n\n_ServerListener\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\nlistening\n\n\nInform the server of the bound IP address.\n\n\nfun ref listening(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nnot_listening\n\n\nInform the server we failed to listen.\n\n\nfun ref not_listening(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nInform the server we have stopped listening.\n\n\nfun ref closed(\n  listen: TCPListener ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\n\nCreate a notifier for a specific HTTP socket. A new instance of the\nback-end Handler is passed along so it can be used on each \nPayload\n.\n\n\nfun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^\n\n\n\n\nParameters\n\n\n\n\nlisten: \nTCPListener\n ref\n\n\n\n\nReturns\n\n\n\n\nTCPConnectionNotify\n iso^", 
            "title": "class _ServerListener"
        }, 
        {
            "location": "/net-http-_ServerListener/#_serverlistener", 
            "text": "Manages the listening socket for an HTTP server. Incoming requests\nare assembled and dispatched.  class ref _ServerListener is\n  TCPListenNotify ref", 
            "title": "_ServerListener"
        }, 
        {
            "location": "/net-http-_ServerListener/#implements", 
            "text": "TCPListenNotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_ServerListener/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ServerListener/#create", 
            "text": "Creates a new listening socket manager.  new iso create(\n  server: HTTPServer tag,\n  sslctx: (SSLContext val | None val),\n  handler: HandlerFactory val,\n  logger: Logger val,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val))\n: _ServerListener iso^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ServerListener/#parameters", 
            "text": "server:  HTTPServer  tag  sslctx: ( SSLContext  val |  None  val)  handler:  HandlerFactory  val  logger:  Logger  val  reversedns: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val | \n     None  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerListener/#returns", 
            "text": "_ServerListener  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerListener/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ServerListener/#listening", 
            "text": "Inform the server of the bound IP address.  fun ref listening(\n  listen: TCPListener ref)\n: None val", 
            "title": "listening"
        }, 
        {
            "location": "/net-http-_ServerListener/#parameters_1", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerListener/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerListener/#not_listening", 
            "text": "Inform the server we failed to listen.  fun ref not_listening(\n  listen: TCPListener ref)\n: None val", 
            "title": "not_listening"
        }, 
        {
            "location": "/net-http-_ServerListener/#parameters_2", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerListener/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerListener/#closed", 
            "text": "Inform the server we have stopped listening.  fun ref closed(\n  listen: TCPListener ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-http-_ServerListener/#parameters_3", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerListener/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerListener/#connected", 
            "text": "Create a notifier for a specific HTTP socket. A new instance of the\nback-end Handler is passed along so it can be used on each  Payload .  fun ref connected(\n  listen: TCPListener ref)\n: TCPConnectionNotify iso^", 
            "title": "connected"
        }, 
        {
            "location": "/net-http-_ServerListener/#parameters_4", 
            "text": "listen:  TCPListener  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerListener/#returns_4", 
            "text": "TCPConnectionNotify  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnection/", 
            "text": "_ServerConnection\n\n\nManages a stream of requests coming into a server from a single client,\ndispatches those request to a back-end, and returns the responses back\nto the client.\n\n\nactor tag _ServerConnection is\n  HTTPSession tag\n\n\n\n\nImplements\n\n\n\n\nHTTPSession\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  handlermaker: HandlerFactory val,\n  logger: Logger val,\n  conn: TCPConnection tag,\n  client_ip: String val)\n: _ServerConnection tag^\n\n\n\n\nParameters\n\n\n\n\nhandlermaker: \nHandlerFactory\n val\n\n\nlogger: \nLogger\n val\n\n\nconn: \nTCPConnection\n tag\n\n\nclient_ip: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n_ServerConnection\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\ndispose\n\n\nClose the connection from the server end.\n\n\nbe dispose()\n\n\n\n\n\n\ncancel\n\n\nCancel the current response. The connection has closed.\n\n\nbe cancel(\n  msg: Payload val)\n\n\n\n\nParameters\n\n\n\n\nmsg: \nPayload\n val\n\n\n\n\n\n\napply\n\n\nInitiate transmission of the HTTP Response message for the current\nRequest.\n\n\nbe apply(\n  response: Payload val)\n\n\n\n\nParameters\n\n\n\n\nresponse: \nPayload\n val\n\n\n\n\n\n\nwrite\n\n\nWrite low level outbound raw byte stream.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nfinish\n\n\nWe are done sending a response. We can close the connection if\n\nkeepalive\n was not requested.\n\n\nbe finish()\n\n\n\n\n\n\nthrottled\n\n\nTCP connection can not accept data for a while.\n\n\nbe throttled()\n\n\n\n\n\n\nunthrottled\n\n\nTCP connection can not accept data for a while.\n\n\nbe unthrottled()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_deliver\n\n\nDispatch requests. At the time this behavior is called for StreamTransfer\nand ChunkTransfer encodings, only the headers of the request may have\nbeen received. Receiving and dealing with the body, which could be\nquite large in POST methods, is up to the chosen application handler.\n\n\nThe client can send several requests without waiting for a response,\nbut they are only passed to the back end one at a time. Only when all\nof the response to a processed request has been sent is the next request\nprocessed.\n\n\nbe _deliver(\n  request: Payload val)\n\n\n\n\nParameters\n\n\n\n\nrequest: \nPayload\n val\n\n\n\n\n\n\n_chunk\n\n\nReceive some \nrequest\n body data, which we pass on to the handler.\n\n\nbe _chunk(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\n_finish\n\n\nInidcates that the last \ninbound\n body chunk has been sent to\n\n_chunk\n. This is passed on to the back end.\n\n\nbe _finish()\n\n\n\n\n\n\n_closed\n\n\nbe _closed()\n\n\n\n\n\n\n_mute\n\n\nbe _mute()\n\n\n\n\n\n\n_unmute\n\n\nbe _unmute()\n\n\n\n\n\n\nPrivate Functions\n\n\n_dispatch_pending\n\n\nIf we have pending requests, dispatch the next one.\n\n\nfun ref _dispatch_pending()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_send\n\n\nSend a single response.\n\n\nfun ref _send(\n  response: Payload val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nresponse: \nPayload\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor _ServerConnection"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_serverconnection", 
            "text": "Manages a stream of requests coming into a server from a single client,\ndispatches those request to a back-end, and returns the responses back\nto the client.  actor tag _ServerConnection is\n  HTTPSession tag", 
            "title": "_ServerConnection"
        }, 
        {
            "location": "/net-http-_ServerConnection/#implements", 
            "text": "HTTPSession  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_ServerConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ServerConnection/#create", 
            "text": "new tag create(\n  handlermaker: HandlerFactory val,\n  logger: Logger val,\n  conn: TCPConnection tag,\n  client_ip: String val)\n: _ServerConnection tag^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters", 
            "text": "handlermaker:  HandlerFactory  val  logger:  Logger  val  conn:  TCPConnection  tag  client_ip:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#returns", 
            "text": "_ServerConnection  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnection/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-_ServerConnection/#dispose", 
            "text": "Close the connection from the server end.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-http-_ServerConnection/#cancel", 
            "text": "Cancel the current response. The connection has closed.  be cancel(\n  msg: Payload val)", 
            "title": "cancel"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters_1", 
            "text": "msg:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#apply", 
            "text": "Initiate transmission of the HTTP Response message for the current\nRequest.  be apply(\n  response: Payload val)", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters_2", 
            "text": "response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#write", 
            "text": "Write low level outbound raw byte stream.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters_3", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#finish", 
            "text": "We are done sending a response. We can close the connection if keepalive  was not requested.  be finish()", 
            "title": "finish"
        }, 
        {
            "location": "/net-http-_ServerConnection/#throttled", 
            "text": "TCP connection can not accept data for a while.  be throttled()", 
            "title": "throttled"
        }, 
        {
            "location": "/net-http-_ServerConnection/#unthrottled", 
            "text": "TCP connection can not accept data for a while.  be unthrottled()", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-http-_ServerConnection/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_deliver", 
            "text": "Dispatch requests. At the time this behavior is called for StreamTransfer\nand ChunkTransfer encodings, only the headers of the request may have\nbeen received. Receiving and dealing with the body, which could be\nquite large in POST methods, is up to the chosen application handler.  The client can send several requests without waiting for a response,\nbut they are only passed to the back end one at a time. Only when all\nof the response to a processed request has been sent is the next request\nprocessed.  be _deliver(\n  request: Payload val)", 
            "title": "_deliver"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters_4", 
            "text": "request:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_chunk", 
            "text": "Receive some  request  body data, which we pass on to the handler.  be _chunk(\n  data: (String val | Array[U8 val] val))", 
            "title": "_chunk"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters_5", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_finish", 
            "text": "Inidcates that the last  inbound  body chunk has been sent to _chunk . This is passed on to the back end.  be _finish()", 
            "title": "_finish"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_closed", 
            "text": "be _closed()", 
            "title": "_closed"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_mute", 
            "text": "be _mute()", 
            "title": "_mute"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_unmute", 
            "text": "be _unmute()", 
            "title": "_unmute"
        }, 
        {
            "location": "/net-http-_ServerConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_dispatch_pending", 
            "text": "If we have pending requests, dispatch the next one.  fun ref _dispatch_pending()\n: None val", 
            "title": "_dispatch_pending"
        }, 
        {
            "location": "/net-http-_ServerConnection/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnection/#_send", 
            "text": "Send a single response.  fun ref _send(\n  response: Payload val)\n: None val", 
            "title": "_send"
        }, 
        {
            "location": "/net-http-_ServerConnection/#parameters_6", 
            "text": "response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnection/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/", 
            "text": "_ServerConnHandler\n\n\nThis is the network notification handler for the server. It uses\n\nPayloadBuilder\n to assemble request \nPayload\n objects using received\nchunks of data. Functions in this class execute within the\n\nTCPConnection\n actor.\n\n\nclass ref _ServerConnHandler is\n  TCPConnectionNotify ref\n\n\n\n\nImplements\n\n\n\n\nTCPConnectionNotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  handlermaker: HandlerFactory val,\n  logger: Logger val,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val),\n  registry: HTTPServer tag)\n: _ServerConnHandler iso^\n\n\n\n\nParameters\n\n\n\n\nhandlermaker: \nHandlerFactory\n val\n\n\nlogger: \nLogger\n val\n\n\nreversedns: (\nAmbientAuth\n val | \nNetAuth\n val | \nDNSAuth\n val | \n    \nNone\n val)\n\n\nregistry: \nHTTPServer\n tag\n\n\n\n\nReturns\n\n\n\n\n_ServerConnHandler\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\naccepted\n\n\nAccept the incoming TCP connection and create the actor that will\nmanage further communication, and the message parser that feeds it.\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreceived\n\n\nPass chunks of data to the \nHTTPParser\n for this session. It will\nthen pass completed information on the the \nHTTPSession\n.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nthrottled\n\n\nNotification that the TCP connection to the client can not accept data\nfor a while.\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\n\nNotification that the TCP connection can resume accepting data.\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nThe connection has been closed. Abort the session.\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\n\nThe connect has failed. TODO: is it a case for server-side?\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nauth_failed\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nexpect\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "class _ServerConnHandler"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#_serverconnhandler", 
            "text": "This is the network notification handler for the server. It uses PayloadBuilder  to assemble request  Payload  objects using received\nchunks of data. Functions in this class execute within the TCPConnection  actor.  class ref _ServerConnHandler is\n  TCPConnectionNotify ref", 
            "title": "_ServerConnHandler"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#implements", 
            "text": "TCPConnectionNotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#create", 
            "text": "new iso create(\n  handlermaker: HandlerFactory val,\n  logger: Logger val,\n  reversedns: (AmbientAuth val | NetAuth val | DNSAuth val | \n    None val),\n  registry: HTTPServer tag)\n: _ServerConnHandler iso^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters", 
            "text": "handlermaker:  HandlerFactory  val  logger:  Logger  val  reversedns: ( AmbientAuth  val |  NetAuth  val |  DNSAuth  val | \n     None  val)  registry:  HTTPServer  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns", 
            "text": "_ServerConnHandler  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#accepted", 
            "text": "Accept the incoming TCP connection and create the actor that will\nmanage further communication, and the message parser that feeds it.  fun ref accepted(\n  conn: TCPConnection ref)\n: None val", 
            "title": "accepted"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_1", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#received", 
            "text": "Pass chunks of data to the  HTTPParser  for this session. It will\nthen pass completed information on the the  HTTPSession .  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val", 
            "title": "received"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_2", 
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#throttled", 
            "text": "Notification that the TCP connection to the client can not accept data\nfor a while.  fun ref throttled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "throttled"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_3", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#unthrottled", 
            "text": "Notification that the TCP connection can resume accepting data.  fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_4", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#closed", 
            "text": "The connection has been closed. Abort the session.  fun ref closed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_5", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#connect_failed", 
            "text": "The connect has failed. TODO: is it a case for server-side?  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connect_failed"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_6", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#connecting", 
            "text": "fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val", 
            "title": "connecting"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_7", 
            "text": "conn:  TCPConnection  ref  count:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#connected", 
            "text": "fun ref connected(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connected"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_8", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#auth_failed", 
            "text": "fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "auth_failed"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_9", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#sent", 
            "text": "fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)", 
            "title": "sent"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_10", 
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_10", 
            "text": "( String  val |  Array [ U8  val] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#sentv", 
            "text": "fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val", 
            "title": "sentv"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_11", 
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_11", 
            "text": "ByteSeqIter  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#expect", 
            "text": "fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val", 
            "title": "expect"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#parameters_12", 
            "text": "conn:  TCPConnection  ref  qty:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ServerConnHandler/#returns_12", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectRequest/", 
            "text": "_ExpectRequest\n\n\nprimitive val _ExpectRequest\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectRequest val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectRequest\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectRequest val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectRequest\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectRequest val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectRequest\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectRequest"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#_expectrequest", 
            "text": "primitive val _ExpectRequest", 
            "title": "_ExpectRequest"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#create", 
            "text": "new val create()\n: _ExpectRequest val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#returns", 
            "text": "_ExpectRequest  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#eq", 
            "text": "fun box eq(\n  that: _ExpectRequest val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#parameters", 
            "text": "that:  _ExpectRequest  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#ne", 
            "text": "fun box ne(\n  that: _ExpectRequest val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#parameters_1", 
            "text": "that:  _ExpectRequest  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectRequest/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectResponse/", 
            "text": "_ExpectResponse\n\n\nprimitive val _ExpectResponse\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectResponse val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectResponse\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectResponse val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectResponse\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectResponse val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectResponse\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectResponse"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#_expectresponse", 
            "text": "primitive val _ExpectResponse", 
            "title": "_ExpectResponse"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#create", 
            "text": "new val create()\n: _ExpectResponse val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#returns", 
            "text": "_ExpectResponse  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#eq", 
            "text": "fun box eq(\n  that: _ExpectResponse val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#parameters", 
            "text": "that:  _ExpectResponse  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#ne", 
            "text": "fun box ne(\n  that: _ExpectResponse val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#parameters_1", 
            "text": "that:  _ExpectResponse  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectResponse/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/", 
            "text": "_ExpectHeaders\n\n\nprimitive val _ExpectHeaders\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectHeaders val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectHeaders\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectHeaders val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectHeaders\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectHeaders val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectHeaders\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectHeaders"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#_expectheaders", 
            "text": "primitive val _ExpectHeaders", 
            "title": "_ExpectHeaders"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#create", 
            "text": "new val create()\n: _ExpectHeaders val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#returns", 
            "text": "_ExpectHeaders  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#eq", 
            "text": "fun box eq(\n  that: _ExpectHeaders val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#parameters", 
            "text": "that:  _ExpectHeaders  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#ne", 
            "text": "fun box ne(\n  that: _ExpectHeaders val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#parameters_1", 
            "text": "that:  _ExpectHeaders  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectHeaders/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/", 
            "text": "_ExpectContentLength\n\n\nprimitive val _ExpectContentLength\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectContentLength val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectContentLength\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectContentLength val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectContentLength\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectContentLength val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectContentLength\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectContentLength"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#_expectcontentlength", 
            "text": "primitive val _ExpectContentLength", 
            "title": "_ExpectContentLength"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#create", 
            "text": "new val create()\n: _ExpectContentLength val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#returns", 
            "text": "_ExpectContentLength  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#eq", 
            "text": "fun box eq(\n  that: _ExpectContentLength val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#parameters", 
            "text": "that:  _ExpectContentLength  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#ne", 
            "text": "fun box ne(\n  that: _ExpectContentLength val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#parameters_1", 
            "text": "that:  _ExpectContentLength  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectContentLength/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/", 
            "text": "_ExpectChunkStart\n\n\nprimitive val _ExpectChunkStart\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectChunkStart val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectChunkStart\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectChunkStart val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectChunkStart\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectChunkStart val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectChunkStart\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectChunkStart"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#_expectchunkstart", 
            "text": "primitive val _ExpectChunkStart", 
            "title": "_ExpectChunkStart"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#create", 
            "text": "new val create()\n: _ExpectChunkStart val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#returns", 
            "text": "_ExpectChunkStart  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#eq", 
            "text": "fun box eq(\n  that: _ExpectChunkStart val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#parameters", 
            "text": "that:  _ExpectChunkStart  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#ne", 
            "text": "fun box ne(\n  that: _ExpectChunkStart val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#parameters_1", 
            "text": "that:  _ExpectChunkStart  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectChunkStart/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunk/", 
            "text": "_ExpectChunk\n\n\nprimitive val _ExpectChunk\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectChunk val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectChunk\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectChunk val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectChunk\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectChunk val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectChunk\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectChunk"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#_expectchunk", 
            "text": "primitive val _ExpectChunk", 
            "title": "_ExpectChunk"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#create", 
            "text": "new val create()\n: _ExpectChunk val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#returns", 
            "text": "_ExpectChunk  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#eq", 
            "text": "fun box eq(\n  that: _ExpectChunk val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#parameters", 
            "text": "that:  _ExpectChunk  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#ne", 
            "text": "fun box ne(\n  that: _ExpectChunk val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#parameters_1", 
            "text": "that:  _ExpectChunk  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectChunk/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/", 
            "text": "_ExpectChunkEnd\n\n\nprimitive val _ExpectChunkEnd\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectChunkEnd val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectChunkEnd\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectChunkEnd val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectChunkEnd\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectChunkEnd val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectChunkEnd\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectChunkEnd"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#_expectchunkend", 
            "text": "primitive val _ExpectChunkEnd", 
            "title": "_ExpectChunkEnd"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#create", 
            "text": "new val create()\n: _ExpectChunkEnd val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#returns", 
            "text": "_ExpectChunkEnd  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#eq", 
            "text": "fun box eq(\n  that: _ExpectChunkEnd val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#parameters", 
            "text": "that:  _ExpectChunkEnd  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#ne", 
            "text": "fun box ne(\n  that: _ExpectChunkEnd val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#parameters_1", 
            "text": "that:  _ExpectChunkEnd  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectChunkEnd/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectBody/", 
            "text": "_ExpectBody\n\n\nprimitive val _ExpectBody\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectBody val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectBody\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectBody val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectBody\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectBody val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectBody\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectBody"
        }, 
        {
            "location": "/net-http-_ExpectBody/#_expectbody", 
            "text": "primitive val _ExpectBody", 
            "title": "_ExpectBody"
        }, 
        {
            "location": "/net-http-_ExpectBody/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectBody/#create", 
            "text": "new val create()\n: _ExpectBody val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectBody/#returns", 
            "text": "_ExpectBody  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectBody/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectBody/#eq", 
            "text": "fun box eq(\n  that: _ExpectBody val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectBody/#parameters", 
            "text": "that:  _ExpectBody  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectBody/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectBody/#ne", 
            "text": "fun box ne(\n  that: _ExpectBody val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectBody/#parameters_1", 
            "text": "that:  _ExpectBody  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectBody/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectReady/", 
            "text": "_ExpectReady\n\n\nprimitive val _ExpectReady\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectReady val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectReady\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectReady val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectReady\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectReady val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectReady\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectReady"
        }, 
        {
            "location": "/net-http-_ExpectReady/#_expectready", 
            "text": "primitive val _ExpectReady", 
            "title": "_ExpectReady"
        }, 
        {
            "location": "/net-http-_ExpectReady/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectReady/#create", 
            "text": "new val create()\n: _ExpectReady val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectReady/#returns", 
            "text": "_ExpectReady  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectReady/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectReady/#eq", 
            "text": "fun box eq(\n  that: _ExpectReady val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectReady/#parameters", 
            "text": "that:  _ExpectReady  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectReady/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectReady/#ne", 
            "text": "fun box ne(\n  that: _ExpectReady val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectReady/#parameters_1", 
            "text": "that:  _ExpectReady  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectReady/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectError/", 
            "text": "_ExpectError\n\n\nprimitive val _ExpectError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ExpectError val^\n\n\n\n\nReturns\n\n\n\n\n_ExpectError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ExpectError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ExpectError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ExpectError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ExpectError"
        }, 
        {
            "location": "/net-http-_ExpectError/#_expecterror", 
            "text": "primitive val _ExpectError", 
            "title": "_ExpectError"
        }, 
        {
            "location": "/net-http-_ExpectError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ExpectError/#create", 
            "text": "new val create()\n: _ExpectError val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ExpectError/#returns", 
            "text": "_ExpectError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ExpectError/#eq", 
            "text": "fun box eq(\n  that: _ExpectError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ExpectError/#parameters", 
            "text": "that:  _ExpectError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ExpectError/#ne", 
            "text": "fun box ne(\n  that: _ExpectError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ExpectError/#parameters_1", 
            "text": "that:  _ExpectError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ExpectError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_PayloadState/", 
            "text": "_PayloadState\n\n\ntype _PayloadState is\n  (_ExpectRequest val | _ExpectResponse val | _ExpectHeaders val | _ExpectContentLength val | _ExpectChunkStart val | _ExpectChunk val | _ExpectChunkEnd val | _ExpectBody val | _ExpectReady val | _ExpectError val)\n\n\n\n\nType Alias For\n\n\n\n\n(\n_ExpectRequest\n val | \n_ExpectResponse\n val | \n_ExpectHeaders\n val | \n_ExpectContentLength\n val | \n_ExpectChunkStart\n val | \n_ExpectChunk\n val | \n_ExpectChunkEnd\n val | \n_ExpectBody\n val | \n_ExpectReady\n val | \n_ExpectError\n val)", 
            "title": "type _PayloadState"
        }, 
        {
            "location": "/net-http-_PayloadState/#_payloadstate", 
            "text": "type _PayloadState is\n  (_ExpectRequest val | _ExpectResponse val | _ExpectHeaders val | _ExpectContentLength val | _ExpectChunkStart val | _ExpectChunk val | _ExpectChunkEnd val | _ExpectBody val | _ExpectReady val | _ExpectError val)", 
            "title": "_PayloadState"
        }, 
        {
            "location": "/net-http-_PayloadState/#type-alias-for", 
            "text": "( _ExpectRequest  val |  _ExpectResponse  val |  _ExpectHeaders  val |  _ExpectContentLength  val |  _ExpectChunkStart  val |  _ExpectChunk  val |  _ExpectChunkEnd  val |  _ExpectBody  val |  _ExpectReady  val |  _ExpectError  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-http-_HTTPParser/", 
            "text": "_HTTPParser\n\n\nThis is the HTTP parser that builds a message \nPayload\n object\nrepresenting either a Request or a Response from received chunks of data.\n\n\nclass ref _HTTPParser\n\n\n\n\nConstructors\n\n\nrequest\n\n\nnew ref request(\n  session': HTTPSession tag)\n: _HTTPParser ref^\n\n\n\n\nParameters\n\n\n\n\nsession': \nHTTPSession\n tag\n\n\n\n\nReturns\n\n\n\n\n_HTTPParser\n ref^\n\n\n\n\n\n\nresponse\n\n\nnew ref response(\n  session': HTTPSession tag)\n: _HTTPParser ref^\n\n\n\n\nParameters\n\n\n\n\nsession': \nHTTPSession\n tag\n\n\n\n\nReturns\n\n\n\n\n_HTTPParser\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nparse\n\n\nAnalyze new data based on the parser's current internal state.\n\n\nfun ref parse(\n  buffer: Reader ref)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nclosed\n\n\nThe connection has closed, which may signal that all remaining data is the\npayload body.\n\n\nfun ref closed(\n  buffer: Reader ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_deliver\n\n\nThe parser is finished with the message headers so we can push it\nto the \nHTTPSession\n. The body may come later.\n\n\nfun ref _deliver()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_restart\n\n\nRestart parser state for the next message. It will be of the same\nkind as the last one.\n\n\nfun ref _restart()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_parse_request\n\n\nLook for \"\n \n \n\", the first line of an HTTP\n'request' message.\n\n\nfun ref _parse_request(\n  buffer: Reader ref)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_parse_response\n\n\nLook for \"\n \n \n\", the first line of an\nHTTP 'response' message.\n\n\nfun ref _parse_response(\n  buffer: Reader ref)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_parse_headers\n\n\nLook for: \"\n:\n\" or the empty line that marks the end of\nall the headers.\n\n\nfun ref _parse_headers(\n  buffer: Reader ref)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_process_header\n\n\nSave a header value. Raise an error on not finding the colon\nor can't interpret the value.\n\n\nfun ref _process_header(\n  line: String val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nline: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_setauth\n\n\nFill in username and password from an authentication header.\n\n\nfun ref _setauth(\n  auth: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nauth: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_set_header_end\n\n\nLine size is zero, so we have reached the end of the headers.\nCertain status codes mean there is no body.\n\n\nfun ref _set_header_end()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_parse_content_length\n\n\nLook for \n_expected_length\n bytes set by having seen a \nContent-Length\n\nheader. We may not see it all at once but we process the lesser of\nwhat we need and what is available in the buffer.\n\n\nfun ref _parse_content_length(\n  buffer: Reader ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_parse_chunk_start\n\n\nLook for the beginning of a chunk, which is a length in hex on a line\nterminated by CRLF. An explicit length of zero marks the end of\nthe entire chunked message body.\n\n\nfun ref _parse_chunk_start(\n  buffer: Reader ref)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_parse_chunk\n\n\nLook for a chunk of the size set by \n_parse_chunk_start\n. We may\nnot see it all at once but we process the lesser of what we need\nand what is available in the buffer. ChunkedTransfer mode always\ndelivers directly to the HTTPSession handler.\n\n\nfun ref _parse_chunk(\n  buffer: Reader ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_parse_chunk_end\n\n\nLook for the CRLF that ends every chunk. AFter that we look for\nthe next chunk, or that was the special ending chunk.\n\n\nfun ref _parse_chunk_end(\n  buffer: Reader ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nbuffer: \nReader\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class _HTTPParser"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_httpparser", 
            "text": "This is the HTTP parser that builds a message  Payload  object\nrepresenting either a Request or a Response from received chunks of data.  class ref _HTTPParser", 
            "title": "_HTTPParser"
        }, 
        {
            "location": "/net-http-_HTTPParser/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_HTTPParser/#request", 
            "text": "new ref request(\n  session': HTTPSession tag)\n: _HTTPParser ref^", 
            "title": "request"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters", 
            "text": "session':  HTTPSession  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns", 
            "text": "_HTTPParser  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#response", 
            "text": "new ref response(\n  session': HTTPSession tag)\n: _HTTPParser ref^", 
            "title": "response"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_1", 
            "text": "session':  HTTPSession  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_1", 
            "text": "_HTTPParser  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parse", 
            "text": "Analyze new data based on the parser's current internal state.  fun ref parse(\n  buffer: Reader ref)\n: None val ?", 
            "title": "parse"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_2", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_2", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#closed", 
            "text": "The connection has closed, which may signal that all remaining data is the\npayload body.  fun ref closed(\n  buffer: Reader ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_3", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_deliver", 
            "text": "The parser is finished with the message headers so we can push it\nto the  HTTPSession . The body may come later.  fun ref _deliver()\n: None val", 
            "title": "_deliver"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_restart", 
            "text": "Restart parser state for the next message. It will be of the same\nkind as the last one.  fun ref _restart()\n: None val", 
            "title": "_restart"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_request", 
            "text": "Look for \"     \", the first line of an HTTP\n'request' message.  fun ref _parse_request(\n  buffer: Reader ref)\n: None val ?", 
            "title": "_parse_request"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_4", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_6", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_response", 
            "text": "Look for \"     \", the first line of an\nHTTP 'response' message.  fun ref _parse_response(\n  buffer: Reader ref)\n: None val ?", 
            "title": "_parse_response"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_5", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_7", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_headers", 
            "text": "Look for: \" : \" or the empty line that marks the end of\nall the headers.  fun ref _parse_headers(\n  buffer: Reader ref)\n: None val ?", 
            "title": "_parse_headers"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_6", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_8", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_process_header", 
            "text": "Save a header value. Raise an error on not finding the colon\nor can't interpret the value.  fun ref _process_header(\n  line: String val)\n: None val ?", 
            "title": "_process_header"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_7", 
            "text": "line:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_9", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_setauth", 
            "text": "Fill in username and password from an authentication header.  fun ref _setauth(\n  auth: String val)\n: None val", 
            "title": "_setauth"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_8", 
            "text": "auth:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_set_header_end", 
            "text": "Line size is zero, so we have reached the end of the headers.\nCertain status codes mean there is no body.  fun ref _set_header_end()\n: None val", 
            "title": "_set_header_end"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_content_length", 
            "text": "Look for  _expected_length  bytes set by having seen a  Content-Length \nheader. We may not see it all at once but we process the lesser of\nwhat we need and what is available in the buffer.  fun ref _parse_content_length(\n  buffer: Reader ref)\n: None val", 
            "title": "_parse_content_length"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_9", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_chunk_start", 
            "text": "Look for the beginning of a chunk, which is a length in hex on a line\nterminated by CRLF. An explicit length of zero marks the end of\nthe entire chunked message body.  fun ref _parse_chunk_start(\n  buffer: Reader ref)\n: None val ?", 
            "title": "_parse_chunk_start"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_10", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_13", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_chunk", 
            "text": "Look for a chunk of the size set by  _parse_chunk_start . We may\nnot see it all at once but we process the lesser of what we need\nand what is available in the buffer. ChunkedTransfer mode always\ndelivers directly to the HTTPSession handler.  fun ref _parse_chunk(\n  buffer: Reader ref)\n: None val", 
            "title": "_parse_chunk"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_11", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HTTPParser/#_parse_chunk_end", 
            "text": "Look for the CRLF that ends every chunk. AFter that we look for\nthe next chunk, or that was the special ending chunk.  fun ref _parse_chunk_end(\n  buffer: Reader ref)\n: None val", 
            "title": "_parse_chunk_end"
        }, 
        {
            "location": "/net-http-_HTTPParser/#parameters_12", 
            "text": "buffer:  Reader  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HTTPParser/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HostService/", 
            "text": "_HostService\n\n\nclass val _HostService is\n  Hashable ref,\n  Equatable[_HostService val] ref\n\n\n\n\nImplements\n\n\n\n\nHashable\n ref\n\n\nEquatable\n[\n_HostService\n val] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  scheme': String val,\n  host': String val,\n  service': String val)\n: _HostService val^\n\n\n\n\nParameters\n\n\n\n\nscheme': \nString\n val\n\n\nhost': \nString\n val\n\n\nservice': \nString\n val\n\n\n\n\nReturns\n\n\n\n\n_HostService\n val^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet scheme: \nString\n val\n\n\n\n\n\n\n\n\nlet host: \nString\n val\n\n\n\n\n\n\n\n\nlet service: \nString\n val\n\n\n\n\n\n\nPublic Functions\n\n\nhash\n\n\nfun box hash()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _HostService box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_HostService\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _HostService val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_HostService\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class _HostService"
        }, 
        {
            "location": "/net-http-_HostService/#_hostservice", 
            "text": "class val _HostService is\n  Hashable ref,\n  Equatable[_HostService val] ref", 
            "title": "_HostService"
        }, 
        {
            "location": "/net-http-_HostService/#implements", 
            "text": "Hashable  ref  Equatable [ _HostService  val] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_HostService/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_HostService/#create", 
            "text": "new val create(\n  scheme': String val,\n  host': String val,\n  service': String val)\n: _HostService val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_HostService/#parameters", 
            "text": "scheme':  String  val  host':  String  val  service':  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HostService/#returns", 
            "text": "_HostService  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HostService/#public-fields", 
            "text": "let scheme:  String  val     let host:  String  val     let service:  String  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/net-http-_HostService/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_HostService/#hash", 
            "text": "fun box hash()\n: U64 val", 
            "title": "hash"
        }, 
        {
            "location": "/net-http-_HostService/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HostService/#eq", 
            "text": "fun box eq(\n  that: _HostService box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_HostService/#parameters_1", 
            "text": "that:  _HostService  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HostService/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_HostService/#ne", 
            "text": "fun box ne(\n  that: _HostService val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_HostService/#parameters_2", 
            "text": "that:  _HostService  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_HostService/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ConnConnecting/", 
            "text": "_ConnConnecting\n\n\nprimitive val _ConnConnecting\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ConnConnecting val^\n\n\n\n\nReturns\n\n\n\n\n_ConnConnecting\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _ConnConnecting val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ConnConnecting\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ConnConnecting val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ConnConnecting\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ConnConnecting"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#_connconnecting", 
            "text": "primitive val _ConnConnecting", 
            "title": "_ConnConnecting"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#create", 
            "text": "new val create()\n: _ConnConnecting val^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#returns", 
            "text": "_ConnConnecting  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#eq", 
            "text": "fun box eq(\n  that: _ConnConnecting val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#parameters", 
            "text": "that:  _ConnConnecting  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#ne", 
            "text": "fun box ne(\n  that: _ConnConnecting val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#parameters_1", 
            "text": "that:  _ConnConnecting  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ConnConnecting/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnection/", 
            "text": "_ClientConnection\n\n\nManages a persistent and possibly pipelined TCP connection to an HTTP server.\n\n\nThis is where pipelining happens, if it has been enabled by the \nClient\n.\nOnly \"safe\" requests (GET, HEAD, OPTIONS) are sent to the server if\n\nany\n responses are still pending.\n\n\nThe \nHTTPHandler.send_body\n notification function will be called if/when\nthe \nHTTPSession\n is ready to receive body data for \nPOST\n operations in\ntransfer modes other than \nOneshot\n.\n\n\nReceiving Responses\n\n\nReception is handled through an \nHTTPHandler\n instance.\n\nHTTPHandler.apply\n signals the arrival of a message with headers.\nHow the body data is obtained depends on the \ntransfer\n mode.\n\n\n\n\n\n\nFor \nStreamTranfer\n and \nChunkedTransfer\n modes, there will be\nany number of \nHTTPHandler.chunk\n notifications, followed by\nan \nHTTPHandler.finished\n notification.\n\n\n\n\n\n\nFor \nOneShotTransfer\n mode, the client application just needs to\ncall \nPayload.body\n once to get the entire body.\n\n\n\n\n\n\nThe HandlerFactory\n\n\nThe \nClient\n class will try to re-use sessions. If it needs to create\na new session, based on the request URL, it will do that, and then it\nwill need a new instance of the caller's \nHTTPHandler\n class.\nSince the client application code does not know in advance when this\n will be necessary, it passes in a \nHandlerFactory\n that creates the\nactual \nHTTPHandler\n, customized\nfor the client application's needs.\n\n\nactor tag _ClientConnection is\n  HTTPSession tag\n\n\n\n\nImplements\n\n\n\n\nHTTPSession\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  host: String val,\n  service: String val,\n  sslctx: (SSLContext val | None val) = seq,\n  pipeline: Bool val = seq,\n  handlermaker: HandlerFactory val)\n: _ClientConnection tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nNetAuth\n val | \nTCPAuth\n val | \n    \nTCPConnectAuth\n val)\n\n\nhost: \nString\n val\n\n\nservice: \nString\n val\n\n\nsslctx: (\nSSLContext\n val | \nNone\n val) = seq\n\n\npipeline: \nBool\n val = seq\n\n\nhandlermaker: \nHandlerFactory\n val\n\n\n\n\nReturns\n\n\n\n\n_ClientConnection\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nSchedule a request to be sent by adding it to the \nunsent\n queue\nfor this session.\n\n\nbe apply(\n  request: Payload val)\n\n\n\n\nParameters\n\n\n\n\nrequest: \nPayload\n val\n\n\n\n\n\n\ncancel\n\n\nCancel a request.\n\n\nbe cancel(\n  request: Payload val)\n\n\n\n\nParameters\n\n\n\n\nrequest: \nPayload\n val\n\n\n\n\n\n\nwrite\n\n\nWrite a low-level byte stream. The \nPayload\n objects call this to\ngenerate their wire representation.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nfinish\n\n\nWe are done sending a request with a long body.\n\n\nbe finish()\n\n\n\n\n\n\ndispose\n\n\nCancels all requests and disposes the tcp connection.\n\n\nbe dispose()\n\n\n\n\n\n\nthrottled\n\n\nThe connection to the server can not accept data for a while.\nWe set a local flag too so we do not send anything on the queue.\n\n\nbe throttled()\n\n\n\n\n\n\nunthrottled\n\n\nThe connection to the server can now accept more data.\n\n\nbe unthrottled()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_deliver\n\n\nDeal with a new Response coming back from the server.\n\n\nSince the session operates in a FIFO manner, the Request corresponding\nto this Response is the oldest one on the \n_sent\n list. We take it\noff that list and call its handler. It becomes the 'currently being\ndelivered' response and subsequent body data has to go there as well,\nif there is any.\n\n\nbe _deliver(\n  response: Payload val)\n\n\n\n\nParameters\n\n\n\n\nresponse: \nPayload\n val\n\n\n\n\n\n\n_connected\n\n\nThe connection to the server has been established. Send pending requests.\n\n\nbe _connected(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_connect_failed\n\n\nThe connection couldn't be established. Cancel all pending requests.\n\n\nbe _connect_failed(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_auth_failed\n\n\nThe connection couldn't be authenticated. Cancel all pending requests.\n\n\nbe _auth_failed(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_closed\n\n\nThe connection to the server has closed prematurely. Cancel everything.\n\n\nbe _closed(\n  conn: TCPConnection tag)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n tag\n\n\n\n\n\n\n_chunk\n\n\nCalled when \ninbound\n body data has arrived for the currently\ninbound \nPayload\n. This should be passed directly to the application's\n\nHTTPHandler.chunk\n method.\n\n\nbe _chunk(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\n_finish\n\n\nIndicates that the last \ninbound\n body chunk has been sent to\n\n_chunk\n. This is passed on to the front end.\n\n\n_send_pending is called to detect that _unsent and _sent are emptye\nand that _conn can be disposed. \n\n\nbe _finish()\n\n\n\n\n\n\n_mute\n\n\nThe application can not handle any more data for a while.\n\n\nbe _mute()\n\n\n\n\n\n\n_unmute\n\n\nThe application can accept more data.\n\n\nbe _unmute()\n\n\n\n\n\n\nPrivate Functions\n\n\n_send_pending\n\n\nSend pending requests to the server. If the connection is closed,\nopen it. If we have nothing to send and we aren't waiting on any\nresponses, close the connection.\n\n\nfun ref _send_pending()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_new_conn\n\n\nCreates a new connection. \nResponseBuilder\n is the notification class\nthat will send back a \n_connected\n call when the connection has been made.\n\n\nfun ref _new_conn()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_cancel_all\n\n\nCancel all pending requests.\n\n\nfun ref _cancel_all()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor _ClientConnection"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_clientconnection", 
            "text": "Manages a persistent and possibly pipelined TCP connection to an HTTP server.  This is where pipelining happens, if it has been enabled by the  Client .\nOnly \"safe\" requests (GET, HEAD, OPTIONS) are sent to the server if any  responses are still pending.  The  HTTPHandler.send_body  notification function will be called if/when\nthe  HTTPSession  is ready to receive body data for  POST  operations in\ntransfer modes other than  Oneshot .", 
            "title": "_ClientConnection"
        }, 
        {
            "location": "/net-http-_ClientConnection/#receiving-responses", 
            "text": "Reception is handled through an  HTTPHandler  instance. HTTPHandler.apply  signals the arrival of a message with headers.\nHow the body data is obtained depends on the  transfer  mode.    For  StreamTranfer  and  ChunkedTransfer  modes, there will be\nany number of  HTTPHandler.chunk  notifications, followed by\nan  HTTPHandler.finished  notification.    For  OneShotTransfer  mode, the client application just needs to\ncall  Payload.body  once to get the entire body.", 
            "title": "Receiving Responses"
        }, 
        {
            "location": "/net-http-_ClientConnection/#the-handlerfactory", 
            "text": "The  Client  class will try to re-use sessions. If it needs to create\na new session, based on the request URL, it will do that, and then it\nwill need a new instance of the caller's  HTTPHandler  class.\nSince the client application code does not know in advance when this\n will be necessary, it passes in a  HandlerFactory  that creates the\nactual  HTTPHandler , customized\nfor the client application's needs.  actor tag _ClientConnection is\n  HTTPSession tag", 
            "title": "The HandlerFactory"
        }, 
        {
            "location": "/net-http-_ClientConnection/#implements", 
            "text": "HTTPSession  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_ClientConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ClientConnection/#create", 
            "text": "new tag create(\n  auth: (AmbientAuth val | NetAuth val | TCPAuth val | \n    TCPConnectAuth val),\n  host: String val,\n  service: String val,\n  sslctx: (SSLContext val | None val) = seq,\n  pipeline: Bool val = seq,\n  handlermaker: HandlerFactory val)\n: _ClientConnection tag^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters", 
            "text": "auth: ( AmbientAuth  val |  NetAuth  val |  TCPAuth  val | \n     TCPConnectAuth  val)  host:  String  val  service:  String  val  sslctx: ( SSLContext  val |  None  val) = seq  pipeline:  Bool  val = seq  handlermaker:  HandlerFactory  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#returns", 
            "text": "_ClientConnection  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnection/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/net-http-_ClientConnection/#apply", 
            "text": "Schedule a request to be sent by adding it to the  unsent  queue\nfor this session.  be apply(\n  request: Payload val)", 
            "title": "apply"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_1", 
            "text": "request:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#cancel", 
            "text": "Cancel a request.  be cancel(\n  request: Payload val)", 
            "title": "cancel"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_2", 
            "text": "request:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#write", 
            "text": "Write a low-level byte stream. The  Payload  objects call this to\ngenerate their wire representation.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_3", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#finish", 
            "text": "We are done sending a request with a long body.  be finish()", 
            "title": "finish"
        }, 
        {
            "location": "/net-http-_ClientConnection/#dispose", 
            "text": "Cancels all requests and disposes the tcp connection.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/net-http-_ClientConnection/#throttled", 
            "text": "The connection to the server can not accept data for a while.\nWe set a local flag too so we do not send anything on the queue.  be throttled()", 
            "title": "throttled"
        }, 
        {
            "location": "/net-http-_ClientConnection/#unthrottled", 
            "text": "The connection to the server can now accept more data.  be unthrottled()", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-http-_ClientConnection/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_deliver", 
            "text": "Deal with a new Response coming back from the server.  Since the session operates in a FIFO manner, the Request corresponding\nto this Response is the oldest one on the  _sent  list. We take it\noff that list and call its handler. It becomes the 'currently being\ndelivered' response and subsequent body data has to go there as well,\nif there is any.  be _deliver(\n  response: Payload val)", 
            "title": "_deliver"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_4", 
            "text": "response:  Payload  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_connected", 
            "text": "The connection to the server has been established. Send pending requests.  be _connected(\n  conn: TCPConnection tag)", 
            "title": "_connected"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_5", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_connect_failed", 
            "text": "The connection couldn't be established. Cancel all pending requests.  be _connect_failed(\n  conn: TCPConnection tag)", 
            "title": "_connect_failed"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_6", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_auth_failed", 
            "text": "The connection couldn't be authenticated. Cancel all pending requests.  be _auth_failed(\n  conn: TCPConnection tag)", 
            "title": "_auth_failed"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_7", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_closed", 
            "text": "The connection to the server has closed prematurely. Cancel everything.  be _closed(\n  conn: TCPConnection tag)", 
            "title": "_closed"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_8", 
            "text": "conn:  TCPConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_chunk", 
            "text": "Called when  inbound  body data has arrived for the currently\ninbound  Payload . This should be passed directly to the application's HTTPHandler.chunk  method.  be _chunk(\n  data: (String val | Array[U8 val] val))", 
            "title": "_chunk"
        }, 
        {
            "location": "/net-http-_ClientConnection/#parameters_9", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_finish", 
            "text": "Indicates that the last  inbound  body chunk has been sent to _chunk . This is passed on to the front end.  _send_pending is called to detect that _unsent and _sent are emptye\nand that _conn can be disposed.   be _finish()", 
            "title": "_finish"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_mute", 
            "text": "The application can not handle any more data for a while.  be _mute()", 
            "title": "_mute"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_unmute", 
            "text": "The application can accept more data.  be _unmute()", 
            "title": "_unmute"
        }, 
        {
            "location": "/net-http-_ClientConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_send_pending", 
            "text": "Send pending requests to the server. If the connection is closed,\nopen it. If we have nothing to send and we aren't waiting on any\nresponses, close the connection.  fun ref _send_pending()\n: None val", 
            "title": "_send_pending"
        }, 
        {
            "location": "/net-http-_ClientConnection/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_new_conn", 
            "text": "Creates a new connection.  ResponseBuilder  is the notification class\nthat will send back a  _connected  call when the connection has been made.  fun ref _new_conn()\n: None val", 
            "title": "_new_conn"
        }, 
        {
            "location": "/net-http-_ClientConnection/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnection/#_cancel_all", 
            "text": "Cancel all pending requests.  fun ref _cancel_all()\n: None val", 
            "title": "_cancel_all"
        }, 
        {
            "location": "/net-http-_ClientConnection/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/", 
            "text": "_ClientConnHandler\n\n\nThis is the network notification handler for the client. It passes\nreceived data to the \nHTTPParser\n to assemble response \nPayload\n objects.\n\n\nclass ref _ClientConnHandler is\n  TCPConnectionNotify ref\n\n\n\n\nImplements\n\n\n\n\nTCPConnectionNotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  client: _ClientConnection tag)\n: _ClientConnHandler iso^\n\n\n\n\nParameters\n\n\n\n\nclient: \n_ClientConnection\n tag\n\n\n\n\nReturns\n\n\n\n\n_ClientConnHandler\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\nconnected\n\n\nTell the client we have connected.\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\n\nThe connection could not be established. Tell the client not to proceed.\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nauth_failed\n\n\nSSL authentication failed. Tell the client not to proceed.\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreceived\n\n\nPass a received chunk of data to the \n_HTTPParser\n.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nclosed\n\n\nThe connection has closed, possibly prematurely.\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\n\nTCP connection wants us to stop sending. We do not do anything with\nthis here;  just pass it on to the \nHTTPSession\n.\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottle\n\n\nTCP can accept more data now. We just pass this on to the\n\nHTTPSession\n\n\nfun ref unthrottle(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\naccepted\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nexpect\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nunthrottled\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class _ClientConnHandler"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#_clientconnhandler", 
            "text": "This is the network notification handler for the client. It passes\nreceived data to the  HTTPParser  to assemble response  Payload  objects.  class ref _ClientConnHandler is\n  TCPConnectionNotify ref", 
            "title": "_ClientConnHandler"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#implements", 
            "text": "TCPConnectionNotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#create", 
            "text": "new iso create(\n  client: _ClientConnection tag)\n: _ClientConnHandler iso^", 
            "title": "create"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters", 
            "text": "client:  _ClientConnection  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns", 
            "text": "_ClientConnHandler  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#connected", 
            "text": "Tell the client we have connected.  fun ref connected(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connected"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_1", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#connect_failed", 
            "text": "The connection could not be established. Tell the client not to proceed.  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connect_failed"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_2", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#auth_failed", 
            "text": "SSL authentication failed. Tell the client not to proceed.  fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "auth_failed"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_3", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#received", 
            "text": "Pass a received chunk of data to the  _HTTPParser .  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val", 
            "title": "received"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_4", 
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#closed", 
            "text": "The connection has closed, possibly prematurely.  fun ref closed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_5", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#throttled", 
            "text": "TCP connection wants us to stop sending. We do not do anything with\nthis here;  just pass it on to the  HTTPSession .  fun ref throttled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "throttled"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_6", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#unthrottle", 
            "text": "TCP can accept more data now. We just pass this on to the HTTPSession  fun ref unthrottle(\n  conn: TCPConnection ref)\n: None val", 
            "title": "unthrottle"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_7", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#accepted", 
            "text": "fun ref accepted(\n  conn: TCPConnection ref)\n: None val", 
            "title": "accepted"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_8", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#connecting", 
            "text": "fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val", 
            "title": "connecting"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_9", 
            "text": "conn:  TCPConnection  ref  count:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#sent", 
            "text": "fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)", 
            "title": "sent"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_10", 
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_10", 
            "text": "( String  val |  Array [ U8  val] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#sentv", 
            "text": "fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val", 
            "title": "sentv"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_11", 
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_11", 
            "text": "ByteSeqIter  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#expect", 
            "text": "fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val", 
            "title": "expect"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_12", 
            "text": "conn:  TCPConnection  ref  qty:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_12", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#unthrottled", 
            "text": "fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#parameters_13", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-http-_ClientConnHandler/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl--index/", 
            "text": "No package doc string provided for net/ssl.\n\n\nPublic Types\n\n\n\n\nprimitive X509\n\n\nclass SSLContext\n\n\nclass SSLConnection\n\n\nprimitive SSLHandshake\n\n\nprimitive SSLAuthFail\n\n\nprimitive SSLReady\n\n\nprimitive SSLError\n\n\ntype SSLState\n\n\nclass SSL\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _X509Name\n\n\nprimitive _GeneralName\n\n\nprimitive _GeneralNameStack\n\n\nprimitive _SSLContext\n\n\nprimitive _SSL\n\n\nprimitive _BIO\n\n\nprimitive _SSLInit", 
            "title": "Package"
        }, 
        {
            "location": "/net-ssl--index/#public-types", 
            "text": "primitive X509  class SSLContext  class SSLConnection  primitive SSLHandshake  primitive SSLAuthFail  primitive SSLReady  primitive SSLError  type SSLState  class SSL", 
            "title": "Public Types"
        }, 
        {
            "location": "/net-ssl--index/#private-types", 
            "text": "primitive _X509Name  primitive _GeneralName  primitive _GeneralNameStack  primitive _SSLContext  primitive _SSL  primitive _BIO  primitive _SSLInit", 
            "title": "Private Types"
        }, 
        {
            "location": "/net-ssl-_X509Name/", 
            "text": "_X509Name\n\n\nprimitive val _X509Name\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _X509Name val^\n\n\n\n\nReturns\n\n\n\n\n_X509Name\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _X509Name val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_X509Name\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _X509Name val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_X509Name\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _X509Name"
        }, 
        {
            "location": "/net-ssl-_X509Name/#_x509name", 
            "text": "primitive val _X509Name", 
            "title": "_X509Name"
        }, 
        {
            "location": "/net-ssl-_X509Name/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_X509Name/#create", 
            "text": "new val create()\n: _X509Name val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_X509Name/#returns", 
            "text": "_X509Name  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_X509Name/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_X509Name/#eq", 
            "text": "fun box eq(\n  that: _X509Name val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_X509Name/#parameters", 
            "text": "that:  _X509Name  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_X509Name/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_X509Name/#ne", 
            "text": "fun box ne(\n  that: _X509Name val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_X509Name/#parameters_1", 
            "text": "that:  _X509Name  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_X509Name/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_GeneralName/", 
            "text": "_GeneralName\n\n\nprimitive val _GeneralName\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _GeneralName val^\n\n\n\n\nReturns\n\n\n\n\n_GeneralName\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _GeneralName val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_GeneralName\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _GeneralName val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_GeneralName\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _GeneralName"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#_generalname", 
            "text": "primitive val _GeneralName", 
            "title": "_GeneralName"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#create", 
            "text": "new val create()\n: _GeneralName val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#returns", 
            "text": "_GeneralName  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#eq", 
            "text": "fun box eq(\n  that: _GeneralName val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#parameters", 
            "text": "that:  _GeneralName  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#ne", 
            "text": "fun box ne(\n  that: _GeneralName val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#parameters_1", 
            "text": "that:  _GeneralName  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_GeneralName/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/", 
            "text": "_GeneralNameStack\n\n\nprimitive val _GeneralNameStack\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _GeneralNameStack val^\n\n\n\n\nReturns\n\n\n\n\n_GeneralNameStack\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _GeneralNameStack val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_GeneralNameStack\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _GeneralNameStack val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_GeneralNameStack\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _GeneralNameStack"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#_generalnamestack", 
            "text": "primitive val _GeneralNameStack", 
            "title": "_GeneralNameStack"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#create", 
            "text": "new val create()\n: _GeneralNameStack val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#returns", 
            "text": "_GeneralNameStack  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#eq", 
            "text": "fun box eq(\n  that: _GeneralNameStack val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#parameters", 
            "text": "that:  _GeneralNameStack  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#ne", 
            "text": "fun box ne(\n  that: _GeneralNameStack val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#parameters_1", 
            "text": "that:  _GeneralNameStack  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_GeneralNameStack/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/", 
            "text": "X509\n\n\nprimitive val X509\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: X509 val^\n\n\n\n\nReturns\n\n\n\n\nX509\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nvalid_for_host\n\n\nChecks if an OpenSSL X509 certificate is valid for a given host.\n\n\nfun box valid_for_host(\n  cert: Pointer[X509 val] ref,\n  host: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncert: \nPointer\n[\nX509\n val] ref\n\n\nhost: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncommon_name\n\n\nGet the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.\n\n\nfun box common_name(\n  cert: Pointer[X509 val] ref)\n: String val ?\n\n\n\n\nParameters\n\n\n\n\ncert: \nPointer\n[\nX509\n val] ref\n\n\n\n\nReturns\n\n\n\n\nString\n val ?\n\n\n\n\n\n\nall_names\n\n\nReturns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.\n\n\nfun box all_names(\n  cert: Pointer[X509 val] ref)\n: Array[String val] val\n\n\n\n\nParameters\n\n\n\n\ncert: \nPointer\n[\nX509\n val] ref\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: X509 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nX509\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: X509 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nX509\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_match_name\n\n\nReturns true if the name extracted from the certificate is valid for the\ngiven host.\n\n\nfun box _match_name(\n  host: String val,\n  name: String val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nhost: \nString\n val\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive X509"
        }, 
        {
            "location": "/net-ssl-X509/#x509", 
            "text": "primitive val X509", 
            "title": "X509"
        }, 
        {
            "location": "/net-ssl-X509/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-X509/#create", 
            "text": "new val create()\n: X509 val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-X509/#returns", 
            "text": "X509  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-X509/#valid_for_host", 
            "text": "Checks if an OpenSSL X509 certificate is valid for a given host.  fun box valid_for_host(\n  cert: Pointer[X509 val] ref,\n  host: String val)\n: Bool val", 
            "title": "valid_for_host"
        }, 
        {
            "location": "/net-ssl-X509/#parameters", 
            "text": "cert:  Pointer [ X509  val] ref  host:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-X509/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/#common_name", 
            "text": "Get the common name for the certificate. Raises an error if the common name\ncontains any NULL bytes.  fun box common_name(\n  cert: Pointer[X509 val] ref)\n: String val ?", 
            "title": "common_name"
        }, 
        {
            "location": "/net-ssl-X509/#parameters_1", 
            "text": "cert:  Pointer [ X509  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-X509/#returns_2", 
            "text": "String  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/#all_names", 
            "text": "Returns an array of all names for the certificate. Any names containing\nNULL bytes are not included. This includes the common name and all subject\nalternate names.  fun box all_names(\n  cert: Pointer[X509 val] ref)\n: Array[String val] val", 
            "title": "all_names"
        }, 
        {
            "location": "/net-ssl-X509/#parameters_2", 
            "text": "cert:  Pointer [ X509  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-X509/#returns_3", 
            "text": "Array [ String  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/#eq", 
            "text": "fun box eq(\n  that: X509 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-X509/#parameters_3", 
            "text": "that:  X509  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-X509/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/#ne", 
            "text": "fun box ne(\n  that: X509 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-X509/#parameters_4", 
            "text": "that:  X509  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-X509/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-X509/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-X509/#_match_name", 
            "text": "Returns true if the name extracted from the certificate is valid for the\ngiven host.  fun box _match_name(\n  host: String val,\n  name: String val)\n: Bool val", 
            "title": "_match_name"
        }, 
        {
            "location": "/net-ssl-X509/#parameters_5", 
            "text": "host:  String  val  name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-X509/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLContext/", 
            "text": "_SSLContext\n\n\nprimitive val _SSLContext\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _SSLContext val^\n\n\n\n\nReturns\n\n\n\n\n_SSLContext\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _SSLContext val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SSLContext\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _SSLContext val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SSLContext\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _SSLContext"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#_sslcontext", 
            "text": "primitive val _SSLContext", 
            "title": "_SSLContext"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#create", 
            "text": "new val create()\n: _SSLContext val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#returns", 
            "text": "_SSLContext  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#eq", 
            "text": "fun box eq(\n  that: _SSLContext val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#parameters", 
            "text": "that:  _SSLContext  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#ne", 
            "text": "fun box ne(\n  that: _SSLContext val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#parameters_1", 
            "text": "that:  _SSLContext  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_SSLContext/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/", 
            "text": "SSLContext\n\n\nAn SSL context is used to create SSL sessions.\n\n\nclass val SSLContext\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create()\n: SSLContext ref^\n\n\n\n\nReturns\n\n\n\n\nSSLContext\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nclient\n\n\nCreate a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.\n\n\nfun box client(\n  hostname: String val = seq)\n: SSL iso^ ?\n\n\n\n\nParameters\n\n\n\n\nhostname: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nSSL\n iso^ ?\n\n\n\n\n\n\nserver\n\n\nCreate a server-side SSL session.\n\n\nfun box server()\n: SSL iso^ ?\n\n\n\n\nReturns\n\n\n\n\nSSL\n iso^ ?\n\n\n\n\n\n\nset_cert\n\n\nThe cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.\n\n\nfun ref set_cert(\n  cert: FilePath val,\n  key: FilePath val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ncert: \nFilePath\n val\n\n\nkey: \nFilePath\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nset_authority\n\n\nUse a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use None\nto indicate no file or no path. Raises an error if these verify locations\naren't valid, or if both are None.\n\n\nfun ref set_authority(\n  file: (FilePath val | None val),\n  path: (FilePath val | None val) = seq)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nfile: (\nFilePath\n val | \nNone\n val)\n\n\npath: (\nFilePath\n val | \nNone\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nset_ciphers\n\n\nSet the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.\n\n\nfun ref set_ciphers(\n  ciphers: String val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nciphers: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nset_client_verify\n\n\nSet to true to require verification. Defaults to true.\n\n\nfun ref set_client_verify(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_server_verify\n\n\nSet to true to require verification. Defaults to false.\n\n\nfun ref set_server_verify(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nset_verify_depth\n\n\nSet the verify depth. Defaults to 6.\n\n\nfun ref set_verify_depth(\n  depth: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndepth: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nallow_tls_v1\n\n\nAllow TLS v1. Defaults to false.\n\n\nfun ref allow_tls_v1(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nallow_tls_v1_1\n\n\nAllow TLS v1.1. Defaults to false.\n\n\nfun ref allow_tls_v1_1(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nallow_tls_v1_2\n\n\nAllow TLS v1.2. Defaults to true.\n\n\nfun ref allow_tls_v1_2(\n  state: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\n\nFree the SSL context.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_final\n\n\nFree the SSL context.\n\n\nfun box _final()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class SSLContext"
        }, 
        {
            "location": "/net-ssl-SSLContext/#sslcontext", 
            "text": "An SSL context is used to create SSL sessions.  class val SSLContext", 
            "title": "SSLContext"
        }, 
        {
            "location": "/net-ssl-SSLContext/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLContext/#create", 
            "text": "new ref create()\n: SSLContext ref^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns", 
            "text": "SSLContext  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLContext/#client", 
            "text": "Create a client-side SSL session. If a hostname is supplied, the server\nside certificate must be valid for that hostname.  fun box client(\n  hostname: String val = seq)\n: SSL iso^ ?", 
            "title": "client"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters", 
            "text": "hostname:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_1", 
            "text": "SSL  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#server", 
            "text": "Create a server-side SSL session.  fun box server()\n: SSL iso^ ?", 
            "title": "server"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_2", 
            "text": "SSL  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#set_cert", 
            "text": "The cert file is a PEM certificate chain. The key file is a private key.\nServers must set this. For clients, it is optional.  fun ref set_cert(\n  cert: FilePath val,\n  key: FilePath val)\n: None val ?", 
            "title": "set_cert"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_1", 
            "text": "cert:  FilePath  val  key:  FilePath  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_3", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#set_authority", 
            "text": "Use a PEM file and/or a directory of PEM files to specify certificate\nauthorities. Clients must set this. For servers, it is optional. Use None\nto indicate no file or no path. Raises an error if these verify locations\naren't valid, or if both are None.  fun ref set_authority(\n  file: (FilePath val | None val),\n  path: (FilePath val | None val) = seq)\n: None val ?", 
            "title": "set_authority"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_2", 
            "text": "file: ( FilePath  val |  None  val)  path: ( FilePath  val |  None  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_4", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#set_ciphers", 
            "text": "Set the accepted ciphers. This replaces the existing list. Raises an error\nif the cipher list is invalid.  fun ref set_ciphers(\n  ciphers: String val)\n: None val ?", 
            "title": "set_ciphers"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_3", 
            "text": "ciphers:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_5", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#set_client_verify", 
            "text": "Set to true to require verification. Defaults to true.  fun ref set_client_verify(\n  state: Bool val)\n: None val", 
            "title": "set_client_verify"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_4", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#set_server_verify", 
            "text": "Set to true to require verification. Defaults to false.  fun ref set_server_verify(\n  state: Bool val)\n: None val", 
            "title": "set_server_verify"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_5", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#set_verify_depth", 
            "text": "Set the verify depth. Defaults to 6.  fun ref set_verify_depth(\n  depth: U32 val)\n: None val", 
            "title": "set_verify_depth"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_6", 
            "text": "depth:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#allow_tls_v1", 
            "text": "Allow TLS v1. Defaults to false.  fun ref allow_tls_v1(\n  state: Bool val)\n: None val", 
            "title": "allow_tls_v1"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_7", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#allow_tls_v1_1", 
            "text": "Allow TLS v1.1. Defaults to false.  fun ref allow_tls_v1_1(\n  state: Bool val)\n: None val", 
            "title": "allow_tls_v1_1"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_8", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#allow_tls_v1_2", 
            "text": "Allow TLS v1.2. Defaults to true.  fun ref allow_tls_v1_2(\n  state: Bool val)\n: None val", 
            "title": "allow_tls_v1_2"
        }, 
        {
            "location": "/net-ssl-SSLContext/#parameters_9", 
            "text": "state:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#dispose", 
            "text": "Free the SSL context.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLContext/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-SSLContext/#_final", 
            "text": "Free the SSL context.  fun box _final()\n: None val", 
            "title": "_final"
        }, 
        {
            "location": "/net-ssl-SSLContext/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/", 
            "text": "SSLConnection\n\n\nWrap another protocol in an SSL connection.\n\n\nclass ref SSLConnection is\n  TCPConnectionNotify ref\n\n\n\n\nImplements\n\n\n\n\nTCPConnectionNotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  notify: TCPConnectionNotify iso,\n  ssl: SSL iso)\n: SSLConnection iso^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTCPConnectionNotify\n iso\n\n\nssl: \nSSL\n iso\n\n\n\n\nReturns\n\n\n\n\nSSLConnection\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\naccepted\n\n\nForward to the wrapped protocol.\n\n\nfun ref accepted(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnecting\n\n\nForward to the wrapped protocol.\n\n\nfun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnected\n\n\nSwallow this event until the handshake is complete.\n\n\nfun ref connected(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nconnect_failed\n\n\nForward to the wrapped protocol.\n\n\nfun ref connect_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsent\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nfun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\n(\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nsentv\n\n\nfun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\nReturns\n\n\n\n\nByteSeqIter\n val\n\n\n\n\n\n\nreceived\n\n\nPass the data to the SSL session and check for both new application data\nand new destination data.\n\n\nfun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\ntimes: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nexpect\n\n\nKeep track of the expect count for the wrapped protocol. Always tell the\nTCPConnection to read all available data.\n\n\nfun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nclosed\n\n\nForward to the wrapped protocol.\n\n\nfun ref closed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nauth_failed\n\n\nfun ref auth_failed(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nthrottled\n\n\nfun ref throttled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nunthrottled\n\n\nfun ref unthrottled(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_poll\n\n\nChecks for both new application data and new destination data. Informs the\nwrapped protocol that is has connected when the handshake is complete.\n\n\nfun ref _poll(\n  conn: TCPConnection ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nconn: \nTCPConnection\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class SSLConnection"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#sslconnection", 
            "text": "Wrap another protocol in an SSL connection.  class ref SSLConnection is\n  TCPConnectionNotify ref", 
            "title": "SSLConnection"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#implements", 
            "text": "TCPConnectionNotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#create", 
            "text": "new iso create(\n  notify: TCPConnectionNotify iso,\n  ssl: SSL iso)\n: SSLConnection iso^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters", 
            "text": "notify:  TCPConnectionNotify  iso  ssl:  SSL  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns", 
            "text": "SSLConnection  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#accepted", 
            "text": "Forward to the wrapped protocol.  fun ref accepted(\n  conn: TCPConnection ref)\n: None val", 
            "title": "accepted"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_1", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#connecting", 
            "text": "Forward to the wrapped protocol.  fun ref connecting(\n  conn: TCPConnection ref,\n  count: U32 val)\n: None val", 
            "title": "connecting"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_2", 
            "text": "conn:  TCPConnection  ref  count:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#connected", 
            "text": "Swallow this event until the handshake is complete.  fun ref connected(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connected"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_3", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#connect_failed", 
            "text": "Forward to the wrapped protocol.  fun ref connect_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "connect_failed"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_4", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#sent", 
            "text": "Pass the data to the SSL session and check for both new application data\nand new destination data.  fun ref sent(\n  conn: TCPConnection ref,\n  data: (String val | Array[U8 val] val))\n: (String val | Array[U8 val] val)", 
            "title": "sent"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_5", 
            "text": "conn:  TCPConnection  ref  data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_5", 
            "text": "( String  val |  Array [ U8  val] val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#sentv", 
            "text": "fun ref sentv(\n  conn: TCPConnection ref,\n  data: ByteSeqIter val)\n: ByteSeqIter val", 
            "title": "sentv"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_6", 
            "text": "conn:  TCPConnection  ref  data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_6", 
            "text": "ByteSeqIter  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#received", 
            "text": "Pass the data to the SSL session and check for both new application data\nand new destination data.  fun ref received(\n  conn: TCPConnection ref,\n  data: Array[U8 val] iso,\n  times: USize val)\n: Bool val", 
            "title": "received"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_7", 
            "text": "conn:  TCPConnection  ref  data:  Array [ U8  val] iso  times:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#expect", 
            "text": "Keep track of the expect count for the wrapped protocol. Always tell the\nTCPConnection to read all available data.  fun ref expect(\n  conn: TCPConnection ref,\n  qty: USize val)\n: USize val", 
            "title": "expect"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_8", 
            "text": "conn:  TCPConnection  ref  qty:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_8", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#closed", 
            "text": "Forward to the wrapped protocol.  fun ref closed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_9", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#auth_failed", 
            "text": "fun ref auth_failed(\n  conn: TCPConnection ref)\n: None val", 
            "title": "auth_failed"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_10", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#throttled", 
            "text": "fun ref throttled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "throttled"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_11", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#unthrottled", 
            "text": "fun ref unthrottled(\n  conn: TCPConnection ref)\n: None val", 
            "title": "unthrottled"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_12", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#_poll", 
            "text": "Checks for both new application data and new destination data. Informs the\nwrapped protocol that is has connected when the handshake is complete.  fun ref _poll(\n  conn: TCPConnection ref)\n: None val", 
            "title": "_poll"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#parameters_13", 
            "text": "conn:  TCPConnection  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLConnection/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSL/", 
            "text": "_SSL\n\n\nprimitive val _SSL\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _SSL val^\n\n\n\n\nReturns\n\n\n\n\n_SSL\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _SSL val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SSL\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _SSL val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SSL\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _SSL"
        }, 
        {
            "location": "/net-ssl-_SSL/#_ssl", 
            "text": "primitive val _SSL", 
            "title": "_SSL"
        }, 
        {
            "location": "/net-ssl-_SSL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_SSL/#create", 
            "text": "new val create()\n: _SSL val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_SSL/#returns", 
            "text": "_SSL  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_SSL/#eq", 
            "text": "fun box eq(\n  that: _SSL val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_SSL/#parameters", 
            "text": "that:  _SSL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_SSL/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSL/#ne", 
            "text": "fun box ne(\n  that: _SSL val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_SSL/#parameters_1", 
            "text": "that:  _SSL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_SSL/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_BIO/", 
            "text": "_BIO\n\n\nprimitive val _BIO\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _BIO val^\n\n\n\n\nReturns\n\n\n\n\n_BIO\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _BIO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_BIO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _BIO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_BIO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _BIO"
        }, 
        {
            "location": "/net-ssl-_BIO/#_bio", 
            "text": "primitive val _BIO", 
            "title": "_BIO"
        }, 
        {
            "location": "/net-ssl-_BIO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_BIO/#create", 
            "text": "new val create()\n: _BIO val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_BIO/#returns", 
            "text": "_BIO  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_BIO/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_BIO/#eq", 
            "text": "fun box eq(\n  that: _BIO val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_BIO/#parameters", 
            "text": "that:  _BIO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_BIO/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_BIO/#ne", 
            "text": "fun box ne(\n  that: _BIO val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_BIO/#parameters_1", 
            "text": "that:  _BIO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_BIO/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/", 
            "text": "SSLHandshake\n\n\nprimitive val SSLHandshake\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SSLHandshake val^\n\n\n\n\nReturns\n\n\n\n\nSSLHandshake\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: SSLHandshake val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLHandshake\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SSLHandshake val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLHandshake\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SSLHandshake"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#sslhandshake", 
            "text": "primitive val SSLHandshake", 
            "title": "SSLHandshake"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#create", 
            "text": "new val create()\n: SSLHandshake val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#returns", 
            "text": "SSLHandshake  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#eq", 
            "text": "fun box eq(\n  that: SSLHandshake val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#parameters", 
            "text": "that:  SSLHandshake  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#ne", 
            "text": "fun box ne(\n  that: SSLHandshake val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#parameters_1", 
            "text": "that:  SSLHandshake  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLHandshake/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/", 
            "text": "SSLAuthFail\n\n\nprimitive val SSLAuthFail\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SSLAuthFail val^\n\n\n\n\nReturns\n\n\n\n\nSSLAuthFail\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: SSLAuthFail val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLAuthFail\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SSLAuthFail val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLAuthFail\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SSLAuthFail"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#sslauthfail", 
            "text": "primitive val SSLAuthFail", 
            "title": "SSLAuthFail"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#create", 
            "text": "new val create()\n: SSLAuthFail val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#returns", 
            "text": "SSLAuthFail  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#eq", 
            "text": "fun box eq(\n  that: SSLAuthFail val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#parameters", 
            "text": "that:  SSLAuthFail  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#ne", 
            "text": "fun box ne(\n  that: SSLAuthFail val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#parameters_1", 
            "text": "that:  SSLAuthFail  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLAuthFail/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLReady/", 
            "text": "SSLReady\n\n\nprimitive val SSLReady\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SSLReady val^\n\n\n\n\nReturns\n\n\n\n\nSSLReady\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: SSLReady val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLReady\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SSLReady val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLReady\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SSLReady"
        }, 
        {
            "location": "/net-ssl-SSLReady/#sslready", 
            "text": "primitive val SSLReady", 
            "title": "SSLReady"
        }, 
        {
            "location": "/net-ssl-SSLReady/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLReady/#create", 
            "text": "new val create()\n: SSLReady val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-SSLReady/#returns", 
            "text": "SSLReady  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLReady/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLReady/#eq", 
            "text": "fun box eq(\n  that: SSLReady val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-SSLReady/#parameters", 
            "text": "that:  SSLReady  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLReady/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLReady/#ne", 
            "text": "fun box ne(\n  that: SSLReady val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-SSLReady/#parameters_1", 
            "text": "that:  SSLReady  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLReady/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLError/", 
            "text": "SSLError\n\n\nprimitive val SSLError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SSLError val^\n\n\n\n\nReturns\n\n\n\n\nSSLError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: SSLError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SSLError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSSLError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SSLError"
        }, 
        {
            "location": "/net-ssl-SSLError/#sslerror", 
            "text": "primitive val SSLError", 
            "title": "SSLError"
        }, 
        {
            "location": "/net-ssl-SSLError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSLError/#create", 
            "text": "new val create()\n: SSLError val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-SSLError/#returns", 
            "text": "SSLError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSLError/#eq", 
            "text": "fun box eq(\n  that: SSLError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-SSLError/#parameters", 
            "text": "that:  SSLError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLError/#ne", 
            "text": "fun box ne(\n  that: SSLError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-SSLError/#parameters_1", 
            "text": "that:  SSLError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSLError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSLState/", 
            "text": "SSLState\n\n\ntype SSLState is\n  (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nSSLHandshake\n val | \nSSLAuthFail\n val | \nSSLReady\n val | \nSSLError\n val)", 
            "title": "type SSLState"
        }, 
        {
            "location": "/net-ssl-SSLState/#sslstate", 
            "text": "type SSLState is\n  (SSLHandshake val | SSLAuthFail val | SSLReady val | SSLError val)", 
            "title": "SSLState"
        }, 
        {
            "location": "/net-ssl-SSLState/#type-alias-for", 
            "text": "( SSLHandshake  val |  SSLAuthFail  val |  SSLReady  val |  SSLError  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/net-ssl-SSL/", 
            "text": "SSL\n\n\nAn SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.\n\n\nclass ref SSL\n\n\n\n\nConstructors\n\n\n_create\n\n\nnew ref _create(\n  ctx: Pointer[_SSLContext val] tag,\n  server: Bool val,\n  verify: Bool val,\n  hostname: String val = seq)\n: SSL ref^ ?\n\n\n\n\nParameters\n\n\n\n\nctx: \nPointer\n[\n_SSLContext\n val] tag\n\n\nserver: \nBool\n val\n\n\nverify: \nBool\n val\n\n\nhostname: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nSSL\n ref^ ?\n\n\n\n\n\n\nPublic Functions\n\n\nstate\n\n\nReturns the SSL session state.\n\n\nfun box state()\n: (SSLHandshake val | SSLAuthFail val | SSLReady val | \n    SSLError val)\n\n\n\n\nReturns\n\n\n\n\n(\nSSLHandshake\n val | \nSSLAuthFail\n val | \nSSLReady\n val | \n    \nSSLError\n val)\n\n\n\n\n\n\nread\n\n\nReturns unencrypted bytes to be passed to the application. If \nexpect\n is\nnon-zero, the number of bytes returned will be exactly \nexpect\n. If no data\n(or less than \nexpect\n bytes) is available, this returns None.\n\n\nfun ref read(\n  expect: USize val = seq)\n: (Array[U8 val] iso^ | None val)\n\n\n\n\nParameters\n\n\n\n\nexpect: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\n(\nArray\n[\nU8\n val] iso^ | \nNone\n val)\n\n\n\n\n\n\nwrite\n\n\nWhen application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.\n\n\nfun ref write(\n  data: (String val | Array[U8 val] val))\n: None val ?\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\nreceive\n\n\nWhen data is received, add it to the SSL session.\n\n\nfun ref receive(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncan_send\n\n\nReturns true if there are encrypted bytes to be passed to the destination.\n\n\nfun ref can_send()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nsend\n\n\nReturns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.\n\n\nfun ref send()\n: Array[U8 val] iso^ ?\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] iso^ ?\n\n\n\n\n\n\ndispose\n\n\nDispose of the session.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_final\n\n\nDispose of the session.\n\n\nfun box _final()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_verify_hostname\n\n\nVerify that the certificate is valid for the given hostname.\n\n\nfun ref _verify_hostname()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class SSL"
        }, 
        {
            "location": "/net-ssl-SSL/#ssl", 
            "text": "An SSL session manages handshakes, encryption and decryption. It is not tied\nto any transport layer.  class ref SSL", 
            "title": "SSL"
        }, 
        {
            "location": "/net-ssl-SSL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-SSL/#_create", 
            "text": "new ref _create(\n  ctx: Pointer[_SSLContext val] tag,\n  server: Bool val,\n  verify: Bool val,\n  hostname: String val = seq)\n: SSL ref^ ?", 
            "title": "_create"
        }, 
        {
            "location": "/net-ssl-SSL/#parameters", 
            "text": "ctx:  Pointer [ _SSLContext  val] tag  server:  Bool  val  verify:  Bool  val  hostname:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSL/#returns", 
            "text": "SSL  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-SSL/#state", 
            "text": "Returns the SSL session state.  fun box state()\n: (SSLHandshake val | SSLAuthFail val | SSLReady val | \n    SSLError val)", 
            "title": "state"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_1", 
            "text": "( SSLHandshake  val |  SSLAuthFail  val |  SSLReady  val | \n     SSLError  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#read", 
            "text": "Returns unencrypted bytes to be passed to the application. If  expect  is\nnon-zero, the number of bytes returned will be exactly  expect . If no data\n(or less than  expect  bytes) is available, this returns None.  fun ref read(\n  expect: USize val = seq)\n: (Array[U8 val] iso^ | None val)", 
            "title": "read"
        }, 
        {
            "location": "/net-ssl-SSL/#parameters_1", 
            "text": "expect:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_2", 
            "text": "( Array [ U8  val] iso^ |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#write", 
            "text": "When application data is sent, add it to the SSL session. Raises an error\nif the handshake is not complete.  fun ref write(\n  data: (String val | Array[U8 val] val))\n: None val ?", 
            "title": "write"
        }, 
        {
            "location": "/net-ssl-SSL/#parameters_2", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_3", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#receive", 
            "text": "When data is received, add it to the SSL session.  fun ref receive(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "receive"
        }, 
        {
            "location": "/net-ssl-SSL/#parameters_3", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#can_send", 
            "text": "Returns true if there are encrypted bytes to be passed to the destination.  fun ref can_send()\n: Bool val", 
            "title": "can_send"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#send", 
            "text": "Returns encrypted bytes to be passed to the destination. Raises an error\nif no data is available.  fun ref send()\n: Array[U8 val] iso^ ?", 
            "title": "send"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_6", 
            "text": "Array [ U8  val] iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#dispose", 
            "text": "Dispose of the session.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-SSL/#_final", 
            "text": "Dispose of the session.  fun box _final()\n: None val", 
            "title": "_final"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-SSL/#_verify_hostname", 
            "text": "Verify that the certificate is valid for the given hostname.  fun ref _verify_hostname()\n: None val", 
            "title": "_verify_hostname"
        }, 
        {
            "location": "/net-ssl-SSL/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLInit/", 
            "text": "_SSLInit\n\n\nThis initialises SSL when the program begins.\n\n\nprimitive val _SSLInit\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _SSLInit val^\n\n\n\n\nReturns\n\n\n\n\n_SSLInit\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _SSLInit val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SSLInit\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _SSLInit val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SSLInit\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_init\n\n\nfun box _init()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "primitive _SSLInit"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#_sslinit", 
            "text": "This initialises SSL when the program begins.  primitive val _SSLInit", 
            "title": "_SSLInit"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#create", 
            "text": "new val create()\n: _SSLInit val^", 
            "title": "create"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#returns", 
            "text": "_SSLInit  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#eq", 
            "text": "fun box eq(\n  that: _SSLInit val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#parameters", 
            "text": "that:  _SSLInit  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#ne", 
            "text": "fun box ne(\n  that: _SSLInit val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#parameters_1", 
            "text": "that:  _SSLInit  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#_init", 
            "text": "fun box _init()\n: None val", 
            "title": "_init"
        }, 
        {
            "location": "/net-ssl-_SSLInit/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options--index/", 
            "text": "Options package\n\n\nThe Options package provides support for parsing command line arguments.\n\n\nExample program\n\n\nuse \noptions\n\n\nactor Main\n  let _env: Env\n  // Some values we can set via command line options\n  var _a_string: String = \ndefault\n\n  var _a_number: USize = 0\n  var _a_float: Float = F64(0.0)\n\n  new create(env: Env) =\n\n    _env = env\n    try\n      arguments()?\n    end\n\n    _env.out.print(\nThe String is \n + _a_string)\n    _env.out.print(\nThe Number is \n + _a_number.string())\n    _env.out.print(\nThe Float is \n + _a_float.string())\n\n  fun ref arguments() ? =\n\n    var options = Options(_env.args)\n\n    options\n      .add(\nstring\n, \nt\n, StringArgument)\n      .add(\nnumber\n, \ni\n, I64Argument)\n      .add(\nfloat\n, \nc\n, F64Argument)\n\n    for option in options do\n      match option\n      | (\nstring\n, let arg: String) =\n _a_string = arg\n      | (\nnumber\n, let arg: I64) =\n _a_number = arg.usize()\n      | (\nfloat\n, let arg: F64) =\n _a_float = arg\n      | let err: ParseError =\n err.report(_env.out) ; usage() ; error\n      end\n    end\n\n  fun ref usage() =\n\n    // this exists inside a doc-string to create the docs you are reading\n    // in real code, we would use a single string literal for this but\n    // docstrings are themselves string literals and you can't put a\n    // string literal in a string literal. That would lead to total\n    // protonic reversal. In your own code, use a string literal instead\n    // of string concatenation for this.\n    _env.out.print(\n      \nprogram [OPTIONS]\\n\n +\n      \n  --string      N   a string argument. Defaults to 'default'.\\n\n +\n      \n  --number      N   a number argument. Defaults to 0.\\n\n +\n      \n  --float       N   a floating point argument. Defaults to 0.0.\\n\n\n      )\n\n\n\n\nPublic Types\n\n\n\n\nprimitive StringArgument\n\n\nprimitive I64Argument\n\n\nprimitive F64Argument\n\n\nprimitive Required\n\n\nprimitive Optional\n\n\nprimitive UnrecognisedOption\n\n\nprimitive AmbiguousMatch\n\n\nprimitive MissingArgument\n\n\nprimitive InvalidArgument\n\n\ntype ArgumentType\n\n\ntype ErrorReason\n\n\ntype ParsedOption\n\n\ninterface ParseError\n\n\nclass Options\n\n\nprimitive EnvVars\n\n\n\n\nPrivate Types\n\n\n\n\nclass _Option\n\n\nclass _ErrorPrinter", 
            "title": "Package"
        }, 
        {
            "location": "/options--index/#options-package", 
            "text": "The Options package provides support for parsing command line arguments.", 
            "title": "Options package"
        }, 
        {
            "location": "/options--index/#example-program", 
            "text": "use  options \n\nactor Main\n  let _env: Env\n  // Some values we can set via command line options\n  var _a_string: String =  default \n  var _a_number: USize = 0\n  var _a_float: Float = F64(0.0)\n\n  new create(env: Env) = \n    _env = env\n    try\n      arguments()?\n    end\n\n    _env.out.print( The String is   + _a_string)\n    _env.out.print( The Number is   + _a_number.string())\n    _env.out.print( The Float is   + _a_float.string())\n\n  fun ref arguments() ? = \n    var options = Options(_env.args)\n\n    options\n      .add( string ,  t , StringArgument)\n      .add( number ,  i , I64Argument)\n      .add( float ,  c , F64Argument)\n\n    for option in options do\n      match option\n      | ( string , let arg: String) =  _a_string = arg\n      | ( number , let arg: I64) =  _a_number = arg.usize()\n      | ( float , let arg: F64) =  _a_float = arg\n      | let err: ParseError =  err.report(_env.out) ; usage() ; error\n      end\n    end\n\n  fun ref usage() = \n    // this exists inside a doc-string to create the docs you are reading\n    // in real code, we would use a single string literal for this but\n    // docstrings are themselves string literals and you can't put a\n    // string literal in a string literal. That would lead to total\n    // protonic reversal. In your own code, use a string literal instead\n    // of string concatenation for this.\n    _env.out.print(\n       program [OPTIONS]\\n  +\n         --string      N   a string argument. Defaults to 'default'.\\n  +\n         --number      N   a number argument. Defaults to 0.\\n  +\n         --float       N   a floating point argument. Defaults to 0.0.\\n \n      )", 
            "title": "Example program"
        }, 
        {
            "location": "/options--index/#public-types", 
            "text": "primitive StringArgument  primitive I64Argument  primitive F64Argument  primitive Required  primitive Optional  primitive UnrecognisedOption  primitive AmbiguousMatch  primitive MissingArgument  primitive InvalidArgument  type ArgumentType  type ErrorReason  type ParsedOption  interface ParseError  class Options  primitive EnvVars", 
            "title": "Public Types"
        }, 
        {
            "location": "/options--index/#private-types", 
            "text": "class _Option  class _ErrorPrinter", 
            "title": "Private Types"
        }, 
        {
            "location": "/options-StringArgument/", 
            "text": "StringArgument\n\n\nprimitive val StringArgument\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: StringArgument val^\n\n\n\n\nReturns\n\n\n\n\nStringArgument\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: StringArgument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStringArgument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StringArgument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStringArgument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StringArgument"
        }, 
        {
            "location": "/options-StringArgument/#stringargument", 
            "text": "primitive val StringArgument", 
            "title": "StringArgument"
        }, 
        {
            "location": "/options-StringArgument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-StringArgument/#create", 
            "text": "new val create()\n: StringArgument val^", 
            "title": "create"
        }, 
        {
            "location": "/options-StringArgument/#returns", 
            "text": "StringArgument  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-StringArgument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-StringArgument/#eq", 
            "text": "fun box eq(\n  that: StringArgument val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-StringArgument/#parameters", 
            "text": "that:  StringArgument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-StringArgument/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-StringArgument/#ne", 
            "text": "fun box ne(\n  that: StringArgument val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-StringArgument/#parameters_1", 
            "text": "that:  StringArgument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-StringArgument/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-I64Argument/", 
            "text": "I64Argument\n\n\nprimitive val I64Argument\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: I64Argument val^\n\n\n\n\nReturns\n\n\n\n\nI64Argument\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: I64Argument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nI64Argument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: I64Argument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nI64Argument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive I64Argument"
        }, 
        {
            "location": "/options-I64Argument/#i64argument", 
            "text": "primitive val I64Argument", 
            "title": "I64Argument"
        }, 
        {
            "location": "/options-I64Argument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-I64Argument/#create", 
            "text": "new val create()\n: I64Argument val^", 
            "title": "create"
        }, 
        {
            "location": "/options-I64Argument/#returns", 
            "text": "I64Argument  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-I64Argument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-I64Argument/#eq", 
            "text": "fun box eq(\n  that: I64Argument val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-I64Argument/#parameters", 
            "text": "that:  I64Argument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-I64Argument/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-I64Argument/#ne", 
            "text": "fun box ne(\n  that: I64Argument val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-I64Argument/#parameters_1", 
            "text": "that:  I64Argument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-I64Argument/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-F64Argument/", 
            "text": "F64Argument\n\n\nprimitive val F64Argument\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: F64Argument val^\n\n\n\n\nReturns\n\n\n\n\nF64Argument\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: F64Argument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nF64Argument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: F64Argument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nF64Argument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive F64Argument"
        }, 
        {
            "location": "/options-F64Argument/#f64argument", 
            "text": "primitive val F64Argument", 
            "title": "F64Argument"
        }, 
        {
            "location": "/options-F64Argument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-F64Argument/#create", 
            "text": "new val create()\n: F64Argument val^", 
            "title": "create"
        }, 
        {
            "location": "/options-F64Argument/#returns", 
            "text": "F64Argument  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-F64Argument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-F64Argument/#eq", 
            "text": "fun box eq(\n  that: F64Argument val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-F64Argument/#parameters", 
            "text": "that:  F64Argument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-F64Argument/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-F64Argument/#ne", 
            "text": "fun box ne(\n  that: F64Argument val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-F64Argument/#parameters_1", 
            "text": "that:  F64Argument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-F64Argument/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Required/", 
            "text": "Required\n\n\nprimitive val Required\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Required val^\n\n\n\n\nReturns\n\n\n\n\nRequired\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: Required val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Required val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nRequired\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Required"
        }, 
        {
            "location": "/options-Required/#required", 
            "text": "primitive val Required", 
            "title": "Required"
        }, 
        {
            "location": "/options-Required/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Required/#create", 
            "text": "new val create()\n: Required val^", 
            "title": "create"
        }, 
        {
            "location": "/options-Required/#returns", 
            "text": "Required  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Required/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Required/#eq", 
            "text": "fun box eq(\n  that: Required val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-Required/#parameters", 
            "text": "that:  Required  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Required/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Required/#ne", 
            "text": "fun box ne(\n  that: Required val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-Required/#parameters_1", 
            "text": "that:  Required  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Required/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Optional/", 
            "text": "Optional\n\n\nprimitive val Optional\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Optional val^\n\n\n\n\nReturns\n\n\n\n\nOptional\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: Optional val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOptional\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Optional val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOptional\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Optional"
        }, 
        {
            "location": "/options-Optional/#optional", 
            "text": "primitive val Optional", 
            "title": "Optional"
        }, 
        {
            "location": "/options-Optional/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Optional/#create", 
            "text": "new val create()\n: Optional val^", 
            "title": "create"
        }, 
        {
            "location": "/options-Optional/#returns", 
            "text": "Optional  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Optional/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Optional/#eq", 
            "text": "fun box eq(\n  that: Optional val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-Optional/#parameters", 
            "text": "that:  Optional  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Optional/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Optional/#ne", 
            "text": "fun box ne(\n  that: Optional val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-Optional/#parameters_1", 
            "text": "that:  Optional  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Optional/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-UnrecognisedOption/", 
            "text": "UnrecognisedOption\n\n\nprimitive val UnrecognisedOption\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: UnrecognisedOption val^\n\n\n\n\nReturns\n\n\n\n\nUnrecognisedOption\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: UnrecognisedOption val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nUnrecognisedOption\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: UnrecognisedOption val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nUnrecognisedOption\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive UnrecognisedOption"
        }, 
        {
            "location": "/options-UnrecognisedOption/#unrecognisedoption", 
            "text": "primitive val UnrecognisedOption", 
            "title": "UnrecognisedOption"
        }, 
        {
            "location": "/options-UnrecognisedOption/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-UnrecognisedOption/#create", 
            "text": "new val create()\n: UnrecognisedOption val^", 
            "title": "create"
        }, 
        {
            "location": "/options-UnrecognisedOption/#returns", 
            "text": "UnrecognisedOption  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-UnrecognisedOption/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-UnrecognisedOption/#eq", 
            "text": "fun box eq(\n  that: UnrecognisedOption val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-UnrecognisedOption/#parameters", 
            "text": "that:  UnrecognisedOption  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-UnrecognisedOption/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-UnrecognisedOption/#ne", 
            "text": "fun box ne(\n  that: UnrecognisedOption val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-UnrecognisedOption/#parameters_1", 
            "text": "that:  UnrecognisedOption  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-UnrecognisedOption/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-AmbiguousMatch/", 
            "text": "AmbiguousMatch\n\n\nprimitive val AmbiguousMatch\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: AmbiguousMatch val^\n\n\n\n\nReturns\n\n\n\n\nAmbiguousMatch\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: AmbiguousMatch val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAmbiguousMatch\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: AmbiguousMatch val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nAmbiguousMatch\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive AmbiguousMatch"
        }, 
        {
            "location": "/options-AmbiguousMatch/#ambiguousmatch", 
            "text": "primitive val AmbiguousMatch", 
            "title": "AmbiguousMatch"
        }, 
        {
            "location": "/options-AmbiguousMatch/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-AmbiguousMatch/#create", 
            "text": "new val create()\n: AmbiguousMatch val^", 
            "title": "create"
        }, 
        {
            "location": "/options-AmbiguousMatch/#returns", 
            "text": "AmbiguousMatch  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-AmbiguousMatch/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-AmbiguousMatch/#eq", 
            "text": "fun box eq(\n  that: AmbiguousMatch val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-AmbiguousMatch/#parameters", 
            "text": "that:  AmbiguousMatch  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-AmbiguousMatch/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-AmbiguousMatch/#ne", 
            "text": "fun box ne(\n  that: AmbiguousMatch val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-AmbiguousMatch/#parameters_1", 
            "text": "that:  AmbiguousMatch  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-AmbiguousMatch/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-MissingArgument/", 
            "text": "MissingArgument\n\n\nprimitive val MissingArgument\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: MissingArgument val^\n\n\n\n\nReturns\n\n\n\n\nMissingArgument\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: MissingArgument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMissingArgument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: MissingArgument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nMissingArgument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive MissingArgument"
        }, 
        {
            "location": "/options-MissingArgument/#missingargument", 
            "text": "primitive val MissingArgument", 
            "title": "MissingArgument"
        }, 
        {
            "location": "/options-MissingArgument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-MissingArgument/#create", 
            "text": "new val create()\n: MissingArgument val^", 
            "title": "create"
        }, 
        {
            "location": "/options-MissingArgument/#returns", 
            "text": "MissingArgument  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-MissingArgument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-MissingArgument/#eq", 
            "text": "fun box eq(\n  that: MissingArgument val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-MissingArgument/#parameters", 
            "text": "that:  MissingArgument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-MissingArgument/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-MissingArgument/#ne", 
            "text": "fun box ne(\n  that: MissingArgument val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-MissingArgument/#parameters_1", 
            "text": "that:  MissingArgument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-MissingArgument/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-InvalidArgument/", 
            "text": "InvalidArgument\n\n\nprimitive val InvalidArgument\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: InvalidArgument val^\n\n\n\n\nReturns\n\n\n\n\nInvalidArgument\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: InvalidArgument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nInvalidArgument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: InvalidArgument val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nInvalidArgument\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive InvalidArgument"
        }, 
        {
            "location": "/options-InvalidArgument/#invalidargument", 
            "text": "primitive val InvalidArgument", 
            "title": "InvalidArgument"
        }, 
        {
            "location": "/options-InvalidArgument/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-InvalidArgument/#create", 
            "text": "new val create()\n: InvalidArgument val^", 
            "title": "create"
        }, 
        {
            "location": "/options-InvalidArgument/#returns", 
            "text": "InvalidArgument  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-InvalidArgument/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-InvalidArgument/#eq", 
            "text": "fun box eq(\n  that: InvalidArgument val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-InvalidArgument/#parameters", 
            "text": "that:  InvalidArgument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-InvalidArgument/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-InvalidArgument/#ne", 
            "text": "fun box ne(\n  that: InvalidArgument val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-InvalidArgument/#parameters_1", 
            "text": "that:  InvalidArgument  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-InvalidArgument/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-ArgumentType/", 
            "text": "ArgumentType\n\n\ntype ArgumentType is\n  (None val | StringArgument val | I64Argument val | F64Argument val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nNone\n val | \nStringArgument\n val | \nI64Argument\n val | \nF64Argument\n val)", 
            "title": "type ArgumentType"
        }, 
        {
            "location": "/options-ArgumentType/#argumenttype", 
            "text": "type ArgumentType is\n  (None val | StringArgument val | I64Argument val | F64Argument val)", 
            "title": "ArgumentType"
        }, 
        {
            "location": "/options-ArgumentType/#type-alias-for", 
            "text": "( None  val |  StringArgument  val |  I64Argument  val |  F64Argument  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/options-ErrorReason/", 
            "text": "ErrorReason\n\n\ntype ErrorReason is\n  (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nUnrecognisedOption\n val | \nMissingArgument\n val | \nInvalidArgument\n val | \nAmbiguousMatch\n val)", 
            "title": "type ErrorReason"
        }, 
        {
            "location": "/options-ErrorReason/#errorreason", 
            "text": "type ErrorReason is\n  (UnrecognisedOption val | MissingArgument val | InvalidArgument val | AmbiguousMatch val)", 
            "title": "ErrorReason"
        }, 
        {
            "location": "/options-ErrorReason/#type-alias-for", 
            "text": "( UnrecognisedOption  val |  MissingArgument  val |  InvalidArgument  val |  AmbiguousMatch  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/options-ParsedOption/", 
            "text": "ParsedOption\n\n\ntype ParsedOption is\n  (String val , (None val | String val | I64 val | F64 val))\n\n\n\n\nType Alias For\n\n\n\n\n(\nString\n val , (\nNone\n val | \nString\n val | \nI64\n val | \nF64\n val))", 
            "title": "type ParsedOption"
        }, 
        {
            "location": "/options-ParsedOption/#parsedoption", 
            "text": "type ParsedOption is\n  (String val , (None val | String val | I64 val | F64 val))", 
            "title": "ParsedOption"
        }, 
        {
            "location": "/options-ParsedOption/#type-alias-for", 
            "text": "( String  val , ( None  val |  String  val |  I64  val |  F64  val))", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/options-ParseError/", 
            "text": "ParseError\n\n\ninterface ref ParseError\n\n\n\n\nPublic Functions\n\n\nreason\n\n\nfun box reason()\n: (UnrecognisedOption val | MissingArgument val | InvalidArgument val | \n    AmbiguousMatch val)\n\n\n\n\nReturns\n\n\n\n\n(\nUnrecognisedOption\n val | \nMissingArgument\n val | \nInvalidArgument\n val | \n    \nAmbiguousMatch\n val)\n\n\n\n\n\n\nreport\n\n\nfun box report(\n  out: OutStream tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nout: \nOutStream\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface ParseError"
        }, 
        {
            "location": "/options-ParseError/#parseerror", 
            "text": "interface ref ParseError", 
            "title": "ParseError"
        }, 
        {
            "location": "/options-ParseError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-ParseError/#reason", 
            "text": "fun box reason()\n: (UnrecognisedOption val | MissingArgument val | InvalidArgument val | \n    AmbiguousMatch val)", 
            "title": "reason"
        }, 
        {
            "location": "/options-ParseError/#returns", 
            "text": "( UnrecognisedOption  val |  MissingArgument  val |  InvalidArgument  val | \n     AmbiguousMatch  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/options-ParseError/#report", 
            "text": "fun box report(\n  out: OutStream tag)\n: None val", 
            "title": "report"
        }, 
        {
            "location": "/options-ParseError/#parameters", 
            "text": "out:  OutStream  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-ParseError/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/", 
            "text": "Options\n\n\nclass ref Options is\n  Iterator[((String val , (None val | String val | I64 val | F64 val)) | ParseError ref | None val)] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[((\nString\n val , (\nNone\n val | \nString\n val | \nI64\n val | \nF64\n val)) | \nParseError\n ref | \nNone\n val)] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  args: Array[String val] box,\n  fatal: Bool val = seq)\n: Options ref^\n\n\n\n\nParameters\n\n\n\n\nargs: \nArray\n[\nString\n val] box\n\n\nfatal: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nOptions\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nadd\n\n\nAdds a new named option to the parser configuration.\n\n\nfun ref add(\n  long: String val,\n  short: (None val | String val) = seq,\n  arg: (None val | StringArgument val | I64Argument val | \n    F64Argument val) = seq,\n  mode: (Required val | Optional val) = seq)\n: Options ref\n\n\n\n\nParameters\n\n\n\n\nlong: \nString\n val\n\n\nshort: (\nNone\n val | \nString\n val) = seq\n\n\narg: (\nNone\n val | \nStringArgument\n val | \nI64Argument\n val | \n    \nF64Argument\n val) = seq\n\n\nmode: (\nRequired\n val | \nOptional\n val) = seq\n\n\n\n\nReturns\n\n\n\n\nOptions\n ref\n\n\n\n\n\n\nremaining\n\n\nReturns all unprocessed command line arguments. After parsing all options,\nthis will only include positional arguments, potentially unrecognised and\nambiguous options and invalid arguments.\n\n\nfun ref remaining()\n: Array[String ref] ref\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n ref] ref\n\n\n\n\n\n\nhas_next\n\n\nParsing options is done if either an error occurs and fatal error reporting\nis turned on, or if all command line arguments have been processed.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nSkips all positional arguments and attemps to match named options. Returns\na ParsedOption on success, a ParseError on error, or None if no named\noptions are found.\n\n\nfun ref next()\n: ((String val , (None val | String val | I64 val | \n    F64 val)) | ParseError ref | None val)\n\n\n\n\nReturns\n\n\n\n\n((\nString\n val , (\nNone\n val | \nString\n val | \nI64\n val | \n    \nF64\n val)) | \nParseError\n ref | \nNone\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_strip\n\n\nStrips accepted options from the copied array of command line arguments.\n\n\nfun ref _strip(\n  opt: _Option ref,\n  matched: String ref,\n  start: ISize val,\n  finish: ISize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nopt: \n_Option\n ref\n\n\nmatched: \nString\n ref\n\n\nstart: \nISize\n val\n\n\nfinish: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_select\n\n\nSelects an option from the configuration depending on the current command\nline argument.\n\n\nfun ref _select(\n  candidate: String ref,\n  start: ISize val,\n  offset: ISize val,\n  finish: ISize val)\n: (_Option ref | ParseError ref)\n\n\n\n\nParameters\n\n\n\n\ncandidate: \nString\n ref\n\n\nstart: \nISize\n val\n\n\noffset: \nISize\n val\n\n\nfinish: \nISize\n val\n\n\n\n\nReturns\n\n\n\n\n(\n_Option\n ref | \nParseError\n ref)\n\n\n\n\n\n\n_skip\n\n\nSkips all non-options. Returns true if a named option has been found, false\notherwise.\n\n\nfun ref _skip()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_verify\n\n\nVerifies whether a parsed option from the command line is well-formed. That\nis, checking whether required or optional arguments are supplied. Returns\na ParsedOption on success, a ParseError otherwise.\n\n\nfun ref _verify(\n  opt: _Option ref,\n  combined: Bool val)\n: ((String val , (None val | String val | I64 val | \n    F64 val)) | ParseError ref)\n\n\n\n\nParameters\n\n\n\n\nopt: \n_Option\n ref\n\n\ncombined: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\n((\nString\n val , (\nNone\n val | \nString\n val | \nI64\n val | \n    \nF64\n val)) | \nParseError\n ref)", 
            "title": "class Options"
        }, 
        {
            "location": "/options-Options/#options", 
            "text": "class ref Options is\n  Iterator[((String val , (None val | String val | I64 val | F64 val)) | ParseError ref | None val)] ref", 
            "title": "Options"
        }, 
        {
            "location": "/options-Options/#implements", 
            "text": "Iterator [(( String  val , ( None  val |  String  val |  I64  val |  F64  val)) |  ParseError  ref |  None  val)] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/options-Options/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-Options/#create", 
            "text": "new ref create(\n  args: Array[String val] box,\n  fatal: Bool val = seq)\n: Options ref^", 
            "title": "create"
        }, 
        {
            "location": "/options-Options/#parameters", 
            "text": "args:  Array [ String  val] box  fatal:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Options/#returns", 
            "text": "Options  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-Options/#add", 
            "text": "Adds a new named option to the parser configuration.  fun ref add(\n  long: String val,\n  short: (None val | String val) = seq,\n  arg: (None val | StringArgument val | I64Argument val | \n    F64Argument val) = seq,\n  mode: (Required val | Optional val) = seq)\n: Options ref", 
            "title": "add"
        }, 
        {
            "location": "/options-Options/#parameters_1", 
            "text": "long:  String  val  short: ( None  val |  String  val) = seq  arg: ( None  val |  StringArgument  val |  I64Argument  val | \n     F64Argument  val) = seq  mode: ( Required  val |  Optional  val) = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Options/#returns_1", 
            "text": "Options  ref", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#remaining", 
            "text": "Returns all unprocessed command line arguments. After parsing all options,\nthis will only include positional arguments, potentially unrecognised and\nambiguous options and invalid arguments.  fun ref remaining()\n: Array[String ref] ref", 
            "title": "remaining"
        }, 
        {
            "location": "/options-Options/#returns_2", 
            "text": "Array [ String  ref] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#has_next", 
            "text": "Parsing options is done if either an error occurs and fatal error reporting\nis turned on, or if all command line arguments have been processed.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/options-Options/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#next", 
            "text": "Skips all positional arguments and attemps to match named options. Returns\na ParsedOption on success, a ParseError on error, or None if no named\noptions are found.  fun ref next()\n: ((String val , (None val | String val | I64 val | \n    F64 val)) | ParseError ref | None val)", 
            "title": "next"
        }, 
        {
            "location": "/options-Options/#returns_4", 
            "text": "(( String  val , ( None  val |  String  val |  I64  val | \n     F64  val)) |  ParseError  ref |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/options-Options/#_strip", 
            "text": "Strips accepted options from the copied array of command line arguments.  fun ref _strip(\n  opt: _Option ref,\n  matched: String ref,\n  start: ISize val,\n  finish: ISize val)\n: None val", 
            "title": "_strip"
        }, 
        {
            "location": "/options-Options/#parameters_2", 
            "text": "opt:  _Option  ref  matched:  String  ref  start:  ISize  val  finish:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Options/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#_select", 
            "text": "Selects an option from the configuration depending on the current command\nline argument.  fun ref _select(\n  candidate: String ref,\n  start: ISize val,\n  offset: ISize val,\n  finish: ISize val)\n: (_Option ref | ParseError ref)", 
            "title": "_select"
        }, 
        {
            "location": "/options-Options/#parameters_3", 
            "text": "candidate:  String  ref  start:  ISize  val  offset:  ISize  val  finish:  ISize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Options/#returns_6", 
            "text": "( _Option  ref |  ParseError  ref)", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#_skip", 
            "text": "Skips all non-options. Returns true if a named option has been found, false\notherwise.  fun ref _skip()\n: Bool val", 
            "title": "_skip"
        }, 
        {
            "location": "/options-Options/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-Options/#_verify", 
            "text": "Verifies whether a parsed option from the command line is well-formed. That\nis, checking whether required or optional arguments are supplied. Returns\na ParsedOption on success, a ParseError otherwise.  fun ref _verify(\n  opt: _Option ref,\n  combined: Bool val)\n: ((String val , (None val | String val | I64 val | \n    F64 val)) | ParseError ref)", 
            "title": "_verify"
        }, 
        {
            "location": "/options-Options/#parameters_4", 
            "text": "opt:  _Option  ref  combined:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-Options/#returns_8", 
            "text": "(( String  val , ( None  val |  String  val |  I64  val | \n     F64  val)) |  ParseError  ref)", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_Option/", 
            "text": "_Option\n\n\nclass ref _Option\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  long': String val,\n  short': (String val | None val),\n  arg': (None val | StringArgument val | I64Argument val | \n    F64Argument val),\n  mode': (Required val | Optional val))\n: _Option ref^\n\n\n\n\nParameters\n\n\n\n\nlong': \nString\n val\n\n\nshort': (\nString\n val | \nNone\n val)\n\n\narg': (\nNone\n val | \nStringArgument\n val | \nI64Argument\n val | \n    \nF64Argument\n val)\n\n\nmode': (\nRequired\n val | \nOptional\n val)\n\n\n\n\nReturns\n\n\n\n\n_Option\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet long: \nString\n val\n\n\n\n\n\n\n\n\nlet short: (\nString\n val | \nNone\n val)\n\n\n\n\n\n\n\n\nlet arg: (\nNone\n val | \nStringArgument\n val | \nI64Argument\n val | \n    \nF64Argument\n val)\n\n\n\n\n\n\n\n\nlet mode: (\nRequired\n val | \nOptional\n val)\n\n\n\n\n\n\nPublic Functions\n\n\nmatches\n\n\nfun box matches(\n  name: String box,\n  shortmatch: Bool val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n box\n\n\nshortmatch: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nhas_argument\n\n\nfun box has_argument()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nrequires_argument\n\n\nfun box requires_argument()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\naccepts\n\n\nfun box accepts(\n  argument: String box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nargument: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class _Option"
        }, 
        {
            "location": "/options-_Option/#_option", 
            "text": "class ref _Option", 
            "title": "_Option"
        }, 
        {
            "location": "/options-_Option/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_Option/#create", 
            "text": "new ref create(\n  long': String val,\n  short': (String val | None val),\n  arg': (None val | StringArgument val | I64Argument val | \n    F64Argument val),\n  mode': (Required val | Optional val))\n: _Option ref^", 
            "title": "create"
        }, 
        {
            "location": "/options-_Option/#parameters", 
            "text": "long':  String  val  short': ( String  val |  None  val)  arg': ( None  val |  StringArgument  val |  I64Argument  val | \n     F64Argument  val)  mode': ( Required  val |  Optional  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_Option/#returns", 
            "text": "_Option  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_Option/#public-fields", 
            "text": "let long:  String  val     let short: ( String  val |  None  val)     let arg: ( None  val |  StringArgument  val |  I64Argument  val | \n     F64Argument  val)     let mode: ( Required  val |  Optional  val)", 
            "title": "Public fields"
        }, 
        {
            "location": "/options-_Option/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_Option/#matches", 
            "text": "fun box matches(\n  name: String box,\n  shortmatch: Bool val)\n: Bool val", 
            "title": "matches"
        }, 
        {
            "location": "/options-_Option/#parameters_1", 
            "text": "name:  String  box  shortmatch:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_Option/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_Option/#has_argument", 
            "text": "fun box has_argument()\n: Bool val", 
            "title": "has_argument"
        }, 
        {
            "location": "/options-_Option/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_Option/#requires_argument", 
            "text": "fun box requires_argument()\n: Bool val", 
            "title": "requires_argument"
        }, 
        {
            "location": "/options-_Option/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_Option/#accepts", 
            "text": "fun box accepts(\n  argument: String box)\n: Bool val", 
            "title": "accepts"
        }, 
        {
            "location": "/options-_Option/#parameters_2", 
            "text": "argument:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_Option/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_ErrorPrinter/", 
            "text": "_ErrorPrinter\n\n\nclass ref _ErrorPrinter\n\n\n\n\nConstructors\n\n\n_ambiguous\n\n\nnew ref _ambiguous(\n  matches: Array[_Option ref] ref)\n: _ErrorPrinter ref^\n\n\n\n\nParameters\n\n\n\n\nmatches: \nArray\n[\n_Option\n ref] ref\n\n\n\n\nReturns\n\n\n\n\n_ErrorPrinter\n ref^\n\n\n\n\n\n\n_unrecognised\n\n\nnew ref _unrecognised(\n  option: String box)\n: _ErrorPrinter ref^\n\n\n\n\nParameters\n\n\n\n\noption: \nString\n box\n\n\n\n\nReturns\n\n\n\n\n_ErrorPrinter\n ref^\n\n\n\n\n\n\n_invalid\n\n\nnew ref _invalid(\n  argument: String box,\n  option: _Option ref)\n: _ErrorPrinter ref^\n\n\n\n\nParameters\n\n\n\n\nargument: \nString\n box\n\n\noption: \n_Option\n ref\n\n\n\n\nReturns\n\n\n\n\n_ErrorPrinter\n ref^\n\n\n\n\n\n\n_missing\n\n\nnew ref _missing(\n  option: _Option ref)\n: _ErrorPrinter ref^\n\n\n\n\nParameters\n\n\n\n\noption: \n_Option\n ref\n\n\n\n\nReturns\n\n\n\n\n_ErrorPrinter\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nreason\n\n\nfun box reason()\n: (UnrecognisedOption val | MissingArgument val | InvalidArgument val | \n    AmbiguousMatch val)\n\n\n\n\nReturns\n\n\n\n\n(\nUnrecognisedOption\n val | \nMissingArgument\n val | \nInvalidArgument\n val | \n    \nAmbiguousMatch\n val)\n\n\n\n\n\n\nreport\n\n\nfun box report(\n  out: OutStream tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nout: \nOutStream\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class _ErrorPrinter"
        }, 
        {
            "location": "/options-_ErrorPrinter/#_errorprinter", 
            "text": "class ref _ErrorPrinter", 
            "title": "_ErrorPrinter"
        }, 
        {
            "location": "/options-_ErrorPrinter/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-_ErrorPrinter/#_ambiguous", 
            "text": "new ref _ambiguous(\n  matches: Array[_Option ref] ref)\n: _ErrorPrinter ref^", 
            "title": "_ambiguous"
        }, 
        {
            "location": "/options-_ErrorPrinter/#parameters", 
            "text": "matches:  Array [ _Option  ref] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_ErrorPrinter/#returns", 
            "text": "_ErrorPrinter  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_ErrorPrinter/#_unrecognised", 
            "text": "new ref _unrecognised(\n  option: String box)\n: _ErrorPrinter ref^", 
            "title": "_unrecognised"
        }, 
        {
            "location": "/options-_ErrorPrinter/#parameters_1", 
            "text": "option:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_ErrorPrinter/#returns_1", 
            "text": "_ErrorPrinter  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_ErrorPrinter/#_invalid", 
            "text": "new ref _invalid(\n  argument: String box,\n  option: _Option ref)\n: _ErrorPrinter ref^", 
            "title": "_invalid"
        }, 
        {
            "location": "/options-_ErrorPrinter/#parameters_2", 
            "text": "argument:  String  box  option:  _Option  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_ErrorPrinter/#returns_2", 
            "text": "_ErrorPrinter  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_ErrorPrinter/#_missing", 
            "text": "new ref _missing(\n  option: _Option ref)\n: _ErrorPrinter ref^", 
            "title": "_missing"
        }, 
        {
            "location": "/options-_ErrorPrinter/#parameters_3", 
            "text": "option:  _Option  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_ErrorPrinter/#returns_3", 
            "text": "_ErrorPrinter  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_ErrorPrinter/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-_ErrorPrinter/#reason", 
            "text": "fun box reason()\n: (UnrecognisedOption val | MissingArgument val | InvalidArgument val | \n    AmbiguousMatch val)", 
            "title": "reason"
        }, 
        {
            "location": "/options-_ErrorPrinter/#returns_4", 
            "text": "( UnrecognisedOption  val |  MissingArgument  val |  InvalidArgument  val | \n     AmbiguousMatch  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/options-_ErrorPrinter/#report", 
            "text": "fun box report(\n  out: OutStream tag)\n: None val", 
            "title": "report"
        }, 
        {
            "location": "/options-_ErrorPrinter/#parameters_4", 
            "text": "out:  OutStream  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-_ErrorPrinter/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-EnvVars/", 
            "text": "EnvVars\n\n\nprimitive val EnvVars\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: EnvVars val^\n\n\n\n\nReturns\n\n\n\n\nEnvVars\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nTurns an array of strings that look like environment variables, ie\nkey=value, into a map from string to string.\n\n\nfun box apply(\n  from: Array[String val] val)\n: HashMap[String val, String val, HashEq[String val] val] val\n\n\n\n\nParameters\n\n\n\n\nfrom: \nArray\n[\nString\n val] val\n\n\n\n\nReturns\n\n\n\n\nHashMap\n[\nString\n val, \nString\n val, \nHashEq\n[\nString\n val] val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: EnvVars val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nEnvVars\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: EnvVars val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nEnvVars\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive EnvVars"
        }, 
        {
            "location": "/options-EnvVars/#envvars", 
            "text": "primitive val EnvVars", 
            "title": "EnvVars"
        }, 
        {
            "location": "/options-EnvVars/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/options-EnvVars/#create", 
            "text": "new val create()\n: EnvVars val^", 
            "title": "create"
        }, 
        {
            "location": "/options-EnvVars/#returns", 
            "text": "EnvVars  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/options-EnvVars/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/options-EnvVars/#apply", 
            "text": "Turns an array of strings that look like environment variables, ie\nkey=value, into a map from string to string.  fun box apply(\n  from: Array[String val] val)\n: HashMap[String val, String val, HashEq[String val] val] val", 
            "title": "apply"
        }, 
        {
            "location": "/options-EnvVars/#parameters", 
            "text": "from:  Array [ String  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-EnvVars/#returns_1", 
            "text": "HashMap [ String  val,  String  val,  HashEq [ String  val] val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-EnvVars/#eq", 
            "text": "fun box eq(\n  that: EnvVars val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/options-EnvVars/#parameters_1", 
            "text": "that:  EnvVars  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-EnvVars/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/options-EnvVars/#ne", 
            "text": "fun box ne(\n  that: EnvVars val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/options-EnvVars/#parameters_2", 
            "text": "that:  EnvVars  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/options-EnvVars/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench--index/", 
            "text": "The PonyBench package provides a microbenchmarking framework. It is designed to\neasily benchmark synchronous and asynchronous operations.\n\n\nExample program\n\n\nThe following is a complete program with multiple trivial benchmarks followed\nby their output.\n\n\nuse \nponybench\n\nuse \npromises\n\n\nactor Main\n  new create(env: Env) =\n\n    let bench = PonyBench(env)\n\n    // benchmark Fib with different inputs\n    bench[USize](\nfib 5\n, {() =\n Fib(5) })\n    bench[USize](\nfib 10\n, {() =\n Fib(10) })\n    bench[USize](\nfib 20\n, {() =\n Fib(20) })\n    bench[USize](\nfib 40\n, {() =\n Fib(40) })\n\n    // show what happens when a benchmark fails\n    bench[String](\nfail\n, {(): String ? =\n error })\n\n    // async benchmark\n    bench.async[USize](\nasync\n, {() =\n Promise[USize] .\n apply(0) })\n\n    // async benchmark timeout\n    bench.async[USize](\ntimeout\n, {() =\n Promise[USize] }, 1_000_000)\n\n    // benchmarks with set ops\n    bench[USize](\nadd\n, {() =\n 1 + 2 }, 10_000_000)\n    bench[USize](\nsub\n, {() =\n 2 - 1 }, 10_000_000)\n\nprimitive Fib\n  fun apply(n: USize): USize =\n\n    if n \n 2 then\n      n\n    else\n      apply(n - 1) + apply(n - 2)\n    end\n\n\n\n\nOutput:\n\n\nfib 5       50000000            33 ns/op\nfib 10       5000000           371 ns/op\nfib 20         30000         45310 ns/op\nfib 40             2     684868666 ns/op\n**** FAILED Benchmark: fail\nasync         200000         26512 ns/op\n**** FAILED Benchmark: timeout (timeout)\nadd         10000000             2 ns/op\nsub         10000000             2 ns/op\n\n\n\n\nPublic Types\n\n\n\n\nactor PonyBench\n\n\n\n\nPrivate Types\n\n\n\n\ninterface _BenchNotify\n\n\ntrait _Benchmark\n\n\nactor _BenchAsync\n\n\nactor _Bench\n\n\nactor _AutoBench\n\n\nactor _AutoBenchAsync\n\n\nclass _AutoOps", 
            "title": "Package"
        }, 
        {
            "location": "/ponybench--index/#example-program", 
            "text": "The following is a complete program with multiple trivial benchmarks followed\nby their output.  use  ponybench \nuse  promises \n\nactor Main\n  new create(env: Env) = \n    let bench = PonyBench(env)\n\n    // benchmark Fib with different inputs\n    bench[USize]( fib 5 , {() =  Fib(5) })\n    bench[USize]( fib 10 , {() =  Fib(10) })\n    bench[USize]( fib 20 , {() =  Fib(20) })\n    bench[USize]( fib 40 , {() =  Fib(40) })\n\n    // show what happens when a benchmark fails\n    bench[String]( fail , {(): String ? =  error })\n\n    // async benchmark\n    bench.async[USize]( async , {() =  Promise[USize] .  apply(0) })\n\n    // async benchmark timeout\n    bench.async[USize]( timeout , {() =  Promise[USize] }, 1_000_000)\n\n    // benchmarks with set ops\n    bench[USize]( add , {() =  1 + 2 }, 10_000_000)\n    bench[USize]( sub , {() =  2 - 1 }, 10_000_000)\n\nprimitive Fib\n  fun apply(n: USize): USize = \n    if n   2 then\n      n\n    else\n      apply(n - 1) + apply(n - 2)\n    end  Output:  fib 5       50000000            33 ns/op\nfib 10       5000000           371 ns/op\nfib 20         30000         45310 ns/op\nfib 40             2     684868666 ns/op\n**** FAILED Benchmark: fail\nasync         200000         26512 ns/op\n**** FAILED Benchmark: timeout (timeout)\nadd         10000000             2 ns/op\nsub         10000000             2 ns/op", 
            "title": "Example program"
        }, 
        {
            "location": "/ponybench--index/#public-types", 
            "text": "actor PonyBench", 
            "title": "Public Types"
        }, 
        {
            "location": "/ponybench--index/#private-types", 
            "text": "interface _BenchNotify  trait _Benchmark  actor _BenchAsync  actor _Bench  actor _AutoBench  actor _AutoBenchAsync  class _AutoOps", 
            "title": "Private Types"
        }, 
        {
            "location": "/ponybench-PonyBench/", 
            "text": "PonyBench\n\n\nactor tag PonyBench\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  env: Env val)\n: PonyBench tag^\n\n\n\n\nParameters\n\n\n\n\nenv: \nEnv\n val\n\n\n\n\nReturns\n\n\n\n\nPonyBench\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply[A: \nAny\n #share]\n\n\nBenchmark the function \nf\n by calling it repeatedly and output a simple\naverage of the total run time over the amount of times \nf\n is called. This\namount can be set manually as \nops\n or to the default value of 0 which will\ntrigger the benchmark runner to increase the value of \nops\n until it is\nsatisfied with the stability of the benchmark.\n\n\nbe apply[A: Any #share](\n  name: String val,\n  f: {(): A ?}[A] val,\n  ops: U64 val = seq)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nf: {(): A ?}[A] val\n\n\nops: \nU64\n val = seq\n\n\n\n\n\n\nasync[A: \nAny\n #share]\n\n\nBenchmark the time taken for the promise returned by \nf\n to be fulfilled.\nIf \ntimeout\n is greater than 0, the benchmark will fail if the promise is\nnot fulfilled within the time given. This check for timeout is done before\nthe benchmarks are counted towards an average run time.\n\n\nbe async[A: Any #share](\n  name: String val,\n  f: {(): Promise[A] ?}[A] val,\n  timeout: U64 val = seq,\n  ops: U64 val = seq)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nf: {(): Promise[A] ?}[A] val\n\n\ntimeout: \nU64\n val = seq\n\n\nops: \nU64\n val = seq\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_result\n\n\nbe _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nops: \nU64\n val\n\n\nnspo: \nU64\n val\n\n\n\n\n\n\n_failure\n\n\nbe _failure(\n  name: String val,\n  timeout: Bool val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\ntimeout: \nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_add\n\n\nfun ref _add(\n  name: String val,\n  b: _Benchmark tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nb: \n_Benchmark\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_remove\n\n\nfun ref _remove(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_next\n\n\nfun ref _next()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor PonyBench"
        }, 
        {
            "location": "/ponybench-PonyBench/#ponybench", 
            "text": "actor tag PonyBench", 
            "title": "PonyBench"
        }, 
        {
            "location": "/ponybench-PonyBench/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponybench-PonyBench/#create", 
            "text": "new tag create(\n  env: Env val)\n: PonyBench tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters", 
            "text": "env:  Env  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#returns", 
            "text": "PonyBench  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-PonyBench/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponybench-PonyBench/#apply91a-any-share93", 
            "text": "Benchmark the function  f  by calling it repeatedly and output a simple\naverage of the total run time over the amount of times  f  is called. This\namount can be set manually as  ops  or to the default value of 0 which will\ntrigger the benchmark runner to increase the value of  ops  until it is\nsatisfied with the stability of the benchmark.  be apply[A: Any #share](\n  name: String val,\n  f: {(): A ?}[A] val,\n  ops: U64 val = seq)", 
            "title": "apply[A: Any #share]"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters_1", 
            "text": "name:  String  val  f: {(): A ?}[A] val  ops:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#async91a-any-share93", 
            "text": "Benchmark the time taken for the promise returned by  f  to be fulfilled.\nIf  timeout  is greater than 0, the benchmark will fail if the promise is\nnot fulfilled within the time given. This check for timeout is done before\nthe benchmarks are counted towards an average run time.  be async[A: Any #share](\n  name: String val,\n  f: {(): Promise[A] ?}[A] val,\n  timeout: U64 val = seq,\n  ops: U64 val = seq)", 
            "title": "async[A: Any #share]"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters_2", 
            "text": "name:  String  val  f: {(): Promise[A] ?}[A] val  timeout:  U64  val = seq  ops:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponybench-PonyBench/#_result", 
            "text": "be _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)", 
            "title": "_result"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters_3", 
            "text": "name:  String  val  ops:  U64  val  nspo:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#_failure", 
            "text": "be _failure(\n  name: String val,\n  timeout: Bool val)", 
            "title": "_failure"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters_4", 
            "text": "name:  String  val  timeout:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponybench-PonyBench/#_add", 
            "text": "fun ref _add(\n  name: String val,\n  b: _Benchmark tag)\n: None val", 
            "title": "_add"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters_5", 
            "text": "name:  String  val  b:  _Benchmark  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-PonyBench/#_remove", 
            "text": "fun ref _remove(\n  name: String val)\n: None val", 
            "title": "_remove"
        }, 
        {
            "location": "/ponybench-PonyBench/#parameters_6", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-PonyBench/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-PonyBench/#_next", 
            "text": "fun ref _next()\n: None val", 
            "title": "_next"
        }, 
        {
            "location": "/ponybench-PonyBench/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_BenchNotify/", 
            "text": "_BenchNotify\n\n\ninterface tag _BenchNotify\n\n\n\n\nPrivate Behaviours\n\n\n_result\n\n\nbe _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nops: \nU64\n val\n\n\nnspo: \nU64\n val\n\n\n\n\n\n\n_failure\n\n\nbe _failure(\n  name: String val,\n  timeout: Bool val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\ntimeout: \nBool\n val", 
            "title": "interface _BenchNotify"
        }, 
        {
            "location": "/ponybench-_BenchNotify/#_benchnotify", 
            "text": "interface tag _BenchNotify", 
            "title": "_BenchNotify"
        }, 
        {
            "location": "/ponybench-_BenchNotify/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponybench-_BenchNotify/#_result", 
            "text": "be _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)", 
            "title": "_result"
        }, 
        {
            "location": "/ponybench-_BenchNotify/#parameters", 
            "text": "name:  String  val  ops:  U64  val  nspo:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_BenchNotify/#_failure", 
            "text": "be _failure(\n  name: String val,\n  timeout: Bool val)", 
            "title": "_failure"
        }, 
        {
            "location": "/ponybench-_BenchNotify/#parameters_1", 
            "text": "name:  String  val  timeout:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_Benchmark/", 
            "text": "_Benchmark\n\n\ntrait tag _Benchmark\n\n\n\n\nPublic Behaviours\n\n\nrun\n\n\nbe run()", 
            "title": "trait _Benchmark"
        }, 
        {
            "location": "/ponybench-_Benchmark/#_benchmark", 
            "text": "trait tag _Benchmark", 
            "title": "_Benchmark"
        }, 
        {
            "location": "/ponybench-_Benchmark/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponybench-_Benchmark/#run", 
            "text": "be run()", 
            "title": "run"
        }, 
        {
            "location": "/ponybench-_BenchAsync/", 
            "text": "_BenchAsync[A: \nAny\n #share]\n\n\nactor tag _BenchAsync[A: Any #share] is\n  _Benchmark tag\n\n\n\n\nImplements\n\n\n\n\n_Benchmark\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): Promise[A] ?}[A] val,\n  ops: U64 val,\n  timeout: U64 val = seq)\n: _BenchAsync[A] tag^\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nnotify: \n_BenchNotify\n tag\n\n\nf: {(): Promise[A] ?}[A] val\n\n\nops: \nU64\n val\n\n\ntimeout: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\n_BenchAsync\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nrun\n\n\nbe run()\n\n\n\n\n\n\ncancel\n\n\nbe cancel()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_run\n\n\nbe _run(\n  i: U64 val)\n\n\n\n\nParameters\n\n\n\n\ni: \nU64\n val", 
            "title": "actor _BenchAsync"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#_benchasync91a-any-share93", 
            "text": "actor tag _BenchAsync[A: Any #share] is\n  _Benchmark tag", 
            "title": "_BenchAsync[A: Any #share]"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#implements", 
            "text": "_Benchmark  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#create", 
            "text": "new tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): Promise[A] ?}[A] val,\n  ops: U64 val,\n  timeout: U64 val = seq)\n: _BenchAsync[A] tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#parameters", 
            "text": "name:  String  val  notify:  _BenchNotify  tag  f: {(): Promise[A] ?}[A] val  ops:  U64  val  timeout:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#returns", 
            "text": "_BenchAsync [A] tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#run", 
            "text": "be run()", 
            "title": "run"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#cancel", 
            "text": "be cancel()", 
            "title": "cancel"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#_run", 
            "text": "be _run(\n  i: U64 val)", 
            "title": "_run"
        }, 
        {
            "location": "/ponybench-_BenchAsync/#parameters_1", 
            "text": "i:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_Bench/", 
            "text": "_Bench[A: \nAny\n #share]\n\n\nactor tag _Bench[A: Any #share] is\n  _Benchmark tag\n\n\n\n\nImplements\n\n\n\n\n_Benchmark\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): A ?}[A] val,\n  ops: U64 val)\n: _Bench[A] tag^\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nnotify: \n_BenchNotify\n tag\n\n\nf: {(): A ?}[A] val\n\n\nops: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n_Bench\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nrun\n\n\nbe run()", 
            "title": "actor _Bench"
        }, 
        {
            "location": "/ponybench-_Bench/#_bench91a-any-share93", 
            "text": "actor tag _Bench[A: Any #share] is\n  _Benchmark tag", 
            "title": "_Bench[A: Any #share]"
        }, 
        {
            "location": "/ponybench-_Bench/#implements", 
            "text": "_Benchmark  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/ponybench-_Bench/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponybench-_Bench/#create", 
            "text": "new tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): A ?}[A] val,\n  ops: U64 val)\n: _Bench[A] tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponybench-_Bench/#parameters", 
            "text": "name:  String  val  notify:  _BenchNotify  tag  f: {(): A ?}[A] val  ops:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_Bench/#returns", 
            "text": "_Bench [A] tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_Bench/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponybench-_Bench/#run", 
            "text": "be run()", 
            "title": "run"
        }, 
        {
            "location": "/ponybench-_AutoBench/", 
            "text": "_AutoBench[A: \nAny\n #share]\n\n\nactor tag _AutoBench[A: Any #share] is\n  _Benchmark tag\n\n\n\n\nImplements\n\n\n\n\n_Benchmark\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): A ?}[A] val,\n  bench_time: U64 val = seq,\n  max_ops: U64 val = seq)\n: _AutoBench[A] tag^\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nnotify: \n_BenchNotify\n tag\n\n\nf: {(): A ?}[A] val\n\n\nbench_time: \nU64\n val = seq\n\n\nmax_ops: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\n_AutoBench\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nrun\n\n\nbe run()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_result\n\n\nbe _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nops: \nU64\n val\n\n\nnspo: \nU64\n val\n\n\n\n\n\n\n_failure\n\n\nbe _failure(\n  name: String val,\n  timeout: Bool val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\ntimeout: \nBool\n val", 
            "title": "actor _AutoBench"
        }, 
        {
            "location": "/ponybench-_AutoBench/#_autobench91a-any-share93", 
            "text": "actor tag _AutoBench[A: Any #share] is\n  _Benchmark tag", 
            "title": "_AutoBench[A: Any #share]"
        }, 
        {
            "location": "/ponybench-_AutoBench/#implements", 
            "text": "_Benchmark  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/ponybench-_AutoBench/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponybench-_AutoBench/#create", 
            "text": "new tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): A ?}[A] val,\n  bench_time: U64 val = seq,\n  max_ops: U64 val = seq)\n: _AutoBench[A] tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponybench-_AutoBench/#parameters", 
            "text": "name:  String  val  notify:  _BenchNotify  tag  f: {(): A ?}[A] val  bench_time:  U64  val = seq  max_ops:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoBench/#returns", 
            "text": "_AutoBench [A] tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_AutoBench/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponybench-_AutoBench/#run", 
            "text": "be run()", 
            "title": "run"
        }, 
        {
            "location": "/ponybench-_AutoBench/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponybench-_AutoBench/#_result", 
            "text": "be _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)", 
            "title": "_result"
        }, 
        {
            "location": "/ponybench-_AutoBench/#parameters_1", 
            "text": "name:  String  val  ops:  U64  val  nspo:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoBench/#_failure", 
            "text": "be _failure(\n  name: String val,\n  timeout: Bool val)", 
            "title": "_failure"
        }, 
        {
            "location": "/ponybench-_AutoBench/#parameters_2", 
            "text": "name:  String  val  timeout:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/", 
            "text": "_AutoBenchAsync[A: \nAny\n #share]\n\n\nactor tag _AutoBenchAsync[A: Any #share] is\n  _Benchmark tag\n\n\n\n\nImplements\n\n\n\n\n_Benchmark\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): Promise[A] ?}[A] val,\n  timeout: U64 val,\n  bench_time: U64 val = seq,\n  max_ops: U64 val = seq)\n: _AutoBenchAsync[A] tag^\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nnotify: \n_BenchNotify\n tag\n\n\nf: {(): Promise[A] ?}[A] val\n\n\ntimeout: \nU64\n val\n\n\nbench_time: \nU64\n val = seq\n\n\nmax_ops: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\n_AutoBenchAsync\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nrun\n\n\nbe run()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_result\n\n\nbe _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\nops: \nU64\n val\n\n\nnspo: \nU64\n val\n\n\n\n\n\n\n_failure\n\n\nbe _failure(\n  name: String val,\n  timeout: Bool val)\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\ntimeout: \nBool\n val", 
            "title": "actor _AutoBenchAsync"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#_autobenchasync91a-any-share93", 
            "text": "actor tag _AutoBenchAsync[A: Any #share] is\n  _Benchmark tag", 
            "title": "_AutoBenchAsync[A: Any #share]"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#implements", 
            "text": "_Benchmark  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#create", 
            "text": "new tag create(\n  name: String val,\n  notify: _BenchNotify tag,\n  f: {(): Promise[A] ?}[A] val,\n  timeout: U64 val,\n  bench_time: U64 val = seq,\n  max_ops: U64 val = seq)\n: _AutoBenchAsync[A] tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#parameters", 
            "text": "name:  String  val  notify:  _BenchNotify  tag  f: {(): Promise[A] ?}[A] val  timeout:  U64  val  bench_time:  U64  val = seq  max_ops:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#returns", 
            "text": "_AutoBenchAsync [A] tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#run", 
            "text": "be run()", 
            "title": "run"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#_result", 
            "text": "be _result(\n  name: String val,\n  ops: U64 val,\n  nspo: U64 val)", 
            "title": "_result"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#parameters_1", 
            "text": "name:  String  val  ops:  U64  val  nspo:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#_failure", 
            "text": "be _failure(\n  name: String val,\n  timeout: Bool val)", 
            "title": "_failure"
        }, 
        {
            "location": "/ponybench-_AutoBenchAsync/#parameters_2", 
            "text": "name:  String  val  timeout:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoOps/", 
            "text": "_AutoOps\n\n\nclass ref _AutoOps\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  bench_time: U64 val,\n  max_ops: U64 val)\n: _AutoOps ref^\n\n\n\n\nParameters\n\n\n\n\nbench_time: \nU64\n val\n\n\nmax_ops: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n_AutoOps\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  ops: U64 val,\n  time: U64 val,\n  nspo: U64 val)\n: (U64 val | None val)\n\n\n\n\nParameters\n\n\n\n\nops: \nU64\n val\n\n\ntime: \nU64\n val\n\n\nnspo: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val | \nNone\n val)\n\n\n\n\n\n\nPrivate Functions\n\n\n_round_down_10\n\n\nRound down to the nearest power of 10.\n\n\nfun box _round_down_10(\n  x: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_round_up\n\n\nRound x up to a number of the form [1ex, 2ex, 3ex, 5ex].\n\n\nfun box _round_up(\n  x: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "class _AutoOps"
        }, 
        {
            "location": "/ponybench-_AutoOps/#_autoops", 
            "text": "class ref _AutoOps", 
            "title": "_AutoOps"
        }, 
        {
            "location": "/ponybench-_AutoOps/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponybench-_AutoOps/#create", 
            "text": "new ref create(\n  bench_time: U64 val,\n  max_ops: U64 val)\n: _AutoOps ref^", 
            "title": "create"
        }, 
        {
            "location": "/ponybench-_AutoOps/#parameters", 
            "text": "bench_time:  U64  val  max_ops:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoOps/#returns", 
            "text": "_AutoOps  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_AutoOps/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponybench-_AutoOps/#apply", 
            "text": "fun box apply(\n  ops: U64 val,\n  time: U64 val,\n  nspo: U64 val)\n: (U64 val | None val)", 
            "title": "apply"
        }, 
        {
            "location": "/ponybench-_AutoOps/#parameters_1", 
            "text": "ops:  U64  val  time:  U64  val  nspo:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoOps/#returns_1", 
            "text": "( U64  val |  None  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_AutoOps/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponybench-_AutoOps/#_round_down_10", 
            "text": "Round down to the nearest power of 10.  fun box _round_down_10(\n  x: U64 val)\n: U64 val", 
            "title": "_round_down_10"
        }, 
        {
            "location": "/ponybench-_AutoOps/#parameters_2", 
            "text": "x:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoOps/#returns_2", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponybench-_AutoOps/#_round_up", 
            "text": "Round x up to a number of the form [1ex, 2ex, 3ex, 5ex].  fun box _round_up(\n  x: U64 val)\n: U64 val", 
            "title": "_round_up"
        }, 
        {
            "location": "/ponybench-_AutoOps/#parameters_3", 
            "text": "x:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponybench-_AutoOps/#returns_3", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest--index/", 
            "text": "PonyTest package\n\n\nThe PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.\n\n\nTo help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:\n\n\n\n\nbuiltin\n\n\ntime\n\n\ncollections\n\n\n\n\nEach unit test is a class, with a single test function. By default all tests\nrun concurrently.\n\n\nEach test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.\n\n\nWhen any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.\n\n\nExample program\n\n\nTo use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.\n\n\nThe following is a complete program with 2 trivial tests.\n\n\nuse \nponytest\n\n\nactor Main is TestList\n  new create(env: Env) =\n\n    PonyTest(env, this)\n\n  new make() =\n\n    None\n\n  fun tag tests(test: PonyTest) =\n\n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =\n \naddition\n\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =\n \nsubtraction\n\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[U32](2, 4 - 2)\n\n\n\n\nThe make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.\n\n\nMain.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.\n\n\nTest names\n\n\nTests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.\n\n\nArbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.\n\n\nYou can skip any tests whose names start with a given string by using the\n\n--exclude=[prefix]\n command line option.\n\n\nYou can run only tests whose names start with a given string by using the\n\n--only=[prefix]\n command line option.\n\n\nAggregation\n\n\nOften it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.\n\n\nThis can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages \nfoo\n and \nbar\n.\n\n\nuse \nponytest\n\nuse foo = \nfoo\n\nuse bar = \nbar\n\n\nactor Main is TestList\n  new create(env: Env) =\n\n    PonyTest(env, this)\n\n  new make() =\n\n    None\n\n  fun tag tests(test: PonyTest) =\n\n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)\n\n\n\n\nAggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.\n\n\nLong tests\n\n\nSimple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.\n\n\nLong tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.\n\n\nThe complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.\n\n\nSince failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.\n\n\nOn a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.\n\n\nNote that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.\n\n\nTimeouts should not be used as the standard method of detecting if a test has\nfailed.\n\n\nExclusion groups\n\n\nBy default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.\n\n\nNo tests that are in the same exclusion group will be run concurrently.\n\n\nExclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.\n\n\nThe command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.\n\n\nLabels\n\n\nTest can have label. Labels are used to filter which tests are run, by setting\ncommand line argument \n--label=[some custom label]\n. It can be used to separate\nunit tests from integration tests.\n\n\nBy default label is empty. You can set it up by overriding \nlabel(): String\n\nmethod in unit test.\n\n\nuse \nponytest\n\n\nclass iso _I8AddTest is UnitTest\n  fun name(): String =\n \n_I8AddTest\n\n  fun label(): String =\n \nsimple\n\n  fun apply(h: TestHelper) =\n\n    h.assert_eq[I8](1, 1)\n\n\n\n\n\nTear down\n\n\nEach unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.\n\n\nThe tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.\n\n\nWhen a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.\n\n\nThe test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.\n\n\nPublic Types\n\n\n\n\ntrait UnitTest\n\n\ntrait TestList\n\n\ninterface ITest\n\n\nclass TestHelper\n\n\nactor PonyTest\n\n\n\n\nPrivate Types\n\n\n\n\ntrait _Group\n\n\nactor _ExclusiveGroup\n\n\nactor _SimultaneousGroup\n\n\nprimitive _Color", 
            "title": "Package"
        }, 
        {
            "location": "/ponytest--index/#ponytest-package", 
            "text": "The PonyTest package provides a unit testing framework. It is designed to be as\nsimple as possible to use, both for the unit test writer and the user running\nthe tests.  To help simplify test writing and distribution this package depends on as few\nother packages as possible. Currently the required packages are:   builtin  time  collections   Each unit test is a class, with a single test function. By default all tests\nrun concurrently.  Each test run is provided with a helper object. This provides logging and\nassertion functions. By default log messages are only shown for tests that\nfail.  When any assertion function fails the test is counted as a fail. However, tests\ncan also indicate failure by raising an error in the test function.", 
            "title": "PonyTest package"
        }, 
        {
            "location": "/ponytest--index/#example-program", 
            "text": "To use PonyTest simply write a class for each test and a TestList type that\ntells the PonyTest object about the tests. Typically the TestList will be Main\nfor the package.  The following is a complete program with 2 trivial tests.  use  ponytest \n\nactor Main is TestList\n  new create(env: Env) = \n    PonyTest(env, this)\n\n  new make() = \n    None\n\n  fun tag tests(test: PonyTest) = \n    test(_TestAdd)\n    test(_TestSub)\n\nclass iso _TestAdd is UnitTest\n  fun name():String =   addition \n\n  fun apply(h: TestHelper) = \n    h.assert_eq[U32](4, 2 + 2)\n\nclass iso _TestSub is UnitTest\n  fun name():String =   subtraction \n\n  fun apply(h: TestHelper) = \n    h.assert_eq[U32](2, 4 - 2)  The make() constructor is not needed for this example. However, it allows for\neasy aggregation of tests (see below) so it is recommended that all test Mains\nprovide it.  Main.create() is called only for program invocations on the current package.\nMain.make() is called during aggregation. If so desired extra code can be added\nto either of these constructors to perform additional tasks.", 
            "title": "Example program"
        }, 
        {
            "location": "/ponytest--index/#test-names", 
            "text": "Tests are identified by names, which are used when printing test results and on\nthe command line to select which tests to run. These names are independent of\nthe names of the test classes in the Pony source code.  Arbitrary strings can be used for these names, but for large projects it is\nstrongly recommended to use a hierarchical naming scheme to make it easier to\nselect groups of tests.  You can skip any tests whose names start with a given string by using the --exclude=[prefix]  command line option.  You can run only tests whose names start with a given string by using the --only=[prefix]  command line option.", 
            "title": "Test names"
        }, 
        {
            "location": "/ponytest--index/#aggregation", 
            "text": "Often it is desirable to run a collection of unit tests from multiple different\nsource files. For example, if several packages within a bundle each have their\nown unit tests it may be useful to run all tests for the bundle together.  This can be achieved by writing an aggregate test list class, which calls the\nlist function for each package. The following is an example that aggregates the\ntests from packages  foo  and  bar .  use  ponytest \nuse foo =  foo \nuse bar =  bar \n\nactor Main is TestList\n  new create(env: Env) = \n    PonyTest(env, this)\n\n  new make() = \n    None\n\n  fun tag tests(test: PonyTest) = \n    foo.Main.make().tests(test)\n    bar.Main.make().tests(test)  Aggregate test classes may themselves be aggregated. Every test list class may\ncontain any combination of its own tests and aggregated lists.", 
            "title": "Aggregation"
        }, 
        {
            "location": "/ponytest--index/#long-tests", 
            "text": "Simple tests run within a single function. When that function exits, either\nreturning or raising an error, the test is complete. This is not viable for\ntests that need to use actors.  Long tests allow for delayed completion. Any test can call long_test() on its\nTestHelper to indicate that it needs to keep running. When the test is finally\ncomplete it calls complete() on its TestHelper.  The complete() function takes a Bool parameter to specify whether the test was\na success. If any asserts fail then the test will be considered a failure\nregardless of the value of this parameter. However, complete() must still be\ncalled.  Since failing tests may hang, a timeout must be specified for each long test.\nWhen the test function exits a timer is started with the specified timeout. If\nthis timer fires before complete() is called the test is marked as a failure\nand the timeout is reported.  On a timeout the timed_out() function is called on the unit test object. This\nshould perform whatever test specific tidy up is required to allow the program\nto exit. There is no need to call complete() if a timeout occurs, although it\nis not an error to do so.  Note that the timeout is only relevant when a test hangs and would otherwise\nprevent the test program from completing. Setting a very long timeout on tests\nthat should not be able to hang is perfectly acceptable and will not make the\ntest take any longer if successful.  Timeouts should not be used as the standard method of detecting if a test has\nfailed.", 
            "title": "Long tests"
        }, 
        {
            "location": "/ponytest--index/#exclusion-groups", 
            "text": "By default all tests are run concurrently. This may be a problem for some\ntests, eg if they manipulate an external file or use a system resource. To fix\nthis issue any number of tests may be put into an exclusion group.  No tests that are in the same exclusion group will be run concurrently.  Exclusion groups are identified by name, arbitrary strings may be used.\nMultiple exclusion groups may be used and tests in different groups may run\nconcurrently. Tests that do not specify an exclusion group may be run\nconcurrently with any other tests.  The command line option \"--sequential\" prevents any tests from running\nconcurrently, regardless of exclusion groups. This is intended for debugging\nrather than standard use.", 
            "title": "Exclusion groups"
        }, 
        {
            "location": "/ponytest--index/#labels", 
            "text": "Test can have label. Labels are used to filter which tests are run, by setting\ncommand line argument  --label=[some custom label] . It can be used to separate\nunit tests from integration tests.  By default label is empty. You can set it up by overriding  label(): String \nmethod in unit test.  use  ponytest \n\nclass iso _I8AddTest is UnitTest\n  fun name(): String =   _I8AddTest \n  fun label(): String =   simple \n  fun apply(h: TestHelper) = \n    h.assert_eq[I8](1, 1)", 
            "title": "Labels"
        }, 
        {
            "location": "/ponytest--index/#tear-down", 
            "text": "Each unit test object may define a tear_down() function. This is called after\nthe test has finished to allow tearing down of any complex environment that had\nto be set up for the test.  The tear_down() function is called for each test regardless of whether it\npassed or failed. If a test times out tear_down() will be called after\ntimed_out() returns.  When a test is in an exclusion group, the tear_down() call is considered part\nof the tests run. The next test in the exclusion group will not start until\nafter tear_down() returns on the current test.  The test's TestHelper is handed to tear_down() and it is permitted to log\nmessages and call assert functions during tear down.", 
            "title": "Tear down"
        }, 
        {
            "location": "/ponytest--index/#public-types", 
            "text": "trait UnitTest  trait TestList  interface ITest  class TestHelper  actor PonyTest", 
            "title": "Public Types"
        }, 
        {
            "location": "/ponytest--index/#private-types", 
            "text": "trait _Group  actor _ExclusiveGroup  actor _SimultaneousGroup  primitive _Color", 
            "title": "Private Types"
        }, 
        {
            "location": "/ponytest-UnitTest/", 
            "text": "UnitTest\n\n\nEach unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.\n\n\ntrait ref UnitTest\n\n\n\n\nPublic Functions\n\n\nname\n\n\nReport the test name, which is used when printing test results and on the\ncommand line to select tests to run.\n\n\nfun box name()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nexclusion_group\n\n\nReport the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.\n\n\nfun box exclusion_group()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\napply\n\n\nRun the test.\nRaising an error is interpreted as a test failure.\n\n\nfun ref apply(\n  h: TestHelper val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\ntimed_out\n\n\nTear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.\n\n\nfun ref timed_out(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntear_down\n\n\nTidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.\n\n\nfun ref tear_down(\n  h: TestHelper val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nlabel\n\n\nReport the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.\n\n\nfun box label()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "trait UnitTest"
        }, 
        {
            "location": "/ponytest-UnitTest/#unittest", 
            "text": "Each unit test class must provide this trait. Simple tests only need to\ndefine the name() and apply() functions. The remaining functions specify\nadditional test options.  trait ref UnitTest", 
            "title": "UnitTest"
        }, 
        {
            "location": "/ponytest-UnitTest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-UnitTest/#name", 
            "text": "Report the test name, which is used when printing test results and on the\ncommand line to select tests to run.  fun box name()\n: String val", 
            "title": "name"
        }, 
        {
            "location": "/ponytest-UnitTest/#returns", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-UnitTest/#exclusion_group", 
            "text": "Report the test exclusion group, returning an empty string for none.\nThe default body returns an empty string.  fun box exclusion_group()\n: String val", 
            "title": "exclusion_group"
        }, 
        {
            "location": "/ponytest-UnitTest/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-UnitTest/#apply", 
            "text": "Run the test.\nRaising an error is interpreted as a test failure.  fun ref apply(\n  h: TestHelper val)\n: None val ?", 
            "title": "apply"
        }, 
        {
            "location": "/ponytest-UnitTest/#parameters", 
            "text": "h:  TestHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-UnitTest/#returns_2", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-UnitTest/#timed_out", 
            "text": "Tear down a possibly hanging test.\nCalled when the timeout specified by to long_test() expires.\nThere is no need for this function to call complete(false).\ntear_down() will still be called after this completes.\nThe default is to do nothing.  fun ref timed_out(\n  h: TestHelper val)\n: None val", 
            "title": "timed_out"
        }, 
        {
            "location": "/ponytest-UnitTest/#parameters_1", 
            "text": "h:  TestHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-UnitTest/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-UnitTest/#tear_down", 
            "text": "Tidy up after the test has completed.\nCalled for each run test, whether that test passed, succeeded or timed out.\nThe default is to do nothing.  fun ref tear_down(\n  h: TestHelper val)\n: None val", 
            "title": "tear_down"
        }, 
        {
            "location": "/ponytest-UnitTest/#parameters_2", 
            "text": "h:  TestHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-UnitTest/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-UnitTest/#label", 
            "text": "Report the test label, returning an empty string for none.\nIt can be later use to filter tests which we want to run, by labels.  fun box label()\n: String val", 
            "title": "label"
        }, 
        {
            "location": "/ponytest-UnitTest/#returns_5", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestList/", 
            "text": "TestList\n\n\nSource of unit tests for a PonyTest object.\nSee package doc string for further information and example use.\n\n\ntrait ref TestList\n\n\n\n\nPublic Functions\n\n\ntests\n\n\nAdd all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:\n\n\nfun tests(test: PonyTest) =\n\n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)\n\n\n\n\nfun tag tests(\n  test: PonyTest tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntest: \nPonyTest\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "trait TestList"
        }, 
        {
            "location": "/ponytest-TestList/#testlist", 
            "text": "Source of unit tests for a PonyTest object.\nSee package doc string for further information and example use.  trait ref TestList", 
            "title": "TestList"
        }, 
        {
            "location": "/ponytest-TestList/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-TestList/#tests", 
            "text": "Add all the tests in this suite to the given test object.\nTypically the implementation of this function will be of the form:  fun tests(test: PonyTest) = \n  test(_TestClass1)\n  test(_TestClass2)\n  test(_TestClass3)  fun tag tests(\n  test: PonyTest tag)\n: None val", 
            "title": "tests"
        }, 
        {
            "location": "/ponytest-TestList/#parameters", 
            "text": "test:  PonyTest  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestList/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-ITest/", 
            "text": "ITest\n\n\ninterface ref ITest\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: None val ?\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?", 
            "title": "interface ITest"
        }, 
        {
            "location": "/ponytest-ITest/#itest", 
            "text": "interface ref ITest", 
            "title": "ITest"
        }, 
        {
            "location": "/ponytest-ITest/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-ITest/#apply", 
            "text": "fun box apply()\n: None val ?", 
            "title": "apply"
        }, 
        {
            "location": "/ponytest-ITest/#returns", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/", 
            "text": "TestHelper\n\n\nPer unit test class that provides control, logging and assertion functions.\n\n\nEach unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.\n\n\nThe assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.\n\n\nAll assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.\n\n\nclass val TestHelper\n\n\n\n\nConstructors\n\n\n_create\n\n\nCreate a new TestHelper.\n\n\nnew val _create(\n  runner: _TestRunner tag,\n  env': Env val)\n: TestHelper val^\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\nenv': \nEnv\n val\n\n\n\n\nReturns\n\n\n\n\nTestHelper\n val^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nlet env: \nEnv\n val\n\n\n\n\n\n\nPublic Functions\n\n\nlog\n\n\nLog the given message.\n\n\nThe verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.\n\n\nLogs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.\n\n\nfun box log(\n  msg: String val,\n  verbose: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val\n\n\nverbose: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail\n\n\nFlag the test as having failed.\n\n\nfun box fail(\n  msg: String val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nmsg: \nString\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nassert_true\n\n\nAssert that the given expression is true.\n\n\nfun box assert_true(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_false\n\n\nAssert that the given expression is false.\n\n\nfun box assert_false(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nactual: \nBool\n val\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_error\n\n\nAssert that the given test function throws an error when run.\n\n\nfun box assert_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_no_error\n\n\nAssert that the gived test function does not throw an error when run.\n\n\nfun box assert_no_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntest: \nITest\n box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_is[A: A]\n\n\nAssert that the 2 given expressions resolve to the same instance\n\n\nfun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_eq[A: (\nEquatable\n[A] #read \n \nStringable\n #read)]\n\n\nAssert that the 2 given expressions are equal.\n\n\nfun box assert_eq[A: (Equatable[A] #read \n Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_isnt[A: A]\n\n\nAssert that the 2 given expressions resolve to different instances.\n\n\nfun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_ne[A: (\nEquatable\n[A] #read \n \nStringable\n #read)]\n\n\nAssert that the 2 given expressions are not equal.\n\n\nfun box assert_ne[A: (Equatable[A] #read \n Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq[A: (\nEquatable\n[A] #read \n \nStringable\n #read)]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal.\n\n\nfun box assert_array_eq[A: (Equatable[A] #read \n Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: \nReadSeq\n[A] box\n\n\nactual: \nReadSeq\n[A] box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nassert_array_eq_unordered[A: (\nEquatable\n[A] #read \n \nStringable\n #read)]\n\n\nAssert that the contents of the 2 given ReadSeqs are equal ignoring order.\n\n\nfun box assert_array_eq_unordered[A: (Equatable[A] #read \n Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nexpect: \nReadSeq\n[A] box\n\n\nactual: \nReadSeq\n[A] box\n\n\nmsg: \nString\n val = seq\n\n\nloc: \nSourceLoc\n val = seq\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nlong_test\n\n\nIndicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.\n\n\nfun box long_test(\n  timeout: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimeout: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete\n\n\nMUST be called by each long test to indicate the test has finished, unless\na timeout occurs.\n\n\nThe \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.\n\n\nOnce this is called tear_down() may be called at any time.\n\n\nfun box complete(\n  success: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsuccess: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nexpect_action\n\n\nCan be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.\n\n\nThis pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.\n\n\nThe order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.\n\n\nfun box expect_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncomplete_action\n\n\nMUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.\n\n\nCompleting all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.\n\n\nCalling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.\n\n\nfun box complete_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfail_action\n\n\nCall to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.\n\n\nThe name of the failed action will be included in the failure output.\n\n\nUsually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.\n\n\nfun box fail_action(\n  name: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose_when_done\n\n\nPass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.\n\n\nIf the test is already tearing down, the actor will be disposed immediately.\n\n\nfun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\ndisposable: \nDisposableActor\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_check_is[A: A]\n\n\nCheck that the 2 given expressions resolve to the same instance\n\n\nfun box _check_is[A: A](\n  check: String val,\n  expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_check_eq[A: (\nEquatable\n[A] #read \n \nStringable\n)]\n\n\nCheck that the 2 given expressions are equal.\n\n\nfun box _check_eq[A: (Equatable[A] #read \n Stringable)](\n  check: String val,\n  expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nexpect: A\n\n\nactual: A\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_check_isnt[A: A]\n\n\nCheck that the 2 given expressions resolve to different instances.\n\n\nfun box _check_isnt[A: A](\n  check: String val,\n  not_expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_check_ne[A: (\nEquatable\n[A] #read \n \nStringable\n)]\n\n\nCheck that the 2 given expressions are not equal.\n\n\nfun box _check_ne[A: (Equatable[A] #read \n Stringable)](\n  check: String val,\n  not_expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncheck: \nString\n val\n\n\nnot_expect: A\n\n\nactual: A\n\n\nmsg: \nString\n val\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_format_loc\n\n\nfun box _format_loc(\n  loc: SourceLoc val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nloc: \nSourceLoc\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\n_print_array[A: \nStringable\n #read]\n\n\nGenerate a printable string of the contents of the given readseq to use in\nerror messages.\n\n\nfun box _print_array[A: Stringable #read](\n  array: ReadSeq[A] box)\n: String val\n\n\n\n\nParameters\n\n\n\n\narray: \nReadSeq\n[A] box\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "class TestHelper"
        }, 
        {
            "location": "/ponytest-TestHelper/#testhelper", 
            "text": "Per unit test class that provides control, logging and assertion functions.  Each unit test is given a TestHelper when it is run. This is val and so can\nbe passed between methods and actors within the test without restriction.  The assertion functions check the relevant condition and mark the test as a\nfailure if appropriate. The success or failure of the condition is reported\nback as a Bool which can be checked if a different code path is needed when\nthat condition fails.  All assert functions take an optional message argument. This is simply a\nstring that is printed as part of the error message when the condition fails.\nIt is intended to aid identifying what failed.  class val TestHelper", 
            "title": "TestHelper"
        }, 
        {
            "location": "/ponytest-TestHelper/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-TestHelper/#_create", 
            "text": "Create a new TestHelper.  new val _create(\n  runner: _TestRunner tag,\n  env': Env val)\n: TestHelper val^", 
            "title": "_create"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters", 
            "text": "runner:  _TestRunner  tag  env':  Env  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns", 
            "text": "TestHelper  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#public-fields", 
            "text": "let env:  Env  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/ponytest-TestHelper/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-TestHelper/#log", 
            "text": "Log the given message.  The verbose parameter allows messages to be printed only when the --verbose\ncommand line option is used. For example, by default assert failures are\nlogged, but passes are not. With --verbose both passes and fails are\nreported.  Logs are printed one test at a time to avoid interleaving log lines from\nconcurrent tests.  fun box log(\n  msg: String val,\n  verbose: Bool val = seq)\n: None val", 
            "title": "log"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_1", 
            "text": "msg:  String  val  verbose:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#fail", 
            "text": "Flag the test as having failed.  fun box fail(\n  msg: String val = seq)\n: None val", 
            "title": "fail"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_2", 
            "text": "msg:  String  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_true", 
            "text": "Assert that the given expression is true.  fun box assert_true(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_true"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_3", 
            "text": "actual:  Bool  val  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_false", 
            "text": "Assert that the given expression is false.  fun box assert_false(\n  actual: Bool val,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_false"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_4", 
            "text": "actual:  Bool  val  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_error", 
            "text": "Assert that the given test function throws an error when run.  fun box assert_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_error"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_5", 
            "text": "test:  ITest  box  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_no_error", 
            "text": "Assert that the gived test function does not throw an error when run.  fun box assert_no_error(\n  test: ITest box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_no_error"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_6", 
            "text": "test:  ITest  box  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_6", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_is91a-a93", 
            "text": "Assert that the 2 given expressions resolve to the same instance  fun box assert_is[A: A](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_is[A: A]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_7", 
            "text": "expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_7", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_eq91a-equatable91a93-read-stringable-read93", 
            "text": "Assert that the 2 given expressions are equal.  fun box assert_eq[A: (Equatable[A] #read   Stringable #read)](\n  expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_eq[A: (Equatable[A] #read &amp; Stringable #read)]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_8", 
            "text": "expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_isnt91a-a93", 
            "text": "Assert that the 2 given expressions resolve to different instances.  fun box assert_isnt[A: A](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_isnt[A: A]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_9", 
            "text": "not_expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_ne91a-equatable91a93-read-stringable-read93", 
            "text": "Assert that the 2 given expressions are not equal.  fun box assert_ne[A: (Equatable[A] #read   Stringable #read)](\n  not_expect: A,\n  actual: A,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_ne[A: (Equatable[A] #read &amp; Stringable #read)]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_10", 
            "text": "not_expect: A  actual: A  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_array_eq91a-equatable91a93-read-stringable-read93", 
            "text": "Assert that the contents of the 2 given ReadSeqs are equal.  fun box assert_array_eq[A: (Equatable[A] #read   Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_array_eq[A: (Equatable[A] #read &amp; Stringable #read)]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_11", 
            "text": "expect:  ReadSeq [A] box  actual:  ReadSeq [A] box  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_11", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#assert_array_eq_unordered91a-equatable91a93-read-stringable-read93", 
            "text": "Assert that the contents of the 2 given ReadSeqs are equal ignoring order.  fun box assert_array_eq_unordered[A: (Equatable[A] #read   Stringable #read)](\n  expect: ReadSeq[A] box,\n  actual: ReadSeq[A] box,\n  msg: String val = seq,\n  loc: SourceLoc val = seq)\n: Bool val", 
            "title": "assert_array_eq_unordered[A: (Equatable[A] #read &amp; Stringable #read)]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_12", 
            "text": "expect:  ReadSeq [A] box  actual:  ReadSeq [A] box  msg:  String  val = seq  loc:  SourceLoc  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_12", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#long_test", 
            "text": "Indicate that this is a long running test that may continue after the\ntest function exits.\nOnce this function is called, complete() must be called to finish the test,\nunless a timeout occurs.\nThe timeout is specified in nanseconds.  fun box long_test(\n  timeout: U64 val)\n: None val", 
            "title": "long_test"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_13", 
            "text": "timeout:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#complete", 
            "text": "MUST be called by each long test to indicate the test has finished, unless\na timeout occurs.  The \"success\" parameter specifies whether the test succeeded. However if\nany asserts fail the test will be considered a failure, regardless of the\nvalue of this parameter.  Once this is called tear_down() may be called at any time.  fun box complete(\n  success: Bool val)\n: None val", 
            "title": "complete"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_14", 
            "text": "success:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#expect_action", 
            "text": "Can be called in a long test to set up expectations for one or more actions\nthat, when all completed, will complete the test.  This pattern is useful for cases where you have multiple things that need\nto happen to complete your test, but don't want to have to collect them\nall yourself into a single actor that calls the complete method.  The order of calls to expect_action don't matter - the actions may be\ncompleted in any other order to complete the test.  fun box expect_action(\n  name: String val)\n: None val", 
            "title": "expect_action"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_15", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#complete_action", 
            "text": "MUST be called for each action expectation that was set up in a long test\nto fulfill the expectations. Any expectations that are still outstanding\nwhen the long test timeout runs out will be printed by name when it fails.  Completing all outstanding actions is enough to finish the test. There's no\nneed to also call the complete method when the actions are finished.  Calling the complete method will finish the test immediately, without\nwaiting for any outstanding actions to be completed.  fun box complete_action(\n  name: String val)\n: None val", 
            "title": "complete_action"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_16", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#fail_action", 
            "text": "Call to fail an action, which will also cause the entire test to fail\nimmediately, without waiting the rest of the outstanding actions.  The name of the failed action will be included in the failure output.  Usually the action name should be an expected action set up by a call to\nexpect_action, but failing unexpected actions will also fail the test.  fun box fail_action(\n  name: String val)\n: None val", 
            "title": "fail_action"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_17", 
            "text": "name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#dispose_when_done", 
            "text": "Pass a disposable actor to be disposed of when the test is complete.\nThe actor will be disposed no matter whether the test succeeds or fails.  If the test is already tearing down, the actor will be disposed immediately.  fun box dispose_when_done(\n  disposable: DisposableActor tag)\n: None val", 
            "title": "dispose_when_done"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_18", 
            "text": "disposable:  DisposableActor  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponytest-TestHelper/#_check_is91a-a93", 
            "text": "Check that the 2 given expressions resolve to the same instance  fun box _check_is[A: A](\n  check: String val,\n  expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val", 
            "title": "_check_is[A: A]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_19", 
            "text": "check:  String  val  expect: A  actual: A  msg:  String  val  loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_19", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#_check_eq91a-equatable91a93-read-stringable93", 
            "text": "Check that the 2 given expressions are equal.  fun box _check_eq[A: (Equatable[A] #read   Stringable)](\n  check: String val,\n  expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val", 
            "title": "_check_eq[A: (Equatable[A] #read &amp; Stringable)]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_20", 
            "text": "check:  String  val  expect: A  actual: A  msg:  String  val  loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_20", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#_check_isnt91a-a93", 
            "text": "Check that the 2 given expressions resolve to different instances.  fun box _check_isnt[A: A](\n  check: String val,\n  not_expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val", 
            "title": "_check_isnt[A: A]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_21", 
            "text": "check:  String  val  not_expect: A  actual: A  msg:  String  val  loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_21", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#_check_ne91a-equatable91a93-read-stringable93", 
            "text": "Check that the 2 given expressions are not equal.  fun box _check_ne[A: (Equatable[A] #read   Stringable)](\n  check: String val,\n  not_expect: A,\n  actual: A,\n  msg: String val,\n  loc: SourceLoc val)\n: Bool val", 
            "title": "_check_ne[A: (Equatable[A] #read &amp; Stringable)]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_22", 
            "text": "check:  String  val  not_expect: A  actual: A  msg:  String  val  loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_22", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#_format_loc", 
            "text": "fun box _format_loc(\n  loc: SourceLoc val)\n: String val", 
            "title": "_format_loc"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_23", 
            "text": "loc:  SourceLoc  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_23", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-TestHelper/#_print_array91a-stringable-read93", 
            "text": "Generate a printable string of the contents of the given readseq to use in\nerror messages.  fun box _print_array[A: Stringable #read](\n  array: ReadSeq[A] box)\n: String val", 
            "title": "_print_array[A: Stringable #read]"
        }, 
        {
            "location": "/ponytest-TestHelper/#parameters_24", 
            "text": "array:  ReadSeq [A] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-TestHelper/#returns_24", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-PonyTest/", 
            "text": "PonyTest\n\n\nMain test framework actor that organises tests, collates information and\nprints results.\n\n\nactor tag PonyTest\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^\n\n\n\n\nParameters\n\n\n\n\nenv: \nEnv\n val\n\n\nlist: \nTestList\n tag\n\n\n\n\nReturns\n\n\n\n\nPonyTest\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nRun the given test, subject to our filters and options.\n\n\nbe apply(\n  test: UnitTest iso)\n\n\n\n\nParameters\n\n\n\n\ntest: \nUnitTest\n iso\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_started\n\n\nA test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nbe _test_started(\n  id: USize val)\n\n\n\n\nParameters\n\n\n\n\nid: \nUSize\n val\n\n\n\n\n\n\n_test_complete\n\n\nA test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.\n\n\nbe _test_complete(\n  id: USize val,\n  pass: Bool val,\n  log: Array[String val] val)\n\n\n\n\nParameters\n\n\n\n\nid: \nUSize\n val\n\n\npass: \nBool\n val\n\n\nlog: \nArray\n[\nString\n val] val\n\n\n\n\n\n\n_all_tests_applied\n\n\nAll our tests have been handed to apply(), setup for finishing\n\n\nbe _all_tests_applied()\n\n\n\n\n\n\nPrivate Functions\n\n\n_find_group\n\n\nFind the group to use for the given group name, subject to the\n--sequential flag.\n\n\nfun ref _find_group(\n  group_name: String val)\n: _Group tag\n\n\n\n\nParameters\n\n\n\n\ngroup_name: \nString\n val\n\n\n\n\nReturns\n\n\n\n\n_Group\n tag\n\n\n\n\n\n\n_process_opts\n\n\nProcess our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.\n\n\nfun ref _process_opts()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_print_report\n\n\nThe tests are all complete, print out the results.\n\n\nfun box _print_report()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_plural\n\n\nReturn a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".\n\n\nfun box _plural(\n  n: USize val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "actor PonyTest"
        }, 
        {
            "location": "/ponytest-PonyTest/#ponytest", 
            "text": "Main test framework actor that organises tests, collates information and\nprints results.  actor tag PonyTest", 
            "title": "PonyTest"
        }, 
        {
            "location": "/ponytest-PonyTest/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-PonyTest/#create", 
            "text": "new tag create(\n  env: Env val,\n  list: TestList tag)\n: PonyTest tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponytest-PonyTest/#parameters", 
            "text": "env:  Env  val  list:  TestList  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-PonyTest/#returns", 
            "text": "PonyTest  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-PonyTest/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-PonyTest/#apply", 
            "text": "Run the given test, subject to our filters and options.  be apply(\n  test: UnitTest iso)", 
            "title": "apply"
        }, 
        {
            "location": "/ponytest-PonyTest/#parameters_1", 
            "text": "test:  UnitTest  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-PonyTest/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-PonyTest/#_test_started", 
            "text": "A test has started running, update status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.  be _test_started(\n  id: USize val)", 
            "title": "_test_started"
        }, 
        {
            "location": "/ponytest-PonyTest/#parameters_2", 
            "text": "id:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-PonyTest/#_test_complete", 
            "text": "A test has completed, restore its result and update our status info.\nThe id parameter is the test identifier handed out when we created the test\nhelper.  be _test_complete(\n  id: USize val,\n  pass: Bool val,\n  log: Array[String val] val)", 
            "title": "_test_complete"
        }, 
        {
            "location": "/ponytest-PonyTest/#parameters_3", 
            "text": "id:  USize  val  pass:  Bool  val  log:  Array [ String  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-PonyTest/#_all_tests_applied", 
            "text": "All our tests have been handed to apply(), setup for finishing  be _all_tests_applied()", 
            "title": "_all_tests_applied"
        }, 
        {
            "location": "/ponytest-PonyTest/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/ponytest-PonyTest/#_find_group", 
            "text": "Find the group to use for the given group name, subject to the\n--sequential flag.  fun ref _find_group(\n  group_name: String val)\n: _Group tag", 
            "title": "_find_group"
        }, 
        {
            "location": "/ponytest-PonyTest/#parameters_4", 
            "text": "group_name:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-PonyTest/#returns_1", 
            "text": "_Group  tag", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-PonyTest/#_process_opts", 
            "text": "Process our command line options.\nAll command line arguments given must be recognised and make sense.\nState for specified options is stored in object fields.\nWe don't use the options package because we aren't already dependencies.  fun ref _process_opts()\n: None val", 
            "title": "_process_opts"
        }, 
        {
            "location": "/ponytest-PonyTest/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-PonyTest/#_print_report", 
            "text": "The tests are all complete, print out the results.  fun box _print_report()\n: None val", 
            "title": "_print_report"
        }, 
        {
            "location": "/ponytest-PonyTest/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-PonyTest/#_plural", 
            "text": "Return a \"s\" or an empty string depending on whether the given number is 1.\nFor use when printing possibly plural words, eg \"test\" or \"tests\".  fun box _plural(\n  n: USize val)\n: String val", 
            "title": "_plural"
        }, 
        {
            "location": "/ponytest-PonyTest/#parameters_5", 
            "text": "n:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-PonyTest/#returns_4", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_Group/", 
            "text": "_Group\n\n\nTest exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.\n\n\ntrait tag _Group\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nRun the given test, or queue it and run later, as appropriate.\n\n\nbe apply(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_complete\n\n\nThe specified test has completed.\n\n\nbe _test_complete(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag", 
            "title": "trait _Group"
        }, 
        {
            "location": "/ponytest-_Group/#_group", 
            "text": "Test exclusion is achieved by organising tests into groups. Each group can be\nexclusive, ie only one test is run at a time, or simultaneous, ie all tests\nare run concurrently.  trait tag _Group", 
            "title": "_Group"
        }, 
        {
            "location": "/ponytest-_Group/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_Group/#apply", 
            "text": "Run the given test, or queue it and run later, as appropriate.  be apply(\n  runner: _TestRunner tag)", 
            "title": "apply"
        }, 
        {
            "location": "/ponytest-_Group/#parameters", 
            "text": "runner:  _TestRunner  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_Group/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_Group/#_test_complete", 
            "text": "The specified test has completed.  be _test_complete(\n  runner: _TestRunner tag)", 
            "title": "_test_complete"
        }, 
        {
            "location": "/ponytest-_Group/#parameters_1", 
            "text": "runner:  _TestRunner  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/", 
            "text": "_ExclusiveGroup\n\n\nTest group in which we only ever have one test running at a time.\n\n\nactor tag _ExclusiveGroup is\n  _Group tag\n\n\n\n\nImplements\n\n\n\n\n_Group\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: _ExclusiveGroup tag^\n\n\n\n\nReturns\n\n\n\n\n_ExclusiveGroup\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nbe apply(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_complete\n\n\nbe _test_complete(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag", 
            "title": "actor _ExclusiveGroup"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#_exclusivegroup", 
            "text": "Test group in which we only ever have one test running at a time.  actor tag _ExclusiveGroup is\n  _Group tag", 
            "title": "_ExclusiveGroup"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#implements", 
            "text": "_Group  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#create", 
            "text": "new tag create()\n: _ExclusiveGroup tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#returns", 
            "text": "_ExclusiveGroup  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#apply", 
            "text": "be apply(\n  runner: _TestRunner tag)", 
            "title": "apply"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#parameters", 
            "text": "runner:  _TestRunner  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#_test_complete", 
            "text": "be _test_complete(\n  runner: _TestRunner tag)", 
            "title": "_test_complete"
        }, 
        {
            "location": "/ponytest-_ExclusiveGroup/#parameters_1", 
            "text": "runner:  _TestRunner  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/", 
            "text": "_SimultaneousGroup\n\n\nTest group in which all tests can run concurrently.\n\n\nactor tag _SimultaneousGroup is\n  _Group tag\n\n\n\n\nImplements\n\n\n\n\n_Group\n tag\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: _SimultaneousGroup tag^\n\n\n\n\nReturns\n\n\n\n\n_SimultaneousGroup\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nbe apply(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_test_complete\n\n\nbe _test_complete(\n  runner: _TestRunner tag)\n\n\n\n\nParameters\n\n\n\n\nrunner: \n_TestRunner\n tag", 
            "title": "actor _SimultaneousGroup"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#_simultaneousgroup", 
            "text": "Test group in which all tests can run concurrently.  actor tag _SimultaneousGroup is\n  _Group tag", 
            "title": "_SimultaneousGroup"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#implements", 
            "text": "_Group  tag", 
            "title": "Implements"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#create", 
            "text": "new tag create()\n: _SimultaneousGroup tag^", 
            "title": "create"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#returns", 
            "text": "_SimultaneousGroup  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#apply", 
            "text": "be apply(\n  runner: _TestRunner tag)", 
            "title": "apply"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#parameters", 
            "text": "runner:  _TestRunner  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#_test_complete", 
            "text": "be _test_complete(\n  runner: _TestRunner tag)", 
            "title": "_test_complete"
        }, 
        {
            "location": "/ponytest-_SimultaneousGroup/#parameters_1", 
            "text": "runner:  _TestRunner  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_Color/", 
            "text": "_Color\n\n\nStrings to embedded in text to specify colours. These are copies of the\nstrings defined in packages/term. They are duplicated here to avoid a\ndependency.\n\n\nprimitive val _Color\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Color val^\n\n\n\n\nReturns\n\n\n\n\n_Color\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nreset\n\n\nResets all colours and text styles to the default.\n\n\nfun box reset()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nred\n\n\nBright red text.\n\n\nfun box red()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ngreen\n\n\nBright green text.\n\n\nfun box green()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _Color val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Color\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Color val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Color\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Color"
        }, 
        {
            "location": "/ponytest-_Color/#_color", 
            "text": "Strings to embedded in text to specify colours. These are copies of the\nstrings defined in packages/term. They are duplicated here to avoid a\ndependency.  primitive val _Color", 
            "title": "_Color"
        }, 
        {
            "location": "/ponytest-_Color/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/ponytest-_Color/#create", 
            "text": "new val create()\n: _Color val^", 
            "title": "create"
        }, 
        {
            "location": "/ponytest-_Color/#returns", 
            "text": "_Color  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_Color/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/ponytest-_Color/#reset", 
            "text": "Resets all colours and text styles to the default.  fun box reset()\n: String val", 
            "title": "reset"
        }, 
        {
            "location": "/ponytest-_Color/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_Color/#red", 
            "text": "Bright red text.  fun box red()\n: String val", 
            "title": "red"
        }, 
        {
            "location": "/ponytest-_Color/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_Color/#green", 
            "text": "Bright green text.  fun box green()\n: String val", 
            "title": "green"
        }, 
        {
            "location": "/ponytest-_Color/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_Color/#eq", 
            "text": "fun box eq(\n  that: _Color val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/ponytest-_Color/#parameters", 
            "text": "that:  _Color  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_Color/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/ponytest-_Color/#ne", 
            "text": "fun box ne(\n  that: _Color val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/ponytest-_Color/#parameters_1", 
            "text": "that:  _Color  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/ponytest-_Color/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process--index/", 
            "text": "Process package\n\n\nThe Process package provides support for handling Unix style processes.\nFor each external process that you want to handle, you need to create a\n\nProcessMonitor\n and a corresponding \nProcessNotify\n object. Each\nProcessMonitor runs as it own actor and upon receiving data will call its\ncorresponding \nProcessNotify\n's method.\n\n\nExample program\n\n\nThe following program will spawn an external program and write to it's\nSTDIN. Output received on STDOUT of the child process is forwarded to the\nProcessNotify client and printed.\n\n\nuse \nprocess\n\nuse \nfiles\n\n\nactor Main\n  new create(env: Env) =\n\n    // create a notifier\n    let client = ProcessClient(env)\n    let notifier: ProcessNotify iso = consume client\n    // define the binary to run\n    try\n      let path = FilePath(env.root as AmbientAuth, \n/bin/cat\n)?\n      // define the arguments; first arg is always the binary name\n      let args: Array[String] iso = recover Array[String](1) end\n      args.push(\ncat\n)\n      // define the environment variable for the execution\n      let vars: Array[String] iso = recover Array[String](2) end\n      vars.push(\nHOME=/\n)\n      vars.push(\nPATH=/bin\n)\n      // create a ProcessMonitor and spawn the child process\n      let auth = env.root as AmbientAuth\n      let pm: ProcessMonitor = ProcessMonitor(auth, consume notifier, path,\n      consume args, consume vars)\n      // write to STDIN of the child process\n      pm.write(\none, two, three\n)\n      pm.done_writing() // closing stdin allows cat to terminate\n    else\n      env.out.print(\nCould not create FilePath!\n)\n    end\n\n// define a client that implements the ProcessNotify interface\nclass ProcessClient is ProcessNotify\n  let _env: Env\n\n  new iso create(env: Env) =\n\n    _env = env\n\n  fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) =\n\n    let out = String.from_array(consume data)\n    _env.out.print(\nSTDOUT: \n + out)\n\n  fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) =\n\n    let err = String.from_array(consume data)\n    _env.out.print(\nSTDERR: \n + err)\n\n  fun ref failed(process: ProcessMonitor ref, err: ProcessError) =\n\n    match err\n    | ExecveError =\n _env.out.print(\nProcessError: ExecveError\n)\n    | PipeError =\n _env.out.print(\nProcessError: PipeError\n)\n    | ForkError =\n _env.out.print(\nProcessError: ForkError\n)\n    | WaitpidError =\n _env.out.print(\nProcessError: WaitpidError\n)\n    | WriteError =\n _env.out.print(\nProcessError: WriteError\n)\n    | KillError =\n _env.out.print(\nProcessError: KillError\n)\n    | CapError =\n _env.out.print(\nProcessError: CapError\n)\n    | Unsupported =\n _env.out.print(\nProcessError: Unsupported\n)\n    else _env.out.print(\nUnknown ProcessError!\n)\n    end\n\n  fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) =\n\n    let code: I32 = consume child_exit_code\n    _env.out.print(\nChild exit code: \n + code.string())\n\n\n\n\nProcess portability\n\n\nThe ProcessMonitor supports spawning processes on Linux, FreeBSD and OSX.\nProcesses are not supported on Windows and attempting to use them will cause\na runtime error.\n\n\nShutting down ProcessMonitor and external process\n\n\nDocument waitpid behaviour (stops world)\n\n\nPublic Types\n\n\n\n\ninterface ProcessNotify\n\n\nprimitive ExecveError\n\n\nprimitive PipeError\n\n\nprimitive ForkError\n\n\nprimitive WaitpidError\n\n\nprimitive WriteError\n\n\nprimitive KillError\n\n\nprimitive Unsupported\n\n\nprimitive CapError\n\n\ntype ProcessError\n\n\ntype ProcessMonitorAuth\n\n\nactor ProcessMonitor\n\n\nprimitive StartProcessAuth\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _EINTR\n\n\nprimitive _STDINFILENO\n\n\nprimitive _STDOUTFILENO\n\n\nprimitive _STDERRFILENO\n\n\nprimitive _FSETFL\n\n\nprimitive _FGETFL\n\n\nprimitive _FSETFD\n\n\nprimitive _FGETFD\n\n\nprimitive _FDCLOEXEC\n\n\nprimitive _SIGTERM\n\n\nprimitive _EAGAIN\n\n\nprimitive _ONONBLOCK\n\n\nclass _ProcessClient", 
            "title": "Package"
        }, 
        {
            "location": "/process--index/#process-package", 
            "text": "The Process package provides support for handling Unix style processes.\nFor each external process that you want to handle, you need to create a ProcessMonitor  and a corresponding  ProcessNotify  object. Each\nProcessMonitor runs as it own actor and upon receiving data will call its\ncorresponding  ProcessNotify 's method.", 
            "title": "Process package"
        }, 
        {
            "location": "/process--index/#example-program", 
            "text": "The following program will spawn an external program and write to it's\nSTDIN. Output received on STDOUT of the child process is forwarded to the\nProcessNotify client and printed.  use  process \nuse  files \n\nactor Main\n  new create(env: Env) = \n    // create a notifier\n    let client = ProcessClient(env)\n    let notifier: ProcessNotify iso = consume client\n    // define the binary to run\n    try\n      let path = FilePath(env.root as AmbientAuth,  /bin/cat )?\n      // define the arguments; first arg is always the binary name\n      let args: Array[String] iso = recover Array[String](1) end\n      args.push( cat )\n      // define the environment variable for the execution\n      let vars: Array[String] iso = recover Array[String](2) end\n      vars.push( HOME=/ )\n      vars.push( PATH=/bin )\n      // create a ProcessMonitor and spawn the child process\n      let auth = env.root as AmbientAuth\n      let pm: ProcessMonitor = ProcessMonitor(auth, consume notifier, path,\n      consume args, consume vars)\n      // write to STDIN of the child process\n      pm.write( one, two, three )\n      pm.done_writing() // closing stdin allows cat to terminate\n    else\n      env.out.print( Could not create FilePath! )\n    end\n\n// define a client that implements the ProcessNotify interface\nclass ProcessClient is ProcessNotify\n  let _env: Env\n\n  new iso create(env: Env) = \n    _env = env\n\n  fun ref stdout(process: ProcessMonitor ref, data: Array[U8] iso) = \n    let out = String.from_array(consume data)\n    _env.out.print( STDOUT:   + out)\n\n  fun ref stderr(process: ProcessMonitor ref, data: Array[U8] iso) = \n    let err = String.from_array(consume data)\n    _env.out.print( STDERR:   + err)\n\n  fun ref failed(process: ProcessMonitor ref, err: ProcessError) = \n    match err\n    | ExecveError =  _env.out.print( ProcessError: ExecveError )\n    | PipeError =  _env.out.print( ProcessError: PipeError )\n    | ForkError =  _env.out.print( ProcessError: ForkError )\n    | WaitpidError =  _env.out.print( ProcessError: WaitpidError )\n    | WriteError =  _env.out.print( ProcessError: WriteError )\n    | KillError =  _env.out.print( ProcessError: KillError )\n    | CapError =  _env.out.print( ProcessError: CapError )\n    | Unsupported =  _env.out.print( ProcessError: Unsupported )\n    else _env.out.print( Unknown ProcessError! )\n    end\n\n  fun ref dispose(process: ProcessMonitor ref, child_exit_code: I32) = \n    let code: I32 = consume child_exit_code\n    _env.out.print( Child exit code:   + code.string())", 
            "title": "Example program"
        }, 
        {
            "location": "/process--index/#process-portability", 
            "text": "The ProcessMonitor supports spawning processes on Linux, FreeBSD and OSX.\nProcesses are not supported on Windows and attempting to use them will cause\na runtime error.", 
            "title": "Process portability"
        }, 
        {
            "location": "/process--index/#shutting-down-processmonitor-and-external-process", 
            "text": "Document waitpid behaviour (stops world)", 
            "title": "Shutting down ProcessMonitor and external process"
        }, 
        {
            "location": "/process--index/#public-types", 
            "text": "interface ProcessNotify  primitive ExecveError  primitive PipeError  primitive ForkError  primitive WaitpidError  primitive WriteError  primitive KillError  primitive Unsupported  primitive CapError  type ProcessError  type ProcessMonitorAuth  actor ProcessMonitor  primitive StartProcessAuth", 
            "title": "Public Types"
        }, 
        {
            "location": "/process--index/#private-types", 
            "text": "primitive _EINTR  primitive _STDINFILENO  primitive _STDOUTFILENO  primitive _STDERRFILENO  primitive _FSETFL  primitive _FGETFL  primitive _FSETFD  primitive _FGETFD  primitive _FDCLOEXEC  primitive _SIGTERM  primitive _EAGAIN  primitive _ONONBLOCK  class _ProcessClient", 
            "title": "Private Types"
        }, 
        {
            "location": "/process-ProcessNotify/", 
            "text": "ProcessNotify\n\n\nNotifications for Process connections.\n\n\ninterface ref ProcessNotify\n\n\n\n\nPublic Functions\n\n\ncreated\n\n\nProcessMonitor calls this when it is created.\n\n\nfun ref created(\n  process: ProcessMonitor ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nstdout\n\n\nProcessMonitor calls this when new data is received on STDOUT of the\nforked process\n\n\nfun ref stdout(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nstderr\n\n\nProcessMonitor calls this when new data is received on STDERR of the\nforked process\n\n\nfun ref stderr(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfailed\n\n\nProcessMonitor calls this if we run into errors communicating with the\nforked process.\n\n\nfun ref failed(\n  process: ProcessMonitor ref,\n  err: (ExecveError val | ForkError val | KillError val | \n    PipeError val | Unsupported val | WaitpidError val | \n    WriteError val | CapError val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\nerr: (\nExecveError\n val | \nForkError\n val | \nKillError\n val | \n    \nPipeError\n val | \nUnsupported\n val | \nWaitpidError\n val | \n    \nWriteError\n val | \nCapError\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nexpect\n\n\nCalled when the process monitor has been told to expect a certain quantity\nof bytes. This allows nested notifiers to change the expected quantity,\nwhich allows a lower level protocol to handle any framing.\n\n\nfun ref expect(\n  process: ProcessMonitor ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ndispose\n\n\nCall when ProcessMonitor terminates to cleanup ProcessNotify.\nWe return the exit code of the child process.\n\n\nfun ref dispose(\n  process: ProcessMonitor ref,\n  child_exit_code: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\nchild_exit_code: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface ProcessNotify"
        }, 
        {
            "location": "/process-ProcessNotify/#processnotify", 
            "text": "Notifications for Process connections.  interface ref ProcessNotify", 
            "title": "ProcessNotify"
        }, 
        {
            "location": "/process-ProcessNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-ProcessNotify/#created", 
            "text": "ProcessMonitor calls this when it is created.  fun ref created(\n  process: ProcessMonitor ref)\n: None val", 
            "title": "created"
        }, 
        {
            "location": "/process-ProcessNotify/#parameters", 
            "text": "process:  ProcessMonitor  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessNotify/#stdout", 
            "text": "ProcessMonitor calls this when new data is received on STDOUT of the\nforked process  fun ref stdout(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val", 
            "title": "stdout"
        }, 
        {
            "location": "/process-ProcessNotify/#parameters_1", 
            "text": "process:  ProcessMonitor  ref  data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessNotify/#stderr", 
            "text": "ProcessMonitor calls this when new data is received on STDERR of the\nforked process  fun ref stderr(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val", 
            "title": "stderr"
        }, 
        {
            "location": "/process-ProcessNotify/#parameters_2", 
            "text": "process:  ProcessMonitor  ref  data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessNotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessNotify/#failed", 
            "text": "ProcessMonitor calls this if we run into errors communicating with the\nforked process.  fun ref failed(\n  process: ProcessMonitor ref,\n  err: (ExecveError val | ForkError val | KillError val | \n    PipeError val | Unsupported val | WaitpidError val | \n    WriteError val | CapError val))\n: None val", 
            "title": "failed"
        }, 
        {
            "location": "/process-ProcessNotify/#parameters_3", 
            "text": "process:  ProcessMonitor  ref  err: ( ExecveError  val |  ForkError  val |  KillError  val | \n     PipeError  val |  Unsupported  val |  WaitpidError  val | \n     WriteError  val |  CapError  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessNotify/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessNotify/#expect", 
            "text": "Called when the process monitor has been told to expect a certain quantity\nof bytes. This allows nested notifiers to change the expected quantity,\nwhich allows a lower level protocol to handle any framing.  fun ref expect(\n  process: ProcessMonitor ref,\n  qty: USize val)\n: USize val", 
            "title": "expect"
        }, 
        {
            "location": "/process-ProcessNotify/#parameters_4", 
            "text": "process:  ProcessMonitor  ref  qty:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessNotify/#returns_4", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessNotify/#dispose", 
            "text": "Call when ProcessMonitor terminates to cleanup ProcessNotify.\nWe return the exit code of the child process.  fun ref dispose(\n  process: ProcessMonitor ref,\n  child_exit_code: I32 val)\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/process-ProcessNotify/#parameters_5", 
            "text": "process:  ProcessMonitor  ref  child_exit_code:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessNotify/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EINTR/", 
            "text": "_EINTR\n\n\nprimitive val _EINTR\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EINTR val^\n\n\n\n\nReturns\n\n\n\n\n_EINTR\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _EINTR val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EINTR\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EINTR val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EINTR\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EINTR"
        }, 
        {
            "location": "/process-_EINTR/#_eintr", 
            "text": "primitive val _EINTR", 
            "title": "_EINTR"
        }, 
        {
            "location": "/process-_EINTR/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_EINTR/#create", 
            "text": "new val create()\n: _EINTR val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_EINTR/#returns", 
            "text": "_EINTR  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EINTR/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_EINTR/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_EINTR/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EINTR/#eq", 
            "text": "fun box eq(\n  that: _EINTR val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_EINTR/#parameters", 
            "text": "that:  _EINTR  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_EINTR/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EINTR/#ne", 
            "text": "fun box ne(\n  that: _EINTR val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_EINTR/#parameters_1", 
            "text": "that:  _EINTR  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_EINTR/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDINFILENO/", 
            "text": "_STDINFILENO\n\n\nprimitive val _STDINFILENO\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _STDINFILENO val^\n\n\n\n\nReturns\n\n\n\n\n_STDINFILENO\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _STDINFILENO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_STDINFILENO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _STDINFILENO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_STDINFILENO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _STDINFILENO"
        }, 
        {
            "location": "/process-_STDINFILENO/#_stdinfileno", 
            "text": "primitive val _STDINFILENO", 
            "title": "_STDINFILENO"
        }, 
        {
            "location": "/process-_STDINFILENO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_STDINFILENO/#create", 
            "text": "new val create()\n: _STDINFILENO val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_STDINFILENO/#returns", 
            "text": "_STDINFILENO  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDINFILENO/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_STDINFILENO/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_STDINFILENO/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDINFILENO/#eq", 
            "text": "fun box eq(\n  that: _STDINFILENO val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_STDINFILENO/#parameters", 
            "text": "that:  _STDINFILENO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_STDINFILENO/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDINFILENO/#ne", 
            "text": "fun box ne(\n  that: _STDINFILENO val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_STDINFILENO/#parameters_1", 
            "text": "that:  _STDINFILENO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_STDINFILENO/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDOUTFILENO/", 
            "text": "_STDOUTFILENO\n\n\nprimitive val _STDOUTFILENO\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _STDOUTFILENO val^\n\n\n\n\nReturns\n\n\n\n\n_STDOUTFILENO\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _STDOUTFILENO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_STDOUTFILENO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _STDOUTFILENO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_STDOUTFILENO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _STDOUTFILENO"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#_stdoutfileno", 
            "text": "primitive val _STDOUTFILENO", 
            "title": "_STDOUTFILENO"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#create", 
            "text": "new val create()\n: _STDOUTFILENO val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#returns", 
            "text": "_STDOUTFILENO  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#eq", 
            "text": "fun box eq(\n  that: _STDOUTFILENO val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#parameters", 
            "text": "that:  _STDOUTFILENO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#ne", 
            "text": "fun box ne(\n  that: _STDOUTFILENO val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#parameters_1", 
            "text": "that:  _STDOUTFILENO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_STDOUTFILENO/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDERRFILENO/", 
            "text": "_STDERRFILENO\n\n\nprimitive val _STDERRFILENO\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _STDERRFILENO val^\n\n\n\n\nReturns\n\n\n\n\n_STDERRFILENO\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _STDERRFILENO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_STDERRFILENO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _STDERRFILENO val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_STDERRFILENO\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _STDERRFILENO"
        }, 
        {
            "location": "/process-_STDERRFILENO/#_stderrfileno", 
            "text": "primitive val _STDERRFILENO", 
            "title": "_STDERRFILENO"
        }, 
        {
            "location": "/process-_STDERRFILENO/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_STDERRFILENO/#create", 
            "text": "new val create()\n: _STDERRFILENO val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_STDERRFILENO/#returns", 
            "text": "_STDERRFILENO  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDERRFILENO/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_STDERRFILENO/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_STDERRFILENO/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDERRFILENO/#eq", 
            "text": "fun box eq(\n  that: _STDERRFILENO val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_STDERRFILENO/#parameters", 
            "text": "that:  _STDERRFILENO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_STDERRFILENO/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_STDERRFILENO/#ne", 
            "text": "fun box ne(\n  that: _STDERRFILENO val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_STDERRFILENO/#parameters_1", 
            "text": "that:  _STDERRFILENO  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_STDERRFILENO/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFL/", 
            "text": "_FSETFL\n\n\nprimitive val _FSETFL\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FSETFL val^\n\n\n\n\nReturns\n\n\n\n\n_FSETFL\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FSETFL val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FSETFL\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FSETFL val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FSETFL\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FSETFL"
        }, 
        {
            "location": "/process-_FSETFL/#_fsetfl", 
            "text": "primitive val _FSETFL", 
            "title": "_FSETFL"
        }, 
        {
            "location": "/process-_FSETFL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_FSETFL/#create", 
            "text": "new val create()\n: _FSETFL val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_FSETFL/#returns", 
            "text": "_FSETFL  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_FSETFL/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_FSETFL/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFL/#eq", 
            "text": "fun box eq(\n  that: _FSETFL val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_FSETFL/#parameters", 
            "text": "that:  _FSETFL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FSETFL/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFL/#ne", 
            "text": "fun box ne(\n  that: _FSETFL val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_FSETFL/#parameters_1", 
            "text": "that:  _FSETFL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FSETFL/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFL/", 
            "text": "_FGETFL\n\n\nprimitive val _FGETFL\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FGETFL val^\n\n\n\n\nReturns\n\n\n\n\n_FGETFL\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FGETFL val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FGETFL\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FGETFL val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FGETFL\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FGETFL"
        }, 
        {
            "location": "/process-_FGETFL/#_fgetfl", 
            "text": "primitive val _FGETFL", 
            "title": "_FGETFL"
        }, 
        {
            "location": "/process-_FGETFL/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_FGETFL/#create", 
            "text": "new val create()\n: _FGETFL val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_FGETFL/#returns", 
            "text": "_FGETFL  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFL/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_FGETFL/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_FGETFL/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFL/#eq", 
            "text": "fun box eq(\n  that: _FGETFL val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_FGETFL/#parameters", 
            "text": "that:  _FGETFL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FGETFL/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFL/#ne", 
            "text": "fun box ne(\n  that: _FGETFL val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_FGETFL/#parameters_1", 
            "text": "that:  _FGETFL  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FGETFL/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFD/", 
            "text": "_FSETFD\n\n\nprimitive val _FSETFD\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FSETFD val^\n\n\n\n\nReturns\n\n\n\n\n_FSETFD\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FSETFD val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FSETFD\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FSETFD val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FSETFD\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FSETFD"
        }, 
        {
            "location": "/process-_FSETFD/#_fsetfd", 
            "text": "primitive val _FSETFD", 
            "title": "_FSETFD"
        }, 
        {
            "location": "/process-_FSETFD/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_FSETFD/#create", 
            "text": "new val create()\n: _FSETFD val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_FSETFD/#returns", 
            "text": "_FSETFD  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFD/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_FSETFD/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_FSETFD/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFD/#eq", 
            "text": "fun box eq(\n  that: _FSETFD val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_FSETFD/#parameters", 
            "text": "that:  _FSETFD  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FSETFD/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FSETFD/#ne", 
            "text": "fun box ne(\n  that: _FSETFD val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_FSETFD/#parameters_1", 
            "text": "that:  _FSETFD  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FSETFD/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFD/", 
            "text": "_FGETFD\n\n\nprimitive val _FGETFD\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FGETFD val^\n\n\n\n\nReturns\n\n\n\n\n_FGETFD\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FGETFD val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FGETFD\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FGETFD val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FGETFD\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FGETFD"
        }, 
        {
            "location": "/process-_FGETFD/#_fgetfd", 
            "text": "primitive val _FGETFD", 
            "title": "_FGETFD"
        }, 
        {
            "location": "/process-_FGETFD/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_FGETFD/#create", 
            "text": "new val create()\n: _FGETFD val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_FGETFD/#returns", 
            "text": "_FGETFD  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFD/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_FGETFD/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_FGETFD/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFD/#eq", 
            "text": "fun box eq(\n  that: _FGETFD val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_FGETFD/#parameters", 
            "text": "that:  _FGETFD  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FGETFD/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FGETFD/#ne", 
            "text": "fun box ne(\n  that: _FGETFD val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_FGETFD/#parameters_1", 
            "text": "that:  _FGETFD  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FGETFD/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FDCLOEXEC/", 
            "text": "_FDCLOEXEC\n\n\nprimitive val _FDCLOEXEC\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _FDCLOEXEC val^\n\n\n\n\nReturns\n\n\n\n\n_FDCLOEXEC\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _FDCLOEXEC val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FDCLOEXEC\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _FDCLOEXEC val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_FDCLOEXEC\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _FDCLOEXEC"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#_fdcloexec", 
            "text": "primitive val _FDCLOEXEC", 
            "title": "_FDCLOEXEC"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#create", 
            "text": "new val create()\n: _FDCLOEXEC val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#returns", 
            "text": "_FDCLOEXEC  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#eq", 
            "text": "fun box eq(\n  that: _FDCLOEXEC val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#parameters", 
            "text": "that:  _FDCLOEXEC  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#ne", 
            "text": "fun box ne(\n  that: _FDCLOEXEC val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#parameters_1", 
            "text": "that:  _FDCLOEXEC  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_FDCLOEXEC/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_SIGTERM/", 
            "text": "_SIGTERM\n\n\nprimitive val _SIGTERM\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _SIGTERM val^\n\n\n\n\nReturns\n\n\n\n\n_SIGTERM\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _SIGTERM val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SIGTERM\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _SIGTERM val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_SIGTERM\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _SIGTERM"
        }, 
        {
            "location": "/process-_SIGTERM/#_sigterm", 
            "text": "primitive val _SIGTERM", 
            "title": "_SIGTERM"
        }, 
        {
            "location": "/process-_SIGTERM/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_SIGTERM/#create", 
            "text": "new val create()\n: _SIGTERM val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_SIGTERM/#returns", 
            "text": "_SIGTERM  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_SIGTERM/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_SIGTERM/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_SIGTERM/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_SIGTERM/#eq", 
            "text": "fun box eq(\n  that: _SIGTERM val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_SIGTERM/#parameters", 
            "text": "that:  _SIGTERM  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_SIGTERM/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_SIGTERM/#ne", 
            "text": "fun box ne(\n  that: _SIGTERM val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_SIGTERM/#parameters_1", 
            "text": "that:  _SIGTERM  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_SIGTERM/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EAGAIN/", 
            "text": "_EAGAIN\n\n\nprimitive val _EAGAIN\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EAGAIN val^\n\n\n\n\nReturns\n\n\n\n\n_EAGAIN\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _EAGAIN val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EAGAIN\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EAGAIN val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EAGAIN\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EAGAIN"
        }, 
        {
            "location": "/process-_EAGAIN/#_eagain", 
            "text": "primitive val _EAGAIN", 
            "title": "_EAGAIN"
        }, 
        {
            "location": "/process-_EAGAIN/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_EAGAIN/#create", 
            "text": "new val create()\n: _EAGAIN val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_EAGAIN/#returns", 
            "text": "_EAGAIN  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EAGAIN/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_EAGAIN/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_EAGAIN/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EAGAIN/#eq", 
            "text": "fun box eq(\n  that: _EAGAIN val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_EAGAIN/#parameters", 
            "text": "that:  _EAGAIN  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_EAGAIN/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_EAGAIN/#ne", 
            "text": "fun box ne(\n  that: _EAGAIN val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_EAGAIN/#parameters_1", 
            "text": "that:  _EAGAIN  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_EAGAIN/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ONONBLOCK/", 
            "text": "_ONONBLOCK\n\n\nprimitive val _ONONBLOCK\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ONONBLOCK val^\n\n\n\n\nReturns\n\n\n\n\n_ONONBLOCK\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ONONBLOCK val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ONONBLOCK\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ONONBLOCK val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ONONBLOCK\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ONONBLOCK"
        }, 
        {
            "location": "/process-_ONONBLOCK/#_ononblock", 
            "text": "primitive val _ONONBLOCK", 
            "title": "_ONONBLOCK"
        }, 
        {
            "location": "/process-_ONONBLOCK/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_ONONBLOCK/#create", 
            "text": "new val create()\n: _ONONBLOCK val^", 
            "title": "create"
        }, 
        {
            "location": "/process-_ONONBLOCK/#returns", 
            "text": "_ONONBLOCK  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ONONBLOCK/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_ONONBLOCK/#apply", 
            "text": "fun box apply()\n: I32 val", 
            "title": "apply"
        }, 
        {
            "location": "/process-_ONONBLOCK/#returns_1", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ONONBLOCK/#eq", 
            "text": "fun box eq(\n  that: _ONONBLOCK val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-_ONONBLOCK/#parameters", 
            "text": "that:  _ONONBLOCK  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ONONBLOCK/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ONONBLOCK/#ne", 
            "text": "fun box ne(\n  that: _ONONBLOCK val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-_ONONBLOCK/#parameters_1", 
            "text": "that:  _ONONBLOCK  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ONONBLOCK/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ExecveError/", 
            "text": "ExecveError\n\n\nprimitive val ExecveError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: ExecveError val^\n\n\n\n\nReturns\n\n\n\n\nExecveError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: ExecveError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nExecveError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ExecveError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nExecveError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ExecveError"
        }, 
        {
            "location": "/process-ExecveError/#execveerror", 
            "text": "primitive val ExecveError", 
            "title": "ExecveError"
        }, 
        {
            "location": "/process-ExecveError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-ExecveError/#create", 
            "text": "new val create()\n: ExecveError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-ExecveError/#returns", 
            "text": "ExecveError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ExecveError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-ExecveError/#eq", 
            "text": "fun box eq(\n  that: ExecveError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-ExecveError/#parameters", 
            "text": "that:  ExecveError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ExecveError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ExecveError/#ne", 
            "text": "fun box ne(\n  that: ExecveError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-ExecveError/#parameters_1", 
            "text": "that:  ExecveError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ExecveError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-PipeError/", 
            "text": "PipeError\n\n\nprimitive val PipeError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: PipeError val^\n\n\n\n\nReturns\n\n\n\n\nPipeError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: PipeError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPipeError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: PipeError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPipeError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive PipeError"
        }, 
        {
            "location": "/process-PipeError/#pipeerror", 
            "text": "primitive val PipeError", 
            "title": "PipeError"
        }, 
        {
            "location": "/process-PipeError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-PipeError/#create", 
            "text": "new val create()\n: PipeError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-PipeError/#returns", 
            "text": "PipeError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-PipeError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-PipeError/#eq", 
            "text": "fun box eq(\n  that: PipeError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-PipeError/#parameters", 
            "text": "that:  PipeError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-PipeError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-PipeError/#ne", 
            "text": "fun box ne(\n  that: PipeError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-PipeError/#parameters_1", 
            "text": "that:  PipeError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-PipeError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ForkError/", 
            "text": "ForkError\n\n\nprimitive val ForkError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: ForkError val^\n\n\n\n\nReturns\n\n\n\n\nForkError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: ForkError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nForkError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ForkError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nForkError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ForkError"
        }, 
        {
            "location": "/process-ForkError/#forkerror", 
            "text": "primitive val ForkError", 
            "title": "ForkError"
        }, 
        {
            "location": "/process-ForkError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-ForkError/#create", 
            "text": "new val create()\n: ForkError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-ForkError/#returns", 
            "text": "ForkError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ForkError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-ForkError/#eq", 
            "text": "fun box eq(\n  that: ForkError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-ForkError/#parameters", 
            "text": "that:  ForkError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ForkError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ForkError/#ne", 
            "text": "fun box ne(\n  that: ForkError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-ForkError/#parameters_1", 
            "text": "that:  ForkError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ForkError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-WaitpidError/", 
            "text": "WaitpidError\n\n\nprimitive val WaitpidError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: WaitpidError val^\n\n\n\n\nReturns\n\n\n\n\nWaitpidError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: WaitpidError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nWaitpidError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: WaitpidError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nWaitpidError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive WaitpidError"
        }, 
        {
            "location": "/process-WaitpidError/#waitpiderror", 
            "text": "primitive val WaitpidError", 
            "title": "WaitpidError"
        }, 
        {
            "location": "/process-WaitpidError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-WaitpidError/#create", 
            "text": "new val create()\n: WaitpidError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-WaitpidError/#returns", 
            "text": "WaitpidError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-WaitpidError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-WaitpidError/#eq", 
            "text": "fun box eq(\n  that: WaitpidError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-WaitpidError/#parameters", 
            "text": "that:  WaitpidError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-WaitpidError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-WaitpidError/#ne", 
            "text": "fun box ne(\n  that: WaitpidError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-WaitpidError/#parameters_1", 
            "text": "that:  WaitpidError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-WaitpidError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-WriteError/", 
            "text": "WriteError\n\n\nprimitive val WriteError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: WriteError val^\n\n\n\n\nReturns\n\n\n\n\nWriteError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: WriteError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nWriteError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: WriteError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nWriteError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive WriteError"
        }, 
        {
            "location": "/process-WriteError/#writeerror", 
            "text": "primitive val WriteError", 
            "title": "WriteError"
        }, 
        {
            "location": "/process-WriteError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-WriteError/#create", 
            "text": "new val create()\n: WriteError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-WriteError/#returns", 
            "text": "WriteError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-WriteError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-WriteError/#eq", 
            "text": "fun box eq(\n  that: WriteError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-WriteError/#parameters", 
            "text": "that:  WriteError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-WriteError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-WriteError/#ne", 
            "text": "fun box ne(\n  that: WriteError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-WriteError/#parameters_1", 
            "text": "that:  WriteError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-WriteError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-KillError/", 
            "text": "KillError\n\n\nprimitive val KillError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: KillError val^\n\n\n\n\nReturns\n\n\n\n\nKillError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: KillError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nKillError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: KillError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nKillError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive KillError"
        }, 
        {
            "location": "/process-KillError/#killerror", 
            "text": "primitive val KillError", 
            "title": "KillError"
        }, 
        {
            "location": "/process-KillError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-KillError/#create", 
            "text": "new val create()\n: KillError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-KillError/#returns", 
            "text": "KillError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-KillError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-KillError/#eq", 
            "text": "fun box eq(\n  that: KillError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-KillError/#parameters", 
            "text": "that:  KillError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-KillError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-KillError/#ne", 
            "text": "fun box ne(\n  that: KillError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-KillError/#parameters_1", 
            "text": "that:  KillError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-KillError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-Unsupported/", 
            "text": "Unsupported\n\n\nprimitive val Unsupported\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Unsupported val^\n\n\n\n\nReturns\n\n\n\n\nUnsupported\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: Unsupported val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nUnsupported\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Unsupported val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nUnsupported\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Unsupported"
        }, 
        {
            "location": "/process-Unsupported/#unsupported", 
            "text": "primitive val Unsupported", 
            "title": "Unsupported"
        }, 
        {
            "location": "/process-Unsupported/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-Unsupported/#create", 
            "text": "new val create()\n: Unsupported val^", 
            "title": "create"
        }, 
        {
            "location": "/process-Unsupported/#returns", 
            "text": "Unsupported  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-Unsupported/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-Unsupported/#eq", 
            "text": "fun box eq(\n  that: Unsupported val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-Unsupported/#parameters", 
            "text": "that:  Unsupported  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-Unsupported/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-Unsupported/#ne", 
            "text": "fun box ne(\n  that: Unsupported val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-Unsupported/#parameters_1", 
            "text": "that:  Unsupported  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-Unsupported/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-CapError/", 
            "text": "CapError\n\n\nprimitive val CapError\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: CapError val^\n\n\n\n\nReturns\n\n\n\n\nCapError\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: CapError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCapError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: CapError val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCapError\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive CapError"
        }, 
        {
            "location": "/process-CapError/#caperror", 
            "text": "primitive val CapError", 
            "title": "CapError"
        }, 
        {
            "location": "/process-CapError/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-CapError/#create", 
            "text": "new val create()\n: CapError val^", 
            "title": "create"
        }, 
        {
            "location": "/process-CapError/#returns", 
            "text": "CapError  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-CapError/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-CapError/#eq", 
            "text": "fun box eq(\n  that: CapError val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-CapError/#parameters", 
            "text": "that:  CapError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-CapError/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-CapError/#ne", 
            "text": "fun box ne(\n  that: CapError val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-CapError/#parameters_1", 
            "text": "that:  CapError  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-CapError/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessError/", 
            "text": "ProcessError\n\n\ntype ProcessError is\n  (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nExecveError\n val | \nForkError\n val | \nKillError\n val | \nPipeError\n val | \nUnsupported\n val | \nWaitpidError\n val | \nWriteError\n val | \nCapError\n val)", 
            "title": "type ProcessError"
        }, 
        {
            "location": "/process-ProcessError/#processerror", 
            "text": "type ProcessError is\n  (ExecveError val | ForkError val | KillError val | PipeError val | Unsupported val | WaitpidError val | WriteError val | CapError val)", 
            "title": "ProcessError"
        }, 
        {
            "location": "/process-ProcessError/#type-alias-for", 
            "text": "( ExecveError  val |  ForkError  val |  KillError  val |  PipeError  val |  Unsupported  val |  WaitpidError  val |  WriteError  val |  CapError  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/process-ProcessMonitorAuth/", 
            "text": "ProcessMonitorAuth\n\n\ntype ProcessMonitorAuth is\n  (AmbientAuth val | StartProcessAuth val)\n\n\n\n\nType Alias For\n\n\n\n\n(\nAmbientAuth\n val | \nStartProcessAuth\n val)", 
            "title": "type ProcessMonitorAuth"
        }, 
        {
            "location": "/process-ProcessMonitorAuth/#processmonitorauth", 
            "text": "type ProcessMonitorAuth is\n  (AmbientAuth val | StartProcessAuth val)", 
            "title": "ProcessMonitorAuth"
        }, 
        {
            "location": "/process-ProcessMonitorAuth/#type-alias-for", 
            "text": "( AmbientAuth  val |  StartProcessAuth  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/process-ProcessMonitor/", 
            "text": "ProcessMonitor\n\n\nForks and monitors a process. Notifies a client about STDOUT / STDERR events.\n\n\nactor tag ProcessMonitor\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  auth: (AmbientAuth val | StartProcessAuth val),\n  backpressure_auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val),\n  notifier: ProcessNotify iso,\n  filepath: FilePath val,\n  args: Array[String val] val,\n  vars: Array[String val] val)\n: ProcessMonitor tag^\n\n\n\n\nParameters\n\n\n\n\nauth: (\nAmbientAuth\n val | \nStartProcessAuth\n val)\n\n\nbackpressure_auth: (\nAmbientAuth\n val | \nApplyReleaseBackpressureAuth\n val)\n\n\nnotifier: \nProcessNotify\n iso\n\n\nfilepath: \nFilePath\n val\n\n\nargs: \nArray\n[\nString\n val] val\n\n\nvars: \nArray\n[\nString\n val] val\n\n\n\n\nReturns\n\n\n\n\nProcessMonitor\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nprint\n\n\nPrint some bytes and append a newline.\n\n\nbe print(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nwrite\n\n\nWrite to STDIN of the child process.\n\n\nbe write(\n  data: (String val | Array[U8 val] val))\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\n\n\nprintv\n\n\nPrint an iterable collection of ByteSeqs.\n\n\nbe printv(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\nwritev\n\n\nWrite an iterable collection of ByteSeqs.\n\n\nbe writev(\n  data: ByteSeqIter val)\n\n\n\n\nParameters\n\n\n\n\ndata: \nByteSeqIter\n val\n\n\n\n\n\n\ndone_writing\n\n\nSet the _done_writing flag to true. If the _pending is empty we can\nclose the _stdin_write file descriptor.\n\n\nbe done_writing()\n\n\n\n\n\n\ndispose\n\n\nTerminate child and close down everything.\n\n\nbe dispose()\n\n\n\n\n\n\nPublic Functions\n\n\nexpect\n\n\nA \nstdout\n call on the notifier must contain exactly \nqty\n bytes. If\n\nqty\n is zero, the call can contain any amount of data.\n\n\nfun ref expect(\n  qty: USize val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nqty: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nHandle the incoming event.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\n_read_again\n\n\nResume reading on file descriptor.\n\n\nbe _read_again(\n  fd: U32 val)\n\n\n\n\nParameters\n\n\n\n\nfd: \nU32\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_child\n\n\nWe are now in the child process. We redirect STDIN, STDOUT and STDERR\nto their pipes and execute the command. The command is executed via\nexecve which does not return on success, and the text, data, bss, and\nstack of the calling process are overwritten by that of the program\nloaded. We've set the FD_CLOEXEC flag on all file descriptors to ensure\nthat they are all closed automatically once @execve gets called.\n\n\nfun box _child(\n  path: String val,\n  argp: Array[Pointer[U8 val] tag] ref,\n  envp: Array[Pointer[U8 val] tag] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\npath: \nString\n val\n\n\nargp: \nArray\n[\nPointer\n[\nU8\n val] tag] ref\n\n\nenvp: \nArray\n[\nPointer\n[\nU8\n val] tag] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_parent\n\n\nWe're now in the parent process. We setup asio events for STDOUT and STDERR\nand close the file descriptors we don't need.\n\n\nfun ref _parent()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_make_argv\n\n\nConvert an array of String parameters into an array of\nC pointers to same strings.\n\n\nfun box _make_argv(\n  args: Array[String val] box)\n: Array[Pointer[U8 val] tag] ref\n\n\n\n\nParameters\n\n\n\n\nargs: \nArray\n[\nString\n val] box\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nPointer\n[\nU8\n val] tag] ref\n\n\n\n\n\n\n_dup2\n\n\nCreates a copy of the file descriptor oldfd using the file\ndescriptor number specified in newfd. If the file descriptor newfd\nwas previously open, it is silently closed before being reused.\nIf dup2() fails because of EINTR we retry.\n\n\nfun box _dup2(\n  oldfd: U32 val,\n  newfd: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\noldfd: \nU32\n val\n\n\nnewfd: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_make_pipe\n\n\nCreates a pipe, an unidirectional data channel that can be used\nfor interprocess communication. We need to set the flag on the\ntwo file descriptors here to prevent capturing by another thread.\n\n\nfun box _make_pipe(\n  fd_flags: I32 val)\n: (U32 val , U32 val) ?\n\n\n\n\nParameters\n\n\n\n\nfd_flags: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\n(\nU32\n val , \nU32\n val) ?\n\n\n\n\n\n\n_getflags\n\n\nGet the string representation of flags set for a file descriptor\n\n\nfun box _getflags(\n  fd: U32 val)\n: String box ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n box ?\n\n\n\n\n\n\n_set_fd\n\n\nfun box _set_fd(\n  fd: U32 val,\n  flags: I32 val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nU32\n val\n\n\nflags: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_set_fl\n\n\nfun box _set_fl(\n  fd: U32 val,\n  flags: I32 val)\n: None val ?\n\n\n\n\nParameters\n\n\n\n\nfd: \nU32\n val\n\n\nflags: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_print_final\n\n\nfun ref _print_final(\n  data: (String val | Array[U8 val] val))\n: None val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_kill_child\n\n\nTerminate the child process.\n\n\nfun box _kill_child()\n: None val ?\n\n\n\n\nReturns\n\n\n\n\nNone\n val ?\n\n\n\n\n\n\n_event_flags\n\n\nReturn all flags of an event as a string.\n\n\nfun box _event_flags(\n  flags: U32 val)\n: String box\n\n\n\n\nParameters\n\n\n\n\nflags: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nString\n box\n\n\n\n\n\n\n_close_fd\n\n\nClose a file descriptor.\n\n\nfun ref _close_fd(\n  fd: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nfd: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_close\n\n\nClose all pipes, unsubscribe events and wait for the child process to exit.\n\n\nfun ref _close()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_try_shutdown\n\n\nIf neither stdout nor stderr are open we close down and exit.\n\n\nfun ref _try_shutdown()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_pending_reads\n\n\nRead from stdout while data is available. If we read 4 kb of data,\nsend ourself a resume message and stop reading, to avoid starving\nother actors.\nIt's safe to use the same buffer for stdout and stderr because of\ncausal messaging. Events get processed one \nafter\n another.\n\n\nfun ref _pending_reads(\n  fd: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nfd: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_read_buf_size\n\n\nfun ref _read_buf_size()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_write_final\n\n\nWrite as much as possible to the fd. Return false if not\neverything was written.\n\n\nfun ref _write_final(\n  data: (String val | Array[U8 val] val))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ndata: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_pending_writes\n\n\nSend pending data. If any data can't be sent, keep it and mark fd as not\nwriteable. Once set to false the _stdin_writeable flag can only be cleared\nhere by processing the pending writes. If the _done_writing flag is set we\nclose the _stdin_write fd once we've processed pending writes.\n\n\nfun ref _pending_writes()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "actor ProcessMonitor"
        }, 
        {
            "location": "/process-ProcessMonitor/#processmonitor", 
            "text": "Forks and monitors a process. Notifies a client about STDOUT / STDERR events.  actor tag ProcessMonitor", 
            "title": "ProcessMonitor"
        }, 
        {
            "location": "/process-ProcessMonitor/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-ProcessMonitor/#create", 
            "text": "new tag create(\n  auth: (AmbientAuth val | StartProcessAuth val),\n  backpressure_auth: (AmbientAuth val | ApplyReleaseBackpressureAuth val),\n  notifier: ProcessNotify iso,\n  filepath: FilePath val,\n  args: Array[String val] val,\n  vars: Array[String val] val)\n: ProcessMonitor tag^", 
            "title": "create"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters", 
            "text": "auth: ( AmbientAuth  val |  StartProcessAuth  val)  backpressure_auth: ( AmbientAuth  val |  ApplyReleaseBackpressureAuth  val)  notifier:  ProcessNotify  iso  filepath:  FilePath  val  args:  Array [ String  val] val  vars:  Array [ String  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns", 
            "text": "ProcessMonitor  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/process-ProcessMonitor/#print", 
            "text": "Print some bytes and append a newline.  be print(\n  data: (String val | Array[U8 val] val))", 
            "title": "print"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_1", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#write", 
            "text": "Write to STDIN of the child process.  be write(\n  data: (String val | Array[U8 val] val))", 
            "title": "write"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_2", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#printv", 
            "text": "Print an iterable collection of ByteSeqs.  be printv(\n  data: ByteSeqIter val)", 
            "title": "printv"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_3", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#writev", 
            "text": "Write an iterable collection of ByteSeqs.  be writev(\n  data: ByteSeqIter val)", 
            "title": "writev"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_4", 
            "text": "data:  ByteSeqIter  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#done_writing", 
            "text": "Set the _done_writing flag to true. If the _pending is empty we can\nclose the _stdin_write file descriptor.  be done_writing()", 
            "title": "done_writing"
        }, 
        {
            "location": "/process-ProcessMonitor/#dispose", 
            "text": "Terminate child and close down everything.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/process-ProcessMonitor/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-ProcessMonitor/#expect", 
            "text": "A  stdout  call on the notifier must contain exactly  qty  bytes. If qty  is zero, the call can contain any amount of data.  fun ref expect(\n  qty: USize val = seq)\n: None val", 
            "title": "expect"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_5", 
            "text": "qty:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/process-ProcessMonitor/#_event_notify", 
            "text": "Handle the incoming event.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_6", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#_read_again", 
            "text": "Resume reading on file descriptor.  be _read_again(\n  fd: U32 val)", 
            "title": "_read_again"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_7", 
            "text": "fd:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/process-ProcessMonitor/#_child", 
            "text": "We are now in the child process. We redirect STDIN, STDOUT and STDERR\nto their pipes and execute the command. The command is executed via\nexecve which does not return on success, and the text, data, bss, and\nstack of the calling process are overwritten by that of the program\nloaded. We've set the FD_CLOEXEC flag on all file descriptors to ensure\nthat they are all closed automatically once @execve gets called.  fun box _child(\n  path: String val,\n  argp: Array[Pointer[U8 val] tag] ref,\n  envp: Array[Pointer[U8 val] tag] ref)\n: None val", 
            "title": "_child"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_8", 
            "text": "path:  String  val  argp:  Array [ Pointer [ U8  val] tag] ref  envp:  Array [ Pointer [ U8  val] tag] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_parent", 
            "text": "We're now in the parent process. We setup asio events for STDOUT and STDERR\nand close the file descriptors we don't need.  fun ref _parent()\n: None val", 
            "title": "_parent"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_make_argv", 
            "text": "Convert an array of String parameters into an array of\nC pointers to same strings.  fun box _make_argv(\n  args: Array[String val] box)\n: Array[Pointer[U8 val] tag] ref", 
            "title": "_make_argv"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_9", 
            "text": "args:  Array [ String  val] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_4", 
            "text": "Array [ Pointer [ U8  val] tag] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_dup2", 
            "text": "Creates a copy of the file descriptor oldfd using the file\ndescriptor number specified in newfd. If the file descriptor newfd\nwas previously open, it is silently closed before being reused.\nIf dup2() fails because of EINTR we retry.  fun box _dup2(\n  oldfd: U32 val,\n  newfd: U32 val)\n: None val", 
            "title": "_dup2"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_10", 
            "text": "oldfd:  U32  val  newfd:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_make_pipe", 
            "text": "Creates a pipe, an unidirectional data channel that can be used\nfor interprocess communication. We need to set the flag on the\ntwo file descriptors here to prevent capturing by another thread.  fun box _make_pipe(\n  fd_flags: I32 val)\n: (U32 val , U32 val) ?", 
            "title": "_make_pipe"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_11", 
            "text": "fd_flags:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_6", 
            "text": "( U32  val ,  U32  val) ?", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_getflags", 
            "text": "Get the string representation of flags set for a file descriptor  fun box _getflags(\n  fd: U32 val)\n: String box ?", 
            "title": "_getflags"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_12", 
            "text": "fd:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_7", 
            "text": "String  box ?", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_set_fd", 
            "text": "fun box _set_fd(\n  fd: U32 val,\n  flags: I32 val)\n: None val ?", 
            "title": "_set_fd"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_13", 
            "text": "fd:  U32  val  flags:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_8", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_set_fl", 
            "text": "fun box _set_fl(\n  fd: U32 val,\n  flags: I32 val)\n: None val ?", 
            "title": "_set_fl"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_14", 
            "text": "fd:  U32  val  flags:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_9", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_print_final", 
            "text": "fun ref _print_final(\n  data: (String val | Array[U8 val] val))\n: None val", 
            "title": "_print_final"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_15", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_kill_child", 
            "text": "Terminate the child process.  fun box _kill_child()\n: None val ?", 
            "title": "_kill_child"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_11", 
            "text": "None  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_event_flags", 
            "text": "Return all flags of an event as a string.  fun box _event_flags(\n  flags: U32 val)\n: String box", 
            "title": "_event_flags"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_16", 
            "text": "flags:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_12", 
            "text": "String  box", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_close_fd", 
            "text": "Close a file descriptor.  fun ref _close_fd(\n  fd: U32 val)\n: None val", 
            "title": "_close_fd"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_17", 
            "text": "fd:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_close", 
            "text": "Close all pipes, unsubscribe events and wait for the child process to exit.  fun ref _close()\n: None val", 
            "title": "_close"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_try_shutdown", 
            "text": "If neither stdout nor stderr are open we close down and exit.  fun ref _try_shutdown()\n: None val", 
            "title": "_try_shutdown"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_pending_reads", 
            "text": "Read from stdout while data is available. If we read 4 kb of data,\nsend ourself a resume message and stop reading, to avoid starving\nother actors.\nIt's safe to use the same buffer for stdout and stderr because of\ncausal messaging. Events get processed one  after  another.  fun ref _pending_reads(\n  fd: U32 val)\n: Bool val", 
            "title": "_pending_reads"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_18", 
            "text": "fd:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_16", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_read_buf_size", 
            "text": "fun ref _read_buf_size()\n: None val", 
            "title": "_read_buf_size"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_write_final", 
            "text": "Write as much as possible to the fd. Return false if not\neverything was written.  fun ref _write_final(\n  data: (String val | Array[U8 val] val))\n: Bool val", 
            "title": "_write_final"
        }, 
        {
            "location": "/process-ProcessMonitor/#parameters_19", 
            "text": "data: ( String  val |  Array [ U8  val] val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_18", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-ProcessMonitor/#_pending_writes", 
            "text": "Send pending data. If any data can't be sent, keep it and mark fd as not\nwriteable. Once set to false the _stdin_writeable flag can only be cleared\nhere by processing the pending writes. If the _done_writing flag is set we\nclose the _stdin_write fd once we've processed pending writes.  fun ref _pending_writes()\n: Bool val", 
            "title": "_pending_writes"
        }, 
        {
            "location": "/process-ProcessMonitor/#returns_19", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-StartProcessAuth/", 
            "text": "StartProcessAuth\n\n\nprimitive val StartProcessAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  from: AmbientAuth val)\n: StartProcessAuth val^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nStartProcessAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: StartProcessAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStartProcessAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: StartProcessAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nStartProcessAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive StartProcessAuth"
        }, 
        {
            "location": "/process-StartProcessAuth/#startprocessauth", 
            "text": "primitive val StartProcessAuth", 
            "title": "StartProcessAuth"
        }, 
        {
            "location": "/process-StartProcessAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-StartProcessAuth/#create", 
            "text": "new val create(\n  from: AmbientAuth val)\n: StartProcessAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/process-StartProcessAuth/#parameters", 
            "text": "from:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-StartProcessAuth/#returns", 
            "text": "StartProcessAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-StartProcessAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-StartProcessAuth/#eq", 
            "text": "fun box eq(\n  that: StartProcessAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/process-StartProcessAuth/#parameters_1", 
            "text": "that:  StartProcessAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-StartProcessAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-StartProcessAuth/#ne", 
            "text": "fun box ne(\n  that: StartProcessAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/process-StartProcessAuth/#parameters_2", 
            "text": "that:  StartProcessAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-StartProcessAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/", 
            "text": "_ProcessClient\n\n\nNotifications for Process connections.\n\n\nclass ref _ProcessClient is\n  ProcessNotify ref\n\n\n\n\nImplements\n\n\n\n\nProcessNotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  out: USize val,\n  err: String val,\n  exit_code: I32 val,\n  h: TestHelper val)\n: _ProcessClient iso^\n\n\n\n\nParameters\n\n\n\n\nout: \nUSize\n val\n\n\nerr: \nString\n val\n\n\nexit_code: \nI32\n val\n\n\nh: \nTestHelper\n val\n\n\n\n\nReturns\n\n\n\n\n_ProcessClient\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\nstdout\n\n\nCalled when new data is received on STDOUT of the forked process\n\n\nfun ref stdout(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nstderr\n\n\nCalled when new data is received on STDERR of the forked process\n\n\nfun ref stderr(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfailed\n\n\nProcessMonitor calls this if we run into errors with the\nforked process.\n\n\nfun ref failed(\n  process: ProcessMonitor ref,\n  err: (ExecveError val | ForkError val | KillError val | \n    PipeError val | Unsupported val | WaitpidError val | \n    WriteError val | CapError val))\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\nerr: (\nExecveError\n val | \nForkError\n val | \nKillError\n val | \n    \nPipeError\n val | \nUnsupported\n val | \nWaitpidError\n val | \n    \nWriteError\n val | \nCapError\n val)\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndispose\n\n\nCalled when ProcessMonitor terminates to cleanup ProcessNotify\nWe receive the exit code of the child process from ProcessMonitor.\n\n\nfun ref dispose(\n  process: ProcessMonitor ref,\n  child_exit_code: I32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\nchild_exit_code: \nI32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ncreated\n\n\nfun ref created(\n  process: ProcessMonitor ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nexpect\n\n\nfun ref expect(\n  process: ProcessMonitor ref,\n  qty: USize val)\n: USize val\n\n\n\n\nParameters\n\n\n\n\nprocess: \nProcessMonitor\n ref\n\n\nqty: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "class _ProcessClient"
        }, 
        {
            "location": "/process-_ProcessClient/#_processclient", 
            "text": "Notifications for Process connections.  class ref _ProcessClient is\n  ProcessNotify ref", 
            "title": "_ProcessClient"
        }, 
        {
            "location": "/process-_ProcessClient/#implements", 
            "text": "ProcessNotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/process-_ProcessClient/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/process-_ProcessClient/#create", 
            "text": "new iso create(\n  out: USize val,\n  err: String val,\n  exit_code: I32 val,\n  h: TestHelper val)\n: _ProcessClient iso^", 
            "title": "create"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters", 
            "text": "out:  USize  val  err:  String  val  exit_code:  I32  val  h:  TestHelper  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns", 
            "text": "_ProcessClient  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/process-_ProcessClient/#stdout", 
            "text": "Called when new data is received on STDOUT of the forked process  fun ref stdout(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val", 
            "title": "stdout"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters_1", 
            "text": "process:  ProcessMonitor  ref  data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/#stderr", 
            "text": "Called when new data is received on STDERR of the forked process  fun ref stderr(\n  process: ProcessMonitor ref,\n  data: Array[U8 val] iso)\n: None val", 
            "title": "stderr"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters_2", 
            "text": "process:  ProcessMonitor  ref  data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/#failed", 
            "text": "ProcessMonitor calls this if we run into errors with the\nforked process.  fun ref failed(\n  process: ProcessMonitor ref,\n  err: (ExecveError val | ForkError val | KillError val | \n    PipeError val | Unsupported val | WaitpidError val | \n    WriteError val | CapError val))\n: None val", 
            "title": "failed"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters_3", 
            "text": "process:  ProcessMonitor  ref  err: ( ExecveError  val |  ForkError  val |  KillError  val | \n     PipeError  val |  Unsupported  val |  WaitpidError  val | \n     WriteError  val |  CapError  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/#dispose", 
            "text": "Called when ProcessMonitor terminates to cleanup ProcessNotify\nWe receive the exit code of the child process from ProcessMonitor.  fun ref dispose(\n  process: ProcessMonitor ref,\n  child_exit_code: I32 val)\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters_4", 
            "text": "process:  ProcessMonitor  ref  child_exit_code:  I32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/#created", 
            "text": "fun ref created(\n  process: ProcessMonitor ref)\n: None val", 
            "title": "created"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters_5", 
            "text": "process:  ProcessMonitor  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/process-_ProcessClient/#expect", 
            "text": "fun ref expect(\n  process: ProcessMonitor ref,\n  qty: USize val)\n: USize val", 
            "title": "expect"
        }, 
        {
            "location": "/process-_ProcessClient/#parameters_6", 
            "text": "process:  ProcessMonitor  ref  qty:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/process-_ProcessClient/#returns_6", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises--index/", 
            "text": "Promises Package\n\n\nA \nPromise\n represents a value that will be available at a later\ntime. \nPromise\ns can either be fulfilled with a value or rejected. Any\nnumber of function handlers can be added to the \nPromise\n, to be\ncalled when the \nPromise\n is fulfilled or rejected. These handlers\nthemselves are also wrapped in \nPromise\ns so that they can be chained\ntogether in order for the fulfilled value of one \nPromise\n to be used\nto compute a value which will be used to fulfill the next \nPromise\n in\nthe chain, or so that if the \nPromise\n is rejected then the subsequent\nreject functions will also be called. The input and output types of a\nfulfill handler do not have to be the same, so a chain of fulfill\nhandlers can transform the original value into something new.\n\n\nFulfill and reject handlers can either be specified as classes that\nimplment the \nFulfill\n and \nReject\n interfaces, or as functions with\nthe same signatures as the \napply\n methods in \nFulfill\n and \nReject\n.\n\n\nIn the following code, the fulfillment of the \nPromise\n causes the\nexecution of several fulfillment functions. The output is:\n\n\nfulfilled + foo\nfulfilled + bar\nfulfilled + baz\n\n\n\n\nuse \npromises\n\n\nclass PrintFulfill is Fulfill[String, String]\n  let _env: Env\n  let _msg: String\n  new create(env: Env, msg: String) =\n\n    _env = env\n    _msg = msg\n  fun apply(s: String): String =\n\n    _env.out.print(\n + \n.join([s; _msg]))\n    s\n\nactor Main\n  new create(env: Env) =\n\n     let promise = Promise[String]\n     promise.next[String](recover PrintFulfill(env, \nfoo\n) end)\n     promise.next[String](recover PrintFulfill(env, \nbar\n) end)\n     promise.next[String](recover PrintFulfill(env, \nbaz\n) end)\n     promise(\nfulfilled\n)\n\n\n\n\nIn the following code, the fulfill functions are chained together so\nthat the fulfilled value of the first one is used to generate a value\nwhich fulfills the second one, which in turn is used to compute a\nvalue which fulfills the third one, which in turn is used to compute a\nvalue which fulfills the fourth one. The output is the average length\nof the words passed on the command line or \n0\n if there are no command\nline arguments.\n\n\nuse \npromises\n\n\nprimitive Computation\n  fun tag string_to_strings(s: String): Array[String] val =\n\n    recover s.split() end\n  fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val =\n\n    recover\n      let len = Array[USize]\n      for s in sa.values() do\n        len.push(s.size())\n      end\n      len\n    end\n  fun tag sizes_to_avg(sza: Array[USize] val): USize =\n\n    var acc = USize(0)\n    for sz in sza.values() do\n      acc = acc + sz\n    end\n    acc / sza.size()\n  fun tag output(env: Env, sz: USize): None =\n\n    env.out.print(sz.string())\n\nactor Main\n  new create(env: Env) =\n\n     let promise = Promise[String]\n     promise.next[Array[String] val](recover Computation~string_to_strings() end)\n            .next[Array[USize] val](recover Computation~strings_to_sizes() end)\n            .next[USize](recover Computation~sizes_to_avg() end)\n            .next[None](recover Computation~output(env) end)\n     promise(\n \n.join(env.args.slice(1)))\n\n\n\n\nPublic Types\n\n\n\n\nactor Promise\n\n\nprimitive Promises\n\n\ninterface Fulfill\n\n\ninterface Reject\n\n\nclass FulfillIdentity\n\n\nclass RejectAlways\n\n\n\n\nPrivate Types\n\n\n\n\nactor _Join\n\n\nprimitive _None\n\n\nprimitive _Pending\n\n\nprimitive _Reject\n\n\nclass _Then\n\n\ninterface _IThen", 
            "title": "Package"
        }, 
        {
            "location": "/promises--index/#promises-package", 
            "text": "A  Promise  represents a value that will be available at a later\ntime.  Promise s can either be fulfilled with a value or rejected. Any\nnumber of function handlers can be added to the  Promise , to be\ncalled when the  Promise  is fulfilled or rejected. These handlers\nthemselves are also wrapped in  Promise s so that they can be chained\ntogether in order for the fulfilled value of one  Promise  to be used\nto compute a value which will be used to fulfill the next  Promise  in\nthe chain, or so that if the  Promise  is rejected then the subsequent\nreject functions will also be called. The input and output types of a\nfulfill handler do not have to be the same, so a chain of fulfill\nhandlers can transform the original value into something new.  Fulfill and reject handlers can either be specified as classes that\nimplment the  Fulfill  and  Reject  interfaces, or as functions with\nthe same signatures as the  apply  methods in  Fulfill  and  Reject .  In the following code, the fulfillment of the  Promise  causes the\nexecution of several fulfillment functions. The output is:  fulfilled + foo\nfulfilled + bar\nfulfilled + baz  use  promises \n\nclass PrintFulfill is Fulfill[String, String]\n  let _env: Env\n  let _msg: String\n  new create(env: Env, msg: String) = \n    _env = env\n    _msg = msg\n  fun apply(s: String): String = \n    _env.out.print(  +  .join([s; _msg]))\n    s\n\nactor Main\n  new create(env: Env) = \n     let promise = Promise[String]\n     promise.next[String](recover PrintFulfill(env,  foo ) end)\n     promise.next[String](recover PrintFulfill(env,  bar ) end)\n     promise.next[String](recover PrintFulfill(env,  baz ) end)\n     promise( fulfilled )  In the following code, the fulfill functions are chained together so\nthat the fulfilled value of the first one is used to generate a value\nwhich fulfills the second one, which in turn is used to compute a\nvalue which fulfills the third one, which in turn is used to compute a\nvalue which fulfills the fourth one. The output is the average length\nof the words passed on the command line or  0  if there are no command\nline arguments.  use  promises \n\nprimitive Computation\n  fun tag string_to_strings(s: String): Array[String] val = \n    recover s.split() end\n  fun tag strings_to_sizes(sa: Array[String] val): Array[USize] val = \n    recover\n      let len = Array[USize]\n      for s in sa.values() do\n        len.push(s.size())\n      end\n      len\n    end\n  fun tag sizes_to_avg(sza: Array[USize] val): USize = \n    var acc = USize(0)\n    for sz in sza.values() do\n      acc = acc + sz\n    end\n    acc / sza.size()\n  fun tag output(env: Env, sz: USize): None = \n    env.out.print(sz.string())\n\nactor Main\n  new create(env: Env) = \n     let promise = Promise[String]\n     promise.next[Array[String] val](recover Computation~string_to_strings() end)\n            .next[Array[USize] val](recover Computation~strings_to_sizes() end)\n            .next[USize](recover Computation~sizes_to_avg() end)\n            .next[None](recover Computation~output(env) end)\n     promise(   .join(env.args.slice(1)))", 
            "title": "Promises Package"
        }, 
        {
            "location": "/promises--index/#public-types", 
            "text": "actor Promise  primitive Promises  interface Fulfill  interface Reject  class FulfillIdentity  class RejectAlways", 
            "title": "Public Types"
        }, 
        {
            "location": "/promises--index/#private-types", 
            "text": "actor _Join  primitive _None  primitive _Pending  primitive _Reject  class _Then  interface _IThen", 
            "title": "Private Types"
        }, 
        {
            "location": "/promises-Promise/", 
            "text": "Promise[A: \nAny\n #share]\n\n\nA promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.\n\n\nAny number of promises can be chained after this one.\n\n\nactor tag Promise[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: Promise[A] tag^\n\n\n\n\nReturns\n\n\n\n\nPromise\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nFulfill the promise.\n\n\nbe apply(\n  value: A)\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\n\n\nreject\n\n\nReject the promise.\n\n\nbe reject()\n\n\n\n\n\n\nPublic Functions\n\n\nnext[B: \nAny\n #share]\n\n\nChain a promise after this one.\n\n\nWhen this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.\n\n\nIf there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.\n\n\nIf this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.\n\n\nIf there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.\n\n\nfun tag next[B: Any #share](\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso = seq)\n: Promise[B] tag\n\n\n\n\nParameters\n\n\n\n\nfulfill: \nFulfill\n[A, B] iso\n\n\nrejected: \nReject\n[B] iso = seq\n\n\n\n\nReturns\n\n\n\n\nPromise\n[B] tag\n\n\n\n\n\n\nadd[optional B: \nAny\n #share]\n\n\nAdd two promises into one promise that returns the result of both when\nthey are fulfilled. If either of the promises is rejected then the new\npromise is also rejected.\n\n\nfun tag add[optional B: Any #share](\n  p: Promise[B] tag)\n: Promise[(A , B)] tag\n\n\n\n\nParameters\n\n\n\n\np: \nPromise\n[B] tag\n\n\n\n\nReturns\n\n\n\n\nPromise\n[(A , B)] tag\n\n\n\n\n\n\njoin\n\n\nCreate a promise that is fulfilled when the receiver and all promises in\nthe given iterator are fulfilled. If the receiver or any promise in the\nsequence is rejected then the new promise is also rejected.\n\n\nfun tag join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n\n\n\n\nParameters\n\n\n\n\nps: \nIterator\n[\nPromise\n[A] tag] ref\n\n\n\n\nReturns\n\n\n\n\nPromise\n[\nArray\n[A] val] tag\n\n\n\n\n\n\nselect\n\n\nReturn a promise that is fulfilled when either promise is fulfilled,\nresulting in a tuple of its value and the other promise.\n\n\nfun tag select(\n  p: Promise[A] tag)\n: Promise[(A , Promise[A] tag)] tag\n\n\n\n\nParameters\n\n\n\n\np: \nPromise\n[A] tag\n\n\n\n\nReturns\n\n\n\n\nPromise\n[(A , \nPromise\n[A] tag)] tag\n\n\n\n\n\n\ntimeout\n\n\nReject the promise after the given expiration in nanoseconds.\n\n\nfun tag timeout(\n  expiration: U64 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nexpiration: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_attach\n\n\nAttaches a step asynchronously. If this promise has already been fulfilled\nor rejected, immediately fulfill or reject the incoming step. Otherwise,\nkeep it in a list.\n\n\nbe _attach(\n  attach: _IThen[A] iso)\n\n\n\n\nParameters\n\n\n\n\nattach: \n_IThen\n[A] iso", 
            "title": "actor Promise"
        }, 
        {
            "location": "/promises-Promise/#promise91a-any-share93", 
            "text": "A promise to eventually produce a result of type A. This promise can either\nbe fulfilled or rejected.  Any number of promises can be chained after this one.  actor tag Promise[A: Any #share]", 
            "title": "Promise[A: Any #share]"
        }, 
        {
            "location": "/promises-Promise/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-Promise/#create", 
            "text": "new tag create()\n: Promise[A] tag^", 
            "title": "create"
        }, 
        {
            "location": "/promises-Promise/#returns", 
            "text": "Promise [A] tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promise/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/promises-Promise/#apply", 
            "text": "Fulfill the promise.  be apply(\n  value: A)", 
            "title": "apply"
        }, 
        {
            "location": "/promises-Promise/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promise/#reject", 
            "text": "Reject the promise.  be reject()", 
            "title": "reject"
        }, 
        {
            "location": "/promises-Promise/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Promise/#next91b-any-share93", 
            "text": "Chain a promise after this one.  When this promise is fulfilled, the result of type A is passed to the\nfulfill function, generating in an intermediate result of type B. This\nis then used to fulfill the next promise in the chain.  If there is no fulfill function, or if the fulfill function raises an\nerror, then the next promise in the chain will be rejected.  If this promise is rejected, this step's reject function is called with no\ninput, generating an intermediate result of type B which is used to\nfulfill the next promise in the chain.  If there is no reject function, of if the reject function raises an error,\nthen the next promise in the chain will be rejected.  fun tag next[B: Any #share](\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso = seq)\n: Promise[B] tag", 
            "title": "next[B: Any #share]"
        }, 
        {
            "location": "/promises-Promise/#parameters_1", 
            "text": "fulfill:  Fulfill [A, B] iso  rejected:  Reject [B] iso = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promise/#returns_1", 
            "text": "Promise [B] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promise/#add91optional-b-any-share93", 
            "text": "Add two promises into one promise that returns the result of both when\nthey are fulfilled. If either of the promises is rejected then the new\npromise is also rejected.  fun tag add[optional B: Any #share](\n  p: Promise[B] tag)\n: Promise[(A , B)] tag", 
            "title": "add[optional B: Any #share]"
        }, 
        {
            "location": "/promises-Promise/#parameters_2", 
            "text": "p:  Promise [B] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promise/#returns_2", 
            "text": "Promise [(A , B)] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promise/#join", 
            "text": "Create a promise that is fulfilled when the receiver and all promises in\nthe given iterator are fulfilled. If the receiver or any promise in the\nsequence is rejected then the new promise is also rejected.  fun tag join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag", 
            "title": "join"
        }, 
        {
            "location": "/promises-Promise/#parameters_3", 
            "text": "ps:  Iterator [ Promise [A] tag] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promise/#returns_3", 
            "text": "Promise [ Array [A] val] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promise/#select", 
            "text": "Return a promise that is fulfilled when either promise is fulfilled,\nresulting in a tuple of its value and the other promise.  fun tag select(\n  p: Promise[A] tag)\n: Promise[(A , Promise[A] tag)] tag", 
            "title": "select"
        }, 
        {
            "location": "/promises-Promise/#parameters_4", 
            "text": "p:  Promise [A] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promise/#returns_4", 
            "text": "Promise [(A ,  Promise [A] tag)] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promise/#timeout", 
            "text": "Reject the promise after the given expiration in nanoseconds.  fun tag timeout(\n  expiration: U64 val)\n: None val", 
            "title": "timeout"
        }, 
        {
            "location": "/promises-Promise/#parameters_5", 
            "text": "expiration:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promise/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promise/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/promises-Promise/#_attach", 
            "text": "Attaches a step asynchronously. If this promise has already been fulfilled\nor rejected, immediately fulfill or reject the incoming step. Otherwise,\nkeep it in a list.  be _attach(\n  attach: _IThen[A] iso)", 
            "title": "_attach"
        }, 
        {
            "location": "/promises-Promise/#parameters_6", 
            "text": "attach:  _IThen [A] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promises/", 
            "text": "Promises[A: \nAny\n #share]\n\n\nprimitive val Promises[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Promises[A] val^\n\n\n\n\nReturns\n\n\n\n\nPromises\n[A] val^\n\n\n\n\n\n\nPublic Functions\n\n\njoin\n\n\nCreate a promise that is fulfilled when all promises in the given sequence\nare fulfilled. If any promise in the sequence is rejected then the new\npromise is also rejected. The order that values appear in the final array\nis based on when each promise is fulfilled and not the order that they are\ngiven.\n\n\nfun box join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag\n\n\n\n\nParameters\n\n\n\n\nps: \nIterator\n[\nPromise\n[A] tag] ref\n\n\n\n\nReturns\n\n\n\n\nPromise\n[\nArray\n[A] val] tag\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Promises[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPromises\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Promises[A] val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nPromises\n[A] val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Promises"
        }, 
        {
            "location": "/promises-Promises/#promises91a-any-share93", 
            "text": "primitive val Promises[A: Any #share]", 
            "title": "Promises[A: Any #share]"
        }, 
        {
            "location": "/promises-Promises/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-Promises/#create", 
            "text": "new val create()\n: Promises[A] val^", 
            "title": "create"
        }, 
        {
            "location": "/promises-Promises/#returns", 
            "text": "Promises [A] val^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promises/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Promises/#join", 
            "text": "Create a promise that is fulfilled when all promises in the given sequence\nare fulfilled. If any promise in the sequence is rejected then the new\npromise is also rejected. The order that values appear in the final array\nis based on when each promise is fulfilled and not the order that they are\ngiven.  fun box join(\n  ps: Iterator[Promise[A] tag] ref)\n: Promise[Array[A] val] tag", 
            "title": "join"
        }, 
        {
            "location": "/promises-Promises/#parameters", 
            "text": "ps:  Iterator [ Promise [A] tag] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promises/#returns_1", 
            "text": "Promise [ Array [A] val] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promises/#eq", 
            "text": "fun box eq(\n  that: Promises[A] val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/promises-Promises/#parameters_1", 
            "text": "that:  Promises [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promises/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Promises/#ne", 
            "text": "fun box ne(\n  that: Promises[A] val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/promises-Promises/#parameters_2", 
            "text": "that:  Promises [A] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Promises/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Join/", 
            "text": "_Join[A: \nAny\n #share]\n\n\nactor tag _Join[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  p: Promise[Array[A] val] tag,\n  space: USize val)\n: _Join[A] tag^\n\n\n\n\nParameters\n\n\n\n\np: \nPromise\n[\nArray\n[A] val] tag\n\n\nspace: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n_Join\n[A] tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nbe apply(\n  a: A)\n\n\n\n\nParameters\n\n\n\n\na: A", 
            "title": "actor _Join"
        }, 
        {
            "location": "/promises-_Join/#_join91a-any-share93", 
            "text": "actor tag _Join[A: Any #share]", 
            "title": "_Join[A: Any #share]"
        }, 
        {
            "location": "/promises-_Join/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Join/#create", 
            "text": "new tag create(\n  p: Promise[Array[A] val] tag,\n  space: USize val)\n: _Join[A] tag^", 
            "title": "create"
        }, 
        {
            "location": "/promises-_Join/#parameters", 
            "text": "p:  Promise [ Array [A] val] tag  space:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Join/#returns", 
            "text": "_Join [A] tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Join/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/promises-_Join/#apply", 
            "text": "be apply(\n  a: A)", 
            "title": "apply"
        }, 
        {
            "location": "/promises-_Join/#parameters_1", 
            "text": "a: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_None/", 
            "text": "_None\n\n\nprimitive val _None\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _None val^\n\n\n\n\nReturns\n\n\n\n\n_None\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_None\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _None val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_None\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _None"
        }, 
        {
            "location": "/promises-_None/#_none", 
            "text": "primitive val _None", 
            "title": "_None"
        }, 
        {
            "location": "/promises-_None/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_None/#create", 
            "text": "new val create()\n: _None val^", 
            "title": "create"
        }, 
        {
            "location": "/promises-_None/#returns", 
            "text": "_None  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_None/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_None/#eq", 
            "text": "fun box eq(\n  that: _None val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/promises-_None/#parameters", 
            "text": "that:  _None  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_None/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_None/#ne", 
            "text": "fun box ne(\n  that: _None val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/promises-_None/#parameters_1", 
            "text": "that:  _None  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_None/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Pending/", 
            "text": "_Pending\n\n\nprimitive val _Pending\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Pending val^\n\n\n\n\nReturns\n\n\n\n\n_Pending\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _Pending val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Pending\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Pending val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Pending\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Pending"
        }, 
        {
            "location": "/promises-_Pending/#_pending", 
            "text": "primitive val _Pending", 
            "title": "_Pending"
        }, 
        {
            "location": "/promises-_Pending/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Pending/#create", 
            "text": "new val create()\n: _Pending val^", 
            "title": "create"
        }, 
        {
            "location": "/promises-_Pending/#returns", 
            "text": "_Pending  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Pending/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_Pending/#eq", 
            "text": "fun box eq(\n  that: _Pending val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/promises-_Pending/#parameters", 
            "text": "that:  _Pending  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Pending/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Pending/#ne", 
            "text": "fun box ne(\n  that: _Pending val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/promises-_Pending/#parameters_1", 
            "text": "that:  _Pending  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Pending/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Reject/", 
            "text": "_Reject\n\n\nprimitive val _Reject\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Reject val^\n\n\n\n\nReturns\n\n\n\n\n_Reject\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _Reject val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Reject\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Reject val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Reject\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Reject"
        }, 
        {
            "location": "/promises-_Reject/#_reject", 
            "text": "primitive val _Reject", 
            "title": "_Reject"
        }, 
        {
            "location": "/promises-_Reject/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Reject/#create", 
            "text": "new val create()\n: _Reject val^", 
            "title": "create"
        }, 
        {
            "location": "/promises-_Reject/#returns", 
            "text": "_Reject  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Reject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_Reject/#eq", 
            "text": "fun box eq(\n  that: _Reject val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/promises-_Reject/#parameters", 
            "text": "that:  _Reject  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Reject/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Reject/#ne", 
            "text": "fun box ne(\n  that: _Reject val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/promises-_Reject/#parameters_1", 
            "text": "that:  _Reject  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Reject/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Fulfill/", 
            "text": "Fulfill[A: \nAny\n #share, B: \nAny\n #share]\n\n\nA function from A to B that is called when a promise is fulfilled.\n\n\ninterface iso Fulfill[A: Any #share, B: Any #share]\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  value: A)\n: B ?\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nB ?", 
            "title": "interface Fulfill"
        }, 
        {
            "location": "/promises-Fulfill/#fulfill91a-any-share-b-any-share93", 
            "text": "A function from A to B that is called when a promise is fulfilled.  interface iso Fulfill[A: Any #share, B: Any #share]", 
            "title": "Fulfill[A: Any #share, B: Any #share]"
        }, 
        {
            "location": "/promises-Fulfill/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Fulfill/#apply", 
            "text": "fun ref apply(\n  value: A)\n: B ?", 
            "title": "apply"
        }, 
        {
            "location": "/promises-Fulfill/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-Fulfill/#returns", 
            "text": "B ?", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-Reject/", 
            "text": "Reject[A: \nAny\n #share]\n\n\nA function on A that is called when a promise is rejected.\n\n\ninterface iso Reject[A: Any #share]\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?", 
            "title": "interface Reject"
        }, 
        {
            "location": "/promises-Reject/#reject91a-any-share93", 
            "text": "A function on A that is called when a promise is rejected.  interface iso Reject[A: Any #share]", 
            "title": "Reject[A: Any #share]"
        }, 
        {
            "location": "/promises-Reject/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-Reject/#apply", 
            "text": "fun ref apply()\n: A ?", 
            "title": "apply"
        }, 
        {
            "location": "/promises-Reject/#returns", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-FulfillIdentity/", 
            "text": "FulfillIdentity[A: \nAny\n #share]\n\n\nAn identity function for fulfilling promises.\n\n\nclass iso FulfillIdentity[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: FulfillIdentity[A] iso^\n\n\n\n\nReturns\n\n\n\n\nFulfillIdentity\n[A] iso^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  value: A)\n: A\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nA", 
            "title": "class FulfillIdentity"
        }, 
        {
            "location": "/promises-FulfillIdentity/#fulfillidentity91a-any-share93", 
            "text": "An identity function for fulfilling promises.  class iso FulfillIdentity[A: Any #share]", 
            "title": "FulfillIdentity[A: Any #share]"
        }, 
        {
            "location": "/promises-FulfillIdentity/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-FulfillIdentity/#create", 
            "text": "new iso create()\n: FulfillIdentity[A] iso^", 
            "title": "create"
        }, 
        {
            "location": "/promises-FulfillIdentity/#returns", 
            "text": "FulfillIdentity [A] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-FulfillIdentity/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-FulfillIdentity/#apply", 
            "text": "fun ref apply(\n  value: A)\n: A", 
            "title": "apply"
        }, 
        {
            "location": "/promises-FulfillIdentity/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-FulfillIdentity/#returns_1", 
            "text": "A", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-RejectAlways/", 
            "text": "RejectAlways[A: \nAny\n #share]\n\n\nA reject that always raises an error.\n\n\nclass iso RejectAlways[A: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: RejectAlways[A] iso^\n\n\n\n\nReturns\n\n\n\n\nRejectAlways\n[A] iso^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply()\n: A ?\n\n\n\n\nReturns\n\n\n\n\nA ?", 
            "title": "class RejectAlways"
        }, 
        {
            "location": "/promises-RejectAlways/#rejectalways91a-any-share93", 
            "text": "A reject that always raises an error.  class iso RejectAlways[A: Any #share]", 
            "title": "RejectAlways[A: Any #share]"
        }, 
        {
            "location": "/promises-RejectAlways/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-RejectAlways/#create", 
            "text": "new iso create()\n: RejectAlways[A] iso^", 
            "title": "create"
        }, 
        {
            "location": "/promises-RejectAlways/#returns", 
            "text": "RejectAlways [A] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-RejectAlways/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-RejectAlways/#apply", 
            "text": "fun ref apply()\n: A ?", 
            "title": "apply"
        }, 
        {
            "location": "/promises-RejectAlways/#returns_1", 
            "text": "A ?", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Then/", 
            "text": "_Then[A: \nAny\n #share, B: \nAny\n #share]\n\n\nA step in a promise pipeline.\n\n\nclass ref _Then[A: Any #share, B: Any #share]\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso)\n: _Then[A, B] iso^\n\n\n\n\nParameters\n\n\n\n\nfulfill: \nFulfill\n[A, B] iso\n\n\nrejected: \nReject\n[B] iso\n\n\n\n\nReturns\n\n\n\n\n_Then\n[A, B] iso^\n\n\n\n\n\n\nPublic Functions\n\n\npromise\n\n\nReturns the next promise in the chain.\n\n\nfun box promise()\n: Promise[B] tag\n\n\n\n\nReturns\n\n\n\n\nPromise\n[B] tag\n\n\n\n\n\n\napply\n\n\nCalled with the result of the previous promise when it is fulfilled.\n\n\nfun ref apply(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreject\n\n\nCalled when the previous promise is rejected.\n\n\nfun ref reject()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class _Then"
        }, 
        {
            "location": "/promises-_Then/#_then91a-any-share-b-any-share93", 
            "text": "A step in a promise pipeline.  class ref _Then[A: Any #share, B: Any #share]", 
            "title": "_Then[A: Any #share, B: Any #share]"
        }, 
        {
            "location": "/promises-_Then/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/promises-_Then/#create", 
            "text": "new iso create(\n  fulfill: Fulfill[A, B] iso,\n  rejected: Reject[B] iso)\n: _Then[A, B] iso^", 
            "title": "create"
        }, 
        {
            "location": "/promises-_Then/#parameters", 
            "text": "fulfill:  Fulfill [A, B] iso  rejected:  Reject [B] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Then/#returns", 
            "text": "_Then [A, B] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Then/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_Then/#promise", 
            "text": "Returns the next promise in the chain.  fun box promise()\n: Promise[B] tag", 
            "title": "promise"
        }, 
        {
            "location": "/promises-_Then/#returns_1", 
            "text": "Promise [B] tag", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Then/#apply", 
            "text": "Called with the result of the previous promise when it is fulfilled.  fun ref apply(\n  value: A)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/promises-_Then/#parameters_1", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_Then/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_Then/#reject", 
            "text": "Called when the previous promise is rejected.  fun ref reject()\n: None val", 
            "title": "reject"
        }, 
        {
            "location": "/promises-_Then/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_IThen/", 
            "text": "_IThen[A: \nAny\n #share]\n\n\nAn interface representing an abstract Then. This allows for any Then that\naccepts an input of type A, regardless of the output type.\n\n\ninterface ref _IThen[A: Any #share]\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  value: A)\n: None val\n\n\n\n\nParameters\n\n\n\n\nvalue: A\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nreject\n\n\nfun ref reject()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface _IThen"
        }, 
        {
            "location": "/promises-_IThen/#_ithen91a-any-share93", 
            "text": "An interface representing an abstract Then. This allows for any Then that\naccepts an input of type A, regardless of the output type.  interface ref _IThen[A: Any #share]", 
            "title": "_IThen[A: Any #share]"
        }, 
        {
            "location": "/promises-_IThen/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/promises-_IThen/#apply", 
            "text": "fun ref apply(\n  value: A)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/promises-_IThen/#parameters", 
            "text": "value: A", 
            "title": "Parameters"
        }, 
        {
            "location": "/promises-_IThen/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/promises-_IThen/#reject", 
            "text": "fun ref reject()\n: None val", 
            "title": "reject"
        }, 
        {
            "location": "/promises-_IThen/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random--index/", 
            "text": "Random package\n\n\nThe Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.\n\n\nIf your application does not require a specific generator, use Rand.\n\n\nSeed values can contain up to 128 bits of randomness in the form of two U64s.\nA common non-cryptographically secure way to seed a generator is with\n\nTime.now\n.\n\n\nlet rand = Rand\nlet n = rand.next()\n\n\n\n\nPublic Types\n\n\n\n\nclass XorShift128Plus\n\n\nclass XorOshiro128Plus\n\n\ntype Rand\n\n\ntrait Random\n\n\nclass MT\n\n\nclass Dice", 
            "title": "Package"
        }, 
        {
            "location": "/random--index/#random-package", 
            "text": "The Random package provides support generating random numbers. The package\nprovides random number generators you can use in your code, a dice roller and\na trait for implementing your own random number generator.  If your application does not require a specific generator, use Rand.  Seed values can contain up to 128 bits of randomness in the form of two U64s.\nA common non-cryptographically secure way to seed a generator is with Time.now .  let rand = Rand\nlet n = rand.next()", 
            "title": "Random package"
        }, 
        {
            "location": "/random--index/#public-types", 
            "text": "class XorShift128Plus  class XorOshiro128Plus  type Rand  trait Random  class MT  class Dice", 
            "title": "Public Types"
        }, 
        {
            "location": "/random-XorShift128Plus/", 
            "text": "XorShift128Plus\n\n\nThis is an implementation of xorshift+, as detailed at:\n\n\nhttp://xoroshiro.di.unimi.it\n\n\nThis should only be used for legacy applications that specifically require\nXorShift128Plus, otherwise use Rand.\n\n\nclass ref XorShift128Plus is\n  Random ref\n\n\n\n\nImplements\n\n\n\n\nRandom\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorShift128Plus ref^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nXorShift128Plus\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nnext\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhas_next\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nu8\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nReal\n[N] val)]\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) \n Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\n\n\n\nn: N\n\n\n\n\nReturns\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class XorShift128Plus"
        }, 
        {
            "location": "/random-XorShift128Plus/#xorshift128plus", 
            "text": "This is an implementation of xorshift+, as detailed at:  http://xoroshiro.di.unimi.it  This should only be used for legacy applications that specifically require\nXorShift128Plus, otherwise use Rand.  class ref XorShift128Plus is\n  Random ref", 
            "title": "XorShift128Plus"
        }, 
        {
            "location": "/random-XorShift128Plus/#implements", 
            "text": "Random  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/random-XorShift128Plus/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-XorShift128Plus/#create", 
            "text": "Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorShift128Plus ref^", 
            "title": "create"
        }, 
        {
            "location": "/random-XorShift128Plus/#parameters", 
            "text": "x:  U64  val = seq  y:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns", 
            "text": "XorShift128Plus  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-XorShift128Plus/#next", 
            "text": "A random integer in [0, 2^64)  fun ref next()\n: U64 val", 
            "title": "next"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#has_next", 
            "text": "fun tag has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#u8", 
            "text": "fun ref u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_3", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#u16", 
            "text": "fun ref u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_4", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#u32", 
            "text": "fun ref u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#u64", 
            "text": "fun ref u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#u128", 
            "text": "fun ref u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_7", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#ulong", 
            "text": "fun ref ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_8", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#usize", 
            "text": "fun ref usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#i8", 
            "text": "fun ref i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_10", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#i16", 
            "text": "fun ref i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_11", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#i32", 
            "text": "fun ref i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_12", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#i64", 
            "text": "fun ref i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_13", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#i128", 
            "text": "fun ref i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_14", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#ilong", 
            "text": "fun ref ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_15", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#isize", 
            "text": "fun ref isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_16", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93", 
            "text": "fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)   Real[N] val)](\n  n: N)\n: N", 
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        }, 
        {
            "location": "/random-XorShift128Plus/#parameters_1", 
            "text": "n: N", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_17", 
            "text": "N", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#real", 
            "text": "fun ref real()\n: F64 val", 
            "title": "real"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_18", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorShift128Plus/#shuffle91a-a93", 
            "text": "fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val", 
            "title": "shuffle[A: A]"
        }, 
        {
            "location": "/random-XorShift128Plus/#parameters_2", 
            "text": "array:  Array [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-XorShift128Plus/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/", 
            "text": "XorOshiro128Plus\n\n\nThis is an implementation of xoroshiro128+, as detailed at:\n\n\nhttp://xoroshiro.di.unimi.it\n\n\nThis is currently the default Rand implementation.\n\n\nclass ref XorOshiro128Plus is\n  Random ref\n\n\n\n\nImplements\n\n\n\n\nRandom\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorOshiro128Plus ref^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nXorOshiro128Plus\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nnext\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhas_next\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nu8\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nReal\n[N] val)]\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) \n Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\n\n\n\nn: N\n\n\n\n\nReturns\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class XorOshiro128Plus"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#xoroshiro128plus", 
            "text": "This is an implementation of xoroshiro128+, as detailed at:  http://xoroshiro.di.unimi.it  This is currently the default Rand implementation.  class ref XorOshiro128Plus is\n  Random ref", 
            "title": "XorOshiro128Plus"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#implements", 
            "text": "Random  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#create", 
            "text": "Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: XorOshiro128Plus ref^", 
            "title": "create"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#parameters", 
            "text": "x:  U64  val = seq  y:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns", 
            "text": "XorOshiro128Plus  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#next", 
            "text": "A random integer in [0, 2^64)  fun ref next()\n: U64 val", 
            "title": "next"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#has_next", 
            "text": "fun tag has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#u8", 
            "text": "fun ref u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_3", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#u16", 
            "text": "fun ref u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_4", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#u32", 
            "text": "fun ref u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#u64", 
            "text": "fun ref u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#u128", 
            "text": "fun ref u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_7", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#ulong", 
            "text": "fun ref ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_8", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#usize", 
            "text": "fun ref usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#i8", 
            "text": "fun ref i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_10", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#i16", 
            "text": "fun ref i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_11", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#i32", 
            "text": "fun ref i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_12", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#i64", 
            "text": "fun ref i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_13", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#i128", 
            "text": "fun ref i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_14", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#ilong", 
            "text": "fun ref ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_15", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#isize", 
            "text": "fun ref isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_16", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93", 
            "text": "fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)   Real[N] val)](\n  n: N)\n: N", 
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#parameters_1", 
            "text": "n: N", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_17", 
            "text": "N", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#real", 
            "text": "fun ref real()\n: F64 val", 
            "title": "real"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_18", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#shuffle91a-a93", 
            "text": "fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val", 
            "title": "shuffle[A: A]"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#parameters_2", 
            "text": "array:  Array [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-XorOshiro128Plus/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Rand/", 
            "text": "Rand\n\n\ntype Rand is\n  XorOshiro128Plus ref\n\n\n\n\nType Alias For\n\n\n\n\nXorOshiro128Plus\n ref", 
            "title": "type Rand"
        }, 
        {
            "location": "/random-Rand/#rand", 
            "text": "type Rand is\n  XorOshiro128Plus ref", 
            "title": "Rand"
        }, 
        {
            "location": "/random-Rand/#type-alias-for", 
            "text": "XorOshiro128Plus  ref", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/random-Random/", 
            "text": "Random\n\n\nThe \nRandom\n trait should be implemented by all random number generators. The\nonly method you need to implement is \nfun ref next(): 64\n. Once that method\nhas been implemented, the \nRandom\n trait provides default implementations of\nconversions to other number types.\n\n\ntrait ref Random\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: Random ref^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nRandom\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nIf used as an iterator, this always has another value.\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu8\n\n\nA random integer in [0, 2^8)\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nA random integer in [0, 2^16)\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nA random integer in [0, 2^32)\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nA random integer in [0, 2^64)\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nA random integer in [0, 2^128)\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nA random integer in [0, ULong.max_value()]\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nA random integer in [0, USize.max_value()]\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\n\nA random integer in [-2^7, 2^7)\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nA random integer in [-2^15, 2^15)\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nA random integer in [-2^31, 2^31)\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nA random integer in [-2^63, 2^63)\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nA random integer in [-2^127, 2^127)\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nA random integer in [ILong.min_value(), ILong.max_value()]\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nA random integer in [ISize.min_value(), ISize.max_value()]\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nReal\n[N] val)]\n\n\nA random integer in [0, n)\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) \n Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\n\n\n\nn: N\n\n\n\n\nReturns\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\n\nA random number in [0, 1)\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\n\nShuffle the elements of the array into a random order, mutating the array.\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "trait Random"
        }, 
        {
            "location": "/random-Random/#random", 
            "text": "The  Random  trait should be implemented by all random number generators. The\nonly method you need to implement is  fun ref next(): 64 . Once that method\nhas been implemented, the  Random  trait provides default implementations of\nconversions to other number types.  trait ref Random", 
            "title": "Random"
        }, 
        {
            "location": "/random-Random/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-Random/#create", 
            "text": "Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: Random ref^", 
            "title": "create"
        }, 
        {
            "location": "/random-Random/#parameters", 
            "text": "x:  U64  val = seq  y:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-Random/#returns", 
            "text": "Random  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-Random/#has_next", 
            "text": "If used as an iterator, this always has another value.  fun tag has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/random-Random/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#next", 
            "text": "A random integer in [0, 2^64)  fun ref next()\n: U64 val", 
            "title": "next"
        }, 
        {
            "location": "/random-Random/#returns_2", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#u8", 
            "text": "A random integer in [0, 2^8)  fun ref u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/random-Random/#returns_3", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#u16", 
            "text": "A random integer in [0, 2^16)  fun ref u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/random-Random/#returns_4", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#u32", 
            "text": "A random integer in [0, 2^32)  fun ref u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/random-Random/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#u64", 
            "text": "A random integer in [0, 2^64)  fun ref u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/random-Random/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#u128", 
            "text": "A random integer in [0, 2^128)  fun ref u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/random-Random/#returns_7", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#ulong", 
            "text": "A random integer in [0, ULong.max_value()]  fun ref ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/random-Random/#returns_8", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#usize", 
            "text": "A random integer in [0, USize.max_value()]  fun ref usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/random-Random/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#i8", 
            "text": "A random integer in [-2^7, 2^7)  fun ref i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/random-Random/#returns_10", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#i16", 
            "text": "A random integer in [-2^15, 2^15)  fun ref i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/random-Random/#returns_11", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#i32", 
            "text": "A random integer in [-2^31, 2^31)  fun ref i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/random-Random/#returns_12", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#i64", 
            "text": "A random integer in [-2^63, 2^63)  fun ref i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/random-Random/#returns_13", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#i128", 
            "text": "A random integer in [-2^127, 2^127)  fun ref i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/random-Random/#returns_14", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#ilong", 
            "text": "A random integer in [ILong.min_value(), ILong.max_value()]  fun ref ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/random-Random/#returns_15", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#isize", 
            "text": "A random integer in [ISize.min_value(), ISize.max_value()]  fun ref isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/random-Random/#returns_16", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93", 
            "text": "A random integer in [0, n)  fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)   Real[N] val)](\n  n: N)\n: N", 
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        }, 
        {
            "location": "/random-Random/#parameters_1", 
            "text": "n: N", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-Random/#returns_17", 
            "text": "N", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#real", 
            "text": "A random number in [0, 1)  fun ref real()\n: F64 val", 
            "title": "real"
        }, 
        {
            "location": "/random-Random/#returns_18", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Random/#shuffle91a-a93", 
            "text": "Shuffle the elements of the array into a random order, mutating the array.  fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val", 
            "title": "shuffle[A: A]"
        }, 
        {
            "location": "/random-Random/#parameters_2", 
            "text": "array:  Array [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-Random/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/", 
            "text": "MT\n\n\nA Mersenne Twister. This is a non-cryptographic random number generator. This\nshould only be used for legacy applications that require a Mersenne Twister,\notherwise use Rand.\n\n\nclass ref MT is\n  Random ref\n\n\n\n\nImplements\n\n\n\n\nRandom\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate with the specified seed. Returned values are deterministic for a\ngiven seed.\n\n\nnew ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: MT ref^\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val = seq\n\n\ny: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nMT\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nnext\n\n\nA random integer in [0, 2^64)\n\n\nfun ref next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nhas_next\n\n\nfun tag has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nu8\n\n\nfun ref u8()\n: U8 val\n\n\n\n\nReturns\n\n\n\n\nU8\n val\n\n\n\n\n\n\nu16\n\n\nfun ref u16()\n: U16 val\n\n\n\n\nReturns\n\n\n\n\nU16\n val\n\n\n\n\n\n\nu32\n\n\nfun ref u32()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nu64\n\n\nfun ref u64()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nu128\n\n\nfun ref u128()\n: U128 val\n\n\n\n\nReturns\n\n\n\n\nU128\n val\n\n\n\n\n\n\nulong\n\n\nfun ref ulong()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\nusize\n\n\nfun ref usize()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\ni8\n\n\nfun ref i8()\n: I8 val\n\n\n\n\nReturns\n\n\n\n\nI8\n val\n\n\n\n\n\n\ni16\n\n\nfun ref i16()\n: I16 val\n\n\n\n\nReturns\n\n\n\n\nI16\n val\n\n\n\n\n\n\ni32\n\n\nfun ref i32()\n: I32 val\n\n\n\n\nReturns\n\n\n\n\nI32\n val\n\n\n\n\n\n\ni64\n\n\nfun ref i64()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\ni128\n\n\nfun ref i128()\n: I128 val\n\n\n\n\nReturns\n\n\n\n\nI128\n val\n\n\n\n\n\n\nilong\n\n\nfun ref ilong()\n: ILong val\n\n\n\n\nReturns\n\n\n\n\nILong\n val\n\n\n\n\n\n\nisize\n\n\nfun ref isize()\n: ISize val\n\n\n\n\nReturns\n\n\n\n\nISize\n val\n\n\n\n\n\n\nint[optional N: ((\nU8\n val | \nU16\n val | \nU32\n val | \nU64\n val | \nU128\n val | \nULong\n val | \nUSize\n val) \n \nReal\n[N] val)]\n\n\nfun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val) \n Real[N] val)](\n  n: N)\n: N\n\n\n\n\nParameters\n\n\n\n\nn: N\n\n\n\n\nReturns\n\n\n\n\nN\n\n\n\n\n\n\nreal\n\n\nfun ref real()\n: F64 val\n\n\n\n\nReturns\n\n\n\n\nF64\n val\n\n\n\n\n\n\nshuffle[A: A]\n\n\nfun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\narray: \nArray\n[A] ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_populate\n\n\nRepopulates the state array.\n\n\nfun ref _populate()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_n\n\n\nfun tag _n()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_m\n\n\nfun tag _m()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_n1\n\n\nfun tag _n1()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_mask\n\n\nfun tag _mask(\n  x: U64 val,\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_matrix\n\n\nfun tag _matrix(\n  x: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_mix\n\n\nfun tag _mix(\n  x: U64 val,\n  y: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nx: \nU64\n val\n\n\ny: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_lower\n\n\nfun ref _lower(\n  i: USize val,\n  x: U64 val)\n: U64 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nx: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\n_upper\n\n\nfun ref _upper(\n  i: USize val,\n  x: U64 val)\n: U64 val ?\n\n\n\n\nParameters\n\n\n\n\ni: \nUSize\n val\n\n\nx: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?\n\n\n\n\n\n\n_wrap\n\n\nfun ref _wrap()\n: U64 val ?\n\n\n\n\nReturns\n\n\n\n\nU64\n val ?", 
            "title": "class MT"
        }, 
        {
            "location": "/random-MT/#mt", 
            "text": "A Mersenne Twister. This is a non-cryptographic random number generator. This\nshould only be used for legacy applications that require a Mersenne Twister,\notherwise use Rand.  class ref MT is\n  Random ref", 
            "title": "MT"
        }, 
        {
            "location": "/random-MT/#implements", 
            "text": "Random  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/random-MT/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-MT/#create", 
            "text": "Create with the specified seed. Returned values are deterministic for a\ngiven seed.  new ref create(\n  x: U64 val = seq,\n  y: U64 val = seq)\n: MT ref^", 
            "title": "create"
        }, 
        {
            "location": "/random-MT/#parameters", 
            "text": "x:  U64  val = seq  y:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns", 
            "text": "MT  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-MT/#next", 
            "text": "A random integer in [0, 2^64)  fun ref next()\n: U64 val", 
            "title": "next"
        }, 
        {
            "location": "/random-MT/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#has_next", 
            "text": "fun tag has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/random-MT/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#u8", 
            "text": "fun ref u8()\n: U8 val", 
            "title": "u8"
        }, 
        {
            "location": "/random-MT/#returns_3", 
            "text": "U8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#u16", 
            "text": "fun ref u16()\n: U16 val", 
            "title": "u16"
        }, 
        {
            "location": "/random-MT/#returns_4", 
            "text": "U16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#u32", 
            "text": "fun ref u32()\n: U32 val", 
            "title": "u32"
        }, 
        {
            "location": "/random-MT/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#u64", 
            "text": "fun ref u64()\n: U64 val", 
            "title": "u64"
        }, 
        {
            "location": "/random-MT/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#u128", 
            "text": "fun ref u128()\n: U128 val", 
            "title": "u128"
        }, 
        {
            "location": "/random-MT/#returns_7", 
            "text": "U128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#ulong", 
            "text": "fun ref ulong()\n: ULong val", 
            "title": "ulong"
        }, 
        {
            "location": "/random-MT/#returns_8", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#usize", 
            "text": "fun ref usize()\n: USize val", 
            "title": "usize"
        }, 
        {
            "location": "/random-MT/#returns_9", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#i8", 
            "text": "fun ref i8()\n: I8 val", 
            "title": "i8"
        }, 
        {
            "location": "/random-MT/#returns_10", 
            "text": "I8  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#i16", 
            "text": "fun ref i16()\n: I16 val", 
            "title": "i16"
        }, 
        {
            "location": "/random-MT/#returns_11", 
            "text": "I16  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#i32", 
            "text": "fun ref i32()\n: I32 val", 
            "title": "i32"
        }, 
        {
            "location": "/random-MT/#returns_12", 
            "text": "I32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#i64", 
            "text": "fun ref i64()\n: I64 val", 
            "title": "i64"
        }, 
        {
            "location": "/random-MT/#returns_13", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#i128", 
            "text": "fun ref i128()\n: I128 val", 
            "title": "i128"
        }, 
        {
            "location": "/random-MT/#returns_14", 
            "text": "I128  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#ilong", 
            "text": "fun ref ilong()\n: ILong val", 
            "title": "ilong"
        }, 
        {
            "location": "/random-MT/#returns_15", 
            "text": "ILong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#isize", 
            "text": "fun ref isize()\n: ISize val", 
            "title": "isize"
        }, 
        {
            "location": "/random-MT/#returns_16", 
            "text": "ISize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#int91optional-n-u8-val-u16-val-u32-val-u64-val-u128-val-ulong-val-usize-val-real91n93-val93", 
            "text": "fun ref int[optional N: ((U8 val | U16 val | U32 val | \n    U64 val | U128 val | ULong val | \n    USize val)   Real[N] val)](\n  n: N)\n: N", 
            "title": "int[optional N: ((U8 val | U16 val | U32 val | U64 val | U128 val | ULong val | USize val) &amp; Real[N] val)]"
        }, 
        {
            "location": "/random-MT/#parameters_1", 
            "text": "n: N", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_17", 
            "text": "N", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#real", 
            "text": "fun ref real()\n: F64 val", 
            "title": "real"
        }, 
        {
            "location": "/random-MT/#returns_18", 
            "text": "F64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#shuffle91a-a93", 
            "text": "fun ref shuffle[A: A](\n  array: Array[A] ref)\n: None val", 
            "title": "shuffle[A: A]"
        }, 
        {
            "location": "/random-MT/#parameters_2", 
            "text": "array:  Array [A] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/random-MT/#_populate", 
            "text": "Repopulates the state array.  fun ref _populate()\n: None val", 
            "title": "_populate"
        }, 
        {
            "location": "/random-MT/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_n", 
            "text": "fun tag _n()\n: USize val", 
            "title": "_n"
        }, 
        {
            "location": "/random-MT/#returns_21", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_m", 
            "text": "fun tag _m()\n: USize val", 
            "title": "_m"
        }, 
        {
            "location": "/random-MT/#returns_22", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_n1", 
            "text": "fun tag _n1()\n: USize val", 
            "title": "_n1"
        }, 
        {
            "location": "/random-MT/#returns_23", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_mask", 
            "text": "fun tag _mask(\n  x: U64 val,\n  y: U64 val)\n: U64 val", 
            "title": "_mask"
        }, 
        {
            "location": "/random-MT/#parameters_3", 
            "text": "x:  U64  val  y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_24", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_matrix", 
            "text": "fun tag _matrix(\n  x: U64 val)\n: U64 val", 
            "title": "_matrix"
        }, 
        {
            "location": "/random-MT/#parameters_4", 
            "text": "x:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_25", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_mix", 
            "text": "fun tag _mix(\n  x: U64 val,\n  y: U64 val)\n: U64 val", 
            "title": "_mix"
        }, 
        {
            "location": "/random-MT/#parameters_5", 
            "text": "x:  U64  val  y:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_26", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_lower", 
            "text": "fun ref _lower(\n  i: USize val,\n  x: U64 val)\n: U64 val ?", 
            "title": "_lower"
        }, 
        {
            "location": "/random-MT/#parameters_6", 
            "text": "i:  USize  val  x:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_27", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_upper", 
            "text": "fun ref _upper(\n  i: USize val,\n  x: U64 val)\n: U64 val ?", 
            "title": "_upper"
        }, 
        {
            "location": "/random-MT/#parameters_7", 
            "text": "i:  USize  val  x:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-MT/#returns_28", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/random-MT/#_wrap", 
            "text": "fun ref _wrap()\n: U64 val ?", 
            "title": "_wrap"
        }, 
        {
            "location": "/random-MT/#returns_29", 
            "text": "U64  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Dice/", 
            "text": "Dice\n\n\nA simple dice roller.\n\n\nclass ref Dice\n\n\n\n\nConstructors\n\n\ncreate\n\n\nInitialise with a random number generator.\n\n\nnew ref create(\n  from: Random ref)\n: Dice ref^\n\n\n\n\nParameters\n\n\n\n\nfrom: \nRandom\n ref\n\n\n\n\nReturns\n\n\n\n\nDice\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar r: \nRandom\n ref\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReturn the sum of \ncount\n rolls of a die with the given number of \nsides\n.\nThe die is numbered from 1 to \nsides\n. For example, count = 2 and\nsides = 6 will return a value between 2 and 12.\n\n\nfun ref apply(\n  count: U64 val,\n  sides: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ncount: \nU64\n val\n\n\nsides: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "class Dice"
        }, 
        {
            "location": "/random-Dice/#dice", 
            "text": "A simple dice roller.  class ref Dice", 
            "title": "Dice"
        }, 
        {
            "location": "/random-Dice/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/random-Dice/#create", 
            "text": "Initialise with a random number generator.  new ref create(\n  from: Random ref)\n: Dice ref^", 
            "title": "create"
        }, 
        {
            "location": "/random-Dice/#parameters", 
            "text": "from:  Random  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-Dice/#returns", 
            "text": "Dice  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/random-Dice/#public-fields", 
            "text": "var r:  Random  ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/random-Dice/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/random-Dice/#apply", 
            "text": "Return the sum of  count  rolls of a die with the given number of  sides .\nThe die is numbered from 1 to  sides . For example, count = 2 and\nsides = 6 will return a value between 2 and 12.  fun ref apply(\n  count: U64 val,\n  sides: U64 val)\n: U64 val", 
            "title": "apply"
        }, 
        {
            "location": "/random-Dice/#parameters_1", 
            "text": "count:  U64  val  sides:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/random-Dice/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex--index/", 
            "text": "Regex package\n\n\nThe Regex package provides support for Perl compatible regular expressions.\n\n\nExample program\n\n\nuse \nregex\n\n\nactor Main\n  new create(env: Env) =\n\n    try\n      let r = Regex(\n\\\\d+\n)?\n\n      if r == \n1234\n then\n        env.out.print(\n1234 is a series of numbers\n)\n      end\n\n      if r != \nNot a number\n then\n        env.out.print(\n'Not a number' is not a series of numbers\n)\n      end\n\n      let matched = r(\nThere are 02 numbers in here.\n)?\n      env.out.print(matched(0)? + \n was matched\n)\n      env.out.print(\nThe match started at \n + matched.start_pos().string())\n      env.out.print(\nThe match ended at \n + matched.end_pos().string())\n    end\n\n    try\n      let r = Regex(\n(\\\\d+)?\\\\.(\\\\d+)?\n)?\n      let matched = r(\n123.456\n)?\n      env.out.print(matched(0)? + \n was matched\n)\n      env.out.print(\nThe first match was \n + matched(1)?)\n      env.out.print(\nThe second match was \n + matched(2)?)\n    end\n\n\n\n\nPublic Types\n\n\n\n\nclass Regex\n\n\nclass MatchIterator\n\n\nclass Match\n\n\n\n\nPrivate Types\n\n\n\n\nprimitive _Pattern\n\n\nprimitive _PCRE2\n\n\nprimitive _Match", 
            "title": "Package"
        }, 
        {
            "location": "/regex--index/#regex-package", 
            "text": "The Regex package provides support for Perl compatible regular expressions.", 
            "title": "Regex package"
        }, 
        {
            "location": "/regex--index/#example-program", 
            "text": "use  regex \n\nactor Main\n  new create(env: Env) = \n    try\n      let r = Regex( \\\\d+ )?\n\n      if r ==  1234  then\n        env.out.print( 1234 is a series of numbers )\n      end\n\n      if r !=  Not a number  then\n        env.out.print( 'Not a number' is not a series of numbers )\n      end\n\n      let matched = r( There are 02 numbers in here. )?\n      env.out.print(matched(0)? +   was matched )\n      env.out.print( The match started at   + matched.start_pos().string())\n      env.out.print( The match ended at   + matched.end_pos().string())\n    end\n\n    try\n      let r = Regex( (\\\\d+)?\\\\.(\\\\d+)? )?\n      let matched = r( 123.456 )?\n      env.out.print(matched(0)? +   was matched )\n      env.out.print( The first match was   + matched(1)?)\n      env.out.print( The second match was   + matched(2)?)\n    end", 
            "title": "Example program"
        }, 
        {
            "location": "/regex--index/#public-types", 
            "text": "class Regex  class MatchIterator  class Match", 
            "title": "Public Types"
        }, 
        {
            "location": "/regex--index/#private-types", 
            "text": "primitive _Pattern  primitive _PCRE2  primitive _Match", 
            "title": "Private Types"
        }, 
        {
            "location": "/regex-_Pattern/", 
            "text": "_Pattern\n\n\nprimitive val _Pattern\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Pattern val^\n\n\n\n\nReturns\n\n\n\n\n_Pattern\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _Pattern val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Pattern\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Pattern val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Pattern\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Pattern"
        }, 
        {
            "location": "/regex-_Pattern/#_pattern", 
            "text": "primitive val _Pattern", 
            "title": "_Pattern"
        }, 
        {
            "location": "/regex-_Pattern/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_Pattern/#create", 
            "text": "new val create()\n: _Pattern val^", 
            "title": "create"
        }, 
        {
            "location": "/regex-_Pattern/#returns", 
            "text": "_Pattern  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_Pattern/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_Pattern/#eq", 
            "text": "fun box eq(\n  that: _Pattern val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/regex-_Pattern/#parameters", 
            "text": "that:  _Pattern  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-_Pattern/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_Pattern/#ne", 
            "text": "fun box ne(\n  that: _Pattern val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/regex-_Pattern/#parameters_1", 
            "text": "that:  _Pattern  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-_Pattern/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_PCRE2/", 
            "text": "_PCRE2\n\n\nprimitive val _PCRE2\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _PCRE2 val^\n\n\n\n\nReturns\n\n\n\n\n_PCRE2\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nutf\n\n\nfun box utf()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsubstitute_global\n\n\nfun box substitute_global()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nnot_empty\n\n\nfun box not_empty()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _PCRE2 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PCRE2\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _PCRE2 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_PCRE2\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _PCRE2"
        }, 
        {
            "location": "/regex-_PCRE2/#_pcre2", 
            "text": "primitive val _PCRE2", 
            "title": "_PCRE2"
        }, 
        {
            "location": "/regex-_PCRE2/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_PCRE2/#create", 
            "text": "new val create()\n: _PCRE2 val^", 
            "title": "create"
        }, 
        {
            "location": "/regex-_PCRE2/#returns", 
            "text": "_PCRE2  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_PCRE2/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_PCRE2/#utf", 
            "text": "fun box utf()\n: U32 val", 
            "title": "utf"
        }, 
        {
            "location": "/regex-_PCRE2/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_PCRE2/#substitute_global", 
            "text": "fun box substitute_global()\n: U32 val", 
            "title": "substitute_global"
        }, 
        {
            "location": "/regex-_PCRE2/#returns_2", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_PCRE2/#not_empty", 
            "text": "fun box not_empty()\n: U32 val", 
            "title": "not_empty"
        }, 
        {
            "location": "/regex-_PCRE2/#returns_3", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_PCRE2/#eq", 
            "text": "fun box eq(\n  that: _PCRE2 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/regex-_PCRE2/#parameters", 
            "text": "that:  _PCRE2  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-_PCRE2/#returns_4", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_PCRE2/#ne", 
            "text": "fun box ne(\n  that: _PCRE2 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/regex-_PCRE2/#parameters_1", 
            "text": "that:  _PCRE2  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-_PCRE2/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/", 
            "text": "Regex\n\n\nA perl compatible regular expression. This uses the PCRE2 library, and\nattempts to enable JIT matching whenever possible.\n\n\nclass ref Regex\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCompile a regular expression. Raises an error for an invalid expression.\n\n\nnew ref create(\n  from: (String box | Array[U8 val] box),\n  jit: Bool val = seq)\n: Regex ref^ ?\n\n\n\n\nParameters\n\n\n\n\nfrom: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\njit: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nRegex\n ref^ ?\n\n\n\n\n\n\nPublic Functions\n\n\nmatches\n\n\nCreates a match iterator from the regular expression that will iterate\nover the supplied subject returning matches.\n\n\nfun box matches(\n  subject: String val)\n: MatchIterator ref\n\n\n\n\nParameters\n\n\n\n\nsubject: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nMatchIterator\n ref\n\n\n\n\n\n\neq\n\n\nReturn true on a successful match, false otherwise.\n\n\nfun box eq(\n  subject: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsubject: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nReturn false on a successful match, true otherwise.\n\n\nfun box ne(\n  subject: (String box | Array[U8 val] box))\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nsubject: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\napply\n\n\nMatch the supplied string, starting at the given offset. Returns a Match\nobject that can give precise match details. Raises an error if there is no\nmatch.\n\n\nfun box apply(\n  subject: (String val | Array[U8 val] val),\n  offset: USize val = seq)\n: Match ref^ ?\n\n\n\n\nParameters\n\n\n\n\nsubject: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nMatch\n ref^ ?\n\n\n\n\n\n\nreplace[optional A: (\nSeq\n[\nU8\n val] iso \n (\nString\n iso | \nArray\n[\nU8\n val] iso))]\n\n\nPerform a match on the subject, starting at the given offset, and create\na new string using the value as a replacement for what was matched. Raise\nan error if there is no match.\n\n\nfun box replace[optional A: (Seq[U8 val] iso \n (String iso | Array[U8 val] iso))](\n  subject: (String val | Array[U8 val] val),\n  value: (String box | Array[U8 val] box),\n  offset: USize val = seq,\n  global: Bool val = seq)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\nsubject: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nvalue: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\noffset: \nUSize\n val = seq\n\n\nglobal: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nsplit\n\n\nSplit subject by non-empty occurrences of this pattern, returning a list\nof the substrings.\n\n\nfun box split(\n  subject: String val,\n  offset: USize val = seq)\n: Array[String val] iso^ ?\n\n\n\n\nParameters\n\n\n\n\nsubject: \nString\n val\n\n\noffset: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^ ?\n\n\n\n\n\n\nindex\n\n\nReturns the index of a named capture. Raises an error if the named capture\ndoes not exist.\n\n\nfun box index(\n  name: String box)\n: USize val ?\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nUSize\n val ?\n\n\n\n\n\n\ndispose\n\n\nFree the underlying PCRE2 data.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_match\n\n\nMatch the subject and keep the capture results. Raises an error if there\nis no match.\n\n\nfun box _match(\n  subject: (String box | Array[U8 val] box),\n  offset: USize val,\n  options: U32 val)\n: Pointer[_Match val] ref ?\n\n\n\n\nParameters\n\n\n\n\nsubject: (\nString\n box | \nArray\n[\nU8\n val] box)\n\n\noffset: \nUSize\n val\n\n\noptions: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nPointer\n[\n_Match\n val] ref ?\n\n\n\n\n\n\n_final\n\n\nFree the underlying PCRE2 data.\n\n\nfun box _final()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Regex"
        }, 
        {
            "location": "/regex-Regex/#regex", 
            "text": "A perl compatible regular expression. This uses the PCRE2 library, and\nattempts to enable JIT matching whenever possible.  class ref Regex", 
            "title": "Regex"
        }, 
        {
            "location": "/regex-Regex/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-Regex/#create", 
            "text": "Compile a regular expression. Raises an error for an invalid expression.  new ref create(\n  from: (String box | Array[U8 val] box),\n  jit: Bool val = seq)\n: Regex ref^ ?", 
            "title": "create"
        }, 
        {
            "location": "/regex-Regex/#parameters", 
            "text": "from: ( String  box |  Array [ U8  val] box)  jit:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns", 
            "text": "Regex  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-Regex/#matches", 
            "text": "Creates a match iterator from the regular expression that will iterate\nover the supplied subject returning matches.  fun box matches(\n  subject: String val)\n: MatchIterator ref", 
            "title": "matches"
        }, 
        {
            "location": "/regex-Regex/#parameters_1", 
            "text": "subject:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_1", 
            "text": "MatchIterator  ref", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#eq", 
            "text": "Return true on a successful match, false otherwise.  fun box eq(\n  subject: (String box | Array[U8 val] box))\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/regex-Regex/#parameters_2", 
            "text": "subject: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#ne", 
            "text": "Return false on a successful match, true otherwise.  fun box ne(\n  subject: (String box | Array[U8 val] box))\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/regex-Regex/#parameters_3", 
            "text": "subject: ( String  box |  Array [ U8  val] box)", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#apply", 
            "text": "Match the supplied string, starting at the given offset. Returns a Match\nobject that can give precise match details. Raises an error if there is no\nmatch.  fun box apply(\n  subject: (String val | Array[U8 val] val),\n  offset: USize val = seq)\n: Match ref^ ?", 
            "title": "apply"
        }, 
        {
            "location": "/regex-Regex/#parameters_4", 
            "text": "subject: ( String  val |  Array [ U8  val] val)  offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_4", 
            "text": "Match  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#replace91optional-a-seq91u8-val93-iso-string-iso-array91u8-val93-iso93", 
            "text": "Perform a match on the subject, starting at the given offset, and create\na new string using the value as a replacement for what was matched. Raise\nan error if there is no match.  fun box replace[optional A: (Seq[U8 val] iso   (String iso | Array[U8 val] iso))](\n  subject: (String val | Array[U8 val] val),\n  value: (String box | Array[U8 val] box),\n  offset: USize val = seq,\n  global: Bool val = seq)\n: A^ ?", 
            "title": "replace[optional A: (Seq[U8 val] iso &amp; (String iso | Array[U8 val] iso))]"
        }, 
        {
            "location": "/regex-Regex/#parameters_5", 
            "text": "subject: ( String  val |  Array [ U8  val] val)  value: ( String  box |  Array [ U8  val] box)  offset:  USize  val = seq  global:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_5", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#split", 
            "text": "Split subject by non-empty occurrences of this pattern, returning a list\nof the substrings.  fun box split(\n  subject: String val,\n  offset: USize val = seq)\n: Array[String val] iso^ ?", 
            "title": "split"
        }, 
        {
            "location": "/regex-Regex/#parameters_6", 
            "text": "subject:  String  val  offset:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_6", 
            "text": "Array [ String  val] iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#index", 
            "text": "Returns the index of a named capture. Raises an error if the named capture\ndoes not exist.  fun box index(\n  name: String box)\n: USize val ?", 
            "title": "index"
        }, 
        {
            "location": "/regex-Regex/#parameters_7", 
            "text": "name:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_7", 
            "text": "USize  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#dispose", 
            "text": "Free the underlying PCRE2 data.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/regex-Regex/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/regex-Regex/#_match", 
            "text": "Match the subject and keep the capture results. Raises an error if there\nis no match.  fun box _match(\n  subject: (String box | Array[U8 val] box),\n  offset: USize val,\n  options: U32 val)\n: Pointer[_Match val] ref ?", 
            "title": "_match"
        }, 
        {
            "location": "/regex-Regex/#parameters_8", 
            "text": "subject: ( String  box |  Array [ U8  val] box)  offset:  USize  val  options:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Regex/#returns_9", 
            "text": "Pointer [ _Match  val] ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Regex/#_final", 
            "text": "Free the underlying PCRE2 data.  fun box _final()\n: None val", 
            "title": "_final"
        }, 
        {
            "location": "/regex-Regex/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-MatchIterator/", 
            "text": "MatchIterator\n\n\nMatchIterator allows for calling code to repeatedly perform the same match\nagainst a subject string as an iterator. This lets callers repeat the match \nuntil no more matches exist.\n\n\nclass ref MatchIterator is\n  Iterator[Match ref] ref\n\n\n\n\nImplements\n\n\n\n\nIterator\n[\nMatch\n ref] ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  regex': Regex box,\n  subject': String val,\n  offset': USize val = seq)\n: MatchIterator ref^\n\n\n\n\nParameters\n\n\n\n\nregex': \nRegex\n box\n\n\nsubject': \nString\n val\n\n\noffset': \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nMatchIterator\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nhas_next\n\n\nIndicates whether there is another match available.\n\n\nfun box has_next()\n: Bool val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nYields the next match to the regular expression or produces\nan error if there is no match.\n\n\nfun ref next()\n: Match ref ?\n\n\n\n\nReturns\n\n\n\n\nMatch\n ref ?", 
            "title": "class MatchIterator"
        }, 
        {
            "location": "/regex-MatchIterator/#matchiterator", 
            "text": "MatchIterator allows for calling code to repeatedly perform the same match\nagainst a subject string as an iterator. This lets callers repeat the match \nuntil no more matches exist.  class ref MatchIterator is\n  Iterator[Match ref] ref", 
            "title": "MatchIterator"
        }, 
        {
            "location": "/regex-MatchIterator/#implements", 
            "text": "Iterator [ Match  ref] ref", 
            "title": "Implements"
        }, 
        {
            "location": "/regex-MatchIterator/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-MatchIterator/#create", 
            "text": "new ref create(\n  regex': Regex box,\n  subject': String val,\n  offset': USize val = seq)\n: MatchIterator ref^", 
            "title": "create"
        }, 
        {
            "location": "/regex-MatchIterator/#parameters", 
            "text": "regex':  Regex  box  subject':  String  val  offset':  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-MatchIterator/#returns", 
            "text": "MatchIterator  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-MatchIterator/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-MatchIterator/#has_next", 
            "text": "Indicates whether there is another match available.  fun box has_next()\n: Bool val", 
            "title": "has_next"
        }, 
        {
            "location": "/regex-MatchIterator/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-MatchIterator/#next", 
            "text": "Yields the next match to the regular expression or produces\nan error if there is no match.  fun ref next()\n: Match ref ?", 
            "title": "next"
        }, 
        {
            "location": "/regex-MatchIterator/#returns_2", 
            "text": "Match  ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_Match/", 
            "text": "_Match\n\n\nprimitive val _Match\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _Match val^\n\n\n\n\nReturns\n\n\n\n\n_Match\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _Match val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Match\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _Match val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Match\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _Match"
        }, 
        {
            "location": "/regex-_Match/#_match", 
            "text": "primitive val _Match", 
            "title": "_Match"
        }, 
        {
            "location": "/regex-_Match/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-_Match/#create", 
            "text": "new val create()\n: _Match val^", 
            "title": "create"
        }, 
        {
            "location": "/regex-_Match/#returns", 
            "text": "_Match  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_Match/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-_Match/#eq", 
            "text": "fun box eq(\n  that: _Match val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/regex-_Match/#parameters", 
            "text": "that:  _Match  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-_Match/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-_Match/#ne", 
            "text": "fun box ne(\n  that: _Match val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/regex-_Match/#parameters_1", 
            "text": "that:  _Match  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-_Match/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/", 
            "text": "Match\n\n\nContains match data for a combination of a regex and a subject.\n\n\nclass ref Match\n\n\n\n\nConstructors\n\n\n_create\n\n\nStore a match, a subject, and a size.\n\n\nnew ref _create(\n  subject: (String val | Array[U8 val] val),\n  m: Pointer[_Match val] ref)\n: Match ref^\n\n\n\n\nParameters\n\n\n\n\nsubject: (\nString\n val | \nArray\n[\nU8\n val] val)\n\n\nm: \nPointer\n[\n_Match\n val] ref\n\n\n\n\nReturns\n\n\n\n\nMatch\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nsize\n\n\nReturns the capture size of the match.\n\n\nfun box size()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstart_pos\n\n\nReturns the character position of the first character in the match.\n\n\nfun box start_pos()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\nend_pos\n\n\nReturns the character position of the last character in the match.\n\n\nfun box end_pos()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\napply[optional A: ((\nString\n iso | \nArray\n[\nU8\n val] iso) \n \nSeq\n[\nU8\n val] iso)]\n\n\nReturns a capture by number. Raises an error if the index is out of bounds.\n\n\nfun box apply[optional A: ((String iso | Array[U8 val] iso) \n Seq[U8 val] iso)](\n  i: U32 val)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\ni: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\nfind[optional A: ((\nString\n iso | \nArray\n[\nU8\n val] iso) \n \nSeq\n[\nU8\n val] iso)]\n\n\nReturns a capture by name. Raises an error if the named capture does not\nexist.\n\n\nfun box find[optional A: ((String iso | Array[U8 val] iso) \n Seq[U8 val] iso)](\n  name: String box)\n: A^ ?\n\n\n\n\nParameters\n\n\n\n\nname: \nString\n box\n\n\n\n\nReturns\n\n\n\n\nA^ ?\n\n\n\n\n\n\ngroups\n\n\nReturns all of the captured subgroups. Groups that failed to capture\nanything will contain the empty string.\n\n\nfun box groups()\n: Array[String val] iso^\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nString\n val] iso^\n\n\n\n\n\n\ndispose\n\n\nFree the underlying PCRE2 data.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_final\n\n\nFree the underlying PCRE2 data.\n\n\nfun box _final()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Match"
        }, 
        {
            "location": "/regex-Match/#match", 
            "text": "Contains match data for a combination of a regex and a subject.  class ref Match", 
            "title": "Match"
        }, 
        {
            "location": "/regex-Match/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/regex-Match/#_create", 
            "text": "Store a match, a subject, and a size.  new ref _create(\n  subject: (String val | Array[U8 val] val),\n  m: Pointer[_Match val] ref)\n: Match ref^", 
            "title": "_create"
        }, 
        {
            "location": "/regex-Match/#parameters", 
            "text": "subject: ( String  val |  Array [ U8  val] val)  m:  Pointer [ _Match  val] ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Match/#returns", 
            "text": "Match  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/regex-Match/#size", 
            "text": "Returns the capture size of the match.  fun box size()\n: U32 val", 
            "title": "size"
        }, 
        {
            "location": "/regex-Match/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#start_pos", 
            "text": "Returns the character position of the first character in the match.  fun box start_pos()\n: USize val", 
            "title": "start_pos"
        }, 
        {
            "location": "/regex-Match/#returns_2", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#end_pos", 
            "text": "Returns the character position of the last character in the match.  fun box end_pos()\n: USize val", 
            "title": "end_pos"
        }, 
        {
            "location": "/regex-Match/#returns_3", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#apply91optional-a-string-iso-array91u8-val93-iso-seq91u8-val93-iso93", 
            "text": "Returns a capture by number. Raises an error if the index is out of bounds.  fun box apply[optional A: ((String iso | Array[U8 val] iso)   Seq[U8 val] iso)](\n  i: U32 val)\n: A^ ?", 
            "title": "apply[optional A: ((String iso | Array[U8 val] iso) &amp; Seq[U8 val] iso)]"
        }, 
        {
            "location": "/regex-Match/#parameters_1", 
            "text": "i:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Match/#returns_4", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#find91optional-a-string-iso-array91u8-val93-iso-seq91u8-val93-iso93", 
            "text": "Returns a capture by name. Raises an error if the named capture does not\nexist.  fun box find[optional A: ((String iso | Array[U8 val] iso)   Seq[U8 val] iso)](\n  name: String box)\n: A^ ?", 
            "title": "find[optional A: ((String iso | Array[U8 val] iso) &amp; Seq[U8 val] iso)]"
        }, 
        {
            "location": "/regex-Match/#parameters_2", 
            "text": "name:  String  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/regex-Match/#returns_5", 
            "text": "A^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#groups", 
            "text": "Returns all of the captured subgroups. Groups that failed to capture\nanything will contain the empty string.  fun box groups()\n: Array[String val] iso^", 
            "title": "groups"
        }, 
        {
            "location": "/regex-Match/#returns_6", 
            "text": "Array [ String  val] iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#dispose", 
            "text": "Free the underlying PCRE2 data.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/regex-Match/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/regex-Match/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/regex-Match/#_final", 
            "text": "Free the underlying PCRE2 data.  fun box _final()\n: None val", 
            "title": "_final"
        }, 
        {
            "location": "/regex-Match/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise--index/", 
            "text": "Serialise package\n\n\nThis package provides support for serialising and deserialising arbitrary data\nstructures.\n\n\nThe API is designed to require capability tokens, as otherwise serialising\nwould leak the bit patterns of all private information in a type (since the\nresulting Array[U8] could be examined.\n\n\nDeserialisation is fundamentally unsafe currently: there isn't yet a\nverification pass to check that the resulting object graph maintains a\nwell-formed heap or that individual objects maintain any expected local\ninvariants. However, if only \"trusted\" data (i.e. data produced by Pony\nserialisation from the same binary) is deserialised, it will always maintain a\nwell-formed heap and all object invariants.\n\n\nNote that serialised data is not usable between different Pony binaries,\npossibly including recompilation of the same code. This is due to the use of\ntype identifiers rather than a heavy-weight self-describing serialisation\nschema. This also means it isn't safe to deserialise something serialised by\nthe same program compiled for a different platform.\n\n\nThe Serialise.signature method is provided for the purposes of comparing\ncommunicating Pony binaries to determine if they are the same. Confirming this\nbefore deserialising data can help mitigate the risk of accidental serialisation\nacross different Pony binaries, but does not on its own address the security\nissues of accepting data from untrusted sources.\n\n\nPublic Types\n\n\n\n\nprimitive Serialise\n\n\nprimitive SerialiseAuth\n\n\nprimitive DeserialiseAuth\n\n\nprimitive OutputSerialisedAuth\n\n\nprimitive InputSerialisedAuth\n\n\nclass Serialised\n\n\n\n\nPrivate Types\n\n\n\n\nclass _MachineWords\n\n\nclass _StructWords\n\n\nclass _Simple\n\n\nactor _EmptyActor\n\n\nclass _HasActor\n\n\nclass _BoxedWord", 
            "title": "Package"
        }, 
        {
            "location": "/serialise--index/#serialise-package", 
            "text": "This package provides support for serialising and deserialising arbitrary data\nstructures.  The API is designed to require capability tokens, as otherwise serialising\nwould leak the bit patterns of all private information in a type (since the\nresulting Array[U8] could be examined.  Deserialisation is fundamentally unsafe currently: there isn't yet a\nverification pass to check that the resulting object graph maintains a\nwell-formed heap or that individual objects maintain any expected local\ninvariants. However, if only \"trusted\" data (i.e. data produced by Pony\nserialisation from the same binary) is deserialised, it will always maintain a\nwell-formed heap and all object invariants.  Note that serialised data is not usable between different Pony binaries,\npossibly including recompilation of the same code. This is due to the use of\ntype identifiers rather than a heavy-weight self-describing serialisation\nschema. This also means it isn't safe to deserialise something serialised by\nthe same program compiled for a different platform.  The Serialise.signature method is provided for the purposes of comparing\ncommunicating Pony binaries to determine if they are the same. Confirming this\nbefore deserialising data can help mitigate the risk of accidental serialisation\nacross different Pony binaries, but does not on its own address the security\nissues of accepting data from untrusted sources.", 
            "title": "Serialise package"
        }, 
        {
            "location": "/serialise--index/#public-types", 
            "text": "primitive Serialise  primitive SerialiseAuth  primitive DeserialiseAuth  primitive OutputSerialisedAuth  primitive InputSerialisedAuth  class Serialised", 
            "title": "Public Types"
        }, 
        {
            "location": "/serialise--index/#private-types", 
            "text": "class _MachineWords  class _StructWords  class _Simple  actor _EmptyActor  class _HasActor  class _BoxedWord", 
            "title": "Private Types"
        }, 
        {
            "location": "/serialise-Serialise/", 
            "text": "Serialise\n\n\nprimitive val Serialise\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Serialise val^\n\n\n\n\nReturns\n\n\n\n\nSerialise\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nsignature\n\n\nReturns a byte array that is unique to this compiled Pony binary, for the\npurposes of comparing before deserialising any data from that source.\nIt is statistically impossible for two serialisation-incompatible Pony\nbinaries to have the same serialise signature.\n\n\nfun box signature()\n: Array[U8 val] val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Serialise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSerialise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Serialise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSerialise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Serialise"
        }, 
        {
            "location": "/serialise-Serialise/#serialise", 
            "text": "primitive val Serialise", 
            "title": "Serialise"
        }, 
        {
            "location": "/serialise-Serialise/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-Serialise/#create", 
            "text": "new val create()\n: Serialise val^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-Serialise/#returns", 
            "text": "Serialise  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialise/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-Serialise/#signature", 
            "text": "Returns a byte array that is unique to this compiled Pony binary, for the\npurposes of comparing before deserialising any data from that source.\nIt is statistically impossible for two serialisation-incompatible Pony\nbinaries to have the same serialise signature.  fun box signature()\n: Array[U8 val] val", 
            "title": "signature"
        }, 
        {
            "location": "/serialise-Serialise/#returns_1", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialise/#eq", 
            "text": "fun box eq(\n  that: Serialise val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-Serialise/#parameters", 
            "text": "that:  Serialise  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-Serialise/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialise/#ne", 
            "text": "fun box ne(\n  that: Serialise val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/serialise-Serialise/#parameters_1", 
            "text": "that:  Serialise  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-Serialise/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-SerialiseAuth/", 
            "text": "SerialiseAuth\n\n\nThis is a capability that allows the holder to serialise objects. It does not\nallow the holder to examine serialised data or to deserialise objects.\n\n\nprimitive val SerialiseAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  auth: AmbientAuth val)\n: SerialiseAuth val^\n\n\n\n\nParameters\n\n\n\n\nauth: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nSerialiseAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: SerialiseAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSerialiseAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SerialiseAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSerialiseAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SerialiseAuth"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#serialiseauth", 
            "text": "This is a capability that allows the holder to serialise objects. It does not\nallow the holder to examine serialised data or to deserialise objects.  primitive val SerialiseAuth", 
            "title": "SerialiseAuth"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#create", 
            "text": "new val create(\n  auth: AmbientAuth val)\n: SerialiseAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#parameters", 
            "text": "auth:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#returns", 
            "text": "SerialiseAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#eq", 
            "text": "fun box eq(\n  that: SerialiseAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#parameters_1", 
            "text": "that:  SerialiseAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#ne", 
            "text": "fun box ne(\n  that: SerialiseAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#parameters_2", 
            "text": "that:  SerialiseAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-SerialiseAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/", 
            "text": "DeserialiseAuth\n\n\nThis is a capability token that allows the holder to deserialise objects. It\ndoes not allow the holder to serialise objects or examine serialised.\n\n\nprimitive val DeserialiseAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  auth: AmbientAuth val)\n: DeserialiseAuth val^\n\n\n\n\nParameters\n\n\n\n\nauth: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nDeserialiseAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: DeserialiseAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDeserialiseAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: DeserialiseAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nDeserialiseAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive DeserialiseAuth"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#deserialiseauth", 
            "text": "This is a capability token that allows the holder to deserialise objects. It\ndoes not allow the holder to serialise objects or examine serialised.  primitive val DeserialiseAuth", 
            "title": "DeserialiseAuth"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#create", 
            "text": "new val create(\n  auth: AmbientAuth val)\n: DeserialiseAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#parameters", 
            "text": "auth:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#returns", 
            "text": "DeserialiseAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#eq", 
            "text": "fun box eq(\n  that: DeserialiseAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#parameters_1", 
            "text": "that:  DeserialiseAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#ne", 
            "text": "fun box ne(\n  that: DeserialiseAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#parameters_2", 
            "text": "that:  DeserialiseAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-DeserialiseAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/", 
            "text": "OutputSerialisedAuth\n\n\nThis is a capability token that allows the holder to examine serialised data.\nThis should only be provided to types that need to write serialised data to\nsome output stream, such as a file or socket. A type with the SerialiseAuth\ncapability should usually not also have OutputSerialisedAuth, as the\ncombination gives the holder the ability to examine the bitwise contents of\nany object it has a reference to.\n\n\nprimitive val OutputSerialisedAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  auth: AmbientAuth val)\n: OutputSerialisedAuth val^\n\n\n\n\nParameters\n\n\n\n\nauth: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nOutputSerialisedAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: OutputSerialisedAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOutputSerialisedAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: OutputSerialisedAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nOutputSerialisedAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive OutputSerialisedAuth"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#outputserialisedauth", 
            "text": "This is a capability token that allows the holder to examine serialised data.\nThis should only be provided to types that need to write serialised data to\nsome output stream, such as a file or socket. A type with the SerialiseAuth\ncapability should usually not also have OutputSerialisedAuth, as the\ncombination gives the holder the ability to examine the bitwise contents of\nany object it has a reference to.  primitive val OutputSerialisedAuth", 
            "title": "OutputSerialisedAuth"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#create", 
            "text": "new val create(\n  auth: AmbientAuth val)\n: OutputSerialisedAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#parameters", 
            "text": "auth:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#returns", 
            "text": "OutputSerialisedAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#eq", 
            "text": "fun box eq(\n  that: OutputSerialisedAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#parameters_1", 
            "text": "that:  OutputSerialisedAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#ne", 
            "text": "fun box ne(\n  that: OutputSerialisedAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#parameters_2", 
            "text": "that:  OutputSerialisedAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-OutputSerialisedAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/", 
            "text": "InputSerialisedAuth\n\n\nThis is a capability token that allows the holder to treat data arbitrary\nbytes as serialised data. This is the most dangerous capability, as currently\nit is possible for a malformed chunk of data to crash your program if it is\ndeserialised.\n\n\nprimitive val InputSerialisedAuth\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create(\n  auth: AmbientAuth val)\n: InputSerialisedAuth val^\n\n\n\n\nParameters\n\n\n\n\nauth: \nAmbientAuth\n val\n\n\n\n\nReturns\n\n\n\n\nInputSerialisedAuth\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: InputSerialisedAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nInputSerialisedAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: InputSerialisedAuth val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nInputSerialisedAuth\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive InputSerialisedAuth"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#inputserialisedauth", 
            "text": "This is a capability token that allows the holder to treat data arbitrary\nbytes as serialised data. This is the most dangerous capability, as currently\nit is possible for a malformed chunk of data to crash your program if it is\ndeserialised.  primitive val InputSerialisedAuth", 
            "title": "InputSerialisedAuth"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#create", 
            "text": "new val create(\n  auth: AmbientAuth val)\n: InputSerialisedAuth val^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#parameters", 
            "text": "auth:  AmbientAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#returns", 
            "text": "InputSerialisedAuth  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#eq", 
            "text": "fun box eq(\n  that: InputSerialisedAuth val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#parameters_1", 
            "text": "that:  InputSerialisedAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#ne", 
            "text": "fun box ne(\n  that: InputSerialisedAuth val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#parameters_2", 
            "text": "that:  InputSerialisedAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-InputSerialisedAuth/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialised/", 
            "text": "Serialised\n\n\nThis represents serialised data. How it can be used depends on the other\ncapabilities a caller holds.\n\n\nclass val Serialised\n\n\n\n\nConstructors\n\n\ncreate\n\n\nA caller with SerialiseAuth can create serialised data from any object.\n\n\nnew ref create(\n  auth: SerialiseAuth val,\n  data: Any box)\n: Serialised ref^ ?\n\n\n\n\nParameters\n\n\n\n\nauth: \nSerialiseAuth\n val\n\n\ndata: \nAny\n box\n\n\n\n\nReturns\n\n\n\n\nSerialised\n ref^ ?\n\n\n\n\n\n\ninput\n\n\nA caller with InputSerialisedAuth can create serialised data from any\narbitrary set of bytes. It is the caller's responsibility to ensure that\nthe data is in fact well-formed serialised data. This is currently the most\ndangerous method, as there is currently no way to check validity at\nruntime.\n\n\nnew ref input(\n  auth: InputSerialisedAuth val,\n  data: Array[U8 val] val)\n: Serialised ref^\n\n\n\n\nParameters\n\n\n\n\nauth: \nInputSerialisedAuth\n val\n\n\ndata: \nArray\n[\nU8\n val] val\n\n\n\n\nReturns\n\n\n\n\nSerialised\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nA caller with DeserialiseAuth can create an object graph from serialised\ndata.\n\n\nfun box apply(\n  auth: DeserialiseAuth val)\n: Any iso^ ?\n\n\n\n\nParameters\n\n\n\n\nauth: \nDeserialiseAuth\n val\n\n\n\n\nReturns\n\n\n\n\nAny\n iso^ ?\n\n\n\n\n\n\noutput\n\n\nA caller with OutputSerialisedAuth can gain access to the underlying bytes\nthat contain the serialised data. This can be used to write those bytes to,\nfor example, a file or socket.\n\n\nfun box output(\n  auth: OutputSerialisedAuth val)\n: Array[U8 val] val\n\n\n\n\nParameters\n\n\n\n\nauth: \nOutputSerialisedAuth\n val\n\n\n\n\nReturns\n\n\n\n\nArray\n[\nU8\n val] val", 
            "title": "class Serialised"
        }, 
        {
            "location": "/serialise-Serialised/#serialised", 
            "text": "This represents serialised data. How it can be used depends on the other\ncapabilities a caller holds.  class val Serialised", 
            "title": "Serialised"
        }, 
        {
            "location": "/serialise-Serialised/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-Serialised/#create", 
            "text": "A caller with SerialiseAuth can create serialised data from any object.  new ref create(\n  auth: SerialiseAuth val,\n  data: Any box)\n: Serialised ref^ ?", 
            "title": "create"
        }, 
        {
            "location": "/serialise-Serialised/#parameters", 
            "text": "auth:  SerialiseAuth  val  data:  Any  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-Serialised/#returns", 
            "text": "Serialised  ref^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialised/#input", 
            "text": "A caller with InputSerialisedAuth can create serialised data from any\narbitrary set of bytes. It is the caller's responsibility to ensure that\nthe data is in fact well-formed serialised data. This is currently the most\ndangerous method, as there is currently no way to check validity at\nruntime.  new ref input(\n  auth: InputSerialisedAuth val,\n  data: Array[U8 val] val)\n: Serialised ref^", 
            "title": "input"
        }, 
        {
            "location": "/serialise-Serialised/#parameters_1", 
            "text": "auth:  InputSerialisedAuth  val  data:  Array [ U8  val] val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-Serialised/#returns_1", 
            "text": "Serialised  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialised/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-Serialised/#apply", 
            "text": "A caller with DeserialiseAuth can create an object graph from serialised\ndata.  fun box apply(\n  auth: DeserialiseAuth val)\n: Any iso^ ?", 
            "title": "apply"
        }, 
        {
            "location": "/serialise-Serialised/#parameters_2", 
            "text": "auth:  DeserialiseAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-Serialised/#returns_2", 
            "text": "Any  iso^ ?", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-Serialised/#output", 
            "text": "A caller with OutputSerialisedAuth can gain access to the underlying bytes\nthat contain the serialised data. This can be used to write those bytes to,\nfor example, a file or socket.  fun box output(\n  auth: OutputSerialisedAuth val)\n: Array[U8 val] val", 
            "title": "output"
        }, 
        {
            "location": "/serialise-Serialised/#parameters_3", 
            "text": "auth:  OutputSerialisedAuth  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-Serialised/#returns_3", 
            "text": "Array [ U8  val] val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_MachineWords/", 
            "text": "_MachineWords\n\n\nclass ref _MachineWords\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _MachineWords iso^\n\n\n\n\nReturns\n\n\n\n\n_MachineWords\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar bool1: \nBool\n val\n\n\n\n\n\n\n\n\nvar bool2: \nBool\n val\n\n\n\n\n\n\n\n\nvar i8: \nI8\n val\n\n\n\n\n\n\n\n\nvar i16: \nI16\n val\n\n\n\n\n\n\n\n\nvar i32: \nI32\n val\n\n\n\n\n\n\n\n\nvar i64: \nI64\n val\n\n\n\n\n\n\n\n\nvar i128: \nI128\n val\n\n\n\n\n\n\n\n\nvar ilong: \nILong\n val\n\n\n\n\n\n\n\n\nvar isize: \nISize\n val\n\n\n\n\n\n\n\n\nvar f32: \nF32\n val\n\n\n\n\n\n\n\n\nvar f64: \nF64\n val\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _MachineWords box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_MachineWords\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class _MachineWords"
        }, 
        {
            "location": "/serialise-_MachineWords/#_machinewords", 
            "text": "class ref _MachineWords", 
            "title": "_MachineWords"
        }, 
        {
            "location": "/serialise-_MachineWords/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-_MachineWords/#create", 
            "text": "new iso create()\n: _MachineWords iso^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-_MachineWords/#returns", 
            "text": "_MachineWords  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_MachineWords/#public-fields", 
            "text": "var bool1:  Bool  val     var bool2:  Bool  val     var i8:  I8  val     var i16:  I16  val     var i32:  I32  val     var i64:  I64  val     var i128:  I128  val     var ilong:  ILong  val     var isize:  ISize  val     var f32:  F32  val     var f64:  F64  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/serialise-_MachineWords/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-_MachineWords/#eq", 
            "text": "fun box eq(\n  that: _MachineWords box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-_MachineWords/#parameters", 
            "text": "that:  _MachineWords  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-_MachineWords/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_StructWords/", 
            "text": "_StructWords\n\n\nclass ref _StructWords\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _StructWords iso^\n\n\n\n\nReturns\n\n\n\n\n_StructWords\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar u8: \nU8\n val\n\n\n\n\n\n\n\n\nvar u16: \nU16\n val\n\n\n\n\n\n\n\n\nvar u32: \nU32\n val\n\n\n\n\n\n\n\n\nvar u64: \nU64\n val\n\n\n\n\n\n\n\n\nvar u128: \nU128\n val\n\n\n\n\n\n\n\n\nvar ulong: \nULong\n val\n\n\n\n\n\n\n\n\nvar usize: \nUSize\n val\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _StructWords box)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_StructWords\n box\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class _StructWords"
        }, 
        {
            "location": "/serialise-_StructWords/#_structwords", 
            "text": "class ref _StructWords", 
            "title": "_StructWords"
        }, 
        {
            "location": "/serialise-_StructWords/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-_StructWords/#create", 
            "text": "new iso create()\n: _StructWords iso^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-_StructWords/#returns", 
            "text": "_StructWords  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_StructWords/#public-fields", 
            "text": "var u8:  U8  val     var u16:  U16  val     var u32:  U32  val     var u64:  U64  val     var u128:  U128  val     var ulong:  ULong  val     var usize:  USize  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/serialise-_StructWords/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-_StructWords/#eq", 
            "text": "fun box eq(\n  that: _StructWords box)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-_StructWords/#parameters", 
            "text": "that:  _StructWords  box", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-_StructWords/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_Simple/", 
            "text": "_Simple\n\n\nclass ref _Simple\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _Simple iso^\n\n\n\n\nReturns\n\n\n\n\n_Simple\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar words1: \n_MachineWords\n ref\n\n\n\n\n\n\n\n\nembed words2: \n_MachineWords\n ref\n\n\n\n\n\n\n\n\nvar words3: \n_StructWords\n ref\n\n\n\n\n\n\n\n\nembed words4: \n_StructWords\n ref\n\n\n\n\n\n\n\n\nvar words5: (\nAny\n ref | \nNone\n val)\n\n\n\n\n\n\n\n\nvar words6: (\nAny\n ref | \nNone\n val)\n\n\n\n\n\n\n\n\nvar string: \nString\n val\n\n\n\n\n\n\n\n\nvar none: \nNone\n val\n\n\n\n\n\n\n\n\nvar tuple: (\nU64\n val , \nString\n val)\n\n\n\n\n\n\n\n\nvar tuple2: ((\nU64\n val , \nString\n val) | \nNone\n val)\n\n\n\n\n\n\n\n\nvar a_tag: \n_MachineWords\n tag\n\n\n\n\n\n\n\n\nvar a_ref: \n_MachineWords\n ref\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _Simple ref)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_Simple\n ref\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "class _Simple"
        }, 
        {
            "location": "/serialise-_Simple/#_simple", 
            "text": "class ref _Simple", 
            "title": "_Simple"
        }, 
        {
            "location": "/serialise-_Simple/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-_Simple/#create", 
            "text": "new iso create()\n: _Simple iso^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-_Simple/#returns", 
            "text": "_Simple  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_Simple/#public-fields", 
            "text": "var words1:  _MachineWords  ref     embed words2:  _MachineWords  ref     var words3:  _StructWords  ref     embed words4:  _StructWords  ref     var words5: ( Any  ref |  None  val)     var words6: ( Any  ref |  None  val)     var string:  String  val     var none:  None  val     var tuple: ( U64  val ,  String  val)     var tuple2: (( U64  val ,  String  val) |  None  val)     var a_tag:  _MachineWords  tag     var a_ref:  _MachineWords  ref", 
            "title": "Public fields"
        }, 
        {
            "location": "/serialise-_Simple/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/serialise-_Simple/#eq", 
            "text": "fun box eq(\n  that: _Simple ref)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/serialise-_Simple/#parameters", 
            "text": "that:  _Simple  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/serialise-_Simple/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_EmptyActor/", 
            "text": "_EmptyActor\n\n\nactor tag _EmptyActor\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create()\n: _EmptyActor tag^\n\n\n\n\nReturns\n\n\n\n\n_EmptyActor\n tag^", 
            "title": "actor _EmptyActor"
        }, 
        {
            "location": "/serialise-_EmptyActor/#_emptyactor", 
            "text": "actor tag _EmptyActor", 
            "title": "_EmptyActor"
        }, 
        {
            "location": "/serialise-_EmptyActor/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-_EmptyActor/#create", 
            "text": "new tag create()\n: _EmptyActor tag^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-_EmptyActor/#returns", 
            "text": "_EmptyActor  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_HasActor/", 
            "text": "_HasActor\n\n\nclass ref _HasActor\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _HasActor iso^\n\n\n\n\nReturns\n\n\n\n\n_HasActor\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar x: \n_EmptyActor\n tag", 
            "title": "class _HasActor"
        }, 
        {
            "location": "/serialise-_HasActor/#_hasactor", 
            "text": "class ref _HasActor", 
            "title": "_HasActor"
        }, 
        {
            "location": "/serialise-_HasActor/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-_HasActor/#create", 
            "text": "new iso create()\n: _HasActor iso^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-_HasActor/#returns", 
            "text": "_HasActor  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_HasActor/#public-fields", 
            "text": "var x:  _EmptyActor  tag", 
            "title": "Public fields"
        }, 
        {
            "location": "/serialise-_BoxedWord/", 
            "text": "_BoxedWord\n\n\nclass ref _BoxedWord\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _BoxedWord iso^\n\n\n\n\nReturns\n\n\n\n\n_BoxedWord\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar f: \nAny\n val", 
            "title": "class _BoxedWord"
        }, 
        {
            "location": "/serialise-_BoxedWord/#_boxedword", 
            "text": "class ref _BoxedWord", 
            "title": "_BoxedWord"
        }, 
        {
            "location": "/serialise-_BoxedWord/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/serialise-_BoxedWord/#create", 
            "text": "new iso create()\n: _BoxedWord iso^", 
            "title": "create"
        }, 
        {
            "location": "/serialise-_BoxedWord/#returns", 
            "text": "_BoxedWord  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/serialise-_BoxedWord/#public-fields", 
            "text": "var f:  Any  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/signals--index/", 
            "text": "Signals package\n\n\nThe Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a \nSignalHandler\n\nand a corresponding \nSignalNotify\n object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding\n\nSignalNotify\n's apply method.\n\n\nExample program\n\n\nThe following program will listen for the TERM signal and output a message to\nstandard out if it is received.\n\n\nuse \nsignals\n\n\nactor Main\n  new create(env: Env) =\n\n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) =\n\n    _env = env\n\n  fun ref apply(count: U32): Bool =\n\n    _env.out.print(\nTERM signal received\n)\n    true\n\n\n\n\nSignal portability\n\n\nThe \nSig\n primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use\nthem will cause a compilation error.\n\n\nShutting down handlers\n\n\nUnlike a \nTCPConnection\n and other forms of input receiving, creating a\n\nSignalHandler\n will not keep your program running. As such, you are not\nrequired to call \ndispose\n on your signal handlers in order to shutdown your\nprogram.\n\n\nPublic Types\n\n\n\n\ninterface SignalNotify\n\n\nprimitive SignalRaise\n\n\nactor SignalHandler\n\n\nprimitive Sig", 
            "title": "Package"
        }, 
        {
            "location": "/signals--index/#signals-package", 
            "text": "The Signals package provides support for handling Unix style signals.\nFor each signal that you want to handle, you need to create a  SignalHandler \nand a corresponding  SignalNotify  object. Each SignalHandler runs as it own\nactor and upon receiving the signal will call its corresponding SignalNotify 's apply method.", 
            "title": "Signals package"
        }, 
        {
            "location": "/signals--index/#example-program", 
            "text": "The following program will listen for the TERM signal and output a message to\nstandard out if it is received.  use  signals \n\nactor Main\n  new create(env: Env) = \n    // Create a TERM handler\n    let signal = SignalHandler(TermHandler(env), Sig.term())\n    // Raise TERM signal\n    signal.raise()\n\nclass TermHandler is SignalNotify\n  let _env: Env\n\n  new iso create(env: Env) = \n    _env = env\n\n  fun ref apply(count: U32): Bool = \n    _env.out.print( TERM signal received )\n    true", 
            "title": "Example program"
        }, 
        {
            "location": "/signals--index/#signal-portability", 
            "text": "The  Sig  primitive provides support for portable signal handling across Linux,\nFreeBSD and OSX. Signals are not supported on Windows and attempting to use\nthem will cause a compilation error.", 
            "title": "Signal portability"
        }, 
        {
            "location": "/signals--index/#shutting-down-handlers", 
            "text": "Unlike a  TCPConnection  and other forms of input receiving, creating a SignalHandler  will not keep your program running. As such, you are not\nrequired to call  dispose  on your signal handlers in order to shutdown your\nprogram.", 
            "title": "Shutting down handlers"
        }, 
        {
            "location": "/signals--index/#public-types", 
            "text": "interface SignalNotify  primitive SignalRaise  actor SignalHandler  primitive Sig", 
            "title": "Public Types"
        }, 
        {
            "location": "/signals-SignalNotify/", 
            "text": "SignalNotify\n\n\nNotifications for a signal.\n\n\ninterface ref SignalNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCalled with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.\n\n\nfun ref apply(\n  count: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncount: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\n\nCalled if the signal is disposed. This is also called if the notifier\nreturns false.\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface SignalNotify"
        }, 
        {
            "location": "/signals-SignalNotify/#signalnotify", 
            "text": "Notifications for a signal.  interface ref SignalNotify", 
            "title": "SignalNotify"
        }, 
        {
            "location": "/signals-SignalNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-SignalNotify/#apply", 
            "text": "Called with the the number of times the signal has fired since this was\nlast called. Return false to stop listening for the signal.  fun ref apply(\n  count: U32 val)\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/signals-SignalNotify/#parameters", 
            "text": "count:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-SignalNotify/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalNotify/#dispose", 
            "text": "Called if the signal is disposed. This is also called if the notifier\nreturns false.  fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/signals-SignalNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalRaise/", 
            "text": "SignalRaise\n\n\nRaise a signal.\n\n\nprimitive val SignalRaise\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: SignalRaise val^\n\n\n\n\nReturns\n\n\n\n\nSignalRaise\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  sig: U32 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nsig: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: SignalRaise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSignalRaise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: SignalRaise val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSignalRaise\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive SignalRaise"
        }, 
        {
            "location": "/signals-SignalRaise/#signalraise", 
            "text": "Raise a signal.  primitive val SignalRaise", 
            "title": "SignalRaise"
        }, 
        {
            "location": "/signals-SignalRaise/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-SignalRaise/#create", 
            "text": "new val create()\n: SignalRaise val^", 
            "title": "create"
        }, 
        {
            "location": "/signals-SignalRaise/#returns", 
            "text": "SignalRaise  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalRaise/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-SignalRaise/#apply", 
            "text": "fun box apply(\n  sig: U32 val)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/signals-SignalRaise/#parameters", 
            "text": "sig:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-SignalRaise/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalRaise/#eq", 
            "text": "fun box eq(\n  that: SignalRaise val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/signals-SignalRaise/#parameters_1", 
            "text": "that:  SignalRaise  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-SignalRaise/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalRaise/#ne", 
            "text": "fun box ne(\n  that: SignalRaise val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/signals-SignalRaise/#parameters_2", 
            "text": "that:  SignalRaise  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-SignalRaise/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalHandler/", 
            "text": "SignalHandler\n\n\nListen for a specific signal.\n\n\nactor tag SignalHandler\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate a signal handler.\n\n\nnew tag create(\n  notify: SignalNotify iso,\n  sig: U32 val)\n: SignalHandler tag^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nSignalNotify\n iso\n\n\nsig: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nSignalHandler\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\nraise\n\n\nRaise the signal.\n\n\nbe raise()\n\n\n\n\n\n\ndispose\n\n\nDispose of the signal handler.\n\n\nbe dispose()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nCalled when the signal is received, or when the AsioEventID can be\ndestroyed.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_dispose\n\n\nDispose of the AsioEventID.\n\n\nfun ref _dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor SignalHandler"
        }, 
        {
            "location": "/signals-SignalHandler/#signalhandler", 
            "text": "Listen for a specific signal.  actor tag SignalHandler", 
            "title": "SignalHandler"
        }, 
        {
            "location": "/signals-SignalHandler/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-SignalHandler/#create", 
            "text": "Create a signal handler.  new tag create(\n  notify: SignalNotify iso,\n  sig: U32 val)\n: SignalHandler tag^", 
            "title": "create"
        }, 
        {
            "location": "/signals-SignalHandler/#parameters", 
            "text": "notify:  SignalNotify  iso  sig:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-SignalHandler/#returns", 
            "text": "SignalHandler  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-SignalHandler/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/signals-SignalHandler/#raise", 
            "text": "Raise the signal.  be raise()", 
            "title": "raise"
        }, 
        {
            "location": "/signals-SignalHandler/#dispose", 
            "text": "Dispose of the signal handler.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/signals-SignalHandler/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/signals-SignalHandler/#_event_notify", 
            "text": "Called when the signal is received, or when the AsioEventID can be\ndestroyed.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/signals-SignalHandler/#parameters_1", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-SignalHandler/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/signals-SignalHandler/#_dispose", 
            "text": "Dispose of the AsioEventID.  fun ref _dispose()\n: None val", 
            "title": "_dispose"
        }, 
        {
            "location": "/signals-SignalHandler/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/", 
            "text": "Sig\n\n\nDefine the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.\n\n\nprimitive val Sig\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Sig val^\n\n\n\n\nReturns\n\n\n\n\nSig\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nhup\n\n\nfun box hup()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nint\n\n\nfun box int()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nquit\n\n\nfun box quit()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nill\n\n\nfun box ill()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntrap\n\n\nfun box trap()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nabrt\n\n\nfun box abrt()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nemt\n\n\nfun box emt()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nfpe\n\n\nfun box fpe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nkill\n\n\nfun box kill()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nbus\n\n\nfun box bus()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsegv\n\n\nfun box segv()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nsys\n\n\nfun box sys()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\npipe\n\n\nfun box pipe()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nalrm\n\n\nfun box alrm()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nterm\n\n\nfun box term()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nurg\n\n\nfun box urg()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstkflt\n\n\nfun box stkflt()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nstop\n\n\nfun box stop()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ntstp\n\n\nfun box tstp()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ncont\n\n\nfun box cont()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nchld\n\n\nfun box chld()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nttin\n\n\nfun box ttin()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nttou\n\n\nfun box ttou()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nio\n\n\nfun box io()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nxcpu\n\n\nfun box xcpu()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nxfsz\n\n\nfun box xfsz()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nvtalrm\n\n\nfun box vtalrm()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nprof\n\n\nfun box prof()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nwinch\n\n\nfun box winch()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\ninfo\n\n\nfun box info()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\npwr\n\n\nfun box pwr()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nusr1\n\n\nfun box usr1()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nusr2\n\n\nfun box usr2()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\nrt\n\n\nfun box rt(\n  n: U32 val)\n: U32 val ?\n\n\n\n\nParameters\n\n\n\n\nn: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nU32\n val ?\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Sig val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSig\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Sig val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nSig\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Sig"
        }, 
        {
            "location": "/signals-Sig/#sig", 
            "text": "Define the portable signal numbers. Other signals can be used, but they are\nnot guaranteed to be portable.  primitive val Sig", 
            "title": "Sig"
        }, 
        {
            "location": "/signals-Sig/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/signals-Sig/#create", 
            "text": "new val create()\n: Sig val^", 
            "title": "create"
        }, 
        {
            "location": "/signals-Sig/#returns", 
            "text": "Sig  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/signals-Sig/#hup", 
            "text": "fun box hup()\n: U32 val", 
            "title": "hup"
        }, 
        {
            "location": "/signals-Sig/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#int", 
            "text": "fun box int()\n: U32 val", 
            "title": "int"
        }, 
        {
            "location": "/signals-Sig/#returns_2", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#quit", 
            "text": "fun box quit()\n: U32 val", 
            "title": "quit"
        }, 
        {
            "location": "/signals-Sig/#returns_3", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#ill", 
            "text": "fun box ill()\n: U32 val", 
            "title": "ill"
        }, 
        {
            "location": "/signals-Sig/#returns_4", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#trap", 
            "text": "fun box trap()\n: U32 val", 
            "title": "trap"
        }, 
        {
            "location": "/signals-Sig/#returns_5", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#abrt", 
            "text": "fun box abrt()\n: U32 val", 
            "title": "abrt"
        }, 
        {
            "location": "/signals-Sig/#returns_6", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#emt", 
            "text": "fun box emt()\n: U32 val", 
            "title": "emt"
        }, 
        {
            "location": "/signals-Sig/#returns_7", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#fpe", 
            "text": "fun box fpe()\n: U32 val", 
            "title": "fpe"
        }, 
        {
            "location": "/signals-Sig/#returns_8", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#kill", 
            "text": "fun box kill()\n: U32 val", 
            "title": "kill"
        }, 
        {
            "location": "/signals-Sig/#returns_9", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#bus", 
            "text": "fun box bus()\n: U32 val", 
            "title": "bus"
        }, 
        {
            "location": "/signals-Sig/#returns_10", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#segv", 
            "text": "fun box segv()\n: U32 val", 
            "title": "segv"
        }, 
        {
            "location": "/signals-Sig/#returns_11", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#sys", 
            "text": "fun box sys()\n: U32 val", 
            "title": "sys"
        }, 
        {
            "location": "/signals-Sig/#returns_12", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#pipe", 
            "text": "fun box pipe()\n: U32 val", 
            "title": "pipe"
        }, 
        {
            "location": "/signals-Sig/#returns_13", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#alrm", 
            "text": "fun box alrm()\n: U32 val", 
            "title": "alrm"
        }, 
        {
            "location": "/signals-Sig/#returns_14", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#term", 
            "text": "fun box term()\n: U32 val", 
            "title": "term"
        }, 
        {
            "location": "/signals-Sig/#returns_15", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#urg", 
            "text": "fun box urg()\n: U32 val", 
            "title": "urg"
        }, 
        {
            "location": "/signals-Sig/#returns_16", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#stkflt", 
            "text": "fun box stkflt()\n: U32 val", 
            "title": "stkflt"
        }, 
        {
            "location": "/signals-Sig/#returns_17", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#stop", 
            "text": "fun box stop()\n: U32 val", 
            "title": "stop"
        }, 
        {
            "location": "/signals-Sig/#returns_18", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#tstp", 
            "text": "fun box tstp()\n: U32 val", 
            "title": "tstp"
        }, 
        {
            "location": "/signals-Sig/#returns_19", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#cont", 
            "text": "fun box cont()\n: U32 val", 
            "title": "cont"
        }, 
        {
            "location": "/signals-Sig/#returns_20", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#chld", 
            "text": "fun box chld()\n: U32 val", 
            "title": "chld"
        }, 
        {
            "location": "/signals-Sig/#returns_21", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#ttin", 
            "text": "fun box ttin()\n: U32 val", 
            "title": "ttin"
        }, 
        {
            "location": "/signals-Sig/#returns_22", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#ttou", 
            "text": "fun box ttou()\n: U32 val", 
            "title": "ttou"
        }, 
        {
            "location": "/signals-Sig/#returns_23", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#io", 
            "text": "fun box io()\n: U32 val", 
            "title": "io"
        }, 
        {
            "location": "/signals-Sig/#returns_24", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#xcpu", 
            "text": "fun box xcpu()\n: U32 val", 
            "title": "xcpu"
        }, 
        {
            "location": "/signals-Sig/#returns_25", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#xfsz", 
            "text": "fun box xfsz()\n: U32 val", 
            "title": "xfsz"
        }, 
        {
            "location": "/signals-Sig/#returns_26", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#vtalrm", 
            "text": "fun box vtalrm()\n: U32 val", 
            "title": "vtalrm"
        }, 
        {
            "location": "/signals-Sig/#returns_27", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#prof", 
            "text": "fun box prof()\n: U32 val", 
            "title": "prof"
        }, 
        {
            "location": "/signals-Sig/#returns_28", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#winch", 
            "text": "fun box winch()\n: U32 val", 
            "title": "winch"
        }, 
        {
            "location": "/signals-Sig/#returns_29", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#info", 
            "text": "fun box info()\n: U32 val", 
            "title": "info"
        }, 
        {
            "location": "/signals-Sig/#returns_30", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#pwr", 
            "text": "fun box pwr()\n: U32 val", 
            "title": "pwr"
        }, 
        {
            "location": "/signals-Sig/#returns_31", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#usr1", 
            "text": "fun box usr1()\n: U32 val", 
            "title": "usr1"
        }, 
        {
            "location": "/signals-Sig/#returns_32", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#usr2", 
            "text": "fun box usr2()\n: U32 val", 
            "title": "usr2"
        }, 
        {
            "location": "/signals-Sig/#returns_33", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#rt", 
            "text": "fun box rt(\n  n: U32 val)\n: U32 val ?", 
            "title": "rt"
        }, 
        {
            "location": "/signals-Sig/#parameters", 
            "text": "n:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-Sig/#returns_34", 
            "text": "U32  val ?", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#eq", 
            "text": "fun box eq(\n  that: Sig val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/signals-Sig/#parameters_1", 
            "text": "that:  Sig  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-Sig/#returns_35", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/signals-Sig/#ne", 
            "text": "fun box ne(\n  that: Sig val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/signals-Sig/#parameters_2", 
            "text": "that:  Sig  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/signals-Sig/#returns_36", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/strings--index/", 
            "text": "No package doc string provided for strings.\n\n\nPublic Types\n\n\n\n\nprimitive CommonPrefix", 
            "title": "Package"
        }, 
        {
            "location": "/strings--index/#public-types", 
            "text": "primitive CommonPrefix", 
            "title": "Public Types"
        }, 
        {
            "location": "/strings-CommonPrefix/", 
            "text": "CommonPrefix\n\n\nCreates a string that is the common prefix of the supplied strings, possibly\nempty.\n\n\nprimitive val CommonPrefix\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: CommonPrefix val^\n\n\n\n\nReturns\n\n\n\n\nCommonPrefix\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  data: ReadSeq[Stringable box] box)\n: String iso^\n\n\n\n\nParameters\n\n\n\n\ndata: \nReadSeq\n[\nStringable\n box] box\n\n\n\n\nReturns\n\n\n\n\nString\n iso^\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: CommonPrefix val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCommonPrefix\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: CommonPrefix val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nCommonPrefix\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive CommonPrefix"
        }, 
        {
            "location": "/strings-CommonPrefix/#commonprefix", 
            "text": "Creates a string that is the common prefix of the supplied strings, possibly\nempty.  primitive val CommonPrefix", 
            "title": "CommonPrefix"
        }, 
        {
            "location": "/strings-CommonPrefix/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/strings-CommonPrefix/#create", 
            "text": "new val create()\n: CommonPrefix val^", 
            "title": "create"
        }, 
        {
            "location": "/strings-CommonPrefix/#returns", 
            "text": "CommonPrefix  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/strings-CommonPrefix/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/strings-CommonPrefix/#apply", 
            "text": "fun box apply(\n  data: ReadSeq[Stringable box] box)\n: String iso^", 
            "title": "apply"
        }, 
        {
            "location": "/strings-CommonPrefix/#parameters", 
            "text": "data:  ReadSeq [ Stringable  box] box", 
            "title": "Parameters"
        }, 
        {
            "location": "/strings-CommonPrefix/#returns_1", 
            "text": "String  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/strings-CommonPrefix/#eq", 
            "text": "fun box eq(\n  that: CommonPrefix val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/strings-CommonPrefix/#parameters_1", 
            "text": "that:  CommonPrefix  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/strings-CommonPrefix/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/strings-CommonPrefix/#ne", 
            "text": "fun box ne(\n  that: CommonPrefix val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/strings-CommonPrefix/#parameters_2", 
            "text": "that:  CommonPrefix  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/strings-CommonPrefix/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term--index/", 
            "text": "No package doc string provided for term.\n\n\nPublic Types\n\n\n\n\ninterface ReadlineNotify\n\n\nclass Readline\n\n\nactor ANSITerm\n\n\ninterface ANSINotify\n\n\nprimitive ANSI\n\n\n\n\nPrivate Types\n\n\n\n\nstruct _TermSize\n\n\nprimitive _EscapeNone\n\n\nprimitive _EscapeStart\n\n\nprimitive _EscapeSS3\n\n\nprimitive _EscapeCSI\n\n\nprimitive _EscapeMod\n\n\ntype _EscapeState\n\n\nclass _TermResizeNotify\n\n\nprimitive _TIOCGWINSZ", 
            "title": "Package"
        }, 
        {
            "location": "/term--index/#public-types", 
            "text": "interface ReadlineNotify  class Readline  actor ANSITerm  interface ANSINotify  primitive ANSI", 
            "title": "Public Types"
        }, 
        {
            "location": "/term--index/#private-types", 
            "text": "struct _TermSize  primitive _EscapeNone  primitive _EscapeStart  primitive _EscapeSS3  primitive _EscapeCSI  primitive _EscapeMod  type _EscapeState  class _TermResizeNotify  primitive _TIOCGWINSZ", 
            "title": "Private Types"
        }, 
        {
            "location": "/term-ReadlineNotify/", 
            "text": "ReadlineNotify\n\n\nNotifier for readline.\n\n\ninterface ref ReadlineNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReceives finished lines. The next prompt is set by fulfilling the promise.\nIf the promise is rejected, readline will stop handling input.\n\n\nfun ref apply(\n  line: String val,\n  prompt: Promise[String val] tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nline: \nString\n val\n\n\nprompt: \nPromise\n[\nString\n val] tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ntab\n\n\nReturn tab completion possibilities.\n\n\nfun ref tab(\n  line: String val)\n: Seq[String val] box\n\n\n\n\nParameters\n\n\n\n\nline: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nSeq\n[\nString\n val] box", 
            "title": "interface ReadlineNotify"
        }, 
        {
            "location": "/term-ReadlineNotify/#readlinenotify", 
            "text": "Notifier for readline.  interface ref ReadlineNotify", 
            "title": "ReadlineNotify"
        }, 
        {
            "location": "/term-ReadlineNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-ReadlineNotify/#apply", 
            "text": "Receives finished lines. The next prompt is set by fulfilling the promise.\nIf the promise is rejected, readline will stop handling input.  fun ref apply(\n  line: String val,\n  prompt: Promise[String val] tag)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/term-ReadlineNotify/#parameters", 
            "text": "line:  String  val  prompt:  Promise [ String  val] tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ReadlineNotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ReadlineNotify/#tab", 
            "text": "Return tab completion possibilities.  fun ref tab(\n  line: String val)\n: Seq[String val] box", 
            "title": "tab"
        }, 
        {
            "location": "/term-ReadlineNotify/#parameters_1", 
            "text": "line:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ReadlineNotify/#returns_1", 
            "text": "Seq [ String  val] box", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/", 
            "text": "Readline\n\n\nLine editing, history, and tab completion.\n\n\nclass ref Readline is\n  ANSINotify ref\n\n\n\n\nImplements\n\n\n\n\nANSINotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create(\n  notify: ReadlineNotify iso,\n  out: OutStream tag,\n  path: (FilePath val | None val) = seq,\n  maxlen: USize val = seq)\n: Readline iso^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nReadlineNotify\n iso\n\n\nout: \nOutStream\n tag\n\n\npath: (\nFilePath\n val | \nNone\n val) = seq\n\n\nmaxlen: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nReadline\n iso^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nReceives input.\n\n\nfun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n ref\n\n\ninput: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprompt\n\n\nSet a new prompt, unblock, and handle the pending queue.\n\n\nfun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n ref\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nNo more input is available.\n\n\nfun ref closed()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nup\n\n\nPrevious line.\n\n\nfun ref up(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndown\n\n\nNext line.\n\n\nfun ref down(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nleft\n\n\nMove left.\n\n\nfun ref left(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nright\n\n\nMove right.\n\n\nfun ref right(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhome\n\n\nBeginning of the line.\n\n\nfun ref home(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nend_key\n\n\nEnd of the line.\n\n\nfun ref end_key(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndelete\n\n\nForward delete.\n\n\nfun ref delete(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val = seq\n\n\nalt: \nBool\n val = seq\n\n\nshift: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\n\nfun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_up\n\n\nfun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_down\n\n\nfun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfn_key\n\n\nfun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ni: \nU8\n val\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nfun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nrows: \nU16\n val\n\n\ncols: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_backspace\n\n\nBackward delete.\n\n\nfun ref _backspace()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_clear\n\n\nClear the screen.\n\n\nfun ref _clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_swap\n\n\nSwap the previous character with the current one.\n\n\nfun ref _swap()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_delete_prev_word\n\n\nDelete the previous word.\n\n\nfun ref _delete_prev_word()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_tab\n\n\nTab completion.\n\n\nTODO: Improve this.\n\n\nfun ref _tab()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_dispatch\n\n\nSend a finished line to the notifier.\n\n\nfun ref _dispatch(\n  term: ANSITerm tag)\n: None val\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n tag\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_handle_line\n\n\nDispatch a single line.\n\n\nfun ref _handle_line(\n  term: ANSITerm tag,\n  line: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n tag\n\n\nline: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_refresh_line\n\n\nRefresh the line on screen.\n\n\nfun ref _refresh_line()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_add_history\n\n\nAdd a line to the history, trimming an earlier line if necessary.\n\n\nfun ref _add_history(\n  line: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nline: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_load_history\n\n\nLoad the history from a file.\n\n\nfun ref _load_history()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_save_history\n\n\nWrite the history back to a file.\n\n\nfun box _save_history()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class Readline"
        }, 
        {
            "location": "/term-Readline/#readline", 
            "text": "Line editing, history, and tab completion.  class ref Readline is\n  ANSINotify ref", 
            "title": "Readline"
        }, 
        {
            "location": "/term-Readline/#implements", 
            "text": "ANSINotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/term-Readline/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-Readline/#create", 
            "text": "new iso create(\n  notify: ReadlineNotify iso,\n  out: OutStream tag,\n  path: (FilePath val | None val) = seq,\n  maxlen: USize val = seq)\n: Readline iso^", 
            "title": "create"
        }, 
        {
            "location": "/term-Readline/#parameters", 
            "text": "notify:  ReadlineNotify  iso  out:  OutStream  tag  path: ( FilePath  val |  None  val) = seq  maxlen:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns", 
            "text": "Readline  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-Readline/#apply", 
            "text": "Receives input.  fun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/term-Readline/#parameters_1", 
            "text": "term:  ANSITerm  ref  input:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#prompt", 
            "text": "Set a new prompt, unblock, and handle the pending queue.  fun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val", 
            "title": "prompt"
        }, 
        {
            "location": "/term-Readline/#parameters_2", 
            "text": "term:  ANSITerm  ref  value:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#closed", 
            "text": "No more input is available.  fun ref closed()\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/term-Readline/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#up", 
            "text": "Previous line.  fun ref up(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "up"
        }, 
        {
            "location": "/term-Readline/#parameters_3", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#down", 
            "text": "Next line.  fun ref down(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "down"
        }, 
        {
            "location": "/term-Readline/#parameters_4", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#left", 
            "text": "Move left.  fun ref left(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "left"
        }, 
        {
            "location": "/term-Readline/#parameters_5", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#right", 
            "text": "Move right.  fun ref right(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "right"
        }, 
        {
            "location": "/term-Readline/#parameters_6", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#home", 
            "text": "Beginning of the line.  fun ref home(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "home"
        }, 
        {
            "location": "/term-Readline/#parameters_7", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#end_key", 
            "text": "End of the line.  fun ref end_key(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "end_key"
        }, 
        {
            "location": "/term-Readline/#parameters_8", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#delete", 
            "text": "Forward delete.  fun ref delete(\n  ctrl: Bool val = seq,\n  alt: Bool val = seq,\n  shift: Bool val = seq)\n: None val", 
            "title": "delete"
        }, 
        {
            "location": "/term-Readline/#parameters_9", 
            "text": "ctrl:  Bool  val = seq  alt:  Bool  val = seq  shift:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#insert", 
            "text": "fun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "insert"
        }, 
        {
            "location": "/term-Readline/#parameters_10", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#page_up", 
            "text": "fun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "page_up"
        }, 
        {
            "location": "/term-Readline/#parameters_11", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#page_down", 
            "text": "fun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "page_down"
        }, 
        {
            "location": "/term-Readline/#parameters_12", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#fn_key", 
            "text": "fun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "fn_key"
        }, 
        {
            "location": "/term-Readline/#parameters_13", 
            "text": "i:  U8  val  ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#size", 
            "text": "fun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val", 
            "title": "size"
        }, 
        {
            "location": "/term-Readline/#parameters_14", 
            "text": "rows:  U16  val  cols:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/term-Readline/#_backspace", 
            "text": "Backward delete.  fun ref _backspace()\n: None val", 
            "title": "_backspace"
        }, 
        {
            "location": "/term-Readline/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_clear", 
            "text": "Clear the screen.  fun ref _clear()\n: None val", 
            "title": "_clear"
        }, 
        {
            "location": "/term-Readline/#returns_17", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_swap", 
            "text": "Swap the previous character with the current one.  fun ref _swap()\n: None val", 
            "title": "_swap"
        }, 
        {
            "location": "/term-Readline/#returns_18", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_delete_prev_word", 
            "text": "Delete the previous word.  fun ref _delete_prev_word()\n: None val", 
            "title": "_delete_prev_word"
        }, 
        {
            "location": "/term-Readline/#returns_19", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_tab", 
            "text": "Tab completion.  TODO: Improve this.  fun ref _tab()\n: None val", 
            "title": "_tab"
        }, 
        {
            "location": "/term-Readline/#returns_20", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_dispatch", 
            "text": "Send a finished line to the notifier.  fun ref _dispatch(\n  term: ANSITerm tag)\n: None val", 
            "title": "_dispatch"
        }, 
        {
            "location": "/term-Readline/#parameters_15", 
            "text": "term:  ANSITerm  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_21", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_handle_line", 
            "text": "Dispatch a single line.  fun ref _handle_line(\n  term: ANSITerm tag,\n  line: String val)\n: None val", 
            "title": "_handle_line"
        }, 
        {
            "location": "/term-Readline/#parameters_16", 
            "text": "term:  ANSITerm  tag  line:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_22", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_refresh_line", 
            "text": "Refresh the line on screen.  fun ref _refresh_line()\n: None val", 
            "title": "_refresh_line"
        }, 
        {
            "location": "/term-Readline/#returns_23", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_add_history", 
            "text": "Add a line to the history, trimming an earlier line if necessary.  fun ref _add_history(\n  line: String val)\n: None val", 
            "title": "_add_history"
        }, 
        {
            "location": "/term-Readline/#parameters_17", 
            "text": "line:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-Readline/#returns_24", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_load_history", 
            "text": "Load the history from a file.  fun ref _load_history()\n: None val", 
            "title": "_load_history"
        }, 
        {
            "location": "/term-Readline/#returns_25", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-Readline/#_save_history", 
            "text": "Write the history back to a file.  fun box _save_history()\n: None val", 
            "title": "_save_history"
        }, 
        {
            "location": "/term-Readline/#returns_26", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TermSize/", 
            "text": "_TermSize\n\n\nstruct ref _TermSize\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew iso create()\n: _TermSize iso^\n\n\n\n\nReturns\n\n\n\n\n_TermSize\n iso^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar row: \nU16\n val\n\n\n\n\n\n\n\n\nvar col: \nU16\n val\n\n\n\n\n\n\n\n\nvar xpixel: \nU16\n val\n\n\n\n\n\n\n\n\nvar ypixel: \nU16\n val", 
            "title": "struct _TermSize"
        }, 
        {
            "location": "/term-_TermSize/#_termsize", 
            "text": "struct ref _TermSize", 
            "title": "_TermSize"
        }, 
        {
            "location": "/term-_TermSize/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_TermSize/#create", 
            "text": "new iso create()\n: _TermSize iso^", 
            "title": "create"
        }, 
        {
            "location": "/term-_TermSize/#returns", 
            "text": "_TermSize  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TermSize/#public-fields", 
            "text": "var row:  U16  val     var col:  U16  val     var xpixel:  U16  val     var ypixel:  U16  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/term-_EscapeNone/", 
            "text": "_EscapeNone\n\n\nprimitive val _EscapeNone\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EscapeNone val^\n\n\n\n\nReturns\n\n\n\n\n_EscapeNone\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EscapeNone val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeNone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EscapeNone val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeNone\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EscapeNone"
        }, 
        {
            "location": "/term-_EscapeNone/#_escapenone", 
            "text": "primitive val _EscapeNone", 
            "title": "_EscapeNone"
        }, 
        {
            "location": "/term-_EscapeNone/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeNone/#create", 
            "text": "new val create()\n: _EscapeNone val^", 
            "title": "create"
        }, 
        {
            "location": "/term-_EscapeNone/#returns", 
            "text": "_EscapeNone  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeNone/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeNone/#eq", 
            "text": "fun box eq(\n  that: _EscapeNone val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-_EscapeNone/#parameters", 
            "text": "that:  _EscapeNone  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeNone/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeNone/#ne", 
            "text": "fun box ne(\n  that: _EscapeNone val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-_EscapeNone/#parameters_1", 
            "text": "that:  _EscapeNone  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeNone/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeStart/", 
            "text": "_EscapeStart\n\n\nprimitive val _EscapeStart\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EscapeStart val^\n\n\n\n\nReturns\n\n\n\n\n_EscapeStart\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EscapeStart val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeStart\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EscapeStart val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeStart\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EscapeStart"
        }, 
        {
            "location": "/term-_EscapeStart/#_escapestart", 
            "text": "primitive val _EscapeStart", 
            "title": "_EscapeStart"
        }, 
        {
            "location": "/term-_EscapeStart/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeStart/#create", 
            "text": "new val create()\n: _EscapeStart val^", 
            "title": "create"
        }, 
        {
            "location": "/term-_EscapeStart/#returns", 
            "text": "_EscapeStart  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeStart/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeStart/#eq", 
            "text": "fun box eq(\n  that: _EscapeStart val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-_EscapeStart/#parameters", 
            "text": "that:  _EscapeStart  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeStart/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeStart/#ne", 
            "text": "fun box ne(\n  that: _EscapeStart val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-_EscapeStart/#parameters_1", 
            "text": "that:  _EscapeStart  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeStart/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeSS3/", 
            "text": "_EscapeSS3\n\n\nprimitive val _EscapeSS3\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EscapeSS3 val^\n\n\n\n\nReturns\n\n\n\n\n_EscapeSS3\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EscapeSS3 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeSS3\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EscapeSS3 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeSS3\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EscapeSS3"
        }, 
        {
            "location": "/term-_EscapeSS3/#_escapess3", 
            "text": "primitive val _EscapeSS3", 
            "title": "_EscapeSS3"
        }, 
        {
            "location": "/term-_EscapeSS3/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeSS3/#create", 
            "text": "new val create()\n: _EscapeSS3 val^", 
            "title": "create"
        }, 
        {
            "location": "/term-_EscapeSS3/#returns", 
            "text": "_EscapeSS3  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeSS3/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeSS3/#eq", 
            "text": "fun box eq(\n  that: _EscapeSS3 val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-_EscapeSS3/#parameters", 
            "text": "that:  _EscapeSS3  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeSS3/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeSS3/#ne", 
            "text": "fun box ne(\n  that: _EscapeSS3 val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-_EscapeSS3/#parameters_1", 
            "text": "that:  _EscapeSS3  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeSS3/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeCSI/", 
            "text": "_EscapeCSI\n\n\nprimitive val _EscapeCSI\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EscapeCSI val^\n\n\n\n\nReturns\n\n\n\n\n_EscapeCSI\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EscapeCSI val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeCSI\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EscapeCSI val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeCSI\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EscapeCSI"
        }, 
        {
            "location": "/term-_EscapeCSI/#_escapecsi", 
            "text": "primitive val _EscapeCSI", 
            "title": "_EscapeCSI"
        }, 
        {
            "location": "/term-_EscapeCSI/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeCSI/#create", 
            "text": "new val create()\n: _EscapeCSI val^", 
            "title": "create"
        }, 
        {
            "location": "/term-_EscapeCSI/#returns", 
            "text": "_EscapeCSI  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeCSI/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeCSI/#eq", 
            "text": "fun box eq(\n  that: _EscapeCSI val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-_EscapeCSI/#parameters", 
            "text": "that:  _EscapeCSI  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeCSI/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeCSI/#ne", 
            "text": "fun box ne(\n  that: _EscapeCSI val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-_EscapeCSI/#parameters_1", 
            "text": "that:  _EscapeCSI  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeCSI/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeMod/", 
            "text": "_EscapeMod\n\n\nprimitive val _EscapeMod\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _EscapeMod val^\n\n\n\n\nReturns\n\n\n\n\n_EscapeMod\n val^\n\n\n\n\n\n\nPublic Functions\n\n\neq\n\n\nfun box eq(\n  that: _EscapeMod val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeMod\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _EscapeMod val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_EscapeMod\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _EscapeMod"
        }, 
        {
            "location": "/term-_EscapeMod/#_escapemod", 
            "text": "primitive val _EscapeMod", 
            "title": "_EscapeMod"
        }, 
        {
            "location": "/term-_EscapeMod/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_EscapeMod/#create", 
            "text": "new val create()\n: _EscapeMod val^", 
            "title": "create"
        }, 
        {
            "location": "/term-_EscapeMod/#returns", 
            "text": "_EscapeMod  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeMod/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_EscapeMod/#eq", 
            "text": "fun box eq(\n  that: _EscapeMod val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-_EscapeMod/#parameters", 
            "text": "that:  _EscapeMod  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeMod/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeMod/#ne", 
            "text": "fun box ne(\n  that: _EscapeMod val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-_EscapeMod/#parameters_1", 
            "text": "that:  _EscapeMod  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_EscapeMod/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_EscapeState/", 
            "text": "_EscapeState\n\n\ntype _EscapeState is\n  (_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)\n\n\n\n\nType Alias For\n\n\n\n\n(\n_EscapeNone\n val | \n_EscapeStart\n val | \n_EscapeSS3\n val | \n_EscapeCSI\n val | \n_EscapeMod\n val)", 
            "title": "type _EscapeState"
        }, 
        {
            "location": "/term-_EscapeState/#_escapestate", 
            "text": "type _EscapeState is\n  (_EscapeNone val | _EscapeStart val | _EscapeSS3 val | _EscapeCSI val | _EscapeMod val)", 
            "title": "_EscapeState"
        }, 
        {
            "location": "/term-_EscapeState/#type-alias-for", 
            "text": "( _EscapeNone  val |  _EscapeStart  val |  _EscapeSS3  val |  _EscapeCSI  val |  _EscapeMod  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/term-_TermResizeNotify/", 
            "text": "_TermResizeNotify\n\n\nclass ref _TermResizeNotify is\n  SignalNotify ref\n\n\n\n\nImplements\n\n\n\n\nSignalNotify\n ref\n\n\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  term: ANSITerm tag)\n: _TermResizeNotify ref^\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n tag\n\n\n\n\nReturns\n\n\n\n\n_TermResizeNotify\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply(\n  times: U32 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntimes: \nU32\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ndispose\n\n\nfun ref dispose()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "class _TermResizeNotify"
        }, 
        {
            "location": "/term-_TermResizeNotify/#_termresizenotify", 
            "text": "class ref _TermResizeNotify is\n  SignalNotify ref", 
            "title": "_TermResizeNotify"
        }, 
        {
            "location": "/term-_TermResizeNotify/#implements", 
            "text": "SignalNotify  ref", 
            "title": "Implements"
        }, 
        {
            "location": "/term-_TermResizeNotify/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_TermResizeNotify/#create", 
            "text": "new ref create(\n  term: ANSITerm tag)\n: _TermResizeNotify ref^", 
            "title": "create"
        }, 
        {
            "location": "/term-_TermResizeNotify/#parameters", 
            "text": "term:  ANSITerm  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_TermResizeNotify/#returns", 
            "text": "_TermResizeNotify  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TermResizeNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_TermResizeNotify/#apply", 
            "text": "fun box apply(\n  times: U32 val)\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/term-_TermResizeNotify/#parameters_1", 
            "text": "times:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_TermResizeNotify/#returns_1", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TermResizeNotify/#dispose", 
            "text": "fun ref dispose()\n: None val", 
            "title": "dispose"
        }, 
        {
            "location": "/term-_TermResizeNotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/", 
            "text": "_TIOCGWINSZ\n\n\nprimitive val _TIOCGWINSZ\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _TIOCGWINSZ val^\n\n\n\n\nReturns\n\n\n\n\n_TIOCGWINSZ\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: ULong val\n\n\n\n\nReturns\n\n\n\n\nULong\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _TIOCGWINSZ val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_TIOCGWINSZ\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _TIOCGWINSZ val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_TIOCGWINSZ\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _TIOCGWINSZ"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#_tiocgwinsz", 
            "text": "primitive val _TIOCGWINSZ", 
            "title": "_TIOCGWINSZ"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#create", 
            "text": "new val create()\n: _TIOCGWINSZ val^", 
            "title": "create"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#returns", 
            "text": "_TIOCGWINSZ  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#apply", 
            "text": "fun box apply()\n: ULong val", 
            "title": "apply"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#returns_1", 
            "text": "ULong  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#eq", 
            "text": "fun box eq(\n  that: _TIOCGWINSZ val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#parameters", 
            "text": "that:  _TIOCGWINSZ  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#ne", 
            "text": "fun box ne(\n  that: _TIOCGWINSZ val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#parameters_1", 
            "text": "that:  _TIOCGWINSZ  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-_TIOCGWINSZ/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/", 
            "text": "ANSITerm\n\n\nHandles ANSI escape codes from stdin.\n\n\nactor tag ANSITerm\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  notify: ANSINotify iso,\n  source: DisposableActor tag,\n  timers: Timers tag = seq)\n: ANSITerm tag^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nANSINotify\n iso\n\n\nsource: \nDisposableActor\n tag\n\n\ntimers: \nTimers\n tag = seq\n\n\n\n\nReturns\n\n\n\n\nANSITerm\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nReceives input from stdin.\n\n\nbe apply(\n  data: Array[U8 val] iso)\n\n\n\n\nParameters\n\n\n\n\ndata: \nArray\n[\nU8\n val] iso\n\n\n\n\n\n\nprompt\n\n\nPass a prompt along to the notifier.\n\n\nbe prompt(\n  value: String val)\n\n\n\n\nParameters\n\n\n\n\nvalue: \nString\n val\n\n\n\n\n\n\nsize\n\n\nbe size()\n\n\n\n\n\n\ndispose\n\n\nStop accepting input, inform the notifier we have closed, and dispose of\nour source.\n\n\nbe dispose()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_timeout\n\n\nOur timer since receiving an ESC has expired. Send the buffered data as if\nit was not an escape sequence.\n\n\nbe _timeout()\n\n\n\n\n\n\nPrivate Functions\n\n\n_size\n\n\nPass the window size to the notifier.\n\n\nfun ref _size()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_mod\n\n\nSet the modifier bools.\n\n\nfun ref _mod()\n: (Bool val , Bool val , Bool val)\n\n\n\n\nReturns\n\n\n\n\n(\nBool\n val , \nBool\n val , \nBool\n val)\n\n\n\n\n\n\n_keypad\n\n\nAn extended key.\n\n\nfun ref _keypad()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_up\n\n\nUp arrow.\n\n\nfun ref _up()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_down\n\n\nDown arrow.\n\n\nfun ref _down()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_left\n\n\nLeft arrow.\n\n\nfun ref _left()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_right\n\n\nRight arrow.\n\n\nfun ref _right()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_delete\n\n\nDelete key.\n\n\nfun ref _delete()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_insert\n\n\nInsert key.\n\n\nfun ref _insert()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_home\n\n\nHome key.\n\n\nfun ref _home()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_end\n\n\nEnd key.\n\n\nfun ref _end()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_page_up\n\n\nPage up key.\n\n\nfun ref _page_up()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_page_down\n\n\nPage down key.\n\n\nfun ref _page_down()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_fn_key\n\n\nFunction key.\n\n\nfun ref _fn_key(\n  i: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ni: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_esc_flush\n\n\nPass a partial or unrecognised escape sequence to the notifier.\n\n\nfun ref _esc_flush()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_esc_clear\n\n\nClear the escape state.\n\n\nfun ref _esc_clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "actor ANSITerm"
        }, 
        {
            "location": "/term-ANSITerm/#ansiterm", 
            "text": "Handles ANSI escape codes from stdin.  actor tag ANSITerm", 
            "title": "ANSITerm"
        }, 
        {
            "location": "/term-ANSITerm/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-ANSITerm/#create", 
            "text": "new tag create(\n  notify: ANSINotify iso,\n  source: DisposableActor tag,\n  timers: Timers tag = seq)\n: ANSITerm tag^", 
            "title": "create"
        }, 
        {
            "location": "/term-ANSITerm/#parameters", 
            "text": "notify:  ANSINotify  iso  source:  DisposableActor  tag  timers:  Timers  tag = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSITerm/#returns", 
            "text": "ANSITerm  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/term-ANSITerm/#apply", 
            "text": "Receives input from stdin.  be apply(\n  data: Array[U8 val] iso)", 
            "title": "apply"
        }, 
        {
            "location": "/term-ANSITerm/#parameters_1", 
            "text": "data:  Array [ U8  val] iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSITerm/#prompt", 
            "text": "Pass a prompt along to the notifier.  be prompt(\n  value: String val)", 
            "title": "prompt"
        }, 
        {
            "location": "/term-ANSITerm/#parameters_2", 
            "text": "value:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSITerm/#size", 
            "text": "be size()", 
            "title": "size"
        }, 
        {
            "location": "/term-ANSITerm/#dispose", 
            "text": "Stop accepting input, inform the notifier we have closed, and dispose of\nour source.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/term-ANSITerm/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/term-ANSITerm/#_timeout", 
            "text": "Our timer since receiving an ESC has expired. Send the buffered data as if\nit was not an escape sequence.  be _timeout()", 
            "title": "_timeout"
        }, 
        {
            "location": "/term-ANSITerm/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/term-ANSITerm/#_size", 
            "text": "Pass the window size to the notifier.  fun ref _size()\n: None val", 
            "title": "_size"
        }, 
        {
            "location": "/term-ANSITerm/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_mod", 
            "text": "Set the modifier bools.  fun ref _mod()\n: (Bool val , Bool val , Bool val)", 
            "title": "_mod"
        }, 
        {
            "location": "/term-ANSITerm/#returns_2", 
            "text": "( Bool  val ,  Bool  val ,  Bool  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_keypad", 
            "text": "An extended key.  fun ref _keypad()\n: None val", 
            "title": "_keypad"
        }, 
        {
            "location": "/term-ANSITerm/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_up", 
            "text": "Up arrow.  fun ref _up()\n: None val", 
            "title": "_up"
        }, 
        {
            "location": "/term-ANSITerm/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_down", 
            "text": "Down arrow.  fun ref _down()\n: None val", 
            "title": "_down"
        }, 
        {
            "location": "/term-ANSITerm/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_left", 
            "text": "Left arrow.  fun ref _left()\n: None val", 
            "title": "_left"
        }, 
        {
            "location": "/term-ANSITerm/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_right", 
            "text": "Right arrow.  fun ref _right()\n: None val", 
            "title": "_right"
        }, 
        {
            "location": "/term-ANSITerm/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_delete", 
            "text": "Delete key.  fun ref _delete()\n: None val", 
            "title": "_delete"
        }, 
        {
            "location": "/term-ANSITerm/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_insert", 
            "text": "Insert key.  fun ref _insert()\n: None val", 
            "title": "_insert"
        }, 
        {
            "location": "/term-ANSITerm/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_home", 
            "text": "Home key.  fun ref _home()\n: None val", 
            "title": "_home"
        }, 
        {
            "location": "/term-ANSITerm/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_end", 
            "text": "End key.  fun ref _end()\n: None val", 
            "title": "_end"
        }, 
        {
            "location": "/term-ANSITerm/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_page_up", 
            "text": "Page up key.  fun ref _page_up()\n: None val", 
            "title": "_page_up"
        }, 
        {
            "location": "/term-ANSITerm/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_page_down", 
            "text": "Page down key.  fun ref _page_down()\n: None val", 
            "title": "_page_down"
        }, 
        {
            "location": "/term-ANSITerm/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_fn_key", 
            "text": "Function key.  fun ref _fn_key(\n  i: U8 val)\n: None val", 
            "title": "_fn_key"
        }, 
        {
            "location": "/term-ANSITerm/#parameters_3", 
            "text": "i:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSITerm/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_esc_flush", 
            "text": "Pass a partial or unrecognised escape sequence to the notifier.  fun ref _esc_flush()\n: None val", 
            "title": "_esc_flush"
        }, 
        {
            "location": "/term-ANSITerm/#returns_15", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSITerm/#_esc_clear", 
            "text": "Clear the escape state.  fun ref _esc_clear()\n: None val", 
            "title": "_esc_clear"
        }, 
        {
            "location": "/term-ANSITerm/#returns_16", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/", 
            "text": "ANSINotify\n\n\nReceive input from an ANSITerm.\n\n\ninterface ref ANSINotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n ref\n\n\ninput: \nU8\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nup\n\n\nfun ref up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndown\n\n\nfun ref down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nleft\n\n\nfun ref left(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nright\n\n\nfun ref right(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ndelete\n\n\nfun ref delete(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\ninsert\n\n\nfun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nhome\n\n\nfun ref home(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nend_key\n\n\nfun ref end_key(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_up\n\n\nfun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\npage_down\n\n\nfun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nfn_key\n\n\nfun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val\n\n\n\n\nParameters\n\n\n\n\ni: \nU8\n val\n\n\nctrl: \nBool\n val\n\n\nalt: \nBool\n val\n\n\nshift: \nBool\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nprompt\n\n\nfun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nterm: \nANSITerm\n ref\n\n\nvalue: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nsize\n\n\nfun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nrows: \nU16\n val\n\n\ncols: \nU16\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nclosed\n\n\nfun ref closed()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface ANSINotify"
        }, 
        {
            "location": "/term-ANSINotify/#ansinotify", 
            "text": "Receive input from an ANSITerm.  interface ref ANSINotify", 
            "title": "ANSINotify"
        }, 
        {
            "location": "/term-ANSINotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-ANSINotify/#apply", 
            "text": "fun ref apply(\n  term: ANSITerm ref,\n  input: U8 val)\n: None val", 
            "title": "apply"
        }, 
        {
            "location": "/term-ANSINotify/#parameters", 
            "text": "term:  ANSITerm  ref  input:  U8  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#up", 
            "text": "fun ref up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "up"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_1", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#down", 
            "text": "fun ref down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "down"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_2", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#left", 
            "text": "fun ref left(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "left"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_3", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_3", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#right", 
            "text": "fun ref right(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "right"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_4", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#delete", 
            "text": "fun ref delete(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "delete"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_5", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_5", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#insert", 
            "text": "fun ref insert(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "insert"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_6", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_6", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#home", 
            "text": "fun ref home(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "home"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_7", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_7", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#end_key", 
            "text": "fun ref end_key(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "end_key"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_8", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_8", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#page_up", 
            "text": "fun ref page_up(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "page_up"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_9", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_9", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#page_down", 
            "text": "fun ref page_down(\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "page_down"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_10", 
            "text": "ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_10", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#fn_key", 
            "text": "fun ref fn_key(\n  i: U8 val,\n  ctrl: Bool val,\n  alt: Bool val,\n  shift: Bool val)\n: None val", 
            "title": "fn_key"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_11", 
            "text": "i:  U8  val  ctrl:  Bool  val  alt:  Bool  val  shift:  Bool  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_11", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#prompt", 
            "text": "fun ref prompt(\n  term: ANSITerm ref,\n  value: String val)\n: None val", 
            "title": "prompt"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_12", 
            "text": "term:  ANSITerm  ref  value:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_12", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#size", 
            "text": "fun ref size(\n  rows: U16 val,\n  cols: U16 val)\n: None val", 
            "title": "size"
        }, 
        {
            "location": "/term-ANSINotify/#parameters_13", 
            "text": "rows:  U16  val  cols:  U16  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSINotify/#returns_13", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSINotify/#closed", 
            "text": "fun ref closed()\n: None val", 
            "title": "closed"
        }, 
        {
            "location": "/term-ANSINotify/#returns_14", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/", 
            "text": "ANSI\n\n\nThese strings can be embedded in text when writing to a StdStream to create\na text-based UI.\n\n\nprimitive val ANSI\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: ANSI val^\n\n\n\n\nReturns\n\n\n\n\nANSI\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nup\n\n\nMove the cursor up n lines. 0 is the same as 1.\n\n\nfun box up(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ndown\n\n\nMove the cursor down n lines. 0 is the same as 1.\n\n\nfun box down(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nright\n\n\nMove the cursor right n columns. 0 is the same as 1.\n\n\nfun box right(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nleft\n\n\nMove the cursor left n columns. 0 is the same as 1.\n\n\nfun box left(\n  n: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nn: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ncursor\n\n\nMove the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.\n\n\nfun box cursor(\n  x: U32 val = seq,\n  y: U32 val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nx: \nU32\n val = seq\n\n\ny: \nU32\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nclear\n\n\nClear the screen and move the cursor to the top left corner.\n\n\nfun box clear()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nerase\n\n\nErases everything to the left of the cursor on the line the cursor is on.\n\n\nfun box erase()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nreset\n\n\nResets all colours and text styles to the default.\n\n\nfun box reset()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbold\n\n\nBold text. Does nothing on Windows.\n\n\nfun box bold(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nunderline\n\n\nUnderlined text. Does nothing on Windows.\n\n\nfun box underline(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nblink\n\n\nBlinking text. Does nothing on Windows.\n\n\nfun box blink(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nreverse\n\n\nSwap foreground and background colour.\n\n\nfun box reverse(\n  state: Bool val = seq)\n: String val\n\n\n\n\nParameters\n\n\n\n\nstate: \nBool\n val = seq\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nblack\n\n\nBlack text.\n\n\nfun box black()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nred\n\n\nRed text.\n\n\nfun box red()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ngreen\n\n\nGreen text.\n\n\nfun box green()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nyellow\n\n\nYellow text.\n\n\nfun box yellow()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nblue\n\n\nBlue text.\n\n\nfun box blue()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nmagenta\n\n\nMagenta text.\n\n\nfun box magenta()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ncyan\n\n\nCyan text.\n\n\nfun box cyan()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ngrey\n\n\nGrey text.\n\n\nfun box grey()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nwhite\n\n\nWhite text.\n\n\nfun box white()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_red\n\n\nBright red text.\n\n\nfun box bright_red()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_green\n\n\nBright green text.\n\n\nfun box bright_green()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_yellow\n\n\nBright yellow text.\n\n\nfun box bright_yellow()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_blue\n\n\nBright blue text.\n\n\nfun box bright_blue()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_magenta\n\n\nBright magenta text.\n\n\nfun box bright_magenta()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_cyan\n\n\nBright cyan text.\n\n\nfun box bright_cyan()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_grey\n\n\nBright grey text.\n\n\nfun box bright_grey()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nblack_bg\n\n\nBlack background.\n\n\nfun box black_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nred_bg\n\n\nRed background.\n\n\nfun box red_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ngreen_bg\n\n\nGreen background.\n\n\nfun box green_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nyellow_bg\n\n\nYellow background.\n\n\nfun box yellow_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nblue_bg\n\n\nBlue background.\n\n\nfun box blue_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nmagenta_bg\n\n\nMagenta background.\n\n\nfun box magenta_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ncyan_bg\n\n\nCyan background.\n\n\nfun box cyan_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\ngrey_bg\n\n\nGrey background.\n\n\nfun box grey_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nwhite_bg\n\n\nWhite background.\n\n\nfun box white_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_red_bg\n\n\nBright red background.\n\n\nfun box bright_red_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_green_bg\n\n\nBright green background.\n\n\nfun box bright_green_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_yellow_bg\n\n\nBright yellow background.\n\n\nfun box bright_yellow_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_blue_bg\n\n\nBright blue background.\n\n\nfun box bright_blue_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_magenta_bg\n\n\nBright magenta background.\n\n\nfun box bright_magenta_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_cyan_bg\n\n\nBright cyan background.\n\n\nfun box bright_cyan_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\nbright_grey_bg\n\n\nBright grey background.\n\n\nfun box bright_grey_bg()\n: String val\n\n\n\n\nReturns\n\n\n\n\nString\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: ANSI val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nANSI\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: ANSI val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nANSI\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive ANSI"
        }, 
        {
            "location": "/term-ANSI/#ansi", 
            "text": "These strings can be embedded in text when writing to a StdStream to create\na text-based UI.  primitive val ANSI", 
            "title": "ANSI"
        }, 
        {
            "location": "/term-ANSI/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/term-ANSI/#create", 
            "text": "new val create()\n: ANSI val^", 
            "title": "create"
        }, 
        {
            "location": "/term-ANSI/#returns", 
            "text": "ANSI  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/term-ANSI/#up", 
            "text": "Move the cursor up n lines. 0 is the same as 1.  fun box up(\n  n: U32 val = seq)\n: String val", 
            "title": "up"
        }, 
        {
            "location": "/term-ANSI/#parameters", 
            "text": "n:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_1", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#down", 
            "text": "Move the cursor down n lines. 0 is the same as 1.  fun box down(\n  n: U32 val = seq)\n: String val", 
            "title": "down"
        }, 
        {
            "location": "/term-ANSI/#parameters_1", 
            "text": "n:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_2", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#right", 
            "text": "Move the cursor right n columns. 0 is the same as 1.  fun box right(\n  n: U32 val = seq)\n: String val", 
            "title": "right"
        }, 
        {
            "location": "/term-ANSI/#parameters_2", 
            "text": "n:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#left", 
            "text": "Move the cursor left n columns. 0 is the same as 1.  fun box left(\n  n: U32 val = seq)\n: String val", 
            "title": "left"
        }, 
        {
            "location": "/term-ANSI/#parameters_3", 
            "text": "n:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_4", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#cursor", 
            "text": "Move the cursor to line y, column x. 0 is the same as 1. This indexes from\nthe top left corner of the screen.  fun box cursor(\n  x: U32 val = seq,\n  y: U32 val = seq)\n: String val", 
            "title": "cursor"
        }, 
        {
            "location": "/term-ANSI/#parameters_4", 
            "text": "x:  U32  val = seq  y:  U32  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_5", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#clear", 
            "text": "Clear the screen and move the cursor to the top left corner.  fun box clear()\n: String val", 
            "title": "clear"
        }, 
        {
            "location": "/term-ANSI/#returns_6", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#erase", 
            "text": "Erases everything to the left of the cursor on the line the cursor is on.  fun box erase()\n: String val", 
            "title": "erase"
        }, 
        {
            "location": "/term-ANSI/#returns_7", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#reset", 
            "text": "Resets all colours and text styles to the default.  fun box reset()\n: String val", 
            "title": "reset"
        }, 
        {
            "location": "/term-ANSI/#returns_8", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bold", 
            "text": "Bold text. Does nothing on Windows.  fun box bold(\n  state: Bool val = seq)\n: String val", 
            "title": "bold"
        }, 
        {
            "location": "/term-ANSI/#parameters_5", 
            "text": "state:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_9", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#underline", 
            "text": "Underlined text. Does nothing on Windows.  fun box underline(\n  state: Bool val = seq)\n: String val", 
            "title": "underline"
        }, 
        {
            "location": "/term-ANSI/#parameters_6", 
            "text": "state:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_10", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#blink", 
            "text": "Blinking text. Does nothing on Windows.  fun box blink(\n  state: Bool val = seq)\n: String val", 
            "title": "blink"
        }, 
        {
            "location": "/term-ANSI/#parameters_7", 
            "text": "state:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_11", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#reverse", 
            "text": "Swap foreground and background colour.  fun box reverse(\n  state: Bool val = seq)\n: String val", 
            "title": "reverse"
        }, 
        {
            "location": "/term-ANSI/#parameters_8", 
            "text": "state:  Bool  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_12", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#black", 
            "text": "Black text.  fun box black()\n: String val", 
            "title": "black"
        }, 
        {
            "location": "/term-ANSI/#returns_13", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#red", 
            "text": "Red text.  fun box red()\n: String val", 
            "title": "red"
        }, 
        {
            "location": "/term-ANSI/#returns_14", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#green", 
            "text": "Green text.  fun box green()\n: String val", 
            "title": "green"
        }, 
        {
            "location": "/term-ANSI/#returns_15", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#yellow", 
            "text": "Yellow text.  fun box yellow()\n: String val", 
            "title": "yellow"
        }, 
        {
            "location": "/term-ANSI/#returns_16", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#blue", 
            "text": "Blue text.  fun box blue()\n: String val", 
            "title": "blue"
        }, 
        {
            "location": "/term-ANSI/#returns_17", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#magenta", 
            "text": "Magenta text.  fun box magenta()\n: String val", 
            "title": "magenta"
        }, 
        {
            "location": "/term-ANSI/#returns_18", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#cyan", 
            "text": "Cyan text.  fun box cyan()\n: String val", 
            "title": "cyan"
        }, 
        {
            "location": "/term-ANSI/#returns_19", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#grey", 
            "text": "Grey text.  fun box grey()\n: String val", 
            "title": "grey"
        }, 
        {
            "location": "/term-ANSI/#returns_20", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#white", 
            "text": "White text.  fun box white()\n: String val", 
            "title": "white"
        }, 
        {
            "location": "/term-ANSI/#returns_21", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_red", 
            "text": "Bright red text.  fun box bright_red()\n: String val", 
            "title": "bright_red"
        }, 
        {
            "location": "/term-ANSI/#returns_22", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_green", 
            "text": "Bright green text.  fun box bright_green()\n: String val", 
            "title": "bright_green"
        }, 
        {
            "location": "/term-ANSI/#returns_23", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_yellow", 
            "text": "Bright yellow text.  fun box bright_yellow()\n: String val", 
            "title": "bright_yellow"
        }, 
        {
            "location": "/term-ANSI/#returns_24", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_blue", 
            "text": "Bright blue text.  fun box bright_blue()\n: String val", 
            "title": "bright_blue"
        }, 
        {
            "location": "/term-ANSI/#returns_25", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_magenta", 
            "text": "Bright magenta text.  fun box bright_magenta()\n: String val", 
            "title": "bright_magenta"
        }, 
        {
            "location": "/term-ANSI/#returns_26", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_cyan", 
            "text": "Bright cyan text.  fun box bright_cyan()\n: String val", 
            "title": "bright_cyan"
        }, 
        {
            "location": "/term-ANSI/#returns_27", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_grey", 
            "text": "Bright grey text.  fun box bright_grey()\n: String val", 
            "title": "bright_grey"
        }, 
        {
            "location": "/term-ANSI/#returns_28", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#black_bg", 
            "text": "Black background.  fun box black_bg()\n: String val", 
            "title": "black_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_29", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#red_bg", 
            "text": "Red background.  fun box red_bg()\n: String val", 
            "title": "red_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_30", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#green_bg", 
            "text": "Green background.  fun box green_bg()\n: String val", 
            "title": "green_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_31", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#yellow_bg", 
            "text": "Yellow background.  fun box yellow_bg()\n: String val", 
            "title": "yellow_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_32", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#blue_bg", 
            "text": "Blue background.  fun box blue_bg()\n: String val", 
            "title": "blue_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_33", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#magenta_bg", 
            "text": "Magenta background.  fun box magenta_bg()\n: String val", 
            "title": "magenta_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_34", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#cyan_bg", 
            "text": "Cyan background.  fun box cyan_bg()\n: String val", 
            "title": "cyan_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_35", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#grey_bg", 
            "text": "Grey background.  fun box grey_bg()\n: String val", 
            "title": "grey_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_36", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#white_bg", 
            "text": "White background.  fun box white_bg()\n: String val", 
            "title": "white_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_37", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_red_bg", 
            "text": "Bright red background.  fun box bright_red_bg()\n: String val", 
            "title": "bright_red_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_38", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_green_bg", 
            "text": "Bright green background.  fun box bright_green_bg()\n: String val", 
            "title": "bright_green_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_39", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_yellow_bg", 
            "text": "Bright yellow background.  fun box bright_yellow_bg()\n: String val", 
            "title": "bright_yellow_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_40", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_blue_bg", 
            "text": "Bright blue background.  fun box bright_blue_bg()\n: String val", 
            "title": "bright_blue_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_41", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_magenta_bg", 
            "text": "Bright magenta background.  fun box bright_magenta_bg()\n: String val", 
            "title": "bright_magenta_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_42", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_cyan_bg", 
            "text": "Bright cyan background.  fun box bright_cyan_bg()\n: String val", 
            "title": "bright_cyan_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_43", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#bright_grey_bg", 
            "text": "Bright grey background.  fun box bright_grey_bg()\n: String val", 
            "title": "bright_grey_bg"
        }, 
        {
            "location": "/term-ANSI/#returns_44", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#eq", 
            "text": "fun box eq(\n  that: ANSI val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/term-ANSI/#parameters_9", 
            "text": "that:  ANSI  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_45", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/term-ANSI/#ne", 
            "text": "fun box ne(\n  that: ANSI val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/term-ANSI/#parameters_10", 
            "text": "that:  ANSI  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/term-ANSI/#returns_46", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time--index/", 
            "text": "Time Package\n\n\nThe Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.\n\n\nPublic Types\n\n\n\n\nactor Timers\n\n\ninterface TimerNotify\n\n\nclass Timer\n\n\nprimitive Time\n\n\nprimitive Nanos\n\n\nclass Date\n\n\n\n\nPrivate Types\n\n\n\n\ntype _Clock\n\n\nprimitive _ClockRealtime\n\n\nprimitive _ClockMonotonic\n\n\nclass _TimingWheel", 
            "title": "Package"
        }, 
        {
            "location": "/time--index/#time-package", 
            "text": "The Time Package provides classes and methods for timing operations,\ndealing with dates and times, and scheduling tasks.", 
            "title": "Time Package"
        }, 
        {
            "location": "/time--index/#public-types", 
            "text": "actor Timers  interface TimerNotify  class Timer  primitive Time  primitive Nanos  class Date", 
            "title": "Public Types"
        }, 
        {
            "location": "/time--index/#private-types", 
            "text": "type _Clock  primitive _ClockRealtime  primitive _ClockMonotonic  class _TimingWheel", 
            "title": "Private Types"
        }, 
        {
            "location": "/time-Timers/", 
            "text": "Timers\n\n\nA hierarchical set of timing wheels.\n\n\nactor tag Timers\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew tag create(\n  slop: USize val = seq)\n: Timers tag^\n\n\n\n\nParameters\n\n\n\n\nslop: \nUSize\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTimers\n tag^\n\n\n\n\n\n\nPublic Behaviours\n\n\napply\n\n\nSets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.\n\n\nbe apply(\n  timer: Timer iso)\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n iso\n\n\n\n\n\n\ncancel\n\n\nCancels a timer.\n\n\nbe cancel(\n  timer: Timer tag)\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n tag\n\n\n\n\n\n\ndispose\n\n\nDipose of this set of timing wheels.\n\n\nbe dispose()\n\n\n\n\n\n\nPrivate Behaviours\n\n\n_event_notify\n\n\nWhen the event fires, advance the timing wheels.\n\n\nbe _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)\n\n\n\n\nParameters\n\n\n\n\nevent: \nPointer\n[\nAsioEvent\n val] tag\n\n\nflags: \nU32\n val\n\n\narg: \nU32\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_advance\n\n\nUpdate the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.\n\n\nfun ref _advance()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_fire\n\n\nFire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.\n\n\nfun ref _fire(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_next\n\n\nReturn the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.\n\n\nfun box _next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_set_time\n\n\nSet the current time with precision reduced by the slop bits. Return the\nelapsed time.\n\n\nfun ref _set_time()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_get_wheel\n\n\nGet the hierarchical timing wheel for the given time until expiration.\n\n\nfun ref _get_wheel(\n  rem: U64 val)\n: _TimingWheel ref ?\n\n\n\n\nParameters\n\n\n\n\nrem: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\n_TimingWheel\n ref ?\n\n\n\n\n\n\n_expiration_max\n\n\nGet the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.\n\n\nfun tag _expiration_max()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_wheels\n\n\nfun tag _wheels()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_bits\n\n\nfun tag _bits()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val", 
            "title": "actor Timers"
        }, 
        {
            "location": "/time-Timers/#timers", 
            "text": "A hierarchical set of timing wheels.  actor tag Timers", 
            "title": "Timers"
        }, 
        {
            "location": "/time-Timers/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Timers/#create", 
            "text": "new tag create(\n  slop: USize val = seq)\n: Timers tag^", 
            "title": "create"
        }, 
        {
            "location": "/time-Timers/#parameters", 
            "text": "slop:  USize  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timers/#returns", 
            "text": "Timers  tag^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#public-behaviours", 
            "text": "", 
            "title": "Public Behaviours"
        }, 
        {
            "location": "/time-Timers/#apply", 
            "text": "Sets a timer. Fire it if need be, schedule it on the right timing wheel,\nthen rearm the timer.  be apply(\n  timer: Timer iso)", 
            "title": "apply"
        }, 
        {
            "location": "/time-Timers/#parameters_1", 
            "text": "timer:  Timer  iso", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timers/#cancel", 
            "text": "Cancels a timer.  be cancel(\n  timer: Timer tag)", 
            "title": "cancel"
        }, 
        {
            "location": "/time-Timers/#parameters_2", 
            "text": "timer:  Timer  tag", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timers/#dispose", 
            "text": "Dipose of this set of timing wheels.  be dispose()", 
            "title": "dispose"
        }, 
        {
            "location": "/time-Timers/#private-behaviours", 
            "text": "", 
            "title": "Private Behaviours"
        }, 
        {
            "location": "/time-Timers/#_event_notify", 
            "text": "When the event fires, advance the timing wheels.  be _event_notify(\n  event: Pointer[AsioEvent val] tag,\n  flags: U32 val,\n  arg: U32 val)", 
            "title": "_event_notify"
        }, 
        {
            "location": "/time-Timers/#parameters_3", 
            "text": "event:  Pointer [ AsioEvent  val] tag  flags:  U32  val  arg:  U32  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timers/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-Timers/#_advance", 
            "text": "Update the current time, process all the timing wheels, and set the event\nfor the next time we need to advance.  fun ref _advance()\n: None val", 
            "title": "_advance"
        }, 
        {
            "location": "/time-Timers/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_fire", 
            "text": "Fire a timer if necessary, then schedule it on the correct timing wheel\nbased on how long it is until it expires.  fun ref _fire(\n  timer: Timer ref)\n: None val", 
            "title": "_fire"
        }, 
        {
            "location": "/time-Timers/#parameters_4", 
            "text": "timer:  Timer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timers/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_next", 
            "text": "Return the next time at which the timing wheels should be advanced. This is\nadjusted for slop, so it yields nanoseconds. If no events are pending, this\nreturns -1.  fun box _next()\n: U64 val", 
            "title": "_next"
        }, 
        {
            "location": "/time-Timers/#returns_3", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_set_time", 
            "text": "Set the current time with precision reduced by the slop bits. Return the\nelapsed time.  fun ref _set_time()\n: U64 val", 
            "title": "_set_time"
        }, 
        {
            "location": "/time-Timers/#returns_4", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_get_wheel", 
            "text": "Get the hierarchical timing wheel for the given time until expiration.  fun ref _get_wheel(\n  rem: U64 val)\n: _TimingWheel ref ?", 
            "title": "_get_wheel"
        }, 
        {
            "location": "/time-Timers/#parameters_5", 
            "text": "rem:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timers/#returns_5", 
            "text": "_TimingWheel  ref ?", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_expiration_max", 
            "text": "Get the maximum time the timing wheels cover. Anything beyond this is\nscheduled on the last timing wheel.  fun tag _expiration_max()\n: U64 val", 
            "title": "_expiration_max"
        }, 
        {
            "location": "/time-Timers/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_wheels", 
            "text": "fun tag _wheels()\n: USize val", 
            "title": "_wheels"
        }, 
        {
            "location": "/time-Timers/#returns_7", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timers/#_bits", 
            "text": "fun tag _bits()\n: USize val", 
            "title": "_bits"
        }, 
        {
            "location": "/time-Timers/#returns_8", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-TimerNotify/", 
            "text": "TimerNotify\n\n\nNotifications for timer.\n\n\ninterface ref TimerNotify\n\n\n\n\nPublic Functions\n\n\napply\n\n\nCalled with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).\n\n\nfun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\ncount: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\ncancel\n\n\nCalled if the timer is cancelled. This is also called if the notifier\nreturns false.\n\n\nfun ref cancel(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val", 
            "title": "interface TimerNotify"
        }, 
        {
            "location": "/time-TimerNotify/#timernotify", 
            "text": "Notifications for timer.  interface ref TimerNotify", 
            "title": "TimerNotify"
        }, 
        {
            "location": "/time-TimerNotify/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-TimerNotify/#apply", 
            "text": "Called with the the number of times the timer has fired since this was last\ncalled. Return true to reschedule the timer (if it has an interval), or\nfalse to cancel the timer (even if it has an interval).  fun ref apply(\n  timer: Timer ref,\n  count: U64 val)\n: Bool val", 
            "title": "apply"
        }, 
        {
            "location": "/time-TimerNotify/#parameters", 
            "text": "timer:  Timer  ref  count:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-TimerNotify/#returns", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-TimerNotify/#cancel", 
            "text": "Called if the timer is cancelled. This is also called if the notifier\nreturns false.  fun ref cancel(\n  timer: Timer ref)\n: None val", 
            "title": "cancel"
        }, 
        {
            "location": "/time-TimerNotify/#parameters_1", 
            "text": "timer:  Timer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-TimerNotify/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/", 
            "text": "Timer\n\n\nThe \nTimer\n class represents a timer that fires after an expiration\ntime, and then fires at an interval. When a \nTimer\n fires, it calls\nthe \napply\n method of the \nTimerNotify\n object that was passed to it\nwhen it was created.\n\n\nThe following example waits 5 seconds and then fires every 2\nseconds, and when it fires the \nTimerNotify\n object prints how many\ntimes it has been called:\n\n\nuse \ntime\n\n\nactor Main\n  new create(env: Env) =\n\n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n  new iso create(env: Env) =\n\n    _env = env\n  fun ref apply(timer: Timer, count: U64): Bool =\n\n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true\n\n\n\n\nclass ref Timer\n\n\n\n\nConstructors\n\n\ncreate\n\n\nCreate a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.\n\n\nnew iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = seq)\n: Timer iso^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTimerNotify\n iso\n\n\nexpiration: \nU64\n val\n\n\ninterval: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTimer\n iso^\n\n\n\n\n\n\nabs\n\n\nCreates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.\n\n\nnew ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = seq)\n: Timer ref^\n\n\n\n\nParameters\n\n\n\n\nnotify: \nTimerNotify\n ref\n\n\nexpiration: (\nI64\n val , \nI64\n val)\n\n\ninterval: \nU64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nTimer\n ref^\n\n\n\n\n\n\nPrivate Functions\n\n\n_cancel\n\n\nRemove the timer from any list.\n\n\nfun ref _cancel()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_get_node\n\n\nReturns the list node pointing to the timer. Used to schedule the timer in\na queue.\n\n\nfun ref _get_node()\n: ListNode[Timer ref] ref\n\n\n\n\nReturns\n\n\n\n\nListNode\n[\nTimer\n ref] ref\n\n\n\n\n\n\n_slop\n\n\nApply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.\n\n\nfun ref _slop(\n  bits: USize val)\n: None val\n\n\n\n\nParameters\n\n\n\n\nbits: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\n_fire\n\n\nA timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.\n\n\nfun ref _fire(\n  current: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\ncurrent: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\n_next\n\n\nReturns the next expiration time.\n\n\nfun box _next()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_abs_expiration_time\n\n\nConverts a wall-clock adjusted system time to absolute expiration time\n\n\nfun tag _abs_expiration_time(\n  wall: (I64 val , I64 val))\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nwall: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "class Timer"
        }, 
        {
            "location": "/time-Timer/#timer", 
            "text": "The  Timer  class represents a timer that fires after an expiration\ntime, and then fires at an interval. When a  Timer  fires, it calls\nthe  apply  method of the  TimerNotify  object that was passed to it\nwhen it was created.  The following example waits 5 seconds and then fires every 2\nseconds, and when it fires the  TimerNotify  object prints how many\ntimes it has been called:  use  time \n\nactor Main\n  new create(env: Env) = \n    let timers = Timers\n    let timer = Timer(Notify(env), 5_000_000_000, 2_000_000_000)\n    timers(consume timer)\n\nclass Notify is TimerNotify\n  let _env: Env\n  var _counter: U32 = 0\n  new iso create(env: Env) = \n    _env = env\n  fun ref apply(timer: Timer, count: U64): Bool = \n    _env.out.print(_counter.string())\n    _counter = _counter + 1\n    true  class ref Timer", 
            "title": "Timer"
        }, 
        {
            "location": "/time-Timer/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Timer/#create", 
            "text": "Create a new timer. The expiration time should be a nanosecond count\nuntil the first expiration. The interval should also be in nanoseconds.  new iso create(\n  notify: TimerNotify iso,\n  expiration: U64 val,\n  interval: U64 val = seq)\n: Timer iso^", 
            "title": "create"
        }, 
        {
            "location": "/time-Timer/#parameters", 
            "text": "notify:  TimerNotify  iso  expiration:  U64  val  interval:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timer/#returns", 
            "text": "Timer  iso^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#abs", 
            "text": "Creates a new timer with an absolute expiration time rather than a relative\ntime. The expiration time is wall-clock adjusted system time.  new ref abs(\n  notify: TimerNotify ref,\n  expiration: (I64 val , I64 val),\n  interval: U64 val = seq)\n: Timer ref^", 
            "title": "abs"
        }, 
        {
            "location": "/time-Timer/#parameters_1", 
            "text": "notify:  TimerNotify  ref  expiration: ( I64  val ,  I64  val)  interval:  U64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timer/#returns_1", 
            "text": "Timer  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-Timer/#_cancel", 
            "text": "Remove the timer from any list.  fun ref _cancel()\n: None val", 
            "title": "_cancel"
        }, 
        {
            "location": "/time-Timer/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#_get_node", 
            "text": "Returns the list node pointing to the timer. Used to schedule the timer in\na queue.  fun ref _get_node()\n: ListNode[Timer ref] ref", 
            "title": "_get_node"
        }, 
        {
            "location": "/time-Timer/#returns_3", 
            "text": "ListNode [ Timer  ref] ref", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#_slop", 
            "text": "Apply slop bits to the expiration time and interval. This reduces the\nprecision by the given number of bits, effectively quantizing time.  fun ref _slop(\n  bits: USize val)\n: None val", 
            "title": "_slop"
        }, 
        {
            "location": "/time-Timer/#parameters_2", 
            "text": "bits:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timer/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#_fire", 
            "text": "A timer is fired if its expiration time is in the past. The notifier is\ncalled with a count based on the elapsed time since expiration and the\ntimer interval. The expiration time is set to the next expiration. Returns\ntrue if the timer should be rescheduled, false otherwise.  fun ref _fire(\n  current: U64 val)\n: Bool val", 
            "title": "_fire"
        }, 
        {
            "location": "/time-Timer/#parameters_3", 
            "text": "current:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timer/#returns_5", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#_next", 
            "text": "Returns the next expiration time.  fun box _next()\n: U64 val", 
            "title": "_next"
        }, 
        {
            "location": "/time-Timer/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Timer/#_abs_expiration_time", 
            "text": "Converts a wall-clock adjusted system time to absolute expiration time  fun tag _abs_expiration_time(\n  wall: (I64 val , I64 val))\n: U64 val", 
            "title": "_abs_expiration_time"
        }, 
        {
            "location": "/time-Timer/#parameters_4", 
            "text": "wall: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Timer/#returns_7", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_Clock/", 
            "text": "_Clock\n\n\ntype _Clock is\n  (_ClockRealtime val | _ClockMonotonic val)\n\n\n\n\nType Alias For\n\n\n\n\n(\n_ClockRealtime\n val | \n_ClockMonotonic\n val)", 
            "title": "type _Clock"
        }, 
        {
            "location": "/time-_Clock/#_clock", 
            "text": "type _Clock is\n  (_ClockRealtime val | _ClockMonotonic val)", 
            "title": "_Clock"
        }, 
        {
            "location": "/time-_Clock/#type-alias-for", 
            "text": "( _ClockRealtime  val |  _ClockMonotonic  val)", 
            "title": "Type Alias For"
        }, 
        {
            "location": "/time-_ClockRealtime/", 
            "text": "_ClockRealtime\n\n\nprimitive val _ClockRealtime\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ClockRealtime val^\n\n\n\n\nReturns\n\n\n\n\n_ClockRealtime\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ClockRealtime val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockRealtime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ClockRealtime val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockRealtime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ClockRealtime"
        }, 
        {
            "location": "/time-_ClockRealtime/#_clockrealtime", 
            "text": "primitive val _ClockRealtime", 
            "title": "_ClockRealtime"
        }, 
        {
            "location": "/time-_ClockRealtime/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-_ClockRealtime/#create", 
            "text": "new val create()\n: _ClockRealtime val^", 
            "title": "create"
        }, 
        {
            "location": "/time-_ClockRealtime/#returns", 
            "text": "_ClockRealtime  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockRealtime/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-_ClockRealtime/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/time-_ClockRealtime/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockRealtime/#eq", 
            "text": "fun box eq(\n  that: _ClockRealtime val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/time-_ClockRealtime/#parameters", 
            "text": "that:  _ClockRealtime  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_ClockRealtime/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockRealtime/#ne", 
            "text": "fun box ne(\n  that: _ClockRealtime val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/time-_ClockRealtime/#parameters_1", 
            "text": "that:  _ClockRealtime  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_ClockRealtime/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockMonotonic/", 
            "text": "_ClockMonotonic\n\n\nprimitive val _ClockMonotonic\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: _ClockMonotonic val^\n\n\n\n\nReturns\n\n\n\n\n_ClockMonotonic\n val^\n\n\n\n\n\n\nPublic Functions\n\n\napply\n\n\nfun box apply()\n: U32 val\n\n\n\n\nReturns\n\n\n\n\nU32\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: _ClockMonotonic val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockMonotonic\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: _ClockMonotonic val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \n_ClockMonotonic\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive _ClockMonotonic"
        }, 
        {
            "location": "/time-_ClockMonotonic/#_clockmonotonic", 
            "text": "primitive val _ClockMonotonic", 
            "title": "_ClockMonotonic"
        }, 
        {
            "location": "/time-_ClockMonotonic/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-_ClockMonotonic/#create", 
            "text": "new val create()\n: _ClockMonotonic val^", 
            "title": "create"
        }, 
        {
            "location": "/time-_ClockMonotonic/#returns", 
            "text": "_ClockMonotonic  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockMonotonic/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-_ClockMonotonic/#apply", 
            "text": "fun box apply()\n: U32 val", 
            "title": "apply"
        }, 
        {
            "location": "/time-_ClockMonotonic/#returns_1", 
            "text": "U32  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockMonotonic/#eq", 
            "text": "fun box eq(\n  that: _ClockMonotonic val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/time-_ClockMonotonic/#parameters", 
            "text": "that:  _ClockMonotonic  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_ClockMonotonic/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_ClockMonotonic/#ne", 
            "text": "fun box ne(\n  that: _ClockMonotonic val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/time-_ClockMonotonic/#parameters_1", 
            "text": "that:  _ClockMonotonic  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_ClockMonotonic/#returns_3", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/", 
            "text": "Time\n\n\nA collection of ways to fetch the current time.\n\n\nprimitive val Time\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Time val^\n\n\n\n\nReturns\n\n\n\n\nTime\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nnow\n\n\nThe wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)\n\n\nfun box now()\n: (I64 val , I64 val)\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\nseconds\n\n\nThe wall-clock adjusted system time.\n\n\nfun box seconds()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nmillis\n\n\nMonotonic unadjusted milliseconds.\n\n\nfun box millis()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nmicros\n\n\nMonotonic unadjusted microseconds.\n\n\nfun box micros()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nnanos\n\n\nMonotonic unadjusted nanoseconds.\n\n\nfun box nanos()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\ncycles\n\n\nProcessor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.\n\n\nfun box cycles()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_begin\n\n\nGet a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.\n\n\nfun box perf_begin()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nperf_end\n\n\nGet a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.\n\n\nfun box perf_end()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Time val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nTime\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_clock_gettime\n\n\nReturn a clock time on linux and bsd.\n\n\nfun box _clock_gettime(\n  clock: (_ClockRealtime val | _ClockMonotonic val))\n: (I64 val , I64 val)\n\n\n\n\nParameters\n\n\n\n\nclock: (\n_ClockRealtime\n val | \n_ClockMonotonic\n val)\n\n\n\n\nReturns\n\n\n\n\n(\nI64\n val , \nI64\n val)\n\n\n\n\n\n\n_query_performance_counter\n\n\nReturn QPC and QPF.\n\n\nfun box _query_performance_counter()\n: (U64 val , U64 val)\n\n\n\n\nReturns\n\n\n\n\n(\nU64\n val , \nU64\n val)", 
            "title": "primitive Time"
        }, 
        {
            "location": "/time-Time/#time", 
            "text": "A collection of ways to fetch the current time.  primitive val Time", 
            "title": "Time"
        }, 
        {
            "location": "/time-Time/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Time/#create", 
            "text": "new val create()\n: Time val^", 
            "title": "create"
        }, 
        {
            "location": "/time-Time/#returns", 
            "text": "Time  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-Time/#now", 
            "text": "The wall-clock adjusted system time with nanoseconds.\nReturn: (seconds, nanoseconds)  fun box now()\n: (I64 val , I64 val)", 
            "title": "now"
        }, 
        {
            "location": "/time-Time/#returns_1", 
            "text": "( I64  val ,  I64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#seconds", 
            "text": "The wall-clock adjusted system time.  fun box seconds()\n: I64 val", 
            "title": "seconds"
        }, 
        {
            "location": "/time-Time/#returns_2", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#millis", 
            "text": "Monotonic unadjusted milliseconds.  fun box millis()\n: U64 val", 
            "title": "millis"
        }, 
        {
            "location": "/time-Time/#returns_3", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#micros", 
            "text": "Monotonic unadjusted microseconds.  fun box micros()\n: U64 val", 
            "title": "micros"
        }, 
        {
            "location": "/time-Time/#returns_4", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#nanos", 
            "text": "Monotonic unadjusted nanoseconds.  fun box nanos()\n: U64 val", 
            "title": "nanos"
        }, 
        {
            "location": "/time-Time/#returns_5", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#cycles", 
            "text": "Processor cycle count. Don't use this for performance timing, as it does\nnot control for out-of-order execution.  fun box cycles()\n: U64 val", 
            "title": "cycles"
        }, 
        {
            "location": "/time-Time/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#perf_begin", 
            "text": "Get a cycle count for beginning a performance testing block. This will\nwill prevent instructions from before this call leaking into the block and\ninstructions after this call being executed earlier.  fun box perf_begin()\n: U64 val", 
            "title": "perf_begin"
        }, 
        {
            "location": "/time-Time/#returns_7", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#perf_end", 
            "text": "Get a cycle count for ending a performance testing block. This will\nwill prevent instructions from after this call leaking into the block and\ninstructions before this call being executed later.  fun box perf_end()\n: U64 val", 
            "title": "perf_end"
        }, 
        {
            "location": "/time-Time/#returns_8", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#eq", 
            "text": "fun box eq(\n  that: Time val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/time-Time/#parameters", 
            "text": "that:  Time  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Time/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#ne", 
            "text": "fun box ne(\n  that: Time val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/time-Time/#parameters_1", 
            "text": "that:  Time  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Time/#returns_10", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-Time/#_clock_gettime", 
            "text": "Return a clock time on linux and bsd.  fun box _clock_gettime(\n  clock: (_ClockRealtime val | _ClockMonotonic val))\n: (I64 val , I64 val)", 
            "title": "_clock_gettime"
        }, 
        {
            "location": "/time-Time/#parameters_2", 
            "text": "clock: ( _ClockRealtime  val |  _ClockMonotonic  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Time/#returns_11", 
            "text": "( I64  val ,  I64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Time/#_query_performance_counter", 
            "text": "Return QPC and QPF.  fun box _query_performance_counter()\n: (U64 val , U64 val)", 
            "title": "_query_performance_counter"
        }, 
        {
            "location": "/time-Time/#returns_12", 
            "text": "( U64  val ,  U64  val)", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/", 
            "text": "Nanos\n\n\nCollection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.\n\n\nprimitive val Nanos\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew val create()\n: Nanos val^\n\n\n\n\nReturns\n\n\n\n\nNanos\n val^\n\n\n\n\n\n\nPublic Functions\n\n\nfrom_seconds\n\n\nfun box from_seconds(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis\n\n\nfun box from_millis(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros\n\n\nfun box from_micros(\n  t: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_seconds_f\n\n\nfun box from_seconds_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_millis_f\n\n\nfun box from_millis_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_micros_f\n\n\nfun box from_micros_f(\n  t: F64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nt: \nF64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nfrom_wall_clock\n\n\nfun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val\n\n\n\n\nParameters\n\n\n\n\nwall: (\nI64\n val , \nI64\n val)\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\neq\n\n\nfun box eq(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nne\n\n\nfun box ne(\n  that: Nanos val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nthat: \nNanos\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val", 
            "title": "primitive Nanos"
        }, 
        {
            "location": "/time-Nanos/#nanos", 
            "text": "Collection of utility functions for converting various durations of time\nto nanoseconds, for passing to other functions in the time package.  primitive val Nanos", 
            "title": "Nanos"
        }, 
        {
            "location": "/time-Nanos/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Nanos/#create", 
            "text": "new val create()\n: Nanos val^", 
            "title": "create"
        }, 
        {
            "location": "/time-Nanos/#returns", 
            "text": "Nanos  val^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-Nanos/#from_seconds", 
            "text": "fun box from_seconds(\n  t: U64 val)\n: U64 val", 
            "title": "from_seconds"
        }, 
        {
            "location": "/time-Nanos/#parameters", 
            "text": "t:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_1", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#from_millis", 
            "text": "fun box from_millis(\n  t: U64 val)\n: U64 val", 
            "title": "from_millis"
        }, 
        {
            "location": "/time-Nanos/#parameters_1", 
            "text": "t:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_2", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#from_micros", 
            "text": "fun box from_micros(\n  t: U64 val)\n: U64 val", 
            "title": "from_micros"
        }, 
        {
            "location": "/time-Nanos/#parameters_2", 
            "text": "t:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_3", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#from_seconds_f", 
            "text": "fun box from_seconds_f(\n  t: F64 val)\n: U64 val", 
            "title": "from_seconds_f"
        }, 
        {
            "location": "/time-Nanos/#parameters_3", 
            "text": "t:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_4", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#from_millis_f", 
            "text": "fun box from_millis_f(\n  t: F64 val)\n: U64 val", 
            "title": "from_millis_f"
        }, 
        {
            "location": "/time-Nanos/#parameters_4", 
            "text": "t:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_5", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#from_micros_f", 
            "text": "fun box from_micros_f(\n  t: F64 val)\n: U64 val", 
            "title": "from_micros_f"
        }, 
        {
            "location": "/time-Nanos/#parameters_5", 
            "text": "t:  F64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_6", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#from_wall_clock", 
            "text": "fun box from_wall_clock(\n  wall: (I64 val , I64 val))\n: U64 val", 
            "title": "from_wall_clock"
        }, 
        {
            "location": "/time-Nanos/#parameters_6", 
            "text": "wall: ( I64  val ,  I64  val)", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_7", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#eq", 
            "text": "fun box eq(\n  that: Nanos val)\n: Bool val", 
            "title": "eq"
        }, 
        {
            "location": "/time-Nanos/#parameters_7", 
            "text": "that:  Nanos  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_8", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Nanos/#ne", 
            "text": "fun box ne(\n  that: Nanos val)\n: Bool val", 
            "title": "ne"
        }, 
        {
            "location": "/time-Nanos/#parameters_8", 
            "text": "that:  Nanos  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Nanos/#returns_9", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Date/", 
            "text": "Date\n\n\nRepresents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.\n\n\nclass ref Date\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  seconds: I64 val = seq,\n  nanoseconds: I64 val = seq)\n: Date ref^\n\n\n\n\nParameters\n\n\n\n\nseconds: \nI64\n val = seq\n\n\nnanoseconds: \nI64\n val = seq\n\n\n\n\nReturns\n\n\n\n\nDate\n ref^\n\n\n\n\n\n\nPublic fields\n\n\n\n\nvar nsec: \nI32\n val\n\n\n\n\n\n\n\n\nvar sec: \nI32\n val\n\n\n\n\n\n\n\n\nvar min: \nI32\n val\n\n\n\n\n\n\n\n\nvar hour: \nI32\n val\n\n\n\n\n\n\n\n\nvar day_of_month: \nI32\n val\n\n\n\n\n\n\n\n\nvar month: \nI32\n val\n\n\n\n\n\n\n\n\nvar year: \nI32\n val\n\n\n\n\n\n\n\n\nvar day_of_week: \nI32\n val\n\n\n\n\n\n\n\n\nvar day_of_year: \nI32\n val\n\n\n\n\n\n\nPublic Functions\n\n\ntime\n\n\nReturn a POSIX time. Treats the date as UTC.\n\n\nfun box time()\n: I64 val\n\n\n\n\nReturns\n\n\n\n\nI64\n val\n\n\n\n\n\n\nnormal\n\n\nNormalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.\n\n\nfun ref normal()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nformat\n\n\nFormat the time as for strftime.\n\n\nfun box format(\n  fmt: String val)\n: String val\n\n\n\n\nParameters\n\n\n\n\nfmt: \nString\n val\n\n\n\n\nReturns\n\n\n\n\nString\n val", 
            "title": "class Date"
        }, 
        {
            "location": "/time-Date/#date", 
            "text": "Represents a proleptic Gregorian date and time, without specifying a\ntime zone. The day of month, month, day of week, and day of year are all\nindexed from 1, i.e. January is 1, Monday is 1.  class ref Date", 
            "title": "Date"
        }, 
        {
            "location": "/time-Date/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-Date/#create", 
            "text": "new ref create(\n  seconds: I64 val = seq,\n  nanoseconds: I64 val = seq)\n: Date ref^", 
            "title": "create"
        }, 
        {
            "location": "/time-Date/#parameters", 
            "text": "seconds:  I64  val = seq  nanoseconds:  I64  val = seq", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Date/#returns", 
            "text": "Date  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Date/#public-fields", 
            "text": "var nsec:  I32  val     var sec:  I32  val     var min:  I32  val     var hour:  I32  val     var day_of_month:  I32  val     var month:  I32  val     var year:  I32  val     var day_of_week:  I32  val     var day_of_year:  I32  val", 
            "title": "Public fields"
        }, 
        {
            "location": "/time-Date/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-Date/#time", 
            "text": "Return a POSIX time. Treats the date as UTC.  fun box time()\n: I64 val", 
            "title": "time"
        }, 
        {
            "location": "/time-Date/#returns_1", 
            "text": "I64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Date/#normal", 
            "text": "Normalise all the fields of the date. For example, if the hour is 24, it is\nset to 0 and the day is advanced. This allows fields to be changed naively,\neg. adding 1000 to hours to advance the time by 1000 hours, and then\nnormalising the date.  fun ref normal()\n: None val", 
            "title": "normal"
        }, 
        {
            "location": "/time-Date/#returns_2", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-Date/#format", 
            "text": "Format the time as for strftime.  fun box format(\n  fmt: String val)\n: String val", 
            "title": "format"
        }, 
        {
            "location": "/time-Date/#parameters_1", 
            "text": "fmt:  String  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-Date/#returns_3", 
            "text": "String  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/", 
            "text": "_TimingWheel\n\n\nA timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.\n\n\nclass ref _TimingWheel\n\n\n\n\nConstructors\n\n\ncreate\n\n\nnew ref create(\n  index: USize val)\n: _TimingWheel ref^\n\n\n\n\nParameters\n\n\n\n\nindex: \nUSize\n val\n\n\n\n\nReturns\n\n\n\n\n_TimingWheel\n ref^\n\n\n\n\n\n\nPublic Functions\n\n\nschedule\n\n\nSchedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.\n\n\nfun ref schedule(\n  timer: Timer ref)\n: None val\n\n\n\n\nParameters\n\n\n\n\ntimer: \nTimer\n ref\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nadvance\n\n\nRemove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.\n\n\nfun ref advance(\n  list: List[Timer ref] ref,\n  current: U64 val,\n  elapsed: U64 val)\n: Bool val\n\n\n\n\nParameters\n\n\n\n\nlist: \nList\n[\nTimer\n ref] ref\n\n\ncurrent: \nU64\n val\n\n\nelapsed: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nBool\n val\n\n\n\n\n\n\nnext\n\n\nGiven a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.\n\n\nfun box next(\n  current: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ncurrent: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\nclear\n\n\nCancels all pending timers.\n\n\nfun ref clear()\n: None val\n\n\n\n\nReturns\n\n\n\n\nNone\n val\n\n\n\n\n\n\nPrivate Functions\n\n\n_slot\n\n\nReturn the slot for a given time.\n\n\nfun box _slot(\n  time: U64 val)\n: U64 val\n\n\n\n\nParameters\n\n\n\n\ntime: \nU64\n val\n\n\n\n\nReturns\n\n\n\n\nU64\n val\n\n\n\n\n\n\n_bits\n\n\nfun tag _bits()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_max\n\n\nfun tag _max()\n: USize val\n\n\n\n\nReturns\n\n\n\n\nUSize\n val\n\n\n\n\n\n\n_mask\n\n\nfun tag _mask()\n: U64 val\n\n\n\n\nReturns\n\n\n\n\nU64\n val", 
            "title": "class _TimingWheel"
        }, 
        {
            "location": "/time-_TimingWheel/#_timingwheel", 
            "text": "A timing wheel in a hierarchical set of timing wheels. Each wheel covers 6\nbits of precision.  class ref _TimingWheel", 
            "title": "_TimingWheel"
        }, 
        {
            "location": "/time-_TimingWheel/#constructors", 
            "text": "", 
            "title": "Constructors"
        }, 
        {
            "location": "/time-_TimingWheel/#create", 
            "text": "new ref create(\n  index: USize val)\n: _TimingWheel ref^", 
            "title": "create"
        }, 
        {
            "location": "/time-_TimingWheel/#parameters", 
            "text": "index:  USize  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_TimingWheel/#returns", 
            "text": "_TimingWheel  ref^", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#public-functions", 
            "text": "", 
            "title": "Public Functions"
        }, 
        {
            "location": "/time-_TimingWheel/#schedule", 
            "text": "Schedule a timer on this wheel. Mark the bit indicating that the given slot\nhas timers in its list.  fun ref schedule(\n  timer: Timer ref)\n: None val", 
            "title": "schedule"
        }, 
        {
            "location": "/time-_TimingWheel/#parameters_1", 
            "text": "timer:  Timer  ref", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_1", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#advance", 
            "text": "Remove pending timers from this timing wheel and put them on the pending\nlist supplied. Needs the current time and the elapsed time since the\nprevious advance. Returns true if the next timing wheel in the hierarchy\nshould be advanced.  fun ref advance(\n  list: List[Timer ref] ref,\n  current: U64 val,\n  elapsed: U64 val)\n: Bool val", 
            "title": "advance"
        }, 
        {
            "location": "/time-_TimingWheel/#parameters_2", 
            "text": "list:  List [ Timer  ref] ref  current:  U64  val  elapsed:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_2", 
            "text": "Bool  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#next", 
            "text": "Given a current time, return the next time at which this timing wheel\nshould be advanced. Returns -1 if no timers are on this timing wheel.  fun box next(\n  current: U64 val)\n: U64 val", 
            "title": "next"
        }, 
        {
            "location": "/time-_TimingWheel/#parameters_3", 
            "text": "current:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_3", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#clear", 
            "text": "Cancels all pending timers.  fun ref clear()\n: None val", 
            "title": "clear"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_4", 
            "text": "None  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#private-functions", 
            "text": "", 
            "title": "Private Functions"
        }, 
        {
            "location": "/time-_TimingWheel/#_slot", 
            "text": "Return the slot for a given time.  fun box _slot(\n  time: U64 val)\n: U64 val", 
            "title": "_slot"
        }, 
        {
            "location": "/time-_TimingWheel/#parameters_4", 
            "text": "time:  U64  val", 
            "title": "Parameters"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_5", 
            "text": "U64  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#_bits", 
            "text": "fun tag _bits()\n: USize val", 
            "title": "_bits"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_6", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#_max", 
            "text": "fun tag _max()\n: USize val", 
            "title": "_max"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_7", 
            "text": "USize  val", 
            "title": "Returns"
        }, 
        {
            "location": "/time-_TimingWheel/#_mask", 
            "text": "fun tag _mask()\n: U64 val", 
            "title": "_mask"
        }, 
        {
            "location": "/time-_TimingWheel/#returns_8", 
            "text": "U64  val", 
            "title": "Returns"
        }
    ]
}